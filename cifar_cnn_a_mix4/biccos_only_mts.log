Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  verify_onnxruntime_output: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  prepare_only: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: ablation_results/cifar_cnn_a_mix4/biccos_only_mts.out
  root_path: ''
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: false
  output_file: out.pkl
  return_optimized_model: false
model:
  name: cnn_4layer_mix4
  path: models/sdp/cifar_cnn_a_mix4.model
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: []
  onnx_vnnlib_joint_optimization_flags: none
  check_optimized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.00784313725
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 4096
  auto_enlarge_batch_size: true
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    relu_option: adaptive
    compare_crown_with_ibp: false
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: []
    max_time: 1.0
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    max_dim: 10000
    reset_threshold: 1.0
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    unstable_neuron_threshold: 0
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
    topk_filter: 1.0
    sliding_window: -1
    extra_constraint: false
    refine_neuron_timeout_increasement: 0
    timeout_neuron_percentage: 0.3
    remaining_timeout_threshold: 1
    remove_unstable_neurons: false
    lp_solver: mip
    output_cut: false
bab:
  initial_max_domains: 1
  backing_up_max_domain: null
  max_domains: .inf
  decision_thresh: 0
  timeout: 200
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: false
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  tree_traversal: breadth_first
  cut:
    enabled: true
    cuts_path: /tmp/abcrown_cuts_21501
    implication: false
    bab_cut: true
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 0.99
    iteration: 200
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.05
    number_cuts: 500
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
    biccos:
      enabled: true
      auto_param: false
      constraint_strengthening: false
      recursively_strengthening: false
      merge_cut_enabled: false
      fast_inference_enabled: false
      drop_ratio: 0.5
      max_infer_iter: 40
      heuristic: neuron_influence_score
      save_cuts: false
      multi_tree_branching:
        enabled: true
        restore_best_tree: true
        keep_n_best_domains: 50
        target_batch_size: 200
        iterations: 5
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      filter: false
      filter_beta: false
      filter_clamp: false
      filter_batch_size: 10000
      filter_iterations: 25
      relu_only: false
      loose_tanh_threshold: null
      dynamic_bbps: false
      dynamic_options: [uniform, three_left, three_right]
      branching_point_node: ''
      branching_point_db: []
    input_split:
      enable_clip_domains: false
      split_hint: null
      reorder_bab: false
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_sum: false
      sb_primary_spec: null
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_iters: 1000000000.0
      bf_batch_size: 100000
      bf_zero_crossing_score: false
      touch_zero_score: 0
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 0.001
      sort_index: null
      sort_descending: true
      show_progress: false
      presplit_domains: null
      skip_getting_worst_domain: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: middle
  pgd_steps: 100
  pgd_restarts: 50
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_alpha_scale: false
  pgd_loss_mode: null
  pgd_restart_when_stuck: false
  enable_mip_attack: false
  adv_saver: default_adv_saver
  adv_verifier: default_adv_verifier
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    enabled: auto
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false
  biccos_mip_sanity_check: false
  sanity_check: 0
  z_split_enabled: false

Experiments at Wed Oct 30 13:00:28 2024 on r23g0004.hpc.itc.rwth-aachen.de
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten(start_dim=1, end_dim=-1)
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
Parameters:
  0.weight: shape torch.Size([16, 3, 4, 4])
  0.bias: shape torch.Size([16])
  2.weight: shape torch.Size([32, 16, 4, 4])
  2.bias: shape torch.Size([32])
  5.weight: shape torch.Size([100, 2048])
  5.bias: shape torch.Size([100])
  7.weight: shape torch.Size([10, 100])
  7.bias: shape torch.Size([10])
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308715)
############################
Internal results will be saved to ablation_results/cifar_cnn_a_mix4/biccos_only_mts.out.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.71758652, -10.60625553,  -8.48054504,  -7.71353006,  -8.18405724,
          -8.17642593,  -8.98493576,  -8.79066181, -11.70876884, -10.32774353]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [744]; unstable size 744; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 150, 1, 744] with unstable size 149 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 744] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 744] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [149]; unstable size 149; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 149] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.43510044, 2.04025769, 0.39722502, 0.03137332, 0.32232404, 0.68482673,
         0.70088995, 3.05900311, 1.95558977]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 1.1311 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.86604881, -21.89766502, -32.18166733, -30.40774727, -31.19883347,
         -31.09389877, -30.58707047, -32.34036255, -29.66195297, -22.73365021]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [681]; unstable size 681; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 237, 1, 681] with unstable size 236 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 681] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 681] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [236]; unstable size 236; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 236] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 236] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.86854863, -1.72656679,  7.80241489,  6.11302614,  6.77265596,
          6.66194582,  6.08438683,  7.59612942,  5.53368568]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.86604881, -21.89766502, -32.18166733, -30.40774727, -31.19883347,
         -31.09389877, -30.58707047, -32.34036255, -29.66195297, -22.73365021]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.86604881, -21.89766502, -32.18166733, -30.40774727, -31.19883347,
          -31.09389877, -30.58707047, -32.34036255, -29.66195297, -22.73365021]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.83598518]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.46507931, -1.30634916, -1.32222211,  ...,  0.10634929,
             0.02698422,  0.04285724],
           [-1.25873005, -1.35396814, -1.40158725,  ...,  0.31269848,
             0.28095245,  0.28095245],
           [ 0.15396833,  0.42380959,  0.29682547,  ..., -0.00476181,
            -0.17936498, -0.24285704],
           ...,
           [-0.86190474, -0.60793650, -0.38571417,  ...,  0.91587305,
             0.82063496,  0.83650798],
           [-0.43333322, -0.30634910, -0.22698402,  ...,  0.90000004,
             0.77301592,  0.75714290],
           [-0.33809513, -0.30634910, -0.27460307,  ...,  0.88412702,
             0.78888893,  0.67777783]],

          [[-1.44927526, -1.28824472, -1.30434775,  ...,  0.20933989,
             0.14492765,  0.20933989],
           [-1.35265696, -1.36875999, -1.33655393,  ...,  0.37037048,
             0.35426742,  0.40257660],
           [-1.32045078, -1.35265696, -1.41706920,  ...,  0.04830930,
            -0.14492741, -0.24154577],
           ...,
           [-0.75684375, -0.51529789, -0.30595800,  ...,  0.91787446,
             0.83735919,  0.90177143],
           [-0.32206106, -0.19323659, -0.14492741,  ...,  0.90177143,
             0.78904998,  0.82125610],
           [-0.17713353, -0.17713353, -0.16103047,  ...,  0.90177143,
             0.78904998,  0.74074084]],

          [[-1.54272878, -1.49775124, -1.49775124,  ...,  0.42128953,
             0.34632701,  0.37631202],
           [-1.51274371, -1.55772126, -1.52773619,  ...,  0.52623707,
             0.49625200,  0.49625200],
           [-1.13793111, -1.09295356, -1.12293863,  ...,  0.09145443,
            -0.08845562, -0.19340314],
           ...,
           [-0.59820086, -0.43328333, -0.28335828,  ...,  0.88605714,
             0.81109464,  0.88605714],
           [-0.23838064, -0.14842562, -0.11844061,  ...,  0.85607213,
             0.76611710,  0.81109464],
           [-0.07346311, -0.10344811, -0.08845562,  ...,  0.75112462,
             0.79610211,  0.73613209]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0592 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.40543556, -20.17714310, -24.91600418, -24.17427254, -23.62779045,
         -24.44828224, -24.39273453, -25.42860413, -22.45011139, -21.93351555]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [974]; unstable size 974; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 268, 1, 974] with unstable size 267 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 974] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 974] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [267]; unstable size 267; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 267] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 267] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.48544836,  2.23013401,  1.58959103,  1.19109154,  1.84306049,
          1.51451588,  3.08925176,  0.10891056,  0.42558649]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.40543556, -20.17714310, -24.91600418, -24.17427254, -23.62779045,
         -24.44828224, -24.39273453, -25.42860413, -22.45011139, -21.93351555]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  2.78it/s]100%|██████████| 1/1 [00:00<00:00,  2.78it/s]
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/cuts/infered_cuts.py:406: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(history[3]),
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.96112823, -19.53406715, -23.43943405, -22.77491570, -22.15659523,
          -23.06166649, -22.97703743, -23.94551468, -21.15086555, -20.97314644]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.42706108]]], device='cuda:0')
number of violation:  0
Attack finished in 0.3631 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 12.32878303527832
alpha/beta optimization time: 3.671778678894043
initial alpha-crown bounds: tensor([[-0.41349983,  2.33963680,  1.68941736,  1.28609228,  1.95209122,
          1.58836699,  3.19598079,  0.21351385,  0.47718394]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.4134998321533203
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 195.9179310798645
Verifying property 0 with 1 instances.
##### Instance 2 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.41349983]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.40543556, -20.17714310, -24.91600418, -24.17427254, -23.62779045,
        -24.44828224, -24.39273453, -25.42860413, -22.45011139, -21.93351555],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.41349983]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 974
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 263
Node /15 input 0: size torch.Size([100]) unstable 22
-----------------
# of unstable neurons: 1259
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001239776611328125
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4134941101074219
10 lb beta sum: 0.0, worst -0.4135160446166992
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.5577    transfer 0.0001    finalize 0.0003    func 0.5583    
Accumulated time: func 0.5583    prepare 0.0002    bound 0.5577    transfer 0.0001    finalize 0.0003    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] 
split level 1: [/input-12, 6] 
split level 2: [/input-12, 79] 
split level 3: [/input-12, 67] 
split level 4: [/input-12, 24] 
split level 5: [/input-12, 90] 
split level 6: [/input-8, 1963] 
split level 7: [/input-12, 53] 
split level 8: [/input-12, 64] 
split level 9: [/input-12, 29] 
split level 10: [/input-12, 71] 
split level 11: [/input-8, 1964] 
split level 12: [/input-8, 1956] 
split level 13: [/input-12, 57] 
split level 14: [/input-8, 1133] 
split level 15: [/input-8, 1948] 
split level 16: [/input-8, 853] 
split level 17: [/input-8, 852] 
split level 18: [/input-8, 857] 
split level 19: [/input-8, 425] 
split level 20: [/input-8, 165] 
split level 21: [/input-8, 379] 
split level 22: [/input-8, 157] 
split level 23: [/input-8, 155] 
split level 24: [/input-8, 282] 
split level 25: [/input-8, 314] 
split level 26: [/input-8, 854] 
split level 27: [/input-8, 1719] 
split level 28: [/input-8, 922] 
split level 29: [/input-8, 421] 
split level 30: [/input-8, 290] 
split level 31: [/input-8, 619] 
split level 32: [/input-8, 1932] 
split level 33: [/input-8, 424] 
split level 34: [/input-8, 603] 
split level 35: [/input-8, 1236] 
split level 36: [/input-8, 317] 
split level 37: [/input-8, 745] 
split level 38: [/input-8, 617] 
split level 39: [/input-8, 154] 
split level 40: [/input-8, 618] 
split level 41: [/input-8, 1709] 
split level 42: [/input-8, 439] 
split level 43: [/input, 3542] 
split level 44: [/input-8, 928] 
split level 45: [/input, 3557] 
split level 46: [/input-8, 614] 
split level 47: [/input-8, 1763] 
split level 48: [/input-8, 1393] 
split level 49: [/input-8, 432] 
split level 50: [/input-8, 749] 
split level 51: [/input-8, 377] 
split level 52: [/input-8, 1698] 
split level 53: [/input-8, 416] 
split level 54: [/input-8, 105] 
split level 55: [/input-8, 318] 
split level 56: [/input-8, 1649] 
split level 57: [/input-8, 422] 
split level 58: [/input-8, 372] 
split level 59: [/input-8, 1701] 
split level 60: [/input-8, 313] 
split level 61: [/input-8, 1931] 
split level 62: [/input-8, 1625] 
split level 63: [/input-8, 858] 
split level 64: [/input-8, 1702] 
split level 65: [/input-8, 1700] 
split level 66: [/input-8, 1764] 
split level 67: [/input-8, 410] 
split level 68: [/input-8, 1235] 
split level 69: [/input, 3541] 
split level 70: [/input, 3958] 
split level 71: [/input-8, 316] 
split level 72: [/input-8, 414] 
split level 73: [/input-8, 371] 
split level 74: [/input-8, 1617] 
split level 75: [/input-8, 1650] 
split level 76: [/input-8, 1585] 
split level 77: [/input-8, 1040] 
split level 78: [/input-8, 408] 
split level 79: [/input-8, 1705] 
split level 80: [/input-8, 1704] 
split level 81: [/input-8, 1125] 
split level 82: [/input, 3573] 
split level 83: [/input-8, 1210] 
split level 84: [/input, 3560] 
split level 85: [/input, 2726] 
split level 86: [/input, 3558] 
split level 87: [/input, 3564] 
split level 88: [/input-8, 92] 
split level 89: [/input, 998] 
split level 90: [/input, 1016] 
split level 91: [/input, 3789] 
split level 92: [/input, 3575] 
split level 93: [/input, 1004] 
split level 94: [/input-8, 1628] 
split level 95: [/input-8, 1314] 
split level 96: [/input-8, 904] 
split level 97: [/input, 1003] 
split level 98: [/input-8, 981] 
split level 99: [/input, 3559] 
split level 100: [/input-12, 12] 
split level 101: [/input, 1483] 
split level 102: [/input, 3447] 
split level 103: [/input-8, 1619] 
split level 104: [/input, 1444] 
split level 105: [/input, 3578] 
split level 106: [/input, 3581] 
split level 107: [/input, 164] 
split level 108: [/input, 3556] 
split level 109: [/input-8, 381] 
split level 110: [/input, 3555] 
split level 111: [/input, 1002] 
split level 112: [/input, 1021] 
split level 113: [/input, 1948] 
split level 114: [/input, 995] 
split level 115: [/input, 3237] 
split level 116: [/input, 3572] 
split level 117: [/input-8, 1610] 
split level 118: [/input-8, 828] 
split level 119: [/input, 1457] 
split level 120: [/input-8, 973] 
split level 121: [/input, 1943] 
split level 122: [/input, 3543] 
split level 123: [/input-8, 1535] 
split level 124: [/input, 3553] 
split level 125: [/input, 1484] 
split level 126: [/input-8, 370] 
split level 127: [/input, 3574] 
split level 128: [/input-8, 412] 
split level 129: [/input-8, 2045] 
split level 130: [/input-8, 810] 
split level 131: [/input-8, 1712] 
split level 132: [/input, 2537] 
split level 133: [/input-8, 949] 
split level 134: [/input-8, 475] 
split level 135: [/input, 2503] 
split level 136: [/input, 2282] 
split level 137: [/input, 3540] 
split level 138: [/input, 2538] 
split level 139: [/input, 2519] 
split level 140: [/input, 494] 
split level 141: [/input-8, 415] 
split level 142: [/input, 2553] 
split level 143: [/input, 3554] 
split level 144: [/input, 1970] 
split level 145: [/input, 2786] 
split level 146: [/input, 2551] 
split level 147: [/input, 2552] 
split level 148: [/input, 1947] 
split level 149: [/input, 1758] 
split level 150: [/input-8, 1713] 
split level 151: [/input, 2788] 
split level 152: [/input, 2266] 
split level 153: [/input, 2279] 
split level 154: [/input-12, 36] 
split level 155: [/input, 3537] 
split level 156: [/input-8, 1609] 
split level 157: [/input, 888] 
split level 158: [/input-8, 1369] 
split level 159: [/input, 3241] 
split level 160: [/input, 3570] 
split level 161: [/input, 2991] 
split level 162: [/input, 3571] 
split level 163: [/input, 2769] 
split level 164: [/input, 872] 
split level 165: [/input-8, 818] 
split level 166: [/input-8, 980] 
split level 167: [/input-8, 1620] 
split level 168: [/input, 3569] 
split level 169: [/input, 3873] 
split level 170: [/input-8, 162] 
split level 171: [/input, 3269] 
split level 172: [/input, 1000] 
split level 173: [/input, 3041] 
split level 174: [/input, 2555] 
split level 175: [/input, 2182] 
split level 176: [/input-8, 466] 
split level 177: [/input-8, 1708] 
split level 178: [/input, 3469] 
split level 179: [/input, 2534] 
split level 180: [/input-8, 401] 
split level 181: [/input, 2682] 
split level 182: [/input-8, 168] 
split level 183: [/input, 2529] 
split level 184: [/input, 2214] 
split level 185: [/input, 2004] 
split level 186: [/input, 1950] 
split level 187: [/input-8, 1924] 
split level 188: [/input-8, 407] 
split level 189: [/input, 1917] 
split level 190: [/input, 3282] 
split level 191: [/input, 2278] 
split level 192: [/input, 2275] 
split level 193: [/input-8, 1611] 
split level 194: [/input, 1999] 
split level 195: [/input, 2583] 
split level 196: [/input, 2006] 
split level 197: [/input, 3161] 
split level 198: [/input, 1698] 
split level 199: [/input, 2260] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.41329383850097656
10 lb beta sum: 0.0, worst -0.4132542610168457
Time: prepare 0.0114    bound 0.1349    transfer 0.0036    finalize 0.0032    func 0.1558    
Accumulated time: func 0.7141    prepare 0.0216    bound 0.6926    transfer 0.0037    finalize 0.0035    
all_split False
======================Cut inference begins======================
max lb tensor(0.27172995) min lb tensor(-0.41324806)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.01165771484375 
BICCOS Cumulative time: 0.01165771484375
Preprocessing time: 0.010003328323364258 Inference time: 0.0013003349304199219 Add cuts time: 8.153915405273438e-05 Cut analysis time: 0.00027251243591308594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.39415 (1), -0.39300 (1), -0.39261 (1), -0.39248 (1), -0.39090 (1), -0.39077 (1), -0.39066 (1), -0.38895 (1), -0.38807 (1), -0.38751 (1), -0.38648 (1), -0.38566 (1), -0.38450 (1), -0.38403 (1), -0.38378 (1), -0.38222 (1), -0.38198 (1), -0.38050 (1), -0.37986 (1), -0.37857 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5401    set_bounds 0.0082    solve 0.1559    add 0.0669    
Accumulated time: pickout 0.0004    decision 0.5401    set_bounds 0.0082    solve 0.1559    add 0.0669    
Current (lb-rhs): -0.39414548873901367
50 domains visited
Cumulative time: 1.3703570365905762

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 79] [/input-12, 79] [/input-12, 67] [/input-12, 67] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 6] 
split level 2: [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] 
split level 3: [/input-12, 53] [/input-12, 53] [/input-12, 64] [/input-12, 64] [/input-12, 53] [/input-12, 53] [/input-12, 64] [/input-12, 64] [/input-12, 53] [/input-12, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3831214904785156
10 lb beta sum: 0.3769442141056061, worst -0.37988758087158203
Time: prepare 0.0073    bound 1.2116    transfer 0.0017    finalize 0.0024    func 1.2257    
Accumulated time: func 1.9399    prepare 0.0291    bound 1.9042    transfer 0.0054    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.66269636) min lb tensor(-0.37981319)
Number of Verified Splits: 51 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01488041877746582 
BICCOS Cumulative time: 0.02653813362121582
Preprocessing time: 0.01154780387878418 Inference time: 0.0018219947814941406 Add cuts time: 0.0011632442474365234 Cut analysis time: 0.00034737586975097656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21197 (2), -0.20931 (2), -0.20674 (2), -0.20533 (2), -0.20519 (2), -0.20485 (2), -0.20467 (2), -0.20360 (2), -0.20353 (2), -0.20270 (2), -0.20237 (2), -0.20110 (2), -0.19950 (2), -0.19931 (2), -0.19782 (2), -0.19747 (2), -0.19484 (2), -0.19452 (2), -0.19349 (2), -0.19341 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0218    set_bounds 0.0121    solve 1.2258    add 0.0778    
Accumulated time: pickout 0.0014    decision 0.5619    set_bounds 0.0203    solve 1.3817    add 0.1447    
Current (lb-rhs): -0.21196985244750977
100 domains visited
Cumulative time: 2.7240962982177734

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 6] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 67] [/input-12, 67] [/input-12, 79] [/input-12, 67] [/input-12, 79] [/input-12, 67] 
split level 2: [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 3: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 53] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2150273323059082
10 lb beta sum: 0.4623962938785553, worst -0.20325803756713867
Time: prepare 0.0064    bound 0.1179    transfer 0.0011    finalize 0.0027    func 0.1308    
Accumulated time: func 2.0707    prepare 0.0358    bound 2.0222    transfer 0.0066    finalize 0.0086    
all_split False
======================Cut inference begins======================
max lb tensor(0.70531803) min lb tensor(-0.19990596)
Number of Verified Splits: 88 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.017566442489624023 
BICCOS Cumulative time: 0.044104576110839844
Preprocessing time: 0.011357784271240234 Inference time: 0.003838777542114258 Add cuts time: 0.002102375030517578 Cut analysis time: 0.0002675056457519531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08874 (3), -0.08830 (3), -0.08755 (3), -0.08717 (3), -0.08681 (3), -0.08672 (3), -0.08661 (3), -0.08639 (3), -0.08602 (3), -0.08597 (3), -0.08484 (3), -0.08484 (3), -0.08444 (3), -0.08430 (3), -0.08343 (3), -0.08329 (3), -0.08178 (3), -0.07974 (3), -0.07902 (3), -0.07877 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0200    set_bounds 0.0149    solve 0.1309    add 0.0854    
Accumulated time: pickout 0.0024    decision 0.5819    set_bounds 0.0352    solve 1.5126    add 0.2301    
Current (lb-rhs): -0.08874240517616272
150 domains visited
Cumulative time: 2.9940717220306396

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] 
split level 2: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 3: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10748434066772461
10 lb beta sum: 0.560276985168457, worst -0.08920201659202576
Time: prepare 0.0065    bound 0.1207    transfer 0.0026    finalize 0.0024    func 0.1349    
Accumulated time: func 2.2056    prepare 0.0425    bound 2.1429    transfer 0.0092    finalize 0.0110    
all_split False
======================Cut inference begins======================
max lb tensor(0.20601039) min lb tensor(-0.08702350)
Number of Verified Splits: 218 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 6
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.028006792068481445 
BICCOS Cumulative time: 0.07211136817932129
Preprocessing time: 0.011472702026367188 Inference time: 0.011669397354125977 Add cuts time: 0.0044400691986083984 Cut analysis time: 0.0004246234893798828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02503 (4), -0.02441 (4), -0.02381 (4), -0.02324 (4), -0.02232 (4), -0.01958 (4), -0.01941 (4), -0.01929 (4), -0.01929 (4), -0.01891 (4), -0.01864 (4), -0.01828 (4), -0.01790 (4), -0.01734 (4), -0.01725 (4), -0.01719 (4), -0.01712 (4), -0.01707 (4), -0.01702 (4), -0.01689 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0151    solve 0.1350    add 0.2289    
Accumulated time: pickout 0.0034    decision 0.6013    set_bounds 0.0503    solve 1.6476    add 0.4589    
Current (lb-rhs): -0.02503344416618347
200 domains visited
Cumulative time: 3.421731472015381

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 29] [/input-12, 29] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 2: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 71] [/input-12, 71] [/input-8, 1964] [/input-8, 1964] [/input-12, 71] [/input-12, 71] 
split level 3: [/input-12, 71] [/input-12, 71] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-12, 71] [/input-12, 71] [/input-8, 1964] [/input-8, 1964] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04514360427856445
10 lb beta sum: 0.43957647681236267, worst -0.02308034896850586
Time: prepare 0.0067    bound 1.3492    transfer 0.0022    finalize 0.0023    func 1.3638    
Accumulated time: func 3.5694    prepare 0.0495    bound 3.4920    transfer 0.0114    finalize 0.0133    
all_split False
======================Cut inference begins======================
max lb tensor(0.12596655) min lb tensor(-0.01540470)
Number of Verified Splits: 385 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 9
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.04332375526428223 
BICCOS Cumulative time: 0.11543512344360352
Preprocessing time: 0.011704206466674805 Inference time: 0.02181220054626465 Add cuts time: 0.009280204772949219 Cut analysis time: 0.0005271434783935547
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0200    set_bounds 0.0148    solve 1.3640    add 0.0268    
Accumulated time: pickout 0.0044    decision 0.6213    set_bounds 0.0651    solve 3.0116    add 0.4858    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 56]), tensor([-1., -1.]), tensor([0, 0]), tensor([0.03876786, 0.01433854]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 56]), tensor([-1.,  1.]), tensor([0, 0]), tensor([0.03876786, 0.98579317]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 29, 56]), tensor([ 1., -1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.40811899e-36, 9.74970311e-02, 7.81897902e-02, 6.25125468e-02,
        3.96190062e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 29, 56]), tensor([ 1., -1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.40811899e-36, 9.74970311e-02, 7.81897902e-02, 6.25125468e-02,
        1.14637420e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 29, 56]), tensor([ 1., -1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.40811899e-36, 9.74970311e-02, 7.81897902e-02, 6.33608401e-02,
        4.73436341e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 29, 56]), tensor([ 1., -1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.40811899e-36, 9.74970311e-02, 7.81897902e-02, 6.33608401e-02,
        1.18038222e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.40811899e-36, 9.74970311e-02, 5.11672199e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 64, 56]), tensor([ 1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.40811899e-36, 9.43451375e-02, 7.29214251e-02, 6.44497275e-02,
        2.27932795e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 64, 56]), tensor([ 1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.40811899e-36, 9.43451375e-02, 7.29214251e-02, 6.44497275e-02,
        1.16165683e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 64, 56]), tensor([ 1.,  1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.40811899e-36, 9.43451375e-02, 7.29214251e-02, 6.80879951e-02,
        2.68130167e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 64, 56]), tensor([ 1.,  1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.40811899e-36, 9.43451375e-02, 7.29214251e-02, 6.80879951e-02,
        1.13003775e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([2.40811899e-36, 9.43451375e-02, 5.42607456e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.36418867111206055
10 lb beta sum: 0.571523904800415, worst -0.34502506256103516
Time: prepare 0.0005    bound 0.1368    transfer 0.0002    finalize 0.0002    func 0.1378    
Accumulated time: func 3.7072    prepare 0.0500    bound 3.6288    transfer 0.0115    finalize 0.0135    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 79] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 67] [/input-12, 64] [/input-12, 64] 
split level 2: [/input-12, 53] [/input-12, 29] [/input-12, 71] 
split level 3: [/input-12, 64] [/input-12, 71] [/input-12, 29] 
split level 4: [/input-12, 29] [/input-8, 1964] [/input-8, 1964] 
split level 5: [/input-12, 71] [/input-8, 1956] [/input-8, 1956] 
split level 6: [/input-8, 1956] [/input-8, 1948] [/input-8, 1948] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8771228790283203, worst -0.037012577056884766
10 lb beta sum: 0.8771164417266846, worst -0.03567171096801758
Time: prepare 0.0167    bound 0.1369    transfer 0.0011    finalize 0.0020    func 0.1591    
Accumulated time: func 3.8663    prepare 0.0670    bound 3.7658    transfer 0.0126    finalize 0.0155    
all_split False
======================Cut inference begins======================
max lb tensor(0.55729246) min lb tensor(-0.03531837)
Number of Verified Splits: 358 of 384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 9
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.00034618377685546875 
BICCOS Cumulative time: 0.11578130722045898
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03532 (7), -0.03087 (7), -0.03009 (7), -0.03004 (7), -0.02788 (7), -0.02460 (7), -0.02212 (7), -0.02056 (7), -0.01997 (7), -0.01839 (7), -0.01821 (7), -0.01433 (7), -0.01093 (7), -0.00978 (7), -0.00931 (7), -0.00804 (7), -0.00700 (7), -0.00691 (7), -0.00607 (7), -0.00447 (7), 
Length of domains: 26
Time: pickout 0.0005    decision 0.0202    set_bounds 0.0336    solve 0.1592    add 0.0101    
Accumulated time: pickout 0.0049    decision 0.6415    set_bounds 0.0987    solve 3.1708    add 0.4959    
Current (lb-rhs): -0.03531837463378906
226 domains visited
Cumulative time: 5.2815022468566895

BaB round 2
batch: 26
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1964] [/input-8, 1964] [/input-12, 57] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] 
split level 1: [/input-12, 57] [/input-12, 57] [/input-8, 1964] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] 
split level 2: [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119797468185425, worst 0.010750293731689453

all verified at 0th iter
Time: prepare 0.0092    bound 0.0070    transfer 0.0006    finalize 0.0011    func 0.0193    
Accumulated time: func 3.8855    prepare 0.0764    bound 3.7728    transfer 0.0132    finalize 0.0166    
all_split False
======================Cut inference begins======================
max lb tensor(0.36306190) min lb tensor(0.01075029)
Number of Verified Splits: 208 of 208
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 9
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.000324249267578125 
BICCOS Cumulative time: 0.11610555648803711
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0013    decision 0.0148    set_bounds 0.0166    solve 0.0193    add 0.0001    
Accumulated time: pickout 0.0062    decision 0.6563    set_bounds 0.1153    solve 3.1901    add 0.4959    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
226 domains visited
Cumulative time: 5.334564924240112


Properties batch 1, size 1
Remaining timeout: 190.41246366500854
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 190.41237545013428
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 190.41234922409058
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 190.41232752799988
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 190.41230726242065
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 190.41228675842285
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 190.41225409507751
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 190.4122314453125
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 9.5884 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.49797249, -32.02593231, -24.13653946, -24.35863113, -22.85143471,
         -23.68348503, -27.44120789, -21.38064575, -32.04727936, -30.62964058]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [524]; unstable size 524; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 231, 1, 524] with unstable size 230 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 524] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 524] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [230]; unstable size 230; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 230] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 230] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 5.57842255,  7.92652655,  0.44128621,  0.66715562, -0.01040864,
          3.37060857, -2.14889312,  8.08667374,  6.50471687]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-29.49797249, -32.02593231, -24.13653946, -24.35863113, -22.85143471,
         -23.68348503, -27.44120789, -21.38064575, -32.04727936, -30.62964058]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.49797440, -32.02593613, -24.13653946, -24.35863304, -22.85143471,
          -23.68348312, -27.44120789, -21.38064194, -32.04728317, -30.62964058],
         [-29.49797440, -32.02593613, -24.13653946, -24.35863304, -22.85143471,
          -23.68348312, -27.44120789, -21.38064194, -32.04728317, -30.62964058]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.83204842, -1.47079277]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]],


         [[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0541 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 4, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.15470314, -20.96789932, -15.15356350, -17.63923645, -15.52186012,
         -17.33632088, -16.64702988, -17.53084564, -21.19912529, -20.21182442]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [586]; unstable size 586; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 241, 1, 586] with unstable size 240 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 586] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 586] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [240]; unstable size 240; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 240] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 240] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.88010192,  3.64075136, -1.31467080,  1.09980774,  0.71520233,
          0.08684707,  0.73927259,  3.52310181,  2.98584604]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-18.15470314, -20.96789932, -15.15356350, -17.63923645, -15.52186012,
         -17.33632088, -16.64702988, -17.53084564, -21.19912529, -20.21182442]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-18.15470314, -20.96789932, -15.15356350, -17.63923645, -15.52186012,
          -17.33632088, -16.64702988, -17.53084564, -21.19912529, -20.21182442]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.36829662]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.45555562,  0.47142863,  0.50317466,  ...,  0.23333341,
             0.16984135, -0.06825387],
           [ 0.37619054,  0.55079371,  0.91587305,  ...,  0.39206356,
             0.59841275,  0.21746039],
           [ 0.47142863,  0.64603180,  0.70952386,  ...,  0.58253974,
             0.85238099,  0.82063496],
           ...,
           [ 0.32857150,  0.55079371,  0.18571436,  ..., -0.67142856,
            -1.22698402, -1.06825387],
           [ 0.47142863,  0.47142863,  0.21746039,  ..., -0.00476181,
            -1.14761901, -1.44920623],
           [ 0.45555562,  0.15396833, -0.11587292,  ...,  1.04285717,
             0.34444451, -0.54444444]],

          [[ 1.03059590,  1.09500813,  1.19162667,  ...,  1.12721443,
             0.96618366,  0.70853472],
           [ 1.03059590,  1.14331758,  1.28824508,  ...,  1.27214205,
             1.36876035,  0.98228669],
           [ 1.15942061,  1.22383285,  1.23993587,  ...,  1.38486338,
             1.54589403,  1.44927561],
           ...,
           [ 1.07890511,  1.28824508,  0.86956531,  ..., -0.70853460,
            -1.20772946, -0.96618354],
           [ 1.15942061,  1.22383285,  1.03059590,  ..., -0.19323659,
            -1.12721407, -1.33655393],
           [ 1.07890511,  0.93397754,  0.85346222,  ...,  0.99838978,
             0.28985518, -0.43478248]],

          [[ 0.10644694,  0.19640197,  0.42128953,  ..., -0.01349309,
             0.09145443, -0.31334329],
           [ 0.16641696,  0.45127454,  0.94602716,  ...,  0.19640197,
             0.75112462,  0.28635699],
           [ 0.16641696,  0.39130452,  0.48125952,  ...,  0.36131951,
             0.91604215,  1.03598225],
           ...,
           [ 0.06146942,  0.37631202,  0.07646193,  ..., -0.83808094,
            -1.27286363, -1.09295356],
           [ 0.19640197,  0.37631202, -0.11844061,  ..., -0.43328333,
            -1.27286363, -1.42278874],
           [ 0.25637197, -0.14842562, -0.73313338,  ...,  0.82608712,
            -0.02848560, -0.82308841]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0435 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 5, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.93012428, -28.86279678, -22.95105362, -22.21138573, -22.55353546,
         -22.42994499, -25.40056229, -25.07742310, -28.55600357, -29.30382729]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [702]; unstable size 702; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 702] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 702] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 702] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 197] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.11360049,  4.75878477, -0.60330033, -1.14847982, -0.96145195,
          1.62045503,  1.45869040,  4.42397785,  5.39402199]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.93012428, -28.86279678, -22.95105362, -22.21138573, -22.55353546,
         -22.42994499, -25.40056229, -25.07742310, -28.55600357, -29.30382729]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.93012238, -28.86279297, -22.95105362, -22.21138191, -22.55353355,
          -22.42994118, -25.40056038, -25.07742310, -28.55599976, -29.30382729],
         [-23.93012238, -28.86279297, -22.95105362, -22.21138191, -22.55353355,
          -22.42994118, -25.40056038, -25.07742310, -28.55599976, -29.30382729]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.39752007, -0.34215164, -0.12359238]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]],


         [[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]],


         [[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0676 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 6, vnnlib ID: 6 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.40559387, -22.88947487, -25.63683701, -27.29631996, -26.72020721,
         -27.76915359, -27.74243546, -26.42049408, -23.75277328, -24.53628540]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [600]; unstable size 600; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 210, 1, 600] with unstable size 209 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 600] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 600] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [209]; unstable size 209; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 209] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 209] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.74476314,  2.03233981,  3.50479388,  2.95214224,  3.84003520,
          3.82891750,  2.31719446,  0.27049762,  0.99338436]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.40559387, -22.88947487, -25.63683701, -27.29631996, -26.72020721,
         -27.76915359, -27.74243546, -26.42049408, -23.75277328, -24.53628540]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.70954704, -22.50856209, -25.82820511, -27.24475288, -26.80752373,
          -27.71620750, -27.81856155, -26.49511337, -23.68723488, -24.25093651]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20098495]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0564 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 7, vnnlib ID: 7 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.38412285, -21.59840584, -16.79981041, -17.57214165, -15.52907753,
         -18.46681404, -14.29935837, -18.97409439, -21.41892242, -22.47642326]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [661]; unstable size 661; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 281, 1, 661] with unstable size 280 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 661] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 661] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [280]; unstable size 280; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 280] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 280] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.40035486, 4.96538448, 1.38254356, 2.09833956, 0.19922996, 2.73652554,
         2.77133226, 5.19357395, 5.75338554]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0352 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 8, vnnlib ID: 8 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.33151817, -30.12449837, -30.12789345, -32.32761765, -31.50092506,
         -33.39948273, -34.24899292, -33.59529877, -28.85486984, -31.05011368]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [660]; unstable size 660; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 125, 1, 660] with unstable size 124 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 660] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 660] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [124]; unstable size 124; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 124] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 124] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.10990644, 3.26029587, 5.21397591, 4.49963570, 6.16231918, 7.11179543,
         6.38362312, 1.83803439, 4.12780380]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0416 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 9, vnnlib ID: 9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.09156418, -20.41763687, -14.61236668, -14.66382980, -15.40889931,
         -14.92277241, -16.08656311, -16.88404655, -16.89081764, -19.10676003]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [652]; unstable size 652; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 652] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 652] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 652] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 272] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.76794958,  3.46308780, -1.30139875, -0.50252223, -0.49823141,
          0.25928593,  1.05345261,  0.17230207,  2.34708500]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.09156418, -20.41763687, -14.61236668, -14.66382980, -15.40889931,
         -14.92277241, -16.08656311, -16.88404655, -16.89081764, -19.10676003]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.09156036, -20.41763496, -14.61236477, -14.66382885, -15.40889931,
          -14.92277145, -16.08656311, -16.88404655, -16.89081764, -19.10676003],
         [-17.09156036, -20.41763496, -14.61236477, -14.66382885, -15.40889931,
          -14.92277145, -16.08656311, -16.88404655, -16.89081764, -19.10676003]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.31040668, -0.25894260,  0.48612785]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0524 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 10, vnnlib ID: 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.21570015, -30.75971413, -22.25073242, -22.32918739, -25.08177185,
         -21.45276070, -27.76211929, -23.59930420, -27.91633797, -28.86312294]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [602]; unstable size 602; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 138, 1, 602] with unstable size 137 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 602] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 602] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [137]; unstable size 137; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 137] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 137] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.99381185,  6.23490953, -1.89244652, -1.75638449,  1.05084085,
         -2.64184833,  3.30787563,  3.47557855,  4.31073761]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.21570015, -30.75971413, -22.25073242, -22.32918739, -25.08177185,
         -21.45276070, -27.76211929, -23.59930420, -27.91633797, -28.86312294]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.21570015, -30.75971603, -22.25073242, -22.32919121, -25.08177567,
          -21.45276070, -27.76212311, -23.59930420, -27.91633797, -28.86312675],
         [-26.21570015, -30.75971603, -22.25073242, -22.32919121, -25.08177567,
          -21.45276070, -27.76212311, -23.59930420, -27.91633797, -28.86312675]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.34857178, -1.27011299, -2.14654350]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0415 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 11, vnnlib ID: 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.21021080, -22.37670517, -15.79945183, -19.83161354, -17.04315186,
         -20.54102135, -18.07866096, -20.16787720, -20.66229820, -22.52699852]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [783]; unstable size 783; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 272, 1, 783] with unstable size 271 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 783] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 783] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [271]; unstable size 271; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 271] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 271] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.10988903, 4.28679037, 2.71925163, 0.07136536, 3.35213184, 0.93095958,
         2.59224558, 3.15873337, 4.39236164]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0452 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 12, vnnlib ID: 12 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.29772568, -26.69688797, -24.65950394, -26.42867851, -27.60770798,
         -25.51318932, -30.98760223, -25.11904716, -28.58666801, -27.05063820]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [512]; unstable size 512; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 148, 1, 512] with unstable size 147 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 512] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 512] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [147]; unstable size 147; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 147] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.19138682,  0.13958716, -1.25776410,  0.64105892,  1.78224039,
         -0.24006453,  4.64796352,  2.03586721,  0.69128168]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.29772568, -26.69688797, -24.65950394, -26.42867851, -27.60770798,
         -25.51318932, -30.98760223, -25.11904716, -28.58666801, -27.05063820]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.29772758, -26.69688797, -24.65950203, -26.42867661, -27.60770798,
          -25.51318359, -30.98759842, -25.11904335, -28.58666611, -27.05063820],
         [-26.29772758, -26.69688797, -24.65950203, -26.42867661, -27.60770798,
          -25.51318359, -30.98759842, -25.11904335, -28.58666611, -27.05063820]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.45954132,  0.39414024]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.56666672,  0.66190481,  0.64603180,  ...,  0.24920642,
             0.26507944,  0.21746039],
           [ 0.43968260,  0.53492069,  0.51904768,  ...,  0.29682547,
             0.29682547,  0.24920642],
           [ 0.34444451,  0.39206356,  0.39206356,  ...,  0.32857150,
             0.34444451,  0.29682547],
           ...,
           [-1.83015871, -1.73492062, -1.73492062,  ..., -0.51269841,
            -0.52857143, -0.60793650],
           [-1.87777781, -1.81428576, -1.81428576,  ..., -0.52857143,
            -0.51269841, -0.52857143],
           [-1.90952384, -1.89365077, -1.87777781,  ..., -0.56031746,
            -0.59206349, -0.54444444]],

          [[ 1.15942061,  1.20772982,  1.19162667,  ...,  0.95008057,
             0.96618366,  0.91787446],
           [ 1.09500813,  1.12721443,  1.09500813,  ...,  0.98228669,
             0.99838978,  0.93397754],
           [ 0.99838978,  1.03059590,  1.01449287,  ...,  0.98228669,
             0.99838978,  0.95008057],
           ...,
           [-1.72302747, -1.57809973, -1.61030602,  ..., -0.06441211,
            -0.01610294, -0.09661824],
           [-1.80354273, -1.72302747, -1.73913050,  ..., -0.03220600,
            -0.01610294, -0.04830906],
           [-1.83574879, -1.81964576, -1.80354273,  ..., -0.06441211,
            -0.08051517, -0.04830906]],

          [[ 1.62069011,  1.62069011,  1.60569763,  ...,  1.50075006,
             1.51574254,  1.47076499],
           [ 1.59070504,  1.59070504,  1.56072009,  ...,  1.53073502,
             1.54572761,  1.48575759],
           [ 1.51574254,  1.51574254,  1.50075006,  ...,  1.50075006,
             1.51574254,  1.47076499],
           ...,
           [-1.49775124, -1.37781119, -1.39280367,  ..., -0.55322337,
            -0.61319339, -0.70314842],
           [-1.55772126, -1.49775124, -1.49775124,  ..., -0.56821585,
            -0.61319339, -0.58320838],
           [-1.58770621, -1.57271373, -1.55772126,  ..., -0.65817088,
            -0.71814090, -0.61319339]]],


         [[[ 0.56666672,  0.66190481,  0.64603180,  ...,  0.24920642,
             0.26507944,  0.21746039],
           [ 0.43968260,  0.53492069,  0.51904768,  ...,  0.29682547,
             0.29682547,  0.24920642],
           [ 0.34444451,  0.39206356,  0.39206356,  ...,  0.32857150,
             0.34444451,  0.29682547],
           ...,
           [-1.83015871, -1.73492062, -1.73492062,  ..., -0.51269841,
            -0.52857143, -0.60793650],
           [-1.87777781, -1.81428576, -1.81428576,  ..., -0.52857143,
            -0.51269841, -0.52857143],
           [-1.90952384, -1.89365077, -1.87777781,  ..., -0.56031746,
            -0.59206349, -0.54444444]],

          [[ 1.15942061,  1.20772982,  1.19162667,  ...,  0.95008057,
             0.96618366,  0.91787446],
           [ 1.09500813,  1.12721443,  1.09500813,  ...,  0.98228669,
             0.99838978,  0.93397754],
           [ 0.99838978,  1.03059590,  1.01449287,  ...,  0.98228669,
             0.99838978,  0.95008057],
           ...,
           [-1.72302747, -1.57809973, -1.61030602,  ..., -0.06441211,
            -0.01610294, -0.09661824],
           [-1.80354273, -1.72302747, -1.73913050,  ..., -0.03220600,
            -0.01610294, -0.04830906],
           [-1.83574879, -1.81964576, -1.80354273,  ..., -0.06441211,
            -0.08051517, -0.04830906]],

          [[ 1.62069011,  1.62069011,  1.60569763,  ...,  1.50075006,
             1.51574254,  1.47076499],
           [ 1.59070504,  1.59070504,  1.56072009,  ...,  1.53073502,
             1.54572761,  1.48575759],
           [ 1.51574254,  1.51574254,  1.50075006,  ...,  1.50075006,
             1.51574254,  1.47076499],
           ...,
           [-1.49775124, -1.37781119, -1.39280367,  ..., -0.55322337,
            -0.61319339, -0.70314842],
           [-1.55772126, -1.49775124, -1.49775124,  ..., -0.56821585,
            -0.61319339, -0.58320838],
           [-1.58770621, -1.57271373, -1.55772126,  ..., -0.65817088,
            -0.71814090, -0.61319339]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0384 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 13, vnnlib ID: 13 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.11111641, -23.23637962, -27.61908340, -29.99626923, -29.48331070,
         -31.42300415, -29.79775810, -31.17150879, -25.13313293, -25.51217079]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [800]; unstable size 800; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 212, 1, 800] with unstable size 211 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 800] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 800] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [211]; unstable size 211; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 211] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 211] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.64949799,  2.53695869,  4.98262978,  4.08614969,  6.12158680,
          4.88727856,  5.69290924,  0.59366226,  1.31843662]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.11111641, -23.23637962, -27.61908340, -29.99626923, -29.48331070,
         -31.42300415, -29.79775810, -31.17150879, -25.13313293, -25.51217079]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.95it/s]100%|██████████| 1/1 [00:00<00:00,  8.94it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.69252968, -23.57816505, -27.19650650, -29.87729073, -29.16208076,
          -31.30131340, -29.60456848, -30.91409683, -24.93794060, -25.69927025]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.11436462]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1144 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 30.024341583251953
alpha/beta optimization time: 1.2226457595825195
initial alpha-crown bounds: tensor([[-0.60099649,  2.58548021,  5.03595352,  4.14844227,  6.18062878,
          4.93974543,  5.75246859,  0.64158058,  1.34103823]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.6009964942932129
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.59828972816467
Verifying property 0 with 1 instances.
##### Instance 13 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.60099649]], device='cuda:0') need to verify.
Model prediction is: tensor([-24.11111641, -23.23637962, -27.61908340, -29.99626923, -29.48331070,
        -31.42300415, -29.79775810, -31.17150879, -25.13313293, -25.51217079],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.60099649]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 800
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 204
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1025
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010251998901367188
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6009907722473145
10 lb beta sum: 0.0, worst -0.6010017395019531
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    func 0.0539    
Accumulated time: func 0.0539    prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] 
split level 1: [/input-12, 38] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 53] 
split level 4: [/input-12, 89] 
split level 5: [/input-12, 64] 
split level 6: [/input-12, 2] 
split level 7: [/input-12, 90] 
split level 8: [/input-12, 8] 
split level 9: [/input-12, 71] 
split level 10: [/input-8, 1955] 
split level 11: [/input-12, 32] 
split level 12: [/input-8, 292] 
split level 13: [/input-12, 14] 
split level 14: [/input-8, 1949] 
split level 15: [/input-8, 757] 
split level 16: [/input-8, 146] 
split level 17: [/input-8, 155] 
split level 18: [/input-8, 1134] 
split level 19: [/input-8, 1387] 
split level 20: [/input-8, 418] 
split level 21: [/input-8, 420] 
split level 22: [/input-8, 158] 
split level 23: [/input-8, 147] 
split level 24: [/input-8, 416] 
split level 25: [/input-8, 306] 
split level 26: [/input-8, 1384] 
split level 27: [/input-8, 751] 
split level 28: [/input-8, 1674] 
split level 29: [/input-8, 1388] 
split level 30: [/input-12, 13] 
split level 31: [/input-8, 939] 
split level 32: [/input-8, 150] 
split level 33: [/input, 3544] 
split level 34: [/input-8, 1852] 
split level 35: [/input-8, 1396] 
split level 36: [/input-8, 423] 
split level 37: [/input, 374] 
split level 38: [/input-8, 1755] 
split level 39: [/input-8, 1629] 
split level 40: [/input-8, 1195] 
split level 41: [/input-8, 1395] 
split level 42: [/input-8, 633] 
split level 43: [/input-8, 154] 
split level 44: [/input, 3545] 
split level 45: [/input-8, 242] 
split level 46: [/input-8, 634] 
split level 47: [/input-8, 414] 
split level 48: [/input-8, 1391] 
split level 49: [/input, 469] 
split level 50: [/input-8, 1178] 
split level 51: [/input-8, 1754] 
split level 52: [/input-8, 1851] 
split level 53: [/input-8, 1397] 
split level 54: [/input-8, 1378] 
split level 55: [/input-8, 737] 
split level 56: [/input-8, 141] 
split level 57: [/input, 506] 
split level 58: [/input, 2503] 
split level 59: [/input, 3165] 
split level 60: [/input, 3563] 
split level 61: [/input, 1449] 
split level 62: [/input, 3130] 
split level 63: [/input, 1003] 
split level 64: [/input-12, 68] 
split level 65: [/input-8, 433] 
split level 66: [/input-8, 1615] 
split level 67: [/input-8, 1399] 
split level 68: [/input-8, 635] 
split level 69: [/input-8, 1097] 
split level 70: [/input-8, 400] 
split level 71: [/input-8, 410] 
split level 72: [/input, 986] 
split level 73: [/input, 987] 
split level 74: [/input, 968] 
split level 75: [/input, 373] 
split level 76: [/input, 983] 
split level 77: [/input, 1453] 
split level 78: [/input-8, 736] 
split level 79: [/input, 961] 
split level 80: [/input, 508] 
split level 81: [/input, 2931] 
split level 82: [/input-8, 350] 
split level 83: [/input, 981] 
split level 84: [/input, 963] 
split level 85: [/input, 988] 
split level 86: [/input, 1001] 
split level 87: [/input, 3480] 
split level 88: [/input, 492] 
split level 89: [/input-8, 1377] 
split level 90: [/input, 3197] 
split level 91: [/input, 977] 
split level 92: [/input-8, 2033] 
split level 93: [/input, 3913] 
split level 94: [/input, 1006] 
split level 95: [/input, 3579] 
split level 96: [/input, 3565] 
split level 97: [/input, 2264] 
split level 98: [/input, 408] 
split level 99: [/input-8, 1512] 
split level 100: [/input, 3525] 
split level 101: [/input-8, 241] 
split level 102: [/input, 825] 
split level 103: [/input, 995] 
split level 104: [/input, 452] 
split level 105: [/input, 2266] 
split level 106: [/input, 2265] 
split level 107: [/input, 2913] 
split level 108: [/input, 325] 
split level 109: [/input, 2282] 
split level 110: [/input, 844] 
split level 111: [/input, 2771] 
split level 112: [/input-8, 243] 
split level 113: [/input, 2262] 
split level 114: [/input, 996] 
split level 115: [/input, 2406] 
split level 116: [/input, 470] 
split level 117: [/input, 2263] 
split level 118: [/input, 3580] 
split level 119: [/input, 979] 
split level 120: [/input, 2183] 
split level 121: [/input, 2789] 
split level 122: [/input, 3113] 
split level 123: [/input, 3578] 
split level 124: [/input, 827] 
split level 125: [/input, 998] 
split level 126: [/input, 505] 
split level 127: [/input, 2515] 
split level 128: [/input, 3562] 
split level 129: [/input-8, 1398] 
split level 130: [/input-8, 427] 
split level 131: [/input, 3269] 
split level 132: [/input, 993] 
split level 133: [/input, 2516] 
split level 134: [/input, 2009] 
split level 135: [/input-8, 1376] 
split level 136: [/input, 692] 
split level 137: [/input, 2010] 
split level 138: [/input, 2281] 
split level 139: [/input-8, 636] 
split level 140: [/input, 3180] 
split level 141: [/input, 693] 
split level 142: [/input, 904] 
split level 143: [/input, 2267] 
split level 144: [/input, 2539] 
split level 145: [/input, 2969] 
split level 146: [/input-8, 363] 
split level 147: [/input, 2654] 
split level 148: [/input, 3007] 
split level 149: [/input, 691] 
split level 150: [/input, 2553] 
split level 151: [/input, 2283] 
split level 152: [/input, 2258] 
split level 153: [/input, 2538] 
split level 154: [/input, 129] 
split level 155: [/input, 3148] 
split level 156: [/input, 2517] 
split level 157: [/input, 709] 
split level 158: [/input, 2757] 
split level 159: [/input-8, 94] 
split level 160: [/input, 2129] 
split level 161: [/input, 711] 
split level 162: [/input, 371] 
split level 163: [/input, 2685] 
split level 164: [/input, 710] 
split level 165: [/input, 822] 
split level 166: [/input, 3133] 
split level 167: [/input, 2530] 
split level 168: [/input, 3283] 
split level 169: [/input, 3284] 
split level 170: [/input, 2273] 
split level 171: [/input, 707] 
split level 172: [/input, 225] 
split level 173: [/input, 729] 
split level 174: [/input, 808] 
split level 175: [/input, 2514] 
split level 176: [/input, 497] 
split level 177: [/input, 708] 
split level 178: [/input-8, 1855] 
split level 179: [/input, 690] 
split level 180: [/input, 210] 
split level 181: [/input, 2011] 
split level 182: [/input, 713] 
split level 183: [/input, 498] 
split level 184: [/input, 3560] 
split level 185: [/input, 3576] 
split level 186: [/input, 2180] 
split level 187: [/input, 689] 
split level 188: [/input, 487] 
split level 189: [/input-8, 912] 
split level 190: [/input, 705] 
split level 191: [/input, 2259] 
split level 192: [/input, 2436] 
split level 193: [/input, 2916] 
split level 194: [/input, 209] 
split level 195: [/input, 706] 
split level 196: [/input, 989] 
split level 197: [/input, 2556] 
split level 198: [/input, 208] 
split level 199: [/input, 885] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6008281707763672
10 lb beta sum: 0.0, worst -0.6008315086364746
Time: prepare 0.0114    bound 0.0979    transfer 0.0043    finalize 0.0026    func 0.1188    
Accumulated time: func 0.1727    prepare 0.0214    bound 0.1513    transfer 0.0044    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.07156897) min lb tensor(-0.60082436)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010381698608398438 
BICCOS Cumulative time: 0.010381698608398438
Preprocessing time: 0.00972294807434082 Inference time: 0.00011205673217773438 Add cuts time: 5.364418029785156e-05 Cut analysis time: 0.0004930496215820312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.58948 (1), -0.58922 (1), -0.58918 (1), -0.58856 (1), -0.58774 (1), -0.58718 (1), -0.58651 (1), -0.58590 (1), -0.58476 (1), -0.58436 (1), -0.58392 (1), -0.58375 (1), -0.58357 (1), -0.58354 (1), -0.58352 (1), -0.58341 (1), -0.58314 (1), -0.58214 (1), -0.58196 (1), -0.58137 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5193    set_bounds 0.0083    solve 0.1189    add 0.0851    
Accumulated time: pickout 0.0003    decision 0.5193    set_bounds 0.0083    solve 0.1189    add 0.0851    
Current (lb-rhs): -0.589484691619873
50 domains visited
Cumulative time: 0.801002025604248

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] [/input-12, 38] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 1: [/input-12, 38] [/input-12, 4] [/input-12, 4] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] 
split level 2: [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5508785247802734
10 lb beta sum: 0.3896826207637787, worst -0.545132577419281
Time: prepare 0.0073    bound 0.1183    transfer 0.0011    finalize 0.0023    func 0.1315    
Accumulated time: func 0.3042    prepare 0.0289    bound 0.2696    transfer 0.0055    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.28868076) min lb tensor(-0.54499131)
Number of Verified Splits: 13 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.013132810592651367 
BICCOS Cumulative time: 0.023514509201049805
Preprocessing time: 0.011490345001220703 Inference time: 0.0005660057067871094 Add cuts time: 0.00022149085998535156 Cut analysis time: 0.0008549690246582031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11142 (2), -0.11041 (2), -0.11035 (2), -0.10907 (2), -0.10885 (2), -0.10838 (2), -0.10740 (2), -0.10658 (2), -0.10575 (2), -0.10568 (2), -0.10505 (2), -0.10482 (2), -0.10467 (2), -0.10407 (2), -0.10400 (2), -0.10341 (2), -0.10279 (2), -0.10258 (2), -0.10214 (2), -0.10083 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0126    solve 0.1316    add 0.0800    
Accumulated time: pickout 0.0013    decision 0.5389    set_bounds 0.0209    solve 0.2504    add 0.1652    
Current (lb-rhs): -0.11141608655452728
100 domains visited
Cumulative time: 1.05910325050354

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 38] [/input-12, 34] [/input-12, 38] [/input-12, 38] [/input-12, 34] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 34] [/input-12, 34] 
split level 1: [/input-12, 89] [/input-12, 38] [/input-12, 4] [/input-12, 89] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 38] [/input-12, 4] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 89] [/input-12, 2] [/input-12, 4] [/input-12, 2] 
split level 3: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11112833023071289
10 lb beta sum: 0.33459076285362244, worst -0.13498419523239136
Time: prepare 0.0072    bound 0.1340    transfer 0.0032    finalize 0.0022    func 0.1496    
Accumulated time: func 0.4538    prepare 0.0363    bound 0.4035    transfer 0.0086    finalize 0.0073    
all_split False
======================Cut inference begins======================
max lb tensor(0.88377279) min lb tensor(-0.02826725)
Number of Verified Splits: 347 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.03343987464904785 
BICCOS Cumulative time: 0.056954383850097656
Preprocessing time: 0.011331558227539062 Inference time: 0.014772891998291016 Add cuts time: 0.00700688362121582 Cut analysis time: 0.0003285408020019531
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0193    set_bounds 0.0151    solve 0.1497    add 0.0187    
Accumulated time: pickout 0.0022    decision 0.5583    set_bounds 0.0361    solve 0.4001    add 0.1839    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34,  2, 38]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([8.80657769e-11, 6.66854531e-02, 2.01028183e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34,  2, 38]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([8.80657769e-11, 6.66854531e-02, 9.07585770e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34,  2, 38]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([8.80657769e-11, 7.44616836e-02, 2.00230703e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34,  2, 38]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([8.80657769e-11, 7.44616836e-02, 8.51212442e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34, 38]), tensor([ 1., -1.]), tensor([0, 0]), tensor([8.80657769e-11, 3.82357836e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34, 38]), tensor([1., 1.]), tensor([0, 0]), tensor([8.80657769e-11, 4.49638814e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5220298767089844
10 lb beta sum: 0.7933706045150757, worst -0.5109838247299194
Time: prepare 0.0004    bound 0.1183    transfer 0.0001    finalize 0.0002    func 0.1190    
Accumulated time: func 0.5728    prepare 0.0367    bound 0.5218    transfer 0.0088    finalize 0.0074    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 1: [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] 
split level 2: [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] 
split level 3: [/input-12, 71] [/input-12, 71] [/input-12, 8] [/input-12, 8] 
split level 4: [/input-8, 1134] [/input-8, 1134] [/input-12, 71] [/input-12, 71] 
split level 5: [/input-8, 306] [/input-8, 306] [/input-12, 32] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8030344247817993, worst -0.265051007270813
10 lb beta sum: 0.8030344247817993, worst -0.2637568712234497
Time: prepare 0.0105    bound 0.1202    transfer 0.0010    finalize 0.0014    func 0.1348    
Accumulated time: func 0.7075    prepare 0.0475    bound 0.6420    transfer 0.0098    finalize 0.0088    
all_split False
======================Cut inference begins======================
max lb tensor(0.38014561) min lb tensor(-0.26314509)
Number of Verified Splits: 216 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.00031828880310058594 
BICCOS Cumulative time: 0.05727267265319824
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26315 (6), -0.26243 (6), -0.26222 (6), -0.26033 (6), -0.25068 (6), -0.25031 (6), -0.24857 (6), -0.24767 (6), -0.23446 (6), -0.23230 (6), -0.22927 (6), -0.22670 (6), -0.22049 (6), -0.21992 (6), -0.20895 (6), -0.20486 (6), -0.13450 (6), -0.13002 (6), -0.12823 (6), -0.12460 (6), 
Length of domains: 40
Time: pickout 0.0005    decision 0.0198    set_bounds 0.0192    solve 0.1348    add 0.0011    
Accumulated time: pickout 0.0027    decision 0.5781    set_bounds 0.0553    solve 0.5350    add 0.1850    
Current (lb-rhs): -0.2631450891494751
140 domains visited
Cumulative time: 1.6055827140808105

BaB round 2
batch: 40
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] 
split level 2: [/input-8, 757] [/input-8, 757] [/input-8, 1754] [/input-8, 1754] [/input-8, 757] [/input-8, 757] [/input-8, 1754] [/input-8, 1754] [/input-8, 757] [/input-8, 757] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796872138977, worst -0.24150526523590088
10 lb beta sum: 0.7119796872138977, worst -0.24106276035308838
Time: prepare 0.0139    bound 0.1204    transfer 0.0009    finalize 0.0017    func 0.1394    
Accumulated time: func 0.8469    prepare 0.0616    bound 0.7623    transfer 0.0106    finalize 0.0106    
all_split False
======================Cut inference begins======================
max lb tensor(0.35122716) min lb tensor(-0.24093831)
Number of Verified Splits: 187 of 320
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.0003216266632080078 
BICCOS Cumulative time: 0.05759429931640625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24094 (9), -0.24033 (9), -0.23947 (9), -0.23802 (9), -0.22835 (9), -0.22734 (9), -0.22494 (9), -0.22490 (9), -0.22470 (9), -0.22373 (9), -0.22372 (9), -0.22174 (9), -0.21481 (9), -0.21275 (9), -0.21238 (9), -0.21237 (9), -0.21057 (9), -0.20977 (9), -0.20969 (9), -0.20960 (9), 
Length of domains: 133
Time: pickout 0.0010    decision 0.0155    set_bounds 0.0203    solve 0.1395    add 0.0012    
Accumulated time: pickout 0.0037    decision 0.5936    set_bounds 0.0756    solve 0.6745    add 0.1863    
Current (lb-rhs): -0.24093830585479736
273 domains visited
Cumulative time: 1.7843372821807861

BaB round 3
batch: 133
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 14] [/input-8, 1955] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796872138977, worst -0.24093830585479736
10 lb beta sum: 0.7119796872138977, worst -0.2408205270767212
Time: prepare 0.0117    bound 0.1201    transfer 0.0008    finalize 0.0015    func 0.1358    
Accumulated time: func 0.9828    prepare 0.0735    bound 0.8825    transfer 0.0114    finalize 0.0120    
all_split False
======================Cut inference begins======================
max lb tensor(0.35359609) min lb tensor(-0.24073422)
Number of Verified Splits: 90 of 266
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.000308990478515625 
BICCOS Cumulative time: 0.057903289794921875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24073 (10), -0.24014 (10), -0.23932 (10), -0.23782 (10), -0.22818 (10), -0.22721 (10), -0.22454 (10), -0.22453 (10), -0.22424 (10), -0.22329 (10), -0.22325 (10), -0.22139 (10), -0.21447 (10), -0.21229 (10), -0.21210 (10), -0.21209 (10), -0.21001 (10), -0.20912 (10), -0.20852 (10), -0.20840 (10), 
Length of domains: 176
Time: pickout 0.0021    decision 0.0184    set_bounds 0.0109    solve 0.1359    add 0.0015    
Accumulated time: pickout 0.0058    decision 0.6120    set_bounds 0.0865    solve 0.8104    add 0.1878    
Current (lb-rhs): -0.24073421955108643
449 domains visited
Cumulative time: 1.9540023803710938

BaB round 4
batch: 176
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796872138977, worst -0.23470795154571533
10 lb beta sum: 0.7119796872138977, worst -0.2346135377883911
Time: prepare 0.0152    bound 0.1207    transfer 0.0010    finalize 0.0018    func 0.1409    
Accumulated time: func 1.1237    prepare 0.0890    bound 1.0031    transfer 0.0124    finalize 0.0138    
all_split False
======================Cut inference begins======================
max lb tensor(0.26978898) min lb tensor(-0.23455679)
Number of Verified Splits: 87 of 352
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.00031113624572753906 
BICCOS Cumulative time: 0.058214426040649414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23456 (11), -0.23386 (11), -0.23169 (11), -0.23167 (11), -0.22212 (11), -0.22103 (11), -0.21788 (11), -0.21761 (11), -0.21737 (11), -0.21700 (11), -0.21559 (11), -0.21524 (11), -0.20905 (11), -0.20682 (11), -0.20598 (11), -0.20581 (11), -0.20278 (11), -0.20254 (11), -0.20241 (11), -0.20227 (11), 
Length of domains: 265
Time: pickout 0.0024    decision 0.0199    set_bounds 0.0146    solve 0.1411    add 0.0015    
Accumulated time: pickout 0.0082    decision 0.6319    set_bounds 0.1011    solve 0.9515    add 0.1893    
Current (lb-rhs): -0.23455679416656494
714 domains visited
Cumulative time: 2.1343915462493896

BaB round 5
batch: 265
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 155] [/input-8, 418] [/input-8, 147] [/input-8, 418] [/input-8, 155] [/input-8, 418] [/input-8, 155] [/input-8, 418] [/input-8, 146] [/input-8, 146] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796872138977, worst -0.22854387760162354
10 lb beta sum: 0.7119796872138977, worst -0.22844946384429932
Time: prepare 0.0230    bound 0.1233    transfer 0.0014    finalize 0.0026    func 0.1538    
Accumulated time: func 1.2775    prepare 0.1121    bound 1.1264    transfer 0.0138    finalize 0.0164    
all_split False
======================Cut inference begins======================
max lb tensor(0.23159397) min lb tensor(-0.22843468)
Number of Verified Splits: 112 of 530
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.000335693359375 
BICCOS Cumulative time: 0.058550119400024414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22843 (12), -0.22841 (12), -0.22804 (12), -0.22502 (12), -0.21592 (12), -0.21579 (12), -0.21460 (12), -0.21337 (12), -0.21252 (12), -0.21229 (12), -0.21194 (12), -0.21169 (12), -0.21164 (12), -0.21113 (12), -0.20855 (12), -0.20851 (12), -0.19964 (12), -0.19930 (12), -0.19926 (12), -0.19854 (12), 
Length of domains: 418
Time: pickout 0.0032    decision 0.0247    set_bounds 0.0216    solve 0.1544    add 0.0028    
Accumulated time: pickout 0.0114    decision 0.6566    set_bounds 0.1227    solve 1.1059    add 0.1921    
Current (lb-rhs): -0.22843468189239502
1132 domains visited
Cumulative time: 2.342341423034668

BaB round 6
batch: 418
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 147] [/input-8, 1134] [/input-8, 155] [/input-8, 1134] [/input-8, 147] [/input-8, 306] [/input-8, 147] [/input-8, 306] [/input-8, 155] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119797468185425, worst -0.2234102487564087
10 lb beta sum: 0.7119797468185425, worst -0.22331202030181885
Time: prepare 0.0371    bound 0.1267    transfer 0.0048    finalize 0.0052    func 0.1790    
Accumulated time: func 1.4565    prepare 0.1494    bound 1.2531    transfer 0.0186    finalize 0.0216    
all_split False
======================Cut inference begins======================
max lb tensor(0.24811924) min lb tensor(-0.22327912)
Number of Verified Splits: 171 of 836
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.00035190582275390625 
BICCOS Cumulative time: 0.05890202522277832
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22328 (13), -0.22326 (13), -0.21539 (13), -0.21507 (13), -0.21334 (13), -0.21269 (13), -0.21020 (13), -0.21013 (13), -0.20967 (13), -0.20885 (13), -0.20885 (13), -0.20823 (13), -0.20764 (13), -0.20710 (13), -0.20691 (13), -0.20528 (13), -0.20403 (13), -0.20361 (13), -0.20303 (13), -0.19853 (13), 
Length of domains: 665
Time: pickout 0.0068    decision 0.0335    set_bounds 0.1496    solve 0.1792    add 0.0033    
Accumulated time: pickout 0.0182    decision 0.6901    set_bounds 0.2723    solve 1.2851    add 0.1954    
Current (lb-rhs): -0.22327911853790283
1797 domains visited
Cumulative time: 2.7165439128875732

BaB round 7
batch: 665
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 751] [/input-8, 306] [/input-8, 418] [/input-8, 306] [/input-8, 751] [/input-8, 751] [/input, 374] [/input-8, 1134] [/input-8, 1134] [/input-8, 306] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119798064231873, worst -0.22024261951446533
10 lb beta sum: 0.7119798064231873, worst -0.2202388048171997
Time: prepare 0.0584    bound 0.1334    transfer 0.0074    finalize 0.0075    func 0.2153    
Accumulated time: func 1.6718    prepare 0.2080    bound 1.3866    transfer 0.0260    finalize 0.0291    
all_split False
======================Cut inference begins======================
max lb tensor(0.27624881) min lb tensor(-0.22022212)
Number of Verified Splits: 148 of 1330
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.0003542900085449219 
BICCOS Cumulative time: 0.05925631523132324
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22022 (14), -0.21913 (14), -0.21158 (14), -0.21116 (14), -0.20901 (14), -0.20830 (14), -0.20688 (14), -0.20542 (14), -0.20463 (14), -0.20452 (14), -0.20441 (14), -0.20314 (14), -0.20282 (14), -0.20264 (14), -0.20182 (14), -0.20112 (14), -0.20069 (14), -0.19988 (14), -0.19910 (14), -0.19827 (14), 
Length of domains: 1182
Time: pickout 0.0081    decision 0.0461    set_bounds 0.0517    solve 0.2155    add 0.0187    
Accumulated time: pickout 0.0263    decision 0.7361    set_bounds 0.3240    solve 1.5006    add 0.2141    
Current (lb-rhs): -0.2202221155166626
2979 domains visited
Cumulative time: 3.0591084957122803

BaB round 8
batch: 1182
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1134] [/input-8, 751] [/input, 374] [/input-8, 416] [/input, 374] [/input-8, 1134] [/input-8, 751] [/input-8, 416] [/input-8, 751] [/input-8, 751] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119797468185425, worst -0.21784794330596924
10 lb beta sum: 0.7119797468185425, worst -0.21779167652130127
Time: prepare 0.1065    bound 0.1623    transfer 0.0142    finalize 0.0147    func 0.3137    
Accumulated time: func 1.9855    prepare 0.3148    bound 1.5489    transfer 0.0402    finalize 0.0438    
all_split False
======================Cut inference begins======================
max lb tensor(0.03525960) min lb tensor(-0.21776068)
Number of Verified Splits: 159 of 2364
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.0004429817199707031 
BICCOS Cumulative time: 0.059699296951293945
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21776 (15), -0.21369 (15), -0.20905 (15), -0.20860 (15), -0.20498 (15), -0.20430 (15), -0.20274 (15), -0.20230 (15), -0.20196 (15), -0.19983 (15), -0.19943 (15), -0.19942 (15), -0.19919 (15), -0.19848 (15), -0.19802 (15), -0.19769 (15), -0.19762 (15), -0.19613 (15), -0.19429 (15), -0.19416 (15), 
Length of domains: 2205
Time: pickout 0.0172    decision 0.0763    set_bounds 0.0897    solve 0.3141    add 0.0354    
Accumulated time: pickout 0.0435    decision 0.8124    set_bounds 0.4137    solve 1.8147    add 0.2496    
Current (lb-rhs): -0.21776068210601807
5184 domains visited
Cumulative time: 3.597101926803589

BaB round 9
batch: 2205
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 374] [/input-8, 147] [/input-8, 751] [/input-8, 751] [/input-8, 418] [/input-8, 147] [/input-8, 1134] [/input-8, 751] [/input, 374] [/input-8, 147] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119798064231873, worst -0.21324503421783447
10 lb beta sum: 0.7119798064231873, worst -0.2131901979446411
Time: prepare 0.2048    bound 0.2516    transfer 0.0262    finalize 0.0251    func 0.5368    
Accumulated time: func 2.5223    prepare 0.5199    bound 1.8004    transfer 0.0664    finalize 0.0688    
all_split False
======================Cut inference begins======================
max lb tensor(0.03369796) min lb tensor(-0.21317065)
Number of Verified Splits: 270 of 4410
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.00045228004455566406 
BICCOS Cumulative time: 0.06015157699584961
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21317 (16), -0.21139 (16), -0.20480 (16), -0.20429 (16), -0.20131 (16), -0.20063 (16), -0.19949 (16), -0.19938 (16), -0.19870 (16), -0.19702 (16), -0.19683 (16), -0.19547 (16), -0.19476 (16), -0.19474 (16), -0.19431 (16), -0.19188 (16), -0.19144 (16), -0.19099 (16), -0.19081 (16), -0.19025 (16), 
Length of domains: 4140
Time: pickout 0.0288    decision 0.1318    set_bounds 0.3372    solve 0.5376    add 0.0658    
Accumulated time: pickout 0.0724    decision 0.9442    set_bounds 0.7509    solve 2.3523    add 0.3153    
Current (lb-rhs): -0.21317064762115479
9324 domains visited
Cumulative time: 4.704636573791504

BaB round 10
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 418] [/input-8, 423] [/input-8, 1134] [/input-8, 147] [/input-8, 1134] [/input-8, 155] [/input-8, 1195] [/input-8, 147] [/input-8, 158] [/input-8, 416] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119798064231873, worst -0.2090226411819458
10 lb beta sum: 0.7119798064231873, worst -0.20898497104644775
Time: prepare 0.3859    bound 0.4016    transfer 0.0458    finalize 0.0515    func 0.9375    
Accumulated time: func 3.4598    prepare 0.9061    bound 2.2020    transfer 0.1122    finalize 0.1204    
all_split False
======================Cut inference begins======================
max lb tensor(0.05004680) min lb tensor(-0.20897353)
Number of Verified Splits: 571 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.0004363059997558594 
BICCOS Cumulative time: 0.06058788299560547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20897 (17), -0.20739 (17), -0.20096 (17), -0.20044 (17), -0.19524 (17), -0.19518 (17), -0.19512 (17), -0.19448 (17), -0.19444 (17), -0.19332 (17), -0.19283 (17), -0.19282 (17), -0.19144 (17), -0.19098 (17), -0.19077 (17), -0.19035 (17), -0.19030 (17), -0.19008 (17), -0.18691 (17), -0.18637 (17), 
Length of domains: 7665
Time: pickout 0.0561    decision 0.2315    set_bounds 0.4815    solve 0.9392    add 0.0273    
Accumulated time: pickout 0.1285    decision 1.1757    set_bounds 1.2324    solve 3.2915    add 0.3426    
Current (lb-rhs): -0.20897352695465088
16945 domains visited
current_vram/total_varm: 9.8GB/99.9GB, batch_size increase to 8192
Cumulative time: 6.452684164047241

BaB round 11
batch: 7665
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 158] [/input-8, 418] [/input-8, 292] [/input-8, 292] [/input-8, 1195] [/input-8, 418] [/input-8, 423] [/input-8, 158] [/input-8, 751] [/input-8, 751] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119798064231873, worst -0.20612823963165283
10 lb beta sum: 0.7119798064231873, worst -0.20610344409942627
Time: prepare 0.7170    bound 0.6983    transfer 0.0886    finalize 0.0961    func 1.6965    
Accumulated time: func 5.1563    prepare 1.6234    bound 2.9003    transfer 0.2009    finalize 0.2164    
all_split False
======================Cut inference begins======================
max lb tensor(0.07985294) min lb tensor(-0.20609438)
Number of Verified Splits: 1213 of 15330
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.0005736351013183594 
BICCOS Cumulative time: 0.06116151809692383
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20609 (18), -0.20410 (18), -0.19485 (18), -0.19428 (18), -0.19271 (18), -0.19203 (18), -0.19166 (18), -0.19146 (18), -0.19017 (18), -0.18988 (18), -0.18987 (18), -0.18962 (18), -0.18955 (18), -0.18950 (18), -0.18940 (18), -0.18865 (18), -0.18815 (18), -0.18794 (18), -0.18597 (18), -0.18577 (18), 
Length of domains: 14117
Time: pickout 0.1298    decision 0.5746    set_bounds 0.8091    solve 1.8813    add 0.1584    
Accumulated time: pickout 0.2582    decision 1.7503    set_bounds 2.0414    solve 5.1728    add 0.5010    
Current (lb-rhs): -0.2060943841934204
31062 domains visited
Cumulative time: 10.027578830718994

BaB round 12
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1195] [/input-8, 1384] [/input-8, 306] [/input-8, 158] [/input-8, 292] [/input-8, 158] [/input-8, 1195] [/input-12, 13] [/input-8, 416] [/input-8, 147] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796872138977, worst -0.20264780521392822
10 lb beta sum: 0.7119796872138977, worst -0.20264971256256104
Time: prepare 0.7834    bound 0.7419    transfer 0.0928    finalize 0.1152    func 1.8384    
Accumulated time: func 6.9947    prepare 2.4071    bound 3.6421    transfer 0.2937    finalize 0.3316    
all_split False
======================Cut inference begins======================
max lb tensor(0.25473630) min lb tensor(-0.20263827)
Number of Verified Splits: 1768 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.0007159709930419922 
BICCOS Cumulative time: 0.06187748908996582
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20410 (18), -0.20264 (19), -0.19485 (18), -0.19428 (18), -0.19271 (18), -0.19203 (18), -0.19166 (18), -0.18950 (18), -0.18940 (18), -0.18815 (18), -0.18809 (19), -0.18797 (19), -0.18647 (19), -0.18577 (18), -0.18577 (19), -0.18566 (19), -0.18559 (19), -0.18506 (19), -0.18460 (18), -0.18436 (19), 
Length of domains: 20541
Time: pickout 0.1128    decision 0.4579    set_bounds 0.9432    solve 1.8415    add 0.2655    
Accumulated time: pickout 0.3710    decision 2.2081    set_bounds 2.9846    solve 7.0143    add 0.7665    
Current (lb-rhs): -0.20410358905792236
45678 domains visited
current_vram/total_varm: 23.7GB/99.9GB, batch_size increase to 16384
Cumulative time: 13.679310321807861

BaB round 13
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1097] [/input-8, 414] [/input-8, 420] [/input-8, 1097] [/input-8, 423] [/input, 373] [/input-8, 414] [/input-8, 292] [/input-8, 1384] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796872138977, worst -0.20068895816802979
10 lb beta sum: 0.7119796872138977, worst -0.20064270496368408
Time: prepare 1.5612    bound 1.4262    transfer 0.1835    finalize 0.2353    func 3.6194    
Accumulated time: func 10.6141    prepare 3.9687    bound 5.0683    transfer 0.4772    finalize 0.5669    
all_split False
======================Cut inference begins======================
max lb tensor(0.31906402) min lb tensor(-0.20063841)
Number of Verified Splits: 3843 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.0008175373077392578 
BICCOS Cumulative time: 0.06269502639770508
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20064 (19), -0.19213 (20), -0.19193 (20), -0.19006 (19), -0.18945 (19), -0.18821 (19), -0.18751 (19), -0.18616 (19), -0.18603 (19), -0.18572 (19), -0.18514 (20), -0.18491 (20), -0.18467 (19), -0.18370 (20), -0.18356 (20), -0.18311 (20), -0.18261 (20), -0.18202 (19), -0.18175 (19), -0.18159 (19), 
Length of domains: 33082
Time: pickout 0.2304    decision 1.8947    set_bounds 1.9060    solve 3.9584    add 0.5032    
Accumulated time: pickout 0.6014    decision 4.1028    set_bounds 4.8906    solve 10.9726    add 1.2697    
Current (lb-rhs): -0.20063841342926025
74603 domains visited
current_vram/total_varm: 28.0GB/99.9GB, batch_size increase to 32768
Cumulative time: 22.2274272441864

BaB round 14
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 418] [/input-8, 423] [/input-12, 13] [/input-8, 416] [/input-8, 306] [/input-8, 292] [/input-8, 154] [/input-8, 1384] [/input-8, 306] [/input-8, 292] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796872138977, worst -0.19087707996368408
10 lb beta sum: 0.7119796872138977, worst -0.19079220294952393
Time: prepare 3.1148    bound 7.9709    transfer 0.3646    finalize 0.8984    func 12.7685    
Accumulated time: func 23.3826    prepare 7.0840    bound 13.0392    transfer 0.8417    finalize 1.4653    
all_split False
======================Cut inference begins======================
max lb tensor(0.34870851) min lb tensor(-0.19074309)
Number of Verified Splits: 9649 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.0009200572967529297 
BICCOS Cumulative time: 0.06361508369445801
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19074 (20), -0.19070 (20), -0.18812 (20), -0.18751 (20), -0.18522 (21), -0.18504 (21), -0.18479 (21), -0.18461 (21), -0.18345 (20), -0.18278 (20), -0.18275 (20), -0.18229 (21), -0.18200 (21), -0.17896 (21), -0.17837 (21), -0.17826 (20), -0.17795 (20), -0.17792 (20), -0.17788 (20), -0.17783 (21), 
Length of domains: 56201
Time: pickout 0.4760    decision 3.3312    set_bounds 3.6460    solve 12.7788    add 0.2001    
Accumulated time: pickout 1.0774    decision 7.4340    set_bounds 8.5366    solve 23.7515    add 1.4697    
Current (lb-rhs): -0.190743088722229
130490 domains visited
Cumulative time: 42.77753186225891

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 146] [/input-8, 1384] [/input-8, 155] [/input-8, 1754] [/input-8, 418] [/input-8, 423] [/input-8, 1387] [/input-8, 158] [/input-8, 292] [/input-8, 414] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796872138977, worst -0.18417418003082275
10 lb beta sum: 0.7119796872138977, worst -0.1840139627456665
Time: prepare 3.2790    bound 7.9739    transfer 0.3725    finalize 0.5109    func 12.5616    
Accumulated time: func 35.9442    prepare 10.3633    bound 21.0131    transfer 1.2143    finalize 1.9762    
all_split False
======================Cut inference begins======================
max lb tensor(0.33030879) min lb tensor(-0.18393004)
Number of Verified Splits: 12095 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.011560678482055664 
BICCOS Cumulative time: 0.07517576217651367
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18812 (20), -0.18751 (20), -0.18522 (21), -0.18504 (21), -0.18393 (21), -0.18391 (21), -0.18345 (20), -0.18298 (21), -0.18297 (21), -0.18275 (20), -0.18229 (21), -0.18200 (21), -0.18190 (22), -0.18175 (22), -0.17896 (21), -0.17837 (21), -0.17783 (21), -0.17739 (20), -0.17714 (21), -0.17620 (20), 
Length of domains: 76874
Time: pickout 0.5137    decision 3.3271    set_bounds 3.9879    solve 13.2239    add 18.5137    
Accumulated time: pickout 1.5911    decision 10.7611    set_bounds 12.5246    solve 36.9754    add 19.9835    
Current (lb-rhs): -0.1881181001663208
183931 domains visited
Cumulative time: 82.54709815979004

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1384] [/input-8, 416] [/input-8, 414] [/input-8, 292] [/input-8, 420] [/input-8, 146] [/input-8, 1134] [/input-8, 146] [/input, 373] [/input-8, 1195] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796872138977, worst -0.18339693546295166
10 lb beta sum: 0.7119796872138977, worst -0.18336498737335205
Time: prepare 3.2465    bound 7.9835    transfer 0.3701    finalize 0.5138    func 12.5354    
Accumulated time: func 48.4796    prepare 13.6102    bound 28.9966    transfer 1.5844    finalize 2.4899    
all_split False
======================Cut inference begins======================
max lb tensor(0.36493099) min lb tensor(-0.18335593)
Number of Verified Splits: 11097 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.01199650764465332 
BICCOS Cumulative time: 0.08717226982116699
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18393 (21), -0.18391 (21), -0.18336 (21), -0.18298 (21), -0.18275 (21), -0.18235 (22), -0.18220 (22), -0.18190 (22), -0.18175 (22), -0.18161 (21), -0.18095 (21), -0.18011 (22), -0.17525 (22), -0.17467 (22), -0.17443 (22), -0.17383 (21), -0.17372 (22), -0.17369 (21), -0.17337 (21), -0.17323 (21), 
Length of domains: 98545
Time: pickout 0.5125    decision 3.3516    set_bounds 4.5987    solve 12.5491    add 0.1827    
Accumulated time: pickout 2.1036    decision 14.1127    set_bounds 17.1233    solve 49.5244    add 20.1662    
Current (lb-rhs): -0.18393003940582275
238370 domains visited
Cumulative time: 103.94439840316772

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 158] [/input-8, 418] [/input, 3525] [/input-8, 1097] [/input-8, 1395] [/input-8, 306] [/input-8, 416] [/input-8, 292] [/input-8, 306] [/input-8, 158] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796872138977, worst -0.181221604347229
10 lb beta sum: 0.7119796872138977, worst -0.1811295747756958
Time: prepare 3.2351    bound 7.9790    transfer 0.3615    finalize 1.5061    func 13.5118    
Accumulated time: func 61.9914    prepare 16.8458    bound 36.9756    transfer 1.9459    finalize 3.9960    
all_split False
======================Cut inference begins======================
max lb tensor(0.35352576) min lb tensor(-0.18108714)
Number of Verified Splits: 12544 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.0011756420135498047 
BICCOS Cumulative time: 0.0883479118347168
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18393 (21), -0.18336 (21), -0.18275 (21), -0.18235 (22), -0.18220 (22), -0.18190 (22), -0.18161 (21), -0.18109 (22), -0.18095 (21), -0.18013 (22), -0.18011 (22), -0.17874 (23), -0.17525 (22), -0.17467 (22), -0.17443 (22), -0.17383 (21), -0.17372 (22), -0.17323 (21), -0.17264 (21), -0.17229 (21), 
Length of domains: 118769
Time: pickout 0.5513    decision 4.2079    set_bounds 4.0341    solve 13.5233    add 0.2020    
Accumulated time: pickout 2.6549    decision 18.3206    set_bounds 21.1573    solve 63.0477    add 20.3682    
Current (lb-rhs): -0.18393003940582275
291362 domains visited
Cumulative time: 126.62794899940491

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 154] [/input-8, 154] [/input-8, 146] [/input-8, 306] [/input-8, 154] [/input, 373] [/input-8, 1395] [/input-8, 420] [/input-8, 292] [/input-8, 146] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796872138977, worst -0.18124401569366455
10 lb beta sum: 0.7119796872138977, worst -0.1811467409133911
Time: prepare 3.3120    bound 7.9800    transfer 0.3671    finalize 1.6633    func 13.7467    
Accumulated time: func 75.7381    prepare 20.1584    bound 44.9556    transfer 2.3130    finalize 5.6593    
all_split False
======================Cut inference begins======================
max lb tensor(0.34603918) min lb tensor(-0.18110907)
Number of Verified Splits: 13238 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.0011043548583984375 
BICCOS Cumulative time: 0.08945226669311523
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18336 (21), -0.18275 (21), -0.18235 (22), -0.18220 (22), -0.18161 (21), -0.18111 (22), -0.18109 (22), -0.18095 (21), -0.18013 (22), -0.18011 (22), -0.17886 (23), -0.17874 (23), -0.17525 (22), -0.17467 (22), -0.17443 (22), -0.17372 (22), -0.17264 (21), -0.17194 (22), -0.17165 (22), -0.17138 (21), 
Length of domains: 138299
Time: pickout 0.5506    decision 3.3780    set_bounds 4.1815    solve 13.7594    add 0.2129    
Accumulated time: pickout 3.2055    decision 21.6986    set_bounds 25.3388    solve 76.8072    add 20.5811    
Current (lb-rhs): -0.1833559274673462
343660 domains visited
Cumulative time: 148.9263355731964

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 154] [/input-8, 420] [/input-8, 420] [/input, 373] [/input, 373] [/input-8, 1195] [/input-8, 423] [/input-8, 146] [/input-8, 1384] [/input-8, 292] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796872138977, worst -0.1796180009841919
10 lb beta sum: 0.7119796872138977, worst -0.1796184778213501
Time: prepare 3.3194    bound 7.9798    transfer 0.3863    finalize 1.8102    func 13.9194    
Accumulated time: func 89.6575    prepare 23.4783    bound 52.9355    transfer 2.6993    finalize 7.4695    
all_split False
======================Cut inference begins======================
max lb tensor(0.33778083) min lb tensor(-0.17961085)
Number of Verified Splits: 13030 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.0010266304016113281 
BICCOS Cumulative time: 0.09047889709472656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18111 (22), -0.18109 (22), -0.18013 (22), -0.17961 (22), -0.17950 (23), -0.17938 (23), -0.17901 (22), -0.17886 (23), -0.17874 (23), -0.17835 (22), -0.17767 (22), -0.17594 (23), -0.17110 (23), -0.17052 (23), -0.17040 (23), -0.16972 (23), -0.16950 (22), -0.16937 (22), -0.16921 (22), -0.16907 (22), 
Length of domains: 158037
Time: pickout 0.5591    decision 3.4022    set_bounds 4.3806    solve 13.9338    add 0.3321    
Accumulated time: pickout 3.7646    decision 25.1008    set_bounds 29.7195    solve 90.7410    add 20.9132    
Current (lb-rhs): -0.18110907077789307
396166 domains visited
Cumulative time: 171.76839351654053

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1387] [/input-8, 146] [/input-8, 158] [/input-8, 414] [/input-8, 1134] [/input-8, 146] [/input-8, 737] [/input-8, 154] [/input-8, 418] [/input-8, 158] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796872138977, worst -0.17696869373321533
10 lb beta sum: 0.7119796872138977, worst -0.17693054676055908
Time: prepare 3.3066    bound 7.9800    transfer 0.4261    finalize 0.6211    func 14.1899    
Accumulated time: func 103.8474    prepare 26.7854    bound 60.9155    transfer 3.1253    finalize 8.0906    
all_split False
======================Cut inference begins======================
max lb tensor(0.36115491) min lb tensor(-0.17691815)
Number of Verified Splits: 15128 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.0012352466583251953 
BICCOS Cumulative time: 0.09171414375305176
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18111 (22), -0.17961 (22), -0.17950 (23), -0.17938 (23), -0.17901 (22), -0.17886 (23), -0.17835 (22), -0.17767 (22), -0.17692 (23), -0.17596 (23), -0.17594 (23), -0.17584 (24), -0.17110 (23), -0.17052 (23), -0.17040 (23), -0.16972 (23), -0.16950 (22), -0.16937 (22), -0.16906 (22), -0.16903 (22), 
Length of domains: 175677
Time: pickout 0.5503    decision 3.3799    set_bounds 4.5321    solve 14.2046    add 0.1943    
Accumulated time: pickout 4.3149    decision 28.4807    set_bounds 34.2516    solve 104.9455    add 21.1075    
Current (lb-rhs): -0.18110907077789307
446574 domains visited
Cumulative time: 194.88904857635498

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 292] [/input-8, 154] [/input-8, 154] [/input-8, 146] [/input-8, 423] [/input-8, 1387] [/input-8, 306] [/input-8, 158] [/input-8, 414] [/input, 373] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796872138977, worst -0.1769944429397583
10 lb beta sum: 0.7119796872138977, worst -0.17695915699005127
Time: prepare 3.4409    bound 7.9772    transfer 0.4676    finalize 0.6221    func 12.9324    
Accumulated time: func 116.7798    prepare 30.2268    bound 68.8927    transfer 3.5930    finalize 8.7127    
all_split False
======================Cut inference begins======================
max lb tensor(0.39162862) min lb tensor(-0.17694724)
Number of Verified Splits: 14374 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.0013859272003173828 
BICCOS Cumulative time: 0.09310007095336914
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17961 (22), -0.17950 (23), -0.17938 (23), -0.17901 (22), -0.17835 (22), -0.17767 (22), -0.17695 (23), -0.17692 (23), -0.17596 (23), -0.17594 (23), -0.17593 (24), -0.17584 (24), -0.17110 (23), -0.17052 (23), -0.17040 (23), -0.16972 (23), -0.16950 (22), -0.16894 (23), -0.16892 (22), -0.16878 (23), 
Length of domains: 194071
Time: pickout 0.5686    decision 3.3957    set_bounds 4.9041    solve 12.9508    add 0.1797    
Accumulated time: pickout 4.8835    decision 31.8764    set_bounds 39.1556    solve 117.8963    add 21.2873    
Current (lb-rhs): -0.17961084842681885
497736 domains visited
Time out!!!!!!!!
Result: unknown in 220.0240 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 14, vnnlib ID: 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.06784821, -10.58980083, -14.57435703, -13.27788925, -13.83081436,
         -14.45864487, -13.14409447, -13.97298336, -12.07690144,  -9.28960514]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [479]; unstable size 479; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 218, 1, 479] with unstable size 217 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 479] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 479] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [217]; unstable size 217; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 217] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 217] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.56003881, 0.62899399, 3.70473719, 2.64315987, 3.00231910, 3.71363831,
         2.32805896, 2.93838763, 1.83370137]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0622 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 15, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.44266796, -16.16106987, -11.92645931, -10.71731567, -11.05861855,
         -10.75457382, -13.42498779, -10.81375790, -16.44475365, -15.04152584]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [587]; unstable size 587; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 222, 1, 587] with unstable size 221 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 587] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 587] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [221]; unstable size 221; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 221] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 221] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.55051112,  4.09006119,  0.36009479, -0.47126305, -0.31621835,
          1.88454628, -0.86957800,  4.73674726,  3.06783509]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.44266796, -16.16106987, -11.92645931, -10.71731567, -11.05861855,
         -10.75457382, -13.42498779, -10.81375790, -16.44475365, -15.04152584]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.83619690, -16.61016846, -12.28275108, -11.27688122, -11.14465904,
          -11.27646160, -13.88090134, -10.95770168, -16.84897423, -15.54391193],
         [-14.83619690, -16.61016846, -12.28275108, -11.27688122, -11.14465904,
          -11.27646160, -13.88090134, -10.95770168, -16.84897423, -15.54391193]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.13222218, -0.00041962, -0.31917953]]], device='cuda:0')
number of violation:  3
Attack finished in 0.0131 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0622 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 16, vnnlib ID: 16 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.68520546, -29.33057404, -23.34724998, -23.50040627, -23.08244896,
         -23.89678383, -23.22287750, -25.18677521, -28.65573311, -29.02714920]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [857]; unstable size 857; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 401, 1, 857] with unstable size 400 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 857] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 857] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [400]; unstable size 400; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 400] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 400] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.34057260,  3.30707359, -1.46605659, -1.78303576, -0.07614884,
         -1.46366978,  0.02865005,  2.77813077,  3.23617649]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.68520546, -29.33057404, -23.34724998, -23.50040627, -23.08244896,
         -23.89678383, -23.22287750, -25.18677521, -28.65573311, -29.02714920]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.68520737, -29.33057594, -23.34725189, -23.50040627, -23.08245087,
          -23.89678574, -23.22287941, -25.18677711, -28.65573311, -29.02714920],
         [-26.68520737, -29.33057594, -23.34725189, -23.50040627, -23.08245087,
          -23.89678574, -23.22287941, -25.18677711, -28.65573311, -29.02714920]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15315437, -0.41795540,  0.39637947, -0.27752686]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0649 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 17, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.55547142, -21.29835701, -26.80152893, -27.28372574, -26.67305183,
         -28.70449638, -26.93589401, -28.94626617, -24.43898201, -23.37986755]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [525]; unstable size 525; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 254, 1, 525] with unstable size 253 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 525] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 525] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [253]; unstable size 253; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 253] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 253] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.71861172, 3.84952354, 4.56171274, 3.84017372, 5.90635014, 4.26612568,
         6.14898157, 1.99088383, 1.41389060]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0627 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 18, vnnlib ID: 18 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.96761131, -23.51111603, -16.18240738, -18.45089149, -16.26456261,
         -17.94385719, -14.73691177, -18.44084930, -24.07545662, -22.63823509]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [463]; unstable size 463; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 311, 1, 463] with unstable size 310 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 463] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 463] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [310]; unstable size 310; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 310] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 310] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.97309542,  6.70187187, -0.02662706,  2.50170612, -0.07382059,
          1.85107899,  1.77262008,  7.00046825,  5.85668755]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.96761131, -23.51111603, -16.18240738, -18.45089149, -16.26456261,
         -17.94385719, -14.73691177, -18.44084930, -24.07545662, -22.63823509]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.23it/s]100%|██████████| 1/1 [00:00<00:00,  8.22it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.13876343, -24.08310127, -16.37594223, -18.98218155, -16.69490623,
          -18.46617508, -15.56402779, -18.87380600, -24.34334183, -23.19640350],
         [-21.13876343, -24.08310127, -16.37594223, -18.98218155, -16.69490623,
          -18.46617508, -15.56402779, -18.87380600, -24.34334183, -23.19640350]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.81191444, 1.13087845]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1245 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 8th iter
best_l after optimization: 30.210878372192383
alpha/beta optimization time: 0.11655449867248535
initial alpha-crown bounds: tensor([[4.06331825e+00, 6.77928352e+00, 3.31611633e-02, 2.54543519e+00,
         2.59304047e-03, 1.90330601e+00, 1.86108637e+00, 7.08985662e+00,
         5.93283844e+00]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 0 ; Worst class: (+ rhs) 0.0025930404663085938
verified with init bound!
Result: safe-incomplete in 0.2874 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 19, vnnlib ID: 19 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.95204353, -23.01272583, -16.49953651, -14.64277744, -15.90678215,
         -15.11271095, -15.73008537, -18.56428909, -21.39385223, -22.75593376]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [624]; unstable size 624; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 333, 1, 624] with unstable size 332 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 624] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 624] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [332]; unstable size 332; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 332] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 332] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.85006928,  6.56637955,  0.72854507,  0.16635036,  0.09236524,
         -0.16829324,  2.54186058,  4.97395706,  6.48725319]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.95204353, -23.01272583, -16.49953651, -14.64277744, -15.90678215,
         -15.11271095, -15.73008537, -18.56428909, -21.39385223, -22.75593376]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.78it/s]100%|██████████| 1/1 [00:00<00:00,  8.77it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.02144432, -22.99676323, -16.43036079, -14.81798553, -15.77610588,
          -15.32225418, -15.29498672, -18.67889786, -21.40403748, -22.81297874]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.47700119]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1168 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 25.757089614868164
alpha/beta optimization time: 1.2432456016540527
initial alpha-crown bounds: tensor([[ 3.92190480,  6.63770294,  0.78050613,  0.20929861,  0.10922260,
         -0.07384753,  2.59734678,  5.03754330,  6.53741217]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.07384753227233887
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.57607293128967
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.57602858543396
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.57600140571594
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.57597851753235
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.57595872879028
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.57593941688538
Verifying property 5 with 1 instances.
##### Instance 19 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.07384753]], device='cuda:0') need to verify.
Model prediction is: tensor([-19.95204353, -23.01272583, -16.49953651, -14.64277744, -15.90678215,
        -15.11271095, -15.73008537, -18.56428909, -21.39385223, -22.75593376],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.07384753]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 624
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 330
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 975
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010967254638671875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07384800910949707
10 lb beta sum: 0.0, worst -0.0738523006439209
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0547    transfer 0.0001    finalize 0.0001    func 0.0552    
Accumulated time: func 0.0552    prepare 0.0002    bound 0.0547    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 0] 
split level 1: [/input-12, 64] 
split level 2: [/input-12, 83] 
split level 3: [/input-12, 78] 
split level 4: [/input-12, 85] 
split level 5: [/input-12, 61] 
split level 6: [/input-8, 220] 
split level 7: [/input-8, 227] 
split level 8: [/input-12, 72] 
split level 9: [/input-8, 219] 
split level 10: [/input-8, 1947] 
split level 11: [/input-8, 229] 
split level 12: [/input-8, 221] 
split level 13: [/input-8, 612] 
split level 14: [/input-12, 43] 
split level 15: [/input-8, 1948] 
split level 16: [/input-8, 214] 
split level 17: [/input-8, 1697] 
split level 18: [/input-8, 206] 
split level 19: [/input-8, 1372] 
split level 20: [/input-8, 578] 
split level 21: [/input-8, 605] 
split level 22: [/input, 3153] 
split level 23: [/input-8, 238] 
split level 24: [/input-8, 1380] 
split level 25: [/input-8, 1954] 
split level 26: [/input-8, 1381] 
split level 27: [/input-8, 245] 
split level 28: [/input-8, 593] 
split level 29: [/input-8, 946] 
split level 30: [/input-8, 213] 
split level 31: [/input-8, 1709] 
split level 32: [/input-8, 239] 
split level 33: [/input-8, 577] 
split level 34: [/input-8, 218] 
split level 35: [/input-8, 235] 
split level 36: [/input-8, 223] 
split level 37: [/input, 2657] 
split level 38: [/input-8, 211] 
split level 39: [/input-8, 222] 
split level 40: [/input, 1403] 
split level 41: [/input, 3475] 
split level 42: [/input-8, 1373] 
split level 43: [/input-8, 1379] 
split level 44: [/input-8, 1374] 
split level 45: [/input-8, 1710] 
split level 46: [/input, 3427] 
split level 47: [/input-8, 224] 
split level 48: [/input, 929] 
split level 49: [/input-8, 254] 
split level 50: [/input, 710] 
split level 51: [/input, 922] 
split level 52: [/input, 3139] 
split level 53: [/input, 3235] 
split level 54: [/input, 900] 
split level 55: [/input, 1002] 
split level 56: [/input-8, 203] 
split level 57: [/input, 3138] 
split level 58: [/input-8, 1763] 
split level 59: [/input, 3973] 
split level 60: [/input, 2441] 
split level 61: [/input, 2993] 
split level 62: [/input-8, 240] 
split level 63: [/input, 1351] 
split level 64: [/input-8, 231] 
split level 65: [/input-8, 988] 
split level 66: [/input-8, 345] 
split level 67: [/input, 2423] 
split level 68: [/input-8, 1931] 
split level 69: [/input-8, 196] 
split level 70: [/input-8, 1169] 
split level 71: [/input-8, 1774] 
split level 72: [/input-8, 242] 
split level 73: [/input, 2679] 
split level 74: [/input-8, 204] 
split level 75: [/input-8, 1365] 
split level 76: [/input, 1400] 
split level 77: [/input-8, 2005] 
split level 78: [/input-8, 1946] 
split level 79: [/input, 2673] 
split level 80: [/input, 3219] 
split level 81: [/input, 930] 
split level 82: [/input-8, 241] 
split level 83: [/input, 193] 
split level 84: [/input, 1385] 
split level 85: [/input, 2184] 
split level 86: [/input, 2263] 
split level 87: [/input, 2721] 
split level 88: [/input, 2977] 
split level 89: [/input, 172] 
split level 90: [/input, 2994] 
split level 91: [/input-8, 247] 
split level 92: [/input, 2165] 
split level 93: [/input, 1640] 
split level 94: [/input, 2197] 
split level 95: [/input-8, 197] 
split level 96: [/input-8, 1366] 
split level 97: [/input, 3429] 
split level 98: [/input-8, 255] 
split level 99: [/input-8, 1981] 
split level 100: [/input, 2708] 
split level 101: [/input-8, 1382] 
split level 102: [/input, 2470] 
split level 103: [/input, 120] 
split level 104: [/input-8, 1994] 
split level 105: [/input, 2425] 
split level 106: [/input-8, 201] 
split level 107: [/input-8, 1305] 
split level 108: [/input, 1356] 
split level 109: [/input, 156] 
split level 110: [/input, 401] 
split level 111: [/input, 2697] 
split level 112: [/input, 984] 
split level 113: [/input, 990] 
split level 114: [/input, 985] 
split level 115: [/input, 836] 
split level 116: [/input-8, 1737] 
split level 117: [/input-8, 934] 
split level 118: [/input, 2504] 
split level 119: [/input, 2540] 
split level 120: [/input, 2166] 
split level 121: [/input, 2279] 
split level 122: [/input, 155] 
split level 123: [/input, 2473] 
split level 124: [/input, 2476] 
split level 125: [/input, 3444] 
split level 126: [/input, 149] 
split level 127: [/input, 2698] 
split level 128: [/input, 3530] 
split level 129: [/input, 2426] 
split level 130: [/input, 2274] 
split level 131: [/input, 121] 
split level 132: [/input, 1006] 
split level 133: [/input-8, 1758] 
split level 134: [/input, 163] 
split level 135: [/input, 742] 
split level 136: [/input, 994] 
split level 137: [/input, 2971] 
split level 138: [/input, 177] 
split level 139: [/input, 2716] 
split level 140: [/input, 2979] 
split level 141: [/input-8, 1733] 
split level 142: [/input-8, 1244] 
split level 143: [/input, 419] 
split level 144: [/input, 932] 
split level 145: [/input, 2179] 
split level 146: [/input, 171] 
split level 147: [/input-8, 216] 
split level 148: [/input, 2537] 
split level 149: [/input, 2121] 
split level 150: [/input, 3140] 
split level 151: [/input, 2724] 
split level 152: [/input-8, 1746] 
split level 153: [/input, 91] 
split level 154: [/input-8, 1999] 
split level 155: [/input-8, 843] 
split level 156: [/input, 1863] 
split level 157: [/input, 3411] 
split level 158: [/input, 1494] 
split level 159: [/input, 129] 
split level 160: [/input, 2465] 
split level 161: [/input, 3173] 
split level 162: [/input, 2467] 
split level 163: [/input, 2661] 
split level 164: [/input, 2190] 
split level 165: [/input, 157] 
split level 166: [/input, 3497] 
split level 167: [/input-8, 1389] 
split level 168: [/input, 147] 
split level 169: [/input-8, 1226] 
split level 170: [/input, 180] 
split level 171: [/input, 3390] 
split level 172: [/input, 2460] 
split level 173: [/input, 3227] 
split level 174: [/input, 2103] 
split level 175: [/input, 2395] 
split level 176: [/input, 60] 
split level 177: [/input, 2360] 
split level 178: [/input, 1617] 
split level 179: [/input, 2257] 
split level 180: [/input, 597] 
split level 181: [/input, 2156] 
split level 182: [/input, 2844] 
split level 183: [/input, 137] 
split level 184: [/input, 2409] 
split level 185: [/input, 1469] 
split level 186: [/input, 2690] 
split level 187: [/input, 1454] 
split level 188: [/input, 2148] 
split level 189: [/input, 59] 
split level 190: [/input, 2119] 
split level 191: [/input, 2088] 
split level 192: [/input, 54] 
split level 193: [/input, 2406] 
split level 194: [/input, 2089] 
split level 195: [/input-8, 1752] 
split level 196: [/input, 1022] 
split level 197: [/input, 820] 
split level 198: [/input, 2498] 
split level 199: [/input, 2542] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07372641563415527
10 lb beta sum: 0.0, worst -0.07373237609863281
Time: prepare 0.0114    bound 0.0986    transfer 0.0022    finalize 0.0026    func 0.1174    
Accumulated time: func 0.1725    prepare 0.0218    bound 0.1532    transfer 0.0023    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.28507137) min lb tensor(-0.07372642)
Number of Verified Splits: 8 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010835886001586914 
BICCOS Cumulative time: 0.010835886001586914
Preprocessing time: 0.009909868240356445 Inference time: 0.00032401084899902344 Add cuts time: 0.00012230873107910156 Cut analysis time: 0.00047969818115234375
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5287    set_bounds 0.0093    solve 0.1174    add 0.0098    
Accumulated time: pickout 0.0003    decision 0.5287    set_bounds 0.0093    solve 0.1174    add 0.0098    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([0]), tensor([-1.]), tensor([0]), tensor([8.25631881e-14]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([0]), tensor([1.]), tensor([0]), tensor([2.82952102e+16]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026601314544677734

all verified at 1th iter
Time: prepare 0.0003    bound 0.0163    transfer 0.0001    finalize 0.0001    func 0.0169    
Accumulated time: func 0.1894    prepare 0.0220    bound 0.1696    transfer 0.0024    finalize 0.0029    
After pruning, left:  0

Back to Regular BaB


Properties batch 6, size 1
Remaining timeout: 197.6288402080536
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.6287751197815
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.6287453174591
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.3713 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 20, vnnlib ID: 20 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.15224266, -25.34284210, -20.68698883, -21.11905098, -21.28755379,
         -21.18818092, -18.96833420, -23.86169434, -24.43035507, -25.58597183]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [838]; unstable size 838; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 334, 1, 838] with unstable size 333 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 838] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 838] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [333]; unstable size 333; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 333] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 333] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.44667172, 4.02514362, 0.65229511, 0.96642137, 0.94116783, 0.84790790,
         2.93652296, 3.08846712, 4.46393108]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0399 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 21, vnnlib ID: 21 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.31029320, -25.64724922, -21.19924164, -21.00788879, -21.44479942,
         -20.21812248, -22.40578079, -20.59401131, -24.67918396, -24.01255989]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [523]; unstable size 523; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 523] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 523] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 523] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 180] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.59976006,  3.72134590, -0.09878170,  0.47413671,  0.20959401,
          1.12203443, -0.49487066,  3.08997488,  2.65038443]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.31029320, -25.64724922, -21.19924164, -21.00788879, -21.44479942,
         -20.21812248, -22.40578079, -20.59401131, -24.67918396, -24.01255989]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.13118744, -26.43610382, -22.10371780, -21.97385406, -22.15757751,
          -21.20539856, -23.31969070, -21.12502861, -25.59633255, -24.98401833],
         [-26.13118744, -26.43610382, -22.10371780, -21.97385406, -22.15757751,
          -21.20539856, -23.31969070, -21.12502861, -25.59633255, -24.98401833]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.89831924, -0.08036995]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0061 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0439 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 22, vnnlib ID: 22 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.87531281, -15.75632095, -14.57347012, -15.76169777, -14.07984734,
         -16.31337166, -16.52824211, -16.65783691,  -8.99959373, -15.31440544]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [604]; unstable size 604; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 244, 1, 604] with unstable size 243 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 604] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 604] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [243]; unstable size 243; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 243] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 243] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.74084198, 5.52800512, 4.11084938, 5.41803741, 3.71402359, 5.74122143,
         6.21470261, 6.00886202, 4.98770475]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0686 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 23, vnnlib ID: 23 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.64936256, -23.01173401, -19.97909546, -17.49272156, -20.01158905,
         -17.02442741, -21.03547668, -19.50024414, -20.38127136, -20.46527672]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [447]; unstable size 447; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 447] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 447] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 447] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 188] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.30454564, 4.15309906, 1.79540050, 0.15248442, 1.72279477, 3.02521515,
         1.09999514, 1.62638283, 1.86410809]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0382 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 24, vnnlib ID: 24 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.53723717, -20.17998314, -24.00674057, -26.48255730, -24.71885872,
         -27.20367241, -25.54711533, -26.09858704, -22.80258942, -21.74352837]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1052]; unstable size 1052; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 366, 1, 1052] with unstable size 365 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 1052] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1052] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [365]; unstable size 365; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 365] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 365] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.67349339,  0.95226765,  3.60676575,  1.65506077,  4.16815853,
          2.46865177,  3.16671228,  0.41265202,  0.44317544]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.53723717, -20.17998314, -24.00674057, -26.48255730, -24.71885872,
         -27.20367241, -25.54711533, -26.09858704, -22.80258942, -21.74352837]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.80it/s]100%|██████████| 1/1 [00:00<00:00,  8.79it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.87743950, -19.35758781, -22.15427971, -24.89256096, -22.97465324,
          -25.62451553, -23.85381317, -24.51388931, -21.46959877, -20.74610329]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.51985168]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1164 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 17.485843658447266
alpha/beta optimization time: 1.2424829006195068
initial alpha-crown bounds: tensor([[-0.55390978,  1.12264442,  3.76586771,  1.80786228,  4.34684706,
          2.61715794,  3.32345438,  0.54351711,  0.51240134]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.5539097785949707
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.59653425216675
Verifying property 0 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.55390978]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.53723717, -20.17998314, -24.00674057, -26.48255730, -24.71885872,
        -27.20367241, -25.54711533, -26.09858704, -22.80258942, -21.74352837],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.55390978]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1052
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 355
Node /15 input 0: size torch.Size([100]) unstable 29
-----------------
# of unstable neurons: 1436
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010013580322265625
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5539078712463379
10 lb beta sum: 0.0, worst -0.5539193153381348
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    func 0.0538    
Accumulated time: func 0.0538    prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 69] 
split level 3: [/input-12, 38] 
split level 4: [/input-12, 46] 
split level 5: [/input-12, 8] 
split level 6: [/input-12, 53] 
split level 7: [/input-12, 67] 
split level 8: [/input-12, 2] 
split level 9: [/input-12, 89] 
split level 10: [/input-12, 64] 
split level 11: [/input-12, 24] 
split level 12: [/input-12, 14] 
split level 13: [/input-12, 42] 
split level 14: [/input-8, 1957] 
split level 15: [/input-8, 157] 
split level 16: [/input-8, 1964] 
split level 17: [/input-12, 71] 
split level 18: [/input-12, 90] 
split level 19: [/input-12, 57] 
split level 20: [/input-8, 421] 
split level 21: [/input-8, 749] 
split level 22: [/input-8, 914] 
split level 23: [/input-8, 1627] 
split level 24: [/input-8, 1965] 
split level 25: [/input-8, 1691] 
split level 26: [/input-8, 1386] 
split level 27: [/input-8, 414] 
split level 28: [/input-8, 150] 
split level 29: [/input-8, 371] 
split level 30: [/input-8, 1951] 
split level 31: [/input-8, 1710] 
split level 32: [/input-8, 1635] 
split level 33: [/input-8, 605] 
split level 34: [/input-8, 604] 
split level 35: [/input-8, 433] 
split level 36: [/input-8, 1689] 
split level 37: [/input-8, 1392] 
split level 38: [/input-8, 416] 
split level 39: [/input-8, 1688] 
split level 40: [/input-12, 13] 
split level 41: [/input-8, 1394] 
split level 42: [/input-8, 1675] 
split level 43: [/input-8, 1658] 
split level 44: [/input-8, 1657] 
split level 45: [/input-8, 1650] 
split level 46: [/input-8, 411] 
split level 47: [/input-8, 1483] 
split level 48: [/input-8, 1577] 
split level 49: [/input-8, 1393] 
split level 50: [/input-8, 1194] 
split level 51: [/input-8, 1179] 
split level 52: [/input-8, 748] 
split level 53: [/input-8, 1385] 
split level 54: [/input-8, 1619] 
split level 55: [/input-8, 821] 
split level 56: [/input-8, 1397] 
split level 57: [/input, 3546] 
split level 58: [/input, 1678] 
split level 59: [/input-8, 1620] 
split level 60: [/input-8, 1649] 
split level 61: [/input, 3547] 
split level 62: [/input, 2186] 
split level 63: [/input, 3545] 
split level 64: [/input-8, 406] 
split level 65: [/input-8, 958] 
split level 66: [/input-8, 1715] 
split level 67: [/input-8, 843] 
split level 68: [/input, 3450] 
split level 69: [/input-8, 1396] 
split level 70: [/input-8, 1395] 
split level 71: [/input-8, 293] 
split level 72: [/input-8, 1754] 
split level 73: [/input-8, 1067] 
split level 74: [/input-8, 1702] 
split level 75: [/input, 3537] 
split level 76: [/input, 131] 
split level 77: [/input-8, 307] 
split level 78: [/input-8, 1317] 
split level 79: [/input-8, 403] 
split level 80: [/input-8, 1230] 
split level 81: [/input-8, 1484] 
split level 82: [/input, 2714] 
split level 83: [/input-8, 820] 
split level 84: [/input, 3770] 
split level 85: [/input-8, 1399] 
split level 86: [/input-8, 889] 
split level 87: [/input-8, 1226] 
split level 88: [/input, 999] 
split level 89: [/input-8, 245] 
split level 90: [/input-8, 145] 
split level 91: [/input, 3525] 
split level 92: [/input-8, 242] 
split level 93: [/input-8, 1598] 
split level 94: [/input, 2283] 
split level 95: [/input-8, 1388] 
split level 96: [/input, 985] 
split level 97: [/input-8, 1593] 
split level 98: [/input, 1000] 
split level 99: [/input-8, 890] 
split level 100: [/input, 982] 
split level 101: [/input, 3542] 
split level 102: [/input-8, 497] 
split level 103: [/input, 962] 
split level 104: [/input-8, 1610] 
split level 105: [/input, 978] 
split level 106: [/input, 3526] 
split level 107: [/input-8, 308] 
split level 108: [/input-8, 373] 
split level 109: [/input-8, 826] 
split level 110: [/input, 1413] 
split level 111: [/input, 713] 
split level 112: [/input, 998] 
split level 113: [/input, 712] 
split level 114: [/input-8, 284] 
split level 115: [/input, 694] 
split level 116: [/input-8, 402] 
split level 117: [/input, 983] 
split level 118: [/input, 1003] 
split level 119: [/input-8, 891] 
split level 120: [/input, 2785] 
split level 121: [/input, 997] 
split level 122: [/input, 1001] 
split level 123: [/input, 715] 
split level 124: [/input, 2770] 
split level 125: [/input-8, 292] 
split level 126: [/input-8, 241] 
split level 127: [/input, 2539] 
split level 128: [/input, 2945] 
split level 129: [/input-8, 1318] 
split level 130: [/input-8, 306] 
split level 131: [/input, 1012] 
split level 132: [/input-8, 825] 
split level 133: [/input, 1020] 
split level 134: [/input, 977] 
split level 135: [/input, 2786] 
split level 136: [/input, 907] 
split level 137: [/input-8, 1323] 
split level 138: [/input-8, 244] 
split level 139: [/input, 2769] 
split level 140: [/input, 1011] 
split level 141: [/input-8, 1594] 
split level 142: [/input-8, 1398] 
split level 143: [/input, 2266] 
split level 144: [/input-8, 827] 
split level 145: [/input-8, 1609] 
split level 146: [/input, 2407] 
split level 147: [/input, 1006] 
split level 148: [/input, 3528] 
split level 149: [/input, 961] 
split level 150: [/input, 1896] 
split level 151: [/input, 2555] 
split level 152: [/input-8, 246] 
split level 153: [/input, 2716] 
split level 154: [/input, 714] 
split level 155: [/input, 3508] 
split level 156: [/input-8, 250] 
split level 157: [/input, 2537] 
split level 158: [/input-8, 254] 
split level 159: [/input-8, 1376] 
split level 160: [/input-8, 255] 
split level 161: [/input, 2267] 
split level 162: [/input-8, 819] 
split level 163: [/input, 2279] 
split level 164: [/input-8, 840] 
split level 165: [/input, 2284] 
split level 166: [/input, 2282] 
split level 167: [/input, 2753] 
split level 168: [/input-8, 393] 
split level 169: [/input, 2538] 
split level 170: [/input, 675] 
split level 171: [/input-8, 253] 
split level 172: [/input, 1013] 
split level 173: [/input, 1019] 
split level 174: [/input-8, 243] 
split level 175: [/input-8, 842] 
split level 176: [/input-8, 1175] 
split level 177: [/input-8, 2033] 
split level 178: [/input, 2265] 
split level 179: [/input, 2549] 
split level 180: [/input, 2285] 
split level 181: [/input-8, 833] 
split level 182: [/input-8, 203] 
split level 183: [/input, 2550] 
split level 184: [/input-12, 36] 
split level 185: [/input, 2536] 
split level 186: [/input, 2535] 
split level 187: [/input, 2903] 
split level 188: [/input, 2551] 
split level 189: [/input, 1912] 
split level 190: [/input, 2552] 
split level 191: [/input, 2787] 
split level 192: [/input, 2280] 
split level 193: [/input, 2261] 
split level 194: [/input, 2557] 
split level 195: [/input, 2553] 
split level 196: [/input, 2541] 
split level 197: [/input, 2548] 
split level 198: [/input, 2547] 
split level 199: [/input, 2281] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5538911819458008
10 lb beta sum: 0.0, worst -0.5538864135742188
Time: prepare 0.0115    bound 0.1009    transfer 0.0017    finalize 0.0027    func 0.1193    
Accumulated time: func 0.1732    prepare 0.0215    bound 0.1542    transfer 0.0018    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.25172043) min lb tensor(-0.55388069)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010228157043457031 
BICCOS Cumulative time: 0.010228157043457031
Preprocessing time: 0.009857654571533203 Inference time: 0.00011730194091796875 Add cuts time: 4.57763671875e-05 Cut analysis time: 0.00020742416381835938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.53513 (1), -0.53304 (1), -0.53184 (1), -0.53179 (1), -0.53135 (1), -0.53029 (1), -0.52977 (1), -0.52829 (1), -0.52829 (1), -0.52762 (1), -0.52753 (1), -0.52681 (1), -0.52651 (1), -0.52603 (1), -0.52467 (1), -0.52371 (1), -0.52368 (1), -0.52164 (1), -0.52129 (1), -0.52091 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5230    set_bounds 0.0089    solve 0.1194    add 0.0729    
Accumulated time: pickout 0.0004    decision 0.5230    set_bounds 0.0089    solve 0.1194    add 0.0729    
Current (lb-rhs): -0.5351314544677734
50 domains visited
Cumulative time: 0.8177011013031006

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 61] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 61] [/input-12, 31] [/input-12, 61] 
split level 1: [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 31] [/input-12, 69] [/input-12, 31] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 69] 
split level 3: [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.49222230911254883
10 lb beta sum: 0.41372597217559814, worst -0.479583203792572
Time: prepare 0.0071    bound 0.1193    transfer 0.0020    finalize 0.0024    func 0.1334    
Accumulated time: func 0.3066    prepare 0.0288    bound 0.2735    transfer 0.0039    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.31830305) min lb tensor(-0.47951084)
Number of Verified Splits: 80 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.016955137252807617 
BICCOS Cumulative time: 0.02718329429626465
Preprocessing time: 0.01160573959350586 Inference time: 0.003479480743408203 Add cuts time: 0.0014896392822265625 Cut analysis time: 0.0003802776336669922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24998 (2), -0.24938 (2), -0.24669 (2), -0.24511 (2), -0.24502 (2), -0.24322 (2), -0.24095 (2), -0.23992 (2), -0.23679 (2), -0.23601 (2), -0.23483 (2), -0.23271 (2), -0.23188 (2), -0.23043 (2), -0.22825 (2), -0.22772 (2), -0.22687 (2), -0.22620 (2), -0.22558 (2), -0.22239 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0197    set_bounds 0.0131    solve 0.1335    add 0.0852    
Accumulated time: pickout 0.0013    decision 0.5427    set_bounds 0.0220    solve 0.2529    add 0.1582    
Current (lb-rhs): -0.2499758005142212
100 domains visited
Cumulative time: 1.0874130725860596

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 2: [/input-12, 69] [/input-12, 46] [/input-12, 69] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 38] [/input-12, 38] [/input-12, 69] 
split level 3: [/input-12, 67] [/input-12, 67] [/input-12, 46] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.25121259689331055
10 lb beta sum: 1.2177746295928955, worst -0.1514732837677002
Time: prepare 0.0065    bound 0.1183    transfer 0.0011    finalize 0.0021    func 0.1305    
Accumulated time: func 0.4371    prepare 0.0356    bound 0.3918    transfer 0.0050    finalize 0.0074    
all_split False
======================Cut inference begins======================
max lb tensor(0.67256129) min lb tensor(-0.14962792)
Number of Verified Splits: 286 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.030668973922729492 
BICCOS Cumulative time: 0.05785226821899414
Preprocessing time: 0.011437654495239258 Inference time: 0.01291203498840332 Add cuts time: 0.005870342254638672 Cut analysis time: 0.0004489421844482422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14963 (3), -0.14961 (3), -0.09265 (3), -0.05456 (3), -0.05450 (3), -0.05446 (3), -0.05425 (3), -0.05423 (3), -0.05409 (3), -0.04081 (3), -0.00303 (3), -0.00267 (3), 
Length of domains: 12
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0156    solve 0.1306    add 0.1066    
Accumulated time: pickout 0.0023    decision 0.5620    set_bounds 0.0376    solve 0.3835    add 0.2648    
Current (lb-rhs): -0.1496279239654541
112 domains visited
Cumulative time: 1.3914382457733154

Shallow-BaB round 4
batch: 12
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 31] [/input-12, 61] [/input-12, 61] [/input-12, 31] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 38] [/input-12, 38] [/input-12, 31] [/input-12, 38] [/input-12, 38] [/input-12, 31] 
split level 2: [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 38] 
split level 3: [/input-12, 89] [/input-12, 89] [/input-12, 2] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 46] 
split level 4: [/input-12, 2] [/input-12, 2] [/input-12, 67] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 53] 
split level 5: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 2] 
split level 6: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 8] 
split level 7: [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 64] 
split level 8: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 14] 
split level 9: [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-12, 42] 
split level 10: [/input-12, 90] [/input-12, 90] [/input-12, 71] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-8, 1964] 
split level 11: [/input-12, 71] [/input-12, 71] [/input-12, 90] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] 
split level 12: [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 90] 
split level 13: [/input-8, 914] [/input-8, 914] [/input-8, 1951] [/input-8, 914] [/input-8, 914] [/input-8, 914] [/input-8, 914] [/input-8, 914] [/input-8, 914] [/input-12, 57] 
split level 14: [/input-8, 1951] [/input-8, 1951] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1951] 
split level 15: [/input-8, 1710] [/input-8, 1710] [/input-8, 1689] [/input-8, 1951] [/input-8, 1951] [/input-8, 1951] [/input-8, 1951] [/input-8, 1951] [/input-8, 1951] [/input-8, 1710] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22480249404907227
10 lb beta sum: 1.8370299339294434, worst -0.04542863368988037
Time: prepare 0.0061    bound 0.1355    transfer 0.0011    finalize 0.0020    func 0.1474    
Accumulated time: func 0.5845    prepare 0.0425    bound 0.5273    transfer 0.0061    finalize 0.0094    
all_split False
======================Cut inference begins======================
max lb tensor(0.65292609) min lb tensor(-0.04146981)
Number of Verified Splits: 350 of 384
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 17
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.17354798316955566 
BICCOS Cumulative time: 0.2314002513885498
Preprocessing time: 0.011127471923828125 Inference time: 0.15606951713562012 Add cuts time: 0.005560159683227539 Cut analysis time: 0.0007908344268798828
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0006    decision 0.0545    set_bounds 0.0136    solve 0.1475    add 0.0255    
Accumulated time: pickout 0.0030    decision 0.6164    set_bounds 0.0512    solve 0.5310    add 0.2902    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
112 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([2.82952102e+16, 2.28399441e-01, 4.01762426e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61, 31]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.82952102e+16, 2.28399441e-01, 1.50063261e-01, 7.92780966e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61, 31]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.82952102e+16, 2.28399441e-01, 1.50063261e-01, 9.30030197e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.82952102e+16, 1.51293084e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([2.82952102e+16, 2.31368229e-01, 4.39489305e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.82952102e+16, 2.31368229e-01, 1.45006239e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.82952102e+16, 1.50099322e-01, 4.59899008e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([2.82952102e+16, 1.50099322e-01, 1.44925281e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.31609058380126953
10 lb beta sum: 1.1069293022155762, worst -0.08423888683319092
Time: prepare 0.0004    bound 0.1366    transfer 0.0002    finalize 0.0002    func 0.1374    
Accumulated time: func 0.7219    prepare 0.0430    bound 0.6639    transfer 0.0062    finalize 0.0096    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 38] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 67] 
split level 5: [/input-12, 89] 
split level 6: [/input-12, 71] 
split level 7: [/input-12, 90] 
cut re-enabled after branching node selection
0 lb beta sum: 2.9545745849609375, worst 0.023659706115722656

all verified at 0th iter
Time: prepare 0.0097    bound 0.0050    transfer 0.0008    finalize 0.0014    func 0.0185    
Accumulated time: func 0.7404    prepare 0.0531    bound 0.6688    transfer 0.0070    finalize 0.0110    
all_split False
======================Cut inference begins======================
max lb tensor(2.00363016) min lb tensor(0.02365971)
Number of Verified Splits: 256 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 26.
#cuts 1-3: 17
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.00032210350036621094 
BICCOS Cumulative time: 0.23172235488891602
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0005    decision 0.0223    set_bounds 0.0203    solve 0.0186    add 0.0001    
Accumulated time: pickout 0.0034    decision 0.6387    set_bounds 0.0715    solve 0.5495    add 0.2903    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
112 domains visited
Cumulative time: 2.026104211807251


Properties batch 1, size 1
Remaining timeout: 196.36723041534424
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 196.36714887619019
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 196.36712503433228
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 196.36710500717163
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 196.367084980011
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 196.3670654296875
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 196.36704635620117
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 196.36702704429626
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.6330 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 25, vnnlib ID: 25 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.01604462, -16.60401917, -13.75974274, -13.62233925, -13.08835316,
         -14.19851303, -12.87796688, -14.01632118, -16.99109268, -15.74184418]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 311, 1, 659] with unstable size 310 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 659] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [310]; unstable size 310; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 310] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 310] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.06798172, -2.58395004, -2.91112733, -3.35464382, -2.51877713,
         -3.61694956, -2.86971092,  0.43352529, -1.25155258]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.01604462, -16.60401917, -13.75974274, -13.62233925, -13.08835316,
         -14.19851303, -12.87796688, -14.01632118, -16.99109268, -15.74184418]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.01604366, -16.60401917, -13.75974369, -13.62234020, -13.08835220,
          -14.19851398, -12.87796688, -14.01632118, -16.99109459, -15.74184608],
         [-15.01604366, -16.60401917, -13.75974369, -13.62234020, -13.08835220,
          -14.19851398, -12.87796688, -14.01632118, -16.99109459, -15.74184608]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.58797550, -1.25629997, -1.39370346, -1.92769146, -0.81752968,
          -2.13807678, -0.99972248,  0.72580242]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         ...,


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0539 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 26, vnnlib ID: 26 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.90988064, -12.45664406, -15.21899319, -13.88694572, -14.48770905,
         -14.28946209, -14.69633865, -13.84464264, -14.34021282, -11.62079906]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [500]; unstable size 500; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 173, 1, 500] with unstable size 172 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 500] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 500] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [172]; unstable size 172; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 172] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.81550586, 0.12776923, 1.67829585, 0.58634543, 0.90821409, 0.83706713,
         1.15808964, 0.31059206, 1.68028712]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0362 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 27, vnnlib ID: 27 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.65237999, -26.28784180, -22.21496773, -22.94103813, -19.88295174,
         -23.10355949, -23.92632675, -16.94944000, -25.83104324, -24.10295296]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [632]; unstable size 632; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 242, 1, 632] with unstable size 241 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 632] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 632] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [241]; unstable size 241; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 241] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 241] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.00603628, 7.31206322, 3.91715956, 4.58261108, 2.16801429, 4.73693991,
         5.37613630, 6.48344851, 5.24407530]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0493 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 28, vnnlib ID: 28 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.01066399, -28.57836723, -25.32221985, -26.57108498, -26.69775391,
         -27.17006111, -27.16849136, -29.60597229, -25.49334908, -28.60743141]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [602]; unstable size 602; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 134, 1, 602] with unstable size 133 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 602] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 602] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [133]; unstable size 133; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 133] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 133] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.69067621, 1.75672960, 2.90525079, 3.03809547, 3.37360620, 3.51928520,
         5.64078951, 1.68218994, 4.79778767]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0466 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 29, vnnlib ID: 29 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.58022118, -31.81094170, -26.44467354, -24.52676773, -24.55172729,
         -24.79080772, -24.80268097, -25.39589882, -30.52891159, -30.66180420]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [824]; unstable size 824; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 824] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 824] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 824] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 256] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.94624829,  4.85114527, -0.16955948, -1.79679966, -1.73069477,
         -1.51086402, -1.98932123,  3.64661908,  4.09455395]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-29.58022118, -31.81094170, -26.44467354, -24.52676773, -24.55172729,
         -24.79080772, -24.80268097, -25.39589882, -30.52891159, -30.66180420]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.58021927, -31.81093979, -26.44467163, -24.52676773, -24.55172729,
          -24.79080582, -24.80267715, -25.39589882, -30.52891159, -30.66180420],
         [-29.58021927, -31.81093979, -26.44467163, -24.52676773, -24.55172729,
          -24.79080582, -24.80267715, -25.39589882, -30.52891159, -30.66180420]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.04877281, -0.86913109, -0.84417152, -0.60509300, -0.59322166]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0633 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 30, vnnlib ID: 30 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-31.97128105, -37.96307373, -34.52404785, -37.46557999, -35.63014603,
         -38.36451340, -36.77544022, -40.04882431, -35.94057846, -38.51336288]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [763]; unstable size 763; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 176, 1, 763] with unstable size 175 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 763] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 763] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [175]; unstable size 175; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 175] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 175] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.93386269, 1.84800172, 4.37804604, 2.56460929, 5.05402136, 3.82877183,
         6.62601948, 3.10796809, 5.56228876]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0674 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 31, vnnlib ID: 31 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.48475838, -29.65727234, -23.60843277, -25.59186363, -21.86170197,
         -25.18845367, -25.36190605, -23.12098694, -27.66559601, -28.33211899]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [618]; unstable size 618; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 618] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 618] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 618] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 272] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.15050697, 5.57539082, 0.71036434, 2.73630524, 2.29937840, 2.30952454,
         0.40072036, 4.11238289, 4.36770535]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0636 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 32, vnnlib ID: 32 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.43476677, -21.89505386, -17.38277435, -18.91377258, -16.89746284,
         -19.49347115, -18.77677345, -17.15766907, -19.06263733, -20.67627907]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1008]; unstable size 1008; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 331, 1, 1008] with unstable size 330 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 32, 1, 1008] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1008] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [330]; unstable size 330; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 32, 1, 330] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 330] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [31]; unstable size 31; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.17812490,  2.10233784, -1.56133389, -0.11888361, -1.70705843,
          0.52253580, -0.66222930, -0.72439504,  1.23998952]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.43476677, -21.89505386, -17.38277435, -18.91377258, -16.89746284,
         -19.49347115, -18.77677345, -17.15766907, -19.06263733, -20.67627907]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.43476868, -21.89505196, -17.38277435, -18.91377449, -16.89746284,
          -19.49347115, -18.77677155, -17.15766907, -19.06263924, -20.67627907],
         [-19.43476868, -21.89505196, -17.38277435, -18.91377449, -16.89746284,
          -19.49347115, -18.77677155, -17.15766907, -19.06263924, -20.67627907]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.22510529,  1.75610542, -0.26020622,  1.61910248,  1.90497017]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0603 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 33, vnnlib ID: 33 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.35557175, -32.47544098, -30.43883324, -33.30394363, -32.17427444,
         -34.25338364, -33.63493729, -35.26922607, -29.93074799, -32.68428421]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [840]; unstable size 840; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 174, 1, 840] with unstable size 173 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 840] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 840] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [173]; unstable size 173; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 173] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 173] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.16921949, 2.31352925, 4.99022341, 3.81911135, 5.78720474, 5.29893875,
         6.80568743, 1.75992775, 4.51705360]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0453 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 34, vnnlib ID: 34 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.44459343, -15.51812744, -11.64377499, -10.47452068, -10.72119522,
         -11.05707169, -11.06166363, -11.43825245, -16.58495712, -14.37756157]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [649]; unstable size 649; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 316, 1, 649] with unstable size 315 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 649] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 649] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [315]; unstable size 315; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 315] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 315] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.31691813,  2.24976492,  0.04557848, -0.85450912,  0.30286217,
         -0.63437951, -0.21570832,  3.64171386,  1.40587378]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.44459343, -15.51812744, -11.64377499, -10.47452068, -10.72119522,
         -11.05707169, -11.06166363, -11.43825245, -16.58495712, -14.37756157]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.56100559, -15.55041409, -11.83961582, -10.86203289, -10.65551853,
          -11.47358513, -11.20098400, -11.55763531, -16.66084862, -14.52304459],
         [-15.56100559, -15.55041409, -11.83961582, -10.86203289, -10.65551853,
          -11.47358513, -11.20098400, -11.55763531, -16.66084862, -14.52304459]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20651436,  0.33895111,  0.69560242]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0541 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 35, vnnlib ID: 35 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.64219093, -17.43132782, -12.73828030, -10.98612118, -13.95148468,
         -12.17405128, -10.92382336, -13.20341492, -16.59213638, -15.28749561]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [539]; unstable size 539; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 283, 1, 539] with unstable size 282 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 539] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 539] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [282]; unstable size 282; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 282] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 282] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.73897839,  3.94992781,  0.45282030,  1.56286335,  0.87203956,
         -1.16177833,  0.85932624,  3.68842483,  2.19751191]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.64219093, -17.43132782, -12.73828030, -10.98612118, -13.95148468,
         -12.17405128, -10.92382336, -13.20341492, -16.59213638, -15.28749561]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.64219093, -17.43132782, -12.73828030, -10.98612118, -13.95148468,
          -12.17405128, -10.92382336, -13.20341492, -16.59213638, -15.28749561]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.06229782]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0510 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 36, vnnlib ID: 36 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.07254219, -23.32916451, -18.11545181, -16.03979683, -17.97344971,
         -17.07232475, -18.43986130, -16.48874283, -21.96584511, -20.95975685]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [563]; unstable size 563; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 156, 1, 563] with unstable size 155 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 563] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 563] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [155]; unstable size 155; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 155] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 155] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.52441883,  5.39360380,  0.73585367, -1.15312338,  0.82712793,
         -0.08107734,  1.07491684,  4.02794266,  3.11614537]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.07254219, -23.32916451, -18.11545181, -16.03979683, -17.97344971,
         -17.07232475, -18.43986130, -16.48874283, -21.96584511, -20.95975685]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.07254028, -23.32916641, -18.11545372, -16.03979683, -17.97345161,
          -17.07232285, -18.43986130, -16.48874283, -21.96584702, -20.95975685],
         [-19.07254028, -23.32916641, -18.11545372, -16.03979683, -17.97345161,
          -17.07232285, -18.43986130, -16.48874283, -21.96584702, -20.95975685]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44894600,  0.58358002]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0524 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 37, vnnlib ID: 37 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.70158577, -22.21768379, -23.95887756, -27.52854156, -24.44779968,
         -28.61229897, -28.66467094, -26.43075180, -22.27626801, -22.80558968]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [756]; unstable size 756; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 197, 1, 756] with unstable size 196 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 756] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 756] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [196]; unstable size 196; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 196] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 196] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.58621740, 2.47436023, 5.86044264, 2.89928865, 6.82225657, 6.78166199,
         4.58398438, 0.69966269, 1.06527996]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0484 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 38, vnnlib ID: 38 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.42754364, -14.80943012, -10.45694256, -11.06365776, -10.51977921,
         -11.33867931,  -9.27479267, -12.10030270, -16.64357758, -13.39722061]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [453]; unstable size 453; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 302, 1, 453] with unstable size 301 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 453] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 453] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [301]; unstable size 301; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 301] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 301] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.36418724e+00,  3.88016129e+00, -1.22737885e-03,  5.18171310e-01,
         -7.83936977e-02,  5.22855401e-01,  8.93965006e-01,  5.49661064e+00,
          2.41142726e+00]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.42754364, -14.80943012, -10.45694256, -11.06365776, -10.51977921,
         -11.33867931,  -9.27479267, -12.10030270, -16.64357758, -13.39722061]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.82it/s]100%|██████████| 1/1 [00:00<00:00,  8.82it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.12287807, -14.69568729, -10.06177521, -10.78610325, -10.26407623,
          -10.99050617,  -9.46359158, -11.73374748, -16.38097382, -13.27322674],
         [-15.12287807, -14.69568729, -10.06177521, -10.78610325, -10.26407623,
          -10.99050617,  -9.46359158, -11.73374748, -16.38097382, -13.27322674]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.59818363, 0.80048466]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1161 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 18.593076705932617
alpha/beta optimization time: 1.2406232357025146
initial alpha-crown bounds: tensor([[ 4.42038965,  3.93954563,  0.04252601,  0.59053868, -0.04266930,
          0.61050189,  0.96340418,  5.55710459,  2.51173663]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.04266929626464844
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.59037327766418
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.59033179283142
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.5903036594391
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.59028124809265
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.59026193618774
Verifying property 4 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04266930]], device='cuda:0') need to verify.
Model prediction is: tensor([-15.42754364, -14.80943012, -10.45694256, -11.06365776, -10.51977921,
        -11.33867931,  -9.27479267, -12.10030270, -16.64357758, -13.39722061],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04266930]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 453
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 299
Node /15 input 0: size torch.Size([100]) unstable 20
-----------------
# of unstable neurons: 772
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00012111663818359375
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04266762733459473
10 lb beta sum: 0.0, worst -0.04267597198486328
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0563    transfer 0.0001    finalize 0.0001    func 0.0568    
Accumulated time: func 0.0568    prepare 0.0002    bound 0.0563    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 85] 
split level 3: [/input-12, 14] 
split level 4: [/input-12, 90] 
split level 5: [/input-12, 97] 
split level 6: [/input-12, 10] 
split level 7: [/input-12, 61] 
split level 8: [/input-12, 17] 
split level 9: [/input-12, 4] 
split level 10: [/input-12, 71] 
split level 11: [/input-8, 163] 
split level 12: [/input-8, 154] 
split level 13: [/input-8, 132] 
split level 14: [/input-8, 142] 
split level 15: [/input-8, 172] 
split level 16: [/input, 2887] 
split level 17: [/input-8, 1635] 
split level 18: [/input-8, 1249] 
split level 19: [/input-12, 55] 
split level 20: [/input-8, 298] 
split level 21: [/input-8, 309] 
split level 22: [/input-8, 155] 
split level 23: [/input-8, 1362] 
split level 24: [/input-8, 1386] 
split level 25: [/input-8, 914] 
split level 26: [/input-8, 147] 
split level 27: [/input-8, 1242] 
split level 28: [/input-8, 1203] 
split level 29: [/input-8, 178] 
split level 30: [/input, 3300] 
split level 31: [/input-8, 290] 
split level 32: [/input-12, 8] 
split level 33: [/input-8, 315] 
split level 34: [/input-8, 492] 
split level 35: [/input, 2919] 
split level 36: [/input-8, 307] 
split level 37: [/input-8, 1627] 
split level 38: [/input-8, 282] 
split level 39: [/input-8, 1389] 
split level 40: [/input-8, 146] 
split level 41: [/input-8, 1271] 
split level 42: [/input-8, 162] 
split level 43: [/input-8, 252] 
split level 44: [/input, 2934] 
split level 45: [/input-8, 1390] 
split level 46: [/input-8, 1395] 
split level 47: [/input-8, 1674] 
split level 48: [/input-8, 171] 
split level 49: [/input, 840] 
split level 50: [/input-8, 1382] 
split level 51: [/input, 3556] 
split level 52: [/input-8, 445] 
split level 53: [/input-8, 438] 
split level 54: [/input-8, 1240] 
split level 55: [/input-8, 1363] 
split level 56: [/input-8, 99] 
split level 57: [/input-8, 957] 
split level 58: [/input-8, 1066] 
split level 59: [/input-8, 2029] 
split level 60: [/input, 345] 
split level 61: [/input-8, 348] 
split level 62: [/input-8, 1675] 
split level 63: [/input, 856] 
split level 64: [/input-8, 1628] 
split level 65: [/input, 824] 
split level 66: [/input-8, 777] 
split level 67: [/input-8, 1644] 
split level 68: [/input-8, 257] 
split level 69: [/input-8, 430] 
split level 70: [/input-8, 1587] 
split level 71: [/input-8, 1673] 
split level 72: [/input-8, 250] 
split level 73: [/input-8, 342] 
split level 74: [/input-8, 499] 
split level 75: [/input-8, 341] 
split level 76: [/input, 854] 
split level 77: [/input-8, 46] 
split level 78: [/input-12, 72] 
split level 79: [/input-8, 1689] 
split level 80: [/input, 2788] 
split level 81: [/input-8, 1181] 
split level 82: [/input, 341] 
split level 83: [/input-8, 1354] 
split level 84: [/input-8, 98] 
split level 85: [/input, 2933] 
split level 86: [/input-8, 238] 
split level 87: [/input-8, 1676] 
split level 88: [/input, 821] 
split level 89: [/input, 2901] 
split level 90: [/input-8, 424] 
split level 91: [/input, 2922] 
split level 92: [/input-8, 55] 
split level 93: [/input-8, 1383] 
split level 94: [/input, 2949] 
split level 95: [/input-8, 1005] 
split level 96: [/input, 873] 
split level 97: [/input, 487] 
split level 98: [/input, 3381] 
split level 99: [/input, 859] 
split level 100: [/input-8, 1680] 
split level 101: [/input-8, 1399] 
split level 102: [/input-8, 922] 
split level 103: [/input-8, 1355] 
split level 104: [/input-8, 275] 
split level 105: [/input-8, 1660] 
split level 106: [/input-8, 253] 
split level 107: [/input-8, 878] 
split level 108: [/input-8, 1361] 
split level 109: [/input, 1655] 
split level 110: [/input-8, 446] 
split level 111: [/input-8, 1375] 
split level 112: [/input, 362] 
split level 113: [/input-8, 1044] 
split level 114: [/input-8, 249] 
split level 115: [/input-8, 230] 
split level 116: [/input-8, 493] 
split level 117: [/input-8, 1602] 
split level 118: [/input, 409] 
split level 119: [/input-8, 447] 
split level 120: [/input-8, 1540] 
split level 121: [/input-8, 151] 
split level 122: [/input, 329] 
split level 123: [/input, 3572] 
split level 124: [/input, 2952] 
split level 125: [/input, 456] 
split level 126: [/input, 969] 
split level 127: [/input, 146] 
split level 128: [/input, 2872] 
split level 129: [/input-8, 2021] 
split level 130: [/input-8, 1512] 
split level 131: [/input-8, 485] 
split level 132: [/input, 3215] 
split level 133: [/input, 885] 
split level 134: [/input-8, 103] 
split level 135: [/input-8, 441] 
split level 136: [/input, 841] 
split level 137: [/input-8, 231] 
split level 138: [/input, 791] 
split level 139: [/input-8, 1665] 
split level 140: [/input, 844] 
split level 141: [/input, 795] 
split level 142: [/input-8, 786] 
split level 143: [/input-8, 107] 
split level 144: [/input-8, 1652] 
split level 145: [/input, 3557] 
split level 146: [/input-8, 137] 
split level 147: [/input-8, 18] 
split level 148: [/input, 440] 
split level 149: [/input, 283] 
split level 150: [/input, 2907] 
split level 151: [/input-8, 458] 
split level 152: [/input, 3214] 
split level 153: [/input-8, 369] 
split level 154: [/input, 3497] 
split level 155: [/input, 2966] 
split level 156: [/input, 789] 
split level 157: [/input, 981] 
split level 158: [/input-8, 350] 
split level 159: [/input-8, 1535] 
split level 160: [/input-8, 191] 
split level 161: [/input-8, 1527] 
split level 162: [/input-8, 1353] 
split level 163: [/input, 2836] 
split level 164: [/input, 339] 
split level 165: [/input, 2910] 
split level 166: [/input, 3286] 
split level 167: [/input-8, 143] 
split level 168: [/input, 4013] 
split level 169: [/input, 3181] 
split level 170: [/input-8, 1729] 
split level 171: [/input-8, 1333] 
split level 172: [/input, 3293] 
split level 173: [/input, 3419] 
split level 174: [/input, 2838] 
split level 175: [/input, 867] 
split level 176: [/input-8, 1081] 
split level 177: [/input-8, 97] 
split level 178: [/input, 3268] 
split level 179: [/input, 90] 
split level 180: [/input, 2894] 
split level 181: [/input, 793] 
split level 182: [/input-8, 1217] 
split level 183: [/input-8, 1653] 
split level 184: [/input, 2719] 
split level 185: [/input, 1013] 
split level 186: [/input-8, 439] 
split level 187: [/input-8, 963] 
split level 188: [/input, 1187] 
split level 189: [/input-8, 1356] 
split level 190: [/input-8, 339] 
split level 191: [/input, 2852] 
split level 192: [/input, 2893] 
split level 193: [/input-8, 204] 
split level 194: [/input-8, 1225] 
split level 195: [/input, 3099] 
split level 196: [/input, 21] 
split level 197: [/input, 861] 
split level 198: [/input, 403] 
split level 199: [/input, 104] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04263782501220703
10 lb beta sum: 0.0, worst -0.0426480770111084
Time: prepare 0.0114    bound 0.0990    transfer 0.0028    finalize 0.0028    func 0.1187    
Accumulated time: func 0.1755    prepare 0.0215    bound 0.1553    transfer 0.0029    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.44490337) min lb tensor(-0.04263759)
Number of Verified Splits: 19 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011588811874389648 
BICCOS Cumulative time: 0.011588811874389648
Preprocessing time: 0.00999760627746582 Inference time: 0.0008132457733154297 Add cuts time: 0.00025081634521484375 Cut analysis time: 0.0005271434783935547
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5231    set_bounds 0.0091    solve 0.1188    add 0.0104    
Accumulated time: pickout 0.0003    decision 0.5231    set_bounds 0.0091    solve 0.1188    add 0.0104    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59]), tensor([-1.]), tensor([0]), tensor([2.82951758e+16]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59]), tensor([1.]), tensor([0]), tensor([2.82952102e+16]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.030628204345703125

all verified at 1th iter
Time: prepare 0.0003    bound 0.0096    transfer 0.0001    finalize 0.0001    func 0.0102    
Accumulated time: func 0.1857    prepare 0.0218    bound 0.1649    transfer 0.0030    finalize 0.0031    
After pruning, left:  0

Back to Regular BaB


Properties batch 5, size 1
Remaining timeout: 197.6114218235016
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.61135911941528
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.6113359928131
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.61131596565247
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.3888 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 39, vnnlib ID: 39 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.25883293, -16.40706444, -12.91650105, -13.33503723, -12.76172256,
         -14.05701828, -10.42017269, -14.10208035, -18.75581741, -16.93133926]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 259, 1, 403] with unstable size 258 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 403] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [258]; unstable size 258; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 258] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 258] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.00860548, 4.23702192, 1.09872413, 1.64570796, 0.89420366, 2.14901757,
         1.57642496, 6.09760046, 4.54596186]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0321 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 40, vnnlib ID: 40 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.57652092, -32.23639679, -28.36616898, -29.83554840, -30.16464424,
         -30.64960480, -32.17686844, -29.80444527, -29.91892624, -32.09518433]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [483]; unstable size 483; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 195, 1, 483] with unstable size 194 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 483] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 483] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [194]; unstable size 194; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 194] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 194] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.07906628, 1.77048004, 3.19271326, 3.46971607, 3.86028957, 5.23355150,
         2.96001387, 3.10798526, 5.22356033]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0481 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 41, vnnlib ID: 41 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.71967888, -24.49569893, -23.46326828, -21.31615639, -22.26188850,
         -21.78440475, -22.43858719, -23.19987106, -16.18318367, -22.82086182]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [644]; unstable size 644; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 215, 1, 644] with unstable size 214 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 644] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 644] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [214]; unstable size 214; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 214] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 214] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.49413395, 6.51567602, 5.72104502, 3.75618219, 4.40788555, 4.05219316,
         4.77330160, 5.20548916, 5.05213928]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0383 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 42, vnnlib ID: 42 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.19749069, -20.07060051, -15.00829124, -14.86962318, -16.28983498,
         -15.46364594, -13.24634743, -17.95564651, -17.94532013, -19.32559013]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [570]; unstable size 570; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 265, 1, 570] with unstable size 264 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 570] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 570] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [264]; unstable size 264; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 264] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 264] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.89140320, 4.24306536, 0.43238330, 0.61651582, 1.44491482, 0.98225856,
         2.89481378, 2.46429372, 3.67898273]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0458 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 43, vnnlib ID: 43 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.52461720, -17.35180283, -12.05615902, -12.63583565, -11.58507633,
         -12.59487724, -10.57591057, -13.41824055, -16.97095490, -15.37764359]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [591]; unstable size 591; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 292, 1, 591] with unstable size 291 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 591] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 591] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [291]; unstable size 291; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 291] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 291] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.08203399,  2.15383053, -1.83007836, -0.33773935, -2.24676919,
         -3.21968937, -0.57630801,  2.02706289,  0.67616415]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.52461720, -17.35180283, -12.05615902, -12.63583565, -11.58507633,
         -12.59487724, -10.57591057, -13.41824055, -16.97095490, -15.37764359]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.52461624, -17.35180092, -12.05615902, -12.63583660, -11.58507729,
          -12.59487820, -10.57591152, -13.41824245, -16.97095490, -15.37764454],
         [-15.52461624, -17.35180092, -12.05615902, -12.63583660, -11.58507729,
          -12.59487820, -10.57591152, -13.41824245, -16.97095490, -15.37764454]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.53871918,  0.04095840, -1.00980091, -2.01896667,  0.82336426]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0580 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 44, vnnlib ID: 44 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.45021820, -27.45919800, -20.82433891, -22.54921150, -21.01146507,
         -23.11272240, -21.28590775, -22.88107681, -25.70099831, -27.22681618]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [929]; unstable size 929; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 450, 1, 929] with unstable size 449 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 929] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 929] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [449]; unstable size 449; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 449] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 449] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.88848376,  3.70000172,  0.24055982, -1.21744084,  0.64094090,
         -1.06626356, -0.11656213,  2.34579206,  3.68335915]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.45021820, -27.45919800, -20.82433891, -22.54921150, -21.01146507,
         -23.11272240, -21.28590775, -22.88107681, -25.70099831, -27.22681618]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.65473557, -27.69364357, -21.07613373, -22.60361481, -20.87356758,
          -23.11100769, -21.44839478, -22.64229012, -25.88486099, -27.33996201],
         [-23.65473557, -27.69364357, -21.07613373, -22.60361481, -20.87356758,
          -23.11100769, -21.44839478, -22.64229012, -25.88486099, -27.33996201]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20256615,  0.37226105,  1.56615639]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0062 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0506 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 45, vnnlib ID: 45 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.70279121, -25.07186508, -24.43242264, -24.38763809, -24.00282478,
         -24.77808571, -24.40219879, -25.75534058, -24.67971420, -24.98260498]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [670]; unstable size 670; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 245, 1, 670] with unstable size 244 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 670] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 670] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [244]; unstable size 244; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 244] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 244] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.87631416, -2.55956173, -2.18437910, -2.77099609, -1.83020782,
         -2.16091776, -1.01760435, -2.05305576, -0.77688074]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.70279121, -25.07186508, -24.43242264, -24.38763809, -24.00282478,
         -24.77808571, -24.40219879, -25.75534058, -24.67971420, -24.98260498]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-24.70278931, -25.07186699, -24.43242264, -24.38763809, -24.00282288,
          -24.77808380, -24.40219879, -25.75533867, -24.67971420, -24.98260689],
         [-24.70278931, -25.07186699, -24.43242264, -24.38763809, -24.00282288,
          -24.77808380, -24.40219879, -25.75533867, -24.67971420, -24.98260689]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.36907768, -0.63944435, -0.68422890, -1.06904411, -0.29378319,
          -0.66966820,  0.68347168, -0.39215279, -0.08926010]]],
       device='cuda:0')
number of violation:  8
clean attack image tensor([[[[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         ...,


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0651 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 46, vnnlib ID: 46 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.77937126, -24.38296890, -19.26746750, -18.82821846, -19.50073814,
         -19.05830956, -19.41297340, -21.65519333, -24.81905746, -23.99803734]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [889]; unstable size 889; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 324, 1, 889] with unstable size 323 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 889] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 889] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [323]; unstable size 323; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 323] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 323] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.86873031,  3.27330327, -1.23502302, -0.61113095, -0.78136921,
         -0.75137866,  0.93968052,  3.48995137,  3.24112701]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.77937126, -24.38296890, -19.26746750, -18.82821846, -19.50073814,
         -19.05830956, -19.41297340, -21.65519333, -24.81905746, -23.99803734]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.77937126, -24.38297081, -19.26746559, -18.82821846, -19.50073814,
          -19.05830956, -19.41297150, -21.65519333, -24.81905556, -23.99803925],
         [-21.77937126, -24.38297081, -19.26746559, -18.82821846, -19.50073814,
          -19.05830956, -19.41297150, -21.65519333, -24.81905556, -23.99803925]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.20915604, -0.23009109,  0.44242859,  0.35466194]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0483 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 47, vnnlib ID: 47 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.53012466, -29.66223907, -26.90876389, -28.07838631, -26.04151726,
         -29.22808647, -27.47805023, -29.35506439, -20.28993988, -29.09470940]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [586]; unstable size 586; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 174, 1, 586] with unstable size 173 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 586] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 586] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [173]; unstable size 173; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 173] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 173] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.51274943, 8.23108101, 5.60526466, 6.71246910, 4.74748850, 7.73364449,
         6.02225161, 7.97453165, 7.67071915]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0521 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 48, vnnlib ID: 48 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.52310753, -22.21076012, -18.13401031, -16.74857521, -17.94910240,
         -16.36793709, -17.47036171, -17.69790268, -22.73849869, -20.87914658]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [688]; unstable size 688; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 688] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 688] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 688] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 260] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.49447250,  3.06922245,  0.62996507, -0.02265936,  0.38052869,
         -0.22107983,  0.10723692,  4.39991188,  2.21292210]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.52310753, -22.21076012, -18.13401031, -16.74857521, -17.94910240,
         -16.36793709, -17.47036171, -17.69790268, -22.73849869, -20.87914658]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.69it/s]100%|██████████| 1/1 [00:00<00:00,  8.68it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.18397522, -21.81373215, -17.85622978, -16.59555244, -17.68647575,
          -16.41921616, -17.14182472, -17.56402969, -22.39430809, -20.54507637],
         [-20.18397522, -21.81373215, -17.85622978, -16.59555244, -17.68647575,
          -16.41921616, -17.14182472, -17.56402969, -22.39430809, -20.54507637]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.17633629, 0.72260857]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1180 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.641361236572266
alpha/beta optimization time: 1.243786096572876
initial alpha-crown bounds: tensor([[ 2.55440617,  3.16163516,  0.69625592,  0.01558396,  0.45437026,
         -0.16967368,  0.16310740,  4.47692680,  2.28875017]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.16967368125915527
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.58936762809753
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5893256664276
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.58929228782654
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.58926963806152
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.58925008773804
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.58922934532166
Verifying property 5 with 1 instances.
##### Instance 48 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.16967368]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.52310753, -22.21076012, -18.13401031, -16.74857521, -17.94910240,
        -16.36793709, -17.47036171, -17.69790268, -22.73849869, -20.87914658],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.16967368]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 688
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 258
Node /15 input 0: size torch.Size([100]) unstable 22
-----------------
# of unstable neurons: 968
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.989738464355469e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16967225074768066
10 lb beta sum: 0.0, worst -0.16968142986297607
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0532    transfer 0.0001    finalize 0.0001    func 0.0537    
Accumulated time: func 0.0537    prepare 0.0002    bound 0.0532    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 0] 
split level 1: [/input-12, 64] 
split level 2: [/input-12, 42] 
split level 3: [/input-12, 17] 
split level 4: [/input-12, 72] 
split level 5: [/input-12, 35] 
split level 6: [/input-8, 944] 
split level 7: [/input-12, 29] 
split level 8: [/input-12, 89] 
split level 9: [/input-8, 593] 
split level 10: [/input-12, 36] 
split level 11: [/input-8, 421] 
split level 12: [/input-8, 1948] 
split level 13: [/input-8, 1949] 
split level 14: [/input-12, 18] 
split level 15: [/input-8, 953] 
split level 16: [/input-8, 1946] 
split level 17: [/input-8, 853] 
split level 18: [/input-8, 418] 
split level 19: [/input-8, 1709] 
split level 20: [/input-8, 1938] 
split level 21: [/input-8, 427] 
split level 22: [/input-8, 601] 
split level 23: [/input-8, 1973] 
split level 24: [/input-8, 938] 
split level 25: [/input-8, 585] 
split level 26: [/input, 1431] 
split level 27: [/input-8, 979] 
split level 28: [/input-8, 604] 
split level 29: [/input-8, 594] 
split level 30: [/input, 3209] 
split level 31: [/input-8, 980] 
split level 32: [/input-8, 1684] 
split level 33: [/input-12, 71] 
split level 34: [/input-8, 1170] 
split level 35: [/input, 1377] 
split level 36: [/input-8, 844] 
split level 37: [/input-8, 1693] 
split level 38: [/input, 3124] 
split level 39: [/input-8, 1675] 
split level 40: [/input-8, 1954] 
split level 41: [/input-8, 587] 
split level 42: [/input-8, 1742] 
split level 43: [/input, 2710] 
split level 44: [/input-8, 403] 
split level 45: [/input, 1443] 
split level 46: [/input, 2676] 
split level 47: [/input, 276] 
split level 48: [/input, 1444] 
split level 49: [/input, 2679] 
split level 50: [/input, 3171] 
split level 51: [/input, 1394] 
split level 52: [/input-8, 404] 
split level 53: [/input, 3238] 
split level 54: [/input, 2485] 
split level 55: [/input-8, 1331] 
split level 56: [/input-8, 1599] 
split level 57: [/input, 147] 
split level 58: [/input, 131] 
split level 59: [/input, 2451] 
split level 60: [/input-12, 43] 
split level 61: [/input-8, 1177] 
split level 62: [/input, 1346] 
split level 63: [/input-8, 1341] 
split level 64: [/input, 2197] 
split level 65: [/input-8, 1676] 
split level 66: [/input, 1361] 
split level 67: [/input, 2180] 
split level 68: [/input, 2198] 
split level 69: [/input-8, 1752] 
split level 70: [/input, 3285] 
split level 71: [/input-8, 580] 
split level 72: [/input, 209] 
split level 73: [/input, 132] 
split level 74: [/input, 2586] 
split level 75: [/input, 1441] 
split level 76: [/input, 3287] 
split level 77: [/input, 3102] 
split level 78: [/input, 3118] 
split level 79: [/input, 803] 
split level 80: [/input, 1719] 
split level 81: [/input, 787] 
split level 82: [/input, 3363] 
split level 83: [/input, 2603] 
split level 84: [/input, 2434] 
split level 85: [/input, 820] 
split level 86: [/input, 2099] 
split level 87: [/input-8, 1782] 
split level 88: [/input-8, 60] 
split level 89: [/input, 2257] 
split level 90: [/input, 1387] 
split level 91: [/input, 3379] 
split level 92: [/input-8, 1315] 
split level 93: [/input, 1410] 
split level 94: [/input, 146] 
split level 95: [/input, 788] 
split level 96: [/input, 804] 
split level 97: [/input, 2587] 
split level 98: [/input, 3142] 
split level 99: [/input, 2258] 
split level 100: [/input, 2707] 
split level 101: [/input, 1994] 
split level 102: [/input, 2792] 
split level 103: [/input, 2437] 
split level 104: [/input, 2145] 
split level 105: [/input, 819] 
split level 106: [/input, 156] 
split level 107: [/input, 1426] 
split level 108: [/input, 3154] 
split level 109: [/input, 851] 
split level 110: [/input, 1449] 
split level 111: [/input, 2512] 
split level 112: [/input, 177] 
split level 113: [/input, 2266] 
split level 114: [/input, 2387] 
split level 115: [/input, 2433] 
split level 116: [/input, 1468] 
split level 117: [/input, 2116] 
split level 118: [/input, 2741] 
split level 119: [/input, 2758] 
split level 120: [/input, 166] 
split level 121: [/input-8, 836] 
split level 122: [/input, 2658] 
split level 123: [/input-8, 1765] 
split level 124: [/input, 2529] 
split level 125: [/input, 1480] 
split level 126: [/input, 214] 
split level 127: [/input, 2620] 
split level 128: [/input, 2211] 
split level 129: [/input, 2530] 
split level 130: [/input, 835] 
split level 131: [/input, 999] 
split level 132: [/input, 2757] 
split level 133: [/input, 3301] 
split level 134: [/input, 2148] 
split level 135: [/input-8, 396] 
split level 136: [/input, 2791] 
split level 137: [/input, 2242] 
split level 138: [/input, 182] 
split level 139: [/input-8, 1265] 
split level 140: [/input, 113] 
split level 141: [/input, 2161] 
split level 142: [/input, 2774] 
split level 143: [/input, 995] 
split level 144: [/input, 193] 
split level 145: [/input, 3288] 
split level 146: [/input, 2773] 
split level 147: [/input-8, 1784] 
split level 148: [/input, 2657] 
split level 149: [/input-8, 402] 
split level 150: [/input, 3525] 
split level 151: [/input, 837] 
split level 152: [/input, 2977] 
split level 153: [/input, 996] 
split level 154: [/input, 2689] 
split level 155: [/input-8, 977] 
split level 156: [/input, 2686] 
split level 157: [/input, 2507] 
split level 158: [/input, 3358] 
split level 159: [/input, 2777] 
split level 160: [/input, 162] 
split level 161: [/input, 195] 
split level 162: [/input, 145] 
split level 163: [/input, 2699] 
split level 164: [/input, 2355] 
split level 165: [/input, 2450] 
split level 166: [/input, 227] 
split level 167: [/input, 2204] 
split level 168: [/input, 3381] 
split level 169: [/input, 114] 
split level 170: [/input, 199] 
split level 171: [/input, 3014] 
split level 172: [/input, 789] 
split level 173: [/input, 2654] 
split level 174: [/input, 2488] 
split level 175: [/input, 3284] 
split level 176: [/input, 2193] 
split level 177: [/input, 2273] 
split level 178: [/input, 2226] 
split level 179: [/input, 3303] 
split level 180: [/input-8, 1743] 
split level 181: [/input, 2705] 
split level 182: [/input, 173] 
split level 183: [/input, 2210] 
split level 184: [/input-8, 835] 
split level 185: [/input, 2611] 
split level 186: [/input, 2776] 
split level 187: [/input, 183] 
split level 188: [/input, 3555] 
split level 189: [/input, 2466] 
split level 190: [/input, 2515] 
split level 191: [/input, 1978] 
split level 192: [/input, 2214] 
split level 193: [/input, 2489] 
split level 194: [/input, 2248] 
split level 195: [/input, 2209] 
split level 196: [/input, 482] 
split level 197: [/input, 2517] 
split level 198: [/input, 2521] 
split level 199: [/input, 167] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1696232557296753
10 lb beta sum: 0.0, worst -0.1696164608001709
Time: prepare 0.0115    bound 0.0993    transfer 0.0026    finalize 0.0028    func 0.1187    
Accumulated time: func 0.1724    prepare 0.0215    bound 0.1525    transfer 0.0027    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.26162231) min lb tensor(-0.16961384)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.010442495346069336 
BICCOS Cumulative time: 0.010442495346069336
Preprocessing time: 0.009898662567138672 Inference time: 0.00022864341735839844 Add cuts time: 6.985664367675781e-05 Cut analysis time: 0.0002453327178955078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16202 (1), -0.16198 (1), -0.16191 (1), -0.16179 (1), -0.16161 (1), -0.16152 (1), -0.16143 (1), -0.16133 (1), -0.16131 (1), -0.16121 (1), -0.16121 (1), -0.16063 (1), -0.16056 (1), -0.15996 (1), -0.15976 (1), -0.15969 (1), -0.15870 (1), -0.15793 (1), -0.15793 (1), -0.15643 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5248    set_bounds 0.0087    solve 0.1188    add 0.0706    
Accumulated time: pickout 0.0003    decision 0.5248    set_bounds 0.0087    solve 0.1188    add 0.0706    
Current (lb-rhs): -0.16202270984649658
50 domains visited
Cumulative time: 0.7925951480865479

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 64] [/input-12, 0] 
split level 1: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 42] [/input-12, 64] 
split level 2: [/input-12, 42] [/input-12, 17] [/input-12, 42] [/input-12, 42] [/input-12, 17] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 17] [/input-12, 42] 
split level 3: [/input-12, 17] [/input-12, 35] [/input-12, 17] [/input-12, 17] [/input-12, 35] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 35] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13135361671447754
10 lb beta sum: 0.6888622045516968, worst -0.060483694076538086
Time: prepare 0.0075    bound 0.1190    transfer 0.0011    finalize 0.0024    func 0.1325    
Accumulated time: func 0.3049    prepare 0.0293    bound 0.2715    transfer 0.0037    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.38817358) min lb tensor(-0.06029987)
Number of Verified Splits: 268 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.02657794952392578 
BICCOS Cumulative time: 0.03702044486999512
Preprocessing time: 0.011683940887451172 Inference time: 0.00997781753540039 Add cuts time: 0.00473475456237793 Cut analysis time: 0.00018143653869628906
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0197    set_bounds 0.0121    solve 0.1326    add 0.0155    
Accumulated time: pickout 0.0013    decision 0.5444    set_bounds 0.0208    solve 0.2514    add 0.0862    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([42,  0]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.82952102e+16, 4.32353914e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([42,  0]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.82952102e+16, 1.08533904e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([42,  0]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.82952102e+16, 4.34407294e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([42,  0]), tensor([1., 1.]), tensor([0, 0]), tensor([2.82952102e+16, 1.11148164e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03160393238067627

all verified at 1th iter
Time: prepare 0.0003    bound 0.0139    transfer 0.0001    finalize 0.0001    func 0.0146    
Accumulated time: func 0.3195    prepare 0.0296    bound 0.2854    transfer 0.0039    finalize 0.0054    
After pruning, left:  0

Back to Regular BaB


Properties batch 6, size 1
Remaining timeout: 197.3869752883911
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.3869013786316
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.3868761062622
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.6132 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 49, vnnlib ID: 49 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-31.84988976, -27.04168510, -32.56347275, -33.70067215, -33.15383530,
         -34.10073471, -32.55872345, -32.39547729, -30.81136703, -29.74110985]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [597]; unstable size 597; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 253, 1, 597] with unstable size 252 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 597] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 597] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [252]; unstable size 252; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 252] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 252] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.47295237, 3.67134142, 4.79960966, 4.17743587, 5.03716612, 3.67930937,
         3.29446268, 2.28837872, 1.78437138]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0645 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 50, vnnlib ID: 50 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.95876122, -24.06052399, -22.79921150, -22.37466049, -21.66536903,
         -22.27144814, -23.11923218, -24.92821121, -24.52709389, -24.95055580]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1300]; unstable size 1300; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 386, 1, 1300] with unstable size 385 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 1300] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1300] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [385]; unstable size 385; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 385] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 385] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.83590484, -0.36369610, -0.81580889, -0.21350300, -1.76645494,
         -0.45421147,  1.06313896,  0.19591498,  0.91548634]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.95876122, -24.06052399, -22.79921150, -22.37466049, -21.66536903,
         -22.27144814, -23.11923218, -24.92821121, -24.52709389, -24.95055580]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.95876312, -24.06052208, -22.79921341, -22.37466049, -21.66536713,
          -22.27144814, -23.11923218, -24.92821121, -24.52709579, -24.95055199],
         [-21.95876312, -24.06052208, -22.79921341, -22.37466049, -21.66536713,
          -22.27144814, -23.11923218, -24.92821121, -24.52709579, -24.95055199]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.31268501,  1.78907394,  0.52776527,  0.10321236, -0.60608101,
           0.84778404]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0594 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 51, vnnlib ID: 51 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.02009583, -25.62828255, -18.56137657, -22.16949654, -20.18937492,
         -22.90802956, -21.61422729, -24.61019516, -20.71578217, -25.30768013]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [637]; unstable size 637; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 152, 1, 637] with unstable size 151 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 637] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 637] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [151]; unstable size 151; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 151] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 151] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[7.60369158, 1.05985785, 4.44430256, 2.54081845, 5.11138248, 3.84394979,
         6.83230686, 2.69353652, 7.41863632]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0615 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 52, vnnlib ID: 52 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.94017601, -28.86633301, -23.06001091, -21.31272125, -22.19619942,
         -20.90770912, -22.69350815, -22.96586227, -29.16728783, -27.83672142]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [615]; unstable size 615; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 323, 1, 615] with unstable size 322 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 615] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 615] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [322]; unstable size 322; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 322] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 322] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.51382422, 5.73519087, 0.91068625, 0.11511427, 0.03012919, 0.51855636,
         1.05246699, 6.62892151, 5.18492413]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0630 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 53, vnnlib ID: 53 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.12831688, -24.87204933, -21.52433014, -21.45733643, -22.17998314,
         -21.62087250, -21.34234619, -22.34700012, -24.97188950, -22.55655289]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [580]; unstable size 580; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 184, 1, 580] with unstable size 183 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 580] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 580] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [183]; unstable size 183; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 183] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 183] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.55080438,  1.90782392, -1.05542922, -0.76249868, -0.39093387,
         -0.77109903, -0.48512751,  2.12622046, -0.21663594]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.12831688, -24.87204933, -21.52433014, -21.45733643, -22.17998314,
         -21.62087250, -21.34234619, -22.34700012, -24.97188950, -22.55655289]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.98245811, -25.14087677, -21.26465225, -21.48969841, -22.09676743,
          -21.62775993, -21.63244629, -22.23480034, -24.92131615, -22.71515083],
         [-21.98245811, -25.14087677, -21.26465225, -21.48969841, -22.09676743,
          -21.62775993, -21.63244629, -22.23480034, -24.92131615, -22.71515083]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.35001183, -0.36779404, -0.14274788,  0.46432114, -0.00468636,
           0.60235405,  1.08270454]]], device='cuda:0')
number of violation:  3
Attack finished in 0.0154 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0782 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 54, vnnlib ID: 54 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.02576256, -26.03837204, -23.14089203, -23.39199638, -24.21075249,
         -24.33787727, -24.11221695, -23.78001785, -21.66454697, -25.57447433]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [631]; unstable size 631; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 277, 1, 631] with unstable size 276 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 631] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 631] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [276]; unstable size 276; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 276] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 276] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.26207829,  2.67205667, -0.09352875,  0.10025680,  0.83907413,
          0.73086965,  0.70621467,  0.08608747,  2.33385849]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.02576256, -26.03837204, -23.14089203, -23.39199638, -24.21075249,
         -24.33787727, -24.11221695, -23.78001785, -21.66454697, -25.57447433]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.92it/s]100%|██████████| 1/1 [00:00<00:00,  8.92it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-24.58753777, -25.74412537, -22.30705833, -22.74228668, -23.48993874,
          -23.62050629, -23.39388275, -23.13651657, -21.69568634, -25.29735374]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.61137199]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1147 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.149779319763184
alpha/beta optimization time: 1.233936071395874
initial alpha-crown bounds: tensor([[ 2.29125214,  2.73074436, -0.03381610,  0.15644002,  0.90439534,
          0.79678583,  0.77209926,  0.15606105,  2.37581730]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.03381609916687012
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.58130288124084
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.58126425743103
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.581237077713
Verifying property 2 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03381610]], device='cuda:0') need to verify.
Model prediction is: tensor([-25.02576256, -26.03837204, -23.14089203, -23.39199638, -24.21075249,
        -24.33787727, -24.11221695, -23.78001785, -21.66454697, -25.57447433],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03381610]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 631
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 271
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 917
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010514259338378906
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03381538391113281
10 lb beta sum: 0.0, worst -0.03382468223571777
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0538    transfer 0.0001    finalize 0.0001    func 0.0543    
Accumulated time: func 0.0543    prepare 0.0002    bound 0.0538    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] 
split level 1: [/input-12, 61] 
split level 2: [/input-12, 24] 
split level 3: [/input-12, 59] 
split level 4: [/input-12, 12] 
split level 5: [/input-12, 50] 
split level 6: [/input-8, 1963] 
split level 7: [/input-8, 1947] 
split level 8: [/input-12, 68] 
split level 9: [/input-8, 1718] 
split level 10: [/input-8, 1693] 
split level 11: [/input-8, 370] 
split level 12: [/input-8, 923] 
split level 13: [/input-8, 371] 
split level 14: [/input-8, 1956] 
split level 15: [/input-8, 1948] 
split level 16: [/input-8, 938] 
split level 17: [/input-8, 299] 
split level 18: [/input-8, 454] 
split level 19: [/input-8, 365] 
split level 20: [/input-8, 362] 
split level 21: [/input-8, 1710] 
split level 22: [/input-8, 1656] 
split level 23: [/input-8, 909] 
split level 24: [/input-8, 1970] 
split level 25: [/input-8, 291] 
split level 26: [/input-8, 795] 
split level 27: [/input-8, 1644] 
split level 28: [/input-8, 1700] 
split level 29: [/input-8, 1636] 
split level 30: [/input-8, 617] 
split level 31: [/input-8, 908] 
split level 32: [/input-8, 1840] 
split level 33: [/input-8, 587] 
split level 34: [/input-8, 186] 
split level 35: [/input-8, 586] 
split level 36: [/input-8, 1640] 
split level 37: [/input-8, 785] 
split level 38: [/input-8, 604] 
split level 39: [/input-8, 778] 
split level 40: [/input, 3544] 
split level 41: [/input-8, 1684] 
split level 42: [/input-8, 905] 
split level 43: [/input, 2423] 
split level 44: [/input-8, 354] 
split level 45: [/input-8, 1969] 
split level 46: [/input-8, 1648] 
split level 47: [/input, 2231] 
split level 48: [/input-8, 781] 
split level 49: [/input-8, 1971] 
split level 50: [/input-8, 1631] 
split level 51: [/input-8, 918] 
split level 52: [/input-8, 178] 
split level 53: [/input-8, 1639] 
split level 54: [/input-8, 1651] 
split level 55: [/input-8, 1295] 
split level 56: [/input, 2023] 
split level 57: [/input-8, 1698] 
split level 58: [/input-8, 218] 
split level 59: [/input, 3541] 
split level 60: [/input-8, 580] 
split level 61: [/input-8, 1627] 
split level 62: [/input, 469] 
split level 63: [/input-8, 346] 
split level 64: [/input-8, 1284] 
split level 65: [/input, 2153] 
split level 66: [/input, 2472] 
split level 67: [/input, 3542] 
split level 68: [/input-8, 1043] 
split level 69: [/input, 2442] 
split level 70: [/input-8, 172] 
split level 71: [/input-8, 1781] 
split level 72: [/input, 2201] 
split level 73: [/input, 2457] 
split level 74: [/input, 2370] 
split level 75: [/input, 2024] 
split level 76: [/input, 2421] 
split level 77: [/input, 488] 
split level 78: [/input-8, 222] 
split level 79: [/input-8, 337] 
split level 80: [/input, 2022] 
split level 81: [/input, 754] 
split level 82: [/input, 2021] 
split level 83: [/input, 2181] 
split level 84: [/input, 3545] 
split level 85: [/input-8, 1150] 
split level 86: [/input-8, 1706] 
split level 87: [/input, 1415] 
split level 88: [/input-8, 910] 
split level 89: [/input, 2488] 
split level 90: [/input, 981] 
split level 91: [/input, 487] 
split level 92: [/input, 2246] 
split level 93: [/input-8, 907] 
split level 94: [/input-8, 1824] 
split level 95: [/input, 2518] 
split level 96: [/input-8, 1617] 
split level 97: [/input, 696] 
split level 98: [/input, 2154] 
split level 99: [/input, 2473] 
split level 100: [/input-8, 48] 
split level 101: [/input-8, 997] 
split level 102: [/input, 2282] 
split level 103: [/input-8, 1974] 
split level 104: [/input, 3540] 
split level 105: [/input, 998] 
split level 106: [/input-8, 1587] 
split level 107: [/input-8, 42] 
split level 108: [/input, 2026] 
split level 109: [/input, 2538] 
split level 110: [/input-8, 209] 
split level 111: [/input-8, 1773] 
split level 112: [/input, 2489] 
split level 113: [/input, 2114] 
split level 114: [/input-8, 213] 
split level 115: [/input-8, 1607] 
split level 116: [/input-8, 776] 
split level 117: [/input, 2121] 
split level 118: [/input-8, 233] 
split level 119: [/input, 985] 
split level 120: [/input, 3557] 
split level 121: [/input, 4066] 
split level 122: [/input-8, 211] 
split level 123: [/input-8, 1034] 
split level 124: [/input, 2263] 
split level 125: [/input-8, 330] 
split level 126: [/input, 2264] 
split level 127: [/input, 486] 
split level 128: [/input, 2075] 
split level 129: [/input, 3558] 
split level 130: [/input-8, 219] 
split level 131: [/input, 2265] 
split level 132: [/input, 2533] 
split level 133: [/input, 2325] 
split level 134: [/input, 2451] 
split level 135: [/input-8, 1736] 
split level 136: [/input, 707] 
split level 137: [/input, 2435] 
split level 138: [/input, 738] 
split level 139: [/input, 2525] 
split level 140: [/input, 3973] 
split level 141: [/input, 2261] 
split level 142: [/input, 3371] 
split level 143: [/input-8, 1816] 
split level 144: [/input, 2248] 
split level 145: [/input, 4006] 
split level 146: [/input, 2347] 
split level 147: [/input-8, 217] 
split level 148: [/input, 812] 
split level 149: [/input, 2025] 
split level 150: [/input-8, 215] 
split level 151: [/input, 2163] 
split level 152: [/input-8, 339] 
split level 153: [/input, 2369] 
split level 154: [/input, 485] 
split level 155: [/input, 2280] 
split level 156: [/input, 2113] 
split level 157: [/input, 299] 
split level 158: [/input-8, 238] 
split level 159: [/input, 2382] 
split level 160: [/input-8, 253] 
split level 161: [/input, 2353] 
split level 162: [/input, 3422] 
split level 163: [/input, 1000] 
split level 164: [/input, 3361] 
split level 165: [/input-8, 290] 
split level 166: [/input, 952] 
split level 167: [/input-8, 197] 
split level 168: [/input, 489] 
split level 169: [/input, 2536] 
split level 170: [/input, 3395] 
split level 171: [/input, 986] 
split level 172: [/input, 2505] 
split level 173: [/input, 2552] 
split level 174: [/input, 2281] 
split level 175: [/input, 4082] 
split level 176: [/input, 1977] 
split level 177: [/input, 1976] 
split level 178: [/input, 3882] 
split level 179: [/input, 3559] 
split level 180: [/input-8, 225] 
split level 181: [/input-8, 1254] 
split level 182: [/input, 3942] 
split level 183: [/input, 2554] 
split level 184: [/input, 3372] 
split level 185: [/input, 2278] 
split level 186: [/input, 2125] 
split level 187: [/input, 2092] 
split level 188: [/input, 2515] 
split level 189: [/input, 2551] 
split level 190: [/input-8, 1848] 
split level 191: [/input, 3344] 
split level 192: [/input, 2788] 
split level 193: [/input, 2126] 
split level 194: [/input, 2277] 
split level 195: [/input, 2499] 
split level 196: [/input, 2279] 
split level 197: [/input, 2549] 
split level 198: [/input-8, 410] 
split level 199: [/input, 2227] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03361153602600098
10 lb beta sum: 0.0, worst -0.03360772132873535
Time: prepare 0.0128    bound 0.1017    transfer 0.0026    finalize 0.0026    func 0.1223    
Accumulated time: func 0.1766    prepare 0.0229    bound 0.1555    transfer 0.0027    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.16243649) min lb tensor(-0.03360081)
Number of Verified Splits: 24 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011916160583496094 
BICCOS Cumulative time: 0.011916160583496094
Preprocessing time: 0.010139942169189453 Inference time: 0.0009429454803466797 Add cuts time: 0.0003027915954589844 Cut analysis time: 0.0005304813385009766
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5278    set_bounds 0.0090    solve 0.1224    add 0.0099    
Accumulated time: pickout 0.0003    decision 0.5278    set_bounds 0.0090    solve 0.1224    add 0.0099    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78]), tensor([-1.]), tensor([0]), tensor([5.21001575e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78]), tensor([1.]), tensor([0]), tensor([2.82951758e+16]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.004782676696777344

all verified at 0th iter
Time: prepare 0.0003    bound 0.0040    transfer 0.0001    finalize 0.0001    func 0.0046    
Accumulated time: func 0.1811    prepare 0.0232    bound 0.1595    transfer 0.0028    finalize 0.0029    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.6576521396637
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.6575903892517
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.6575677394867
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.65753507614136
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.65751457214355
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.6574900150299
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.3426 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 55, vnnlib ID: 55 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.79308891, -23.41397476, -18.82098770, -19.48437309, -18.56243706,
         -19.91847992, -17.07889175, -20.97890472, -23.56008720, -23.37459755]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [606]; unstable size 606; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 336, 1, 606] with unstable size 335 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 606] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 606] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [335]; unstable size 335; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 335] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 335] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.91788745, 3.99140739, 0.67280000, 1.37791443, 0.25162333, 1.69752824,
         2.11260557, 4.47059822, 4.00945663]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0691 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 56, vnnlib ID: 56 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-33.65884781, -39.15306854, -38.09638214, -41.44153214, -38.26478195,
         -42.46372604, -41.47655106, -40.54250336, -32.64043427, -38.01860428]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [675]; unstable size 675; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 675] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 675] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 675] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 216] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.57993078,  3.15776873,  6.31814671,  3.25631595,  7.08247995,
          6.16690826,  5.13876104, -1.86000657,  3.30038881]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-33.65884781, -39.15306854, -38.09638214, -41.44153214, -38.26478195,
         -42.46372604, -41.47655106, -40.54250336, -32.64043427, -38.01860428]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-33.65884781, -39.15306854, -38.09638214, -41.44153214, -38.26478195,
          -42.46372604, -41.47655106, -40.54250336, -32.64043427, -38.01860428]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.01841354]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.24920666e+00,  1.67777801e+00,  1.32857168e+00,  ...,
             2.80952454e-01,  1.06349289e-01, -5.23808524e-02],
           [ 9.79365110e-01,  1.39206374e+00,  1.24920666e+00,  ...,
            -1.95237994e-01, -1.79364979e-01, -1.31745934e-01],
           [ 1.28095269e+00,  1.39206374e+00,  9.15873051e-01,  ...,
            -2.06348225e-02,  1.11112073e-02,  2.17460394e-01],
           ...,
           [-4.96825397e-01, -4.80952382e-01, -4.33333218e-01,  ...,
            -4.80952382e-01, -4.96825397e-01, -4.96825397e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.80952382e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.96825397e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01]],

          [[ 1.91626441e+00,  2.06119204e+00,  1.70692456e+00,  ...,
             1.27214205e+00,  1.15942061e+00,  1.06280196e+00],
           [ 1.72302771e+00,  1.88405824e+00,  1.83574903e+00,  ...,
             1.07890511e+00,  1.06280196e+00,  1.04669893e+00],
           [ 1.94847047e+00,  1.91626441e+00,  1.69082153e+00,  ...,
             1.19162667e+00,  1.20772982e+00,  1.30434811e+00],
           ...,
           [-3.22059989e-02, -4.83090580e-02, -3.22059989e-02,  ...,
            -6.44121096e-02, -8.05151686e-02, -8.05151686e-02],
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -3.22059989e-02],
           [-6.44121096e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -1.61029361e-02]],

          [[ 2.10045004e+00,  2.08545780e+00,  1.81559265e+00,  ...,
             1.84557760e+00,  1.80060017e+00,  1.74063015e+00],
           [ 1.96551764e+00,  1.92054021e+00,  1.96551764e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.81559265e+00],
           [ 2.08545780e+00,  1.96551764e+00,  1.96551764e+00,  ...,
             1.95052516e+00,  1.95052516e+00,  1.96551764e+00],
           ...,
           [ 2.11394474e-01,  1.21439442e-01,  1.81409463e-01,  ...,
             2.11394474e-01,  2.11394474e-01,  2.11394474e-01],
           [ 2.26386964e-01,  1.51424453e-01,  1.81409463e-01,  ...,
             2.26386964e-01,  2.26386964e-01,  2.41379470e-01],
           [ 1.81409463e-01,  1.66416958e-01,  1.96401969e-01,  ...,
             1.96401969e-01,  2.11394474e-01,  2.26386964e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0602 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 57, vnnlib ID: 57 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
         -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [645]; unstable size 645; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 263, 1, 645] with unstable size 262 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 645] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 645] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [262]; unstable size 262; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 262] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 262] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.42895699,  4.10993242, -0.60754919, -0.13815892, -0.32017219,
          1.23225904, -0.67439449,  4.97595978,  2.89095950]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
         -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.36it/s]100%|██████████| 1/1 [00:00<00:00,  8.36it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.49737930, -22.43238258, -17.16550827, -16.42162704, -17.18960381,
          -16.38314819, -18.64624214, -17.14737320, -23.54323959, -21.05616760],
         [-21.49737930, -22.43238258, -17.16550827, -16.42162704, -17.18960381,
          -16.38314819, -18.64624214, -17.14737320, -23.54323959, -21.05616760]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.78236008, 0.03847885, 0.80645561, 0.76422501]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1227 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 15.555830955505371
alpha/beta optimization time: 1.2241647243499756
initial alpha-crown bounds: tensor([[ 3.51031137,  4.22539616, -0.55174959, -0.12316960, -0.26672757,
          1.27698326, -0.59470439,  5.09362984,  2.98586202]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 4 ; Worst class: (+ rhs) -0.5947043895721436
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6144413948059
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6144015789032
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61437606811523
Verifying property 2 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.55174959]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
        -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.55174959]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 645
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 256
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 924
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010037422180175781
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5517466068267822
10 lb beta sum: 0.0, worst -0.5517454147338867
Time: prepare 0.0002    bound 0.0881    transfer 0.0001    finalize 0.0001    func 0.0886    
Accumulated time: func 0.0886    prepare 0.0002    bound 0.0881    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] 
split level 1: [/input-12, 24] 
split level 2: [/input-12, 53] 
split level 3: [/input-12, 85] 
split level 4: [/input-12, 34] 
split level 5: [/input-12, 72] 
split level 6: [/input-12, 83] 
split level 7: [/input-12, 17] 
split level 8: [/input-12, 7] 
split level 9: [/input-12, 4] 
split level 10: [/input-12, 92] 
split level 11: [/input-8, 1683] 
split level 12: [/input-8, 1651] 
split level 13: [/input-8, 1635] 
split level 14: [/input-8, 1963] 
split level 15: [/input-8, 1643] 
split level 16: [/input-8, 1627] 
split level 17: [/input-8, 1652] 
split level 18: [/input-8, 1636] 
split level 19: [/input-8, 227] 
split level 20: [/input-8, 219] 
split level 21: [/input-8, 416] 
split level 22: [/input-8, 1691] 
split level 23: [/input-8, 1628] 
split level 24: [/input-12, 71] 
split level 25: [/input-8, 1692] 
split level 26: [/input-8, 844] 
split level 27: [/input-8, 212] 
split level 28: [/input-8, 1644] 
split level 29: [/input-8, 1637] 
split level 30: [/input-8, 218] 
split level 31: [/input-8, 1363] 
split level 32: [/input-8, 394] 
split level 33: [/input-8, 1946] 
split level 34: [/input-8, 1645] 
split level 35: [/input-8, 419] 
split level 36: [/input-8, 211] 
split level 37: [/input-8, 417] 
split level 38: [/input-8, 1650] 
split level 39: [/input-8, 48] 
split level 40: [/input-8, 828] 
split level 41: [/input-8, 1658] 
split level 42: [/input-8, 1716] 
split level 43: [/input-8, 1661] 
split level 44: [/input-8, 1619] 
split level 45: [/input-8, 1708] 
split level 46: [/input-8, 469] 
split level 47: [/input-8, 57] 
split level 48: [/input-8, 1620] 
split level 49: [/input-8, 1387] 
split level 50: [/input-8, 1953] 
split level 51: [/input-8, 1653] 
split level 52: [/input-12, 6] 
split level 53: [/input-8, 201] 
split level 54: [/input-8, 205] 
split level 55: [/input-8, 395] 
split level 56: [/input-8, 1669] 
split level 57: [/input-8, 921] 
split level 58: [/input-8, 229] 
split level 59: [/input-8, 1970] 
split level 60: [/input-8, 425] 
split level 61: [/input-8, 206] 
split level 62: [/input-8, 434] 
split level 63: [/input-8, 222] 
split level 64: [/input-8, 246] 
split level 65: [/input-8, 186] 
split level 66: [/input-8, 204] 
split level 67: [/input-8, 194] 
split level 68: [/input-8, 253] 
split level 69: [/input-8, 499] 
split level 70: [/input, 2985] 
split level 71: [/input, 89] 
split level 72: [/input-8, 1323] 
split level 73: [/input-8, 1576] 
split level 74: [/input, 2986] 
split level 75: [/input-8, 164] 
split level 76: [/input-8, 214] 
split level 77: [/input-8, 51] 
split level 78: [/input, 2906] 
split level 79: [/input-8, 1673] 
split level 80: [/input-8, 238] 
split level 81: [/input-8, 1662] 
split level 82: [/input-8, 254] 
split level 83: [/input-8, 200] 
split level 84: [/input-8, 23] 
split level 85: [/input-8, 349] 
split level 86: [/input-8, 1521] 
split level 87: [/input-12, 56] 
split level 88: [/input-8, 407] 
split level 89: [/input-8, 393] 
split level 90: [/input-8, 424] 
split level 91: [/input-8, 1378] 
split level 92: [/input, 75] 
split level 93: [/input-8, 187] 
split level 94: [/input, 2378] 
split level 95: [/input-8, 41] 
split level 96: [/input-8, 255] 
split level 97: [/input, 1320] 
split level 98: [/input, 2871] 
split level 99: [/input-8, 342] 
split level 100: [/input-8, 129] 
split level 101: [/input-8, 723] 
split level 102: [/input-8, 161] 
split level 103: [/input-8, 1979] 
split level 104: [/input, 138] 
split level 105: [/input, 391] 
split level 106: [/input, 130] 
split level 107: [/input, 2380] 
split level 108: [/input-8, 1370] 
split level 109: [/input-8, 1759] 
split level 110: [/input-8, 714] 
split level 111: [/input-8, 1250] 
split level 112: [/input-8, 223] 
split level 113: [/input-8, 188] 
split level 114: [/input, 1845] 
split level 115: [/input, 3018] 
split level 116: [/input, 104] 
split level 117: [/input-8, 1579] 
split level 118: [/input, 1942] 
split level 119: [/input-8, 171] 
split level 120: [/input-8, 209] 
split level 121: [/input, 1410] 
split level 122: [/input-8, 1362] 
split level 123: [/input-8, 930] 
split level 124: [/input-8, 207] 
split level 125: [/input-8, 61] 
split level 126: [/input-8, 1566] 
split level 127: [/input, 140] 
split level 128: [/input, 41] 
split level 129: [/input-8, 1666] 
split level 130: [/input, 1669] 
split level 131: [/input, 2952] 
split level 132: [/input, 2477] 
split level 133: [/input-8, 1322] 
split level 134: [/input-8, 216] 
split level 135: [/input, 74] 
split level 136: [/input, 2203] 
split level 137: [/input-8, 1159] 
split level 138: [/input-8, 195] 
split level 139: [/input, 2958] 
split level 140: [/input, 2953] 
split level 141: [/input, 1864] 
split level 142: [/input-8, 730] 
split level 143: [/input-8, 1343] 
split level 144: [/input, 732] 
split level 145: [/input, 45] 
split level 146: [/input-8, 245] 
split level 147: [/input, 71] 
split level 148: [/input-8, 196] 
split level 149: [/input, 3541] 
split level 150: [/input, 1305] 
split level 151: [/input, 1879] 
split level 152: [/input, 177] 
split level 153: [/input, 470] 
split level 154: [/input, 2689] 
split level 155: [/input-8, 1665] 
split level 156: [/input-8, 1717] 
split level 157: [/input-8, 198] 
split level 158: [/input, 2156] 
split level 159: [/input, 1483] 
split level 160: [/input, 1827] 
split level 161: [/input, 1953] 
split level 162: [/input, 1022] 
split level 163: [/input, 2397] 
split level 164: [/input, 1878] 
split level 165: [/input, 1910] 
split level 166: [/input, 1925] 
split level 167: [/input, 1338] 
split level 168: [/input, 37] 
split level 169: [/input, 3527] 
split level 170: [/input, 2823] 
split level 171: [/input-8, 199] 
split level 172: [/input-8, 1944] 
split level 173: [/input, 188] 
split level 174: [/input, 1898] 
split level 175: [/input, 1416] 
split level 176: [/input, 360] 
split level 177: [/input, 1064] 
split level 178: [/input, 1146] 
split level 179: [/input, 204] 
split level 180: [/input, 136] 
split level 181: [/input, 2493] 
split level 182: [/input, 1894] 
split level 183: [/input, 2758] 
split level 184: [/input, 203] 
split level 185: [/input, 1882] 
split level 186: [/input, 3019] 
split level 187: [/input, 2824] 
split level 188: [/input, 1922] 
split level 189: [/input, 2674] 
split level 190: [/input, 1952] 
split level 191: [/input, 748] 
split level 192: [/input, 1032] 
split level 193: [/input, 1905] 
split level 194: [/input, 1400] 
split level 195: [/input, 1080] 
split level 196: [/input, 216] 
split level 197: [/input, 2215] 
split level 198: [/input, 1130] 
split level 199: [/input, 1846] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.551598072052002
10 lb beta sum: 0.0, worst -0.5515989065170288
Time: prepare 0.0114    bound 0.0998    transfer 0.0026    finalize 0.0028    func 0.1191    
Accumulated time: func 0.2077    prepare 0.0214    bound 0.1879    transfer 0.0027    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.19857287) min lb tensor(-0.55159736)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010362386703491211 
BICCOS Cumulative time: 0.010362386703491211
Preprocessing time: 0.01001429557800293 Inference time: 8.463859558105469e-05 Add cuts time: 5.4836273193359375e-05 Cut analysis time: 0.0002086162567138672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.53794 (1), -0.53784 (1), -0.53750 (1), -0.53740 (1), -0.53730 (1), -0.53662 (1), -0.53626 (1), -0.53595 (1), -0.53518 (1), -0.53447 (1), -0.53445 (1), -0.53430 (1), -0.53380 (1), -0.53343 (1), -0.53273 (1), -0.53200 (1), -0.53139 (1), -0.53087 (1), -0.53082 (1), -0.53069 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5218    set_bounds 0.0090    solve 0.1192    add 0.0832    
Accumulated time: pickout 0.0003    decision 0.5218    set_bounds 0.0090    solve 0.1192    add 0.0832    
Current (lb-rhs): -0.537935733795166
50 domains visited
Cumulative time: 0.8379018306732178

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 85] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 53] [/input-12, 85] [/input-12, 85] [/input-12, 53] [/input-12, 85] [/input-12, 53] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 53] 
split level 3: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 85] [/input-12, 34] [/input-12, 34] [/input-12, 72] [/input-12, 53] [/input-12, 53] [/input-12, 34] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5343008041381836
10 lb beta sum: 0.171164408326149, worst -0.5342090129852295
Time: prepare 0.0071    bound 0.1162    transfer 0.0011    finalize 0.0020    func 0.1290    
Accumulated time: func 0.3366    prepare 0.0287    bound 0.3041    transfer 0.0037    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.35137409) min lb tensor(-0.53420043)
Number of Verified Splits: 50 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01471400260925293 
BICCOS Cumulative time: 0.02507638931274414
Preprocessing time: 0.011616945266723633 Inference time: 0.0018014907836914062 Add cuts time: 0.0010731220245361328 Cut analysis time: 0.0002224445343017578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26691 (2), -0.26644 (2), -0.26544 (2), -0.26479 (2), -0.26430 (2), -0.26120 (2), -0.25831 (2), -0.25825 (2), -0.25797 (2), -0.25592 (2), -0.25321 (2), -0.25114 (2), -0.25051 (2), -0.24999 (2), -0.24933 (2), -0.24765 (2), -0.24742 (2), -0.24732 (2), -0.24728 (2), -0.24687 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0125    solve 0.1290    add 0.0775    
Accumulated time: pickout 0.0013    decision 0.5413    set_bounds 0.0215    solve 0.2482    add 0.1608    
Current (lb-rhs): -0.26690641045570374
100 domains visited
Cumulative time: 1.0925171375274658

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 53] 
split level 2: [/input-12, 53] [/input-12, 53] [/input-12, 85] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 53] [/input-12, 34] [/input-12, 34] 
split level 3: [/input-12, 72] [/input-12, 83] [/input-12, 72] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 72] [/input-12, 72] [/input-12, 83] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23381726443767548, worst -0.2669065296649933
10 lb beta sum: 0.23381726443767548, worst -0.26698005199432373
Time: prepare 0.0161    bound 0.1168    transfer 0.0011    finalize 0.0021    func 0.1391    
Accumulated time: func 0.4758    prepare 0.0451    bound 0.4209    transfer 0.0048    finalize 0.0070    
all_split False
======================Cut inference begins======================
max lb tensor(0.31546205) min lb tensor(-0.26520172)
Number of Verified Splits: 65 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 2
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.01591324806213379 
BICCOS Cumulative time: 0.04098963737487793
Preprocessing time: 0.011492729187011719 Inference time: 0.002826690673828125 Add cuts time: 0.001287221908569336 Cut analysis time: 0.0003066062927246094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05884 (3), -0.05864 (3), -0.05511 (3), -0.05445 (3), -0.05434 (3), -0.05279 (3), -0.04821 (3), -0.04576 (3), -0.04482 (3), -0.04469 (3), -0.04457 (3), -0.04454 (3), -0.04441 (3), -0.04358 (3), -0.04356 (3), -0.04319 (3), -0.04279 (3), -0.04122 (3), -0.04107 (3), -0.04061 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0205    set_bounds 0.0153    solve 0.1392    add 0.0830    
Accumulated time: pickout 0.0022    decision 0.5618    set_bounds 0.0368    solve 0.3874    add 0.2438    
Current (lb-rhs): -0.05884484946727753
150 domains visited
Cumulative time: 1.367581844329834

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 53] [/input-12, 53] [/input-12, 85] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 85] 
split level 2: [/input-12, 83] [/input-12, 83] [/input-12, 72] [/input-12, 72] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 34] 
split level 3: [/input-12, 7] [/input-12, 7] [/input-12, 83] [/input-12, 83] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05884432792663574
10 lb beta sum: 0.08412349224090576, worst -0.3056163489818573
Time: prepare 0.0057    bound 0.1167    transfer 0.0011    finalize 0.0017    func 0.1278    
Accumulated time: func 0.6035    prepare 0.0510    bound 0.5375    transfer 0.0060    finalize 0.0087    
all_split False
======================Cut inference begins======================
max lb tensor(0.40333021) min lb tensor(-0.04529333)
Number of Verified Splits: 368 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 7
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.03575491905212402 
BICCOS Cumulative time: 0.07674455642700195
Preprocessing time: 0.011384010314941406 Inference time: 0.018840312957763672 Add cuts time: 0.005105495452880859 Cut analysis time: 0.00042510032653808594
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0198    set_bounds 0.0153    solve 0.1278    add 0.0238    
Accumulated time: pickout 0.0031    decision 0.5816    set_bounds 0.0521    solve 0.5153    add 0.2676    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 85, 31]), tensor([-1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.94006605e-09, 1.36669889e-01, 1.09253451e-01, 4.09738511e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 85, 31]), tensor([-1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.94006605e-09, 1.36669889e-01, 1.09253451e-01, 1.40021611e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 85, 31]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.94006605e-09, 1.36669889e-01, 1.41403481e-01, 4.15724725e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 85, 31]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.94006605e-09, 1.36669889e-01, 1.41403481e-01, 5.75121865e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 34]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([3.94006605e-09, 9.18656439e-02, 5.17887324e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 34, 31]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.94006605e-09, 9.18656439e-02, 1.55024692e-01, 3.99808288e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 34, 31]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.94006605e-09, 9.18656439e-02, 1.55024692e-01, 7.79051334e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 31]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.82952445e+16, 6.91599965e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 31]), tensor([1., 1.]), tensor([0, 0]), tensor([2.82952445e+16, 4.24878439e-03]), tensor([0, 1]))}
Shallow branching resets to n domains:  9
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.449160099029541
10 lb beta sum: 0.17613942921161652, worst -0.44850683212280273
Time: prepare 0.0004    bound 0.1141    transfer 0.0001    finalize 0.0002    func 0.1150    
Accumulated time: func 0.7185    prepare 0.0514    bound 0.6517    transfer 0.0061    finalize 0.0089    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 53] 
split level 1: [/input-12, 85] [/input-12, 85] 
split level 2: [/input-12, 83] [/input-12, 34] 
split level 3: [/input-12, 17] [/input-12, 72] 
split level 4: [/input-12, 7] [/input-12, 83] 
split level 5: [/input-12, 4] [/input-12, 7] 
split level 6: [/input-12, 92] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2050388753414154, worst -0.13993114233016968
10 lb beta sum: 0.20537859201431274, worst -0.1107906699180603
Time: prepare 0.0097    bound 0.1165    transfer 0.0014    finalize 0.0015    func 0.1308    
Accumulated time: func 0.8493    prepare 0.0615    bound 0.7682    transfer 0.0075    finalize 0.0104    
all_split False
======================Cut inference begins======================
max lb tensor(0.64063454) min lb tensor(-0.11030066)
Number of Verified Splits: 249 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 10.
#cuts 1-3: 7
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.0003135204315185547 
BICCOS Cumulative time: 0.07705807685852051
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11030 (7), -0.09266 (7), -0.05664 (7), -0.05056 (7), -0.02000 (7), -0.01264 (7), -0.01230 (7), 
Length of domains: 7
Time: pickout 0.0005    decision 0.0197    set_bounds 0.0185    solve 0.1309    add 0.0007    
Accumulated time: pickout 0.0036    decision 0.6013    set_bounds 0.0706    solve 0.6461    add 0.2684    
Current (lb-rhs): -0.11030066013336182
157 domains visited
Cumulative time: 1.8977253437042236

BaB round 2
batch: 7
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
split level 1: [/input-12, 92] [/input-8, 1683] [/input-12, 92] [/input-8, 1683] [/input-8, 1963] [/input-12, 92] [/input-12, 92] 
split level 2: [/input-12, 71] [/input-8, 1636] [/input-8, 1963] [/input-12, 92] [/input-12, 92] [/input-8, 1636] [/input-8, 1691] 
split level 3: [/input-8, 1627] [/input-8, 1627] [/input-8, 1691] [/input-8, 1627] [/input-8, 1691] [/input-8, 1627] [/input-8, 1692] 
split level 4: [/input-8, 419] [/input-8, 1644] [/input-8, 1946] [/input-8, 1636] [/input-8, 1946] [/input-8, 1644] [/input-8, 1946] 
cut re-enabled after branching node selection
0 lb beta sum: 0.02789372205734253, worst -0.06444507837295532
10 lb beta sum: 0.02789372205734253, worst -0.06371301412582397
Time: prepare 0.0099    bound 0.1247    transfer 0.0007    finalize 0.0014    func 0.1383    
Accumulated time: func 0.9876    prepare 0.0717    bound 0.8929    transfer 0.0082    finalize 0.0118    
all_split False
======================Cut inference begins======================
max lb tensor(0.24535291) min lb tensor(-0.06337816)
Number of Verified Splits: 185 of 224
Stop inferencing: Max iteration reached.
Total number of valid cuts: 10.
#cuts 1-3: 7
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.00035190582275390625 
BICCOS Cumulative time: 0.07740998268127441
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06338 (12), -0.06072 (12), -0.05042 (12), -0.04872 (12), -0.04795 (12), -0.04782 (12), -0.04763 (12), -0.04705 (12), -0.04338 (12), -0.03799 (12), -0.03760 (12), -0.03621 (12), -0.03604 (12), -0.03555 (12), -0.03486 (12), -0.03452 (12), -0.03418 (12), -0.03016 (12), -0.03004 (12), -0.02945 (12), 
Length of domains: 39
Time: pickout 0.0007    decision 0.0187    set_bounds 0.1666    solve 0.1384    add 0.0010    
Accumulated time: pickout 0.0044    decision 0.6200    set_bounds 0.2372    solve 0.7845    add 0.2693    
Current (lb-rhs): -0.06337815523147583
196 domains visited
Cumulative time: 2.2244455814361572

BaB round 3
batch: 39
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1692] [/input-8, 1692] [/input-8, 1635] [/input-8, 1683] [/input-8, 1692] [/input-8, 1692] [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] [/input-8, 1692] 
split level 1: [/input-8, 1627] [/input-12, 71] [/input-12, 92] [/input-12, 71] [/input-12, 71] [/input-8, 1627] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-8, 1627] 
split level 2: [/input-12, 71] [/input-8, 930] [/input-8, 1963] [/input-8, 1636] [/input-8, 930] [/input-12, 71] [/input-8, 930] [/input-8, 1636] [/input-8, 930] [/input-12, 71] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0014405428664758801, worst -0.0430607795715332
10 lb beta sum: 0.0014405428664758801, worst -0.04264521598815918
Time: prepare 0.0137    bound 0.1216    transfer 0.0021    finalize 0.0017    func 0.1411    
Accumulated time: func 1.1287    prepare 0.0856    bound 1.0145    transfer 0.0103    finalize 0.0135    
all_split False
======================Cut inference begins======================
max lb tensor(0.06343788) min lb tensor(-0.04242790)
Number of Verified Splits: 219 of 312
Stop inferencing: Max iteration reached.
Total number of valid cuts: 10.
#cuts 1-3: 7
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.00033020973205566406 
BICCOS Cumulative time: 0.07774019241333008
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04243 (15), -0.03924 (15), -0.03607 (15), -0.03477 (15), -0.03304 (15), -0.03162 (15), -0.02956 (15), -0.02859 (15), -0.02706 (15), -0.02666 (15), -0.02664 (15), -0.02620 (15), -0.02600 (15), -0.02347 (15), -0.02299 (15), -0.02241 (15), -0.02235 (15), -0.02168 (15), -0.02086 (15), -0.02070 (15), 
Length of domains: 93
Time: pickout 0.0013    decision 0.0157    set_bounds 0.0245    solve 0.1412    add 0.0016    
Accumulated time: pickout 0.0057    decision 0.6357    set_bounds 0.2617    solve 0.9257    add 0.2709    
Current (lb-rhs): -0.042427897453308105
289 domains visited
Cumulative time: 2.410127878189087

BaB round 4
batch: 93
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] [/input-8, 1627] [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] 
split level 1: [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 417] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03145194053649902
10 lb beta sum: 0.0, worst -0.03121042251586914
Time: prepare 0.0161    bound 0.1208    transfer 0.0012    finalize 0.0021    func 0.1427    
Accumulated time: func 1.2714    prepare 0.1019    bound 1.1353    transfer 0.0115    finalize 0.0156    
all_split False
======================Cut inference begins======================
max lb tensor(0.02850425) min lb tensor(-0.03108728)
Number of Verified Splits: 279 of 372
Stop inferencing: Max iteration reached.
Total number of valid cuts: 10.
#cuts 1-3: 7
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.0003325939178466797 
BICCOS Cumulative time: 0.07807278633117676
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03109 (17), -0.02748 (17), -0.02718 (17), -0.02407 (17), -0.02353 (17), -0.02276 (17), -0.02075 (17), -0.01876 (17), -0.01799 (17), -0.01794 (17), -0.01665 (17), -0.01642 (17), -0.01480 (17), -0.01457 (17), -0.01441 (17), -0.01431 (17), -0.01426 (17), -0.01423 (17), -0.01400 (17), -0.01352 (17), 
Length of domains: 93
Time: pickout 0.0020    decision 0.0187    set_bounds 0.0166    solve 0.1428    add 0.0011    
Accumulated time: pickout 0.0076    decision 0.6545    set_bounds 0.2783    solve 1.0685    add 0.2720    
Current (lb-rhs): -0.031087279319763184
382 domains visited
Cumulative time: 2.5925452709198

BaB round 5
batch: 93
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 921] [/input-8, 1708] 
split level 1: [/input-8, 1619] [/input-8, 1619] [/input-8, 1619] [/input-8, 1619] [/input-8, 1619] [/input-8, 419] [/input-8, 1619] [/input-8, 1619] [/input-8, 1708] [/input-8, 1619] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0189630389213562
10 lb beta sum: 0.0, worst -0.01883798837661743
Time: prepare 0.0161    bound 0.1162    transfer 0.0010    finalize 0.0016    func 0.1377    
Accumulated time: func 1.4091    prepare 0.1182    bound 1.2515    transfer 0.0125    finalize 0.0172    
all_split False
======================Cut inference begins======================
max lb tensor(0.02897310) min lb tensor(-0.01875424)
Number of Verified Splits: 309 of 372
Stop inferencing: Max iteration reached.
Total number of valid cuts: 10.
#cuts 1-3: 7
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.00032210350036621094 
BICCOS Cumulative time: 0.07839488983154297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01875 (19), -0.01803 (19), -0.01700 (19), -0.01627 (19), -0.01512 (19), -0.01488 (19), -0.01463 (19), -0.01424 (19), -0.01312 (19), -0.01291 (19), -0.01287 (19), -0.01203 (19), -0.01202 (19), -0.01120 (19), -0.01104 (19), -0.01080 (19), -0.01058 (19), -0.01055 (19), -0.01023 (19), -0.00955 (19), 
Length of domains: 63
Time: pickout 0.0019    decision 0.0165    set_bounds 0.0165    solve 0.1378    add 0.0020    
Accumulated time: pickout 0.0095    decision 0.6709    set_bounds 0.2947    solve 1.2063    add 0.2740    
Current (lb-rhs): -0.018754243850708008
445 domains visited
Cumulative time: 2.7685914039611816

BaB round 6
batch: 63
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1644] [/input-8, 1644] [/input-8, 1644] [/input-8, 1644] [/input-8, 1644] [/input-8, 1644] [/input-8, 1644] [/input-8, 1644] [/input-8, 1644] [/input-8, 419] 
split level 1: [/input-8, 419] [/input-8, 417] [/input-8, 419] [/input-8, 419] [/input-8, 417] [/input-8, 1619] [/input-8, 419] [/input-8, 419] [/input-8, 417] [/input-8, 1644] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.007400810718536377
10 lb beta sum: 0.0, worst -0.0072928667068481445
Time: prepare 0.0110    bound 0.1203    transfer 0.0007    finalize 0.0012    func 0.1349    
Accumulated time: func 1.5440    prepare 0.1294    bound 1.3718    transfer 0.0132    finalize 0.0184    
all_split False
======================Cut inference begins======================
max lb tensor(0.01623660) min lb tensor(-0.00724614)
Number of Verified Splits: 210 of 252
Stop inferencing: Max iteration reached.
Total number of valid cuts: 10.
#cuts 1-3: 7
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.0003190040588378906 
BICCOS Cumulative time: 0.07871389389038086
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00725 (21), -0.00655 (21), -0.00609 (21), -0.00584 (21), -0.00543 (21), -0.00538 (21), -0.00507 (21), -0.00474 (21), -0.00450 (21), -0.00441 (21), -0.00431 (21), -0.00374 (21), -0.00367 (21), -0.00362 (21), -0.00360 (21), -0.00355 (21), -0.00315 (21), -0.00302 (21), -0.00294 (21), -0.00280 (21), 
Length of domains: 42
Time: pickout 0.0016    decision 0.0167    set_bounds 0.0113    solve 0.1349    add 0.0009    
Accumulated time: pickout 0.0112    decision 0.6876    set_bounds 0.3060    solve 1.3412    add 0.2749    
Current (lb-rhs): -0.007246136665344238
487 domains visited
Cumulative time: 2.9350264072418213

BaB round 7
batch: 42
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1628] [/input-8, 1628] [/input-8, 1953] [/input-8, 1628] [/input-8, 1628] [/input-8, 1953] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] 
split level 1: [/input-8, 1953] [/input-8, 1953] [/input-8, 1628] [/input-8, 1953] [/input-8, 417] [/input-8, 1628] [/input-8, 1953] [/input-8, 1953] [/input-8, 1953] [/input-8, 417] 
split level 2: [/input-8, 417] [/input-8, 419] [/input-8, 1644] [/input-8, 417] [/input-8, 1953] [/input-8, 1644] [/input-8, 417] [/input-8, 419] [/input-8, 417] [/input-8, 1953] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.006661117076873779

all verified at 0th iter
Time: prepare 0.0145    bound 0.0065    transfer 0.0009    finalize 0.0015    func 0.0256    
Accumulated time: func 1.5696    prepare 0.1441    bound 1.3784    transfer 0.0141    finalize 0.0200    
all_split False
======================Cut inference begins======================
max lb tensor(0.02411532) min lb tensor(0.00666112)
Number of Verified Splits: 336 of 336
Stop inferencing: Max iteration reached.
Total number of valid cuts: 10.
#cuts 1-3: 7
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.0003104209899902344 
BICCOS Cumulative time: 0.0790243148803711
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0013    decision 0.0159    set_bounds 0.0172    solve 0.0257    add 0.0001    
Accumulated time: pickout 0.0125    decision 0.7035    set_bounds 0.3232    solve 1.3669    add 0.2749    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
487 domains visited
Cumulative time: 2.996229887008667


Properties batch 3, size 1
Remaining timeout: 195.4424638748169
Verifying property 3 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.12316960]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
        -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.12316960]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 645
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 256
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 924
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001010894775390625
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12316900491714478
10 lb beta sum: 0.0, worst -0.12317240238189697
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0532    transfer 0.0001    finalize 0.0001    func 0.0537    
Accumulated time: func 0.0537    prepare 0.0002    bound 0.0532    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] 
split level 1: [/input-12, 83] 
split level 2: [/input-12, 34] 
split level 3: [/input-12, 18] 
split level 4: [/input-12, 85] 
split level 5: [/input-12, 6] 
split level 6: [/input-12, 7] 
split level 7: [/input-12, 72] 
split level 8: [/input-12, 31] 
split level 9: [/input-12, 49] 
split level 10: [/input-12, 4] 
split level 11: [/input-12, 57] 
split level 12: [/input-8, 1098] 
split level 13: [/input-12, 92] 
split level 14: [/input-12, 53] 
split level 15: [/input-12, 71] 
split level 16: [/input-8, 1683] 
split level 17: [/input-8, 395] 
split level 18: [/input-8, 1691] 
split level 19: [/input-8, 416] 
split level 20: [/input-8, 219] 
split level 21: [/input-8, 212] 
split level 22: [/input-8, 1698] 
split level 23: [/input-8, 227] 
split level 24: [/input-8, 394] 
split level 25: [/input-8, 406] 
split level 26: [/input-8, 132] 
split level 27: [/input-8, 417] 
split level 28: [/input-8, 714] 
split level 29: [/input-8, 723] 
split level 30: [/input-8, 211] 
split level 31: [/input-8, 629] 
split level 32: [/input-8, 425] 
split level 33: [/input-8, 393] 
split level 34: [/input-8, 1673] 
split level 35: [/input, 3099] 
split level 36: [/input-8, 419] 
split level 37: [/input-8, 1665] 
split level 38: [/input-8, 1323] 
split level 39: [/input-8, 1692] 
split level 40: [/input-12, 20] 
split level 41: [/input-8, 78] 
split level 42: [/input-8, 1666] 
split level 43: [/input-8, 61] 
split level 44: [/input-8, 1276] 
split level 45: [/input-8, 716] 
split level 46: [/input-8, 613] 
split level 47: [/input-8, 627] 
split level 48: [/input-8, 1697] 
split level 49: [/input-8, 1946] 
split level 50: [/input-8, 142] 
split level 51: [/input-8, 1576] 
split level 52: [/input-8, 2034] 
split level 53: [/input, 1416] 
split level 54: [/input, 1374] 
split level 55: [/input-8, 2028] 
split level 56: [/input, 1448] 
split level 57: [/input-8, 1730] 
split level 58: [/input-8, 1982] 
split level 59: [/input-8, 434] 
split level 60: [/input-8, 48] 
split level 61: [/input-8, 129] 
split level 62: [/input-8, 1084] 
split level 63: [/input-8, 1736] 
split level 64: [/input, 1879] 
split level 65: [/input-8, 1273] 
split level 66: [/input-8, 844] 
split level 67: [/input-8, 57] 
split level 68: [/input, 1400] 
split level 69: [/input-8, 1322] 
split level 70: [/input, 130] 
split level 71: [/input-8, 218] 
split level 72: [/input-8, 407] 
split level 73: [/input, 2269] 
split level 74: [/input, 1410] 
split level 75: [/input, 2622] 
split level 76: [/input-8, 1987] 
split level 77: [/input, 2796] 
split level 78: [/input-8, 1708] 
split level 79: [/input-8, 1157] 
split level 80: [/input-8, 456] 
split level 81: [/input-8, 1082] 
split level 82: [/input, 1864] 
split level 83: [/input-8, 1088] 
split level 84: [/input-8, 1159] 
split level 85: [/input-8, 398] 
split level 86: [/input, 2674] 
split level 87: [/input, 812] 
split level 88: [/input, 2670] 
split level 89: [/input, 421] 
split level 90: [/input, 2587] 
split level 91: [/input, 2952] 
split level 92: [/input, 1878] 
split level 93: [/input, 34] 
split level 94: [/input, 1563] 
split level 95: [/input-8, 1081] 
split level 96: [/input, 2638] 
split level 97: [/input, 1942] 
split level 98: [/input, 2779] 
split level 99: [/input, 1898] 
split level 100: [/input-8, 1275] 
split level 101: [/input, 2218] 
split level 102: [/input, 2689] 
split level 103: [/input, 2184] 
split level 104: [/input-8, 1759] 
split level 105: [/input, 136] 
split level 106: [/input, 788] 
split level 107: [/input, 1438] 
split level 108: [/input, 813] 
split level 109: [/input, 2750] 
split level 110: [/input, 119] 
split level 111: [/input, 3230] 
split level 112: [/input, 2685] 
split level 113: [/input, 1508] 
split level 114: [/input-8, 267] 
split level 115: [/input, 2697] 
split level 116: [/input-8, 229] 
split level 117: [/input-8, 424] 
split level 118: [/input, 152] 
split level 119: [/input, 221] 
split level 120: [/input, 2778] 
split level 121: [/input-8, 2038] 
split level 122: [/input, 1507] 
split level 123: [/input, 2871] 
split level 124: [/input, 1422] 
split level 125: [/input, 1450] 
split level 126: [/input, 2777] 
split level 127: [/input, 619] 
split level 128: [/input, 1064] 
split level 129: [/input, 2906] 
split level 130: [/input, 2797] 
split level 131: [/input, 2540] 
split level 132: [/input, 228] 
split level 133: [/input-8, 808] 
split level 134: [/input, 1164] 
split level 135: [/input, 2932] 
split level 136: [/input-8, 204] 
split level 137: [/input, 134] 
split level 138: [/input, 2794] 
split level 139: [/input, 786] 
split level 140: [/input, 220] 
split level 141: [/input, 2746] 
split level 142: [/input, 790] 
split level 143: [/input, 3527] 
split level 144: [/input, 2232] 
split level 145: [/input, 153] 
split level 146: [/input, 2980] 
split level 147: [/input, 2732] 
split level 148: [/input-8, 1716] 
split level 149: [/input, 1130] 
split level 150: [/input, 1894] 
split level 151: [/input, 2765] 
split level 152: [/input, 1469] 
split level 153: [/input, 1925] 
split level 154: [/input, 1882] 
split level 155: [/input, 216] 
split level 156: [/input, 1483] 
split level 157: [/input, 1862] 
split level 158: [/input, 2456] 
split level 159: [/input, 987] 
split level 160: [/input, 2747] 
split level 161: [/input, 2763] 
split level 162: [/input, 237] 
split level 163: [/input, 3149] 
split level 164: [/input, 2264] 
split level 165: [/input-8, 481] 
split level 166: [/input-8, 143] 
split level 167: [/input, 3973] 
split level 168: [/input, 2715] 
split level 169: [/input-8, 612] 
split level 170: [/input, 2251] 
split level 171: [/input, 893] 
split level 172: [/input, 305] 
split level 173: [/input, 2760] 
split level 174: [/input, 2705] 
split level 175: [/input, 203] 
split level 176: [/input, 2798] 
split level 177: [/input, 1146] 
split level 178: [/input, 177] 
split level 179: [/input, 1899] 
split level 180: [/input, 238] 
split level 181: [/input, 2698] 
split level 182: [/input, 148] 
split level 183: [/input, 2776] 
split level 184: [/input, 179] 
split level 185: [/input, 2234] 
split level 186: [/input, 2781] 
split level 187: [/input-8, 1953] 
split level 188: [/input-8, 368] 
split level 189: [/input, 1846] 
split level 190: [/input, 37] 
split level 191: [/input, 3013] 
split level 192: [/input, 2266] 
split level 193: [/input, 142] 
split level 194: [/input-8, 1662] 
split level 195: [/input, 49] 
split level 196: [/input, 1470] 
split level 197: [/input, 1490] 
split level 198: [/input-8, 1344] 
split level 199: [/input, 1148] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12313389778137207
10 lb beta sum: 0.0, worst -0.12313616275787354
Time: prepare 0.0114    bound 0.0989    transfer 0.0011    finalize 0.0025    func 0.1165    
Accumulated time: func 0.1702    prepare 0.0214    bound 0.1521    transfer 0.0013    finalize 0.0026    
all_split False
======================Cut inference begins======================
max lb tensor(-0.03541493) min lb tensor(-0.12313390)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.00991511344909668 
BICCOS Cumulative time: 0.00991511344909668
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11944 (1), -0.11921 (1), -0.11918 (1), -0.11911 (1), -0.11884 (1), -0.11875 (1), -0.11855 (1), -0.11833 (1), -0.11830 (1), -0.11821 (1), -0.11820 (1), -0.11776 (1), -0.11734 (1), -0.11667 (1), -0.11663 (1), -0.11643 (1), -0.11611 (1), -0.11565 (1), -0.11554 (1), -0.11544 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5231    set_bounds 0.0084    solve 0.1166    add 0.0682    
Accumulated time: pickout 0.0003    decision 0.5231    set_bounds 0.0084    solve 0.1166    add 0.0682    
Current (lb-rhs): -0.11944377422332764
50 domains visited
Cumulative time: 0.7848162651062012

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 83] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] 
split level 1: [/input-12, 83] [/input-12, 83] [/input-12, 85] [/input-12, 85] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] 
split level 2: [/input-12, 6] [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
split level 3: [/input-8, 1698] [/input-12, 6] [/input-12, 72] [/input-12, 72] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11155039072036743
10 lb beta sum: 0.0, worst -0.11152827739715576
Time: prepare 0.0122    bound 0.0976    transfer 0.0012    finalize 0.0022    func 0.1156    
Accumulated time: func 0.2858    prepare 0.0338    bound 0.2497    transfer 0.0024    finalize 0.0048    
all_split False
======================Cut inference begins======================
max lb tensor(0.09705925) min lb tensor(-0.11147237)
Number of Verified Splits: 7 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.012845516204833984 
BICCOS Cumulative time: 0.022760629653930664
Preprocessing time: 0.011592864990234375 Inference time: 0.0003361701965332031 Add cuts time: 0.0001087188720703125 Cut analysis time: 0.0008077621459960938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05433 (2), -0.05409 (2), -0.05386 (2), -0.05310 (2), -0.05260 (2), -0.05236 (2), -0.05200 (2), -0.05192 (2), -0.05187 (2), -0.05186 (2), -0.05166 (2), -0.05142 (2), -0.05116 (2), -0.05093 (2), -0.05079 (2), -0.05075 (2), -0.05031 (2), -0.05031 (2), -0.05022 (2), -0.05003 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0198    set_bounds 0.0134    solve 0.1157    add 0.0766    
Accumulated time: pickout 0.0013    decision 0.5428    set_bounds 0.0218    solve 0.2323    add 0.1448    
Current (lb-rhs): -0.05432772636413574
100 domains visited
Cumulative time: 1.0242516994476318

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-12, 36] [/input-12, 83] [/input-12, 36] [/input-12, 83] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 83] [/input-12, 85] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] 
split level 2: [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 6] [/input-12, 85] [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 85] 
split level 3: [/input-12, 72] [/input-12, 72] [/input-8, 1698] [/input-12, 72] [/input-12, 72] [/input-8, 1698] [/input-8, 1698] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04599034786224365
10 lb beta sum: 0.035417404025793076, worst -0.07467643916606903
Time: prepare 0.0066    bound 0.1365    transfer 0.0011    finalize 0.0020    func 0.1494    
Accumulated time: func 0.4352    prepare 0.0406    bound 0.3862    transfer 0.0035    finalize 0.0068    
all_split False
======================Cut inference begins======================
max lb tensor(0.03656542) min lb tensor(-0.04321072)
Number of Verified Splits: 126 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.02007579803466797 
BICCOS Cumulative time: 0.04283642768859863
Preprocessing time: 0.011522054672241211 Inference time: 0.006177186965942383 Add cuts time: 0.002009868621826172 Cut analysis time: 0.0003666877746582031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01670 (3), -0.01597 (3), -0.01594 (3), -0.01510 (3), -0.01429 (3), -0.01412 (3), -0.01315 (3), -0.01210 (3), -0.01203 (3), -0.01201 (3), -0.01175 (3), -0.01146 (3), -0.01090 (3), -0.00996 (3), -0.00944 (3), -0.00904 (3), -0.00844 (3), -0.00808 (3), -0.00749 (3), -0.00747 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0196    set_bounds 0.0151    solve 0.1494    add 0.0902    
Accumulated time: pickout 0.0022    decision 0.5624    set_bounds 0.0369    solve 0.3817    add 0.2349    
Current (lb-rhs): -0.016696743667125702
150 domains visited
Cumulative time: 1.3197286128997803

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 36] [/input-12, 83] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 83] 
split level 1: [/input-12, 34] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 34] [/input-12, 85] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 2: [/input-12, 85] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 85] [/input-12, 72] [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 85] 
split level 3: [/input-12, 6] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-12, 72] [/input-8, 1698] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01651298999786377
10 lb beta sum: 0.0873950719833374, worst -0.04624369367957115
Time: prepare 0.0065    bound 0.1361    transfer 0.0026    finalize 0.0021    func 0.1498    
Accumulated time: func 0.5849    prepare 0.0473    bound 0.5223    transfer 0.0061    finalize 0.0089    
all_split False
======================Cut inference begins======================
max lb tensor(0.04312098) min lb tensor(-0.01008235)
Number of Verified Splits: 364 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 8
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.03678774833679199 
BICCOS Cumulative time: 0.07962417602539062
Preprocessing time: 0.011409282684326172 Inference time: 0.01833629608154297 Add cuts time: 0.006606340408325195 Cut analysis time: 0.00043582916259765625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01008 (4), -0.00686 (4), -0.00680 (4), -0.00456 (4), -0.00383 (4), -0.00365 (4), -0.00301 (4), -0.00281 (4), -0.00271 (4), -0.00266 (4), -0.00237 (4), -0.00196 (4), -0.00149 (4), -0.00117 (4), 
Length of domains: 14
Time: pickout 0.0009    decision 0.0195    set_bounds 0.0150    solve 0.1499    add 0.2441    
Accumulated time: pickout 0.0032    decision 0.5819    set_bounds 0.0519    solve 0.5316    add 0.4791    
Current (lb-rhs): -0.01008235476911068
164 domains visited
Cumulative time: 1.7862231731414795

Shallow-BaB round 5
batch: 14
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 34] [/input-12, 36] [/input-12, 36] [/input-12, 34] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] 
split level 1: [/input-12, 34] [/input-12, 18] [/input-12, 34] [/input-12, 34] [/input-12, 18] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 2: [/input-12, 18] [/input-12, 85] [/input-12, 18] [/input-12, 18] [/input-12, 85] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] 
split level 3: [/input-12, 85] [/input-12, 7] [/input-12, 6] [/input-12, 85] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 85] [/input-12, 6] [/input-12, 85] 
split level 4: [/input-12, 7] [/input-12, 72] [/input-12, 7] [/input-12, 7] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
split level 5: [/input-12, 4] [/input-12, 57] [/input-12, 4] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 4] [/input-12, 4] [/input-12, 57] 
split level 6: [/input-12, 57] [/input-12, 92] [/input-12, 57] [/input-12, 53] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 57] [/input-12, 57] [/input-12, 92] 
split level 7: [/input-12, 92] [/input-12, 53] [/input-12, 92] [/input-12, 92] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 8: [/input-12, 53] [/input-12, 71] [/input-12, 53] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 92] [/input-12, 92] [/input-12, 71] 
split level 9: [/input-12, 71] [/input-8, 417] [/input-12, 71] [/input-8, 417] [/input-8, 417] [/input-8, 417] [/input-8, 417] [/input-12, 71] [/input-12, 71] [/input-8, 417] 
split level 10: [/input-8, 417] [/input-8, 425] [/input-8, 417] [/input-8, 425] [/input-8, 723] [/input-8, 425] [/input-8, 723] [/input-8, 417] [/input-8, 417] [/input-8, 723] 
split level 11: [/input-8, 425] [/input-8, 723] [/input-8, 1697] [/input-8, 723] [/input-8, 425] [/input-8, 723] [/input-8, 425] [/input-8, 425] [/input-8, 425] [/input-8, 425] 
split level 12: [/input-8, 1697] [/input-8, 1697] [/input-8, 1946] [/input-8, 419] [/input-8, 1697] [/input-8, 1697] [/input-8, 1697] [/input-8, 1697] [/input-8, 1946] [/input-8, 1697] 
split level 13: [/input-8, 1946] [/input-8, 1946] [/input, 2662] [/input-8, 1697] [/input-8, 1946] [/input-8, 1946] [/input-8, 1946] [/input-8, 1946] [/input, 2662] [/input-8, 1946] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.013697266578674316
10 lb beta sum: 0.3331885039806366, worst -0.03838863968849182
Time: prepare 0.0074    bound 0.1261    transfer 0.0011    finalize 0.0025    func 0.1397    
Accumulated time: func 0.7246    prepare 0.0555    bound 0.6484    transfer 0.0072    finalize 0.0114    
all_split False
======================Cut inference begins======================
max lb tensor(0.03826690) min lb tensor(-0.00613926)
Number of Verified Splits: 309 of 392
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.03831005096435547 
BICCOS Cumulative time: 0.1179342269897461
Preprocessing time: 0.011276960372924805 Inference time: 0.01584148406982422 Add cuts time: 0.01075291633605957 Cut analysis time: 0.000438690185546875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0007    decision 0.0472    set_bounds 0.0143    solve 0.1398    add 0.0268    
Accumulated time: pickout 0.0039    decision 0.6290    set_bounds 0.0662    solve 0.6714    add 0.5058    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
164 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 83,  6, 36]), tensor([-1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.58732407e-43, 6.41016215e-02, 2.07255129e-02, 3.79332379e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 83,  6, 36, 34]), tensor([-1., -1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([3.58732407e-43, 6.41016215e-02, 2.07255129e-02, 1.32774804e-02,
        6.73808297e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 83,  6, 36, 34]), tensor([-1., -1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([3.58732407e-43, 6.41016215e-02, 2.07255129e-02, 1.32774804e-02,
        1.57335866e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 83,  6, 36]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.58732407e-43, 6.41016215e-02, 2.06919611e-02, 3.71195078e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 83,  6, 36, 34]), tensor([-1., -1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([3.58732407e-43, 6.41016215e-02, 2.06919611e-02, 1.44808330e-02,
        5.90033969e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 83,  6, 36, 34]), tensor([-1., -1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([3.58732407e-43, 6.41016215e-02, 2.06919611e-02, 1.44808330e-02,
        1.45392884e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 83]), tensor([-1.,  1.]), tensor([0, 0]), tensor([3.58732407e-43, 8.42569955e-03]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([4]), tensor([1.]), tensor([0]), tensor([3.58732407e-43]), tensor([0]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11996763944625854
10 lb beta sum: 0.4488208293914795, worst -0.11925604939460754
Time: prepare 0.0004    bound 0.1282    transfer 0.0001    finalize 0.0002    func 0.1290    
Accumulated time: func 0.8536    prepare 0.0559    bound 0.7766    transfer 0.0073    finalize 0.0116    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 36] 
split level 1: [/input-12, 34] [/input-12, 83] 
split level 2: [/input-12, 18] [/input-12, 34] 
split level 3: [/input-12, 85] [/input-12, 18] 
split level 4: [/input-12, 6] [/input-12, 85] 
split level 5: [/input-12, 72] [/input-12, 6] 
split level 6: [/input-12, 57] [/input-12, 72] 
cut re-enabled after branching node selection
0 lb beta sum: 0.469046950340271, worst -0.053055569529533386
10 lb beta sum: 0.48231300711631775, worst -0.05288092792034149
Time: prepare 0.0097    bound 0.1307    transfer 0.0010    finalize 0.0015    func 0.1446    
Accumulated time: func 0.9983    prepare 0.0660    bound 0.9073    transfer 0.0084    finalize 0.0131    
all_split False
======================Cut inference begins======================
max lb tensor(0.04341854) min lb tensor(-0.05281465)
Number of Verified Splits: 201 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.00031185150146484375 
BICCOS Cumulative time: 0.11824607849121094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05281 (7), -0.05256 (7), -0.05127 (7), -0.04999 (7), -0.04458 (7), -0.04454 (7), -0.04322 (7), -0.04169 (7), -0.03085 (7), -0.02794 (7), -0.02525 (7), -0.02505 (7), -0.02493 (7), -0.02438 (7), -0.02405 (7), -0.02381 (7), -0.02360 (7), -0.02337 (7), -0.02250 (7), -0.02179 (7), 
Length of domains: 55
Time: pickout 0.0005    decision 0.0200    set_bounds 0.0183    solve 0.1447    add 0.0011    
Accumulated time: pickout 0.0043    decision 0.6490    set_bounds 0.0845    solve 0.8161    add 0.5069    
Current (lb-rhs): -0.05281464755535126
219 domains visited
Cumulative time: 2.3860654830932617

BaB round 2
batch: 55
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
split level 1: [/input-12, 57] [/input-12, 53] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 53] [/input-12, 57] [/input-12, 57] [/input-12, 53] [/input-12, 57] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47362980246543884, worst -0.042067453265190125
10 lb beta sum: 0.47362980246543884, worst -0.04195199906826019
Time: prepare 0.0084    bound 0.1339    transfer 0.0010    finalize 0.0012    func 0.1479    
Accumulated time: func 1.1462    prepare 0.0745    bound 1.0412    transfer 0.0094    finalize 0.0143    
all_split False
======================Cut inference begins======================
max lb tensor(0.02385804) min lb tensor(-0.04190557)
Number of Verified Splits: 137 of 220
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0004553794860839844 
BICCOS Cumulative time: 0.11870145797729492
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04191 (9), -0.04179 (9), -0.04072 (9), -0.04028 (9), -0.04013 (9), -0.03941 (9), -0.03904 (9), -0.03816 (9), -0.03378 (9), -0.03376 (9), -0.03206 (9), -0.03121 (9), -0.03080 (9), -0.03064 (9), -0.03061 (9), -0.02901 (9), -0.01965 (9), -0.01825 (9), -0.01667 (9), -0.01608 (9), 
Length of domains: 83
Time: pickout 0.0012    decision 0.0159    set_bounds 0.0097    solve 0.1481    add 0.0011    
Accumulated time: pickout 0.0055    decision 0.6650    set_bounds 0.0942    solve 0.9642    add 0.5080    
Current (lb-rhs): -0.041905567049980164
302 domains visited
Cumulative time: 2.5631043910980225

BaB round 3
batch: 83
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 53] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 53] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 71] [/input-12, 53] [/input-12, 53] [/input-12, 92] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 92] [/input-12, 53] [/input-12, 71] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4713796079158783, worst -0.03357212245464325
10 lb beta sum: 0.4713796079158783, worst -0.03351043164730072
Time: prepare 0.0128    bound 0.1357    transfer 0.0009    finalize 0.0019    func 0.1534    
Accumulated time: func 1.2996    prepare 0.0875    bound 1.1769    transfer 0.0103    finalize 0.0162    
all_split False
======================Cut inference begins======================
max lb tensor(0.01352663) min lb tensor(-0.03349118)
Number of Verified Splits: 205 of 332
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0003142356872558594 
BICCOS Cumulative time: 0.11901569366455078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03349 (11), -0.03336 (11), -0.03239 (11), -0.03195 (11), -0.03156 (11), -0.03090 (11), -0.03057 (11), -0.03028 (11), -0.02994 (11), -0.02975 (11), -0.02942 (11), -0.02911 (11), -0.02876 (11), -0.02873 (11), -0.02809 (11), -0.02765 (11), -0.02562 (11), -0.02538 (11), -0.02533 (11), -0.02528 (11), 
Length of domains: 127
Time: pickout 0.0014    decision 0.0185    set_bounds 0.0149    solve 0.1535    add 0.0013    
Accumulated time: pickout 0.0069    decision 0.6834    set_bounds 0.1090    solve 1.1177    add 0.5093    
Current (lb-rhs): -0.03349117934703827
429 domains visited
Cumulative time: 2.753753900527954

BaB round 4
batch: 127
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 53] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-8, 1691] [/input-12, 71] [/input-12, 53] [/input-8, 1691] [/input-12, 71] [/input-8, 1691] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47182798385620117, worst -0.028694316744804382
10 lb beta sum: 0.47182798385620117, worst -0.028655335307121277
Time: prepare 0.0102    bound 0.1374    transfer 0.0007    finalize 0.0017    func 0.1518    
Accumulated time: func 1.4514    prepare 0.0979    bound 1.3143    transfer 0.0110    finalize 0.0179    
all_split False
======================Cut inference begins======================
max lb tensor(0.00617541) min lb tensor(-0.02864324)
Number of Verified Splits: 82 of 254
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.00033092498779296875 
BICCOS Cumulative time: 0.11934661865234375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02864 (12), -0.02840 (12), -0.02752 (12), -0.02737 (12), -0.02729 (12), -0.02703 (12), -0.02682 (12), -0.02616 (12), -0.02612 (12), -0.02588 (12), -0.02584 (12), -0.02533 (12), -0.02499 (12), -0.02498 (12), -0.02495 (12), -0.02458 (12), -0.02442 (12), -0.02426 (12), -0.02416 (12), -0.02414 (12), 
Length of domains: 172
Time: pickout 0.0018    decision 0.0178    set_bounds 0.0090    solve 0.1518    add 0.0014    
Accumulated time: pickout 0.0087    decision 0.7013    set_bounds 0.1181    solve 1.2695    add 0.5107    
Current (lb-rhs): -0.028643235564231873
601 domains visited
Cumulative time: 2.9365501403808594

BaB round 5
batch: 172
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1698] [/input-8, 1691] [/input-8, 1698] [/input-8, 1691] [/input-8, 1691] [/input-8, 1698] [/input-8, 1691] [/input-8, 1698] [/input-8, 1691] [/input-8, 1698] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4725019335746765, worst -0.026950284838676453
10 lb beta sum: 0.4725019335746765, worst -0.026912972331047058
Time: prepare 0.0149    bound 0.1379    transfer 0.0010    finalize 0.0019    func 0.1579    
Accumulated time: func 1.6093    prepare 0.1130    bound 1.4523    transfer 0.0120    finalize 0.0198    
all_split False
======================Cut inference begins======================
max lb tensor(0.00502957) min lb tensor(-0.02690493)
Number of Verified Splits: 79 of 344
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0003192424774169922 
BICCOS Cumulative time: 0.11966586112976074
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02690 (13), -0.02649 (13), -0.02584 (13), -0.02559 (13), -0.02541 (13), -0.02521 (13), -0.02509 (13), -0.02449 (13), -0.02445 (13), -0.02426 (13), -0.02402 (13), -0.02389 (13), -0.02362 (13), -0.02336 (13), -0.02331 (13), -0.02319 (13), -0.02317 (13), -0.02315 (13), -0.02309 (13), -0.02303 (13), 
Length of domains: 265
Time: pickout 0.0021    decision 0.0198    set_bounds 0.0090    solve 0.1580    add 0.0038    
Accumulated time: pickout 0.0108    decision 0.7211    set_bounds 0.1271    solve 1.4276    add 0.5146    
Current (lb-rhs): -0.02690492570400238
866 domains visited
Cumulative time: 3.1302926540374756

BaB round 6
batch: 265
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 723] [/input-8, 417] [/input-8, 419] [/input-8, 417] [/input-8, 1698] [/input-8, 417] [/input-8, 723] [/input-8, 1698] [/input-8, 419] [/input-8, 1698] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4738915264606476, worst -0.02562318742275238
10 lb beta sum: 0.4738915264606476, worst -0.025541231036186218
Time: prepare 0.0229    bound 0.1335    transfer 0.0020    finalize 0.0033    func 0.1662    
Accumulated time: func 1.7755    prepare 0.1361    bound 1.5858    transfer 0.0140    finalize 0.0231    
all_split False
======================Cut inference begins======================
max lb tensor(0.00376786) min lb tensor(-0.02550463)
Number of Verified Splits: 77 of 530
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0004744529724121094 
BICCOS Cumulative time: 0.12014031410217285
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02550 (14), -0.02504 (14), -0.02457 (14), -0.02416 (14), -0.02390 (14), -0.02386 (14), -0.02375 (14), -0.02328 (14), -0.02323 (14), -0.02318 (14), -0.02286 (14), -0.02264 (14), -0.02257 (14), -0.02242 (14), -0.02241 (14), -0.02229 (14), -0.02208 (14), -0.02204 (14), -0.02203 (14), -0.02191 (14), 
Length of domains: 453
Time: pickout 0.0034    decision 0.0233    set_bounds 0.0214    solve 0.1664    add 0.0026    
Accumulated time: pickout 0.0142    decision 0.7444    set_bounds 0.1485    solve 1.5940    add 0.5172    
Current (lb-rhs): -0.02550463378429413
1319 domains visited
Cumulative time: 3.3486969470977783

BaB round 7
batch: 453
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1698] [/input-8, 723] [/input-8, 417] [/input-8, 1698] [/input-8, 417] [/input-8, 417] [/input-8, 417] [/input-8, 417] [/input-8, 417] [/input-8, 723] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47452935576438904, worst -0.02427409589290619
10 lb beta sum: 0.47452935576438904, worst -0.024249836802482605
Time: prepare 0.0388    bound 0.1410    transfer 0.0032    finalize 0.0043    func 0.1932    
Accumulated time: func 1.9687    prepare 0.1752    bound 1.7267    transfer 0.0173    finalize 0.0274    
all_split False
======================Cut inference begins======================
max lb tensor(0.00350888) min lb tensor(-0.02423941)
Number of Verified Splits: 75 of 906
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.00035381317138671875 
BICCOS Cumulative time: 0.12049412727355957
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02424 (15), -0.02365 (15), -0.02331 (15), -0.02297 (15), -0.02279 (15), -0.02242 (15), -0.02239 (15), -0.02235 (15), -0.02231 (15), -0.02204 (15), -0.02180 (15), -0.02179 (15), -0.02159 (15), -0.02158 (15), -0.02127 (15), -0.02114 (15), -0.02113 (15), -0.02109 (15), -0.02108 (15), -0.02104 (15), 
Length of domains: 831
Time: pickout 0.0070    decision 0.0354    set_bounds 0.0368    solve 0.1935    add 0.0079    
Accumulated time: pickout 0.0212    decision 0.7798    set_bounds 0.1853    solve 1.7875    add 0.5251    
Current (lb-rhs): -0.02423940598964691
2150 domains visited
Cumulative time: 3.6307525634765625

BaB round 8
batch: 831
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 723] [/input-8, 419] [/input-8, 419] [/input-8, 419] [/input-8, 1673] [/input-8, 723] [/input-8, 1692] [/input-8, 1692] [/input-8, 1698] [/input-8, 1673] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.02253882586956024
10 lb beta sum: 0.47465312480926514, worst -0.022520408034324646
Time: prepare 0.0719    bound 0.1587    transfer 0.0066    finalize 0.0073    func 0.2552    
Accumulated time: func 2.2240    prepare 0.2473    bound 1.8854    transfer 0.0238    finalize 0.0347    
all_split False
======================Cut inference begins======================
max lb tensor(0.00317951) min lb tensor(-0.02250747)
Number of Verified Splits: 181 of 1662
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0003771781921386719 
BICCOS Cumulative time: 0.12087130546569824
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02251 (16), -0.02180 (16), -0.02164 (16), -0.02160 (16), -0.02130 (16), -0.02110 (16), -0.02097 (16), -0.02095 (16), -0.02088 (16), -0.02067 (16), -0.02064 (16), -0.02058 (16), -0.02057 (16), -0.02034 (16), -0.02031 (16), -0.02020 (16), -0.02003 (16), -0.02003 (16), -0.01999 (16), -0.01989 (16), 
Length of domains: 1481
Time: pickout 0.0126    decision 0.0565    set_bounds 0.0668    solve 0.2556    add 0.0105    
Accumulated time: pickout 0.0338    decision 0.8363    set_bounds 0.2521    solve 2.0431    add 0.5356    
Current (lb-rhs): -0.022507473826408386
3631 domains visited
Cumulative time: 4.037118434906006

BaB round 9
batch: 1481
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 419] [/input-8, 1698] [/input-8, 723] [/input-8, 723] [/input-8, 723] [/input-8, 1692] [/input-8, 419] [/input-8, 419] [/input-8, 1673] [/input-8, 1698] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4746531546115875, worst -0.02166055142879486
10 lb beta sum: 0.4746531546115875, worst -0.021646305918693542
Time: prepare 0.1272    bound 0.2243    transfer 0.0150    finalize 0.0146    func 0.3999    
Accumulated time: func 2.6238    prepare 0.3748    bound 2.1097    transfer 0.0388    finalize 0.0493    
all_split False
======================Cut inference begins======================
max lb tensor(0.00548406) min lb tensor(-0.02163719)
Number of Verified Splits: 426 of 2962
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0003898143768310547 
BICCOS Cumulative time: 0.1212611198425293
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02164 (17), -0.02078 (17), -0.02070 (17), -0.02023 (17), -0.02010 (17), -0.02009 (17), -0.02003 (17), -0.01975 (17), -0.01970 (17), -0.01956 (17), -0.01954 (17), -0.01952 (17), -0.01947 (17), -0.01944 (17), -0.01928 (17), -0.01923 (17), -0.01911 (17), -0.01909 (17), -0.01900 (17), -0.01898 (17), 
Length of domains: 2536
Time: pickout 0.0222    decision 0.2533    set_bounds 0.1190    solve 0.4009    add 0.0184    
Accumulated time: pickout 0.0560    decision 1.0896    set_bounds 0.3711    solve 2.4440    add 0.5540    
Current (lb-rhs): -0.021637186408042908
6167 domains visited
Cumulative time: 4.856149196624756

BaB round 10
batch: 2536
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 212] [/input-8, 1673] [/input-8, 212] [/input-8, 1323] [/input-8, 212] [/input-8, 212] [/input-8, 212] [/input-8, 1323] [/input-8, 212] [/input-8, 212] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.020709261298179626
10 lb beta sum: 0.47465312480926514, worst -0.02069394290447235
Time: prepare 0.2211    bound 0.3369    transfer 0.0255    finalize 0.0237    func 0.6404    
Accumulated time: func 3.2642    prepare 0.5962    bound 2.4466    transfer 0.0642    finalize 0.0729    
all_split False
======================Cut inference begins======================
max lb tensor(0.00555690) min lb tensor(-0.02068417)
Number of Verified Splits: 974 of 5072
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0006456375122070312 
BICCOS Cumulative time: 0.12190675735473633
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02068 (18), -0.01983 (18), -0.01972 (18), -0.01954 (18), -0.01930 (18), -0.01913 (18), -0.01879 (18), -0.01874 (18), -0.01869 (18), -0.01869 (18), -0.01842 (18), -0.01841 (18), -0.01833 (18), -0.01833 (18), -0.01814 (18), -0.01813 (18), -0.01805 (18), -0.01805 (18), -0.01803 (18), -0.01799 (18), 
Length of domains: 4098
Time: pickout 0.0335    decision 0.1470    set_bounds 0.3673    solve 0.6419    add 0.0274    
Accumulated time: pickout 0.0895    decision 1.2366    set_bounds 0.7383    solve 3.0859    add 0.5814    
Current (lb-rhs): -0.020684167742729187
10265 domains visited
Cumulative time: 6.083069324493408

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1665] [/input-8, 212] [/input-8, 425] [/input-8, 219] [/input-8, 1665] [/input-8, 1673] [/input-8, 1323] [/input-8, 219] [/input-8, 1665] [/input-8, 219] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.020063266158103943
10 lb beta sum: 0.47465312480926514, worst -0.020042583346366882
Time: prepare 0.3619    bound 0.4944    transfer 0.0455    finalize 0.0443    func 0.9993    
Accumulated time: func 4.2635    prepare 0.9584    bound 2.9411    transfer 0.1098    finalize 0.1172    
all_split False
======================Cut inference begins======================
max lb tensor(0.00657959) min lb tensor(-0.02003793)
Number of Verified Splits: 2336 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0004966259002685547 
BICCOS Cumulative time: 0.12240338325500488
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02004 (19), -0.01918 (19), -0.01906 (19), -0.01888 (19), -0.01864 (19), -0.01848 (19), -0.01814 (19), -0.01807 (19), -0.01803 (19), -0.01803 (19), -0.01778 (19), -0.01770 (19), -0.01760 (19), -0.01752 (19), -0.01746 (19), -0.01741 (19), -0.01740 (19), -0.01736 (19), -0.01735 (19), -0.01732 (19), 
Length of domains: 5858
Time: pickout 0.0553    decision 0.2287    set_bounds 0.5111    solve 1.0016    add 0.0384    
Accumulated time: pickout 0.1448    decision 1.4653    set_bounds 1.2494    solve 4.0875    add 0.6198    
Current (lb-rhs): -0.020037934184074402
16121 domains visited
current_vram/total_varm: 9.7GB/99.9GB, batch_size increase to 8192
Cumulative time: 7.9398791790008545

BaB round 12
batch: 5858
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 419] [/input-8, 1673] [/input-8, 1673] [/input-8, 219] [/input-8, 1323] [/input-8, 1673] [/input-8, 219] [/input-8, 1665] [/input-8, 1673] [/input-8, 1673] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4746531546115875, worst -0.018426641821861267
10 lb beta sum: 0.4746531546115875, worst -0.018400654196739197
Time: prepare 0.5137    bound 0.6820    transfer 0.0651    finalize 0.2505    func 1.5874    
Accumulated time: func 5.8510    prepare 1.4723    bound 3.6230    transfer 0.1749    finalize 0.3677    
all_split False
======================Cut inference begins======================
max lb tensor(0.00659661) min lb tensor(-0.01838176)
Number of Verified Splits: 3058 of 11716
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0006721019744873047 
BICCOS Cumulative time: 0.12307548522949219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01838 (20), -0.01811 (20), -0.01753 (20), -0.01743 (20), -0.01726 (20), -0.01722 (20), -0.01720 (20), -0.01705 (20), -0.01701 (20), -0.01694 (20), -0.01680 (20), -0.01680 (20), -0.01676 (20), -0.01664 (20), -0.01661 (20), -0.01658 (20), -0.01650 (20), -0.01643 (20), -0.01641 (20), -0.01638 (20), 
Length of domains: 8658
Time: pickout 0.1051    decision 0.3275    set_bounds 0.6898    solve 1.5901    add 0.0488    
Accumulated time: pickout 0.2499    decision 1.7928    set_bounds 1.9392    solve 5.6776    add 0.6686    
Current (lb-rhs): -0.018381759524345398
24779 domains visited
Cumulative time: 10.729103326797485

BaB round 13
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 212] [/input-8, 425] [/input-8, 219] [/input-8, 1665] [/input-8, 1665] [/input-8, 212] [/input-8, 1692] [/input-8, 219] [/input-8, 1665] [/input-8, 419] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.016658470034599304
10 lb beta sum: 0.47465312480926514, worst -0.01664869487285614
Time: prepare 0.7220    bound 0.9193    transfer 0.0921    finalize 0.0890    func 1.9301    
Accumulated time: func 7.7810    prepare 2.1946    bound 4.5423    transfer 0.2670    finalize 0.4567    
all_split False
======================Cut inference begins======================
max lb tensor(0.00739075) min lb tensor(-0.01664321)
Number of Verified Splits: 4668 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0008394718170166016 
BICCOS Cumulative time: 0.12391495704650879
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01664 (21), -0.01648 (21), -0.01638 (21), -0.01621 (21), -0.01611 (21), -0.01607 (21), -0.01593 (21), -0.01582 (21), -0.01580 (21), -0.01577 (21), -0.01566 (21), -0.01565 (21), -0.01565 (21), -0.01563 (21), -0.01558 (21), -0.01557 (21), -0.01556 (21), -0.01551 (21), -0.01547 (21), -0.01546 (21), 
Length of domains: 12182
Time: pickout 0.1180    decision 0.6976    set_bounds 0.9258    solve 1.9340    add 0.0473    
Accumulated time: pickout 0.3680    decision 2.4903    set_bounds 2.8651    solve 7.6116    add 0.7158    
Current (lb-rhs): -0.016643211245536804
36495 domains visited
current_vram/total_varm: 19.4GB/99.9GB, batch_size increase to 16384
Cumulative time: 14.496101379394531

BaB round 14
batch: 12182
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1692] [/input-8, 1665] [/input-8, 212] [/input-8, 212] [/input-8, 212] [/input-8, 212] [/input-8, 613] [/input-8, 212] [/input-8, 212] [/input-8, 212] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4746531546115875, worst -0.016031131148338318
10 lb beta sum: 0.4746531546115875, worst -0.016028448939323425
Time: prepare 1.0891    bound 1.3395    transfer 0.1396    finalize 0.3680    func 3.0967    
Accumulated time: func 10.8778    prepare 3.2841    bound 5.8819    transfer 0.4066    finalize 0.8247    
all_split False
======================Cut inference begins======================
max lb tensor(0.00712378) min lb tensor(-0.01602541)
Number of Verified Splits: 7617 of 24364
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0007565021514892578 
BICCOS Cumulative time: 0.12467145919799805
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01603 (22), -0.01586 (22), -0.01572 (22), -0.01559 (22), -0.01555 (22), -0.01549 (22), -0.01532 (22), -0.01527 (22), -0.01527 (22), -0.01520 (22), -0.01520 (22), -0.01517 (22), -0.01510 (22), -0.01508 (22), -0.01501 (22), -0.01501 (22), -0.01498 (22), -0.01493 (22), -0.01490 (22), -0.01489 (22), 
Length of domains: 16747
Time: pickout 0.2235    decision 0.9196    set_bounds 1.2918    solve 3.1016    add 0.0781    
Accumulated time: pickout 0.5915    decision 3.4099    set_bounds 4.1569    solve 10.7132    add 0.7939    
Current (lb-rhs): -0.01602540910243988
53242 domains visited
Cumulative time: 20.179242372512817

BaB round 15
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 714] [/input-8, 613] [/input-8, 1665] [/input-8, 716] [/input-8, 1323] [/input-8, 1323] [/input-8, 716] [/input-8, 613] [/input-8, 613] [/input-8, 219] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.015269085764884949
10 lb beta sum: 0.47465312480926514, worst -0.015258535742759705
Time: prepare 1.4895    bound 1.7681    transfer 0.1903    finalize 0.1998    func 3.8616    
Accumulated time: func 14.7394    prepare 4.7740    bound 7.6500    transfer 0.5969    finalize 1.0245    
all_split False
======================Cut inference begins======================
max lb tensor(0.00732155) min lb tensor(-0.01525240)
Number of Verified Splits: 10571 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0007867813110351562 
BICCOS Cumulative time: 0.1254582405090332
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01525 (23), -0.01508 (23), -0.01499 (23), -0.01495 (23), -0.01478 (23), -0.01476 (23), -0.01468 (23), -0.01460 (23), -0.01458 (23), -0.01447 (23), -0.01444 (23), -0.01437 (23), -0.01436 (23), -0.01425 (23), -0.01425 (23), -0.01424 (23), -0.01414 (23), -0.01409 (23), -0.01408 (23), -0.01403 (23), 
Length of domains: 22560
Time: pickout 0.2433    decision 1.6764    set_bounds 2.0833    solve 3.8682    add 0.0854    
Accumulated time: pickout 0.8348    decision 5.0863    set_bounds 6.2402    solve 14.5814    add 0.8793    
Current (lb-rhs): -0.01525239646434784
75439 domains visited
current_vram/total_varm: 36.1GB/99.9GB, batch_size increase to 32768
Cumulative time: 28.23711061477661

BaB round 16
batch: 22560
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 425] [/input-8, 1323] [/input-8, 425] [/input-8, 1665] [/input-8, 1665] [/input-8, 714] [/input-8, 1665] [/input-8, 1323] [/input-8, 1692] [/input-8, 1323] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465309500694275, worst -0.014774724841117859
10 lb beta sum: 0.47465309500694275, worst -0.014772757887840271
Time: prepare 2.0355    bound 2.4299    transfer 0.2566    finalize 0.2662    func 5.2821    
Accumulated time: func 20.0215    prepare 6.8099    bound 10.0799    transfer 0.8535    finalize 1.2907    
all_split False
======================Cut inference begins======================
max lb tensor(0.00722106) min lb tensor(-0.01477163)
Number of Verified Splits: 17163 of 45120
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0010042190551757812 
BICCOS Cumulative time: 0.12646245956420898
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01477 (24), -0.01460 (24), -0.01449 (24), -0.01432 (24), -0.01399 (24), -0.01396 (24), -0.01395 (24), -0.01388 (24), -0.01377 (24), -0.01376 (24), -0.01376 (24), -0.01368 (24), -0.01366 (24), -0.01361 (24), -0.01361 (24), -0.01351 (24), -0.01347 (24), -0.01346 (24), -0.01344 (24), -0.01339 (24), 
Length of domains: 27957
Time: pickout 0.4275    decision 2.5802    set_bounds 3.1269    solve 5.2913    add 0.1041    
Accumulated time: pickout 1.2623    decision 7.6665    set_bounds 9.3670    solve 19.8726    add 0.9834    
Current (lb-rhs): -0.014771625399589539
103396 domains visited
Cumulative time: 39.91552233695984

BaB round 17
batch: 27957
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 716] [/input-8, 714] [/input-8, 211] [/input-8, 1323] [/input-8, 714] [/input-8, 219] [/input-8, 1692] [/input-8, 716] [/input-8, 714] [/input-8, 211] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.013762220740318298
10 lb beta sum: 0.47465312480926514, worst -0.013756558299064636
Time: prepare 2.5468    bound 2.9891    transfer 0.3330    finalize 0.3566    func 6.5940    
Accumulated time: func 26.6155    prepare 9.3571    bound 13.0690    transfer 1.1864    finalize 1.6472    
all_split False
======================Cut inference begins======================
max lb tensor(0.00731356) min lb tensor(-0.01375179)
Number of Verified Splits: 21757 of 55914
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0011408329010009766 
BICCOS Cumulative time: 0.12760329246520996
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01375 (25), -0.01352 (25), -0.01347 (25), -0.01347 (25), -0.01342 (25), -0.01333 (25), -0.01327 (25), -0.01323 (25), -0.01319 (25), -0.01312 (25), -0.01304 (25), -0.01304 (25), -0.01299 (25), -0.01294 (25), -0.01289 (25), -0.01288 (25), -0.01283 (25), -0.01282 (25), -0.01272 (25), -0.01271 (25), 
Length of domains: 34157
Time: pickout 0.5471    decision 3.5828    set_bounds 3.4802    solve 7.1067    add 0.1373    
Accumulated time: pickout 1.8094    decision 11.2493    set_bounds 12.8472    solve 26.9793    add 1.1207    
Current (lb-rhs): -0.013751789927482605
137553 domains visited
Cumulative time: 54.968393087387085

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 211] [/input-8, 211] [/input-8, 613] [/input-8, 211] [/input-8, 211] [/input-8, 132] [/input-8, 211] [/input-8, 132] [/input-8, 211] [/input-8, 211] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465306520462036, worst -0.01326654851436615
10 lb beta sum: 0.47465306520462036, worst -0.0132627934217453
Time: prepare 2.9990    bound 8.6709    transfer 0.4370    finalize 0.4726    func 13.0135    
Accumulated time: func 39.6290    prepare 12.3566    bound 21.7399    transfer 1.6234    finalize 2.1199    
all_split False
======================Cut inference begins======================
max lb tensor(0.01032390) min lb tensor(-0.01326172)
Number of Verified Splits: 25506 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0012297630310058594 
BICCOS Cumulative time: 0.12883305549621582
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01326 (26), -0.01304 (26), -0.01298 (26), -0.01283 (26), -0.01275 (26), -0.01263 (26), -0.01255 (26), -0.01246 (26), -0.01245 (26), -0.01242 (25), -0.01234 (26), -0.01233 (26), -0.01224 (26), -0.01222 (26), -0.01219 (26), -0.01217 (26), -0.01214 (26), -0.01210 (26), -0.01208 (26), -0.01203 (25), 
Length of domains: 41419
Time: pickout 0.5184    decision 3.3415    set_bounds 4.5504    solve 13.6510    add 0.1372    
Accumulated time: pickout 2.3278    decision 14.5908    set_bounds 17.3976    solve 40.6303    add 1.2579    
Current (lb-rhs): -0.013261720538139343
177583 domains visited
Cumulative time: 77.45792174339294

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 211] [/input-8, 714] [/input-8, 716] [/input-8, 211] [/input, 1416] [/input-8, 627] [/input-8, 211] [/input-8, 211] [/input, 1416] [/input-8, 714] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465306520462036, worst -0.01218472421169281
10 lb beta sum: 0.47465306520462036, worst -0.012180611491203308
Time: prepare 3.0649    bound 8.6711    transfer 0.4418    finalize 0.4737    func 13.0833    
Accumulated time: func 52.7123    prepare 15.4218    bound 30.4110    transfer 2.0652    finalize 2.5936    
all_split False
======================Cut inference begins======================
max lb tensor(0.01008414) min lb tensor(-0.01217823)
Number of Verified Splits: 27283 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0011706352233886719 
BICCOS Cumulative time: 0.1300036907196045
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01218 (27), -0.01211 (27), -0.01202 (27), -0.01199 (27), -0.01193 (27), -0.01192 (26), -0.01189 (27), -0.01188 (27), -0.01184 (26), -0.01182 (27), -0.01181 (27), -0.01174 (27), -0.01174 (27), -0.01173 (27), -0.01173 (27), -0.01171 (26), -0.01167 (27), -0.01166 (26), -0.01165 (26), -0.01163 (27), 
Length of domains: 46904
Time: pickout 0.5386    decision 3.3533    set_bounds 5.0640    solve 13.0977    add 0.1305    
Accumulated time: pickout 2.8664    decision 17.9442    set_bounds 22.4617    solve 53.7280    add 1.3884    
Current (lb-rhs): -0.012178227305412292
215836 domains visited
Cumulative time: 99.94070291519165

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 393] [/input-8, 393] [/input-8, 716] [/input-8, 627] [/input-8, 627] [/input-8, 211] [/input-8, 627] [/input-8, 219] [/input-8, 219] [/input-8, 627] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465306520462036, worst -0.0116070955991745
10 lb beta sum: 0.47465306520462036, worst -0.012803599238395691
Time: prepare 3.0687    bound 8.6765    transfer 0.4415    finalize 1.2125    func 13.8350    
Accumulated time: func 66.5473    prepare 18.4910    bound 39.0874    transfer 2.5067    finalize 3.8061    
all_split False
======================Cut inference begins======================
max lb tensor(0.01155926) min lb tensor(-0.01160662)
Number of Verified Splits: 29221 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.001127004623413086 
BICCOS Cumulative time: 0.13113069534301758
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01218 (27), -0.01211 (27), -0.01199 (27), -0.01189 (27), -0.01188 (27), -0.01174 (27), -0.01174 (27), -0.01163 (27), -0.01162 (27), -0.01161 (28), -0.01160 (27), -0.01159 (27), -0.01151 (27), -0.01150 (28), -0.01149 (28), -0.01149 (27), -0.01146 (27), -0.01140 (28), -0.01139 (27), -0.01139 (27), 
Length of domains: 50451
Time: pickout 0.5566    decision 3.9797    set_bounds 4.2410    solve 13.8493    add 0.1146    
Accumulated time: pickout 3.4230    decision 21.9238    set_bounds 26.7027    solve 67.5773    add 1.5030    
Current (lb-rhs): -0.012178227305412292
252151 domains visited
Cumulative time: 122.99664664268494

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 714] [/input-8, 714] [/input-8, 1323] [/input-8, 393] [/input-8, 1098] [/input-8, 627] [/input-8, 211] [/input-8, 393] [/input-8, 211] [/input-8, 714] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465306520462036, worst -0.011858150362968445
10 lb beta sum: 0.47465306520462036, worst -0.011856719851493835
Time: prepare 3.1102    bound 8.6745    transfer 0.4497    finalize 1.3699    func 14.0404    
Accumulated time: func 80.5877    prepare 21.6016    bound 47.7619    transfer 2.9564    finalize 5.1760    
all_split False
======================Cut inference begins======================
max lb tensor(0.01079477) min lb tensor(-0.01185523)
Number of Verified Splits: 29900 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0011532306671142578 
BICCOS Cumulative time: 0.13228392601013184
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01186 (28), -0.01161 (28), -0.01157 (28), -0.01154 (28), -0.01151 (27), -0.01149 (28), -0.01142 (28), -0.01141 (28), -0.01140 (28), -0.01134 (28), -0.01133 (27), -0.01130 (28), -0.01126 (27), -0.01125 (28), -0.01117 (28), -0.01117 (29), -0.01114 (28), -0.01110 (27), -0.01110 (28), -0.01109 (28), 
Length of domains: 53319
Time: pickout 0.5746    decision 4.0449    set_bounds 4.4786    solve 14.0559    add 0.1242    
Accumulated time: pickout 3.9976    decision 25.9688    set_bounds 31.1813    solve 81.6332    add 1.6272    
Current (lb-rhs): -0.01185522973537445
287787 domains visited
Cumulative time: 146.60487246513367

BaB round 22
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1416] [/input-8, 132] [/input-8, 1692] [/input-8, 393] [/input-8, 1098] [/input-8, 211] [/input-8, 132] [/input, 1410] [/input, 1400] [/input-8, 627] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465306520462036, worst -0.011257752776145935
10 lb beta sum: 0.47465306520462036, worst -0.01125781238079071
Time: prepare 3.1730    bound 8.6737    transfer 0.4353    finalize 0.5552    func 13.2900    
Accumulated time: func 93.8777    prepare 24.7750    bound 56.4357    transfer 3.3917    finalize 5.7312    
all_split False
======================Cut inference begins======================
max lb tensor(0.01169463) min lb tensor(-0.01125483)
Number of Verified Splits: 29947 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0011947154998779297 
BICCOS Cumulative time: 0.13347864151000977
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01186 (28), -0.01157 (28), -0.01154 (28), -0.01142 (28), -0.01141 (28), -0.01130 (28), -0.01125 (29), -0.01117 (29), -0.01114 (28), -0.01102 (29), -0.01099 (28), -0.01096 (29), -0.01090 (29), -0.01085 (29), -0.01082 (29), -0.01082 (28), -0.01081 (29), -0.01078 (28), -0.01076 (29), -0.01076 (29), 
Length of domains: 56140
Time: pickout 0.5943    decision 3.7036    set_bounds 4.7861    solve 13.3086    add 0.1221    
Accumulated time: pickout 4.5919    decision 29.6724    set_bounds 35.9674    solve 94.9418    add 1.7493    
Current (lb-rhs): -0.01185522973537445
323376 domains visited
Cumulative time: 169.45394778251648

BaB round 23
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 132] [/input-8, 211] [/input-8, 716] [/input-8, 1098] [/input-8, 613] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1946] [/input, 1410] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465306520462036, worst -0.01108543574810028
10 lb beta sum: 0.47465306520462036, worst -0.011063262820243835
Time: prepare 3.1917    bound 8.6752    transfer 0.4356    finalize 0.5371    func 14.2410    
Accumulated time: func 108.1187    prepare 27.9672    bound 65.1108    transfer 3.8273    finalize 6.2683    
all_split False
======================Cut inference begins======================
max lb tensor(0.01185350) min lb tensor(-0.01104836)
Number of Verified Splits: 31545 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0012199878692626953 
BICCOS Cumulative time: 0.13469862937927246
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01105 (29), -0.01086 (30), -0.01085 (30), -0.01085 (29), -0.01085 (29), -0.01085 (29), -0.01076 (29), -0.01076 (29), -0.01075 (29), -0.01075 (29), -0.01073 (29), -0.01071 (29), -0.01066 (29), -0.01065 (29), -0.01065 (29), -0.01062 (30), -0.01060 (30), -0.01058 (29), -0.01053 (29), -0.01050 (30), 
Length of domains: 57363
Time: pickout 0.6099    decision 4.1630    set_bounds 4.7973    solve 14.2571    add 0.1213    
Accumulated time: pickout 5.2018    decision 33.8354    set_bounds 40.7647    solve 109.1989    add 1.8707    
Current (lb-rhs): -0.011048361659049988
357367 domains visited
Cumulative time: 193.74235320091248

BaB round 24
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1416] [/input-8, 393] [/input-8, 393] [/input-8, 393] [/input-8, 61] [/input-8, 393] [/input-8, 1098] [/input-8, 132] [/input, 3099] [/input-8, 1098] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465306520462036, worst -0.010531112551689148
10 lb beta sum: 0.47465306520462036, worst -0.01052527129650116
Time: prepare 3.2530    bound 8.6738    transfer 0.4258    finalize 0.5475    func 14.3258    
Accumulated time: func 122.4445    prepare 31.2206    bound 73.7846    transfer 4.2531    finalize 6.8158    
all_split False
======================Cut inference begins======================
max lb tensor(0.01206972) min lb tensor(-0.01052259)
Number of Verified Splits: 31399 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0012402534484863281 
BICCOS Cumulative time: 0.1359388828277588
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01086 (30), -0.01085 (30), -0.01065 (29), -0.01062 (30), -0.01060 (30), -0.01058 (29), -0.01052 (30), -0.01052 (30), -0.01050 (30), -0.01049 (30), -0.01045 (30), -0.01044 (29), -0.01043 (30), -0.01042 (30), -0.01042 (30), -0.01035 (30), -0.01035 (29), -0.01034 (29), -0.01033 (30), -0.01032 (30), 
Length of domains: 58732
Time: pickout 0.6237    decision 3.4054    set_bounds 4.8665    solve 14.3419    add 0.1109    
Accumulated time: pickout 5.8255    decision 37.2408    set_bounds 45.6312    solve 123.5409    add 1.9816    
Current (lb-rhs): -0.010855540633201599
391504 domains visited
Time out!!!!!!!!
Result: unknown in 222.6116 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 58, vnnlib ID: 58 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.54733276, -21.78987122, -22.60601997, -21.30351830, -24.20145226,
         -22.29459190, -22.23107147, -25.10035706, -22.73666000, -22.06024361]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [482]; unstable size 482; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 216, 1, 482] with unstable size 215 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 482] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 482] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [215]; unstable size 215; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 215] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.04004717, -1.07115650,  0.35848117,  1.95242727,  0.74911088,
          0.26205647,  2.80084324, -0.02647555, -0.53875637]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.54733276, -21.78987122, -22.60601997, -21.30351830, -24.20145226,
         -22.29459190, -22.23107147, -25.10035706, -22.73666000, -22.06024361]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.01307869, -21.81352615, -23.35947609, -22.21124840, -25.04837990,
          -23.24066734, -22.96066475, -25.94425583, -23.12243652, -22.29972649],
         [-23.01307869, -21.81352615, -23.35947609, -22.21124840, -25.04837990,
          -23.24066734, -22.96066475, -25.94425583, -23.12243652, -22.29972649]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.80183029, -0.39772224,  0.91118813,  0.08847809]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0071 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0638 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 59, vnnlib ID: 59 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.79305267, -15.05270672, -11.01360893, -11.14069176, -10.53976250,
         -12.22748184, -10.10639000, -13.34503460, -13.81023407, -15.20878029]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1050]; unstable size 1050; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 330, 1, 1050] with unstable size 329 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 1050] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1050] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [329]; unstable size 329; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 329] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 329] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.91365647,  2.97547626, -0.38596058, -0.14092690, -0.68310452,
          0.74673295,  1.63518667,  1.76536143,  3.08691525]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.79305267, -15.05270672, -11.01360893, -11.14069176, -10.53976250,
         -12.22748184, -10.10639000, -13.34503460, -13.81023407, -15.20878029]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.68it/s]100%|██████████| 1/1 [00:00<00:00,  8.67it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.72735023, -15.15885448, -10.94828224, -11.11405087, -10.35771656,
          -12.15130424, -10.35695839, -13.19712448, -13.88504410, -15.23073673],
         [-13.72735023, -15.15885448, -10.94828224, -11.11405087, -10.35771656,
          -12.15130424, -10.35695839, -13.19712448, -13.88504410, -15.23073673]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.59132385, 0.75709248, 0.00075817]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1182 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 12.672629356384277
alpha/beta optimization time: 1.2452421188354492
initial alpha-crown bounds: tensor([[ 2.17554283,  3.15855908, -0.19436145,  0.02832627, -0.55010998,
          0.92495209,  1.83316278,  2.01714516,  3.27941346]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.5501099824905396
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.58630418777466
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5862636566162
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.58623719215393
Verifying property 2 with 1 instances.
##### Instance 59 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.19436145]], device='cuda:0') need to verify.
Model prediction is: tensor([-13.79305267, -15.05270672, -11.01360893, -11.14069176, -10.53976250,
        -12.22748184, -10.10639000, -13.34503460, -13.81023407, -15.20878029],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.19436145]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1050
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 27
-----------------
# of unstable neurons: 1392
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011110305786132812
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19435763359069824
10 lb beta sum: 0.0, worst -0.1943659782409668
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0538    transfer 0.0001    finalize 0.0001    func 0.0543    
Accumulated time: func 0.0543    prepare 0.0002    bound 0.0538    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] 
split level 1: [/input-12, 8] 
split level 2: [/input-12, 24] 
split level 3: [/input-12, 31] 
split level 4: [/input-12, 32] 
split level 5: [/input-12, 53] 
split level 6: [/input-12, 59] 
split level 7: [/input-12, 61] 
split level 8: [/input-12, 72] 
split level 9: [/input-12, 14] 
split level 10: [/input-12, 6] 
split level 11: [/input-8, 1955] 
split level 12: [/input-12, 12] 
split level 13: [/input-12, 68] 
split level 14: [/input-12, 92] 
split level 15: [/input-8, 738] 
split level 16: [/input-8, 347] 
split level 17: [/input-12, 79] 
split level 18: [/input-8, 804] 
split level 19: [/input-8, 1635] 
split level 20: [/input-8, 1701] 
split level 21: [/input-8, 466] 
split level 22: [/input-8, 788] 
split level 23: [/input-8, 490] 
split level 24: [/input-12, 97] 
split level 25: [/input-8, 577] 
split level 26: [/input-8, 154] 
split level 27: [/input-8, 475] 
split level 28: [/input-8, 1372] 
split level 29: [/input-8, 1257] 
split level 30: [/input-8, 162] 
split level 31: [/input-12, 71] 
split level 32: [/input-8, 755] 
split level 33: [/input-8, 357] 
split level 34: [/input-8, 1379] 
split level 35: [/input-8, 434] 
split level 36: [/input-8, 158] 
split level 37: [/input-12, 20] 
split level 38: [/input-8, 148] 
split level 39: [/input-8, 915] 
split level 40: [/input-8, 165] 
split level 41: [/input-8, 91] 
split level 42: [/input-8, 1693] 
split level 43: [/input-8, 1643] 
split level 44: [/input-8, 436] 
split level 45: [/input-8, 779] 
split level 46: [/input-8, 829] 
split level 47: [/input-8, 294] 
split level 48: [/input-8, 460] 
split level 49: [/input-8, 427] 
split level 50: [/input-8, 1388] 
split level 51: [/input-8, 37] 
split level 52: [/input-8, 1254] 
split level 53: [/input-8, 1748] 
split level 54: [/input-8, 1261] 
split level 55: [/input-8, 163] 
split level 56: [/input-8, 156] 
split level 57: [/input-8, 1509] 
split level 58: [/input-8, 1574] 
split level 59: [/input-8, 1556] 
split level 60: [/input-8, 785] 
split level 61: [/input-8, 149] 
split level 62: [/input-8, 1363] 
split level 63: [/input-8, 30] 
split level 64: [/input-8, 26] 
split level 65: [/input-8, 492] 
split level 66: [/input-8, 159] 
split level 67: [/input-8, 777] 
split level 68: [/input-8, 958] 
split level 69: [/input-8, 1659] 
split level 70: [/input-8, 1634] 
split level 71: [/input-8, 1618] 
split level 72: [/input-8, 411] 
split level 73: [/input-8, 1972] 
split level 74: [/input-8, 1292] 
split level 75: [/input-8, 1214] 
split level 76: [/input-8, 507] 
split level 77: [/input-8, 454] 
split level 78: [/input-8, 1029] 
split level 79: [/input-8, 1028] 
split level 80: [/input-8, 412] 
split level 81: [/input-8, 1340] 
split level 82: [/input-8, 151] 
split level 83: [/input-8, 1229] 
split level 84: [/input-8, 1652] 
split level 85: [/input-8, 1626] 
split level 86: [/input-8, 1030] 
split level 87: [/input-8, 1301] 
split level 88: [/input-8, 1241] 
split level 89: [/input-8, 1700] 
split level 90: [/input-8, 225] 
split level 91: [/input-8, 92] 
split level 92: [/input-8, 1945] 
split level 93: [/input-8, 782] 
split level 94: [/input-8, 223] 
split level 95: [/input-8, 166] 
split level 96: [/input-8, 1757] 
split level 97: [/input-8, 183] 
split level 98: [/input-8, 1238] 
split level 99: [/input-8, 231] 
split level 100: [/input-8, 1181] 
split level 101: [/input, 2789] 
split level 102: [/input-8, 1246] 
split level 103: [/input-8, 226] 
split level 104: [/input-8, 449] 
split level 105: [/input-8, 1265] 
split level 106: [/input-8, 582] 
split level 107: [/input-8, 1294] 
split level 108: [/input-8, 90] 
split level 109: [/input, 3035] 
split level 110: [/input-8, 217] 
split level 111: [/input-8, 233] 
split level 112: [/input-8, 1329] 
split level 113: [/input-8, 1364] 
split level 114: [/input-8, 178] 
split level 115: [/input-8, 481] 
split level 116: [/input-8, 241] 
split level 117: [/input, 70] 
split level 118: [/input-8, 1228] 
split level 119: [/input-8, 450] 
split level 120: [/input-8, 944] 
split level 121: [/input-8, 1341] 
split level 122: [/input-8, 773] 
split level 123: [/input-8, 170] 
split level 124: [/input-8, 1707] 
split level 125: [/input, 227] 
split level 126: [/input-8, 141] 
split level 127: [/input-8, 624] 
split level 128: [/input-8, 452] 
split level 129: [/input-8, 312] 
split level 130: [/input-8, 182] 
split level 131: [/input, 3433] 
split level 132: [/input-8, 147] 
split level 133: [/input-8, 146] 
split level 134: [/input-8, 1337] 
split level 135: [/input-8, 1598] 
split level 136: [/input-8, 143] 
split level 137: [/input-8, 364] 
split level 138: [/input, 873] 
split level 139: [/input, 2787] 
split level 140: [/input-8, 242] 
split level 141: [/input, 2887] 
split level 142: [/input-8, 941] 
split level 143: [/input-8, 169] 
split level 144: [/input-8, 215] 
split level 145: [/input-8, 205] 
split level 146: [/input, 1516] 
split level 147: [/input-8, 209] 
split level 148: [/input-8, 207] 
split level 149: [/input-8, 239] 
split level 150: [/input-8, 253] 
split level 151: [/input-8, 1297] 
split level 152: [/input, 3288] 
split level 153: [/input-8, 234] 
split level 154: [/input, 1205] 
split level 155: [/input, 1891] 
split level 156: [/input, 71] 
split level 157: [/input, 1207] 
split level 158: [/input, 72] 
split level 159: [/input-8, 1227] 
split level 160: [/input, 942] 
split level 161: [/input-8, 230] 
split level 162: [/input-8, 255] 
split level 163: [/input, 2790] 
split level 164: [/input, 137] 
split level 165: [/input-8, 1786] 
split level 166: [/input, 226] 
split level 167: [/input, 3717] 
split level 168: [/input, 1999] 
split level 169: [/input-8, 1302] 
split level 170: [/input-8, 1741] 
split level 171: [/input, 1490] 
split level 172: [/input, 1843] 
split level 173: [/input-8, 1799] 
split level 174: [/input-8, 1279] 
split level 175: [/input, 2649] 
split level 176: [/input-8, 206] 
split level 177: [/input, 3497] 
split level 178: [/input, 2724] 
split level 179: [/input-8, 1233] 
split level 180: [/input, 906] 
split level 181: [/input, 2786] 
split level 182: [/input, 833] 
split level 183: [/input-8, 103] 
split level 184: [/input, 1320] 
split level 185: [/input, 2792] 
split level 186: [/input, 1180] 
split level 187: [/input, 1829] 
split level 188: [/input, 2870] 
split level 189: [/input, 1158] 
split level 190: [/input-8, 179] 
split level 191: [/input, 1918] 
split level 192: [/input, 1937] 
split level 193: [/input, 2632] 
split level 194: [/input, 1886] 
split level 195: [/input, 533] 
split level 196: [/input, 1812] 
split level 197: [/input, 329] 
split level 198: [/input, 2014] 
split level 199: [/input, 1012] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19431686401367188
10 lb beta sum: 0.0, worst -0.19430899620056152
Time: prepare 0.0114    bound 0.0991    transfer 0.0020    finalize 0.0029    func 0.1180    
Accumulated time: func 0.1723    prepare 0.0215    bound 0.1529    transfer 0.0021    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.25902355) min lb tensor(-0.19429588)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.011262893676757812 
BICCOS Cumulative time: 0.011262893676757812
Preprocessing time: 0.010051488876342773 Inference time: 0.0003917217254638672 Add cuts time: 0.0001621246337890625 Cut analysis time: 0.0006575584411621094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18178 (1), -0.18149 (1), -0.18013 (1), -0.17981 (1), -0.17886 (1), -0.17876 (1), -0.17840 (1), -0.17834 (1), -0.17800 (1), -0.17737 (1), -0.17729 (1), -0.17621 (1), -0.17578 (1), -0.17548 (1), -0.17532 (1), -0.17458 (1), -0.17446 (1), -0.17431 (1), -0.17361 (1), -0.17353 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5288    set_bounds 0.0089    solve 0.1181    add 0.0693    
Accumulated time: pickout 0.0003    decision 0.5288    set_bounds 0.0089    solve 0.1181    add 0.0693    
Current (lb-rhs): -0.18178367614746094
50 domains visited
Cumulative time: 0.7959957122802734

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 1: [/input-12, 31] [/input-12, 8] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 8] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 24] [/input-12, 24] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 59] [/input-12, 59] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17229771614074707

all verified at 8th iter
Time: prepare 0.0071    bound 0.0529    transfer 0.0011    finalize 0.0022    func 0.0658    
Accumulated time: func 0.2382    prepare 0.0289    bound 0.2058    transfer 0.0031    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.15609646) min lb tensor(0.00398886)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03504681587219238 
BICCOS Cumulative time: 0.046309709548950195
Preprocessing time: 0.011644363403320312 Inference time: 0.015325069427490234 Add cuts time: 0.00789785385131836 Cut analysis time: 0.00017952919006347656
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0227    set_bounds 0.0126    solve 0.0659    add 0.0150    
Accumulated time: pickout 0.0014    decision 0.5516    set_bounds 0.0214    solve 0.1840    add 0.0843    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 46]), tensor([-1., -1.]), tensor([0, 0]), tensor([3.90383836e-11, 1.93208322e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 46]), tensor([-1.,  1.]), tensor([0, 0]), tensor([3.90383836e-11, 2.36086175e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 46]), tensor([ 1., -1.]), tensor([0, 0]), tensor([8.43400870e-14, 1.62751302e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 46]), tensor([1., 1.]), tensor([0, 0]), tensor([8.43400870e-14, 2.43325755e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1502070426940918

all verified at 4th iter
Time: prepare 0.0003    bound 0.0245    transfer 0.0001    finalize 0.0001    func 0.0252    
Accumulated time: func 0.2634    prepare 0.0292    bound 0.2304    transfer 0.0033    finalize 0.0054    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.43874526023865
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.43867015838623
Verifying property 4 with 1 instances.
##### Instance 59 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.55010998]], device='cuda:0') need to verify.
Model prediction is: tensor([-13.79305267, -15.05270672, -11.01360893, -11.14069176, -10.53976250,
        -12.22748184, -10.10639000, -13.34503460, -13.81023407, -15.20878029],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.55010998]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1050
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 27
-----------------
# of unstable neurons: 1392
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.703636169433594e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5501067638397217
10 lb beta sum: 0.0, worst -0.5501182079315186
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0546    transfer 0.0001    finalize 0.0001    func 0.0550    
Accumulated time: func 0.0550    prepare 0.0002    bound 0.0546    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 97] 
split level 3: [/input-12, 90] 
split level 4: [/input-12, 61] 
split level 5: [/input-12, 14] 
split level 6: [/input-12, 32] 
split level 7: [/input-12, 4] 
split level 8: [/input-12, 31] 
split level 9: [/input-12, 68] 
split level 10: [/input-12, 79] 
split level 11: [/input-8, 1380] 
split level 12: [/input-12, 92] 
split level 13: [/input-8, 141] 
split level 14: [/input-8, 163] 
split level 15: [/input-8, 1261] 
split level 16: [/input-8, 165] 
split level 17: [/input-8, 1257] 
split level 18: [/input-12, 55] 
split level 19: [/input-8, 1388] 
split level 20: [/input-8, 738] 
split level 21: [/input-8, 1262] 
split level 22: [/input-8, 1241] 
split level 23: [/input-8, 1574] 
split level 24: [/input-8, 1389] 
split level 25: [/input-8, 30] 
split level 26: [/input-8, 37] 
split level 27: [/input-12, 71] 
split level 28: [/input-8, 1246] 
split level 29: [/input-8, 1254] 
split level 30: [/input-8, 148] 
split level 31: [/input-8, 158] 
split level 32: [/input-8, 156] 
split level 33: [/input-8, 1748] 
split level 34: [/input-8, 173] 
split level 35: [/input-8, 1757] 
split level 36: [/input-8, 1181] 
split level 37: [/input-8, 1643] 
split level 38: [/input-8, 1379] 
split level 39: [/input-12, 8] 
split level 40: [/input-8, 1372] 
split level 41: [/input-8, 91] 
split level 42: [/input, 3207] 
split level 43: [/input-8, 1214] 
split level 44: [/input-8, 147] 
split level 45: [/input-8, 149] 
split level 46: [/input-8, 252] 
split level 47: [/input-8, 162] 
split level 48: [/input-8, 294] 
split level 49: [/input-8, 182] 
split level 50: [/input-8, 788] 
split level 51: [/input-8, 154] 
split level 52: [/input-8, 92] 
split level 53: [/input-8, 166] 
split level 54: [/input-8, 755] 
split level 55: [/input-8, 941] 
split level 56: [/input-8, 779] 
split level 57: [/input-8, 1950] 
split level 58: [/input-8, 1738] 
split level 59: [/input-8, 139] 
split level 60: [/input-8, 312] 
split level 61: [/input-8, 2017] 
split level 62: [/input-8, 1265] 
split level 63: [/input-8, 1635] 
split level 64: [/input-8, 944] 
split level 65: [/input-8, 1238] 
split level 66: [/input, 3035] 
split level 67: [/input-8, 1741] 
split level 68: [/input-8, 225] 
split level 69: [/input-8, 492] 
split level 70: [/input-8, 1666] 
split level 71: [/input-8, 1266] 
split level 72: [/input-8, 1390] 
split level 73: [/input-8, 2031] 
split level 74: [/input-8, 1652] 
split level 75: [/input-8, 146] 
split level 76: [/input-8, 223] 
split level 77: [/input-8, 151] 
split level 78: [/input-8, 26] 
split level 79: [/input-8, 218] 
split level 80: [/input-8, 217] 
split level 81: [/input-8, 183] 
split level 82: [/input-8, 253] 
split level 83: [/input-8, 1739] 
split level 84: [/input-8, 221] 
split level 85: [/input-8, 782] 
split level 86: [/input-8, 159] 
split level 87: [/input-12, 72] 
split level 88: [/input-8, 1173] 
split level 89: [/input, 2881] 
split level 90: [/input-8, 181] 
split level 91: [/input-8, 2029] 
split level 92: [/input, 3257] 
split level 93: [/input-8, 25] 
split level 94: [/input-8, 507] 
split level 95: [/input-8, 179] 
split level 96: [/input-8, 231] 
split level 97: [/input-8, 233] 
split level 98: [/input-8, 773] 
split level 99: [/input-8, 958] 
split level 100: [/input-8, 582] 
split level 101: [/input, 474] 
split level 102: [/input, 873] 
split level 103: [/input-8, 460] 
split level 104: [/input-8, 1758] 
split level 105: [/input-8, 357] 
split level 106: [/input-8, 170] 
split level 107: [/input, 3190] 
split level 108: [/input-8, 1382] 
split level 109: [/input-8, 213] 
split level 110: [/input-8, 209] 
split level 111: [/input-8, 1229] 
split level 112: [/input, 3208] 
split level 113: [/input-8, 1233] 
split level 114: [/input-8, 241] 
split level 115: [/input, 918] 
split level 116: [/input-8, 1029] 
split level 117: [/input, 98] 
split level 118: [/input, 2887] 
split level 119: [/input, 809] 
split level 120: [/input-8, 230] 
split level 121: [/input-8, 454] 
split level 122: [/input-8, 466] 
split level 123: [/input, 3497] 
split level 124: [/input, 3252] 
split level 125: [/input-8, 777] 
split level 126: [/input, 934] 
split level 127: [/input-8, 205] 
split level 128: [/input, 156] 
split level 129: [/input, 2724] 
split level 130: [/input-8, 143] 
split level 131: [/input-8, 1786] 
split level 132: [/input-8, 1765] 
split level 133: [/input-8, 364] 
split level 134: [/input, 838] 
split level 135: [/input, 137] 
split level 136: [/input-8, 239] 
split level 137: [/input, 1426] 
split level 138: [/input-8, 242] 
split level 139: [/input-8, 215] 
split level 140: [/input, 854] 
split level 141: [/input, 888] 
split level 142: [/input-8, 624] 
split level 143: [/input, 970] 
split level 144: [/input-8, 207] 
split level 145: [/input-8, 226] 
split level 146: [/input-8, 255] 
split level 147: [/input-8, 1730] 
split level 148: [/input-8, 1030] 
split level 149: [/input, 1180] 
split level 150: [/input-8, 1028] 
split level 151: [/input-8, 138] 
split level 152: [/input-8, 1279] 
split level 153: [/input, 2040] 
split level 154: [/input, 942] 
split level 155: [/input, 2871] 
split level 156: [/input, 2328] 
split level 157: [/input-8, 1378] 
split level 158: [/input-8, 206] 
split level 159: [/input, 1207] 
split level 160: [/input, 793] 
split level 161: [/input, 2971] 
split level 162: [/input, 1516] 
split level 163: [/input, 3433] 
split level 164: [/input-8, 1598] 
split level 165: [/input, 794] 
split level 166: [/input, 457] 
split level 167: [/input, 2664] 
split level 168: [/input, 60] 
split level 169: [/input, 2870] 
split level 170: [/input, 329] 
split level 171: [/input, 1891] 
split level 172: [/input-8, 1799] 
split level 173: [/input, 684] 
split level 174: [/input, 2859] 
split level 175: [/input, 2876] 
split level 176: [/input, 1129] 
split level 177: [/input, 3143] 
split level 178: [/input, 407] 
split level 179: [/input-8, 1244] 
split level 180: [/input-8, 103] 
split level 181: [/input, 162] 
split level 182: [/input, 833] 
split level 183: [/input, 3127] 
split level 184: [/input, 313] 
split level 185: [/input, 97] 
split level 186: [/input, 2883] 
split level 187: [/input, 2330] 
split level 188: [/input, 50] 
split level 189: [/input, 2700] 
split level 190: [/input, 2039] 
split level 191: [/input, 2055] 
split level 192: [/input, 2596] 
split level 193: [/input, 51] 
split level 194: [/input-8, 1602] 
split level 195: [/input, 172] 
split level 196: [/input, 827] 
split level 197: [/input, 2877] 
split level 198: [/input, 3828] 
split level 199: [/input, 3352] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5500571727752686
10 lb beta sum: 0.0, worst -0.5500485897064209
Time: prepare 0.0115    bound 0.1029    transfer 0.0024    finalize 0.0026    func 0.1219    
Accumulated time: func 0.1770    prepare 0.0214    bound 0.1575    transfer 0.0025    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(-0.16415834) min lb tensor(-0.55004299)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.010016679763793945 
BICCOS Cumulative time: 0.010016679763793945
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.53656 (1), -0.53652 (1), -0.53636 (1), -0.53550 (1), -0.53542 (1), -0.53465 (1), -0.53455 (1), -0.53438 (1), -0.53437 (1), -0.53425 (1), -0.53371 (1), -0.53362 (1), -0.53343 (1), -0.53301 (1), -0.53288 (1), -0.53160 (1), -0.53143 (1), -0.53109 (1), -0.53058 (1), -0.52921 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5232    set_bounds 0.0088    solve 0.1220    add 0.0663    
Accumulated time: pickout 0.0003    decision 0.5232    set_bounds 0.0088    solve 0.1220    add 0.0663    
Current (lb-rhs): -0.5365630388259888
50 domains visited
Cumulative time: 0.8011915683746338

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
split level 1: [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 90] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5109847784042358
10 lb beta sum: 0.0, worst -0.5103429555892944
Time: prepare 0.0122    bound 0.0973    transfer 0.0011    finalize 0.0022    func 0.1154    
Accumulated time: func 0.2923    prepare 0.0339    bound 0.2548    transfer 0.0036    finalize 0.0049    
all_split False
======================Cut inference begins======================
max lb tensor(0.05271912) min lb tensor(-0.51021147)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012102603912353516 
BICCOS Cumulative time: 0.02211928367614746
Preprocessing time: 0.011629819869995117 Inference time: 0.0001747608184814453 Add cuts time: 6.937980651855469e-05 Cut analysis time: 0.00022864341735839844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30638 (2), -0.30527 (2), -0.30373 (2), -0.30332 (2), -0.30318 (2), -0.30295 (2), -0.30002 (2), -0.29928 (2), -0.29750 (2), -0.29467 (2), -0.29327 (2), -0.28569 (2), -0.28231 (2), -0.28136 (2), -0.27804 (2), -0.27729 (2), -0.27574 (2), -0.27372 (2), -0.27273 (2), -0.27094 (2), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0197    set_bounds 0.0131    solve 0.1155    add 0.0745    
Accumulated time: pickout 0.0013    decision 0.5428    set_bounds 0.0219    solve 0.2374    add 0.1408    
Current (lb-rhs): -0.3063826560974121
100 domains visited
Cumulative time: 1.0371315479278564

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 90] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 46] 
split level 1: [/input-12, 14] [/input-12, 14] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 14] [/input-12, 14] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 31] [/input-12, 79] [/input-12, 31] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2981376647949219
10 lb beta sum: 0.17165397107601166, worst -0.29847288131713867
Time: prepare 0.0060    bound 0.1187    transfer 0.0011    finalize 0.0022    func 0.1311    
Accumulated time: func 0.4235    prepare 0.0401    bound 0.3735    transfer 0.0047    finalize 0.0071    
all_split False
======================Cut inference begins======================
max lb tensor(0.46882755) min lb tensor(-0.29549193)
Number of Verified Splits: 91 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.018225669860839844 
BICCOS Cumulative time: 0.040344953536987305
Preprocessing time: 0.011338472366333008 Inference time: 0.004126787185668945 Add cuts time: 0.0024099349975585938 Cut analysis time: 0.0003504753112792969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10073 (3), -0.10040 (3), -0.09839 (3), -0.09786 (3), -0.09490 (3), -0.09399 (3), -0.09138 (3), -0.09090 (3), -0.08944 (3), -0.08728 (3), -0.08558 (3), -0.08455 (3), -0.08451 (3), -0.08437 (3), -0.08416 (3), -0.08348 (3), -0.08312 (3), -0.08287 (3), -0.08255 (3), -0.08242 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0193    set_bounds 0.0152    solve 0.1312    add 0.0852    
Accumulated time: pickout 0.0021    decision 0.5621    set_bounds 0.0371    solve 0.3687    add 0.2260    
Current (lb-rhs): -0.10072727501392365
150 domains visited
Cumulative time: 1.3073182106018066

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 46] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 1: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 14] [/input-12, 31] [/input-12, 14] [/input-12, 31] [/input-12, 14] [/input-12, 31] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 31] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10118532180786133
10 lb beta sum: 0.43345022201538086, worst -0.1020662784576416
Time: prepare 0.0057    bound 0.1187    transfer 0.0011    finalize 0.0019    func 0.1301    
Accumulated time: func 0.5536    prepare 0.0461    bound 0.4922    transfer 0.0059    finalize 0.0089    
all_split False
======================Cut inference begins======================
max lb tensor(0.30959737) min lb tensor(-0.09449267)
Number of Verified Splits: 196 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 5
#cuts 4-6: 13
#cuts >= 20: 0
BICCOS time: 0.02706313133239746 
BICCOS Cumulative time: 0.06740808486938477
Preprocessing time: 0.011403560638427734 Inference time: 0.010412216186523438 Add cuts time: 0.004549503326416016 Cut analysis time: 0.0006978511810302734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02939 (4), -0.02924 (4), -0.02884 (4), -0.02874 (4), -0.02874 (4), -0.02812 (4), -0.02765 (4), -0.02747 (4), -0.02738 (4), -0.02738 (4), -0.02720 (4), -0.02720 (4), -0.02700 (4), -0.02699 (4), -0.02645 (4), -0.02523 (4), -0.02516 (4), -0.02486 (4), -0.02481 (4), -0.02173 (4), 
Length of domains: 50
Time: pickout 0.0008    decision 0.0196    set_bounds 0.0152    solve 0.1302    add 0.2525    
Accumulated time: pickout 0.0030    decision 0.5817    set_bounds 0.0523    solve 0.4989    add 0.4785    
Current (lb-rhs): -0.02939196303486824
200 domains visited
Cumulative time: 1.7531697750091553

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 1: [/input-12, 97] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 97] [/input-12, 97] [/input-12, 61] [/input-12, 97] [/input-12, 97] 
split level 2: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 14] [/input-12, 14] [/input-12, 68] [/input-12, 61] [/input-12, 31] [/input-12, 61] [/input-12, 68] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 68] [/input-12, 68] [/input-12, 79] [/input-12, 31] [/input-8, 1266] [/input-12, 31] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04645180702209473
10 lb beta sum: 0.580253005027771, worst -0.11440271139144897
Time: prepare 0.0062    bound 0.1507    transfer 0.0011    finalize 0.0030    func 0.1649    
Accumulated time: func 0.7185    prepare 0.0526    bound 0.6430    transfer 0.0070    finalize 0.0119    
all_split False
======================Cut inference begins======================
max lb tensor(0.11824465) min lb tensor(-0.00240088)
Number of Verified Splits: 396 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.045739173889160156 
BICCOS Cumulative time: 0.11314725875854492
Preprocessing time: 0.012781620025634766 Inference time: 0.023554086685180664 Add cuts time: 0.008611679077148438 Cut analysis time: 0.0007917881011962891
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0013    decision 0.0216    set_bounds 0.0179    solve 0.1651    add 0.0280    
Accumulated time: pickout 0.0042    decision 0.6033    set_bounds 0.0702    solve 0.6640    add 0.5064    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.82952102e+16, 8.36146325e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.82952102e+16, 2.07267806e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 46]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([2.82952102e+16, 9.32569951e-02, 1.41050089e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 46]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.82952102e+16, 9.32569951e-02, 3.75908077e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.82952102e+16, 2.11445376e-01, 6.82254732e-02, 5.90095818e-02,
        7.09899813e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.82952102e+16, 2.11445376e-01, 6.82254732e-02, 5.90095818e-02,
        1.01166859e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.82952102e+16, 2.11445376e-01, 6.82254732e-02, 6.55173510e-02,
        6.35626316e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.82952102e+16, 2.11445376e-01, 6.82254732e-02, 6.55173510e-02,
        1.03526115e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.82952102e+16, 2.11445376e-01, 5.36510497e-02, 6.20628297e-02,
        6.09045923e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.82952102e+16, 2.11445376e-01, 5.36510497e-02, 6.20628297e-02,
        1.00938529e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.82952102e+16, 2.11445376e-01, 5.36510497e-02, 6.34278804e-02,
        7.19308108e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([1., 1., 1., 1., 1.]), tensor([0, 0, 0, 0, 0]), tensor([2.82952102e+16, 2.11445376e-01, 5.36510497e-02, 6.34278804e-02,
        1.01381168e-01]), tensor([0, 1, 2, 3, 4]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.44938671588897705
10 lb beta sum: 1.1663436889648438, worst -0.4401571750640869
Time: prepare 0.0006    bound 0.1324    transfer 0.0002    finalize 0.0003    func 0.1336    
Accumulated time: func 0.8521    prepare 0.0532    bound 0.7754    transfer 0.0072    finalize 0.0122    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 46] [/input-12, 97] 
split level 1: [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 2: [/input-12, 14] [/input-12, 14] [/input-12, 14] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 32] 
split level 4: [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 5: [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 6: [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4803171157836914, worst -0.3005695343017578
10 lb beta sum: 0.5190445780754089, worst -0.29944515228271484
Time: prepare 0.0152    bound 0.1328    transfer 0.0030    finalize 0.0025    func 0.1561    
Accumulated time: func 1.0082    prepare 0.0688    bound 0.9083    transfer 0.0102    finalize 0.0147    
all_split False
======================Cut inference begins======================
max lb tensor(0.75816357) min lb tensor(-0.29921150)
Number of Verified Splits: 309 of 384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.00033736228942871094 
BICCOS Cumulative time: 0.11348462104797363
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.29921 (7), -0.29584 (7), -0.26281 (7), -0.25453 (7), -0.23690 (7), -0.23500 (7), -0.22072 (7), -0.21956 (7), -0.21651 (7), -0.21217 (7), -0.18189 (7), -0.17932 (7), -0.17476 (7), -0.16687 (7), -0.15678 (7), -0.15521 (7), -0.15027 (7), -0.14751 (7), -0.12222 (7), -0.11250 (7), 
Length of domains: 75
Time: pickout 0.0006    decision 0.0220    set_bounds 0.0296    solve 0.1563    add 0.0015    
Accumulated time: pickout 0.0048    decision 0.6253    set_bounds 0.0997    solve 0.8202    add 0.5079    
Current (lb-rhs): -0.2992115020751953
275 domains visited
Cumulative time: 2.4149835109710693

BaB round 2
batch: 75
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 97] [/input-12, 97] [/input-12, 4] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 4] [/input-12, 97] [/input-12, 97] [/input-12, 97] 
split level 1: [/input-12, 4] [/input-12, 4] [/input-12, 92] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 92] [/input-12, 4] [/input-8, 1261] [/input-8, 1261] 
cut re-enabled after branching node selection
0 lb beta sum: 0.3859352767467499, worst -0.27382826805114746
10 lb beta sum: 0.3865929841995239, worst -0.27349376678466797
Time: prepare 0.0132    bound 0.1364    transfer 0.0007    finalize 0.0022    func 0.1545    
Accumulated time: func 1.1628    prepare 0.0822    bound 1.0447    transfer 0.0109    finalize 0.0169    
all_split False
======================Cut inference begins======================
max lb tensor(0.40403679) min lb tensor(-0.27339387)
Number of Verified Splits: 216 of 300
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0003046989440917969 
BICCOS Cumulative time: 0.11378931999206543
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27339 (9), -0.26974 (9), -0.23786 (9), -0.23008 (9), -0.21183 (9), -0.20974 (9), -0.19724 (9), -0.19324 (9), -0.19039 (9), -0.18343 (9), -0.15419 (9), -0.15396 (9), -0.14857 (9), -0.14381 (9), -0.13828 (9), -0.13787 (9), -0.12993 (9), -0.12081 (9), -0.10129 (9), -0.09875 (9), 
Length of domains: 84
Time: pickout 0.0016    decision 0.0192    set_bounds 0.0141    solve 0.1546    add 0.0016    
Accumulated time: pickout 0.0064    decision 0.6445    set_bounds 0.1138    solve 0.9748    add 0.5095    
Current (lb-rhs): -0.2733938694000244
359 domains visited
Cumulative time: 2.6074719429016113

BaB round 3
batch: 84
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-8, 1254] [/input-12, 92] [/input-12, 92] [/input-8, 1241] [/input-8, 1246] [/input-12, 92] [/input-12, 4] [/input-12, 4] 
split level 1: [/input-8, 1261] [/input-8, 1241] [/input-8, 37] [/input-8, 37] [/input-8, 1261] [/input-12, 92] [/input-8, 1254] [/input-8, 37] [/input-12, 92] [/input-12, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.35831475257873535, worst -0.2524898052215576
10 lb beta sum: 0.35831475257873535, worst -0.2523003816604614
Time: prepare 0.0152    bound 0.1338    transfer 0.0007    finalize 0.0021    func 0.1540    
Accumulated time: func 1.3168    prepare 0.0976    bound 1.1785    transfer 0.0116    finalize 0.0190    
all_split False
======================Cut inference begins======================
max lb tensor(0.26222944) min lb tensor(-0.25224435)
Number of Verified Splits: 162 of 336
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.000308990478515625 
BICCOS Cumulative time: 0.11409831047058105
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25224 (11), -0.25061 (11), -0.24908 (11), -0.24728 (11), -0.24069 (11), -0.23918 (11), -0.23788 (11), -0.23613 (11), -0.21774 (11), -0.21116 (11), -0.20910 (11), -0.20822 (11), -0.20425 (11), -0.19879 (11), -0.19665 (11), -0.19179 (11), -0.19023 (11), -0.18930 (11), -0.18466 (11), -0.18392 (11), 
Length of domains: 174
Time: pickout 0.0017    decision 0.0164    set_bounds 0.0181    solve 0.1541    add 0.0019    
Accumulated time: pickout 0.0081    decision 0.6610    set_bounds 0.1319    solve 1.1290    add 0.5114    
Current (lb-rhs): -0.25224435329437256
533 domains visited
Cumulative time: 2.800990343093872

BaB round 4
batch: 174
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 37] [/input-8, 1574] [/input-8, 1574] [/input-8, 1257] [/input-8, 1261] [/input-8, 1262] [/input-8, 1246] [/input-8, 1262] [/input-8, 37] [/input-8, 1574] 
cut re-enabled after branching node selection
0 lb beta sum: 0.3693728744983673, worst -0.25024962425231934
10 lb beta sum: 0.3693728744983673, worst -0.25019216537475586
Time: prepare 0.0158    bound 0.1350    transfer 0.0017    finalize 0.0025    func 0.1572    
Accumulated time: func 1.4740    prepare 0.1136    bound 1.3135    transfer 0.0133    finalize 0.0215    
all_split False
======================Cut inference begins======================
max lb tensor(0.02228296) min lb tensor(-0.25015485)
Number of Verified Splits: 63 of 348
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0003364086151123047 
BICCOS Cumulative time: 0.11443471908569336
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25015 (12), -0.24832 (12), -0.24688 (12), -0.24489 (12), -0.23810 (12), -0.23650 (12), -0.23492 (12), -0.23297 (12), -0.23234 (12), -0.23113 (12), -0.22816 (12), -0.22661 (12), -0.22063 (12), -0.21807 (12), -0.21782 (12), -0.21580 (12), -0.21502 (12), -0.20921 (12), -0.20695 (12), -0.20565 (12), 
Length of domains: 285
Time: pickout 0.0029    decision 0.0218    set_bounds 0.0150    solve 0.1573    add 0.0036    
Accumulated time: pickout 0.0111    decision 0.6827    set_bounds 0.1469    solve 1.2863    add 0.5150    
Current (lb-rhs): -0.25015485286712646
818 domains visited
Cumulative time: 3.0026144981384277

BaB round 5
batch: 285
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1574] [/input-8, 141] [/input-8, 1254] [/input-8, 37] [/input-8, 1254] [/input-8, 156] [/input-8, 1574] [/input-8, 1254] [/input-8, 1574] [/input-8, 1262] 
cut re-enabled after branching node selection
0 lb beta sum: 0.3661908805370331, worst -0.24994730949401855
10 lb beta sum: 0.3661908805370331, worst -0.24993252754211426
Time: prepare 0.0288    bound 0.1391    transfer 0.0031    finalize 0.0037    func 0.1784    
Accumulated time: func 1.6524    prepare 0.1425    bound 1.4526    transfer 0.0164    finalize 0.0252    
all_split False
======================Cut inference begins======================
max lb tensor(0.01778147) min lb tensor(-0.24990785)
Number of Verified Splits: 74 of 570
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0003323554992675781 
BICCOS Cumulative time: 0.11476707458496094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24991 (13), -0.24810 (13), -0.24662 (13), -0.24463 (13), -0.23748 (13), -0.23582 (13), -0.23408 (13), -0.23229 (13), -0.23072 (13), -0.22946 (13), -0.22678 (13), -0.22502 (13), -0.21862 (13), -0.21661 (13), -0.21601 (13), -0.21597 (13), -0.21484 (13), -0.21332 (13), -0.21315 (13), -0.21124 (13), 
Length of domains: 496
Time: pickout 0.0040    decision 0.0279    set_bounds 0.0237    solve 0.1787    add 0.0043    
Accumulated time: pickout 0.0150    decision 0.7106    set_bounds 0.1705    solve 1.4650    add 0.5194    
Current (lb-rhs): -0.24990785121917725
1314 domains visited
Cumulative time: 3.242387533187866

BaB round 6
batch: 496
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1254] [/input-8, 1254] [/input-8, 1246] [/input-8, 156] [/input-8, 156] [/input-8, 1254] [/input-8, 1254] [/input-12, 71] [/input-8, 1254] [/input-8, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 0.36244574189186096, worst -0.24287796020507812
10 lb beta sum: 0.36244574189186096, worst -0.24276959896087646
Time: prepare 0.0441    bound 0.1281    transfer 0.0038    finalize 0.0061    func 0.1883    
Accumulated time: func 1.8407    prepare 0.1868    bound 1.5807    transfer 0.0202    finalize 0.0313    
all_split False
======================Cut inference begins======================
max lb tensor(0.02599317) min lb tensor(-0.24273920)
Number of Verified Splits: 159 of 992
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0005002021789550781 
BICCOS Cumulative time: 0.11526727676391602
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24274 (14), -0.24061 (14), -0.24059 (14), -0.23984 (14), -0.23841 (14), -0.23786 (14), -0.23781 (14), -0.23572 (14), -0.22982 (14), -0.22967 (14), -0.22889 (14), -0.22683 (14), -0.22618 (14), -0.22509 (14), -0.22446 (14), -0.22352 (14), -0.22262 (14), -0.22135 (14), -0.22042 (14), -0.21895 (14), 
Length of domains: 833
Time: pickout 0.0084    decision 0.0403    set_bounds 0.0433    solve 0.1887    add 0.0043    
Accumulated time: pickout 0.0234    decision 0.7509    set_bounds 0.2138    solve 1.6537    add 0.5237    
Current (lb-rhs): -0.24273920059204102
2147 domains visited
Cumulative time: 3.5297768115997314

BaB round 7
batch: 833
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 156] [/input-8, 1261] [/input-8, 156] [/input-8, 1246] [/input-12, 71] [/input-8, 1574] [/input-8, 165] [/input-8, 1261] [/input-8, 1254] [/input-8, 357] 
cut re-enabled after branching node selection
0 lb beta sum: 0.3478967249393463, worst -0.2367403507232666
10 lb beta sum: 0.3478967249393463, worst -0.23664796352386475
Time: prepare 0.0719    bound 0.1414    transfer 0.0085    finalize 0.0098    func 0.2422    
Accumulated time: func 2.0830    prepare 0.2590    bound 1.7221    transfer 0.0287    finalize 0.0410    
all_split False
======================Cut inference begins======================
max lb tensor(0.02898788) min lb tensor(-0.23661828)
Number of Verified Splits: 205 of 1666
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.00039315223693847656 
BICCOS Cumulative time: 0.11566042900085449
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23662 (15), -0.23523 (15), -0.23490 (15), -0.23478 (15), -0.23470 (15), -0.23449 (15), -0.23393 (15), -0.23267 (15), -0.23255 (15), -0.23215 (15), -0.23176 (15), -0.23048 (15), -0.22992 (15), -0.22386 (15), -0.22376 (15), -0.22376 (15), -0.22305 (15), -0.22239 (15), -0.22204 (15), -0.22161 (15), 
Length of domains: 1461
Time: pickout 0.0137    decision 0.0574    set_bounds 0.0674    solve 0.2425    add 0.0169    
Accumulated time: pickout 0.0372    decision 0.8083    set_bounds 0.2812    solve 1.8962    add 0.5406    
Current (lb-rhs): -0.2366182804107666
3608 domains visited
Cumulative time: 3.930464029312134

BaB round 8
batch: 1461
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-8, 944] [/input-8, 1254] [/input-8, 141] [/input-8, 147] [/input-12, 71] [/input-8, 162] [/input-8, 1246] [/input-8, 1266] [/input-8, 165] 
cut re-enabled after branching node selection
0 lb beta sum: 0.3371776044368744, worst -0.2323460578918457
10 lb beta sum: 0.3371776044368744, worst -0.2323228120803833
Time: prepare 0.1296    bound 0.1896    transfer 0.0127    finalize 0.0159    func 0.3671    
Accumulated time: func 2.4501    prepare 0.3888    bound 1.9118    transfer 0.0414    finalize 0.0569    
all_split False
======================Cut inference begins======================
max lb tensor(0.02730221) min lb tensor(-0.23222589)
Number of Verified Splits: 288 of 2922
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.00042819976806640625 
BICCOS Cumulative time: 0.1160886287689209
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23223 (16), -0.23175 (16), -0.23111 (16), -0.23018 (16), -0.22991 (16), -0.22962 (16), -0.22901 (16), -0.22866 (16), -0.22856 (16), -0.22843 (16), -0.22749 (16), -0.22681 (16), -0.22679 (16), -0.22652 (16), -0.22637 (16), -0.22588 (16), -0.22531 (16), -0.22423 (16), -0.22252 (16), -0.22013 (16), 
Length of domains: 2634
Time: pickout 0.0197    decision 0.0913    set_bounds 0.2951    solve 0.3677    add 0.0166    
Accumulated time: pickout 0.0568    decision 0.8995    set_bounds 0.5763    solve 2.2639    add 0.5572    
Current (lb-rhs): -0.23222589492797852
6242 domains visited
Cumulative time: 4.725980281829834

BaB round 9
batch: 2634
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 165] [/input-8, 1574] [/input-8, 1574] [/input-8, 1246] [/input-8, 149] [/input-12, 71] [/input-8, 1262] [/input-8, 1574] [/input-12, 71] [/input-8, 1574] 
cut re-enabled after branching node selection
0 lb beta sum: 0.3182254731655121, worst -0.22814273834228516
10 lb beta sum: 0.3182254731655121, worst -0.2282545566558838
Time: prepare 0.2384    bound 0.2906    transfer 0.0492    finalize 0.2038    func 0.8160    
Accumulated time: func 3.2661    prepare 0.6275    bound 2.2023    transfer 0.0906    finalize 0.2608    
all_split False
======================Cut inference begins======================
max lb tensor(0.03046298) min lb tensor(-0.22803223)
Number of Verified Splits: 417 of 5268
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0007262229919433594 
BICCOS Cumulative time: 0.11681485176086426
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22803 (17), -0.22778 (17), -0.22610 (17), -0.22603 (17), -0.22466 (17), -0.22443 (17), -0.22426 (17), -0.22426 (17), -0.22394 (17), -0.22391 (17), -0.22314 (17), -0.22283 (17), -0.22265 (17), -0.22264 (17), -0.22263 (17), -0.22256 (17), -0.22221 (17), -0.22177 (17), -0.22097 (17), -0.22037 (17), 
Length of domains: 4851
Time: pickout 0.0407    decision 0.1546    set_bounds 0.2160    solve 0.8176    add 0.0287    
Accumulated time: pickout 0.0976    decision 1.0542    set_bounds 0.7923    solve 3.0814    add 0.5859    
Current (lb-rhs): -0.22803223133087158
11093 domains visited
Cumulative time: 5.992321968078613

BaB round 10
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 141] [/input-12, 71] [/input-8, 26] [/input-8, 788] [/input-8, 141] [/input-8, 156] [/input-8, 1261] [/input-12, 71] [/input-8, 1241] [/input-12, 71] 
cut re-enabled after branching node selection
0 lb beta sum: 0.30658459663391113, worst -0.22533082962036133
10 lb beta sum: 0.30658459663391113, worst -0.22528541088104248
Time: prepare 0.3735    bound 0.4147    transfer 0.0649    finalize 0.0480    func 0.9544    
Accumulated time: func 4.2205    prepare 1.0012    bound 2.6170    transfer 0.1555    finalize 0.3088    
all_split False
======================Cut inference begins======================
max lb tensor(0.03421330) min lb tensor(-0.22524798)
Number of Verified Splits: 605 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0005195140838623047 
BICCOS Cumulative time: 0.11733436584472656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22525 (18), -0.22360 (18), -0.22357 (18), -0.22168 (18), -0.22149 (18), -0.22145 (18), -0.22129 (18), -0.22062 (18), -0.22016 (18), -0.22013 (18), -0.22006 (18), -0.22002 (18), -0.21921 (18), -0.21905 (18), -0.21852 (18), -0.21834 (18), -0.21787 (18), -0.21782 (18), -0.21777 (18), -0.21715 (18), 
Length of domains: 8342
Time: pickout 0.0598    decision 0.2314    set_bounds 0.4998    solve 0.9565    add 0.0335    
Accumulated time: pickout 0.1574    decision 1.2855    set_bounds 1.2921    solve 4.0379    add 0.6194    
Current (lb-rhs): -0.22524797916412354
18680 domains visited
current_vram/total_varm: 10.3GB/99.9GB, batch_size increase to 8192
Cumulative time: 7.786478519439697

BaB round 11
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1574] [/input-8, 1238] [/input-8, 141] [/input-8, 141] [/input-8, 1262] [/input, 2971] [/input-8, 162] [/input-8, 1246] [/input-12, 71] [/input-8, 156] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2958570122718811, worst -0.21895623207092285
10 lb beta sum: 0.2958570122718811, worst -0.21954715251922607
Time: prepare 0.7512    bound 0.7584    transfer 0.1135    finalize 0.1124    func 1.8415    
Accumulated time: func 6.0620    prepare 1.7528    bound 3.3754    transfer 0.2689    finalize 0.4212    
all_split False
======================Cut inference begins======================
max lb tensor(0.02210581) min lb tensor(-0.21886635)
Number of Verified Splits: 1263 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0007734298706054688 
BICCOS Cumulative time: 0.11810779571533203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21887 (19), -0.21882 (19), -0.21774 (19), -0.21738 (19), -0.21728 (19), -0.21717 (19), -0.21645 (19), -0.21611 (19), -0.21604 (19), -0.21542 (19), -0.21528 (19), -0.21526 (19), -0.21517 (19), -0.21516 (19), -0.21468 (19), -0.21443 (19), -0.21430 (19), -0.21430 (19), -0.21422 (19), -0.21415 (19), 
Length of domains: 15271
Time: pickout 0.1169    decision 0.6487    set_bounds 0.8920    solve 1.8452    add 0.1286    
Accumulated time: pickout 0.2743    decision 1.9342    set_bounds 2.1841    solve 5.8831    add 0.7479    
Current (lb-rhs): -0.21886634826660156
33801 domains visited
current_vram/total_varm: 19.7GB/99.9GB, batch_size increase to 16384
Cumulative time: 11.442630767822266

BaB round 12
batch: 15271
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 26] [/input-8, 165] [/input-8, 1241] [/input-8, 173] [/input-8, 141] [/input-12, 71] [/input-8, 1246] [/input-8, 156] [/input-8, 162] [/input-8, 788] 
cut re-enabled after branching node selection
0 lb beta sum: 0.28765612840652466, worst -0.2129439115524292
10 lb beta sum: 0.28765612840652466, worst -0.2139502763748169
Time: prepare 1.4117    bound 1.3576    transfer 0.1773    finalize 0.2093    func 3.3534    
Accumulated time: func 9.4154    prepare 3.1649    bound 4.7329    transfer 0.4463    finalize 0.6305    
all_split False
======================Cut inference begins======================
max lb tensor(0.02633452) min lb tensor(-0.21289814)
Number of Verified Splits: 2401 of 30542
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0006661415100097656 
BICCOS Cumulative time: 0.1187739372253418
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21290 (20), -0.21281 (20), -0.21191 (20), -0.21173 (20), -0.21127 (20), -0.21118 (20), -0.21114 (20), -0.21113 (20), -0.21103 (20), -0.21052 (20), -0.21030 (20), -0.21007 (20), -0.21001 (20), -0.20991 (20), -0.20987 (20), -0.20976 (20), -0.20957 (20), -0.20929 (20), -0.20927 (20), -0.20919 (20), 
Length of domains: 28141
Time: pickout 0.2920    decision 1.1116    set_bounds 1.8243    solve 3.3587    add 0.1190    
Accumulated time: pickout 0.5663    decision 3.0458    set_bounds 4.0085    solve 9.2418    add 0.8669    
Current (lb-rhs): -0.2128981351852417
61942 domains visited
Cumulative time: 18.192814588546753

BaB round 13
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 170] [/input-8, 788] [/input-8, 788] [/input-12, 71] [/input-8, 1246] [/input-8, 165] [/input-8, 156] [/input-12, 71] [/input-12, 71] [/input-8, 944] 
cut re-enabled after branching node selection
0 lb beta sum: 0.28257185220718384, worst -0.2094283103942871
10 lb beta sum: 0.28257185220718384, worst -0.20939719676971436
Time: prepare 1.5307    bound 1.4485    transfer 0.1850    finalize 0.5576    func 3.9405    
Accumulated time: func 13.3559    prepare 4.6959    bound 6.1814    transfer 0.6312    finalize 1.1881    
all_split False
======================Cut inference begins======================
max lb tensor(0.05259347) min lb tensor(-0.20937085)
Number of Verified Splits: 2645 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0006430149078369141 
BICCOS Cumulative time: 0.11941695213317871
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21114 (20), -0.21113 (20), -0.21030 (20), -0.20991 (20), -0.20987 (20), -0.20957 (20), -0.20937 (21), -0.20929 (20), -0.20909 (20), -0.20836 (21), -0.20829 (20), -0.20822 (21), -0.20821 (20), -0.20800 (20), -0.20790 (21), -0.20765 (21), -0.20736 (21), -0.20728 (21), -0.20706 (20), -0.20692 (21), 
Length of domains: 41880
Time: pickout 0.2656    decision 1.9638    set_bounds 1.7611    solve 3.9468    add 0.1359    
Accumulated time: pickout 0.8319    decision 5.0096    set_bounds 5.7696    solve 13.1886    add 1.0028    
Current (lb-rhs): -0.2111353874206543
92065 domains visited
current_vram/total_varm: 37.3GB/99.9GB, batch_size increase to 32768
Cumulative time: 26.31677532196045

BaB round 14
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 347] [/input-8, 149] [/input-8, 165] [/input-8, 1246] [/input, 2987] [/input-8, 1372] [/input-8, 147] [/input-8, 1372] [/input-8, 941] [/input-8, 779] 
cut re-enabled after branching node selection
0 lb beta sum: 0.27781516313552856, worst -0.20776426792144775
10 lb beta sum: 0.27781516313552856, worst -0.20768654346466064
Time: prepare 3.0710    bound 8.0393    transfer 0.4235    finalize 1.0867    func 13.0526    
Accumulated time: func 26.4085    prepare 7.7673    bound 14.2207    transfer 1.0548    finalize 2.2748    
all_split False
======================Cut inference begins======================
max lb tensor(0.07360697) min lb tensor(-0.20765901)
Number of Verified Splits: 5680 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0009005069732666016 
BICCOS Cumulative time: 0.12031745910644531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20937 (21), -0.20836 (21), -0.20790 (21), -0.20766 (21), -0.20765 (21), -0.20728 (21), -0.20690 (21), -0.20656 (21), -0.20639 (21), -0.20581 (21), -0.20553 (22), -0.20550 (21), -0.20543 (21), -0.20542 (21), -0.20518 (21), -0.20514 (21), -0.20503 (21), -0.20497 (21), -0.20483 (21), -0.20438 (21), 
Length of domains: 68968
Time: pickout 0.5014    decision 3.3582    set_bounds 3.7770    solve 13.0624    add 2.4876    
Accumulated time: pickout 1.3333    decision 8.3679    set_bounds 9.5466    solve 26.2510    add 3.4904    
Current (lb-rhs): -0.20937085151672363
151921 domains visited
Cumulative time: 49.61748456954956

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1372] [/input-8, 788] [/input-8, 1246] [/input-8, 141] [/input-8, 944] [/input-8, 941] [/input-8, 1241] [/input-8, 1238] [/input-8, 1257] [/input-8, 1238] 
cut re-enabled after branching node selection
0 lb beta sum: 0.27447348833084106, worst -0.2067960500717163
10 lb beta sum: 0.27447348833084106, worst -0.20671117305755615
Time: prepare 3.0819    bound 8.0334    transfer 0.4280    finalize 0.5834    func 12.5642    
Accumulated time: func 38.9727    prepare 10.8495    bound 22.2541    transfer 1.4828    finalize 2.8582    
all_split False
======================Cut inference begins======================
max lb tensor(0.07848048) min lb tensor(-0.20665705)
Number of Verified Splits: 6748 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0010251998901367188 
BICCOS Cumulative time: 0.12134265899658203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20766 (21), -0.20690 (21), -0.20666 (22), -0.20656 (21), -0.20639 (21), -0.20553 (22), -0.20550 (21), -0.20540 (22), -0.20518 (21), -0.20513 (22), -0.20438 (21), -0.20425 (21), -0.20425 (22), -0.20408 (21), -0.20390 (21), -0.20387 (22), -0.20360 (22), -0.20353 (22), -0.20299 (22), -0.20287 (21), 
Length of domains: 94988
Time: pickout 0.5347    decision 3.4498    set_bounds 4.2211    solve 12.5758    add 0.2006    
Accumulated time: pickout 1.8680    decision 11.8176    set_bounds 13.7676    solve 38.8267    add 3.6910    
Current (lb-rhs): -0.20765900611877441
210709 domains visited
Cumulative time: 70.76059651374817

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1265] [/input-8, 1244] [/input-12, 55] [/input-8, 173] [/input, 3246] [/input-8, 1372] [/input-8, 944] [/input-8, 788] [/input-8, 1246] [/input-8, 149] 
cut re-enabled after branching node selection
0 lb beta sum: 0.27123236656188965, worst -0.20517444610595703
10 lb beta sum: 0.27123236656188965, worst -0.20509099960327148
Time: prepare 3.0879    bound 8.0383    transfer 0.4344    finalize 0.5957    func 13.4832    
Accumulated time: func 52.4560    prepare 13.9378    bound 30.2924    transfer 1.9172    finalize 3.4539    
all_split False
======================Cut inference begins======================
max lb tensor(0.11812878) min lb tensor(-0.20505357)
Number of Verified Splits: 6238 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0009851455688476562 
BICCOS Cumulative time: 0.12232780456542969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20666 (22), -0.20540 (22), -0.20513 (22), -0.20505 (22), -0.20448 (22), -0.20399 (22), -0.20382 (22), -0.20360 (22), -0.20353 (22), -0.20331 (22), -0.20299 (22), -0.20293 (23), -0.20289 (22), -0.20273 (22), -0.20271 (22), -0.20264 (22), -0.20234 (22), -0.20230 (22), -0.20228 (22), -0.20214 (22), 
Length of domains: 121518
Time: pickout 0.5229    decision 3.6491    set_bounds 3.6719    solve 13.4918    add 0.2034    
Accumulated time: pickout 2.3910    decision 15.4667    set_bounds 17.4395    solve 52.3186    add 3.8944    
Current (lb-rhs): -0.2066570520401001
270007 domains visited
Cumulative time: 92.40995717048645

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 149] [/input-8, 149] [/input-8, 173] [/input-8, 149] [/input, 2987] [/input-8, 1246] [/input-8, 779] [/input-8, 1372] [/input-8, 1574] [/input-12, 55] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2708337903022766, worst -0.20409417152404785
10 lb beta sum: 0.2708337903022766, worst -0.2040473222732544
Time: prepare 3.1591    bound 8.0390    transfer 0.4522    finalize 1.6568    func 13.7464    
Accumulated time: func 66.2024    prepare 17.0973    bound 38.3314    transfer 2.3694    finalize 5.1107    
all_split False
======================Cut inference begins======================
max lb tensor(0.13038826) min lb tensor(-0.20402300)
Number of Verified Splits: 8387 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0009808540344238281 
BICCOS Cumulative time: 0.12330865859985352
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20505 (22), -0.20448 (22), -0.20402 (23), -0.20399 (22), -0.20382 (22), -0.20331 (22), -0.20293 (23), -0.20289 (22), -0.20278 (23), -0.20247 (23), -0.20234 (22), -0.20230 (22), -0.20184 (22), -0.20166 (22), -0.20165 (23), -0.20132 (22), -0.20130 (23), -0.20118 (22), -0.20095 (23), -0.20094 (23), 
Length of domains: 145899
Time: pickout 0.5333    decision 3.3634    set_bounds 3.8933    solve 13.7592    add 0.1960    
Accumulated time: pickout 2.9242    decision 18.8301    set_bounds 21.3328    solve 66.0778    add 4.0904    
Current (lb-rhs): -0.20505356788635254
327156 domains visited
Cumulative time: 114.31552839279175

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 147] [/input-8, 779] [/input-8, 1652] [/input-8, 1556] [/input-8, 1241] [/input-8, 1265] [/input-8, 1372] [/input-8, 141] [/input-8, 779] [/input-8, 1262] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2665267288684845, worst -0.20088839530944824
10 lb beta sum: 0.2665267288684845, worst -0.20082330703735352
Time: prepare 3.1070    bound 8.0342    transfer 0.4533    finalize 0.6479    func 13.8868    
Accumulated time: func 80.0891    prepare 20.2048    bound 46.3656    transfer 2.8227    finalize 5.7587    
all_split False
======================Cut inference begins======================
max lb tensor(0.12163496) min lb tensor(-0.20079505)
Number of Verified Splits: 7700 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0011515617370605469 
BICCOS Cumulative time: 0.12446022033691406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20505 (22), -0.20448 (22), -0.20402 (23), -0.20399 (22), -0.20382 (22), -0.20331 (22), -0.20289 (22), -0.20278 (23), -0.20247 (23), -0.20230 (22), -0.20184 (22), -0.20166 (22), -0.20132 (22), -0.20095 (23), -0.20094 (23), -0.20089 (23), -0.20080 (24), -0.20068 (23), -0.20058 (23), -0.20048 (23), 
Length of domains: 170967
Time: pickout 0.5412    decision 3.3770    set_bounds 4.1340    solve 13.8980    add 0.2033    
Accumulated time: pickout 3.4655    decision 22.2071    set_bounds 25.4669    solve 79.9758    add 4.2937    
Current (lb-rhs): -0.20505356788635254
384992 domains visited
Cumulative time: 136.6054446697235

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 944] [/input-8, 149] [/input-12, 55] [/input-8, 1181] [/input-8, 941] [/input-8, 1238] [/input-8, 1241] [/input-8, 1372] [/input-8, 1241] [/input-8, 1181] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2669152617454529, worst -0.2031174898147583
10 lb beta sum: 0.2669152617454529, worst -0.20327043533325195
Time: prepare 3.1390    bound 8.0440    transfer 0.4803    finalize 0.6833    func 12.7712    
Accumulated time: func 92.8603    prepare 23.3442    bound 54.4096    transfer 3.3030    finalize 6.4420    
all_split False
======================Cut inference begins======================
max lb tensor(0.12035680) min lb tensor(-0.20303297)
Number of Verified Splits: 8153 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.009531259536743164 
BICCOS Cumulative time: 0.13399147987365723
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20402 (23), -0.20303 (23), -0.20278 (23), -0.20247 (23), -0.20242 (23), -0.20198 (23), -0.20178 (23), -0.20151 (23), -0.20095 (23), -0.20094 (23), -0.20089 (23), -0.20080 (24), -0.20068 (23), -0.20058 (23), -0.20054 (23), -0.20043 (23), -0.20040 (23), -0.20019 (23), -0.20009 (23), -0.20008 (23), 
Length of domains: 195582
Time: pickout 0.5407    decision 3.3750    set_bounds 4.3651    solve 12.7891    add 0.2141    
Accumulated time: pickout 4.0062    decision 25.5821    set_bounds 29.8320    solve 92.7649    add 4.5078    
Current (lb-rhs): -0.20402300357818604
442375 domains visited
Cumulative time: 158.10607242584229

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 944] [/input-8, 788] [/input-8, 1244] [/input-8, 162] [/input-8, 347] [/input-8, 1265] [/input, 3246] [/input-8, 1265] [/input-8, 788] [/input-8, 1238] 
cut re-enabled after branching node selection
0 lb beta sum: 0.263979971408844, worst -0.2019810676574707
10 lb beta sum: 0.263979971408844, worst -0.2019209861755371
Time: prepare 3.2438    bound 8.0402    transfer 0.5317    finalize 2.2230    func 14.4607    
Accumulated time: func 107.3211    prepare 26.5885    bound 62.4498    transfer 3.8346    finalize 8.6650    
all_split False
======================Cut inference begins======================
max lb tensor(0.12497663) min lb tensor(-0.20188773)
Number of Verified Splits: 8085 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0009455680847167969 
BICCOS Cumulative time: 0.13493704795837402
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20303 (23), -0.20242 (23), -0.20198 (23), -0.20189 (24), -0.20178 (23), -0.20151 (23), -0.20089 (23), -0.20080 (24), -0.20065 (24), -0.20054 (23), -0.20043 (23), -0.20029 (24), -0.20019 (23), -0.19984 (23), -0.19951 (24), -0.19915 (23), -0.19914 (23), -0.19912 (24), -0.19907 (24), -0.19894 (23), 
Length of domains: 220265
Time: pickout 0.5524    decision 4.2979    set_bounds 3.2450    solve 14.4720    add 0.2129    
Accumulated time: pickout 4.5586    decision 29.8800    set_bounds 33.0770    solve 107.2369    add 4.7207    
Current (lb-rhs): -0.2030329704284668
499826 domains visited
Cumulative time: 181.04643321037292

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 173] [/input-8, 1238] [/input, 3246] [/input-8, 1244] [/input-8, 1574] [/input-8, 1372] [/input-8, 944] [/input-8, 788] [/input-8, 1241] [/input, 924] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2675434350967407, worst -0.1986480951309204
10 lb beta sum: 0.2675434350967407, worst -0.19910061359405518
Time: prepare 3.1859    bound 8.0357    transfer 0.6281    finalize 0.6562    func 12.9329    
Accumulated time: func 120.2539    prepare 29.7747    bound 70.4855    transfer 4.4628    finalize 9.3212    
all_split False
======================Cut inference begins======================
max lb tensor(0.15896654) min lb tensor(-0.19858646)
Number of Verified Splits: 9330 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0012369155883789062 
BICCOS Cumulative time: 0.13617396354675293
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20303 (23), -0.20242 (23), -0.20198 (23), -0.20189 (24), -0.20178 (23), -0.20151 (23), -0.20080 (24), -0.20065 (24), -0.20054 (23), -0.20043 (23), -0.20029 (24), -0.20019 (23), -0.19984 (23), -0.19951 (24), -0.19914 (23), -0.19912 (24), -0.19907 (24), -0.19894 (23), -0.19885 (23), -0.19876 (23), 
Length of domains: 243703
Time: pickout 0.5776    decision 3.3972    set_bounds 4.8579    solve 12.9492    add 0.2177    
Accumulated time: pickout 5.1362    decision 33.2772    set_bounds 37.9349    solve 120.1861    add 4.9384    
Current (lb-rhs): -0.2030329704284668
556032 domains visited
Time out!!!!!!!!
Result: unknown in 207.4833 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 60, vnnlib ID: 60 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.67420197, -25.24380302, -28.67889023, -28.16714287, -31.08404350,
         -29.38106728, -30.15142441, -31.47988510, -26.39269066, -27.12945747]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [576]; unstable size 576; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 131, 1, 576] with unstable size 130 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 576] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 576] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [130]; unstable size 130; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 130] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 130] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.58424473, 2.27789736, 1.83070803, 4.66640234, 2.88375092, 3.73132515,
         4.99384832, 0.22025633, 1.28892243]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0473 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 61, vnnlib ID: 61 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.82417488, -22.89990807, -24.55294609, -25.83590508, -23.99347115,
         -26.13236237, -25.80495453, -25.02459717, -21.89008331, -22.53929710]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [969]; unstable size 969; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 342, 1, 969] with unstable size 341 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 969] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 969] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [341]; unstable size 341; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 341] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 341] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.74619818,  0.19975376,  1.29172385, -0.31224155,  1.47659254,
          0.91263306,  0.33260220, -2.13532114, -1.77720308]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.82417488, -22.89990807, -24.55294609, -25.83590508, -23.99347115,
         -26.13236237, -25.80495453, -25.02459717, -21.89008331, -22.53929710]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.82417488, -22.89990807, -24.55294800, -25.83590889, -23.99347305,
          -26.13236427, -25.80495453, -25.02459717, -21.89008522, -22.53930092],
         [-22.82417488, -22.89990807, -24.55294800, -25.83590889, -23.99347305,
          -26.13236427, -25.80495453, -25.02459717, -21.89008522, -22.53930092]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.07573318,  1.16929817, -0.93408966, -0.28487396]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0511 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 62, vnnlib ID: 62 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.59115791, -34.97940826, -33.80213165, -37.62691879, -34.83726883,
         -38.96181488, -38.03176880, -36.83436584, -27.23085785, -35.44748306]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [675]; unstable size 675; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 675] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 675] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 675] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 186] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.53111219,  6.68231153,  5.40997410,  9.09447956,  6.24459076,
         10.17940712,  9.45173359,  8.14738464,  7.13950729]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0363 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 63, vnnlib ID: 63 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.97131920, -28.80028915, -23.13581467, -25.54052544, -23.92788124,
         -24.59213448, -25.03964615, -26.08118820, -27.66898346, -29.01627922]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [591]; unstable size 591; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 127, 1, 591] with unstable size 126 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 591] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 591] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [126]; unstable size 126; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 126] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 126] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.02588892,  2.80756664, -2.69469118, -0.18732291, -1.80930626,
         -1.25439477,  0.15932620,  1.76952982,  3.03217888]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.97131920, -28.80028915, -23.13581467, -25.54052544, -23.92788124,
         -24.59213448, -25.03964615, -26.08118820, -27.66898346, -29.01627922]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.97132111, -28.80028915, -23.13581467, -25.54052544, -23.92788315,
          -24.59213638, -25.03964615, -26.08118629, -27.66898155, -29.01628113],
         [-26.97132111, -28.80028915, -23.13581467, -25.54052544, -23.92788315,
          -24.59213638, -25.03964615, -26.08118629, -27.66898155, -29.01628113]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.90383148,  0.50087929, -1.11176300, -0.44750977]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0644 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 64, vnnlib ID: 64 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.24694061, -22.01322937, -12.40090942, -15.54353809, -13.43921661,
         -15.79218292, -15.07034302, -17.14505386, -19.37706184, -21.17110634]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1119]; unstable size 1119; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 287, 1, 1119] with unstable size 286 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 1119] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1119] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [286]; unstable size 286; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 286] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 286] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.60318422,  7.55680847,  1.79625535, -0.18556562,  1.88933873,
          1.24666572,  2.70504045,  5.15829563,  6.78245783]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.24694061, -22.01322937, -12.40090942, -15.54353809, -13.43921661,
         -15.79218292, -15.07034302, -17.14505386, -19.37706184, -21.17110634]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.84it/s]100%|██████████| 1/1 [00:00<00:00,  8.83it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.81141090, -22.45367622, -13.02656364, -15.94076157, -13.62039566,
          -16.16443062, -15.43475914, -17.36662674, -19.76879120, -21.56838036]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.59383202]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1161 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 31.2331485748291
alpha/beta optimization time: 1.2340223789215088
initial alpha-crown bounds: tensor([[ 3.65191245,  7.65019894,  1.84882677, -0.11801726,  1.94617462,
          1.30992186,  2.79970765,  5.27360249,  6.87082052]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.11801725625991821
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.61019682884216
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61015558242798
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61012816429138
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.61010694503784
Verifying property 3 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.11801726]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.24694061, -22.01322937, -12.40090942, -15.54353809, -13.43921661,
        -15.79218292, -15.07034302, -17.14505386, -19.37706184, -21.17110634],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.11801726]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1119
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 284
Node /15 input 0: size torch.Size([100]) unstable 28
-----------------
# of unstable neurons: 1431
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00012803077697753906
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11801612377166748
10 lb beta sum: 0.0, worst -0.11802145838737488
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0535    transfer 0.0001    finalize 0.0001    func 0.0540    
Accumulated time: func 0.0540    prepare 0.0002    bound 0.0535    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 2] 
split level 2: [/input-12, 67] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 97] 
split level 5: [/input-12, 10] 
split level 6: [/input-12, 56] 
split level 7: [/input-12, 68] 
split level 8: [/input-12, 79] 
split level 9: [/input-12, 55] 
split level 10: [/input-12, 83] 
split level 11: [/input-12, 42] 
split level 12: [/input-8, 2013] 
split level 13: [/input-12, 86] 
split level 14: [/input-8, 1069] 
split level 15: [/input-8, 1381] 
split level 16: [/input-8, 181] 
split level 17: [/input-8, 182] 
split level 18: [/input-8, 156] 
split level 19: [/input-8, 2009] 
split level 20: [/input-8, 1076] 
split level 21: [/input-8, 1389] 
split level 22: [/input-8, 1186] 
split level 23: [/input-8, 1372] 
split level 24: [/input-8, 1244] 
split level 25: [/input-8, 2005] 
split level 26: [/input-8, 1181] 
split level 27: [/input-8, 1390] 
split level 28: [/input-8, 171] 
split level 29: [/input-8, 1366] 
split level 30: [/input-12, 35] 
split level 31: [/input-8, 1373] 
split level 32: [/input, 3258] 
split level 33: [/input-8, 1365] 
split level 34: [/input-8, 2012] 
split level 35: [/input-8, 2010] 
split level 36: [/input-8, 101] 
split level 37: [/input, 3206] 
split level 38: [/input-8, 93] 
split level 39: [/input, 968] 
split level 40: [/input-8, 1356] 
split level 41: [/input-8, 354] 
split level 42: [/input, 3273] 
split level 43: [/input-8, 251] 
split level 44: [/input-8, 1367] 
split level 45: [/input, 920] 
split level 46: [/input, 3241] 
split level 47: [/input-8, 252] 
split level 48: [/input-8, 1358] 
split level 49: [/input, 629] 
split level 50: [/input-8, 907] 
split level 51: [/input, 819] 
split level 52: [/input-8, 1369] 
split level 53: [/input-8, 1378] 
split level 54: [/input-8, 102] 
split level 55: [/input-8, 1359] 
split level 56: [/input, 3188] 
split level 57: [/input, 2762] 
split level 58: [/input-8, 1174] 
split level 59: [/input-8, 2008] 
split level 60: [/input-8, 2031] 
split level 61: [/input-8, 1211] 
split level 62: [/input-8, 817] 
split level 63: [/input-8, 203] 
split level 64: [/input-8, 250] 
split level 65: [/input-8, 1385] 
split level 66: [/input-8, 16] 
split level 67: [/input-8, 1377] 
split level 68: [/input-8, 189] 
split level 69: [/input, 804] 
split level 70: [/input-8, 1361] 
split level 71: [/input, 3226] 
split level 72: [/input-8, 1147] 
split level 73: [/input, 2694] 
split level 74: [/input-8, 147] 
split level 75: [/input, 820] 
split level 76: [/input, 3222] 
split level 77: [/input-8, 188] 
split level 78: [/input, 3221] 
split level 79: [/input-8, 1146] 
split level 80: [/input-8, 1185] 
split level 81: [/input, 2867] 
split level 82: [/input, 3171] 
split level 83: [/input-8, 2003] 
split level 84: [/input-8, 23] 
split level 85: [/input-8, 24] 
split level 86: [/input-8, 774] 
split level 87: [/input, 2835] 
split level 88: [/input, 3532] 
split level 89: [/input-8, 337] 
split level 90: [/input, 836] 
split level 91: [/input, 3209] 
split level 92: [/input-8, 1061] 
split level 93: [/input, 835] 
split level 94: [/input, 2678] 
split level 95: [/input-8, 479] 
split level 96: [/input-8, 190] 
split level 97: [/input, 803] 
split level 98: [/input-8, 17] 
split level 99: [/input-8, 1386] 
split level 100: [/input, 81] 
split level 101: [/input, 3464] 
split level 102: [/input, 936] 
split level 103: [/input, 2883] 
split level 104: [/input, 825] 
split level 105: [/input, 2697] 
split level 106: [/input, 2865] 
split level 107: [/input, 2851] 
split level 108: [/input, 2866] 
split level 109: [/input-8, 1398] 
split level 110: [/input, 3238] 
split level 111: [/input, 940] 
split level 112: [/input-8, 249] 
split level 113: [/input, 2696] 
split level 114: [/input, 3187] 
split level 115: [/input-8, 1399] 
split level 116: [/input-8, 32] 
split level 117: [/input-8, 607] 
split level 118: [/input, 2882] 
split level 119: [/input-8, 809] 
split level 120: [/input-8, 336] 
split level 121: [/input, 3146] 
split level 122: [/input, 2881] 
split level 123: [/input, 2849] 
split level 124: [/input, 2748] 
split level 125: [/input, 3155] 
split level 126: [/input, 2764] 
split level 127: [/input, 3500] 
split level 128: [/input, 3484] 
split level 129: [/input, 909] 
split level 130: [/input-8, 992] 
split level 131: [/input, 49] 
split level 132: [/input, 50] 
split level 133: [/input, 808] 
split level 134: [/input, 78] 
split level 135: [/input, 1401] 
split level 136: [/input, 2852] 
split level 137: [/input, 841] 
split level 138: [/input, 97] 
split level 139: [/input, 2913] 
split level 140: [/input, 115] 
split level 141: [/input, 3303] 
split level 142: [/input, 293] 
split level 143: [/input, 3562] 
split level 144: [/input, 98] 
split level 145: [/input, 110] 
split level 146: [/input, 82] 
split level 147: [/input, 65] 
split level 148: [/input, 3530] 
split level 149: [/input, 142] 
split level 150: [/input, 910] 
split level 151: [/input, 934] 
split level 152: [/input-8, 323] 
split level 153: [/input, 957] 
split level 154: [/input-8, 1199] 
split level 155: [/input-8, 1603] 
split level 156: [/input-8, 1387] 
split level 157: [/input, 62] 
split level 158: [/input, 93] 
split level 159: [/input, 2731] 
split level 160: [/input, 2897] 
split level 161: [/input, 2510] 
split level 162: [/input, 126] 
split level 163: [/input-8, 97] 
split level 164: [/input-8, 255] 
split level 165: [/input, 3028] 
split level 166: [/input, 51] 
split level 167: [/input, 33] 
split level 168: [/input, 113] 
split level 169: [/input, 3006] 
split level 170: [/input, 990] 
split level 171: [/input-8, 85] 
split level 172: [/input, 77] 
split level 173: [/input, 3147] 
split level 174: [/input, 888] 
split level 175: [/input, 2158] 
split level 176: [/input, 2359] 
split level 177: [/input, 99] 
split level 178: [/input, 66] 
split level 179: [/input-8, 1198] 
split level 180: [/input, 2142] 
split level 181: [/input-8, 1355] 
split level 182: [/input, 114] 
split level 183: [/input-8, 771] 
split level 184: [/input, 61] 
split level 185: [/input, 2914] 
split level 186: [/input, 124] 
split level 187: [/input, 2869] 
split level 188: [/input, 2750] 
split level 189: [/input, 3483] 
split level 190: [/input, 2686] 
split level 191: [/input, 274] 
split level 192: [/input, 3469] 
split level 193: [/input, 3113] 
split level 194: [/input, 3517] 
split level 195: [/input, 3132] 
split level 196: [/input, 3114] 
split level 197: [/input, 60] 
split level 198: [/input, 3130] 
split level 199: [/input, 2858] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11798900365829468
10 lb beta sum: 0.0, worst -0.11799567937850952
Time: prepare 0.0116    bound 0.1040    transfer 0.0013    finalize 0.0030    func 0.1226    
Accumulated time: func 0.1766    prepare 0.0217    bound 0.1575    transfer 0.0014    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.26627374) min lb tensor(-0.11798900)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.010681867599487305 
BICCOS Cumulative time: 0.010681867599487305
Preprocessing time: 0.0100250244140625 Inference time: 0.00026988983154296875 Add cuts time: 0.00012183189392089844 Cut analysis time: 0.0002651214599609375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10951 (1), -0.10950 (1), -0.10938 (1), -0.10927 (1), -0.10902 (1), -0.10894 (1), -0.10858 (1), -0.10842 (1), -0.10824 (1), -0.10817 (1), -0.10782 (1), -0.10661 (1), -0.10605 (1), -0.10542 (1), -0.10505 (1), -0.10492 (1), -0.10478 (1), -0.10475 (1), -0.10374 (1), -0.10358 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5250    set_bounds 0.0087    solve 0.1227    add 0.0692    
Accumulated time: pickout 0.0003    decision 0.5250    set_bounds 0.0087    solve 0.1227    add 0.0692    
Current (lb-rhs): -0.10950511693954468
50 domains visited
Cumulative time: 0.7957711219787598

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 2] 
split level 2: [/input-12, 97] [/input-12, 4] [/input-12, 4] [/input-12, 97] [/input-12, 4] [/input-12, 97] [/input-12, 4] [/input-12, 4] [/input-12, 97] [/input-12, 4] 
split level 3: [/input-12, 10] [/input-12, 10] [/input-12, 97] [/input-12, 10] [/input-12, 97] [/input-12, 10] [/input-12, 97] [/input-12, 97] [/input-12, 10] [/input-12, 97] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07104387879371643

all verified at 9th iter
Time: prepare 0.0074    bound 0.0585    transfer 0.0011    finalize 0.0024    func 0.0720    
Accumulated time: func 0.2486    prepare 0.0294    bound 0.2161    transfer 0.0025    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.15370399) min lb tensor(0.00017384)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.035794734954833984 
BICCOS Cumulative time: 0.04647660255432129
Preprocessing time: 0.011731386184692383 Inference time: 0.016390562057495117 Add cuts time: 0.007459163665771484 Cut analysis time: 0.000213623046875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0124    solve 0.0720    add 0.0159    
Accumulated time: pickout 0.0014    decision 0.5445    set_bounds 0.0212    solve 0.1947    add 0.0851    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 58]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.82952102e+16, 1.45129159e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 58]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.82952102e+16, 9.77171212e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 58]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.82952102e+16, 1.44819513e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 58]), tensor([1., 1.]), tensor([0, 0]), tensor([2.82952102e+16, 1.02072015e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.03323808312416077

all verified at 0th iter
Time: prepare 0.0004    bound 0.0043    transfer 0.0001    finalize 0.0001    func 0.0049    
Accumulated time: func 0.2535    prepare 0.0298    bound 0.2203    transfer 0.0026    finalize 0.0057    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 197.44912314414978
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.44904732704163
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.44902205467224
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.44899988174438
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.44891333580017
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.5511 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 65, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.54049110, -19.17367935, -17.10903168, -14.96515083, -17.66605568,
         -15.88734627, -15.45722198, -17.64301682, -16.20054626, -17.64737320]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [578]; unstable size 578; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 153, 1, 578] with unstable size 152 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 578] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 578] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [152]; unstable size 152; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 152] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 152] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.58451456,  2.26354074,  0.51416540, -1.32597971,  0.81974989,
         -0.53718382,  0.88996911, -0.70218801,  0.60620284]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.54049110, -19.17367935, -17.10903168, -14.96515083, -17.66605568,
         -15.88734627, -15.45722198, -17.64301682, -16.20054626, -17.64737320]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.54049110, -19.17367935, -17.10903168, -14.96515179, -17.66605568,
          -15.88734627, -15.45722198, -17.64301872, -16.20054626, -17.64737320],
         [-17.54049110, -19.17367935, -17.10903168, -14.96515179, -17.66605568,
          -15.88734627, -15.45722198, -17.64301872, -16.20054626, -17.64737320]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.49207020,  0.43012428,  0.74332428]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0474 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 66, vnnlib ID: 66 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.25728035, -20.79345703, -15.69333935, -17.69227600, -15.08468628,
         -17.27866936, -15.87126160, -17.97873497, -18.71574402, -20.41540718]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [550]; unstable size 550; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 296, 1, 550] with unstable size 295 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 550] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 550] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [295]; unstable size 295; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 295] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 295] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.52899981,  3.35346937, -0.60972619,  1.57595980,  1.06331658,
         -0.42583442,  1.62264943,  1.54576707,  3.27385855]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.25728035, -20.79345703, -15.69333935, -17.69227600, -15.08468628,
         -17.27866936, -15.87126160, -17.97873497, -18.71574402, -20.41540718]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.61it/s]100%|██████████| 1/1 [00:00<00:00,  8.60it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.80858994, -20.49908066, -15.18002129, -17.42616272, -15.05065727,
          -17.05187988, -15.57818604, -17.85818100, -18.38292313, -20.12383080],
         [-16.80858994, -20.49908066, -15.18002129, -17.42616272, -15.05065727,
          -17.05187988, -15.57818604, -17.85818100, -18.38292313, -20.12383080]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.12936401, 0.52752876]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1192 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 12.63650894165039
alpha/beta optimization time: 1.2386064529418945
initial alpha-crown bounds: tensor([[ 0.60815597,  3.47484589, -0.55310154,  1.62192631,  1.11317503,
         -0.37937427,  1.72037315,  1.66001773,  3.37049150]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.5531015396118164
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.59749293327332
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.59745168685913
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.59742760658264
Verifying property 2 with 1 instances.
##### Instance 66 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.55310154]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.25728035, -20.79345703, -15.69333935, -17.69227600, -15.08468628,
        -17.27866936, -15.87126160, -17.97873497, -18.71574402, -20.41540718],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.55310154]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 550
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 867
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.72747802734375e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5530994534492493
10 lb beta sum: 0.0, worst -0.5531026721000671
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0541    transfer 0.0001    finalize 0.0001    func 0.0546    
Accumulated time: func 0.0546    prepare 0.0002    bound 0.0541    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] 
split level 1: [/input-12, 53] 
split level 2: [/input-12, 8] 
split level 3: [/input-12, 6] 
split level 4: [/input-12, 69] 
split level 5: [/input-12, 72] 
split level 6: [/input-12, 46] 
split level 7: [/input-12, 12] 
split level 8: [/input-12, 49] 
split level 9: [/input-12, 18] 
split level 10: [/input-8, 1726] 
split level 11: [/input-8, 1626] 
split level 12: [/input-12, 7] 
split level 13: [/input-8, 1692] 
split level 14: [/input-8, 1964] 
split level 15: [/input-8, 1693] 
split level 16: [/input-8, 1635] 
split level 17: [/input-12, 20] 
split level 18: [/input-8, 1708] 
split level 19: [/input-8, 420] 
split level 20: [/input-8, 1700] 
split level 21: [/input-8, 1044] 
split level 22: [/input-8, 1630] 
split level 23: [/input-8, 1636] 
split level 24: [/input-8, 1969] 
split level 25: [/input-8, 1622] 
split level 26: [/input-8, 1658] 
split level 27: [/input-8, 468] 
split level 28: [/input-8, 459] 
split level 29: [/input-8, 490] 
split level 30: [/input-8, 1716] 
split level 31: [/input-8, 633] 
split level 32: [/input-8, 1717] 
split level 33: [/input-8, 1650] 
split level 34: [/input-8, 473] 
split level 35: [/input-8, 593] 
split level 36: [/input-8, 1035] 
split level 37: [/input-8, 1403] 
split level 38: [/input-8, 425] 
split level 39: [/input-8, 795] 
split level 40: [/input-8, 466] 
split level 41: [/input-8, 1298] 
split level 42: [/input-8, 1686] 
split level 43: [/input-8, 497] 
split level 44: [/input-8, 458] 
split level 45: [/input-8, 505] 
split level 46: [/input-8, 1703] 
split level 47: [/input-8, 1633] 
split level 48: [/input-8, 1695] 
split level 49: [/input-8, 462] 
split level 50: [/input-8, 1659] 
split level 51: [/input-8, 1268] 
split level 52: [/input-8, 1660] 
split level 53: [/input-8, 1651] 
split level 54: [/input-8, 1972] 
split level 55: [/input-8, 1714] 
split level 56: [/input-8, 1929] 
split level 57: [/input-8, 498] 
split level 58: [/input-8, 433] 
split level 59: [/input-8, 1612] 
split level 60: [/input-8, 92] 
split level 61: [/input-8, 1339] 
split level 62: [/input-8, 1294] 
split level 63: [/input-8, 635] 
split level 64: [/input-8, 506] 
split level 65: [/input-8, 1226] 
split level 66: [/input-8, 939] 
split level 67: [/input, 394] 
split level 68: [/input-8, 1572] 
split level 69: [/input-8, 432] 
split level 70: [/input-8, 438] 
split level 71: [/input-8, 1310] 
split level 72: [/input-8, 1522] 
split level 73: [/input-8, 434] 
split level 74: [/input-8, 1713] 
split level 75: [/input, 2953] 
split level 76: [/input-8, 1252] 
split level 77: [/input-8, 626] 
split level 78: [/input-8, 1789] 
split level 79: [/input-8, 1683] 
split level 80: [/input-8, 1588] 
split level 81: [/input-8, 1306] 
split level 82: [/input, 2938] 
split level 83: [/input, 616] 
split level 84: [/input-8, 900] 
split level 85: [/input-8, 1244] 
split level 86: [/input-8, 1657] 
split level 87: [/input-8, 1314] 
split level 88: [/input-8, 1320] 
split level 89: [/input, 1418] 
split level 90: [/input-8, 439] 
split level 91: [/input-8, 931] 
split level 92: [/input-8, 636] 
split level 93: [/input, 385] 
split level 94: [/input, 2982] 
split level 95: [/input-8, 392] 
split level 96: [/input-8, 413] 
split level 97: [/input, 2931] 
split level 98: [/input-8, 1580] 
split level 99: [/input-8, 1676] 
split level 100: [/input-8, 1978] 
split level 101: [/input-8, 1973] 
split level 102: [/input-8, 76] 
split level 103: [/input-8, 1967] 
split level 104: [/input-8, 1704] 
split level 105: [/input-8, 1790] 
split level 106: [/input-8, 1267] 
split level 107: [/input-8, 329] 
split level 108: [/input, 2906] 
split level 109: [/input-8, 1563] 
split level 110: [/input-8, 918] 
split level 111: [/input-8, 803] 
split level 112: [/input, 1649] 
split level 113: [/input-8, 1649] 
split level 114: [/input-8, 75] 
split level 115: [/input, 1500] 
split level 116: [/input-8, 1531] 
split level 117: [/input, 151] 
split level 118: [/input-8, 1337] 
split level 119: [/input-8, 1331] 
split level 120: [/input-8, 486] 
split level 121: [/input-8, 1604] 
split level 122: [/input-8, 410] 
split level 123: [/input-8, 453] 
split level 124: [/input-8, 629] 
split level 125: [/input-8, 442] 
split level 126: [/input-8, 83] 
split level 127: [/input-8, 416] 
split level 128: [/input-8, 53] 
split level 129: [/input, 2173] 
split level 130: [/input-8, 229] 
split level 131: [/input-8, 445] 
split level 132: [/input, 2547] 
split level 133: [/input-8, 785] 
split level 134: [/input, 4005] 
split level 135: [/input-8, 407] 
split level 136: [/input-8, 74] 
split level 137: [/input-8, 1668] 
split level 138: [/input, 4035] 
split level 139: [/input-8, 73] 
split level 140: [/input, 2186] 
split level 141: [/input, 342] 
split level 142: [/input, 2454] 
split level 143: [/input, 1126] 
split level 144: [/input, 2555] 
split level 145: [/input-8, 15] 
split level 146: [/input, 328] 
split level 147: [/input-8, 319] 
split level 148: [/input-8, 400] 
split level 149: [/input, 2263] 
split level 150: [/input-8, 153] 
split level 151: [/input-8, 1269] 
split level 152: [/input, 169] 
split level 153: [/input, 2538] 
split level 154: [/input, 2961] 
split level 155: [/input-8, 805] 
split level 156: [/input, 2189] 
split level 157: [/input, 2157] 
split level 158: [/input-8, 1775] 
split level 159: [/input-8, 1517] 
split level 160: [/input-8, 1336] 
split level 161: [/input, 2460] 
split level 162: [/input-8, 899] 
split level 163: [/input-8, 311] 
split level 164: [/input-8, 1653] 
split level 165: [/input-8, 1773] 
split level 166: [/input, 3070] 
split level 167: [/input-8, 1289] 
split level 168: [/input-8, 1259] 
split level 169: [/input-8, 78] 
split level 170: [/input, 1512] 
split level 171: [/input, 311] 
split level 172: [/input-8, 1765] 
split level 173: [/input, 344] 
split level 174: [/input-8, 1761] 
split level 175: [/input, 2181] 
split level 176: [/input-8, 1921] 
split level 177: [/input, 2838] 
split level 178: [/input, 3922] 
split level 179: [/input, 3573] 
split level 180: [/input-8, 1776] 
split level 181: [/input, 3557] 
split level 182: [/input, 2165] 
split level 183: [/input, 2519] 
split level 184: [/input-8, 1770] 
split level 185: [/input, 2789] 
split level 186: [/input, 1788] 
split level 187: [/input, 2550] 
split level 188: [/input, 4078] 
split level 189: [/input, 1478] 
split level 190: [/input, 2252] 
split level 191: [/input, 1961] 
split level 192: [/input, 2506] 
split level 193: [/input, 3427] 
split level 194: [/input, 4021] 
split level 195: [/input, 2412] 
split level 196: [/input, 2261] 
split level 197: [/input, 2754] 
split level 198: [/input, 2977] 
split level 199: [/input, 2927] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.55303955078125
10 lb beta sum: 0.0, worst -0.5530364513397217
Time: prepare 0.0114    bound 0.1023    transfer 0.0023    finalize 0.0026    func 0.1211    
Accumulated time: func 0.1757    prepare 0.0216    bound 0.1564    transfer 0.0024    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02364075) min lb tensor(-0.55303574)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.010018348693847656 
BICCOS Cumulative time: 0.010018348693847656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.53740 (1), -0.53731 (1), -0.53722 (1), -0.53664 (1), -0.53656 (1), -0.53620 (1), -0.53602 (1), -0.53593 (1), -0.53592 (1), -0.53563 (1), -0.53561 (1), -0.53534 (1), -0.53448 (1), -0.53391 (1), -0.53284 (1), -0.53260 (1), -0.53131 (1), -0.53113 (1), -0.53052 (1), -0.53031 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5297    set_bounds 0.0087    solve 0.1212    add 0.0730    
Accumulated time: pickout 0.0003    decision 0.5297    set_bounds 0.0087    solve 0.1212    add 0.0730    
Current (lb-rhs): -0.5374038815498352
50 domains visited
Cumulative time: 0.8087358474731445

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 53] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 1: [/input-12, 53] [/input-12, 8] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 8] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 8] 
split level 2: [/input-12, 8] [/input-12, 69] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 8] [/input-12, 69] 
split level 3: [/input-12, 69] [/input-12, 46] [/input-12, 69] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.507929801940918
10 lb beta sum: 0.0, worst -0.5074084401130676
Time: prepare 0.0124    bound 0.0975    transfer 0.0011    finalize 0.0020    func 0.1155    
Accumulated time: func 0.2912    prepare 0.0343    bound 0.2539    transfer 0.0035    finalize 0.0047    
all_split False
======================Cut inference begins======================
max lb tensor(0.18786597) min lb tensor(-0.50735509)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012495040893554688 
BICCOS Cumulative time: 0.022513389587402344
Preprocessing time: 0.011648893356323242 Inference time: 0.0004258155822753906 Add cuts time: 0.0001888275146484375 Cut analysis time: 0.0002315044403076172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26148 (2), -0.26059 (2), -0.25961 (2), -0.25956 (2), -0.25947 (2), -0.25940 (2), -0.25897 (2), -0.25846 (2), -0.25821 (2), -0.25724 (2), -0.25682 (2), -0.25669 (2), -0.25668 (2), -0.25579 (2), -0.25551 (2), -0.25463 (2), -0.25428 (2), -0.25319 (2), -0.24828 (2), -0.24447 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0197    set_bounds 0.0126    solve 0.1156    add 0.0764    
Accumulated time: pickout 0.0013    decision 0.5494    set_bounds 0.0213    solve 0.2368    add 0.1494    
Current (lb-rhs): -0.26147744059562683
100 domains visited
Cumulative time: 1.0472443103790283

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 8] [/input-12, 8] [/input-12, 24] 
split level 1: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 8] 
split level 2: [/input-12, 69] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 69] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-12, 12] [/input-12, 12] [/input-12, 46] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23587146401405334
10 lb beta sum: 0.233213871717453, worst -0.23884592950344086
Time: prepare 0.0065    bound 0.1196    transfer 0.0011    finalize 0.0020    func 0.1324    
Accumulated time: func 0.4237    prepare 0.0412    bound 0.3735    transfer 0.0046    finalize 0.0067    
all_split False
======================Cut inference begins======================
max lb tensor(0.42348194) min lb tensor(-0.23285271)
Number of Verified Splits: 60 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 6
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.015817642211914062 
BICCOS Cumulative time: 0.038331031799316406
Preprocessing time: 0.011658430099487305 Inference time: 0.00278472900390625 Add cuts time: 0.0009055137634277344 Cut analysis time: 0.00046896934509277344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06648 (3), -0.06645 (3), -0.06585 (3), -0.06578 (3), -0.06577 (3), -0.06481 (3), -0.06412 (3), -0.06218 (3), -0.05906 (3), -0.05663 (3), -0.05654 (3), -0.05622 (3), -0.05617 (3), -0.05568 (3), -0.05556 (3), -0.05457 (3), -0.05207 (3), -0.05170 (3), -0.05156 (3), -0.05067 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0211    set_bounds 0.0153    solve 0.1325    add 0.0851    
Accumulated time: pickout 0.0023    decision 0.5704    set_bounds 0.0366    solve 0.3694    add 0.2345    
Current (lb-rhs): -0.0664774477481842
150 domains visited
Cumulative time: 1.3182792663574219

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 53] [/input-12, 24] [/input-12, 24] [/input-12, 8] [/input-12, 8] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 24] [/input-12, 24] 
split level 1: [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-8, 1972] [/input-8, 1716] [/input-12, 12] [/input-12, 12] [/input-8, 1692] [/input-8, 1692] [/input-12, 12] [/input-12, 12] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06905698776245117
10 lb beta sum: 0.21528643369674683, worst -0.06374853849411011
Time: prepare 0.0060    bound 0.1190    transfer 0.0011    finalize 0.0022    func 0.1309    
Accumulated time: func 0.5546    prepare 0.0474    bound 0.4925    transfer 0.0057    finalize 0.0089    
all_split False
======================Cut inference begins======================
max lb tensor(0.23131478) min lb tensor(-0.02562720)
Number of Verified Splits: 375 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.039433956146240234 
BICCOS Cumulative time: 0.07776498794555664
Preprocessing time: 0.011428356170654297 Inference time: 0.021678686141967773 Add cuts time: 0.005876064300537109 Cut analysis time: 0.0004508495330810547
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0199    set_bounds 0.0153    solve 0.1310    add 0.0229    
Accumulated time: pickout 0.0032    decision 0.5903    set_bounds 0.0519    solve 0.5003    add 0.2575    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([9.63595994e-08, 1.38339803e-01, 1.48935720e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8, 69]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([9.63595994e-08, 1.38339803e-01, 9.97982472e-02, 4.32802141e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8, 69]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([9.63595994e-08, 1.38339803e-01, 9.97982472e-02, 1.09022066e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8, 69]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([9.63595994e-08, 7.75276572e-02, 1.39868125e-01, 4.06317860e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8, 69]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([9.63595994e-08, 7.75276572e-02, 1.39868125e-01, 1.02005020e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([9.63595994e-08, 7.75276572e-02, 1.07671514e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53]), tensor([ 1., -1.]), tensor([0, 0]), tensor([8.01933389e-14, 1.40990898e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53]), tensor([1., 1.]), tensor([0, 0]), tensor([8.01933389e-14, 7.94032663e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.39929312467575073
10 lb beta sum: 0.4127468466758728, worst -0.3889930546283722
Time: prepare 0.0004    bound 0.1147    transfer 0.0002    finalize 0.0002    func 0.1155    
Accumulated time: func 0.6701    prepare 0.0479    bound 0.6072    transfer 0.0059    finalize 0.0091    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 69] [/input-12, 8] [/input-12, 8] 
split level 1: [/input-12, 72] [/input-12, 69] [/input-12, 69] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 4: [/input-12, 18] [/input-12, 49] [/input-12, 18] 
split level 5: [/input-12, 49] [/input-12, 18] [/input-12, 49] 
split level 6: [/input-8, 1969] [/input-8, 1626] [/input-8, 1626] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5447230339050293, worst -0.15157128870487213
10 lb beta sum: 0.5897290706634521, worst -0.15076278150081635
Time: prepare 0.0167    bound 0.1193    transfer 0.0025    finalize 0.1527    func 0.2938    
Accumulated time: func 0.9639    prepare 0.0649    bound 0.7265    transfer 0.0084    finalize 0.1618    
all_split False
======================Cut inference begins======================
max lb tensor(0.66887408) min lb tensor(-0.15040429)
Number of Verified Splits: 330 of 384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0004711151123046875 
BICCOS Cumulative time: 0.07823610305786133
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15040 (7), -0.14099 (7), -0.14012 (7), -0.12993 (7), -0.12028 (7), -0.11570 (7), -0.11368 (7), -0.11198 (7), -0.10527 (7), -0.10037 (7), -0.09965 (7), -0.09281 (7), -0.09037 (7), -0.08130 (7), -0.07651 (7), -0.07502 (7), -0.06870 (7), -0.06859 (7), -0.06760 (7), -0.06586 (7), 
Length of domains: 54
Time: pickout 0.0005    decision 0.0203    set_bounds 0.0347    solve 0.2939    add 0.0016    
Accumulated time: pickout 0.0037    decision 0.6106    set_bounds 0.0866    solve 0.7943    add 0.2590    
Current (lb-rhs): -0.15040428936481476
204 domains visited
Cumulative time: 2.0353260040283203

BaB round 2
batch: 54
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-8, 1692] [/input-8, 1692] [/input-8, 1635] [/input-8, 1692] [/input-8, 1692] [/input-8, 1635] [/input-8, 1700] [/input-8, 1692] [/input-8, 1692] [/input-8, 1635] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5094423890113831, worst -0.14516793191432953
10 lb beta sum: 0.5094423890113831, worst -0.14481224119663239
Time: prepare 0.0097    bound 0.1219    transfer 0.0015    finalize 0.0011    func 0.1357    
Accumulated time: func 1.0996    prepare 0.0748    bound 0.8485    transfer 0.0100    finalize 0.1629    
all_split False
======================Cut inference begins======================
max lb tensor(0.35397434) min lb tensor(-0.14465113)
Number of Verified Splits: 130 of 216
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.00034427642822265625 
BICCOS Cumulative time: 0.07858037948608398
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14465 (9), -0.13473 (9), -0.13414 (9), -0.12364 (9), -0.12303 (9), -0.11311 (9), -0.11280 (9), -0.10869 (9), -0.10793 (9), -0.10626 (9), -0.10433 (9), -0.09755 (9), -0.09690 (9), -0.09296 (9), -0.09208 (9), -0.09110 (9), -0.08824 (9), -0.08555 (9), -0.08448 (9), -0.08231 (9), 
Length of domains: 86
Time: pickout 0.0020    decision 0.0175    set_bounds 0.0164    solve 0.1357    add 0.0015    
Accumulated time: pickout 0.0057    decision 0.6281    set_bounds 0.1030    solve 0.9300    add 0.2605    
Current (lb-rhs): -0.1446511298418045
290 domains visited
Cumulative time: 2.209486722946167

BaB round 3
batch: 86
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 7] [/input-8, 1700] [/input-8, 1964] [/input-8, 1964] [/input-8, 1700] [/input-8, 1692] [/input-12, 7] [/input-8, 1700] [/input-12, 7] [/input-12, 7] 
split level 1: [/input-8, 1716] [/input-8, 1716] [/input-8, 1700] [/input-8, 1700] [/input-8, 1630] [/input-12, 7] [/input-8, 1716] [/input-8, 1716] [/input-8, 1700] [/input-8, 1700] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5001319646835327, worst -0.13174773752689362
10 lb beta sum: 0.5001319646835327, worst -0.1313730925321579
Time: prepare 0.0151    bound 0.1165    transfer 0.0017    finalize 0.0020    func 0.1376    
Accumulated time: func 1.2372    prepare 0.0901    bound 0.9650    transfer 0.0117    finalize 0.1649    
all_split False
======================Cut inference begins======================
max lb tensor(0.04241946) min lb tensor(-0.13121398)
Number of Verified Splits: 165 of 344
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0003459453582763672 
BICCOS Cumulative time: 0.07892632484436035
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13121 (11), -0.12109 (11), -0.11871 (11), -0.11802 (11), -0.11254 (11), -0.11055 (11), -0.10832 (11), -0.10781 (11), -0.10585 (11), -0.10413 (11), -0.10163 (11), -0.10091 (11), -0.10016 (11), -0.09977 (11), -0.09570 (11), -0.09445 (11), -0.09418 (11), -0.09334 (11), -0.09022 (11), -0.08991 (11), 
Length of domains: 179
Time: pickout 0.0016    decision 0.0161    set_bounds 0.0223    solve 0.1377    add 0.0013    
Accumulated time: pickout 0.0073    decision 0.6442    set_bounds 0.1253    solve 1.0677    add 0.2618    
Current (lb-rhs): -0.13121397793293
469 domains visited
Cumulative time: 2.3898489475250244

BaB round 4
batch: 179
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-8, 468] [/input-8, 1635] [/input-12, 7] [/input-8, 1692] [/input-8, 1716] [/input-8, 1716] [/input-8, 1635] 
cut re-enabled after branching node selection
0 lb beta sum: 0.48724934458732605, worst -0.12309463322162628
10 lb beta sum: 0.48724934458732605, worst -0.12294812500476837
Time: prepare 0.0155    bound 0.1232    transfer 0.0010    finalize 0.0018    func 0.1438    
Accumulated time: func 1.3811    prepare 0.1057    bound 1.0882    transfer 0.0127    finalize 0.1667    
all_split False
======================Cut inference begins======================
max lb tensor(0.03658310) min lb tensor(-0.12287812)
Number of Verified Splits: 101 of 358
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0003631114959716797 
BICCOS Cumulative time: 0.07928943634033203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12288 (12), -0.12156 (12), -0.11264 (12), -0.11087 (12), -0.11047 (12), -0.10962 (12), -0.10806 (12), -0.10466 (12), -0.10246 (12), -0.09981 (12), -0.09961 (12), -0.09798 (12), -0.09751 (12), -0.09636 (12), -0.09616 (12), -0.09378 (12), -0.09314 (12), -0.09185 (12), -0.09161 (12), -0.09101 (12), 
Length of domains: 257
Time: pickout 0.0026    decision 0.0212    set_bounds 0.0150    solve 0.1440    add 0.0020    
Accumulated time: pickout 0.0099    decision 0.6653    set_bounds 0.1403    solve 1.2117    add 0.2638    
Current (lb-rhs): -0.12287811934947968
726 domains visited
Cumulative time: 2.575826644897461

BaB round 5
batch: 257
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1717] [/input-8, 1630] [/input-8, 1700] [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 420] [/input-8, 468] [/input-8, 468] [/input-8, 1708] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4809074103832245, worst -0.11662633717060089
10 lb beta sum: 0.4809074103832245, worst -0.1164722889661789
Time: prepare 0.0223    bound 0.1257    transfer 0.0030    finalize 0.0027    func 0.1576    
Accumulated time: func 1.5387    prepare 0.1282    bound 1.2139    transfer 0.0157    finalize 0.1694    
all_split False
======================Cut inference begins======================
max lb tensor(0.02007432) min lb tensor(-0.11637340)
Number of Verified Splits: 97 of 514
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0003941059112548828 
BICCOS Cumulative time: 0.07968354225158691
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11637 (13), -0.11564 (13), -0.10876 (13), -0.10628 (13), -0.10450 (13), -0.10448 (13), -0.10421 (13), -0.10332 (13), -0.10229 (13), -0.09971 (13), -0.09873 (13), -0.09689 (13), -0.09511 (13), -0.09453 (13), -0.09394 (13), -0.09274 (13), -0.09271 (13), -0.09157 (13), -0.09098 (13), -0.09033 (13), 
Length of domains: 417
Time: pickout 0.0037    decision 0.0250    set_bounds 0.0215    solve 0.1591    add 0.0114    
Accumulated time: pickout 0.0137    decision 0.6904    set_bounds 0.1618    solve 1.3708    add 0.2752    
Current (lb-rhs): -0.11637340486049652
1143 domains visited
Cumulative time: 2.806483745574951

BaB round 6
batch: 417
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1726] [/input-8, 468] [/input-8, 1964] [/input-8, 459] [/input-8, 1716] [/input-8, 1969] [/input-8, 468] [/input-8, 1964] [/input-8, 459] [/input-8, 1969] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47941845655441284, worst -0.11318685114383698
10 lb beta sum: 0.47941845655441284, worst -0.11313848197460175
Time: prepare 0.0369    bound 0.1311    transfer 0.0041    finalize 0.0047    func 0.1822    
Accumulated time: func 1.7209    prepare 0.1654    bound 1.3450    transfer 0.0198    finalize 0.1741    
all_split False
======================Cut inference begins======================
max lb tensor(0.03019647) min lb tensor(-0.11312537)
Number of Verified Splits: 182 of 834
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.00038623809814453125 
BICCOS Cumulative time: 0.08006978034973145
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11313 (14), -0.11193 (14), -0.10594 (14), -0.10329 (14), -0.10290 (14), -0.10113 (14), -0.10064 (14), -0.09933 (14), -0.09860 (14), -0.09843 (14), -0.09753 (14), -0.09374 (14), -0.09267 (14), -0.09198 (14), -0.09143 (14), -0.09089 (14), -0.09034 (14), -0.08957 (14), -0.08912 (14), -0.08906 (14), 
Length of domains: 652
Time: pickout 0.0250    decision 0.0404    set_bounds 0.0375    solve 0.1825    add 0.0058    
Accumulated time: pickout 0.0386    decision 0.7307    set_bounds 0.1993    solve 1.5533    add 0.2810    
Current (lb-rhs): -0.11312536895275116
1795 domains visited
Cumulative time: 3.0995335578918457

BaB round 7
batch: 652
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1964] [/input-8, 1635] [/input-8, 1630] [/input-8, 1708] [/input-8, 466] [/input-8, 1726] [/input-8, 468] [/input-8, 466] [/input-8, 1726] [/input-8, 1716] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47818711400032043, worst -0.11034481227397919
10 lb beta sum: 0.47818711400032043, worst -0.11032722890377045
Time: prepare 0.0573    bound 0.1339    transfer 0.0044    finalize 0.0060    func 0.2098    
Accumulated time: func 1.9308    prepare 0.2228    bound 1.4789    transfer 0.0242    finalize 0.1801    
all_split False
======================Cut inference begins======================
max lb tensor(0.02677076) min lb tensor(-0.11031656)
Number of Verified Splits: 345 of 1304
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0004782676696777344 
BICCOS Cumulative time: 0.08054804801940918
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11032 (15), -0.10910 (15), -0.10278 (15), -0.09964 (15), -0.09840 (15), -0.09789 (15), -0.09785 (15), -0.09710 (15), -0.09546 (15), -0.09297 (15), -0.09239 (15), -0.09025 (15), -0.08972 (15), -0.08845 (15), -0.08831 (15), -0.08747 (15), -0.08661 (15), -0.08646 (15), -0.08637 (15), -0.08550 (15), 
Length of domains: 959
Time: pickout 0.0097    decision 0.0457    set_bounds 0.0529    solve 0.2108    add 0.0094    
Accumulated time: pickout 0.0483    decision 0.7765    set_bounds 0.2522    solve 1.7640    add 0.2904    
Current (lb-rhs): -0.11031655967235565
2754 domains visited
Cumulative time: 3.4308111667633057

BaB round 8
batch: 959
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 468] [/input-8, 459] [/input-8, 1716] [/input-8, 459] [/input-8, 1716] [/input-8, 1717] [/input-8, 1630] [/input-8, 459] [/input-8, 1716] [/input-8, 1630] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47645121812820435, worst -0.10924093425273895
10 lb beta sum: 0.47645121812820435, worst -0.1092202216386795
Time: prepare 0.0821    bound 0.1483    transfer 0.0059    finalize 0.0079    func 0.2574    
Accumulated time: func 2.1881    prepare 0.3052    bound 1.6272    transfer 0.0301    finalize 0.1880    
all_split False
======================Cut inference begins======================
max lb tensor(0.02383645) min lb tensor(-0.10920407)
Number of Verified Splits: 460 of 1918
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0004363059997558594 
BICCOS Cumulative time: 0.08098435401916504
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10920 (16), -0.10795 (16), -0.10154 (16), -0.09849 (16), -0.09731 (16), -0.09670 (16), -0.09594 (16), -0.09497 (16), -0.09419 (16), -0.09003 (16), -0.08948 (16), -0.08904 (16), -0.08726 (16), -0.08716 (16), -0.08632 (16), -0.08531 (16), -0.08501 (16), -0.08488 (16), -0.08453 (16), -0.08380 (16), 
Length of domains: 1458
Time: pickout 0.0168    decision 0.0632    set_bounds 0.0775    solve 0.2577    add 0.0099    
Accumulated time: pickout 0.0651    decision 0.8397    set_bounds 0.3297    solve 2.0217    add 0.3002    
Current (lb-rhs): -0.10920406877994537
4212 domains visited
Cumulative time: 3.860121488571167

BaB round 9
batch: 1458
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1630] [/input-8, 466] [/input-8, 1630] [/input-8, 466] [/input-8, 466] [/input-8, 1630] [/input-8, 466] [/input-8, 466] [/input-8, 1630] [/input-8, 466] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4755660891532898, worst -0.10062246024608612
10 lb beta sum: 0.4755660891532898, worst -0.10059411823749542
Time: prepare 0.1250    bound 0.1843    transfer 0.0114    finalize 0.0128    func 0.3529    
Accumulated time: func 2.5410    prepare 0.4304    bound 1.8115    transfer 0.0415    finalize 0.2008    
all_split False
======================Cut inference begins======================
max lb tensor(0.02857417) min lb tensor(-0.10058556)
Number of Verified Splits: 679 of 2916
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0004382133483886719 
BICCOS Cumulative time: 0.08142256736755371
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10059 (17), -0.09980 (17), -0.09933 (17), -0.09854 (17), -0.09281 (17), -0.09203 (17), -0.09137 (17), -0.08957 (17), -0.08908 (17), -0.08877 (17), -0.08788 (17), -0.08740 (17), -0.08727 (17), -0.08650 (17), -0.08555 (17), -0.08539 (17), -0.08477 (17), -0.08435 (17), -0.08261 (17), -0.08084 (17), 
Length of domains: 2237
Time: pickout 0.0189    decision 0.0898    set_bounds 0.2825    solve 0.3535    add 0.0157    
Accumulated time: pickout 0.0841    decision 0.9295    set_bounds 0.6122    solve 2.3752    add 0.3160    
Current (lb-rhs): -0.10058556497097015
6449 domains visited
Cumulative time: 4.6271843910217285

BaB round 10
batch: 2237
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1726] [/input-8, 1969] [/input-8, 1969] [/input-8, 1035] [/input-8, 1726] [/input-8, 1969] [/input-8, 1726] [/input-8, 1969] [/input-8, 1695] [/input-8, 459] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47492796182632446, worst -0.0936165601015091
10 lb beta sum: 0.47492796182632446, worst -0.09351189434528351
Time: prepare 0.3283    bound 0.2503    transfer 0.0227    finalize 0.0211    func 0.6514    
Accumulated time: func 3.1924    prepare 0.7590    bound 2.0618    transfer 0.0642    finalize 0.2219    
all_split False
======================Cut inference begins======================
max lb tensor(0.02628410) min lb tensor(-0.09345280)
Number of Verified Splits: 1292 of 4474
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0004680156707763672 
BICCOS Cumulative time: 0.08189058303833008
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09345 (18), -0.09265 (18), -0.09220 (18), -0.09139 (18), -0.09117 (18), -0.09037 (18), -0.08992 (18), -0.08911 (18), -0.08616 (18), -0.08566 (18), -0.08485 (18), -0.08388 (18), -0.08338 (18), -0.08257 (18), -0.08187 (18), -0.08165 (18), -0.08125 (18), -0.08086 (18), -0.08077 (18), -0.08072 (18), 
Length of domains: 3182
Time: pickout 0.0308    decision 0.1316    set_bounds 0.1838    solve 0.6524    add 0.0203    
Accumulated time: pickout 0.1148    decision 1.0611    set_bounds 0.7960    solve 3.0276    add 0.3362    
Current (lb-rhs): -0.09345279633998871
9631 domains visited
Cumulative time: 5.65685772895813

BaB round 11
batch: 3182
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1708] [/input-8, 1714] [/input-8, 1714] [/input-8, 1268] [/input-8, 1708] [/input-8, 1714] [/input-8, 1708] [/input-8, 1714] [/input-8, 466] [/input-8, 1714] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4747770130634308, worst -0.08882759511470795
10 lb beta sum: 0.4747770130634308, worst -0.08868949115276337
Time: prepare 0.2772    bound 0.3285    transfer 0.0307    finalize 0.1834    func 0.8623    
Accumulated time: func 4.0547    prepare 1.0364    bound 2.3902    transfer 0.0949    finalize 0.4053    
all_split False
======================Cut inference begins======================
max lb tensor(0.02742618) min lb tensor(-0.08864959)
Number of Verified Splits: 1676 of 6364
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0007448196411132812 
BICCOS Cumulative time: 0.08263540267944336
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08865 (19), -0.08807 (19), -0.08784 (19), -0.08726 (19), -0.08637 (19), -0.08579 (19), -0.08556 (19), -0.08498 (19), -0.08339 (19), -0.08258 (19), -0.08178 (19), -0.08111 (19), -0.08030 (19), -0.08009 (19), -0.07951 (19), -0.07901 (19), -0.07781 (19), -0.07714 (19), -0.07689 (19), -0.07673 (19), 
Length of domains: 4688
Time: pickout 0.0550    decision 0.1823    set_bounds 0.2652    solve 0.8640    add 0.0227    
Accumulated time: pickout 0.1699    decision 1.2434    set_bounds 1.0612    solve 3.8916    add 0.3589    
Current (lb-rhs): -0.08864958584308624
14319 domains visited
Cumulative time: 7.06165885925293

BaB round 12
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1717] [/input-8, 1693] [/input-8, 1717] [/input-8, 1693] [/input-8, 1717] [/input-8, 1717] [/input-8, 1717] [/input-8, 1708] [/input-8, 1717] [/input-8, 1969] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47467631101608276, worst -0.08331643044948578
10 lb beta sum: 0.47467631101608276, worst -0.08317770063877106
Time: prepare 0.3602    bound 0.4002    transfer 0.0456    finalize 0.0388    func 0.8988    
Accumulated time: func 4.9536    prepare 1.3969    bound 2.7904    transfer 0.1405    finalize 0.4441    
all_split False
======================Cut inference begins======================
max lb tensor(0.02318837) min lb tensor(-0.08310907)
Number of Verified Splits: 2189 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0005605220794677734 
BICCOS Cumulative time: 0.08319592475891113
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08556 (19), -0.08498 (19), -0.08311 (20), -0.08253 (20), -0.08203 (20), -0.08145 (20), -0.08086 (20), -0.08028 (20), -0.07961 (20), -0.07961 (20), -0.07951 (19), -0.07903 (20), -0.07903 (20), -0.07779 (20), -0.07736 (20), -0.07678 (20), -0.07673 (19), -0.07671 (20), -0.07554 (20), -0.07446 (20), 
Length of domains: 6595
Time: pickout 0.0598    decision 0.2281    set_bounds 0.5202    solve 0.9007    add 0.0308    
Accumulated time: pickout 0.2296    decision 1.4715    set_bounds 1.5814    solve 4.7924    add 0.3897    
Current (lb-rhs): -0.08555980026721954
20322 domains visited
current_vram/total_varm: 12.0GB/99.9GB, batch_size increase to 8192
Cumulative time: 8.823906421661377

BaB round 13
batch: 6595
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1969] [/input-8, 1972] [/input-8, 506] [/input-8, 506] [/input-8, 1972] [/input-8, 466] [/input-8, 438] [/input-8, 466] [/input-8, 1717] [/input-8, 466] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47461915016174316, worst -0.07990966737270355
10 lb beta sum: 0.47461915016174316, worst -0.07982350885868073
Time: prepare 0.5923    bound 0.6086    transfer 0.0783    finalize 0.0680    func 1.4321    
Accumulated time: func 6.3857    prepare 1.9896    bound 3.3990    transfer 0.2188    finalize 0.5121    
all_split False
======================Cut inference begins======================
max lb tensor(0.03385015) min lb tensor(-0.07977693)
Number of Verified Splits: 4829 of 13190
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0008196830749511719 
BICCOS Cumulative time: 0.0840156078338623
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07978 (20), -0.07920 (20), -0.07736 (20), -0.07685 (21), -0.07678 (20), -0.07627 (21), -0.07577 (21), -0.07571 (21), -0.07519 (21), -0.07510 (21), -0.07462 (21), -0.07402 (21), -0.07394 (21), -0.07370 (21), -0.07336 (21), -0.07326 (21), -0.07325 (21), -0.07309 (21), -0.07268 (21), -0.07267 (21), 
Length of domains: 8361
Time: pickout 0.1185    decision 0.3703    set_bounds 0.9129    solve 1.4354    add 0.0444    
Accumulated time: pickout 0.3481    decision 1.8418    set_bounds 2.4943    solve 6.2278    add 0.4341    
Current (lb-rhs): -0.07977692782878876
28683 domains visited
Cumulative time: 11.745407819747925

BaB round 14
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1035] [/input-8, 1035] [/input-8, 1693] [/input-8, 1693] [/input-8, 1714] [/input-8, 1714] [/input-8, 1714] [/input-8, 459] [/input-8, 1714] [/input-8, 1693] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47462451457977295, worst -0.0742744654417038
10 lb beta sum: 0.47462451457977295, worst -0.0741957277059555
Time: prepare 0.7261    bound 0.7374    transfer 0.0738    finalize 0.0815    func 1.7243    
Accumulated time: func 8.1100    prepare 2.7160    bound 4.1364    transfer 0.2926    finalize 0.5936    
all_split False
======================Cut inference begins======================
max lb tensor(0.03132351) min lb tensor(-0.07416160)
Number of Verified Splits: 4769 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0006039142608642578 
BICCOS Cumulative time: 0.08461952209472656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07416 (22), -0.07394 (21), -0.07358 (22), -0.07336 (21), -0.07306 (22), -0.07303 (22), -0.07285 (21), -0.07262 (21), -0.07249 (22), -0.07242 (22), -0.07227 (21), -0.07201 (21), -0.07193 (22), -0.07132 (22), -0.07100 (22), -0.07048 (22), -0.07047 (22), -0.07039 (22), -0.07035 (21), -0.07011 (21), 
Length of domains: 11784
Time: pickout 0.1203    decision 0.6637    set_bounds 0.9295    solve 1.7284    add 0.0586    
Accumulated time: pickout 0.4685    decision 2.5055    set_bounds 3.4238    solve 7.9562    add 0.4927    
Current (lb-rhs): -0.0741616040468216
40298 domains visited
current_vram/total_varm: 22.1GB/99.9GB, batch_size increase to 16384
Cumulative time: 15.293777704238892

BaB round 15
batch: 11784
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1630] [/input-8, 1630] [/input-8, 1695] [/input-8, 1630] [/input-8, 1630] [/input-8, 438] [/input-8, 1630] [/input-8, 438] [/input-8, 1630] [/input-8, 438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47463011741638184, worst -0.07135997712612152
10 lb beta sum: 0.47463011741638184, worst -0.0712820440530777
Time: prepare 1.2638    bound 1.0328    transfer 0.1374    finalize 0.1272    func 2.7177    
Accumulated time: func 10.8277    prepare 3.9803    bound 5.1692    transfer 0.4300    finalize 0.7208    
all_split False
======================Cut inference begins======================
max lb tensor(0.03281446) min lb tensor(-0.07124679)
Number of Verified Splits: 8823 of 23568
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0007517337799072266 
BICCOS Cumulative time: 0.08537125587463379
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07125 (22), -0.07102 (23), -0.07066 (22), -0.07053 (23), -0.07014 (22), -0.06994 (23), -0.06990 (22), -0.06989 (23), -0.06957 (22), -0.06945 (23), -0.06938 (23), -0.06929 (22), -0.06882 (23), -0.06830 (23), -0.06785 (23), -0.06756 (22), -0.06733 (23), -0.06732 (22), -0.06731 (23), -0.06726 (23), 
Length of domains: 14745
Time: pickout 0.2236    decision 0.8679    set_bounds 1.2499    solve 2.7229    add 0.0552    
Accumulated time: pickout 0.6920    decision 3.3734    set_bounds 4.6737    solve 10.6791    add 0.5479    
Current (lb-rhs): -0.07124678790569305
55043 domains visited
Cumulative time: 20.48658537864685

BaB round 16
batch: 14745
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 420] [/input-8, 420] [/input-8, 420] [/input-8, 1964] [/input-8, 420] [/input-8, 1630] [/input-8, 420] [/input-8, 1630] [/input-8, 420] [/input-8, 1630] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4746399223804474, worst -0.06821198761463165
10 lb beta sum: 0.4746399223804474, worst -0.06812690198421478
Time: prepare 1.3245    bound 1.2783    transfer 0.1709    finalize 0.1580    func 3.1209    
Accumulated time: func 13.9486    prepare 5.3051    bound 6.4476    transfer 0.6009    finalize 0.8789    
all_split False
======================Cut inference begins======================
max lb tensor(0.03362055) min lb tensor(-0.06808956)
Number of Verified Splits: 8867 of 29490
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0007729530334472656 
BICCOS Cumulative time: 0.08614420890808105
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06809 (23), -0.06760 (23), -0.06702 (23), -0.06695 (24), -0.06678 (23), -0.06653 (23), -0.06625 (23), -0.06620 (24), -0.06588 (24), -0.06581 (24), -0.06514 (24), -0.06509 (24), -0.06497 (24), -0.06474 (24), -0.06439 (23), -0.06414 (23), -0.06403 (24), -0.06391 (24), -0.06389 (23), -0.06386 (24), 
Length of domains: 20623
Time: pickout 0.2936    decision 1.0890    set_bounds 1.8631    solve 3.1278    add 0.0865    
Accumulated time: pickout 0.9856    decision 4.4624    set_bounds 6.5367    solve 13.8069    add 0.6343    
Current (lb-rhs): -0.068089559674263
75666 domains visited
Cumulative time: 27.03793430328369

BaB round 17
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 438] [/input-8, 438] [/input-8, 438] [/input-8, 1972] [/input-8, 438] [/input-8, 459] [/input-8, 1972] [/input-8, 438] [/input-8, 438] [/input-8, 1972] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4746454656124115, worst -0.06409473717212677
10 lb beta sum: 0.4746454656124115, worst -0.06404297053813934
Time: prepare 1.4764    bound 1.4093    transfer 0.2079    finalize 0.1724    func 3.8615    
Accumulated time: func 17.8101    prepare 6.7819    bound 7.8569    transfer 0.8088    finalize 1.0513    
all_split False
======================Cut inference begins======================
max lb tensor(0.03353079) min lb tensor(-0.06401961)
Number of Verified Splits: 8907 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0008199214935302734 
BICCOS Cumulative time: 0.08696413040161133
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06402 (24), -0.06327 (24), -0.06295 (24), -0.06269 (24), -0.06221 (24), -0.06215 (25), -0.06204 (24), -0.06198 (24), -0.06108 (25), -0.06102 (25), -0.06098 (24), -0.06091 (25), -0.06086 (25), -0.06077 (25), -0.06076 (25), -0.06075 (24), -0.06030 (24), -0.06004 (24), -0.06000 (24), -0.05996 (25), 
Length of domains: 28100
Time: pickout 0.2607    decision 1.9230    set_bounds 2.0882    solve 3.8683    add 0.1005    
Accumulated time: pickout 1.2463    decision 6.3854    set_bounds 8.6249    solve 17.6752    add 0.7349    
Current (lb-rhs): -0.06401960551738739
99527 domains visited
current_vram/total_varm: 40.4GB/99.9GB, batch_size increase to 32768
Cumulative time: 35.38244962692261

BaB round 18
batch: 28100
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1695] [/input-8, 1695] [/input-8, 1695] [/input-8, 1588] [/input-8, 1695] [/input-8, 1588] [/input-8, 1695] [/input-8, 1695] [/input-8, 1252] [/input-8, 1588] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465094923973083, worst -0.05929325520992279
10 lb beta sum: 0.47465094923973083, worst -0.05925910174846649
Time: prepare 2.5164    bound 2.3786    transfer 0.4985    finalize 0.7858    func 6.5383    
Accumulated time: func 24.3484    prepare 9.2987    bound 10.2354    transfer 1.3073    finalize 1.8371    
all_split False
======================Cut inference begins======================
max lb tensor(0.03038855) min lb tensor(-0.05923073)
Number of Verified Splits: 15516 of 56200
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.000990152359008789 
BICCOS Cumulative time: 0.08795428276062012
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05923 (25), -0.05817 (25), -0.05799 (25), -0.05793 (25), -0.05791 (25), -0.05786 (25), -0.05785 (25), -0.05693 (25), -0.05688 (25), -0.05679 (25), -0.05678 (25), -0.05674 (26), -0.05673 (26), -0.05667 (25), -0.05665 (25), -0.05663 (26), -0.05657 (25), -0.05656 (26), -0.05656 (25), -0.05650 (25), 
Length of domains: 40684
Time: pickout 0.5626    decision 2.8608    set_bounds 3.3693    solve 6.5494    add 0.1607    
Accumulated time: pickout 1.8089    decision 9.2462    set_bounds 11.9942    solve 24.2246    add 0.8956    
Current (lb-rhs): -0.059230729937553406
140211 domains visited
Cumulative time: 49.062498331069946

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1588] [/input-8, 1588] [/input-8, 1588] [/input-8, 1588] [/input-8, 1972] [/input-8, 1588] [/input-8, 593] [/input-8, 1972] [/input-8, 1588] [/input-8, 1972] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4746531844139099, worst -0.054971590638160706
10 lb beta sum: 0.4746531844139099, worst -0.054849639534950256
Time: prepare 2.9673    bound 7.9533    transfer 0.5656    finalize 1.0067    func 12.9109    
Accumulated time: func 37.2594    prepare 12.2664    bound 18.1887    transfer 1.8729    finalize 2.8438    
all_split False
======================Cut inference begins======================
max lb tensor(0.01678436) min lb tensor(-0.05477087)
Number of Verified Splits: 22425 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0011653900146484375 
BICCOS Cumulative time: 0.08911967277526855
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05678 (25), -0.05673 (26), -0.05656 (25), -0.05566 (26), -0.05561 (26), -0.05552 (26), -0.05477 (27), -0.05473 (27), -0.05461 (27), -0.05454 (26), -0.05445 (26), -0.05432 (26), -0.05417 (25), -0.05416 (25), -0.05399 (26), -0.05382 (26), -0.05381 (26), -0.05374 (25), -0.05371 (26), -0.05365 (27), 
Length of domains: 51027
Time: pickout 0.5239    decision 3.3391    set_bounds 3.9630    solve 12.9242    add 0.1408    
Accumulated time: pickout 2.3328    decision 12.5854    set_bounds 15.9573    solve 37.1489    add 1.0364    
Current (lb-rhs): -0.05678151547908783
183322 domains visited
Cumulative time: 70.19582033157349

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1622] [/input-8, 1588] [/input-8, 1622] [/input-8, 1714] [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4746531844139099, worst -0.05496321618556976
10 lb beta sum: 0.4746531844139099, worst -0.0548812597990036
Time: prepare 2.9838    bound 7.9550    transfer 0.5693    finalize 0.4322    func 13.0595    
Accumulated time: func 50.3188    prepare 15.2506    bound 26.1437    transfer 2.4421    finalize 3.2760    
all_split False
======================Cut inference begins======================
max lb tensor(0.02556245) min lb tensor(-0.05483438)
Number of Verified Splits: 23885 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0010454654693603516 
BICCOS Cumulative time: 0.0901651382446289
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05483 (27), -0.05381 (26), -0.05371 (27), -0.05371 (26), -0.05363 (27), -0.05363 (27), -0.05350 (27), -0.05275 (26), -0.05265 (26), -0.05260 (26), -0.05259 (26), -0.05254 (26), -0.05251 (27), -0.05251 (26), -0.05249 (26), -0.05243 (27), -0.05243 (26), -0.05242 (27), -0.05230 (27), -0.05212 (27), 
Length of domains: 59910
Time: pickout 0.5500    decision 3.4163    set_bounds 4.2538    solve 13.0704    add 0.1365    
Accumulated time: pickout 2.8828    decision 16.0017    set_bounds 20.2111    solve 50.2193    add 1.1729    
Current (lb-rhs): -0.054834380745887756
224973 domains visited
Cumulative time: 91.88699579238892

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 439] [/input-8, 1588] [/input-8, 439] [/input-8, 439] [/input-8, 1695] [/input-8, 439] [/input-8, 1588] [/input-8, 1588] [/input-8, 1252] [/input-8, 1588] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4746531844139099, worst -0.05204688012599945
10 lb beta sum: 0.4746531844139099, worst -0.05197076499462128
Time: prepare 3.0036    bound 7.9527    transfer 0.5739    finalize 1.2030    func 13.1706    
Accumulated time: func 63.4894    prepare 18.2547    bound 34.0964    transfer 3.0160    finalize 4.4790    
all_split False
======================Cut inference begins======================
max lb tensor(0.09884138) min lb tensor(-0.05192249)
Number of Verified Splits: 24540 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0010063648223876953 
BICCOS Cumulative time: 0.0911715030670166
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05192 (27), -0.05186 (27), -0.05182 (27), -0.05154 (26), -0.05123 (26), -0.05072 (27), -0.05072 (27), -0.05071 (27), -0.05066 (27), -0.05063 (27), -0.05062 (27), -0.05058 (27), -0.05052 (28), -0.05046 (27), -0.05040 (27), -0.05040 (27), -0.05019 (28), -0.04984 (28), -0.04969 (28), -0.04964 (28), 
Length of domains: 68138
Time: pickout 0.5560    decision 3.9933    set_bounds 3.7631    solve 13.1836    add 0.1946    
Accumulated time: pickout 3.4388    decision 19.9950    set_bounds 23.9741    solve 63.4029    add 1.3675    
Current (lb-rhs): -0.05192248523235321
265969 domains visited
Cumulative time: 113.85230708122253

BaB round 22
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1693] [/input-8, 1588] [/input-8, 1588] [/input-8, 1588] [/input-8, 1588] [/input-8, 1588] [/input-8, 1588] [/input-8, 1588] [/input-8, 1588] [/input-8, 1588] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4746531844139099, worst -0.049578770995140076
10 lb beta sum: 0.4746531844139099, worst -0.049530401825904846
Time: prepare 3.0222    bound 7.9528    transfer 0.5713    finalize 1.2869    func 13.2561    
Accumulated time: func 76.7455    prepare 21.2773    bound 42.0492    transfer 3.5873    finalize 5.7659    
all_split False
======================Cut inference begins======================
max lb tensor(0.09824212) min lb tensor(-0.04950990)
Number of Verified Splits: 24096 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.00098419189453125 
BICCOS Cumulative time: 0.09215569496154785
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05192 (27), -0.05072 (27), -0.05071 (27), -0.05062 (27), -0.05052 (28), -0.05046 (27), -0.05040 (27), -0.04964 (28), -0.04951 (27), -0.04938 (27), -0.04938 (28), -0.04937 (28), -0.04924 (28), -0.04923 (28), -0.04921 (27), -0.04921 (27), -0.04868 (28), -0.04853 (28), -0.04852 (28), -0.04849 (28), 
Length of domains: 76810
Time: pickout 0.5620    decision 3.6264    set_bounds 3.9118    solve 13.2705    add 0.1401    
Accumulated time: pickout 4.0008    decision 23.6213    set_bounds 27.8859    solve 76.6733    add 1.5076    
Current (lb-rhs): -0.05192248523235321
307409 domains visited
Cumulative time: 135.62816619873047

BaB round 23
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4746531844139099, worst -0.04803885519504547
10 lb beta sum: 0.4746531844139099, worst -0.047983333468437195
Time: prepare 3.0273    bound 7.9565    transfer 0.5679    finalize 1.3857    func 13.3668    
Accumulated time: func 90.1123    prepare 24.3050    bound 50.0057    transfer 4.1552    finalize 7.1516    
all_split False
======================Cut inference begins======================
max lb tensor(0.09918128) min lb tensor(-0.04796846)
Number of Verified Splits: 24150 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.001146554946899414 
BICCOS Cumulative time: 0.09330224990844727
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04951 (27), -0.04921 (27), -0.04797 (29), -0.04761 (28), -0.04759 (29), -0.04748 (28), -0.04729 (29), -0.04727 (28), -0.04713 (29), -0.04710 (29), -0.04695 (29), -0.04692 (28), -0.04684 (29), -0.04683 (29), -0.04678 (28), -0.04678 (29), -0.04673 (28), -0.04667 (27), -0.04666 (29), -0.04661 (28), 
Length of domains: 85428
Time: pickout 0.5704    decision 3.6905    set_bounds 3.9742    solve 13.3818    add 0.1447    
Accumulated time: pickout 4.5712    decision 27.3119    set_bounds 31.8601    solve 90.0552    add 1.6523    
Current (lb-rhs): -0.04950989782810211
348795 domains visited
Cumulative time: 157.71085143089294

BaB round 24
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-12, 6] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4746531844139099, worst -0.04529614746570587
10 lb beta sum: 0.4746531844139099, worst -0.045212194323539734
Time: prepare 3.0892    bound 7.9556    transfer 0.5905    finalize 1.5992    func 13.6690    
Accumulated time: func 103.7813    prepare 27.3946    bound 57.9613    transfer 4.7457    finalize 8.7508    
all_split False
======================Cut inference begins======================
max lb tensor(0.10191296) min lb tensor(-0.04517557)
Number of Verified Splits: 23837 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0010938644409179688 
BICCOS Cumulative time: 0.09439611434936523
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04797 (29), -0.04761 (28), -0.04710 (29), -0.04692 (28), -0.04684 (29), -0.04683 (29), -0.04673 (28), -0.04666 (29), -0.04661 (29), -0.04646 (28), -0.04632 (28), -0.04632 (28), -0.04618 (28), -0.04613 (28), -0.04610 (29), -0.04598 (29), -0.04597 (29), -0.04594 (29), -0.04590 (28), -0.04578 (28), 
Length of domains: 94359
Time: pickout 0.5885    decision 3.8374    set_bounds 4.0629    solve 13.6847    add 0.1566    
Accumulated time: pickout 5.1597    decision 31.1493    set_bounds 35.9230    solve 103.7399    add 1.8089    
Current (lb-rhs): -0.047968462109565735
390494 domains visited
Cumulative time: 180.32617211341858

BaB round 25
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4746531844139099, worst -0.045124754309654236
10 lb beta sum: 0.4746531844139099, worst -0.04507465660572052
Time: prepare 3.0652    bound 7.9560    transfer 0.6143    finalize 0.4834    func 12.5593    
Accumulated time: func 116.3407    prepare 30.4602    bound 65.9173    transfer 5.3600    finalize 9.2342    
all_split False
======================Cut inference begins======================
max lb tensor(0.10180447) min lb tensor(-0.04505451)
Number of Verified Splits: 25523 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.001302480697631836 
BICCOS Cumulative time: 0.09569859504699707
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04673 (28), -0.04610 (29), -0.04578 (28), -0.04576 (28), -0.04558 (28), -0.04558 (28), -0.04532 (28), -0.04518 (28), -0.04505 (29), -0.04498 (29), -0.04491 (29), -0.04488 (28), -0.04485 (29), -0.04468 (29), -0.04467 (30), -0.04462 (28), -0.04461 (29), -0.04447 (28), -0.04442 (28), -0.04438 (29), 
Length of domains: 101604
Time: pickout 0.5955    decision 3.3741    set_bounds 5.1787    solve 12.5773    add 0.1725    
Accumulated time: pickout 5.7552    decision 34.5234    set_bounds 41.1017    solve 116.3172    add 1.9814    
Current (lb-rhs): -0.04673232138156891
430507 domains visited
Time out!!!!!!!!
Result: unknown in 204.8532 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 67, vnnlib ID: 67 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.84048271, -25.05973816, -15.11311626, -18.68352318, -15.81582832,
         -18.42252541, -17.63798523, -19.13154984, -21.87983513, -23.72045708]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1165]; unstable size 1165; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 251, 1, 1165] with unstable size 250 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 1165] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1165] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [250]; unstable size 250; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 250] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 250] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.62490296,  8.33701706,  2.59462023, -0.24409154,  2.26730299,
          1.36074901,  2.49958324,  5.18873596,  7.07310247]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.84048271, -25.05973816, -15.11311626, -18.68352318, -15.81582832,
         -18.42252541, -17.63798523, -19.13154984, -21.87983513, -23.72045708]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.52it/s]100%|██████████| 1/1 [00:00<00:00,  8.51it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.16553497, -25.42795944, -15.59901142, -19.06851196, -15.92789268,
          -18.74447441, -17.97859573, -19.16351700, -22.21500587, -24.07776833]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.32888126]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1205 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 33.29866027832031
alpha/beta optimization time: 1.2134897708892822
initial alpha-crown bounds: tensor([[ 3.68976164,  8.44124126,  2.63029647, -0.18903518,  2.30742645,
          1.40437734,  2.56474137,  5.28525162,  7.16460037]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.18903517723083496
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6294891834259
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6294481754303
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6294219493866
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6294002532959
Verifying property 3 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.18903518]], device='cuda:0') need to verify.
Model prediction is: tensor([-19.84048271, -25.05973816, -15.11311626, -18.68352318, -15.81582832,
        -18.42252541, -17.63798523, -19.13154984, -21.87983513, -23.72045708],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.18903518]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1165
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 246
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 1435
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010395050048828125
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18903210759162903
10 lb beta sum: 0.0, worst -0.18903020024299622
Time: prepare 0.0002    bound 0.0888    transfer 0.0001    finalize 0.0001    func 0.0892    
Accumulated time: func 0.0892    prepare 0.0002    bound 0.0888    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 59] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 10] 
split level 5: [/input-12, 90] 
split level 6: [/input-12, 56] 
split level 7: [/input-12, 68] 
split level 8: [/input-12, 83] 
split level 9: [/input-12, 55] 
split level 10: [/input-8, 165] 
split level 11: [/input-12, 86] 
split level 12: [/input-8, 907] 
split level 13: [/input-8, 2010] 
split level 14: [/input-8, 877] 
split level 15: [/input-8, 182] 
split level 16: [/input-8, 1186] 
split level 17: [/input-12, 35] 
split level 18: [/input-8, 2017] 
split level 19: [/input-8, 173] 
split level 20: [/input-8, 2018] 
split level 21: [/input-8, 1178] 
split level 22: [/input-8, 1363] 
split level 23: [/input-8, 1193] 
split level 24: [/input-8, 2003] 
split level 25: [/input-8, 1354] 
split level 26: [/input-8, 1185] 
split level 27: [/input-8, 2026] 
split level 28: [/input-8, 140] 
split level 29: [/input-8, 2000] 
split level 30: [/input-8, 2002] 
split level 31: [/input-8, 1993] 
split level 32: [/input-8, 817] 
split level 33: [/input-8, 801] 
split level 34: [/input-8, 2014] 
split level 35: [/input-8, 1203] 
split level 36: [/input-8, 809] 
split level 37: [/input-8, 1356] 
split level 38: [/input-8, 1992] 
split level 39: [/input-8, 2027] 
split level 40: [/input-8, 175] 
split level 41: [/input-8, 1078] 
split level 42: [/input-8, 2033] 
split level 43: [/input-8, 149] 
split level 44: [/input-8, 810] 
split level 45: [/input, 3147] 
split level 46: [/input-8, 1372] 
split level 47: [/input, 955] 
split level 48: [/input-8, 1382] 
split level 49: [/input, 939] 
split level 50: [/input-8, 39] 
split level 51: [/input, 3131] 
split level 52: [/input-8, 1201] 
split level 53: [/input-8, 1204] 
split level 54: [/input-8, 2008] 
split level 55: [/input, 3548] 
split level 56: [/input, 891] 
split level 57: [/input, 3026] 
split level 58: [/input-8, 150] 
split level 59: [/input-8, 30] 
split level 60: [/input-8, 793] 
split level 61: [/input-8, 1172] 
split level 62: [/input, 947] 
split level 63: [/input, 963] 
split level 64: [/input, 923] 
split level 65: [/input-8, 47] 
split level 66: [/input-8, 591] 
split level 67: [/input-8, 1383] 
split level 68: [/input, 793] 
split level 69: [/input, 3515] 
split level 70: [/input-8, 19] 
split level 71: [/input, 901] 
split level 72: [/input-8, 1081] 
split level 73: [/input, 3522] 
split level 74: [/input, 3507] 
split level 75: [/input, 3097] 
split level 76: [/input, 1592] 
split level 77: [/input-8, 811] 
split level 78: [/input-8, 1177] 
split level 79: [/input, 917] 
split level 80: [/input, 3221] 
split level 81: [/input-8, 1567] 
split level 82: [/input-8, 167] 
split level 83: [/input, 3538] 
split level 84: [/input, 468] 
split level 85: [/input, 2584] 
split level 86: [/input, 907] 
split level 87: [/input, 3141] 
split level 88: [/input, 481] 
split level 89: [/input, 809] 
split level 90: [/input, 922] 
split level 91: [/input-8, 1357] 
split level 92: [/input, 3190] 
split level 93: [/input, 3491] 
split level 94: [/input-8, 2023] 
split level 95: [/input, 938] 
split level 96: [/input, 3523] 
split level 97: [/input, 3206] 
split level 98: [/input, 3539] 
split level 99: [/input, 3238] 
split level 100: [/input-8, 1381] 
split level 101: [/input, 3158] 
split level 102: [/input, 1340] 
split level 103: [/input, 3499] 
split level 104: [/input, 906] 
split level 105: [/input-8, 802] 
split level 106: [/input, 1357] 
split level 107: [/input, 1358] 
split level 108: [/input, 2637] 
split level 109: [/input, 937] 
split level 110: [/input-8, 623] 
split level 111: [/input, 2850] 
split level 112: [/input-8, 24] 
split level 113: [/input-8, 583] 
split level 114: [/input, 948] 
split level 115: [/input, 3386] 
split level 116: [/input, 846] 
split level 117: [/input, 54] 
split level 118: [/input, 3252] 
split level 119: [/input, 670] 
split level 120: [/input, 465] 
split level 121: [/input, 142] 
split level 122: [/input, 2638] 
split level 123: [/input, 2914] 
split level 124: [/input-8, 1347] 
split level 125: [/input, 158] 
split level 126: [/input, 3506] 
split level 127: [/input, 2913] 
split level 128: [/input, 885] 
split level 129: [/input, 3174] 
split level 130: [/input, 2853] 
split level 131: [/input, 1341] 
split level 132: [/input, 97] 
split level 133: [/input, 3483] 
split level 134: [/input, 2583] 
split level 135: [/input, 2427] 
split level 136: [/input, 2846] 
split level 137: [/input, 3157] 
split level 138: [/input, 65] 
split level 139: [/input, 979] 
split level 140: [/input, 2654] 
split level 141: [/input, 869] 
split level 142: [/input, 3058] 
split level 143: [/input, 3459] 
split level 144: [/input, 876] 
split level 145: [/input, 2851] 
split level 146: [/input, 2087] 
split level 147: [/input, 964] 
split level 148: [/input, 2670] 
split level 149: [/input, 2837] 
split level 150: [/input, 334] 
split level 151: [/input, 78] 
split level 152: [/input, 33] 
split level 153: [/input, 3948] 
split level 154: [/input, 21] 
split level 155: [/input, 3259] 
split level 156: [/input, 791] 
split level 157: [/input-8, 1197] 
split level 158: [/input, 3027] 
split level 159: [/input, 2577] 
split level 160: [/input, 46] 
split level 161: [/input-8, 324] 
split level 162: [/input, 341] 
split level 163: [/input-8, 1268] 
split level 164: [/input, 2881] 
split level 165: [/input, 2882] 
split level 166: [/input, 38] 
split level 167: [/input, 34] 
split level 168: [/input, 53] 
split level 169: [/input, 62] 
split level 170: [/input, 2606] 
split level 171: [/input, 980] 
split level 172: [/input, 836] 
split level 173: [/input, 20] 
split level 174: [/input, 3124] 
split level 175: [/input, 2836] 
split level 176: [/input, 113] 
split level 177: [/input, 3269] 
split level 178: [/input, 2897] 
split level 179: [/input, 87] 
split level 180: [/input, 3140] 
split level 181: [/input, 342] 
split level 182: [/input, 3243] 
split level 183: [/input, 114] 
split level 184: [/input, 36] 
split level 185: [/input, 2578] 
split level 186: [/input, 2661] 
split level 187: [/input, 2110] 
split level 188: [/input, 2898] 
split level 189: [/input, 1486] 
split level 190: [/input, 3475] 
split level 191: [/input, 17] 
split level 192: [/input, 3125] 
split level 193: [/input, 2845] 
split level 194: [/input, 30] 
split level 195: [/input, 1470] 
split level 196: [/input, 951] 
split level 197: [/input, 29] 
split level 198: [/input, 2134] 
split level 199: [/input, 2835] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18894332647323608
10 lb beta sum: 0.0, worst -0.1889432966709137
Time: prepare 0.0114    bound 0.1023    transfer 0.0012    finalize 0.0027    func 0.1201    
Accumulated time: func 0.2094    prepare 0.0213    bound 0.1911    transfer 0.0013    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.23746914) min lb tensor(-0.18894255)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.010909795761108398 
BICCOS Cumulative time: 0.010909795761108398
Preprocessing time: 0.009957551956176758 Inference time: 0.0002593994140625 Add cuts time: 0.00010132789611816406 Cut analysis time: 0.0005915164947509766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18312 (1), -0.18308 (1), -0.18300 (1), -0.18290 (1), -0.18271 (1), -0.18260 (1), -0.18215 (1), -0.18210 (1), -0.18173 (1), -0.18166 (1), -0.18164 (1), -0.18145 (1), -0.18105 (1), -0.18100 (1), -0.18095 (1), -0.18090 (1), -0.18089 (1), -0.18062 (1), -0.18051 (1), -0.18028 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5200    set_bounds 0.0086    solve 0.1202    add 0.0721    
Accumulated time: pickout 0.0003    decision 0.5200    set_bounds 0.0086    solve 0.1202    add 0.0721    
Current (lb-rhs): -0.18312367796897888
50 domains visited
Cumulative time: 0.8365962505340576

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 4] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 2] [/input-12, 2] [/input-12, 10] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 10] [/input-12, 10] [/input-12, 2] [/input-12, 2] 
split level 2: [/input-12, 10] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 10] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 3: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 90] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1610679030418396
10 lb beta sum: 1.0347520112991333, worst -0.11166414618492126
Time: prepare 0.0072    bound 0.1173    transfer 0.0011    finalize 0.0021    func 0.1303    
Accumulated time: func 0.3396    prepare 0.0287    bound 0.3084    transfer 0.0024    finalize 0.0049    
all_split False
======================Cut inference begins======================
max lb tensor(0.39295393) min lb tensor(-0.11152422)
Number of Verified Splits: 139 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.01990485191345215 
BICCOS Cumulative time: 0.030814647674560547
Preprocessing time: 0.011743783950805664 Inference time: 0.005721092224121094 Add cuts time: 0.002106904983520508 Cut analysis time: 0.0003330707550048828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05646 (2), -0.05447 (2), -0.05428 (2), -0.05422 (2), -0.05421 (2), -0.05405 (2), -0.05404 (2), -0.05105 (2), -0.05027 (2), -0.04870 (2), -0.04842 (2), -0.04812 (2), -0.04793 (2), -0.04779 (2), -0.04762 (2), -0.04739 (2), -0.04719 (2), -0.04648 (2), -0.04641 (2), -0.04612 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0123    solve 0.1303    add 0.0869    
Accumulated time: pickout 0.0014    decision 0.5393    set_bounds 0.0209    solve 0.2505    add 0.1590    
Current (lb-rhs): -0.05645805597305298
100 domains visited
Cumulative time: 1.10670804977417

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 10] [/input-12, 90] [/input-12, 90] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 10] [/input-12, 10] [/input-12, 90] 
split level 2: [/input-12, 90] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 90] [/input-12, 90] [/input-12, 10] 
split level 3: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 90] [/input-12, 90] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12349438667297363

all verified at 2th iter
Time: prepare 0.0074    bound 0.0175    transfer 0.0011    finalize 0.0021    func 0.0307    
Accumulated time: func 0.3703    prepare 0.0364    bound 0.3259    transfer 0.0035    finalize 0.0070    
all_split False
======================Cut inference begins======================
max lb tensor(0.35966188) min lb tensor(0.01185077)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 56
#cuts >= 20: 0
BICCOS time: 0.03843569755554199 
BICCOS Cumulative time: 0.06925034523010254
Preprocessing time: 0.011487960815429688 Inference time: 0.01587963104248047 Add cuts time: 0.00991511344909668 Cut analysis time: 0.0011529922485351562
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0189    set_bounds 0.0157    solve 0.0307    add 0.0224    
Accumulated time: pickout 0.0024    decision 0.5583    set_bounds 0.0366    solve 0.2813    add 0.1813    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.82951758e+16, 7.82882422e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.82951758e+16, 2.09926948e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58, 59]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 7.87745565e-02, 1.19703546e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58, 59]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 7.87745565e-02, 6.61085397e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58]), tensor([1., 1.]), tensor([0, 0]), tensor([2.82951758e+16, 2.22904101e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  5
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0807235836982727

all verified at 1th iter
Time: prepare 0.0003    bound 0.0189    transfer 0.0001    finalize 0.0002    func 0.0196    
Accumulated time: func 0.3899    prepare 0.0367    bound 0.3448    transfer 0.0036    finalize 0.0072    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 197.156991481781
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.15691471099854
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.1568899154663
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.15686869621277
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.1568489074707
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.8436 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 68, vnnlib ID: 68 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.55639648, -33.09785080, -28.00553131, -27.40239906, -25.07222748,
         -27.10820198, -28.42906952, -22.25778961, -33.87366104, -32.03707886]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [701]; unstable size 701; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 701] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 701] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 701] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 288] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.60428238, 8.63137341, 4.23884296, 3.83983779, 1.92058945, 3.60424995,
         4.34731817, 9.57411480, 7.57268667]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0534 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 69, vnnlib ID: 69 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.15664101, -31.39657593, -29.82341003, -30.75438118, -29.41454315,
         -31.94305992, -31.96259689, -30.53670311, -26.03734589, -29.66164589]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 659] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 659] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 197] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.00890595, 3.93031955, 2.37446547, 3.40709352, 1.97647142, 4.41568375,
         4.39016771, 2.74542379, 2.46872425]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0629 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 70, vnnlib ID: 70 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.57001877, -21.33278465, -16.48242188, -17.88305855, -15.84688187,
         -18.45724487, -14.43099213, -19.91347122, -21.41075134, -23.09995651]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [825]; unstable size 825; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 238, 1, 825] with unstable size 237 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 825] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 825] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [237]; unstable size 237; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 237] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 237] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.65802526, 4.90856314, 1.05104423, 2.50940752, 0.27425599, 2.85676789,
         3.60879087, 4.98581076, 6.49914980]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0644 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 71, vnnlib ID: 71 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.83767509, -29.44007301, -28.61532784, -29.34156609, -28.70956039,
         -30.31670189, -29.03779984, -30.47285080, -29.20039749, -29.62815285]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [642]; unstable size 642; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 642] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 642] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 642] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 206] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.54946995, 1.96131396, 2.40498424, 1.83005643, 3.13335896, 2.10148072,
         3.19824505, 2.43338418, 2.73391485]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0629 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 72, vnnlib ID: 72 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.50596523, -18.77488327, -14.69626808, -14.34110641, -15.01922321,
         -14.73676872, -15.22504807, -16.18593597, -16.79512215, -17.35581017]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [654]; unstable size 654; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 216, 1, 654] with unstable size 215 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 654] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 654] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [215]; unstable size 215; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 215] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.30025935,  2.79075527, -0.64695990, -0.28283519, -0.00568279,
          0.09187210,  0.48905295,  0.94048798,  1.32147789]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.50596523, -18.77488327, -14.69626808, -14.34110641, -15.01922321,
         -14.73676872, -15.22504807, -16.18593597, -16.79512215, -17.35581017]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.12603951, -18.56119728, -14.27858067, -14.36826992, -14.76897240,
          -14.82524204, -15.17333031, -16.04947662, -16.52157974, -17.18725586],
         [-15.12603951, -18.56119728, -14.27858067, -14.36826992, -14.76897240,
          -14.82524204, -15.17333031, -16.04947662, -16.52157974, -17.18725586]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.75776958, -0.08968925,  0.40070248,  0.45697212]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0442 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 73, vnnlib ID: 73 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.66821480, -25.16157913, -20.16737556, -19.99334526, -19.84637260,
         -20.53302574, -17.62543488, -22.75561523, -24.62155914, -24.01429939]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [562]; unstable size 562; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 329, 1, 562] with unstable size 328 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 562] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 562] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [328]; unstable size 328; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 328] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 328] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.44212151, 5.09512997, 1.39435506, 1.28885651, 0.93852174, 1.63264418,
         3.03026247, 4.88076591, 3.91813183]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0621 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 74, vnnlib ID: 74 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.91881180, -32.59530640, -30.29003906, -30.00774956, -29.24390221,
         -30.22264290, -30.82009125, -25.47676849, -32.91277695, -30.89614296]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [668]; unstable size 668; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 227, 1, 668] with unstable size 226 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 668] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 668] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [226]; unstable size 226; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 226] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 226] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.83449745, 5.22893524, 3.33997321, 3.20848727, 2.84958363, 3.43617344,
         3.74271917, 5.64434624, 3.49464083]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0628 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 75, vnnlib ID: 75 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-31.62759590, -34.41730499, -33.84094238, -35.56791306, -34.24832153,
         -36.28593826, -34.87154770, -35.38038635, -33.02691269, -33.01538467]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [642]; unstable size 642; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 642] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 642] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 642] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 208] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.30125880, 1.11236989, 2.63641620, 1.30713153, 3.22894764, 1.90847635,
         2.05579567, 0.40490288, 0.05632377]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0479 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 76, vnnlib ID: 76 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.32204628, -22.13885498, -16.85369110, -16.62333870, -17.79144096,
         -16.11716270, -17.99398041, -18.48896027, -23.38971329, -20.77302933]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [579]; unstable size 579; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 232, 1, 579] with unstable size 231 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 579] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 579] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [231]; unstable size 231; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 231] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 231] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.71136570,  4.01701736, -0.51415730,  0.11190534,  0.39652085,
          0.75778347,  1.25336623,  4.93491936,  2.87650251]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.32204628, -22.13885498, -16.85369110, -16.62333870, -17.79144096,
         -16.11716270, -17.99398041, -18.48896027, -23.38971329, -20.77302933]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.75it/s]100%|██████████| 1/1 [00:00<00:00,  8.74it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.91181374, -21.90702248, -16.25378609, -16.59039497, -17.33898735,
          -16.20785713, -17.74153519, -18.40582466, -22.94567871, -20.61976624]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04592896]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1169 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 17.178878784179688
alpha/beta optimization time: 1.211061716079712
initial alpha-crown bounds: tensor([[ 2.79542255,  4.10366631, -0.45930862,  0.13562953,  0.45598125,
          0.80009282,  1.31134081,  5.06682491,  2.96922851]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.4593086242675781
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.60749650001526
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.60745906829834
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.60743522644043
Verifying property 2 with 1 instances.
##### Instance 76 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.45930862]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.32204628, -22.13885498, -16.85369110, -16.62333870, -17.79144096,
        -16.11716270, -17.99398041, -18.48896027, -23.38971329, -20.77302933],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.45930862]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 579
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 226
Node /15 input 0: size torch.Size([100]) unstable 20
-----------------
# of unstable neurons: 825
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010037422180175781
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4593038558959961
10 lb beta sum: 0.0, worst -0.45931458473205566
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    func 0.0539    
Accumulated time: func 0.0539    prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] 
split level 1: [/input-12, 24] 
split level 2: [/input-12, 72] 
split level 3: [/input-12, 59] 
split level 4: [/input-12, 7] 
split level 5: [/input-12, 17] 
split level 6: [/input-12, 4] 
split level 7: [/input-12, 64] 
split level 8: [/input-8, 1699] 
split level 9: [/input-8, 1949] 
split level 10: [/input-12, 71] 
split level 11: [/input-8, 226] 
split level 12: [/input-8, 1684] 
split level 13: [/input-8, 217] 
split level 14: [/input-8, 1946] 
split level 15: [/input-8, 437] 
split level 16: [/input-8, 1579] 
split level 17: [/input-8, 219] 
split level 18: [/input-8, 1637] 
split level 19: [/input-8, 254] 
split level 20: [/input-8, 427] 
split level 21: [/input-8, 428] 
split level 22: [/input-8, 253] 
split level 23: [/input-8, 209] 
split level 24: [/input-8, 212] 
split level 25: [/input-8, 434] 
split level 26: [/input-8, 410] 
split level 27: [/input-8, 733] 
split level 28: [/input-8, 47] 
split level 29: [/input-8, 249] 
split level 30: [/input-8, 250] 
split level 31: [/input-8, 55] 
split level 32: [/input-8, 1711] 
split level 33: [/input, 3543] 
split level 34: [/input-8, 423] 
split level 35: [/input-8, 435] 
split level 36: [/input-8, 1107] 
split level 37: [/input-8, 415] 
split level 38: [/input-8, 1686] 
split level 39: [/input-8, 1583] 
split level 40: [/input-8, 438] 
split level 41: [/input-8, 366] 
split level 42: [/input-8, 1316] 
split level 43: [/input-8, 227] 
split level 44: [/input, 985] 
split level 45: [/input, 3285] 
split level 46: [/input-8, 237] 
split level 47: [/input-8, 224] 
split level 48: [/input-8, 402] 
split level 49: [/input-8, 218] 
split level 50: [/input-8, 213] 
split level 51: [/input-8, 216] 
split level 52: [/input-8, 929] 
split level 53: [/input-8, 1338] 
split level 54: [/input-8, 281] 
split level 55: [/input-8, 229] 
split level 56: [/input, 1691] 
split level 57: [/input-8, 204] 
split level 58: [/input-8, 222] 
split level 59: [/input, 2789] 
split level 60: [/input, 473] 
split level 61: [/input-8, 198] 
split level 62: [/input-8, 1938] 
split level 63: [/input-8, 407] 
split level 64: [/input-8, 228] 
split level 65: [/input, 3130] 
split level 66: [/input-8, 195] 
split level 67: [/input, 1001] 
split level 68: [/input-8, 412] 
split level 69: [/input-8, 44] 
split level 70: [/input-8, 1389] 
split level 71: [/input-8, 248] 
split level 72: [/input, 2794] 
split level 73: [/input-8, 232] 
split level 74: [/input, 3305] 
split level 75: [/input-8, 578] 
split level 76: [/input, 2865] 
split level 77: [/input, 3233] 
split level 78: [/input-8, 1669] 
split level 79: [/input, 2793] 
split level 80: [/input, 2755] 
split level 81: [/input-8, 923] 
split level 82: [/input-8, 371] 
split level 83: [/input-8, 61] 
split level 84: [/input, 2713] 
split level 85: [/input, 2714] 
split level 86: [/input-8, 252] 
split level 87: [/input-8, 146] 
split level 88: [/input-8, 262] 
split level 89: [/input, 1996] 
split level 90: [/input-8, 240] 
split level 91: [/input-8, 255] 
split level 92: [/input, 2762] 
split level 93: [/input-8, 295] 
split level 94: [/input-8, 251] 
split level 95: [/input, 3302] 
split level 96: [/input-8, 401] 
split level 97: [/input, 2792] 
split level 98: [/input, 3198] 
split level 99: [/input-8, 1743] 
split level 100: [/input, 984] 
split level 101: [/input, 1948] 
split level 102: [/input-8, 1759] 
split level 103: [/input-8, 1517] 
split level 104: [/input, 987] 
split level 105: [/input-8, 1337] 
split level 106: [/input, 2759] 
split level 107: [/input, 3544] 
split level 108: [/input, 2739] 
split level 109: [/input, 167] 
split level 110: [/input, 2805] 
split level 111: [/input, 3268] 
split level 112: [/input, 2265] 
split level 113: [/input, 2722] 
split level 114: [/input, 471] 
split level 115: [/input, 2760] 
split level 116: [/input, 1507] 
split level 117: [/input, 2738] 
split level 118: [/input-8, 193] 
split level 119: [/input, 2249] 
split level 120: [/input-8, 239] 
split level 121: [/input, 3269] 
split level 122: [/input, 1964] 
split level 123: [/input, 3218] 
split level 124: [/input, 3235] 
split level 125: [/input, 2867] 
split level 126: [/input, 1411] 
split level 127: [/input-8, 207] 
split level 128: [/input, 2779] 
split level 129: [/input-8, 0] 
split level 130: [/input, 3306] 
split level 131: [/input, 2774] 
split level 132: [/input, 2806] 
split level 133: [/input, 1675] 
split level 134: [/input, 3307] 
split level 135: [/input, 2741] 
split level 136: [/input, 1978] 
split level 137: [/input, 824] 
split level 138: [/input, 974] 
split level 139: [/input, 147] 
split level 140: [/input-8, 1762] 
split level 141: [/input-8, 142] 
split level 142: [/input-8, 981] 
split level 143: [/input, 3989] 
split level 144: [/input, 2537] 
split level 145: [/input-8, 1272] 
split level 146: [/input, 2233] 
split level 147: [/input, 2723] 
split level 148: [/input, 2522] 
split level 149: [/input-8, 1786] 
split level 150: [/input, 1003] 
split level 151: [/input, 1398] 
split level 152: [/input, 18] 
split level 153: [/input, 1382] 
split level 154: [/input, 2490] 
split level 155: [/input, 3131] 
split level 156: [/input, 684] 
split level 157: [/input, 1997] 
split level 158: [/input, 152] 
split level 159: [/input, 1474] 
split level 160: [/input, 1316] 
split level 161: [/input, 235] 
split level 162: [/input, 3103] 
split level 163: [/input, 811] 
split level 164: [/input, 2473] 
split level 165: [/input, 291] 
split level 166: [/input, 2436] 
split level 167: [/input, 2179] 
split level 168: [/input, 97] 
split level 169: [/input, 277] 
split level 170: [/input, 17] 
split level 171: [/input, 3371] 
split level 172: [/input, 2780] 
split level 173: [/input, 2488] 
split level 174: [/input, 2692] 
split level 175: [/input, 1177] 
split level 176: [/input, 1162] 
split level 177: [/input, 278] 
split level 178: [/input, 2733] 
split level 179: [/input, 215] 
split level 180: [/input, 2781] 
split level 181: [/input, 1980] 
split level 182: [/input, 2217] 
split level 183: [/input, 478] 
split level 184: [/input, 236] 
split level 185: [/input, 2854] 
split level 186: [/input-8, 335] 
split level 187: [/input, 2523] 
split level 188: [/input, 4050] 
split level 189: [/input, 2770] 
split level 190: [/input, 1178] 
split level 191: [/input, 1194] 
split level 192: [/input, 2195] 
split level 193: [/input, 2539] 
split level 194: [/input, 3368] 
split level 195: [/input, 210] 
split level 196: [/input, 3549] 
split level 197: [/input, 2450] 
split level 198: [/input, 2635] 
split level 199: [/input, 793] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4592759609222412
10 lb beta sum: 0.0, worst -0.4592719078063965
Time: prepare 0.0116    bound 0.1030    transfer 0.0011    finalize 0.0025    func 0.1208    
Accumulated time: func 0.1747    prepare 0.0217    bound 0.1564    transfer 0.0012    finalize 0.0026    
all_split False
======================Cut inference begins======================
max lb tensor(0.08568954) min lb tensor(-0.45926976)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010467529296875 
BICCOS Cumulative time: 0.010467529296875
Preprocessing time: 0.009845733642578125 Inference time: 7.033348083496094e-05 Add cuts time: 3.552436828613281e-05 Cut analysis time: 0.0005159378051757812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.44584 (1), -0.44482 (1), -0.44479 (1), -0.44427 (1), -0.44414 (1), -0.44397 (1), -0.44395 (1), -0.44354 (1), -0.44226 (1), -0.44224 (1), -0.44213 (1), -0.44194 (1), -0.44129 (1), -0.44062 (1), -0.43977 (1), -0.43804 (1), -0.43702 (1), -0.43640 (1), -0.43586 (1), -0.43536 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5224    set_bounds 0.0084    solve 0.1208    add 0.0672    
Accumulated time: pickout 0.0003    decision 0.5224    set_bounds 0.0084    solve 0.1208    add 0.0672    
Current (lb-rhs): -0.4458434581756592
50 domains visited
Cumulative time: 0.7985033988952637

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 72] [/input-12, 24] [/input-12, 72] [/input-12, 24] [/input-12, 24] [/input-12, 72] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 17] [/input-12, 7] [/input-12, 7] [/input-12, 72] [/input-12, 72] [/input-12, 7] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 3: [/input-8, 929] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4309580326080322
10 lb beta sum: 0.16623170673847198, worst -0.4308435916900635
Time: prepare 0.0075    bound 0.1177    transfer 0.0011    finalize 0.0024    func 0.1312    
Accumulated time: func 0.3059    prepare 0.0294    bound 0.2741    transfer 0.0023    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.20923233) min lb tensor(-0.43080592)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.015381574630737305 
BICCOS Cumulative time: 0.025849103927612305
Preprocessing time: 0.011772871017456055 Inference time: 0.0021004676818847656 Add cuts time: 0.00124359130859375 Cut analysis time: 0.0002646446228027344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17821 (2), -0.17754 (2), -0.17655 (2), -0.17640 (2), -0.17576 (2), -0.17473 (2), -0.17471 (2), -0.17469 (2), -0.17371 (2), -0.17167 (2), -0.17104 (2), -0.17068 (2), -0.16905 (2), -0.16892 (2), -0.16855 (2), -0.16706 (2), -0.16687 (2), -0.16657 (2), -0.16366 (2), -0.16282 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0120    solve 0.1313    add 0.0817    
Accumulated time: pickout 0.0013    decision 0.5420    set_bounds 0.0205    solve 0.2521    add 0.1489    
Current (lb-rhs): -0.1782136708498001
100 domains visited
Cumulative time: 1.0596494674682617

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 72] [/input-12, 24] [/input-12, 24] [/input-12, 7] [/input-12, 7] [/input-12, 24] [/input-12, 24] [/input-12, 72] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 7] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 17] 
split level 3: [/input-12, 17] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-8, 1699] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18099546432495117
10 lb beta sum: 0.5780530571937561, worst -0.14108704030513763
Time: prepare 0.0076    bound 0.1181    transfer 0.0013    finalize 0.0023    func 0.1324    
Accumulated time: func 0.4382    prepare 0.0372    bound 0.3922    transfer 0.0036    finalize 0.0073    
all_split False
======================Cut inference begins======================
max lb tensor(0.38406891) min lb tensor(-0.13903821)
Number of Verified Splits: 280 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.029100894927978516 
BICCOS Cumulative time: 0.05494999885559082
Preprocessing time: 0.011544942855834961 Inference time: 0.011634111404418945 Add cuts time: 0.005628108978271484 Cut analysis time: 0.000293731689453125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11754 (3), -0.11740 (3), -0.11676 (3), -0.11402 (3), -0.11397 (3), -0.10944 (3), -0.10941 (3), -0.10869 (3), -0.10776 (3), -0.10684 (3), -0.10636 (3), -0.10585 (3), -0.10466 (3), -0.10408 (3), -0.10359 (3), -0.10356 (3), -0.09835 (3), -0.09827 (3), -0.09816 (3), -0.09811 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0192    set_bounds 0.0150    solve 0.1324    add 0.0975    
Accumulated time: pickout 0.0024    decision 0.5612    set_bounds 0.0355    solve 0.3846    add 0.2464    
Current (lb-rhs): -0.11754348874092102
150 domains visited
Cumulative time: 1.3541595935821533

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 2: [/input-12, 7] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 7] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-8, 1699] [/input-8, 1699] [/input-12, 4] [/input-8, 1699] [/input-12, 4] [/input-8, 1699] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15088510513305664
10 lb beta sum: 0.5791546106338501, worst -0.11268605291843414
Time: prepare 0.0069    bound 0.1173    transfer 0.0011    finalize 0.0021    func 0.1305    
Accumulated time: func 0.5688    prepare 0.0443    bound 0.5095    transfer 0.0047    finalize 0.0094    
all_split False
======================Cut inference begins======================
max lb tensor(0.40095276) min lb tensor(-0.11160044)
Number of Verified Splits: 133 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 4
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.021646499633789062 
BICCOS Cumulative time: 0.07659649848937988
Preprocessing time: 0.011420726776123047 Inference time: 0.0069942474365234375 Add cuts time: 0.0027484893798828125 Cut analysis time: 0.0004830360412597656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04091 (4), -0.04066 (4), -0.04061 (4), -0.03920 (4), -0.03751 (4), -0.03743 (4), -0.03667 (4), -0.03517 (4), -0.03488 (4), -0.03485 (4), -0.03259 (4), -0.03259 (4), -0.03240 (4), -0.03217 (4), -0.03149 (4), -0.03143 (4), -0.03036 (4), -0.02791 (4), -0.02763 (4), -0.02762 (4), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0195    set_bounds 0.0146    solve 0.1306    add 0.2148    
Accumulated time: pickout 0.0033    decision 0.5807    set_bounds 0.0501    solve 0.5152    add 0.4612    
Current (lb-rhs): -0.040911927819252014
200 domains visited
Cumulative time: 1.7566092014312744

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 2: [/input-8, 1699] [/input-8, 1699] [/input-12, 17] [/input-8, 1699] [/input-8, 1699] [/input-12, 7] [/input-12, 17] [/input-12, 7] [/input-12, 64] [/input-12, 64] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-12, 64] [/input-12, 4] [/input-12, 4] [/input-8, 1699] [/input-12, 64] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08553385734558105
10 lb beta sum: 0.7026250958442688, worst -0.04811707139015198
Time: prepare 0.0075    bound 0.1363    transfer 0.0012    finalize 0.0023    func 0.1499    
Accumulated time: func 0.7187    prepare 0.0521    bound 0.6458    transfer 0.0059    finalize 0.0117    
all_split False
======================Cut inference begins======================
max lb tensor(0.28789532) min lb tensor(-0.04014730)
Number of Verified Splits: 287 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.03412199020385742 
BICCOS Cumulative time: 0.1107184886932373
Preprocessing time: 0.01160287857055664 Inference time: 0.014414072036743164 Add cuts time: 0.00724482536315918 Cut analysis time: 0.0008602142333984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02277 (5), -0.02277 (5), -0.02277 (5), -0.02262 (5), -0.02259 (5), -0.02258 (5), -0.02256 (5), -0.02254 (5), -0.02249 (5), -0.02099 (5), -0.02075 (5), -0.02069 (5), -0.01985 (5), -0.01922 (5), -0.01846 (5), -0.01771 (5), -0.01765 (5), -0.01701 (5), -0.01618 (5), -0.01592 (5), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0153    solve 0.1501    add 0.1063    
Accumulated time: pickout 0.0043    decision 0.6003    set_bounds 0.0654    solve 0.6652    add 0.5675    
Current (lb-rhs): -0.02277323603630066
250 domains visited
Cumulative time: 2.0831875801086426

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 72]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.82951758e+16, 4.23915237e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 72, 29]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 2.63914824e-01, 4.06057715e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 72, 29]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 2.63914824e-01, 1.51980519e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 17, 29]), tensor([ 1., -1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.82951758e+16, 1.79871783e-01, 6.71081394e-02, 6.75863028e-02,
        2.74607301e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 17, 29]), tensor([ 1., -1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.82951758e+16, 1.79871783e-01, 6.71081394e-02, 6.75863028e-02,
        3.45336040e-04]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 17, 29]), tensor([ 1., -1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.82951758e+16, 1.79871783e-01, 6.71081394e-02, 6.18585199e-02,
        2.74835825e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 17, 29]), tensor([ 1., -1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.82951758e+16, 1.79871783e-01, 6.71081394e-02, 6.18585199e-02,
        5.30736288e-04]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 29]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.82951758e+16, 1.79871783e-01, 2.26787794e-02, 2.91953325e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 29]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.82951758e+16, 1.79871783e-01, 2.26787794e-02, 3.20045799e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24, 17,  4]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([2.82951758e+16, 1.87039107e-01, 7.54888356e-02, 6.78752065e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24, 17,  4, 29]), tensor([ 1.,  1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.82951758e+16, 1.87039107e-01, 7.54888356e-02, 2.18967665e-02,
        2.47588113e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24, 17,  4, 29]), tensor([ 1.,  1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.82951758e+16, 1.87039107e-01, 7.54888356e-02, 2.18967665e-02,
        1.22968126e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1699], [-1.0], [0], [4.2797834720609274e-11], [3]), '/input-12': (tensor([ 7, 24, 17, 29]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.82951758e+16, 1.87039107e-01, 6.10353053e-02, 2.39410609e-01]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1699], [-1.0], [0], [4.2797834720609274e-11], [3]), '/input-12': (tensor([ 7, 24, 17, 29]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([2.82951758e+16, 1.87039107e-01, 6.10353053e-02, 2.83653457e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1699]), tensor([1.]), tensor([0]), tensor([7.39551353e-09]), tensor([3])), '/input-12': ([7, 24, 17], [1.0, 1.0, 1.0], [0, 0, 0], [2.8295175826571264e+16, 0.1870391070842743, 0.06103530526161194], [0, 1, 2])}
Shallow branching resets to n domains:  15
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.41503262519836426
10 lb beta sum: 0.6853752732276917, worst -0.3909755349159241
Time: prepare 0.0007    bound 0.1298    transfer 0.0002    finalize 0.0002    func 0.1311    
Accumulated time: func 0.8498    prepare 0.0528    bound 0.7756    transfer 0.0061    finalize 0.0120    
After pruning, left:  5

Back to Regular BaB

BaB round 1
batch: 5
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 29] 
split level 1: [/input-12, 24] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 72] 
split level 2: [/input-12, 17] [/input-12, 64] [/input-12, 17] [/input-8, 1699] [/input-12, 59] 
split level 3: [/input-12, 4] [/input-8, 1699] [/input-12, 64] [/input-12, 64] [/input-12, 4] 
split level 4: [/input-12, 64] [/input-8, 438] [/input-8, 1699] [/input-8, 1686] [/input-12, 64] 
split level 5: [/input-8, 1699] [/input-8, 1686] [/input-8, 1316] [/input-8, 1724] [/input-8, 1686] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1736806631088257, worst -0.20630180835723877
10 lb beta sum: 1.1768587827682495, worst -0.20585954189300537
Time: prepare 0.0140    bound 0.1304    transfer 0.0009    finalize 0.0017    func 0.1491    
Accumulated time: func 0.9989    prepare 0.0671    bound 0.9060    transfer 0.0070    finalize 0.0137    
all_split False
======================Cut inference begins======================
max lb tensor(0.87604105) min lb tensor(-0.20565832)
Number of Verified Splits: 282 of 320
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.0003247261047363281 
BICCOS Cumulative time: 0.11104321479797363
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20566 (6), -0.19991 (6), -0.19510 (6), -0.18650 (6), -0.18255 (6), -0.17749 (6), -0.17466 (6), -0.16690 (6), -0.10568 (6), -0.10433 (6), -0.10169 (6), -0.09655 (6), -0.09069 (6), -0.07916 (6), -0.07650 (6), -0.07328 (6), -0.06853 (6), -0.06821 (6), -0.06369 (6), -0.06043 (6), 
Length of domains: 38
Time: pickout 0.0005    decision 0.0182    set_bounds 0.0276    solve 0.1492    add 0.0089    
Accumulated time: pickout 0.0049    decision 0.6184    set_bounds 0.0930    solve 0.8144    add 0.5764    
Current (lb-rhs): -0.20565831661224365
288 domains visited
Cumulative time: 2.452589988708496

BaB round 2
batch: 38
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 71] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-8, 227] [/input-12, 59] 
split level 1: [/input-8, 1949] [/input-8, 435] [/input-8, 1949] [/input-8, 929] [/input-8, 410] [/input-8, 1949] [/input-8, 410] [/input-8, 410] [/input-8, 929] [/input-8, 410] 
split level 2: [/input-8, 435] [/input-8, 1686] [/input-8, 435] [/input-8, 923] [/input-8, 435] [/input-8, 410] [/input-8, 435] [/input-8, 1316] [/input-8, 1316] [/input-8, 435] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8922180533409119, worst -0.1949247121810913
10 lb beta sum: 0.8922180533409119, worst -0.1946011781692505
Time: prepare 0.0133    bound 0.1371    transfer 0.0020    finalize 0.0017    func 0.1560    
Accumulated time: func 1.1548    prepare 0.0806    bound 1.0431    transfer 0.0090    finalize 0.0153    
all_split False
======================Cut inference begins======================
max lb tensor(0.31319201) min lb tensor(-0.19454944)
Number of Verified Splits: 172 of 304
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.0003483295440673828 
BICCOS Cumulative time: 0.11139154434204102
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19455 (9), -0.19188 (9), -0.18864 (9), -0.18546 (9), -0.18377 (9), -0.18105 (9), -0.17607 (9), -0.17389 (9), -0.17340 (9), -0.17111 (9), -0.17034 (9), -0.16986 (9), -0.16895 (9), -0.16679 (9), -0.16641 (9), -0.16630 (9), -0.16600 (9), -0.16533 (9), -0.16348 (9), -0.16327 (9), 
Length of domains: 132
Time: pickout 0.0013    decision 0.0157    set_bounds 0.0224    solve 0.1560    add 0.0026    
Accumulated time: pickout 0.0062    decision 0.6341    set_bounds 0.1154    solve 0.9705    add 0.5790    
Current (lb-rhs): -0.19454944133758545
420 domains visited
Cumulative time: 2.651867389678955

BaB round 3
batch: 132
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 71] [/input-8, 1949] [/input-12, 71] [/input-8, 1949] [/input-12, 71] [/input-8, 1949] [/input-8, 1949] [/input-8, 1949] [/input-12, 71] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7806732058525085, worst -0.19454967975616455
10 lb beta sum: 0.7806732058525085, worst -0.19448912143707275
Time: prepare 0.0116    bound 0.1362    transfer 0.0013    finalize 0.0014    func 0.1524    
Accumulated time: func 1.3072    prepare 0.0923    bound 1.1794    transfer 0.0103    finalize 0.0168    
all_split False
======================Cut inference begins======================
max lb tensor(0.23884571) min lb tensor(-0.19446456)
Number of Verified Splits: 97 of 264
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.0003495216369628906 
BICCOS Cumulative time: 0.1117410659790039
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19446 (10), -0.19177 (10), -0.18850 (10), -0.18530 (10), -0.18366 (10), -0.18090 (10), -0.17539 (10), -0.17269 (10), -0.17084 (10), -0.16905 (10), -0.16885 (10), -0.16601 (10), -0.16594 (10), -0.16545 (10), -0.16539 (10), -0.16505 (10), -0.16422 (10), -0.16325 (10), -0.16227 (10), -0.16097 (10), 
Length of domains: 167
Time: pickout 0.0022    decision 0.0180    set_bounds 0.0111    solve 0.1525    add 0.0021    
Accumulated time: pickout 0.0083    decision 0.6521    set_bounds 0.1266    solve 1.1229    add 0.5811    
Current (lb-rhs): -0.1944645643234253
587 domains visited
Cumulative time: 2.838693618774414

BaB round 4
batch: 167
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-8, 410] [/input-8, 410] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-8, 435] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7679843902587891, worst -0.19096887111663818
10 lb beta sum: 0.7679843902587891, worst -0.19093787670135498
Time: prepare 0.0147    bound 0.1364    transfer 0.0009    finalize 0.0022    func 0.1571    
Accumulated time: func 1.4643    prepare 0.1072    bound 1.3158    transfer 0.0112    finalize 0.0190    
all_split False
======================Cut inference begins======================
max lb tensor(0.23373449) min lb tensor(-0.19090974)
Number of Verified Splits: 105 of 334
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.00042891502380371094 
BICCOS Cumulative time: 0.11216998100280762
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19091 (11), -0.18819 (11), -0.18541 (11), -0.18223 (11), -0.18009 (11), -0.17727 (11), -0.17142 (11), -0.16900 (11), -0.16870 (11), -0.16601 (11), -0.16536 (11), -0.16518 (11), -0.16467 (11), -0.16418 (11), -0.16330 (11), -0.16316 (11), -0.16171 (11), -0.16095 (11), -0.16062 (11), -0.16048 (11), 
Length of domains: 229
Time: pickout 0.0026    decision 0.3592    set_bounds 0.0140    solve 0.1573    add 0.0029    
Accumulated time: pickout 0.0110    decision 1.0113    set_bounds 0.1406    solve 1.2802    add 0.5841    
Current (lb-rhs): -0.190909743309021
816 domains visited
Cumulative time: 3.3760104179382324

BaB round 5
batch: 229
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1107] [/input-12, 71] [/input-8, 209] [/input-12, 71] [/input-12, 71] [/input-8, 209] [/input-12, 71] [/input-12, 71] [/input-8, 1107] [/input-12, 71] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7203751802444458, worst -0.18507683277130127
10 lb beta sum: 0.7203751802444458, worst -0.1850515604019165
Time: prepare 0.0203    bound 0.1417    transfer 0.0013    finalize 0.0033    func 0.1695    
Accumulated time: func 1.6338    prepare 0.1278    bound 1.4574    transfer 0.0126    finalize 0.0222    
all_split False
======================Cut inference begins======================
max lb tensor(0.24903429) min lb tensor(-0.18502676)
Number of Verified Splits: 91 of 458
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.0003783702850341797 
BICCOS Cumulative time: 0.1125483512878418
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18503 (12), -0.18458 (12), -0.18229 (12), -0.18184 (12), -0.17861 (12), -0.17802 (12), -0.17521 (12), -0.17461 (12), -0.17426 (12), -0.17365 (12), -0.17141 (12), -0.17080 (12), -0.16593 (12), -0.16536 (12), -0.16492 (12), -0.16367 (12), -0.16261 (12), -0.16236 (12), -0.16219 (12), -0.16217 (12), 
Length of domains: 367
Time: pickout 0.0038    decision 0.0305    set_bounds 0.0200    solve 0.1696    add 0.0021    
Accumulated time: pickout 0.0148    decision 1.0418    set_bounds 0.1606    solve 1.4498    add 0.5861    
Current (lb-rhs): -0.18502676486968994
1183 domains visited
Cumulative time: 3.6034095287323

BaB round 6
batch: 367
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 733] [/input-8, 366] [/input-8, 366] [/input-8, 438] [/input-8, 438] [/input-8, 1316] [/input-8, 733] [/input-8, 1949] [/input-8, 438] [/input-8, 438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7120957374572754, worst -0.18054425716400146
10 lb beta sum: 0.7120957374572754, worst -0.1805180311203003
Time: prepare 0.0317    bound 0.1397    transfer 0.0037    finalize 0.0040    func 0.1838    
Accumulated time: func 1.8176    prepare 0.1597    bound 1.5971    transfer 0.0163    finalize 0.0263    
all_split False
======================Cut inference begins======================
max lb tensor(0.24504697) min lb tensor(-0.18049753)
Number of Verified Splits: 117 of 734
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.00037860870361328125 
BICCOS Cumulative time: 0.11292695999145508
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18050 (13), -0.18006 (13), -0.17873 (13), -0.17829 (13), -0.17774 (13), -0.17730 (13), -0.17622 (13), -0.17578 (13), -0.17301 (13), -0.17244 (13), -0.17210 (13), -0.17155 (13), -0.16982 (13), -0.16961 (13), -0.16922 (13), -0.16904 (13), -0.16865 (13), -0.16805 (13), -0.16694 (13), -0.16682 (13), 
Length of domains: 617
Time: pickout 0.0061    decision 0.0306    set_bounds 0.0304    solve 0.1840    add 0.0039    
Accumulated time: pickout 0.0209    decision 1.0725    set_bounds 0.1910    solve 1.6338    add 0.5900    
Current (lb-rhs): -0.18049752712249756
1800 domains visited
Cumulative time: 3.8597443103790283

BaB round 7
batch: 617
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1686] [/input-8, 1316] [/input-8, 237] [/input-8, 366] [/input-8, 366] [/input-8, 227] [/input-8, 437] [/input-8, 237] [/input-8, 412] [/input-8, 366] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7130357623100281, worst -0.17757952213287354
10 lb beta sum: 0.7130357623100281, worst -0.17754018306732178
Time: prepare 0.0528    bound 0.1460    transfer 0.0042    finalize 0.0064    func 0.2174    
Accumulated time: func 2.0351    prepare 0.2127    bound 1.7432    transfer 0.0205    finalize 0.0327    
all_split False
======================Cut inference begins======================
max lb tensor(0.01798856) min lb tensor(-0.17753351)
Number of Verified Splits: 164 of 1234
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.00038170814514160156 
BICCOS Cumulative time: 0.11330866813659668
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17753 (14), -0.17710 (14), -0.17577 (14), -0.17533 (14), -0.17474 (14), -0.17430 (14), -0.17323 (14), -0.17280 (14), -0.17227 (14), -0.17183 (14), -0.17052 (14), -0.17007 (14), -0.16947 (14), -0.16920 (14), -0.16903 (14), -0.16867 (14), -0.16825 (14), -0.16796 (14), -0.16769 (14), -0.16751 (14), 
Length of domains: 1070
Time: pickout 0.0083    decision 0.0441    set_bounds 0.0490    solve 0.2178    add 0.0080    
Accumulated time: pickout 0.0293    decision 1.1165    set_bounds 0.2400    solve 1.8516    add 0.5979    
Current (lb-rhs): -0.17753350734710693
2870 domains visited
Cumulative time: 4.188918590545654

BaB round 8
batch: 1070
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 437] [/input-8, 218] [/input-8, 209] [/input-8, 1686] [/input-8, 437] [/input-8, 227] [/input-8, 209] [/input-8, 415] [/input-8, 1686] [/input-8, 412] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7129437923431396, worst -0.17602503299713135
10 lb beta sum: 0.7129437923431396, worst -0.17602455615997314
Time: prepare 0.0919    bound 0.1767    transfer 0.0086    finalize 0.0095    func 0.3010    
Accumulated time: func 2.3360    prepare 0.3048    bound 1.9198    transfer 0.0291    finalize 0.0422    
all_split False
======================Cut inference begins======================
max lb tensor(0.01562297) min lb tensor(-0.17601740)
Number of Verified Splits: 242 of 2140
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.0004038810729980469 
BICCOS Cumulative time: 0.11371254920959473
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17602 (15), -0.17559 (15), -0.17430 (15), -0.17387 (15), -0.17326 (15), -0.17283 (15), -0.17176 (15), -0.17133 (15), -0.17059 (15), -0.17014 (15), -0.16888 (15), -0.16842 (15), -0.16782 (15), -0.16738 (15), -0.16652 (15), -0.16631 (15), -0.16599 (15), -0.16587 (15), -0.16556 (15), -0.16540 (15), 
Length of domains: 1898
Time: pickout 0.0128    decision 0.0693    set_bounds 0.2521    solve 0.3014    add 0.0176    
Accumulated time: pickout 0.0420    decision 1.1858    set_bounds 0.4920    solve 2.1530    add 0.6155    
Current (lb-rhs): -0.1760174036026001
4768 domains visited
Cumulative time: 4.84599494934082

BaB round 9
batch: 1898
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 218] [/input-8, 437] [/input-8, 415] [/input-8, 1938] [/input-8, 733] [/input-8, 218] [/input-8, 415] [/input-8, 237] [/input-8, 1938] [/input-8, 929] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7125069499015808, worst -0.17359888553619385
10 lb beta sum: 0.7125069499015808, worst -0.1735759973526001
Time: prepare 0.1643    bound 0.2670    transfer 0.0239    finalize 0.0173    func 0.4965    
Accumulated time: func 2.8326    prepare 0.4693    bound 2.1869    transfer 0.0530    finalize 0.0595    
all_split False
======================Cut inference begins======================
max lb tensor(0.03168571) min lb tensor(-0.17356503)
Number of Verified Splits: 480 of 3796
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.0004189014434814453 
BICCOS Cumulative time: 0.11413145065307617
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17357 (16), -0.17314 (16), -0.17185 (16), -0.17142 (16), -0.17080 (16), -0.17038 (16), -0.16965 (16), -0.16932 (16), -0.16922 (16), -0.16889 (16), -0.16804 (16), -0.16795 (16), -0.16763 (16), -0.16752 (16), -0.16689 (16), -0.16647 (16), -0.16635 (16), -0.16592 (16), -0.16541 (16), -0.16529 (16), 
Length of domains: 3316
Time: pickout 0.0308    decision 0.1136    set_bounds 0.1524    solve 0.4973    add 0.0196    
Accumulated time: pickout 0.0729    decision 1.2994    set_bounds 0.6445    solve 2.6503    add 0.6351    
Current (lb-rhs): -0.17356503009796143
8084 domains visited
Cumulative time: 5.665756940841675

BaB round 10
batch: 3316
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 237] [/input-8, 227] [/input-8, 218] [/input-8, 218] [/input-8, 733] [/input-8, 1316] [/input-8, 209] [/input-8, 232] [/input-8, 232] [/input-8, 237] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7122921943664551, worst -0.16830623149871826
10 lb beta sum: 0.7122921943664551, worst -0.1682354211807251
Time: prepare 0.2942    bound 0.4148    transfer 0.0510    finalize 0.0333    func 0.8359    
Accumulated time: func 3.6684    prepare 0.7637    bound 2.6017    transfer 0.1040    finalize 0.0928    
all_split False
======================Cut inference begins======================
max lb tensor(0.03014457) min lb tensor(-0.16822088)
Number of Verified Splits: 655 of 6632
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.0005218982696533203 
BICCOS Cumulative time: 0.11465334892272949
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16822 (17), -0.16796 (17), -0.16778 (17), -0.16754 (17), -0.16657 (17), -0.16625 (17), -0.16613 (17), -0.16582 (17), -0.16546 (17), -0.16519 (17), -0.16503 (17), -0.16477 (17), -0.16454 (17), -0.16430 (17), -0.16411 (17), -0.16404 (17), -0.16400 (17), -0.16386 (17), -0.16369 (17), -0.16362 (17), 
Length of domains: 5977
Time: pickout 0.0444    decision 0.3313    set_bounds 0.2711    solve 0.9924    add 0.0282    
Accumulated time: pickout 0.1173    decision 1.6307    set_bounds 0.9156    solve 3.6427    add 0.6633    
Current (lb-rhs): -0.1682208776473999
14061 domains visited
Cumulative time: 7.343199729919434

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 733] [/input-8, 733] [/input-8, 217] [/input-8, 237] [/input-8, 209] [/input-8, 217] [/input-8, 218] [/input-8, 438] [/input-8, 240] [/input-8, 733] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7123156189918518, worst -0.16756689548492432
10 lb beta sum: 0.7123156189918518, worst -0.16755664348602295
Time: prepare 0.3716    bound 0.4952    transfer 0.0472    finalize 0.2141    func 1.1816    
Accumulated time: func 4.8500    prepare 1.1356    bound 3.0970    transfer 0.1512    finalize 0.3069    
all_split False
======================Cut inference begins======================
max lb tensor(0.02261317) min lb tensor(-0.16755164)
Number of Verified Splits: 1054 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.0005412101745605469 
BICCOS Cumulative time: 0.11519455909729004
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16796 (17), -0.16755 (18), -0.16754 (17), -0.16712 (18), -0.16625 (17), -0.16595 (18), -0.16582 (17), -0.16551 (18), -0.16519 (17), -0.16480 (18), -0.16477 (17), -0.16437 (18), -0.16369 (17), -0.16362 (18), -0.16339 (18), -0.16335 (18), -0.16326 (17), -0.16318 (18), -0.16295 (18), -0.16292 (18), 
Length of domains: 9019
Time: pickout 0.0533    decision 0.2301    set_bounds 0.3391    solve 1.1836    add 0.0311    
Accumulated time: pickout 0.1706    decision 1.8608    set_bounds 1.2546    solve 4.8263    add 0.6944    
Current (lb-rhs): -0.16795814037322998
21199 domains visited
current_vram/total_varm: 10.7GB/99.9GB, batch_size increase to 8192
Cumulative time: 9.196560144424438

BaB round 12
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 209] [/input-8, 929] [/input-8, 412] [/input-8, 237] [/input-8, 209] [/input-8, 217] [/input-8, 437] [/input-8, 227] [/input-8, 217] [/input-8, 218] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7122275829315186, worst -0.1673034429550171
10 lb beta sum: 0.7122275829315186, worst -0.16728341579437256
Time: prepare 0.7447    bound 0.9209    transfer 0.1181    finalize 0.0975    func 1.9877    
Accumulated time: func 6.8377    prepare 1.8806    bound 4.0178    transfer 0.2692    finalize 0.4043    
all_split False
======================Cut inference begins======================
max lb tensor(0.02582824) min lb tensor(-0.16727817)
Number of Verified Splits: 1689 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.0006468296051025391 
BICCOS Cumulative time: 0.11584138870239258
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16728 (18), -0.16686 (18), -0.16561 (18), -0.16519 (18), -0.16465 (19), -0.16452 (18), -0.16421 (19), -0.16411 (18), -0.16305 (19), -0.16303 (18), -0.16261 (19), -0.16261 (18), -0.16197 (18), -0.16190 (19), -0.16157 (18), -0.16146 (19), -0.16081 (19), -0.16069 (19), -0.16049 (19), -0.16043 (19), 
Length of domains: 15522
Time: pickout 0.1080    decision 0.4556    set_bounds 1.1086    solve 1.9910    add 0.0598    
Accumulated time: pickout 0.2786    decision 2.3163    set_bounds 2.3632    solve 6.8173    add 0.7542    
Current (lb-rhs): -0.16727817058563232
35894 domains visited
current_vram/total_varm: 19.6GB/99.9GB, batch_size increase to 16384
Cumulative time: 12.954048871994019

BaB round 13
batch: 15522
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 237] [/input-8, 412] [/input-8, 437] [/input-8, 733] [/input-8, 209] [/input-8, 412] [/input-8, 733] [/input-8, 237] [/input-8, 412] [/input-8, 437] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7121394872665405, worst -0.164422869682312
10 lb beta sum: 0.7121394872665405, worst -0.16440165042877197
Time: prepare 1.4028    bound 1.6835    transfer 0.3243    finalize 0.1965    func 3.8089    
Accumulated time: func 10.6466    prepare 3.2838    bound 5.7013    transfer 0.5935    finalize 0.6008    
all_split False
======================Cut inference begins======================
max lb tensor(0.02709925) min lb tensor(-0.16439593)
Number of Verified Splits: 3431 of 31044
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.0006515979766845703 
BICCOS Cumulative time: 0.11649298667907715
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16440 (19), -0.16398 (19), -0.16273 (19), -0.16231 (19), -0.16181 (20), -0.16164 (19), -0.16138 (20), -0.16122 (19), -0.16072 (19), -0.16029 (19), -0.16021 (20), -0.16016 (19), -0.15977 (20), -0.15974 (19), -0.15928 (20), -0.15906 (20), -0.15903 (19), -0.15900 (19), -0.15885 (20), -0.15863 (20), 
Length of domains: 27613
Time: pickout 0.2730    decision 1.1189    set_bounds 1.8748    solve 3.8164    add 0.1138    
Accumulated time: pickout 0.5516    decision 3.4353    set_bounds 4.2380    solve 10.6337    add 0.8679    
Current (lb-rhs): -0.16439592838287354
63507 domains visited
Cumulative time: 20.225241661071777

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 213] [/input-8, 227] [/input-8, 438] [/input-8, 209] [/input-8, 213] [/input-8, 213] [/input-8, 209] [/input-8, 213] [/input-8, 213] [/input-8, 227] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7120984196662903, worst -0.1615692377090454
10 lb beta sum: 0.7120984196662903, worst -0.16156375408172607
Time: prepare 1.5018    bound 1.7773    transfer 0.3428    finalize 0.5302    func 4.3708    
Accumulated time: func 15.0174    prepare 4.7859    bound 7.4786    transfer 0.9363    finalize 1.1310    
all_split False
======================Cut inference begins======================
max lb tensor(0.03961360) min lb tensor(-0.16155970)
Number of Verified Splits: 3942 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.0007348060607910156 
BICCOS Cumulative time: 0.11722779273986816
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16181 (20), -0.16156 (20), -0.16138 (20), -0.16113 (20), -0.16021 (20), -0.15989 (20), -0.15977 (20), -0.15947 (20), -0.15906 (20), -0.15903 (20), -0.15880 (20), -0.15863 (20), -0.15861 (20), -0.15838 (20), -0.15783 (20), -0.15781 (20), -0.15765 (21), -0.15764 (20), -0.15762 (20), -0.15757 (20), 
Length of domains: 40055
Time: pickout 0.2235    decision 1.7199    set_bounds 1.7332    solve 4.3771    add 0.1201    
Accumulated time: pickout 0.7751    decision 5.1551    set_bounds 5.9712    solve 15.0108    add 0.9881    
Current (lb-rhs): -0.16181457042694092
92333 domains visited
current_vram/total_varm: 36.4GB/99.9GB, batch_size increase to 32768
Cumulative time: 28.47777247428894

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 366] [/input-8, 209] [/input-8, 217] [/input-8, 437] [/input-8, 1579] [/input-8, 213] [/input-8, 412] [/input-8, 217] [/input-8, 437] [/input-8, 366] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7120349407196045, worst -0.16018164157867432
10 lb beta sum: 0.7120349407196045, worst -0.1601794958114624
Time: prepare 3.0254    bound 8.6794    transfer 0.7606    finalize 0.9410    func 13.8365    
Accumulated time: func 28.8539    prepare 7.8118    bound 16.1581    transfer 1.6969    finalize 2.0720    
all_split False
======================Cut inference begins======================
max lb tensor(0.03656423) min lb tensor(-0.16017616)
Number of Verified Splits: 6998 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.0010046958923339844 
BICCOS Cumulative time: 0.11823248863220215
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16156 (20), -0.16113 (20), -0.16018 (21), -0.15989 (20), -0.15973 (21), -0.15947 (20), -0.15880 (20), -0.15857 (21), -0.15838 (20), -0.15813 (21), -0.15743 (21), -0.15741 (21), -0.15732 (20), -0.15698 (21), -0.15697 (21), -0.15690 (20), -0.15618 (21), -0.15614 (21), -0.15613 (20), -0.15601 (21), 
Length of domains: 65825
Time: pickout 0.4561    decision 3.3535    set_bounds 3.7069    solve 13.8461    add 0.1967    
Accumulated time: pickout 1.2312    decision 8.5086    set_bounds 9.6781    solve 28.8569    add 1.1848    
Current (lb-rhs): -0.16155970096588135
150871 domains visited
Cumulative time: 50.194398641586304

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 227] [/input-8, 437] [/input-8, 217] [/input-8, 217] [/input-8, 227] [/input-8, 227] [/input-8, 217] [/input-8, 240] [/input-8, 434] [/input-8, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7120086550712585, worst -0.15995633602142334
10 lb beta sum: 0.7120086550712585, worst -0.15993773937225342
Time: prepare 3.0217    bound 8.6775    transfer 0.7696    finalize 0.4929    func 13.4000    
Accumulated time: func 42.2539    prepare 10.8338    bound 24.8356    transfer 2.4664    finalize 2.5649    
all_split False
======================Cut inference begins======================
max lb tensor(0.03498256) min lb tensor(-0.15993369)
Number of Verified Splits: 8700 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.0010495185852050781 
BICCOS Cumulative time: 0.11928200721740723
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15993 (21), -0.15949 (21), -0.15827 (21), -0.15783 (21), -0.15718 (21), -0.15674 (21), -0.15570 (21), -0.15553 (22), -0.15526 (21), -0.15510 (22), -0.15510 (22), -0.15464 (22), -0.15461 (21), -0.15417 (21), -0.15380 (22), -0.15378 (22), -0.15337 (22), -0.15332 (22), -0.15298 (22), -0.15294 (21), 
Length of domains: 89893
Time: pickout 0.5036    decision 3.4140    set_bounds 4.0873    solve 13.4128    add 0.2366    
Accumulated time: pickout 1.7348    decision 11.9226    set_bounds 13.7654    solve 42.2697    add 1.4214    
Current (lb-rhs): -0.1599336862564087
207707 domains visited
Cumulative time: 72.0363974571228

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 227] [/input-8, 217] [/input-8, 227] [/input-8, 366] [/input-8, 217] [/input-8, 217] [/input-8, 213] [/input-8, 217] [/input-8, 213] [/input-8, 217] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119890451431274, worst -0.15058815479278564
10 lb beta sum: 0.7119890451431274, worst -0.1505652666091919
Time: prepare 3.0343    bound 8.6993    transfer 1.2081    finalize 2.5540    func 16.3550    
Accumulated time: func 58.6089    prepare 13.8687    bound 33.5349    transfer 3.6746    finalize 5.1189    
all_split False
======================Cut inference begins======================
max lb tensor(0.02765453) min lb tensor(-0.15054524)
Number of Verified Splits: 7682 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.03467130661010742 
BICCOS Cumulative time: 0.15395331382751465
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15993 (21), -0.15949 (21), -0.15827 (21), -0.15783 (21), -0.15718 (21), -0.15674 (21), -0.15570 (21), -0.15553 (22), -0.15526 (21), -0.15510 (22), -0.15510 (22), -0.15464 (22), -0.15461 (21), -0.15417 (21), -0.15380 (22), -0.15378 (22), -0.15337 (22), -0.15332 (22), -0.15294 (21), -0.15286 (22), 
Length of domains: 114979
Time: pickout 0.7747    decision 4.7269    set_bounds 3.6075    solve 16.3743    add 0.3759    
Accumulated time: pickout 2.5095    decision 16.6495    set_bounds 17.3730    solve 58.6440    add 1.7973    
Current (lb-rhs): -0.1599336862564087
265561 domains visited
Cumulative time: 98.08354425430298

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 227] [/input-8, 1389] [/input-8, 227] [/input-8, 438] [/input-8, 227] [/input-8, 1938] [/input-8, 438] [/input-8, 213] [/input-8, 929] [/input-8, 1938] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119899392127991, worst -0.15543949604034424
10 lb beta sum: 0.7119899392127991, worst -0.15540611743927002
Time: prepare 4.2921    bound 8.7104    transfer 1.1483    finalize 1.0270    func 16.0557    
Accumulated time: func 74.6646    prepare 18.1612    bound 42.2453    transfer 4.8229    finalize 6.1459    
all_split False
======================Cut inference begins======================
max lb tensor(0.03330886) min lb tensor(-0.15538776)
Number of Verified Splits: 8590 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.03463435173034668 
BICCOS Cumulative time: 0.18858766555786133
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15553 (22), -0.15539 (22), -0.15510 (22), -0.15496 (22), -0.15489 (22), -0.15445 (22), -0.15380 (22), -0.15363 (22), -0.15350 (22), -0.15337 (22), -0.15321 (22), -0.15306 (22), -0.15286 (22), -0.15278 (22), -0.15264 (23), -0.15263 (22), -0.15244 (22), -0.15235 (22), -0.15224 (22), -0.15220 (22), 
Length of domains: 139157
Time: pickout 0.4982    decision 3.7954    set_bounds 3.9417    solve 16.0939    add 0.2708    
Accumulated time: pickout 3.0077    decision 20.4449    set_bounds 21.3147    solve 74.7379    add 2.0681    
Current (lb-rhs): -0.1555260419845581
322507 domains visited
Cumulative time: 123.02149558067322

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 213] [/input-8, 438] [/input-8, 213] [/input-8, 1316] [/input-8, 438] [/input-8, 366] [/input-8, 213] [/input-8, 434] [/input-8, 438] [/input-8, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119902968406677, worst -0.1531311273574829
10 lb beta sum: 0.7119902968406677, worst -0.15309321880340576
Time: prepare 4.4013    bound 8.6909    transfer 0.7604    finalize 0.5177    func 14.8197    
Accumulated time: func 89.4843    prepare 22.5630    bound 50.9362    transfer 5.5834    finalize 6.6636    
all_split False
======================Cut inference begins======================
max lb tensor(0.02910650) min lb tensor(-0.15308225)
Number of Verified Splits: 7182 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.001007080078125 
BICCOS Cumulative time: 0.18959474563598633
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15539 (22), -0.15496 (22), -0.15489 (22), -0.15445 (22), -0.15363 (22), -0.15350 (22), -0.15321 (22), -0.15308 (23), -0.15306 (22), -0.15265 (23), -0.15264 (23), -0.15263 (22), -0.15224 (22), -0.15220 (22), -0.15218 (23), -0.15180 (22), -0.15133 (23), -0.15133 (23), -0.15100 (22), -0.15100 (22), 
Length of domains: 164743
Time: pickout 0.5079    decision 3.9366    set_bounds 4.1822    solve 14.8361    add 0.2001    
Accumulated time: pickout 3.5156    decision 24.3815    set_bounds 25.4969    solve 89.5740    add 2.2682    
Current (lb-rhs): -0.1553877592086792
380861 domains visited
Cumulative time: 146.89820337295532

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 227] [/input-8, 227] [/input-8, 227] [/input-8, 195] [/input-8, 227] [/input-8, 227] [/input-8, 213] [/input-8, 213] [/input-8, 227] [/input-8, 217] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796872138977, worst -0.14454710483551025
10 lb beta sum: 0.7119796872138977, worst -0.1445828676223755
Time: prepare 3.1441    bound 8.6808    transfer 0.7588    finalize 1.8388    func 14.8491    
Accumulated time: func 104.3334    prepare 25.7075    bound 59.6170    transfer 6.3421    finalize 8.5024    
all_split False
======================Cut inference begins======================
max lb tensor(0.02749336) min lb tensor(-0.14451301)
Number of Verified Splits: 9014 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.0009441375732421875 
BICCOS Cumulative time: 0.19053888320922852
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15539 (22), -0.15496 (22), -0.15489 (22), -0.15445 (22), -0.15363 (22), -0.15350 (22), -0.15321 (22), -0.15308 (23), -0.15306 (22), -0.15265 (23), -0.15264 (23), -0.15263 (22), -0.15224 (22), -0.15220 (22), -0.15218 (23), -0.15180 (22), -0.15133 (23), -0.15133 (23), -0.15100 (22), -0.15100 (22), 
Length of domains: 188497
Time: pickout 0.5131    decision 4.1470    set_bounds 2.9859    solve 14.8615    add 0.2061    
Accumulated time: pickout 4.0287    decision 28.5285    set_bounds 28.4828    solve 104.4355    add 2.4743    
Current (lb-rhs): -0.1553877592086792
437383 domains visited
Cumulative time: 169.8028302192688

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1389] [/input-8, 366] [/input-8, 213] [/input, 2759] [/input-8, 366] [/input-8, 213] [/input, 2759] [/input-8, 366] [/input-8, 213] [/input-8, 434] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119820713996887, worst -0.15249788761138916
10 lb beta sum: 0.7119820713996887, worst -0.15244519710540771
Time: prepare 3.0867    bound 8.6812    transfer 0.7645    finalize 0.5666    func 13.5387    
Accumulated time: func 117.8722    prepare 28.7946    bound 68.2983    transfer 7.1067    finalize 9.0690    
all_split False
======================Cut inference begins======================
max lb tensor(0.02866352) min lb tensor(-0.15242851)
Number of Verified Splits: 7824 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.0009982585906982422 
BICCOS Cumulative time: 0.19153714179992676
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15539 (22), -0.15496 (22), -0.15363 (22), -0.15321 (22), -0.15308 (23), -0.15265 (23), -0.15264 (23), -0.15263 (22), -0.15243 (23), -0.15220 (22), -0.15218 (23), -0.15199 (23), -0.15133 (23), -0.15133 (23), -0.15104 (23), -0.15100 (22), -0.15090 (23), -0.15087 (23), -0.15059 (23), -0.15058 (22), 
Length of domains: 213441
Time: pickout 0.5068    decision 3.3775    set_bounds 4.3307    solve 13.5571    add 0.2033    
Accumulated time: pickout 4.5355    decision 31.9061    set_bounds 32.8135    solve 117.9926    add 2.6776    
Current (lb-rhs): -0.1553877592086792
495095 domains visited
Cumulative time: 192.02928280830383

BaB round 22
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 227] [/input-8, 1686] [/input, 3233] [/input, 3233] [/input-8, 227] [/input, 3544] [/input, 3268] [/input-8, 1686] [/input, 3233] [/input-8, 578] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119858264923096, worst -0.1529933214187622
10 lb beta sum: 0.7119858264923096, worst -0.15294396877288818
Time: prepare 3.1601    bound 8.6800    transfer 0.7706    finalize 2.2633    func 15.3028    
Accumulated time: func 133.1750    prepare 31.9552    bound 76.9782    transfer 7.8773    finalize 11.3323    
all_split False
======================Cut inference begins======================
max lb tensor(0.02413499) min lb tensor(-0.15293086)
Number of Verified Splits: 6354 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.0009860992431640625 
BICCOS Cumulative time: 0.19252324104309082
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15308 (23), -0.15293 (23), -0.15265 (23), -0.15251 (23), -0.15243 (23), -0.15199 (23), -0.15133 (23), -0.15117 (23), -0.15104 (23), -0.15090 (23), -0.15085 (24), -0.15075 (23), -0.15059 (23), -0.15041 (23), -0.15039 (24), -0.15034 (23), -0.15018 (23), -0.14999 (23), -0.14991 (23), -0.14990 (23), 
Length of domains: 239855
Time: pickout 0.5335    decision 4.4412    set_bounds 3.0429    solve 15.3164    add 0.2072    
Accumulated time: pickout 5.0690    decision 36.3472    set_bounds 35.8563    solve 133.3090    add 2.8847    
Current (lb-rhs): -0.1530822515487671
554277 domains visited
Time out!!!!!!!!
Result: unknown in 218.8275 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 77, vnnlib ID: 77 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.36557198, -25.52762604, -29.49477196, -28.19241905, -29.34058571,
         -28.33413696, -29.46609688, -30.40150452, -24.56089783, -23.80018806]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [679]; unstable size 679; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 679] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 679] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 679] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 185] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.08787775,  0.95483613,  4.05660629,  3.03147221,  3.64727974,
          3.09590197,  4.17433357,  4.76398945, -0.51713657]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.36557198, -25.52762604, -29.49477196, -28.19241905, -29.34058571,
         -28.33413696, -29.46609688, -30.40150452, -24.56089783, -23.80018806]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.67it/s]100%|██████████| 1/1 [00:00<00:00,  8.66it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.82050514, -25.24638176, -28.96630859, -27.76984215, -28.75332069,
          -27.98231506, -28.93467712, -30.10177803, -23.77982712, -23.70362282]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.07620430]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1188 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 25.71731948852539
alpha/beta optimization time: 1.2300381660461426
initial alpha-crown bounds: tensor([[ 2.13841915,  0.97674775,  4.10323906,  3.07848167,  3.70226908,
          3.14509559,  4.22430420,  4.82284546, -0.47408295]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.47408294677734375
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5767467021942
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.57670640945435
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.5766725540161
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.57665038108826
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.5766303539276
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.5766110420227
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.57659196853638
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.57657313346863
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.57655358314514
Verifying property 8 with 1 instances.
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.47408295]], device='cuda:0') need to verify.
Model prediction is: tensor([-27.36557198, -25.52762604, -29.49477196, -28.19241905, -29.34058571,
        -28.33413696, -29.46609688, -30.40150452, -24.56089783, -23.80018806],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.47408295]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 679
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 180
Node /15 input 0: size torch.Size([100]) unstable 16
-----------------
# of unstable neurons: 875
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010204315185546875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.47408199310302734
10 lb beta sum: 0.0, worst -0.4740900993347168
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    func 0.0529    
Accumulated time: func 0.0529    prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 6] 
split level 1: [/input-12, 85] 
split level 2: [/input-12, 24] 
split level 3: [/input-8, 1973] 
split level 4: [/input-12, 92] 
split level 5: [/input-12, 56] 
split level 6: [/input-12, 38] 
split level 7: [/input-12, 46] 
split level 8: [/input-8, 1971] 
split level 9: [/input-12, 34] 
split level 10: [/input-8, 940] 
split level 11: [/input-8, 1706] 
split level 12: [/input-8, 1965] 
split level 13: [/input-12, 2] 
split level 14: [/input-8, 1967] 
split level 15: [/input-8, 1950] 
split level 16: [/input-8, 1379] 
split level 17: [/input-8, 1647] 
split level 18: [/input-12, 90] 
split level 19: [/input-8, 766] 
split level 20: [/input-8, 1655] 
split level 21: [/input-8, 354] 
split level 22: [/input, 4071] 
split level 23: [/input-8, 891] 
split level 24: [/input-8, 1388] 
split level 25: [/input-8, 1391] 
split level 26: [/input-8, 1399] 
split level 27: [/input-8, 253] 
split level 28: [/input, 3315] 
split level 29: [/input-8, 1502] 
split level 30: [/input-8, 363] 
split level 31: [/input-8, 158] 
split level 32: [/input-8, 255] 
split level 33: [/input-8, 247] 
split level 34: [/input, 3571] 
split level 35: [/input, 1463] 
split level 36: [/input-8, 733] 
split level 37: [/input-8, 1595] 
split level 38: [/input-8, 1510] 
split level 39: [/input-8, 510] 
split level 40: [/input-8, 1812] 
split level 41: [/input-8, 1981] 
split level 42: [/input, 2744] 
split level 43: [/input-8, 243] 
split level 44: [/input, 1012] 
split level 45: [/input-8, 1704] 
split level 46: [/input-8, 254] 
split level 47: [/input, 1250] 
split level 48: [/input, 646] 
split level 49: [/input, 1251] 
split level 50: [/input-8, 752] 
split level 51: [/input, 1445] 
split level 52: [/input-8, 1955] 
split level 53: [/input-8, 764] 
split level 54: [/input-8, 285] 
split level 55: [/input, 1491] 
split level 56: [/input-8, 246] 
split level 57: [/input, 1252] 
split level 58: [/input, 2637] 
split level 59: [/input-8, 149] 
split level 60: [/input-8, 429] 
split level 61: [/input, 3165] 
split level 62: [/input, 1271] 
split level 63: [/input-8, 598] 
split level 64: [/input, 2195] 
split level 65: [/input-8, 142] 
split level 66: [/input, 2467] 
split level 67: [/input-8, 313] 
split level 68: [/input, 1234] 
split level 69: [/input, 2708] 
split level 70: [/input, 2005] 
split level 71: [/input-8, 1551] 
split level 72: [/input, 3272] 
split level 73: [/input, 1021] 
split level 74: [/input-8, 1527] 
split level 75: [/input, 1490] 
split level 76: [/input, 166] 
split level 77: [/input-8, 1633] 
split level 78: [/input, 4089] 
split level 79: [/input, 2451] 
split level 80: [/input, 2787] 
split level 81: [/input, 386] 
split level 82: [/input, 2026] 
split level 83: [/input-8, 1662] 
split level 84: [/input, 2021] 
split level 85: [/input, 1480] 
split level 86: [/input, 2006] 
split level 87: [/input, 3416] 
split level 88: [/input-8, 1598] 
split level 89: [/input-8, 1154] 
split level 90: [/input, 2020] 
split level 91: [/input, 385] 
split level 92: [/input, 2470] 
split level 93: [/input, 195] 
split level 94: [/input, 2785] 
split level 95: [/input, 2214] 
split level 96: [/input, 645] 
split level 97: [/input, 1398] 
split level 98: [/input, 1272] 
split level 99: [/input, 152] 
split level 100: [/input, 2022] 
split level 101: [/input, 2458] 
split level 102: [/input, 387] 
split level 103: [/input-8, 605] 
split level 104: [/input, 356] 
split level 105: [/input-12, 79] 
split level 106: [/input, 2212] 
split level 107: [/input, 1233] 
split level 108: [/input-8, 591] 
split level 109: [/input, 168] 
split level 110: [/input, 2422] 
split level 111: [/input, 1263] 
split level 112: [/input, 2004] 
split level 113: [/input, 193] 
split level 114: [/input, 2670] 
split level 115: [/input, 843] 
split level 116: [/input, 2452] 
split level 117: [/input, 1691] 
split level 118: [/input, 2211] 
split level 119: [/input, 3256] 
split level 120: [/input, 723] 
split level 121: [/input-8, 240] 
split level 122: [/input, 194] 
split level 123: [/input, 2438] 
split level 124: [/input, 2023] 
split level 125: [/input, 2024] 
split level 126: [/input, 3151] 
split level 127: [/input, 2216] 
split level 128: [/input, 2760] 
split level 129: [/input, 2450] 
split level 130: [/input, 185] 
split level 131: [/input, 899] 
split level 132: [/input-8, 379] 
split level 133: [/input-8, 1155] 
split level 134: [/input, 1275] 
split level 135: [/input, 401] 
split level 136: [/input, 2025] 
split level 137: [/input, 2724] 
split level 138: [/input, 897] 
split level 139: [/input-8, 1529] 
split level 140: [/input, 884] 
split level 141: [/input, 2392] 
split level 142: [/input, 2484] 
split level 143: [/input, 148] 
split level 144: [/input-8, 1631] 
split level 145: [/input, 915] 
split level 146: [/input-8, 248] 
split level 147: [/input, 2930] 
split level 148: [/input, 827] 
split level 149: [/input, 1274] 
split level 150: [/input, 2639] 
split level 151: [/input, 2455] 
split level 152: [/input, 828] 
split level 153: [/input, 388] 
split level 154: [/input-8, 1211] 
split level 155: [/input, 436] 
split level 156: [/input, 1789] 
split level 157: [/input, 2437] 
split level 158: [/input-8, 1770] 
split level 159: [/input-8, 1156] 
split level 160: [/input, 2914] 
split level 161: [/input, 1986] 
split level 162: [/input-8, 893] 
split level 163: [/input, 3491] 
split level 164: [/input-8, 1934] 
split level 165: [/input, 1273] 
split level 166: [/input-8, 1530] 
split level 167: [/input, 857] 
split level 168: [/input, 1023] 
split level 169: [/input, 165] 
split level 170: [/input, 3417] 
split level 171: [/input, 3441] 
split level 172: [/input, 3220] 
split level 173: [/input, 2029] 
split level 174: [/input-8, 1172] 
split level 175: [/input-8, 1702] 
split level 176: [/input, 420] 
split level 177: [/input, 694] 
split level 178: [/input, 2393] 
split level 179: [/input, 856] 
split level 180: [/input, 913] 
split level 181: [/input-8, 263] 
split level 182: [/input, 1900] 
split level 183: [/input, 2742] 
split level 184: [/input, 2408] 
split level 185: [/input, 435] 
split level 186: [/input, 1990] 
split level 187: [/input, 1989] 
split level 188: [/input, 662] 
split level 189: [/input, 3028] 
split level 190: [/input, 2846] 
split level 191: [/input-8, 1158] 
split level 192: [/input, 1020] 
split level 193: [/input, 3402] 
split level 194: [/input, 3135] 
split level 195: [/input, 2913] 
split level 196: [/input, 2232] 
split level 197: [/input, 2465] 
split level 198: [/input, 2420] 
split level 199: [/input, 2623] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.47403573989868164
10 lb beta sum: 0.0, worst -0.47403669357299805
Time: prepare 0.0114    bound 0.1005    transfer 0.0020    finalize 0.0029    func 0.1194    
Accumulated time: func 0.1724    prepare 0.0228    bound 0.1530    transfer 0.0021    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(-0.11545992) min lb tensor(-0.47403002)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.010090351104736328 
BICCOS Cumulative time: 0.010090351104736328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.46135 (1), -0.46118 (1), -0.46104 (1), -0.46091 (1), -0.46057 (1), -0.46044 (1), -0.46034 (1), -0.46029 (1), -0.46026 (1), -0.45984 (1), -0.45949 (1), -0.45946 (1), -0.45903 (1), -0.45902 (1), -0.45819 (1), -0.45792 (1), -0.45764 (1), -0.45639 (1), -0.45626 (1), -0.45387 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5181    set_bounds 0.0088    solve 0.1195    add 0.0724    
Accumulated time: pickout 0.0003    decision 0.5181    set_bounds 0.0088    solve 0.1195    add 0.0724    
Current (lb-rhs): -0.4613518714904785
50 domains visited
Cumulative time: 0.7977766990661621

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 24] [/input-12, 24] [/input-12, 85] [/input-12, 24] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
split level 2: [/input-12, 24] [/input-12, 24] [/input-12, 46] [/input-12, 92] [/input-12, 92] [/input-8, 1973] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-8, 1971] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.43883490562438965
10 lb beta sum: 0.0, worst -0.4382796287536621
Time: prepare 0.0128    bound 0.0972    transfer 0.0011    finalize 0.0023    func 0.1160    
Accumulated time: func 0.2884    prepare 0.0358    bound 0.2502    transfer 0.0032    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.17791557) min lb tensor(-0.43820381)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012401103973388672 
BICCOS Cumulative time: 0.022491455078125
Preprocessing time: 0.011739015579223633 Inference time: 0.0002646446228027344 Add cuts time: 0.00016188621520996094 Cut analysis time: 0.00023555755615234375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24607 (2), -0.24073 (2), -0.24063 (2), -0.23994 (2), -0.23973 (2), -0.23747 (2), -0.23514 (2), -0.23449 (2), -0.22776 (2), -0.22638 (2), -0.22429 (2), -0.22262 (2), -0.21653 (2), -0.20659 (2), -0.20591 (2), -0.20347 (2), -0.20304 (2), -0.20269 (2), -0.20179 (2), -0.20130 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0238    set_bounds 0.0124    solve 0.1161    add 0.0744    
Accumulated time: pickout 0.0014    decision 0.5419    set_bounds 0.0211    solve 0.2356    add 0.1468    
Current (lb-rhs): -0.24606752395629883
100 domains visited
Cumulative time: 1.0380628108978271

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 6] [/input-12, 6] 
split level 1: [/input-12, 24] [/input-12, 85] [/input-12, 24] [/input-12, 85] [/input-12, 85] [/input-12, 24] [/input-12, 92] [/input-12, 92] [/input-12, 85] [/input-12, 24] 
split level 2: [/input-12, 92] [/input-12, 46] [/input-12, 92] [/input-12, 46] [/input-12, 46] [/input-12, 92] [/input-12, 46] [/input-12, 46] [/input-12, 92] [/input-12, 46] 
split level 3: [/input-12, 46] [/input-8, 1971] [/input-12, 46] [/input-8, 1706] [/input-8, 1706] [/input-12, 46] [/input-8, 1971] [/input-8, 1971] [/input-12, 46] [/input-8, 1971] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2273411750793457
10 lb beta sum: 0.2894103229045868, worst -0.22358417510986328
Time: prepare 0.0068    bound 0.1182    transfer 0.0011    finalize 0.0022    func 0.1308    
Accumulated time: func 0.4192    prepare 0.0428    bound 0.3684    transfer 0.0043    finalize 0.0075    
all_split False
======================Cut inference begins======================
max lb tensor(0.20239252) min lb tensor(-0.22196007)
Number of Verified Splits: 107 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 6
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.019874095916748047 
BICCOS Cumulative time: 0.04236555099487305
Preprocessing time: 0.01156473159790039 Inference time: 0.004697322845458984 Add cuts time: 0.0030989646911621094 Cut analysis time: 0.0005130767822265625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06650 (3), -0.06628 (3), -0.06619 (3), -0.06568 (3), -0.06546 (3), -0.06466 (3), -0.06374 (3), -0.06302 (3), -0.06120 (3), -0.06057 (3), -0.06021 (3), -0.06014 (3), -0.05993 (3), -0.05713 (3), -0.05643 (3), -0.05548 (3), -0.05541 (3), -0.05389 (3), -0.05353 (3), -0.05294 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0192    set_bounds 0.0149    solve 0.1309    add 0.0878    
Accumulated time: pickout 0.0023    decision 0.5612    set_bounds 0.0360    solve 0.3665    add 0.2346    
Current (lb-rhs): -0.06649774312973022
150 domains visited
Cumulative time: 1.311906337738037

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 85] [/input-12, 85] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 6] [/input-12, 24] [/input-12, 24] 
split level 1: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 24] [/input-12, 92] [/input-12, 92] 
split level 2: [/input-12, 38] [/input-12, 46] [/input-12, 46] [/input-8, 1971] [/input-8, 1971] [/input-8, 1971] [/input-8, 1971] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 46] [/input-8, 1971] [/input-8, 1971] [/input-8, 1706] [/input-8, 1706] [/input-8, 1706] [/input-8, 1706] [/input-8, 1965] [/input-8, 1971] [/input-8, 1971] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06521272659301758
10 lb beta sum: 0.7315431237220764, worst -0.05067785829305649
Time: prepare 0.0072    bound 0.1335    transfer 0.0013    finalize 0.0021    func 0.1467    
Accumulated time: func 0.5659    prepare 0.0502    bound 0.5019    transfer 0.0056    finalize 0.0096    
all_split False
======================Cut inference begins======================
max lb tensor(0.47147608) min lb tensor(-0.04471027)
Number of Verified Splits: 370 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 13
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.03825998306274414 
BICCOS Cumulative time: 0.08062553405761719
Preprocessing time: 0.011570215225219727 Inference time: 0.017094135284423828 Add cuts time: 0.008855342864990234 Cut analysis time: 0.0007402896881103516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02456 (4), -0.01060 (4), -0.00437 (4), -0.00206 (4), 
Length of domains: 4
Time: pickout 0.0009    decision 0.0193    set_bounds 0.0146    solve 0.1468    add 0.2583    
Accumulated time: pickout 0.0033    decision 0.5804    set_bounds 0.0506    solve 0.5133    add 0.4929    
Current (lb-rhs): -0.024558067321777344
154 domains visited
Cumulative time: 1.7904372215270996

Shallow-BaB round 5
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-8, 1973] 
split level 1: [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-12, 92] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 56] [/input-12, 56] 
split level 3: [/input-12, 56] [/input-12, 56] [/input-12, 46] [/input-8, 1971] 
split level 4: [/input-8, 1971] [/input-12, 46] [/input-8, 1971] [/input-12, 46] 
split level 5: [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] 
split level 6: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 7: [/input-8, 1706] [/input-8, 1706] [/input-8, 1706] [/input-8, 1706] 
split level 8: [/input-8, 1965] [/input-8, 1965] [/input-8, 1965] [/input-8, 1965] 
split level 9: [/input-8, 1950] [/input-8, 1950] [/input-8, 1950] [/input-8, 1950] 
split level 10: [/input-8, 766] [/input-8, 766] [/input-8, 766] [/input-8, 766] 
split level 11: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 12: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 13: [/input-8, 1647] [/input-8, 1647] [/input-8, 1647] [/input-8, 1647] 
split level 14: [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] 
split level 15: [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] 
split level 16: [/input-8, 1655] [/input-8, 1655] [/input-8, 1655] [/input-8, 1655] 
split level 17: [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] 
split level 18: [/input-8, 764] [/input-8, 764] [/input-8, 764] [/input-8, 764] 
split level 19: [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] 
split level 20: [/input-8, 752] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] 
split level 21: [/input-8, 1981] [/input-8, 752] [/input-8, 752] [/input-8, 1981] 
split level 22: [/input-8, 1388] [/input-8, 1981] [/input-8, 1981] [/input-8, 752] 
split level 23: [/input-8, 1510] [/input-8, 1510] [/input-8, 1399] [/input-8, 1510] 
split level 24: [/input-8, 1399] [/input-8, 1399] [/input-8, 1510] [/input-8, 1399] 
split level 25: [/input-8, 1502] [/input-8, 1704] [/input-8, 1704] [/input-8, 1502] 
split level 26: [/input-8, 1704] [/input-8, 1502] [/input-8, 1502] [/input, 3571] 
split level 27: [/input, 3571] [/input, 3571] [/input, 3571] [/input-8, 1704] 
split level 28: [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] 
split level 29: [/input-8, 1633] [/input-8, 1633] [/input-8, 149] [/input-8, 510] 
split level 30: [/input-8, 1700] [/input-8, 1700] [/input-8, 1700] [/input-8, 149] 
split level 31: [/input-8, 285] [/input-8, 1691] [/input-8, 1633] [/input-8, 1633] 
split level 32: [/input-8, 510] [/input-8, 285] [/input-8, 285] [/input-8, 285] 
split level 33: [/input-8, 149] [/input-8, 149] [/input-8, 1691] [/input-8, 1691] 
split level 34: [/input-8, 1691] [/input-8, 510] [/input-8, 510] [/input-8, 1700] 
split level 35: [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] 
split level 36: [/input, 3165] [/input, 3165] [/input, 3165] [/input, 3417] 
split level 37: [/input-8, 1527] [/input-8, 1527] [/input, 3417] [/input, 3165] 
split level 38: [/input, 3417] [/input, 3417] [/input-8, 1527] [/input-8, 341] 
split level 39: [/input-8, 313] [/input-8, 341] [/input-8, 313] [/input-8, 1527] 
split level 40: [/input, 359] [/input-8, 313] [/input, 2438] [/input-8, 313] 
split level 41: [/input-8, 341] [/input, 2438] [/input-8, 341] [/input, 2438] 
split level 42: [/input-8, 1631] [/input, 359] [/input, 359] [/input-8, 1629] 
split level 43: [/input-8, 1629] [/input-8, 1631] [/input-8, 1631] [/input-8, 1631] 
split level 44: [/input-8, 1211] [/input-8, 1629] [/input-8, 1629] [/input, 359] 
split level 45: [/input, 4066] [/input-8, 1211] [/input-8, 1211] [/input-8, 1211] 
split level 46: [/input-8, 1934] [/input-8, 1934] [/input-8, 1934] [/input-8, 1934] 
split level 47: [/input-8, 1702] [/input-8, 1702] [/input-8, 1702] [/input-8, 1702] 
split level 48: [/input-8, 605] [/input-8, 605] [/input-8, 379] [/input-8, 605] 
split level 49: [/input-8, 379] [/input-8, 379] [/input-8, 605] [/input-8, 379] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05692768096923828

all verified at 1th iter
Time: prepare 0.0082    bound 0.0141    transfer 0.0016    finalize 0.0024    func 0.0293    
Accumulated time: func 0.5952    prepare 0.0609    bound 0.5160    transfer 0.0072    finalize 0.0120    
all_split False
======================Cut inference begins======================
max lb tensor(0.21477690) min lb tensor(0.00326896)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.04450869560241699 
BICCOS Cumulative time: 0.12513422966003418
Preprocessing time: 0.01156163215637207 Inference time: 0.018990516662597656 Add cuts time: 0.013246297836303711 Cut analysis time: 0.0007102489471435547
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0006    decision 0.1396    set_bounds 0.0132    solve 0.0294    add 0.0303    
Accumulated time: pickout 0.0039    decision 0.7200    set_bounds 0.0639    solve 0.5427    add 0.5232    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
154 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38]), tensor([-1.]), tensor([0]), tensor([2.82951758e+16]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85, 24]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([2.82951758e+16, 1.41759440e-01, 2.05405042e-01, 4.27106470e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85, 24]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.82951758e+16, 1.41759440e-01, 2.05405042e-01, 1.08481929e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 1.41759440e-01, 6.84853047e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 2.40683600e-01, 1.56239077e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1973]), tensor([-1.]), tensor([0]), tensor([4.97838215e-10]), tensor([4])), '/input-12': ([38, 6, 85, 24], [1.0, 1.0, 1.0, -1.0], [0, 0, 0, 0], [2.8295175826571264e+16, 0.24068360030651093, 0.07531081140041351, 0.04194067418575287], [0, 1, 2, 3])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1973]), tensor([1.]), tensor([0]), tensor([1.78218215e-07]), tensor([4])), '/input-12': ([38, 6, 85, 24], [1.0, 1.0, 1.0, -1.0], [0, 0, 0, 0], [2.8295175826571264e+16, 0.24068360030651093, 0.07531081140041351, 0.04194067418575287], [0, 1, 2, 3])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85, 24]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([2.82951758e+16, 2.40683600e-01, 7.53108114e-02, 9.92555469e-02]), tensor([0, 1, 2, 3]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4625115394592285
10 lb beta sum: 1.036932110786438, worst -0.4538379907608032
Time: prepare 0.0004    bound 0.1294    transfer 0.0001    finalize 0.0002    func 0.1303    
Accumulated time: func 0.7255    prepare 0.0613    bound 0.6454    transfer 0.0073    finalize 0.0122    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 6] [/input-12, 24] 
split level 1: [/input-12, 85] [/input-8, 1973] 
split level 2: [/input-12, 24] [/input-12, 46] 
split level 3: [/input-8, 1973] [/input-8, 1971] 
split level 4: [/input-12, 46] [/input-8, 1965] 
split level 5: [/input-8, 1971] [/input-12, 2] 
split level 6: [/input-8, 1965] [/input-8, 1706] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5044400691986084, worst -0.24105945229530334
10 lb beta sum: 0.5735694169998169, worst -0.1468353271484375
Time: prepare 0.0112    bound 0.1320    transfer 0.0016    finalize 0.0015    func 0.1480    
Accumulated time: func 0.8735    prepare 0.0729    bound 0.7774    transfer 0.0090    finalize 0.0137    
all_split False
======================Cut inference begins======================
max lb tensor(0.25615865) min lb tensor(-0.14645624)
Number of Verified Splits: 185 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.00033283233642578125 
BICCOS Cumulative time: 0.12546706199645996
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14646 (7), -0.14345 (7), -0.13694 (7), -0.13475 (7), -0.13370 (7), -0.13001 (7), -0.12778 (7), -0.12320 (7), -0.07313 (7), -0.07266 (7), -0.07036 (7), -0.07010 (7), -0.06374 (7), -0.06341 (7), -0.06320 (7), -0.06277 (7), -0.06190 (7), -0.06183 (7), -0.06118 (7), -0.06014 (7), 
Length of domains: 71
Time: pickout 0.0005    decision 0.0198    set_bounds 0.0225    solve 0.1481    add 0.0012    
Accumulated time: pickout 0.0044    decision 0.7398    set_bounds 0.0864    solve 0.6907    add 0.5244    
Current (lb-rhs): -0.14645624160766602
225 domains visited
Cumulative time: 2.389444351196289

BaB round 2
batch: 71
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 2] [/input-8, 1950] [/input-8, 1655] [/input-12, 2] [/input-12, 2] [/input-8, 1950] [/input-8, 1706] [/input-8, 1706] [/input-8, 1655] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5820099711418152, worst -0.1226205825805664
10 lb beta sum: 0.5819932222366333, worst -0.12213325500488281
Time: prepare 0.0125    bound 0.1355    transfer 0.0018    finalize 0.0015    func 0.1531    
Accumulated time: func 1.0266    prepare 0.0856    bound 0.9129    transfer 0.0108    finalize 0.0152    
all_split False
======================Cut inference begins======================
max lb tensor(0.27997524) min lb tensor(-0.12186575)
Number of Verified Splits: 162 of 284
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.00033283233642578125 
BICCOS Cumulative time: 0.12579989433288574
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12187 (9), -0.11829 (9), -0.11247 (9), -0.11227 (9), -0.11053 (9), -0.11027 (9), -0.10848 (9), -0.10543 (9), -0.10428 (9), -0.10330 (9), -0.10181 (9), -0.10125 (9), -0.09842 (9), -0.09753 (9), -0.09504 (9), -0.09146 (9), -0.06409 (9), -0.06364 (9), -0.06132 (9), -0.06097 (9), 
Length of domains: 122
Time: pickout 0.0016    decision 0.0174    set_bounds 0.0184    solve 0.1532    add 0.0014    
Accumulated time: pickout 0.0059    decision 0.7573    set_bounds 0.1047    solve 0.8439    add 0.5258    
Current (lb-rhs): -0.12186574935913086
347 domains visited
Cumulative time: 2.582500696182251

BaB round 3
batch: 122
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1655] [/input-8, 1950] [/input-12, 56] [/input-8, 1706] [/input-8, 1655] [/input-8, 1950] [/input-8, 1950] [/input-8, 1655] [/input-12, 56] [/input-8, 1706] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5562505722045898, worst -0.11533355712890625
10 lb beta sum: 0.5562505722045898, worst -0.11508846282958984
Time: prepare 0.0108    bound 0.1355    transfer 0.0014    finalize 0.0014    func 0.1507    
Accumulated time: func 1.1773    prepare 0.0966    bound 1.0484    transfer 0.0121    finalize 0.0166    
all_split False
======================Cut inference begins======================
max lb tensor(0.25726604) min lb tensor(-0.11494780)
Number of Verified Splits: 62 of 244
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.0003275871276855469 
BICCOS Cumulative time: 0.1261274814605713
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11495 (10), -0.11139 (10), -0.11030 (10), -0.10678 (10), -0.10607 (10), -0.10524 (10), -0.10439 (10), -0.10378 (10), -0.10152 (10), -0.10020 (10), -0.09937 (10), -0.09930 (10), -0.09868 (10), -0.09786 (10), -0.09719 (10), -0.09652 (10), -0.09638 (10), -0.09532 (10), -0.09521 (10), -0.09428 (10), 
Length of domains: 182
Time: pickout 0.0021    decision 0.0174    set_bounds 0.0099    solve 0.1508    add 0.0015    
Accumulated time: pickout 0.0081    decision 0.7747    set_bounds 0.1147    solve 0.9947    add 0.5273    
Current (lb-rhs): -0.11494779586791992
529 domains visited
Cumulative time: 2.765130043029785

BaB round 4
batch: 182
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1399] [/input-12, 56] [/input-8, 1399] [/input-12, 56] [/input-8, 1399] [/input-8, 1399] [/input-12, 56] [/input-8, 1399] [/input-12, 2] [/input-8, 1399] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5592636466026306, worst -0.11494731903076172
10 lb beta sum: 0.5592636466026306, worst -0.11478042602539062
Time: prepare 0.0161    bound 0.1377    transfer 0.0024    finalize 0.0020    func 0.1606    
Accumulated time: func 1.3379    prepare 0.1128    bound 1.1861    transfer 0.0146    finalize 0.0186    
all_split False
======================Cut inference begins======================
max lb tensor(0.24621344) min lb tensor(-0.11467648)
Number of Verified Splits: 132 of 364
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.000335693359375 
BICCOS Cumulative time: 0.1264631748199463
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11468 (11), -0.11116 (11), -0.10995 (11), -0.10649 (11), -0.10585 (11), -0.10497 (11), -0.10433 (11), -0.10353 (11), -0.10129 (11), -0.09986 (11), -0.09928 (11), -0.09918 (11), -0.09835 (11), -0.09765 (11), -0.09700 (11), -0.09624 (11), -0.09597 (11), -0.09521 (11), -0.09513 (11), -0.09417 (11), 
Length of domains: 232
Time: pickout 0.0024    decision 0.0203    set_bounds 0.0153    solve 0.1607    add 0.0015    
Accumulated time: pickout 0.0105    decision 0.7949    set_bounds 0.1300    solve 1.1554    add 0.5289    
Current (lb-rhs): -0.11467647552490234
761 domains visited
Cumulative time: 2.9664864540100098

BaB round 5
batch: 232
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1647] [/input-8, 1647] [/input-8, 1647] [/input-8, 1647] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 1647] [/input-12, 56] [/input-8, 1647] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5544474720954895, worst -0.1088109016418457
10 lb beta sum: 0.5544474720954895, worst -0.10866498947143555
Time: prepare 0.0205    bound 0.1431    transfer 0.0029    finalize 0.0025    func 0.1721    
Accumulated time: func 1.5099    prepare 0.1336    bound 1.3292    transfer 0.0175    finalize 0.0211    
all_split False
======================Cut inference begins======================
max lb tensor(0.25761640) min lb tensor(-0.10858536)
Number of Verified Splits: 202 of 464
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.0003764629364013672 
BICCOS Cumulative time: 0.12683963775634766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10859 (12), -0.10518 (12), -0.10384 (12), -0.10217 (12), -0.10047 (12), -0.09916 (12), -0.09887 (12), -0.09869 (12), -0.09864 (12), -0.09746 (12), -0.09686 (12), -0.09579 (12), -0.09535 (12), -0.09396 (12), -0.09374 (12), -0.09363 (12), -0.09347 (12), -0.09334 (12), -0.09241 (12), -0.09205 (12), 
Length of domains: 262
Time: pickout 0.0033    decision 0.0227    set_bounds 0.0194    solve 0.1722    add 0.0018    
Accumulated time: pickout 0.0137    decision 0.8177    set_bounds 0.1494    solve 1.3276    add 0.5307    
Current (lb-rhs): -0.10858535766601562
1023 domains visited
Cumulative time: 3.187701940536499

BaB round 6
batch: 262
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-8, 1647] [/input-8, 313] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5614638924598694, worst -0.1039266586303711
10 lb beta sum: 0.5614638924598694, worst -0.10382223129272461
Time: prepare 0.0230    bound 0.1398    transfer 0.0015    finalize 0.0037    func 0.1713    
Accumulated time: func 1.6812    prepare 0.1567    bound 1.4690    transfer 0.0190    finalize 0.0248    
all_split False
======================Cut inference begins======================
max lb tensor(0.25673151) min lb tensor(-0.10374928)
Number of Verified Splits: 181 of 524
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.00037097930908203125 
BICCOS Cumulative time: 0.1272106170654297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10375 (13), -0.10020 (13), -0.09902 (13), -0.09732 (13), -0.09727 (13), -0.09548 (13), -0.09428 (13), -0.09408 (13), -0.09404 (13), -0.09400 (13), -0.09356 (13), -0.09260 (13), -0.09258 (13), -0.09187 (13), -0.09092 (13), -0.09083 (13), -0.09038 (13), -0.08936 (13), -0.08886 (13), -0.08884 (13), 
Length of domains: 343
Time: pickout 0.0045    decision 0.0254    set_bounds 0.0218    solve 0.1714    add 0.0020    
Accumulated time: pickout 0.0183    decision 0.8430    set_bounds 0.1712    solve 1.4991    add 0.5327    
Current (lb-rhs): -0.10374927520751953
1366 domains visited
Cumulative time: 3.414379835128784

BaB round 7
batch: 343
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5831802487373352, worst -0.10145235061645508
10 lb beta sum: 0.5831802487373352, worst -0.10138654708862305
Time: prepare 0.0299    bound 0.1393    transfer 0.0035    finalize 0.0037    func 0.1814    
Accumulated time: func 1.8626    prepare 0.1868    bound 1.6083    transfer 0.0225    finalize 0.0285    
all_split False
======================Cut inference begins======================
max lb tensor(0.25293016) min lb tensor(-0.10137320)
Number of Verified Splits: 170 of 686
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.00037479400634765625 
BICCOS Cumulative time: 0.12758541107177734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10137 (14), -0.09782 (14), -0.09661 (14), -0.09506 (14), -0.09491 (14), -0.09309 (14), -0.09170 (14), -0.09167 (14), -0.09159 (14), -0.09151 (14), -0.09135 (14), -0.09033 (14), -0.09016 (14), -0.08908 (14), -0.08861 (14), -0.08839 (14), -0.08799 (14), -0.08699 (14), -0.08665 (14), -0.08642 (14), 
Length of domains: 516
Time: pickout 0.0047    decision 0.0288    set_bounds 0.0280    solve 0.1816    add 0.0025    
Accumulated time: pickout 0.0230    decision 0.8718    set_bounds 0.1992    solve 1.6806    add 0.5352    
Current (lb-rhs): -0.10137319564819336
1882 domains visited
Cumulative time: 3.6616127490997314

BaB round 8
batch: 516
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-12, 34] [/input-8, 1388] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5587770938873291, worst -0.09759807586669922
10 lb beta sum: 0.5587770938873291, worst -0.0975656509399414
Time: prepare 0.0452    bound 0.1408    transfer 0.0054    finalize 0.0053    func 0.2032    
Accumulated time: func 2.0658    prepare 0.2322    bound 1.7491    transfer 0.0280    finalize 0.0337    
all_split False
======================Cut inference begins======================
max lb tensor(0.24953258) min lb tensor(-0.09754086)
Number of Verified Splits: 321 of 1032
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.0003826618194580078 
BICCOS Cumulative time: 0.12796807289123535
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09754 (15), -0.09444 (15), -0.09274 (15), -0.09260 (15), -0.09157 (15), -0.09120 (15), -0.09109 (15), -0.08971 (15), -0.08907 (15), -0.08866 (15), -0.08839 (15), -0.08829 (15), -0.08800 (15), -0.08791 (15), -0.08791 (15), -0.08762 (15), -0.08642 (15), -0.08631 (15), -0.08627 (15), -0.08615 (15), 
Length of domains: 711
Time: pickout 0.0067    decision 0.0382    set_bounds 0.0419    solve 0.2035    add 0.0034    
Accumulated time: pickout 0.0297    decision 0.9101    set_bounds 0.2411    solve 1.8841    add 0.5386    
Current (lb-rhs): -0.09754085540771484
2593 domains visited
Cumulative time: 3.957754373550415

BaB round 9
batch: 711
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5289886593818665, worst -0.09754037857055664
10 lb beta sum: 0.5289886593818665, worst -0.0975193977355957
Time: prepare 0.0621    bound 0.1512    transfer 0.0152    finalize 0.0073    func 0.2454    
Accumulated time: func 2.3112    prepare 0.2945    bound 1.9002    transfer 0.0432    finalize 0.0410    
all_split False
======================Cut inference begins======================
max lb tensor(0.24376094) min lb tensor(-0.09749603)
Number of Verified Splits: 694 of 1422
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.0003910064697265625 
BICCOS Cumulative time: 0.12835907936096191
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09750 (16), -0.09443 (16), -0.09269 (16), -0.09230 (16), -0.09113 (16), -0.09105 (16), -0.08971 (16), -0.08851 (16), -0.08828 (16), -0.08789 (16), -0.08786 (16), -0.08767 (16), -0.08758 (16), -0.08728 (16), -0.08635 (16), -0.08627 (16), -0.08594 (16), -0.08588 (16), -0.08574 (16), -0.08468 (16), 
Length of domains: 728
Time: pickout 0.0117    decision 0.0499    set_bounds 0.0563    solve 0.2457    add 0.0045    
Accumulated time: pickout 0.0415    decision 0.9599    set_bounds 0.2974    solve 2.1298    add 0.5431    
Current (lb-rhs): -0.09749603271484375
3321 domains visited
Cumulative time: 4.329948902130127

BaB round 10
batch: 728
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1388] [/input-12, 34] [/input-8, 1388] [/input-12, 34] [/input-8, 1388] [/input-12, 34] [/input-8, 1388] [/input-12, 34] [/input-8, 1388] [/input-12, 34] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5610286593437195, worst -0.09412336349487305
10 lb beta sum: 0.5610286593437195, worst -0.09410429000854492
Time: prepare 0.0646    bound 0.1548    transfer 0.0040    finalize 0.0080    func 0.2407    
Accumulated time: func 2.5520    prepare 0.3594    bound 2.0550    transfer 0.0472    finalize 0.0490    
all_split False
======================Cut inference begins======================
max lb tensor(0.24966806) min lb tensor(-0.09410143)
Number of Verified Splits: 691 of 1456
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.0004200935363769531 
BICCOS Cumulative time: 0.12877917289733887
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09410 (17), -0.09108 (17), -0.08932 (17), -0.08866 (17), -0.08771 (17), -0.08766 (17), -0.08636 (17), -0.08499 (17), -0.08491 (17), -0.08452 (17), -0.08436 (17), -0.08409 (17), -0.08406 (17), -0.08392 (17), -0.08294 (17), -0.08290 (17), -0.08231 (17), -0.08221 (17), -0.08186 (17), -0.08128 (17), 
Length of domains: 765
Time: pickout 0.0130    decision 0.1753    set_bounds 0.0603    solve 0.2411    add 0.0031    
Accumulated time: pickout 0.0545    decision 1.1352    set_bounds 0.3576    solve 2.3709    add 0.5461    
Current (lb-rhs): -0.0941014289855957
4086 domains visited
Cumulative time: 4.8264853954315186

BaB round 11
batch: 765
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-8, 1399] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5594016909599304, worst -0.0930180549621582
10 lb beta sum: 0.5594016909599304, worst -0.09301567077636719
Time: prepare 0.0662    bound 0.1538    transfer 0.0051    finalize 0.0075    func 0.2431    
Accumulated time: func 2.7951    prepare 0.4258    bound 2.2088    transfer 0.0523    finalize 0.0564    
all_split False
======================Cut inference begins======================
max lb tensor(0.25008857) min lb tensor(-0.09300947)
Number of Verified Splits: 338 of 1530
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.00041365623474121094 
BICCOS Cumulative time: 0.12919282913208008
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09301 (18), -0.08979 (18), -0.08823 (18), -0.08748 (18), -0.08663 (18), -0.08580 (18), -0.08506 (18), -0.08366 (18), -0.08329 (18), -0.08305 (18), -0.08301 (18), -0.08292 (18), -0.08290 (18), -0.08186 (18), -0.08107 (18), -0.08103 (18), -0.08063 (18), -0.08027 (18), -0.07970 (18), -0.07957 (18), 
Length of domains: 1192
Time: pickout 0.0140    decision 0.0524    set_bounds 0.0623    solve 0.2435    add 0.0051    
Accumulated time: pickout 0.0685    decision 1.1876    set_bounds 0.4199    solve 2.6144    add 0.5512    
Current (lb-rhs): -0.09300947189331055
5278 domains visited
Cumulative time: 5.207109451293945

BaB round 12
batch: 1192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-8, 1399] [/input-8, 1399] [/input-8, 1399] [/input-8, 1399] [/input-8, 1399] [/input-8, 1399] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5258934497833252, worst -0.08777189254760742
10 lb beta sum: 0.5258934497833252, worst -0.08776330947875977
Time: prepare 0.1053    bound 0.1929    transfer 0.0101    finalize 0.0122    func 0.3365    
Accumulated time: func 3.1315    prepare 0.5314    bound 2.4017    transfer 0.0624    finalize 0.0687    
all_split False
======================Cut inference begins======================
max lb tensor(0.24939531) min lb tensor(-0.08775091)
Number of Verified Splits: 240 of 2384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.0005018711090087891 
BICCOS Cumulative time: 0.12969470024108887
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08775 (19), -0.08641 (19), -0.08456 (19), -0.08315 (19), -0.08298 (19), -0.08214 (19), -0.08164 (19), -0.08137 (19), -0.08080 (19), -0.08079 (19), -0.08002 (19), -0.07982 (19), -0.07917 (19), -0.07844 (19), -0.07843 (19), -0.07816 (19), -0.07808 (19), -0.07806 (19), -0.07777 (19), -0.07752 (19), 
Length of domains: 2144
Time: pickout 0.0173    decision 0.0745    set_bounds 0.0964    solve 0.3369    add 0.0159    
Accumulated time: pickout 0.0857    decision 1.2621    set_bounds 0.5164    solve 2.9513    add 0.5671    
Current (lb-rhs): -0.08775091171264648
7422 domains visited
Cumulative time: 5.755467653274536

BaB round 13
batch: 2144
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4971068501472473, worst -0.08356332778930664
10 lb beta sum: 0.4971068501472473, worst -0.08352947235107422
Time: prepare 0.1979    bound 0.2948    transfer 0.0174    finalize 0.0230    func 0.5608    
Accumulated time: func 3.6924    prepare 0.7295    bound 2.6965    transfer 0.0798    finalize 0.0917    
all_split False
======================Cut inference begins======================
max lb tensor(0.24439758) min lb tensor(-0.08351421)
Number of Verified Splits: 344 of 4288
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.00044345855712890625 
BICCOS Cumulative time: 0.13013815879821777
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08351 (20), -0.08218 (20), -0.08040 (20), -0.08036 (20), -0.07903 (20), -0.07901 (20), -0.07874 (20), -0.07782 (20), -0.07740 (20), -0.07707 (20), -0.07702 (20), -0.07655 (20), -0.07645 (20), -0.07567 (20), -0.07566 (20), -0.07566 (20), -0.07560 (20), -0.07495 (20), -0.07466 (20), -0.07428 (20), 
Length of domains: 3944
Time: pickout 0.0366    decision 0.1280    set_bounds 0.3351    solve 0.5620    add 0.0243    
Accumulated time: pickout 0.1223    decision 1.3901    set_bounds 0.8514    solve 3.5133    add 0.5914    
Current (lb-rhs): -0.08351421356201172
11366 domains visited
Cumulative time: 6.8484416007995605

BaB round 14
batch: 3944
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] 
cut re-enabled after branching node selection
0 lb beta sum: 0.48164668679237366, worst -0.07970666885375977
10 lb beta sum: 0.48164668679237366, worst -0.07969522476196289
Time: prepare 0.3499    bound 0.4813    transfer 0.0506    finalize 0.0482    func 0.9809    
Accumulated time: func 4.6733    prepare 1.0797    bound 3.1778    transfer 0.1304    finalize 0.1398    
all_split False
======================Cut inference begins======================
max lb tensor(0.24532259) min lb tensor(-0.07967663)
Number of Verified Splits: 475 of 7888
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.00048041343688964844 
BICCOS Cumulative time: 0.13061857223510742
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07968 (21), -0.07834 (21), -0.07833 (21), -0.07698 (21), -0.07653 (21), -0.07644 (21), -0.07513 (21), -0.07511 (21), -0.07509 (21), -0.07509 (21), -0.07490 (21), -0.07396 (21), -0.07373 (21), -0.07370 (21), -0.07356 (21), -0.07356 (21), -0.07317 (21), -0.07309 (21), -0.07271 (21), -0.07257 (21), 
Length of domains: 7413
Time: pickout 0.0760    decision 0.2234    set_bounds 0.4753    solve 0.9831    add 0.0514    
Accumulated time: pickout 0.1983    decision 1.6135    set_bounds 1.3267    solve 4.4964    add 0.6427    
Current (lb-rhs): -0.07967662811279297
18779 domains visited
Cumulative time: 8.66811490058899

BaB round 15
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4641479253768921, worst -0.07665300369262695
10 lb beta sum: 0.4641479253768921, worst -0.07660913467407227
Time: prepare 0.4252    bound 0.4969    transfer 0.0286    finalize 0.2401    func 1.2428    
Accumulated time: func 5.9160    prepare 1.5051    bound 3.6747    transfer 0.1590    finalize 0.3799    
all_split False
======================Cut inference begins======================
max lb tensor(0.24094331) min lb tensor(-0.07658148)
Number of Verified Splits: 677 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.0005097389221191406 
BICCOS Cumulative time: 0.13112831115722656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07968 (21), -0.07834 (21), -0.07658 (22), -0.07653 (21), -0.07523 (22), -0.07520 (22), -0.07511 (21), -0.07509 (21), -0.07490 (21), -0.07396 (21), -0.07356 (21), -0.07337 (22), -0.07330 (22), -0.07317 (21), -0.07271 (21), -0.07257 (21), -0.07196 (22), -0.07194 (22), -0.07184 (22), -0.07182 (21), 
Length of domains: 10832
Time: pickout 0.0629    decision 0.3926    set_bounds 0.2007    solve 1.2443    add 0.0399    
Accumulated time: pickout 0.2613    decision 2.0061    set_bounds 1.5274    solve 5.7407    add 0.6826    
Current (lb-rhs): -0.07967662811279297
26294 domains visited
current_vram/total_varm: 24.6GB/99.9GB, batch_size increase to 8192
Cumulative time: 10.6233549118042

BaB round 16
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 285] [/input-8, 285] [/input, 4071] [/input, 4071] [/input, 4071] [/input-8, 285] [/input, 4071] [/input-8, 285] [/input, 4071] [/input-8, 285] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4716430902481079, worst -0.07849931716918945
10 lb beta sum: 0.4716430902481079, worst -0.07848691940307617
Time: prepare 0.8292    bound 0.9224    transfer 0.1310    finalize 0.0961    func 2.3052    
Accumulated time: func 8.2212    prepare 2.3346    bound 4.5972    transfer 0.2900    finalize 0.4760    
all_split False
======================Cut inference begins======================
max lb tensor(0.24163908) min lb tensor(-0.07848120)
Number of Verified Splits: 1924 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.0006272792816162109 
BICCOS Cumulative time: 0.13175559043884277
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07848 (22), -0.07714 (22), -0.07538 (23), -0.07533 (22), -0.07403 (23), -0.07391 (22), -0.07386 (22), -0.07371 (22), -0.07271 (22), -0.07236 (22), -0.07217 (23), -0.07207 (23), -0.07198 (22), -0.07152 (22), -0.07137 (22), -0.07078 (23), -0.07075 (23), -0.07071 (23), -0.07062 (22), -0.07061 (23), 
Length of domains: 17100
Time: pickout 0.1333    decision 0.4491    set_bounds 0.8179    solve 2.3078    add 0.0822    
Accumulated time: pickout 0.3945    decision 2.4553    set_bounds 2.3453    solve 8.0485    add 0.7648    
Current (lb-rhs): -0.07848119735717773
40754 domains visited
current_vram/total_varm: 24.6GB/99.9GB, batch_size increase to 16384
Cumulative time: 14.446937561035156

BaB round 17
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1012] [/input, 1012] [/input, 1012] [/input, 1012] [/input, 1012] [/input, 1012] [/input, 1012] [/input, 1012] [/input, 1012] [/input, 1012] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4679661989212036, worst -0.07405710220336914
10 lb beta sum: 0.4679661989212036, worst -0.0740203857421875
Time: prepare 1.6664    bound 1.7761    transfer 0.3596    finalize 0.1891    func 4.2038    
Accumulated time: func 12.4250    prepare 4.0013    bound 6.3733    transfer 0.6497    finalize 0.6651    
all_split False
======================Cut inference begins======================
max lb tensor(0.01001596) min lb tensor(-0.07401371)
Number of Verified Splits: 5086 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.0007109642028808594 
BICCOS Cumulative time: 0.13246655464172363
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07401 (23), -0.07400 (23), -0.07266 (23), -0.07266 (23), -0.07090 (24), -0.07090 (24), -0.07086 (23), -0.07081 (23), -0.06955 (24), -0.06954 (24), -0.06945 (23), -0.06942 (23), -0.06938 (23), -0.06936 (24), -0.06924 (23), -0.06922 (23), -0.06920 (23), -0.06827 (23), -0.06821 (23), -0.06817 (23), 
Length of domains: 28398
Time: pickout 0.2776    decision 1.9079    set_bounds 1.6609    solve 4.2094    add 0.0896    
Accumulated time: pickout 0.6721    decision 4.3632    set_bounds 4.0062    solve 12.2580    add 0.8544    
Current (lb-rhs): -0.07401371002197266
68436 domains visited
current_vram/total_varm: 33.5GB/99.9GB, batch_size increase to 32768
Cumulative time: 22.681100845336914

BaB round 18
batch: 28398
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4661332964897156, worst -0.07263326644897461
10 lb beta sum: 0.4661332964897156, worst -0.0726308822631836
Time: prepare 2.9102    bound 3.0482    transfer 0.6379    finalize 0.8177    func 7.7794    
Accumulated time: func 20.2044    prepare 6.9119    bound 9.4215    transfer 1.2876    finalize 1.4828    
all_split False
======================Cut inference begins======================
max lb tensor(0.01207197) min lb tensor(-0.07262564)
Number of Verified Splits: 8283 of 56796
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.0021114349365234375 
BICCOS Cumulative time: 0.13457798957824707
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07263 (24), -0.07260 (24), -0.07127 (24), -0.07126 (24), -0.06946 (24), -0.06943 (24), -0.06891 (24), -0.06889 (24), -0.06804 (24), -0.06800 (24), -0.06800 (24), -0.06785 (24), -0.06782 (24), -0.06772 (25), -0.06757 (24), -0.06754 (24), -0.06713 (25), -0.06711 (25), -0.06688 (24), -0.06682 (24), 
Length of domains: 48513
Time: pickout 0.6013    decision 3.1950    set_bounds 2.9648    solve 7.7889    add 0.1585    
Accumulated time: pickout 1.2734    decision 7.5581    set_bounds 6.9710    solve 20.0468    add 1.0129    
Current (lb-rhs): -0.07262563705444336
116949 domains visited
Cumulative time: 37.54294776916504

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input-8, 1704] [/input-8, 1704] [/input, 4071] [/input, 4071] [/input, 4071] 
cut re-enabled after branching node selection
0 lb beta sum: 0.46501410007476807, worst -0.06897544860839844
10 lb beta sum: 0.46501410007476807, worst -0.06888532638549805
Time: prepare 3.3725    bound 8.6846    transfer 0.7484    finalize 0.4943    func 14.3542    
Accumulated time: func 34.5586    prepare 10.2848    bound 18.1061    transfer 2.0360    finalize 1.9771    
all_split False
======================Cut inference begins======================
max lb tensor(0.01378918) min lb tensor(-0.06884193)
Number of Verified Splits: 10810 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.000980377197265625 
BICCOS Cumulative time: 0.1355583667755127
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06889 (24), -0.06884 (25), -0.06881 (25), -0.06823 (25), -0.06820 (25), -0.06754 (24), -0.06750 (25), -0.06747 (25), -0.06711 (25), -0.06687 (25), -0.06686 (25), -0.06642 (25), -0.06602 (25), -0.06577 (24), -0.06576 (25), -0.06573 (25), -0.06572 (25), -0.06546 (26), -0.06536 (24), -0.06516 (25), 
Length of domains: 70471
Time: pickout 0.5803    decision 4.2612    set_bounds 3.5548    solve 14.3660    add 0.2052    
Accumulated time: pickout 1.8537    decision 11.8193    set_bounds 10.5258    solve 34.4128    add 1.2181    
Current (lb-rhs): -0.06888723373413086
171675 domains visited
Cumulative time: 60.69743728637695

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 4071] [/input, 3315] [/input-8, 1704] [/input, 3315] [/input, 3315] [/input, 3315] [/input, 3315] [/input-8, 1704] [/input, 3315] [/input, 4071] 
cut re-enabled after branching node selection
0 lb beta sum: 0.46375900506973267, worst -0.0666208267211914
10 lb beta sum: 0.46375900506973267, worst -0.06659269332885742
Time: prepare 3.4286    bound 8.6826    transfer 0.7508    finalize 0.5118    func 13.8159    
Accumulated time: func 48.3745    prepare 13.7139    bound 26.7888    transfer 2.7868    finalize 2.4890    
all_split False
======================Cut inference begins======================
max lb tensor(0.01364422) min lb tensor(-0.06657028)
Number of Verified Splits: 11547 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.0010247230529785156 
BICCOS Cumulative time: 0.1365830898284912
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06884 (25), -0.06881 (25), -0.06750 (25), -0.06747 (25), -0.06657 (26), -0.06655 (26), -0.06602 (25), -0.06573 (25), -0.06572 (25), -0.06546 (26), -0.06543 (26), -0.06528 (26), -0.06527 (26), -0.06512 (25), -0.06508 (25), -0.06465 (25), -0.06451 (25), -0.06448 (25), -0.06432 (25), -0.06431 (25), 
Length of domains: 91692
Time: pickout 0.5888    decision 3.4991    set_bounds 3.8132    solve 13.8302    add 0.1832    
Accumulated time: pickout 2.4425    decision 15.3184    set_bounds 14.3390    solve 48.2430    add 1.4013    
Current (lb-rhs): -0.06884193420410156
225664 domains visited
Cumulative time: 82.83758306503296

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 510] [/input-8, 510] [/input-8, 149] [/input-8, 1967] [/input-8, 142] [/input-8, 1704] [/input-8, 1704] [/input-8, 1704] [/input-8, 149] [/input-8, 1704] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4644307494163513, worst -0.06723737716674805
10 lb beta sum: 0.4644307494163513, worst -0.06718683242797852
Time: prepare 3.3623    bound 8.6846    transfer 0.7528    finalize 0.5125    func 14.6557    
Accumulated time: func 63.0302    prepare 17.0766    bound 35.4734    transfer 3.5396    finalize 3.0015    
all_split False
======================Cut inference begins======================
max lb tensor(0.01399899) min lb tensor(-0.06717587)
Number of Verified Splits: 12684 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.0011293888092041016 
BICCOS Cumulative time: 0.1377124786376953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06718 (26), -0.06715 (26), -0.06657 (26), -0.06655 (26), -0.06589 (26), -0.06586 (26), -0.06543 (26), -0.06528 (26), -0.06527 (26), -0.06512 (25), -0.06508 (25), -0.06448 (25), -0.06415 (26), -0.06402 (26), -0.06392 (25), -0.06378 (25), -0.06374 (25), -0.06337 (26), -0.06334 (26), -0.06314 (25), 
Length of domains: 111776
Time: pickout 0.6080    decision 4.0768    set_bounds 3.9074    solve 14.6683    add 0.1821    
Accumulated time: pickout 3.0505    decision 19.3953    set_bounds 18.2464    solve 62.9113    add 1.5833    
Current (lb-rhs): -0.06717586517333984
278516 domains visited
Cumulative time: 106.46253752708435

BaB round 22
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1812] [/input, 1463] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input-8, 1812] [/input-8, 1812] [/input, 1463] [/input, 3571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.46345847845077515, worst -0.06426811218261719
10 lb beta sum: 0.46345847845077515, worst -0.0642385482788086
Time: prepare 3.4313    bound 8.6829    transfer 0.7478    finalize 1.5997    func 14.9083    
Accumulated time: func 77.9385    prepare 20.5084    bound 44.1563    transfer 4.2874    finalize 4.6012    
all_split False
======================Cut inference begins======================
max lb tensor(0.02014923) min lb tensor(-0.06421137)
Number of Verified Splits: 12214 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.0010499954223632812 
BICCOS Cumulative time: 0.1387624740600586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06718 (26), -0.06715 (26), -0.06589 (26), -0.06586 (26), -0.06508 (25), -0.06421 (27), -0.06419 (27), -0.06402 (26), -0.06374 (25), -0.06345 (26), -0.06334 (26), -0.06314 (27), -0.06311 (27), -0.06286 (26), -0.06285 (26), -0.06284 (27), -0.06284 (27), -0.06284 (26), -0.06266 (26), -0.06264 (26), 
Length of domains: 132330
Time: pickout 0.6006    decision 3.3356    set_bounds 3.9654    solve 14.9220    add 0.2051    
Accumulated time: pickout 3.6511    decision 22.7309    set_bounds 22.2118    solve 77.8333    add 1.7885    
Current (lb-rhs): -0.06717586517333984
331838 domains visited
Cumulative time: 129.72616052627563

BaB round 23
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1704] [/input, 3571] [/input, 1463] [/input-8, 149] [/input-8, 1704] [/input, 3571] [/input-8, 149] [/input, 1463] [/input-8, 149] [/input-8, 1704] 
cut re-enabled after branching node selection
0 lb beta sum: 0.46367061138153076, worst -0.06347942352294922
10 lb beta sum: 0.46367061138153076, worst -0.06345272064208984
Time: prepare 3.4390    bound 8.6831    transfer 0.7617    finalize 0.5183    func 13.8391    
Accumulated time: func 91.7775    prepare 23.9477    bound 52.8394    transfer 5.0490    finalize 5.1195    
all_split False
======================Cut inference begins======================
max lb tensor(0.02169514) min lb tensor(-0.06342316)
Number of Verified Splits: 13076 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.0009903907775878906 
BICCOS Cumulative time: 0.13975286483764648
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06718 (26), -0.06715 (26), -0.06589 (26), -0.06586 (26), -0.06421 (27), -0.06419 (27), -0.06402 (26), -0.06345 (26), -0.06342 (26), -0.06334 (26), -0.06314 (27), -0.06311 (27), -0.06284 (27), -0.06284 (27), -0.06284 (26), -0.06266 (26), -0.06238 (26), -0.06229 (26), -0.06226 (26), -0.06223 (26), 
Length of domains: 152022
Time: pickout 0.6196    decision 3.3694    set_bounds 4.3021    solve 15.0806    add 0.2583    
Accumulated time: pickout 4.2707    decision 26.1003    set_bounds 26.5139    solve 92.9139    add 2.0467    
Current (lb-rhs): -0.06717586517333984
384298 domains visited
Cumulative time: 153.57514333724976

BaB round 24
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 510] [/input, 1012] [/input-8, 1967] [/input-8, 510] [/input-8, 1967] [/input-8, 1967] [/input-8, 1704] [/input-8, 1967] [/input-8, 1704] [/input, 3315] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4639180898666382, worst -0.06487369537353516
10 lb beta sum: 0.4639180898666382, worst -0.06486129760742188
Time: prepare 3.4193    bound 8.6854    transfer 0.7619    finalize 0.5389    func 13.8437    
Accumulated time: func 105.6212    prepare 27.3674    bound 61.5248    transfer 5.8110    finalize 5.6584    
all_split False
======================Cut inference begins======================
max lb tensor(0.02164793) min lb tensor(-0.06485701)
Number of Verified Splits: 13290 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.0011358261108398438 
BICCOS Cumulative time: 0.14088869094848633
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06486 (27), -0.06483 (27), -0.06421 (27), -0.06419 (27), -0.06350 (27), -0.06348 (27), -0.06345 (26), -0.06342 (26), -0.06311 (27), -0.06284 (27), -0.06284 (27), -0.06284 (26), -0.06241 (28), -0.06238 (26), -0.06222 (26), -0.06217 (26), -0.06214 (26), -0.06213 (27), -0.06176 (27), -0.06174 (28), 
Length of domains: 171500
Time: pickout 0.6238    decision 3.3633    set_bounds 4.5115    solve 13.8609    add 0.1846    
Accumulated time: pickout 4.8946    decision 29.4636    set_bounds 31.0254    solve 106.7748    add 2.2314    
Current (lb-rhs): -0.06485700607299805
436544 domains visited
Cumulative time: 176.40428161621094

BaB round 25
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1812] [/input-8, 254] [/input, 3315] [/input, 1012] [/input, 3315] [/input-8, 254] [/input, 1012] [/input-8, 1812] [/input, 1012] [/input-8, 510] 
cut re-enabled after branching node selection
0 lb beta sum: 0.46367061138153076, worst -0.06115293502807617
10 lb beta sum: 0.46367061138153076, worst -0.06118440628051758
Time: prepare 3.5240    bound 8.6860    transfer 0.7560    finalize 0.5352    func 15.4959    
Accumulated time: func 121.1171    prepare 30.8918    bound 70.2108    transfer 6.5669    finalize 6.1935    
all_split False
======================Cut inference begins======================
max lb tensor(0.02148342) min lb tensor(-0.06113243)
Number of Verified Splits: 14170 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.011920690536499023 
BICCOS Cumulative time: 0.15280938148498535
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06486 (27), -0.06483 (27), -0.06421 (27), -0.06419 (27), -0.06350 (27), -0.06348 (27), -0.06342 (26), -0.06311 (27), -0.06284 (27), -0.06284 (27), -0.06241 (28), -0.06214 (26), -0.06213 (27), -0.06176 (27), -0.06174 (28), -0.06170 (27), -0.06169 (27), -0.06113 (27), -0.06103 (28), -0.06099 (27), 
Length of domains: 190098
Time: pickout 0.6261    decision 4.2888    set_bounds 3.2884    solve 15.5091    add 0.2627    
Accumulated time: pickout 5.5207    decision 33.7524    set_bounds 34.3138    solve 122.2839    add 2.4941    
Current (lb-rhs): -0.06485700607299805
487910 domains visited
Time out!!!!!!!!
Result: unknown in 203.7614 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 78, vnnlib ID: 78 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.75459862, -19.03087234, -15.81020927, -15.02808094, -15.45583725,
         -15.58429432, -14.96899986, -17.89657974, -19.61580658, -19.36780739]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [632]; unstable size 632; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 329, 1, 632] with unstable size 328 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 632] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 632] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [328]; unstable size 328; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 328] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 328] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.01773703,  1.41905212, -0.42905235, -0.71989632,  0.09239098,
         -1.24160266,  0.88482040,  2.33327007,  1.89770079]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.75459862, -19.03087234, -15.81020927, -15.02808094, -15.45583725,
         -15.58429432, -14.96899986, -17.89657974, -19.61580658, -19.36780739]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.75459862, -19.03087234, -15.81020832, -15.02808094, -15.45583725,
          -15.58429337, -14.96900177, -17.89657784, -19.61580658, -19.36780930],
         [-17.75459862, -19.03087234, -15.81020832, -15.02808094, -15.45583725,
          -15.58429337, -14.96900177, -17.89657784, -19.61580658, -19.36780930]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.78212738,  0.42775631, -0.05907917]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0766 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 79, vnnlib ID: 79 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.35046577, -23.71506119, -23.35945511, -21.45649910, -20.70935822,
         -20.53724480, -22.38616753, -16.30188179, -26.53351212, -22.39307404]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [460]; unstable size 460; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 248, 1, 460] with unstable size 247 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 460] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 460] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [247]; unstable size 247; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 247] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 247] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.23471165, 4.94442558, 5.38546610, 3.64118910, 3.33296251, 2.72332478,
         4.26009846, 8.15480995, 3.82787943]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0420 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 80, vnnlib ID: 80 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.09100723, -29.06959343, -25.09518623, -27.86755753, -24.83033943,
         -28.04232597, -26.05955124, -26.36453247, -25.66234589, -27.72757912]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [899]; unstable size 899; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 311, 1, 899] with unstable size 310 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 899] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 899] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [310]; unstable size 310; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 310] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 310] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.97617149, -1.48784208,  0.95436358, -1.87956285,  0.93106532,
         -1.03131604, -0.85329831, -0.83899194,  0.88107014]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.09100723, -29.06959343, -25.09518623, -27.86755753, -24.83033943,
         -28.04232597, -26.05955124, -26.36453247, -25.66234589, -27.72757912]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.09101105, -29.06959724, -25.09518623, -27.86755753, -24.83034134,
          -28.04232597, -26.05955315, -26.36453438, -25.66234589, -27.72757912],
         [-25.09101105, -29.06959724, -25.09518623, -27.86755753, -24.83034134,
          -28.04232597, -26.05955315, -26.36453438, -25.66234589, -27.72757912]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.00417519, -0.26066971,  0.96854210,  1.27352333,  0.57133484]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0591 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 81, vnnlib ID: 81 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.78340530, -27.09945488, -17.72372437, -21.88307762, -18.28152275,
         -20.99545860, -20.59827042, -22.34070778, -24.70541382, -26.47000694]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [950]; unstable size 950; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 950] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 950] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 950] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 208] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.15953612, 7.92398405, 3.57421255, 0.07925253, 2.58815289, 1.97291231,
         3.73509622, 5.73443413, 7.39504910]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0475 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 82, vnnlib ID: 82 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.82749367, -26.77242661, -22.68888855, -21.92727852, -23.00431252,
         -21.88382530, -22.72205544, -24.54189873, -26.69390106, -25.28289032]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [743]; unstable size 743; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 306, 1, 743] with unstable size 305 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 743] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 743] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [305]; unstable size 305; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 305] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 305] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.55621243,  2.72794151, -0.34306383, -0.31645530, -0.10541463,
         -0.28819251,  1.26013112,  2.92124987,  1.60254765]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.82749367, -26.77242661, -22.68888855, -21.92727852, -23.00431252,
         -21.88382530, -22.72205544, -24.54189873, -26.69390106, -25.28289032]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.12017250, -27.07359505, -23.04397583, -22.30886650, -23.38348579,
          -22.46064949, -23.02729416, -25.03979683, -26.89845848, -25.77319908],
         [-25.12017250, -27.07359505, -23.04397583, -22.30886650, -23.38348579,
          -22.46064949, -23.02729416, -25.03979683, -26.89845848, -25.77319908]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.58332634, -0.15178299,  0.92283630,  0.56664467]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0418 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 83, vnnlib ID: 83 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.01862907, -24.96064758, -28.10244751, -27.03785515, -27.65390778,
         -27.54524422, -28.22773170, -27.61219788, -25.01158905, -23.89872360]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [573]; unstable size 573; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 573] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 573] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 573] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 256] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.53955221,  0.16099846,  2.22247696,  1.41359711,  1.53142834,
          1.82894993,  2.34312248,  1.67316437, -0.55014133]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.01862907, -24.96064758, -28.10244751, -27.03785515, -27.65390778,
         -27.54524422, -28.22773170, -27.61219788, -25.01158905, -23.89872360]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.00it/s]100%|██████████| 1/1 [00:00<00:00,  8.99it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.72891045, -25.00279617, -27.97999954, -26.96871758, -27.40955925,
          -27.52745628, -28.15091324, -27.60436821, -24.36411667, -24.20336342]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.16075325]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1137 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 11.869608879089355
alpha/beta optimization time: 1.2119605541229248
initial alpha-crown bounds: tensor([[ 0.62231779,  0.20234013,  2.31166744,  1.48120880,  1.62453175,
          1.90319920,  2.41159058,  1.76272964, -0.44997644]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.44997644424438477
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.63024973869324
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.63020968437195
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.63018417358398
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6301612854004
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.63014221191406
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.63012266159058
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.63010334968567
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.63008308410645
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.6300642490387
Verifying property 8 with 1 instances.
##### Instance 83 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.44997644]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.01862907, -24.96064758, -28.10244751, -27.03785515, -27.65390778,
        -27.54524422, -28.22773170, -27.61219788, -25.01158905, -23.89872360],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.44997644]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 573
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 251
Node /15 input 0: size torch.Size([100]) unstable 19
-----------------
# of unstable neurons: 843
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010061264038085938
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4499807357788086
10 lb beta sum: 0.0, worst -0.4499821662902832
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0527    transfer 0.0001    finalize 0.0001    func 0.0532    
Accumulated time: func 0.0532    prepare 0.0002    bound 0.0527    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] 
split level 1: [/input-12, 85] 
split level 2: [/input-12, 49] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 69] 
split level 5: [/input-12, 29] 
split level 6: [/input-12, 38] 
split level 7: [/input-12, 34] 
split level 8: [/input-12, 56] 
split level 9: [/input-8, 715] 
split level 10: [/input-8, 883] 
split level 11: [/input-8, 1392] 
split level 12: [/input-8, 885] 
split level 13: [/input-8, 884] 
split level 14: [/input-8, 1649] 
split level 15: [/input-12, 50] 
split level 16: [/input-8, 117] 
split level 17: [/input-8, 1240] 
split level 18: [/input-8, 493] 
split level 19: [/input-8, 1402] 
split level 20: [/input-8, 1389] 
split level 21: [/input-8, 500] 
split level 22: [/input-8, 1395] 
split level 23: [/input-8, 1388] 
split level 24: [/input-8, 886] 
split level 25: [/input-8, 1965] 
split level 26: [/input-8, 1384] 
split level 27: [/input-8, 116] 
split level 28: [/input-8, 819] 
split level 29: [/input-8, 424] 
split level 30: [/input-8, 1396] 
split level 31: [/input-12, 42] 
split level 32: [/input-8, 881] 
split level 33: [/input-8, 1393] 
split level 34: [/input-8, 1398] 
split level 35: [/input-8, 430] 
split level 36: [/input-8, 1397] 
split level 37: [/input-8, 742] 
split level 38: [/input-8, 1185] 
split level 39: [/input-8, 433] 
split level 40: [/input-8, 1955] 
split level 41: [/input-8, 1394] 
split level 42: [/input-8, 417] 
split level 43: [/input-8, 1958] 
split level 44: [/input-8, 246] 
split level 45: [/input-8, 638] 
split level 46: [/input, 2422] 
split level 47: [/input-8, 1097] 
split level 48: [/input, 509] 
split level 49: [/input-8, 1390] 
split level 50: [/input-8, 931] 
split level 51: [/input-8, 1705] 
split level 52: [/input, 1430] 
split level 53: [/input-8, 1403] 
split level 54: [/input-8, 891] 
split level 55: [/input-8, 139] 
split level 56: [/input-8, 1654] 
split level 57: [/input-8, 1376] 
split level 58: [/input-8, 1325] 
split level 59: [/input, 1006] 
split level 60: [/input-8, 420] 
split level 61: [/input-8, 1713] 
split level 62: [/input-8, 1650] 
split level 63: [/input-8, 1698] 
split level 64: [/input, 1018] 
split level 65: [/input-8, 1383] 
split level 66: [/input-8, 893] 
split level 67: [/input-8, 401] 
split level 68: [/input, 167] 
split level 69: [/input, 697] 
split level 70: [/input, 1479] 
split level 71: [/input-8, 1380] 
split level 72: [/input-8, 1168] 
split level 73: [/input, 699] 
split level 74: [/input, 1021] 
split level 75: [/input-8, 1385] 
split level 76: [/input, 505] 
split level 77: [/input, 491] 
split level 78: [/input, 1005] 
split level 79: [/input-8, 1697] 
split level 80: [/input-8, 1372] 
split level 81: [/input, 990] 
split level 82: [/input, 1004] 
split level 83: [/input-8, 1641] 
split level 84: [/input, 1384] 
split level 85: [/input-8, 1938] 
split level 86: [/input, 1015] 
split level 87: [/input-8, 251] 
split level 88: [/input-8, 1663] 
split level 89: [/input, 1013] 
split level 90: [/input, 507] 
split level 91: [/input, 1020] 
split level 92: [/input-8, 488] 
split level 93: [/input, 494] 
split level 94: [/input-8, 1377] 
split level 95: [/input, 1768] 
split level 96: [/input-8, 241] 
split level 97: [/input-8, 242] 
split level 98: [/input-8, 485] 
split level 99: [/input, 493] 
split level 100: [/input-8, 1597] 
split level 101: [/input-8, 1940] 
split level 102: [/input, 1707] 
split level 103: [/input, 1476] 
split level 104: [/input, 3194] 
split level 105: [/input-8, 1583] 
split level 106: [/input, 1003] 
split level 107: [/input-8, 823] 
split level 108: [/input-8, 815] 
split level 109: [/input, 1016] 
split level 110: [/input-8, 1379] 
split level 111: [/input-8, 409] 
split level 112: [/input, 120] 
split level 113: [/input, 1366] 
split level 114: [/input-8, 361] 
split level 115: [/input, 1466] 
split level 116: [/input, 2678] 
split level 117: [/input, 1002] 
split level 118: [/input-8, 1184] 
split level 119: [/input, 3571] 
split level 120: [/input-8, 890] 
split level 121: [/input-8, 1528] 
split level 122: [/input, 1478] 
split level 123: [/input, 681] 
split level 124: [/input, 183] 
split level 125: [/input, 103] 
split level 126: [/input-8, 1378] 
split level 127: [/input-8, 250] 
split level 128: [/input-8, 364] 
split level 129: [/input-8, 1760] 
split level 130: [/input-8, 1925] 
split level 131: [/input-8, 876] 
split level 132: [/input-8, 191] 
split level 133: [/input, 806] 
split level 134: [/input, 682] 
split level 135: [/input, 2181] 
split level 136: [/input, 121] 
split level 137: [/input-8, 295] 
split level 138: [/input, 989] 
split level 139: [/input-8, 1368] 
split level 140: [/input, 3366] 
split level 141: [/input, 2426] 
split level 142: [/input, 3113] 
split level 143: [/input-8, 399] 
split level 144: [/input-8, 1505] 
split level 145: [/input, 822] 
split level 146: [/input, 2442] 
split level 147: [/input, 135] 
split level 148: [/input, 2728] 
split level 149: [/input-8, 1783] 
split level 150: [/input, 988] 
split level 151: [/input, 1755] 
split level 152: [/input-8, 431] 
split level 153: [/input, 3129] 
split level 154: [/input, 185] 
split level 155: [/input, 891] 
split level 156: [/input-8, 2044] 
split level 157: [/input, 3521] 
split level 158: [/input, 2438] 
split level 159: [/input, 700] 
split level 160: [/input, 2557] 
split level 161: [/input, 117] 
split level 162: [/input-8, 2033] 
split level 163: [/input-8, 1371] 
split level 164: [/input, 3552] 
split level 165: [/input, 890] 
split level 166: [/input-8, 504] 
split level 167: [/input, 3054] 
split level 168: [/input, 489] 
split level 169: [/input, 1367] 
split level 170: [/input, 3053] 
split level 171: [/input, 1477] 
split level 172: [/input-8, 877] 
split level 173: [/input, 2865] 
split level 174: [/input, 995] 
split level 175: [/input-8, 238] 
split level 176: [/input, 2428] 
split level 177: [/input, 2027] 
split level 178: [/input, 892] 
split level 179: [/input, 236] 
split level 180: [/input-8, 38] 
split level 181: [/input-8, 402] 
split level 182: [/input, 2545] 
split level 183: [/input, 2554] 
split level 184: [/input, 213] 
split level 185: [/input-8, 1369] 
split level 186: [/input, 196] 
split level 187: [/input, 663] 
split level 188: [/input, 3195] 
split level 189: [/input, 3446] 
split level 190: [/input, 809] 
split level 191: [/input, 2435] 
split level 192: [/input, 2300] 
split level 193: [/input, 2555] 
split level 194: [/input, 1183] 
split level 195: [/input, 3299] 
split level 196: [/input, 2179] 
split level 197: [/input, 2797] 
split level 198: [/input, 2635] 
split level 199: [/input, 2782] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.44990062713623047
10 lb beta sum: 0.0, worst -0.44991350173950195
Time: prepare 0.0114    bound 0.0967    transfer 0.0017    finalize 0.0026    func 0.1150    
Accumulated time: func 0.1682    prepare 0.0217    bound 0.1495    transfer 0.0018    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.26759338) min lb tensor(-0.44989586)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010701894760131836 
BICCOS Cumulative time: 0.010701894760131836
Preprocessing time: 0.009920120239257812 Inference time: 0.0001590251922607422 Add cuts time: 5.888938903808594e-05 Cut analysis time: 0.0005638599395751953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.43546 (1), -0.43522 (1), -0.43457 (1), -0.43381 (1), -0.43299 (1), -0.43273 (1), -0.43245 (1), -0.43082 (1), -0.42962 (1), -0.42943 (1), -0.42920 (1), -0.42846 (1), -0.42767 (1), -0.42724 (1), -0.42715 (1), -0.42673 (1), -0.42620 (1), -0.42587 (1), -0.42536 (1), -0.42436 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5210    set_bounds 0.0086    solve 0.1151    add 0.0694    
Accumulated time: pickout 0.0003    decision 0.5210    set_bounds 0.0086    solve 0.1151    add 0.0694    
Current (lb-rhs): -0.43546104431152344
50 domains visited
Cumulative time: 0.7830195426940918

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
split level 2: [/input-12, 49] [/input-12, 49] [/input-12, 4] [/input-12, 49] [/input-12, 49] [/input-12, 4] [/input-12, 49] [/input-12, 49] [/input-12, 49] [/input-12, 49] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-12, 29] [/input-12, 4] [/input-12, 29] [/input-12, 29] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4069790840148926
10 lb beta sum: 0.6506428122520447, worst -0.3830975592136383
Time: prepare 0.0075    bound 0.1169    transfer 0.0011    finalize 0.0023    func 0.1305    
Accumulated time: func 0.2987    prepare 0.0294    bound 0.2664    transfer 0.0029    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.39270821) min lb tensor(-0.38295370)
Number of Verified Splits: 109 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.017951011657714844 
BICCOS Cumulative time: 0.02865290641784668
Preprocessing time: 0.01173257827758789 Inference time: 0.004517555236816406 Add cuts time: 0.0013785362243652344 Cut analysis time: 0.0003223419189453125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08634 (2), -0.08626 (2), -0.08361 (2), -0.08350 (2), -0.07784 (2), -0.07510 (2), -0.07143 (2), -0.06906 (2), -0.06894 (2), -0.06718 (2), -0.06687 (2), -0.06517 (2), -0.06469 (2), -0.06141 (2), -0.06092 (2), -0.06043 (2), -0.06037 (2), -0.06016 (2), -0.05990 (2), -0.05894 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0244    set_bounds 0.0120    solve 0.1305    add 0.0814    
Accumulated time: pickout 0.0013    decision 0.5453    set_bounds 0.0206    solve 0.2457    add 0.1508    
Current (lb-rhs): -0.08633553981781006
100 domains visited
Cumulative time: 1.0506086349487305

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
split level 2: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 49] [/input-12, 4] [/input-12, 4] [/input-12, 69] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-12, 69] [/input-12, 69] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12290382385253906
10 lb beta sum: 0.7748351097106934, worst -0.020462393760681152
Time: prepare 0.0075    bound 0.1172    transfer 0.0011    finalize 0.0022    func 0.1311    
Accumulated time: func 0.4298    prepare 0.0372    bound 0.3836    transfer 0.0040    finalize 0.0073    
all_split False
======================Cut inference begins======================
max lb tensor(0.37289810) min lb tensor(-0.00628936)
Number of Verified Splits: 398 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.03532600402832031 
BICCOS Cumulative time: 0.06397891044616699
Preprocessing time: 0.011551618576049805 Inference time: 0.016040563583374023 Add cuts time: 0.007444620132446289 Cut analysis time: 0.0002892017364501953
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0190    set_bounds 0.0152    solve 0.1312    add 0.0193    
Accumulated time: pickout 0.0024    decision 0.5643    set_bounds 0.0358    solve 0.3769    add 0.1701    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 29, 55]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([6.21976914e-11, 1.46460101e-01, 2.81086266e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 29, 55]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([6.21976914e-11, 1.46460101e-01, 7.72582740e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 29, 55]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([6.21976914e-11, 1.09962985e-01, 2.56554663e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 29, 55]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([6.21976914e-11, 1.09962985e-01, 8.18659514e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 55]), tensor([ 1., -1.]), tensor([0, 0]), tensor([6.21976914e-11, 3.44399512e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 55]), tensor([1., 1.]), tensor([0, 0]), tensor([6.21976914e-11, 6.59507364e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.30565834045410156
10 lb beta sum: 0.6098569631576538, worst -0.23229873180389404
Time: prepare 0.0004    bound 0.1115    transfer 0.0001    finalize 0.0002    func 0.1122    
Accumulated time: func 0.5420    prepare 0.0375    bound 0.4950    transfer 0.0042    finalize 0.0075    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 85] 
split level 1: [/input-12, 4] 
split level 2: [/input-12, 69] 
split level 3: [/input-12, 29] 
split level 4: [/input-12, 38] 
split level 5: [/input-12, 56] 
split level 6: [/input-8, 1392] 
split level 7: [/input-8, 1397] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001860618591309, worst -0.1269373893737793
10 lb beta sum: 1.4001860618591309, worst -0.12613439559936523
Time: prepare 0.0111    bound 0.1154    transfer 0.0007    finalize 0.0013    func 0.1302    
Accumulated time: func 0.6722    prepare 0.0491    bound 0.6104    transfer 0.0049    finalize 0.0087    
all_split False
======================Cut inference begins======================
max lb tensor(0.57592487) min lb tensor(-0.12584543)
Number of Verified Splits: 246 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.0003833770751953125 
BICCOS Cumulative time: 0.0643622875213623
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12585 (8), -0.12468 (8), -0.11732 (8), -0.11680 (8), -0.11319 (8), -0.11203 (8), -0.10508 (8), -0.10454 (8), -0.00354 (8), -0.00138 (8), 
Length of domains: 10
Time: pickout 0.0004    decision 0.0217    set_bounds 0.0243    solve 0.1302    add 0.0007    
Accumulated time: pickout 0.0028    decision 0.5860    set_bounds 0.0601    solve 0.5071    add 0.1709    
Current (lb-rhs): -0.12584543228149414
110 domains visited
Cumulative time: 1.5764977931976318

BaB round 2
batch: 10
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1388] [/input-8, 1395] [/input-8, 1388] [/input-8, 1388] [/input-8, 1395] [/input-8, 1388] [/input-8, 1395] [/input-8, 1388] [/input-8, 1388] [/input-8, 1395] 
split level 1: [/input-8, 1389] [/input-8, 1388] [/input-8, 1389] [/input-8, 1395] [/input-8, 1388] [/input-8, 1384] [/input-8, 1388] [/input-8, 1389] [/input-8, 1395] [/input-8, 1388] 
split level 2: [/input-8, 1396] [/input-8, 1389] [/input-8, 1396] [/input-8, 1396] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1396] [/input-8, 1396] [/input-8, 1389] 
split level 3: [/input-8, 1384] [/input-8, 1396] [/input-8, 1384] [/input-8, 116] [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1384] [/input-8, 116] [/input-8, 1396] 
split level 4: [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 1398] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 1398] [/input-8, 116] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001859426498413, worst -0.09362077713012695
10 lb beta sum: 1.4001859426498413, worst -0.09271574020385742
Time: prepare 0.0137    bound 0.1145    transfer 0.0010    finalize 0.0014    func 0.1330    
Accumulated time: func 0.8052    prepare 0.0631    bound 0.7249    transfer 0.0059    finalize 0.0102    
all_split False
======================Cut inference begins======================
max lb tensor(0.05411673) min lb tensor(-0.09246874)
Number of Verified Splits: 64 of 320
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.0003159046173095703 
BICCOS Cumulative time: 0.06467819213867188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09247 (13), -0.09086 (13), -0.08670 (13), -0.08563 (13), -0.08363 (13), -0.08187 (13), -0.08163 (13), -0.08081 (13), -0.07963 (13), -0.07944 (13), -0.07881 (13), -0.07840 (13), -0.07838 (13), -0.07834 (13), -0.07820 (13), -0.07808 (13), -0.07805 (13), -0.07802 (13), -0.07752 (13), -0.07750 (13), 
Length of domains: 256
Time: pickout 0.0010    decision 0.0161    set_bounds 0.0200    solve 0.1330    add 0.0015    
Accumulated time: pickout 0.0038    decision 0.6021    set_bounds 0.0801    solve 0.6401    add 0.1724    
Current (lb-rhs): -0.0924687385559082
366 domains visited
Cumulative time: 1.74871826171875

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1395] [/input-12, 50] [/input-8, 1395] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-8, 1395] [/input-12, 50] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001860618591309, worst -0.08685159683227539
10 lb beta sum: 1.4001860618591309, worst -0.08666849136352539
Time: prepare 0.0223    bound 0.1237    transfer 0.0014    finalize 0.0025    func 0.1532    
Accumulated time: func 0.9584    prepare 0.0856    bound 0.8486    transfer 0.0073    finalize 0.0126    
all_split False
======================Cut inference begins======================
max lb tensor(0.05911493) min lb tensor(-0.08659124)
Number of Verified Splits: 154 of 512
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.00032806396484375 
BICCOS Cumulative time: 0.06500625610351562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08659 (14), -0.08496 (14), -0.08066 (14), -0.07931 (14), -0.07878 (14), -0.07674 (14), -0.07597 (14), -0.07455 (14), -0.07378 (14), -0.07368 (14), -0.07315 (14), -0.07259 (14), -0.07235 (14), -0.07210 (14), -0.07206 (14), -0.07195 (14), -0.07193 (14), -0.07181 (14), -0.07171 (14), -0.07148 (14), 
Length of domains: 358
Time: pickout 0.0034    decision 0.0240    set_bounds 0.0205    solve 0.1534    add 0.0019    
Accumulated time: pickout 0.0072    decision 0.6261    set_bounds 0.1006    solve 0.7935    add 0.1742    
Current (lb-rhs): -0.08659124374389648
724 domains visited
Cumulative time: 1.9530894756317139

BaB round 4
batch: 358
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001859426498413, worst -0.08124685287475586
10 lb beta sum: 1.4001859426498413, worst -0.08109235763549805
Time: prepare 0.0306    bound 0.1216    transfer 0.0048    finalize 0.0029    func 0.1645    
Accumulated time: func 1.1228    prepare 0.1163    bound 0.9701    transfer 0.0121    finalize 0.0156    
all_split False
======================Cut inference begins======================
max lb tensor(0.06665659) min lb tensor(-0.08103132)
Number of Verified Splits: 204 of 716
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.0003533363342285156 
BICCOS Cumulative time: 0.06535959243774414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08103 (15), -0.07940 (15), -0.07508 (15), -0.07378 (15), -0.07298 (15), -0.07090 (15), -0.07037 (15), -0.06983 (15), -0.06898 (15), -0.06838 (15), -0.06821 (15), -0.06777 (15), -0.06756 (15), -0.06687 (15), -0.06675 (15), -0.06660 (15), -0.06640 (15), -0.06637 (15), -0.06607 (15), -0.06604 (15), 
Length of domains: 512
Time: pickout 0.0048    decision 0.0291    set_bounds 0.0286    solve 0.1647    add 0.0025    
Accumulated time: pickout 0.0120    decision 0.6553    set_bounds 0.1292    solve 0.9581    add 0.1767    
Current (lb-rhs): -0.08103132247924805
1236 domains visited
Cumulative time: 2.184405565261841

BaB round 5
batch: 512
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1393] [/input-8, 1384] [/input-8, 1393] [/input-8, 1393] [/input-8, 1393] [/input-8, 1384] [/input-8, 1393] [/input-8, 1384] [/input-8, 1393] [/input-8, 1384] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001860618591309, worst -0.07407712936401367
10 lb beta sum: 1.4001860618591309, worst -0.07396841049194336
Time: prepare 0.0449    bound 0.1253    transfer 0.0026    finalize 0.0049    func 0.1845    
Accumulated time: func 1.3073    prepare 0.1615    bound 1.0955    transfer 0.0147    finalize 0.0205    
all_split False
======================Cut inference begins======================
max lb tensor(0.00039530) min lb tensor(-0.07390642)
Number of Verified Splits: 1 of 1024
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.0003612041473388672 
BICCOS Cumulative time: 0.06572079658508301
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07391 (16), -0.07229 (16), -0.06939 (16), -0.06797 (16), -0.06778 (16), -0.06730 (16), -0.06660 (16), -0.06515 (16), -0.06346 (16), -0.06323 (16), -0.06284 (16), -0.06209 (16), -0.06192 (16), -0.06185 (16), -0.06124 (16), -0.06122 (16), -0.06110 (16), -0.06041 (16), -0.06036 (16), -0.06002 (16), 
Length of domains: 1023
Time: pickout 0.0087    decision 0.0383    set_bounds 0.2108    solve 0.1847    add 0.0046    
Accumulated time: pickout 0.0207    decision 0.6936    set_bounds 0.3400    solve 1.1428    add 0.1813    
Current (lb-rhs): -0.07390642166137695
2259 domains visited
Cumulative time: 2.632671594619751

BaB round 6
batch: 1023
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 742] [/input-8, 742] [/input-8, 1398] [/input-8, 1398] [/input-8, 1398] [/input-8, 1398] [/input-8, 742] [/input-8, 742] [/input-8, 1398] [/input-8, 1398] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001860618591309, worst -0.06924962997436523
10 lb beta sum: 1.4001860618591309, worst -0.06915426254272461
Time: prepare 0.0874    bound 0.1482    transfer 0.0081    finalize 0.0087    func 0.2662    
Accumulated time: func 1.5735    prepare 0.2491    bound 1.2437    transfer 0.0228    finalize 0.0293    
all_split False
======================Cut inference begins======================
max lb tensor(0.00909567) min lb tensor(-0.06910944)
Number of Verified Splits: 48 of 2046
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.0003726482391357422 
BICCOS Cumulative time: 0.06609344482421875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06911 (17), -0.06575 (17), -0.06439 (17), -0.06381 (17), -0.06219 (17), -0.06191 (17), -0.06172 (17), -0.06105 (17), -0.06014 (17), -0.05910 (17), -0.05871 (17), -0.05828 (17), -0.05758 (17), -0.05749 (17), -0.05747 (17), -0.05720 (17), -0.05700 (17), -0.05699 (17), -0.05662 (17), -0.05644 (17), 
Length of domains: 1998
Time: pickout 0.0174    decision 0.0657    set_bounds 0.0819    solve 0.2665    add 0.0065    
Accumulated time: pickout 0.0381    decision 0.7592    set_bounds 0.4219    solve 1.4093    add 0.1878    
Current (lb-rhs): -0.06910943984985352
4257 domains visited
Cumulative time: 3.0749964714050293

BaB round 7
batch: 1998
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1398] [/input-8, 1398] [/input-12, 42] [/input-8, 742] [/input-12, 42] [/input-8, 742] [/input-8, 1398] [/input-8, 1398] [/input-8, 742] [/input-8, 742] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001860618591309, worst -0.06194257736206055
10 lb beta sum: 1.4001860618591309, worst -0.061887264251708984
Time: prepare 0.3012    bound 0.2295    transfer 0.0104    finalize 0.0199    func 0.5865    
Accumulated time: func 2.1600    prepare 0.5505    bound 1.4732    transfer 0.0332    finalize 0.0491    
all_split False
======================Cut inference begins======================
max lb tensor(0.01025248) min lb tensor(-0.06184912)
Number of Verified Splits: 441 of 3996
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.0003936290740966797 
BICCOS Cumulative time: 0.06648707389831543
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06185 (18), -0.06094 (18), -0.06016 (18), -0.05743 (18), -0.05699 (18), -0.05688 (18), -0.05641 (18), -0.05606 (18), -0.05581 (18), -0.05530 (18), -0.05485 (18), -0.05459 (18), -0.05368 (18), -0.05270 (18), -0.05269 (18), -0.05266 (18), -0.05257 (18), -0.05217 (18), -0.05216 (18), -0.05207 (18), 
Length of domains: 3555
Time: pickout 0.0280    decision 0.1183    set_bounds 0.1615    solve 0.5873    add 0.0202    
Accumulated time: pickout 0.0662    decision 0.8775    set_bounds 0.5834    solve 1.9967    add 0.2080    
Current (lb-rhs): -0.061849117279052734
7812 domains visited
Cumulative time: 3.9969067573547363

BaB round 8
batch: 3555
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1394] [/input-12, 42] [/input-8, 1394] [/input-8, 819] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-8, 1394] 
cut re-enabled after branching node selection
0 lb beta sum: 1.40018630027771, worst -0.05532026290893555
10 lb beta sum: 1.40018630027771, worst -0.05527448654174805
Time: prepare 0.3198    bound 0.3557    transfer 0.0222    finalize 0.0354    func 0.7775    
Accumulated time: func 2.9376    prepare 0.8705    bound 1.8288    transfer 0.0554    finalize 0.0845    
all_split False
======================Cut inference begins======================
max lb tensor(0.02044153) min lb tensor(-0.05524683)
Number of Verified Splits: 2501 of 7110
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.0004649162292480469 
BICCOS Cumulative time: 0.06695199012756348
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05525 (19), -0.05434 (19), -0.05354 (19), -0.05083 (19), -0.05050 (19), -0.05027 (19), -0.05023 (19), -0.04980 (19), -0.04936 (19), -0.04899 (19), -0.04881 (19), -0.04857 (19), -0.04841 (19), -0.04839 (19), -0.04795 (19), -0.04750 (19), -0.04631 (19), -0.04628 (19), -0.04587 (19), -0.04571 (19), 
Length of domains: 4609
Time: pickout 0.0485    decision 0.1999    set_bounds 0.4275    solve 0.7793    add 0.0257    
Accumulated time: pickout 0.1146    decision 1.0774    set_bounds 1.0109    solve 2.7760    add 0.2337    
Current (lb-rhs): -0.055246829986572266
12421 domains visited
Cumulative time: 5.4963812828063965

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001860618591309, worst -0.04943418502807617
10 lb beta sum: 1.4001860618591309, worst -0.04934835433959961
Time: prepare 0.3718    bound 0.3986    transfer 0.0788    finalize 0.0438    func 0.9466    
Accumulated time: func 3.8841    prepare 1.2426    bound 2.2274    transfer 0.1342    finalize 0.1283    
all_split False
======================Cut inference begins======================
max lb tensor(0.02067041) min lb tensor(-0.04932261)
Number of Verified Splits: 3366 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.0005366802215576172 
BICCOS Cumulative time: 0.0674886703491211
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04932 (20), -0.04839 (20), -0.04795 (19), -0.04763 (20), -0.04518 (19), -0.04488 (20), -0.04449 (20), -0.04437 (20), -0.04428 (20), -0.04388 (20), -0.04335 (20), -0.04298 (19), -0.04297 (20), -0.04295 (20), -0.04258 (20), -0.04252 (20), -0.04245 (20), -0.04195 (20), -0.04171 (20), -0.04107 (20), 
Length of domains: 5339
Time: pickout 0.0630    decision 0.2268    set_bounds 0.4897    solve 0.9490    add 0.0307    
Accumulated time: pickout 0.1776    decision 1.3042    set_bounds 1.5006    solve 3.7250    add 0.2644    
Current (lb-rhs): -0.04932260513305664
17247 domains visited
current_vram/total_varm: 26.3GB/99.9GB, batch_size increase to 8192
Cumulative time: 7.2846598625183105

BaB round 10
batch: 5339
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 819] [/input-8, 819] [/input-8, 742] [/input-8, 742] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 883] [/input-8, 883] [/input-8, 742] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001860618591309, worst -0.046102046966552734
10 lb beta sum: 1.4001860618591309, worst -0.046038150787353516
Time: prepare 0.4787    bound 0.5000    transfer 0.0865    finalize 0.0581    func 1.1913    
Accumulated time: func 5.0755    prepare 1.7217    bound 2.7275    transfer 0.2207    finalize 0.1864    
all_split False
======================Cut inference begins======================
max lb tensor(0.02204084) min lb tensor(-0.04601717)
Number of Verified Splits: 5685 of 10678
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.0005247592926025391 
BICCOS Cumulative time: 0.06801342964172363
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04602 (21), -0.04508 (21), -0.04433 (21), -0.04203 (20), -0.04155 (21), -0.04119 (21), -0.04093 (21), -0.04058 (21), -0.04001 (21), -0.03994 (21), -0.03968 (21), -0.03925 (21), -0.03914 (20), -0.03909 (21), -0.03850 (21), -0.03832 (21), -0.03807 (21), -0.03798 (21), -0.03719 (21), -0.03699 (20), 
Length of domains: 4993
Time: pickout 0.1097    decision 0.4787    set_bounds 0.6305    solve 1.1945    add 0.0203    
Accumulated time: pickout 0.2874    decision 1.7829    set_bounds 2.1311    solve 4.9195    add 0.2846    
Current (lb-rhs): -0.04601716995239258
22240 domains visited
Cumulative time: 9.766815423965454

BaB round 11
batch: 4993
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 819] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001860618591309, worst -0.04207468032836914
10 lb beta sum: 1.4001860618591309, worst -0.04204225540161133
Time: prepare 0.4516    bound 0.4775    transfer 0.0811    finalize 0.0544    func 1.1296    
Accumulated time: func 6.2050    prepare 2.1735    bound 3.2050    transfer 0.3018    finalize 0.2408    
all_split False
======================Cut inference begins======================
max lb tensor(0.02135134) min lb tensor(-0.04202318)
Number of Verified Splits: 6000 of 9986
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.0005435943603515625 
BICCOS Cumulative time: 0.0685570240020752
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04202 (22), -0.04111 (22), -0.04033 (22), -0.03872 (21), -0.03756 (22), -0.03690 (22), -0.03681 (22), -0.03655 (22), -0.03626 (22), -0.03600 (22), -0.03583 (21), -0.03571 (22), -0.03521 (22), -0.03493 (22), -0.03473 (22), -0.03445 (22), -0.03399 (22), -0.03387 (22), -0.03365 (21), -0.03313 (22), 
Length of domains: 3986
Time: pickout 0.0740    decision 0.2784    set_bounds 0.5984    solve 1.1317    add 0.0217    
Accumulated time: pickout 0.3614    decision 2.0613    set_bounds 2.7295    solve 6.0512    add 0.3063    
Current (lb-rhs): -0.0420231819152832
26226 domains visited
Cumulative time: 11.925355434417725

BaB round 12
batch: 3986
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001861810684204, worst -0.038243770599365234
10 lb beta sum: 1.4001861810684204, worst -0.03817319869995117
Time: prepare 0.3589    bound 0.3901    transfer 0.0262    finalize 0.2008    func 1.0288    
Accumulated time: func 7.2338    prepare 2.5327    bound 3.5950    transfer 0.3280    finalize 0.4416    
all_split False
======================Cut inference begins======================
max lb tensor(0.01457262) min lb tensor(-0.03815126)
Number of Verified Splits: 5102 of 7972
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.0005397796630859375 
BICCOS Cumulative time: 0.06909680366516113
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03815 (23), -0.03734 (23), -0.03641 (23), -0.03474 (22), -0.03362 (23), -0.03308 (23), -0.03305 (23), -0.03268 (23), -0.03224 (23), -0.03186 (23), -0.03184 (22), -0.03129 (23), -0.03077 (23), -0.03029 (23), -0.02979 (23), -0.02963 (22), -0.02963 (23), -0.02915 (23), -0.02869 (23), -0.02865 (23), 
Length of domains: 2870
Time: pickout 0.0827    decision 0.3760    set_bounds 0.3417    solve 1.0305    add 0.0206    
Accumulated time: pickout 0.4441    decision 2.4372    set_bounds 3.0713    solve 7.0817    add 0.3269    
Current (lb-rhs): -0.03815126419067383
29096 domains visited
Cumulative time: 13.816343545913696

BaB round 13
batch: 2870
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] 
cut re-enabled after branching node selection
0 lb beta sum: 1.40018630027771, worst -0.035184383392333984
10 lb beta sum: 1.40018630027771, worst -0.03513383865356445
Time: prepare 0.2553    bound 0.3012    transfer 0.0294    finalize 0.0323    func 0.6559    
Accumulated time: func 7.8897    prepare 2.7882    bound 3.8962    transfer 0.3574    finalize 0.4740    
all_split False
======================Cut inference begins======================
max lb tensor(0.01997137) min lb tensor(-0.03510427)
Number of Verified Splits: 3645 of 5740
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.0005774497985839844 
BICCOS Cumulative time: 0.06967425346374512
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03510 (24), -0.03402 (24), -0.03354 (24), -0.03090 (24), -0.03079 (23), -0.03064 (24), -0.02998 (24), -0.02963 (24), -0.02890 (24), -0.02857 (24), -0.02855 (24), -0.02843 (24), -0.02799 (24), -0.02790 (23), -0.02660 (24), -0.02655 (24), -0.02647 (24), -0.02641 (24), -0.02625 (24), -0.02585 (24), 
Length of domains: 2095
Time: pickout 0.0490    decision 0.1645    set_bounds 0.2464    solve 0.8035    add 0.0128    
Accumulated time: pickout 0.4931    decision 2.6017    set_bounds 3.3177    solve 7.8853    add 0.3397    
Current (lb-rhs): -0.03510427474975586
31191 domains visited
Cumulative time: 15.121134996414185

BaB round 14
batch: 2095
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1240] [/input-8, 1240] [/input-8, 1240] [/input-8, 1240] [/input-8, 1240] [/input-8, 1240] [/input-8, 1240] [/input-8, 1240] [/input-8, 1240] [/input-8, 1240] 
cut re-enabled after branching node selection
0 lb beta sum: 1.40018630027771, worst -0.0331721305847168
10 lb beta sum: 1.40018630027771, worst -0.033002376556396484
Time: prepare 0.1872    bound 0.2388    transfer 0.0108    finalize 0.0228    func 0.4876    
Accumulated time: func 8.3774    prepare 2.9757    bound 4.1351    transfer 0.3682    finalize 0.4968    
all_split False
======================Cut inference begins======================
max lb tensor(0.02053976) min lb tensor(-0.03291750)
Number of Verified Splits: 2690 of 4190
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.00045108795166015625 
BICCOS Cumulative time: 0.07012534141540527
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03292 (25), -0.03182 (25), -0.03135 (25), -0.02845 (25), -0.02793 (24), -0.02776 (25), -0.02744 (25), -0.02723 (25), -0.02667 (25), -0.02637 (25), -0.02620 (25), -0.02510 (25), -0.02491 (24), -0.02436 (25), -0.02435 (25), -0.02346 (25), -0.02331 (25), -0.02331 (25), -0.02329 (25), -0.02316 (25), 
Length of domains: 1500
Time: pickout 0.0342    decision 0.1226    set_bounds 0.1777    solve 0.4890    add 0.0079    
Accumulated time: pickout 0.5274    decision 2.7243    set_bounds 3.4954    solve 8.3743    add 0.3477    
Current (lb-rhs): -0.03291749954223633
32691 domains visited
Cumulative time: 15.971240282058716

BaB round 15
batch: 1500
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001860618591309, worst -0.026700496673583984
10 lb beta sum: 1.4001860618591309, worst -0.026508808135986328
Time: prepare 0.1309    bound 0.1857    transfer 0.0190    finalize 0.1418    func 0.4971    
Accumulated time: func 8.8744    prepare 3.1068    bound 4.3207    transfer 0.3872    finalize 0.6386    
all_split False
======================Cut inference begins======================
max lb tensor(0.01945829) min lb tensor(-0.02644205)
Number of Verified Splits: 2058 of 3000
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.0004513263702392578 
BICCOS Cumulative time: 0.07057666778564453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02644 (26), -0.02574 (25), -0.02532 (26), -0.02488 (26), -0.02403 (26), -0.02290 (26), -0.02276 (25), -0.02247 (26), -0.02197 (26), -0.02131 (26), -0.02097 (26), -0.02063 (25), -0.02050 (26), -0.02020 (26), -0.01988 (26), -0.01974 (26), -0.01957 (26), -0.01887 (26), -0.01872 (25), -0.01856 (26), 
Length of domains: 942
Time: pickout 0.0300    decision 0.0911    set_bounds 0.1228    solve 0.4976    add 0.0058    
Accumulated time: pickout 0.5574    decision 2.8155    set_bounds 3.6182    solve 8.8718    add 0.3535    
Current (lb-rhs): -0.02644205093383789
33633 domains visited
Cumulative time: 16.73364281654358

BaB round 16
batch: 942
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 139] [/input-8, 493] [/input-8, 493] [/input-8, 1240] [/input-8, 139] [/input-8, 139] [/input-8, 493] [/input-8, 1240] [/input-8, 1240] [/input-8, 493] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001861810684204, worst -0.020282268524169922
10 lb beta sum: 1.4001861810684204, worst -0.02015066146850586
Time: prepare 0.0817    bound 0.1435    transfer 0.0074    finalize 0.0087    func 0.2535    
Accumulated time: func 9.1279    prepare 3.1887    bound 4.4642    transfer 0.3946    finalize 0.6473    
all_split False
======================Cut inference begins======================
max lb tensor(0.01698780) min lb tensor(-0.02007627)
Number of Verified Splits: 1370 of 1884
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.00038242340087890625 
BICCOS Cumulative time: 0.07095909118652344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02008 (27), -0.01927 (26), -0.01895 (27), -0.01849 (27), -0.01823 (27), -0.01751 (27), -0.01710 (27), -0.01686 (26), -0.01666 (27), -0.01640 (27), -0.01630 (26), -0.01593 (27), -0.01562 (27), -0.01543 (27), -0.01490 (27), -0.01460 (27), -0.01431 (27), -0.01428 (27), -0.01416 (26), -0.01392 (26), 
Length of domains: 514
Time: pickout 0.0181    decision 0.0612    set_bounds 0.0770    solve 0.2546    add 0.0026    
Accumulated time: pickout 0.5755    decision 2.8766    set_bounds 3.6952    solve 9.1264    add 0.3561    
Current (lb-rhs): -0.020076274871826172
34147 domains visited
Cumulative time: 17.155221462249756

BaB round 17
batch: 514
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001861810684204, worst -0.01593923568725586
10 lb beta sum: 1.4001861810684204, worst -0.015876293182373047
Time: prepare 0.0473    bound 0.1247    transfer 0.0029    finalize 0.0045    func 0.1859    
Accumulated time: func 9.3138    prepare 3.2362    bound 4.5889    transfer 0.3975    finalize 0.6518    
all_split False
======================Cut inference begins======================
max lb tensor(0.01840496) min lb tensor(-0.01584291)
Number of Verified Splits: 771 of 1028
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.0004494190216064453 
BICCOS Cumulative time: 0.07140851020812988
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01584 (28), -0.01524 (28), -0.01410 (28), -0.01399 (28), -0.01339 (28), -0.01317 (28), -0.01288 (27), -0.01253 (28), -0.01226 (28), -0.01172 (28), -0.01141 (28), -0.01106 (28), -0.01104 (27), -0.01076 (28), -0.01075 (28), -0.01069 (28), -0.01045 (28), -0.01034 (27), -0.01034 (28), -0.01009 (28), 
Length of domains: 257
Time: pickout 0.0115    decision 0.0385    set_bounds 0.0414    solve 0.1861    add 0.0025    
Accumulated time: pickout 0.5870    decision 2.9151    set_bounds 3.7366    solve 9.3125    add 0.3586    
Current (lb-rhs): -0.015842914581298828
34404 domains visited
Cumulative time: 17.439550638198853

BaB round 18
batch: 257
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 117] [/input-8, 117] [/input-8, 117] [/input-8, 117] [/input-8, 139] [/input-8, 139] [/input-8, 1955] [/input-8, 883] [/input-8, 1955] [/input-8, 931] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001860618591309, worst -0.011266231536865234
10 lb beta sum: 1.4001860618591309, worst -0.01126241683959961
Time: prepare 0.0221    bound 0.1179    transfer 0.0014    finalize 0.0022    func 0.1474    
Accumulated time: func 9.4612    prepare 3.2585    bound 4.7068    transfer 0.3989    finalize 0.6540    
all_split False
======================Cut inference begins======================
max lb tensor(0.01111269) min lb tensor(-0.01123953)
Number of Verified Splits: 392 of 514
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.000339508056640625 
BICCOS Cumulative time: 0.07174801826477051
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01124 (29), -0.01063 (29), -0.00949 (29), -0.00935 (29), -0.00908 (29), -0.00876 (29), -0.00849 (28), -0.00845 (29), -0.00761 (29), -0.00761 (29), -0.00731 (29), -0.00712 (29), -0.00700 (29), -0.00672 (29), -0.00664 (28), -0.00629 (29), -0.00624 (29), -0.00609 (29), -0.00600 (28), -0.00587 (29), 
Length of domains: 122
Time: pickout 0.0051    decision 0.0222    set_bounds 0.0205    solve 0.1475    add 0.0019    
Accumulated time: pickout 0.5921    decision 2.9373    set_bounds 3.7571    solve 9.4600    add 0.3604    
Current (lb-rhs): -0.01123952865600586
34526 domains visited
Cumulative time: 17.63862156867981

BaB round 19
batch: 122
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1955] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001859426498413, worst -0.008533954620361328
10 lb beta sum: 1.4001859426498413, worst -0.00851297378540039
Time: prepare 0.0107    bound 0.1139    transfer 0.0007    finalize 0.0011    func 0.1280    
Accumulated time: func 9.5892    prepare 3.2693    bound 4.8207    transfer 0.3996    finalize 0.6551    
all_split False
======================Cut inference begins======================
max lb tensor(0.01796675) min lb tensor(-0.00848913)
Number of Verified Splits: 195 of 244
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.0003104209899902344 
BICCOS Cumulative time: 0.07205843925476074
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00849 (30), -0.00770 (30), -0.00674 (30), -0.00659 (30), -0.00620 (30), -0.00581 (30), -0.00543 (30), -0.00485 (30), -0.00474 (30), -0.00448 (30), -0.00420 (30), -0.00395 (30), -0.00389 (29), -0.00352 (30), -0.00348 (30), -0.00333 (30), -0.00300 (30), -0.00299 (30), -0.00284 (30), -0.00267 (30), 
Length of domains: 49
Time: pickout 0.0029    decision 0.0151    set_bounds 0.0097    solve 0.1281    add 0.0011    
Accumulated time: pickout 0.5950    decision 2.9524    set_bounds 3.7669    solve 9.5881    add 0.3616    
Current (lb-rhs): -0.008489131927490234
34575 domains visited
Cumulative time: 17.796790838241577

BaB round 20
batch: 49
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 884] [/input-8, 891] [/input-8, 891] [/input-8, 891] [/input-8, 891] [/input-8, 891] [/input-8, 891] [/input-8, 891] [/input-8, 891] [/input-8, 891] 
split level 1: [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 139] [/input-8, 139] [/input-8, 139] [/input-8, 931] [/input-8, 931] [/input-8, 931] 
split level 2: [/input-8, 1097] [/input-8, 1097] [/input-8, 1097] [/input-8, 1097] [/input-8, 1097] [/input-8, 1097] [/input-8, 1097] [/input-8, 1097] [/input-8, 1097] [/input-8, 1097] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001860618591309, worst 0.0008378028869628906

all verified at 0th iter
Time: prepare 0.0168    bound 0.0045    transfer 0.0011    finalize 0.0019    func 0.0268    
Accumulated time: func 9.6160    prepare 3.2863    bound 4.8252    transfer 0.4007    finalize 0.6571    
all_split False
======================Cut inference begins======================
max lb tensor(0.03099489) min lb tensor(0.00083780)
Number of Verified Splits: 392 of 392
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.00030875205993652344 
BICCOS Cumulative time: 0.07236719131469727
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0015    decision 0.0166    set_bounds 0.0198    solve 0.0269    add 0.0001    
Accumulated time: pickout 0.5965    decision 2.9690    set_bounds 3.7866    solve 9.6149    add 0.3616    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
34575 domains visited
Cumulative time: 17.8629310131073

Result: safe in 19.3887 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 84, vnnlib ID: 84 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.62381744, -28.09670830, -18.92805672, -21.62400627, -18.04868507,
         -20.67170334, -18.38792801, -22.29936600, -26.56884384, -27.05737495]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [686]; unstable size 686; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 230, 1, 686] with unstable size 229 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 686] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 686] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [229]; unstable size 229; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 229] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 229] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.50022221,  8.58374977,  0.05487379,  2.84900141,  1.87417769,
         -0.72468829,  3.40504527,  7.17037439,  7.46117973]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.62381744, -28.09670830, -18.92805672, -21.62400627, -18.04868507,
         -20.67170334, -18.38792801, -22.29936600, -26.56884384, -27.05737495]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.58909225, -27.92033958, -18.78480148, -21.55149841, -18.15887642,
          -20.63109398, -17.89745522, -22.48893738, -26.55434799, -26.90717125]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.26142120]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0554 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 85, vnnlib ID: 85 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.05389786, -20.54568100, -25.38948441, -26.07571030, -24.92573357,
         -26.81814766, -25.31372643, -25.39832497, -22.18379402, -23.40080070]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [595]; unstable size 595; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 233, 1, 595] with unstable size 232 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 595] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 595] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [232]; unstable size 232; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 232] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.74438715, 2.89176798, 3.72229528, 2.51304817, 4.30712271, 2.80102062,
         3.10480404, 0.20504236, 1.77497375]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0390 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 86, vnnlib ID: 86 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.32361412, -25.52174950, -20.63148117, -22.61431122, -22.40266609,
         -22.09627724, -23.98217392, -22.95088196, -26.26723480, -25.69747353]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [912]; unstable size 912; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 912] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 912] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 912] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 239] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.74784970, 3.37162113, 1.17322981, 0.89480472, 0.68540299, 2.25614333,
         1.51441860, 4.23806047, 3.34960699]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0492 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 87, vnnlib ID: 87 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.69555855, -19.83600044, -17.26213837, -16.53295326, -15.76759911,
         -16.55274010, -15.97445679, -15.69591236, -22.56094933, -18.99766541]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [484]; unstable size 484; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 223, 1, 484] with unstable size 222 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 484] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 484] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [222]; unstable size 222; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 222] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 222] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.12594318,  2.36834192,  0.02151155, -0.42955184, -0.99394321,
         -0.44192910, -1.36477041,  4.78464222,  1.58999181]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.69555855, -19.83600044, -17.26213837, -16.53295326, -15.76759911,
         -16.55274010, -15.97445679, -15.69591236, -22.56094933, -18.99766541]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.83631516, -19.97811317, -17.36703491, -16.61606979, -15.69711494,
          -16.68176460, -15.85755348, -16.20885468, -22.66589165, -19.27580452],
         [-21.83631516, -19.97811317, -17.36703491, -16.61606979, -15.69711494,
          -16.68176460, -15.85755348, -16.20885468, -22.66589165, -19.27580452]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.40721512, -0.51173973,  0.47290993, -0.35130119]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0770 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 88, vnnlib ID: 88 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.74517250, -27.26931763, -22.31864548, -21.42955971, -22.42046928,
         -21.44980049, -22.51526642, -20.76612473, -26.78885269, -23.30550575]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [399]; unstable size 399; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 176, 1, 399] with unstable size 175 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 399] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 399] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [175]; unstable size 175; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 175] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 175] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.71335769,  3.37155771, -1.61985385, -0.57951498, -1.65425408,
         -0.81910717, -2.40787220,  3.42854548, -0.36425400]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.74517250, -27.26931763, -22.31864548, -21.42955971, -22.42046928,
         -21.44980049, -22.51526642, -20.76612473, -26.78885269, -23.30550575]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.74517059, -27.26931572, -22.31864166, -21.42955780, -22.42046738,
          -21.44979858, -22.51526833, -20.76612663, -26.78884697, -23.30550766],
         [-25.74517059, -27.26931572, -22.31864166, -21.42955780, -22.42046738,
          -21.44979858, -22.51526833, -20.76612663, -26.78884697, -23.30550766]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.88908386,  0.10182571, -0.86884308,  0.19662666, -1.55251503,
           0.98686600]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0574 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 89, vnnlib ID: 89 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.06668091, -12.17250633, -18.19817734, -17.74991226, -18.22573662,
         -18.83922386, -18.43832207, -18.79791641, -13.75891685, -14.38429832]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [591]; unstable size 591; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 591] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 591] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 591] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 256] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.43584156, 4.09200811, 4.03862000, 4.51079702, 5.00953007, 4.46496391,
         5.03483009, 0.23301744, 1.42504883]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0585 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 90, vnnlib ID: 90 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.34238243, -16.93456459, -14.43105412, -14.20242596, -14.38679028,
         -14.68807125, -15.41123962, -15.82969379, -17.16383553, -15.87702465]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [859]; unstable size 859; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 248, 1, 859] with unstable size 247 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 859] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 859] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [247]; unstable size 247; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 247] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 247] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.60208166, -0.84271860, -2.06193995, -2.20308495, -2.22541595,
         -1.86848986, -1.36994267, -0.36857557, -1.56844473]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.34238243, -16.93456459, -14.43105412, -14.20242596, -14.38679028,
         -14.68807125, -15.41123962, -15.82969379, -17.16383553, -15.87702465]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.34238243, -16.93456650, -14.43105221, -14.20242500, -14.38679028,
          -14.68807125, -15.41123772, -15.82969379, -17.16383553, -15.87702370],
         [-16.34238243, -16.93456650, -14.43105221, -14.20242500, -14.38679028,
          -14.68807125, -15.41123772, -15.82969379, -17.16383553, -15.87702370]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.93114471,  1.52332878, -0.98018551, -1.20881271, -1.02444744,
          -0.72316647,  0.41845608,  1.75259781,  0.46578598]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         ...,


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0543 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 91, vnnlib ID: 91 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.16949272, -23.99048996, -31.56820297, -31.41168404, -30.28091240,
         -31.78048897, -32.67536545, -30.17310143, -29.00139236, -24.21942329]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [740]; unstable size 740; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 245, 1, 740] with unstable size 244 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 740] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 740] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [244]; unstable size 244; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 244] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 244] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.38111258,  5.21995306,  5.14613342,  3.91153669,  5.43957138,
          6.09781599,  3.61251116,  3.57682657, -0.52638125]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-30.16949272, -23.99048996, -31.56820297, -31.41168404, -30.28091240,
         -31.78048897, -32.67536545, -30.17310143, -29.00139236, -24.21942329]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.37867928, -23.65236282, -30.67041016, -30.36244011, -29.32039833,
          -30.71739769, -31.69260788, -29.13233376, -28.37980652, -23.46657944]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.18578339]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0055 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0525 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 92, vnnlib ID: 92 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.87058258, -22.74460030, -18.83897781, -17.07898903, -18.22540092,
         -16.89878654, -19.11079788, -18.79213715, -26.21196175, -21.30853462]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [669]; unstable size 669; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 241, 1, 669] with unstable size 240 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 669] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 669] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [240]; unstable size 240; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 240] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 240] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.66332340,  4.03361559,  0.93628335, -0.12254733,  0.23944306,
          1.05922604,  0.79270160,  7.63720131,  2.90536690]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.87058258, -22.74460030, -18.83897781, -17.07898903, -18.22540092,
         -16.89878654, -19.11079788, -18.79213715, -26.21196175, -21.30853462]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.48543358, -22.25600815, -18.48466873, -16.74746132, -17.88062477,
          -16.75131416, -18.64585114, -18.60153580, -25.74396324, -20.97401619]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00385284]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0666 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 93, vnnlib ID: 93 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.02754021, -16.85969925, -22.22765350, -22.47852516, -22.75400734,
         -22.81135941, -23.67437744, -22.92312431, -17.78327179, -18.35700417]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [740]; unstable size 740; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 266, 1, 740] with unstable size 265 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 740] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 740] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [265]; unstable size 265; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 265] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 265] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.72773409,  3.26004648,  3.78023958,  3.84159613,  3.89679241,
          4.82130051,  3.72940326, -0.13638783,  0.71589303]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.02754021, -16.85969925, -22.22765350, -22.47852516, -22.75400734,
         -22.81135941, -23.67437744, -22.92312431, -17.78327179, -18.35700417]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.97it/s]100%|██████████| 1/1 [00:00<00:00,  8.96it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.76562691, -17.04459190, -21.88329887, -22.15384293, -22.44637489,
          -22.49815941, -23.33575630, -22.66186714, -17.35911942, -18.43116951]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.31452751]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1140 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 26.383888244628906
alpha/beta optimization time: 1.2255549430847168
initial alpha-crown bounds: tensor([[ 1.80881119,  3.35405731,  3.86240482,  3.93695259,  3.99371886,
          4.90125418,  3.85100317, -0.08674812,  0.76243496]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.08674812316894531
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.63599920272827
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.63595986366272
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.63593411445618
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6359121799469
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.63589334487915
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.6358699798584
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.6358504295349
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.63582849502563
Verifying property 7 with 1 instances.
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08674812]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.02754021, -16.85969925, -22.22765350, -22.47852516, -22.75400734,
        -22.81135941, -23.67437744, -22.92312431, -17.78327179, -18.35700417],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08674812]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 740
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 259
Node /15 input 0: size torch.Size([100]) unstable 16
-----------------
# of unstable neurons: 1015
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010204315185546875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08674955368041992
10 lb beta sum: 0.0, worst -0.08675098419189453
Time: prepare 0.0002    bound 0.0883    transfer 0.0001    finalize 0.0001    func 0.0887    
Accumulated time: func 0.0887    prepare 0.0002    bound 0.0883    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] 
split level 1: [/input-12, 24] 
split level 2: [/input-12, 64] 
split level 3: [/input-12, 90] 
split level 4: [/input-12, 29] 
split level 5: [/input-12, 42] 
split level 6: [/input-12, 59] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 69] 
split level 9: [/input-12, 12] 
split level 10: [/input-8, 1973] 
split level 11: [/input-12, 61] 
split level 12: [/input-8, 1392] 
split level 13: [/input-8, 940] 
split level 14: [/input-8, 1971] 
split level 15: [/input-8, 717] 
split level 16: [/input-8, 1490] 
split level 17: [/input-8, 1641] 
split level 18: [/input-8, 821] 
split level 19: [/input-8, 746] 
split level 20: [/input, 887] 
split level 21: [/input-8, 1704] 
split level 22: [/input-8, 1697] 
split level 23: [/input-8, 1974] 
split level 24: [/input-8, 923] 
split level 25: [/input-8, 931] 
split level 26: [/input-8, 757] 
split level 27: [/input, 2698] 
split level 28: [/input-8, 916] 
split level 29: [/input-8, 337] 
split level 30: [/input-8, 758] 
split level 31: [/input-8, 1333] 
split level 32: [/input-8, 1649] 
split level 33: [/input-8, 1505] 
split level 34: [/input-8, 825] 
split level 35: [/input, 3578] 
split level 36: [/input-8, 827] 
split level 37: [/input-8, 1593] 
split level 38: [/input, 1218] 
split level 39: [/input-8, 355] 
split level 40: [/input-8, 755] 
split level 41: [/input-8, 934] 
split level 42: [/input-8, 742] 
split level 43: [/input-8, 1677] 
split level 44: [/input-8, 1390] 
split level 45: [/input, 4035] 
split level 46: [/input-8, 1184] 
split level 47: [/input, 3449] 
split level 48: [/input-8, 715] 
split level 49: [/input, 2762] 
split level 50: [/input, 661] 
split level 51: [/input, 3448] 
split level 52: [/input-8, 330] 
split level 53: [/input-8, 1975] 
split level 54: [/input, 886] 
split level 55: [/input-8, 415] 
split level 56: [/input-8, 331] 
split level 57: [/input, 2758] 
split level 58: [/input-8, 1594] 
split level 59: [/input-8, 589] 
split level 60: [/input-8, 250] 
split level 61: [/input-8, 1686] 
split level 62: [/input, 1015] 
split level 63: [/input-8, 580] 
split level 64: [/input-8, 1678] 
split level 65: [/input, 326] 
split level 66: [/input, 949] 
split level 67: [/input, 1016] 
split level 68: [/input-8, 251] 
split level 69: [/input, 1014] 
split level 70: [/input-8, 1655] 
split level 71: [/input-8, 1176] 
split level 72: [/input, 1217] 
split level 73: [/input-8, 1027] 
split level 74: [/input, 2408] 
split level 75: [/input-8, 1688] 
split level 76: [/input-8, 753] 
split level 77: [/input, 2389] 
split level 78: [/input-8, 413] 
split level 79: [/input-8, 1987] 
split level 80: [/input, 2151] 
split level 81: [/input-8, 732] 
split level 82: [/input, 2152] 
split level 83: [/input, 1019] 
split level 84: [/input, 3572] 
split level 85: [/input, 679] 
split level 86: [/input, 1012] 
split level 87: [/input, 2136] 
split level 88: [/input, 4012] 
split level 89: [/input, 667] 
split level 90: [/input, 2425] 
split level 91: [/input-8, 1707] 
split level 92: [/input-8, 241] 
split level 93: [/input-8, 756] 
split level 94: [/input-8, 1647] 
split level 95: [/input, 1085] 
split level 96: [/input-8, 1034] 
split level 97: [/input, 885] 
split level 98: [/input, 856] 
split level 99: [/input, 2153] 
split level 100: [/input, 2150] 
split level 101: [/input-8, 838] 
split level 102: [/input, 666] 
split level 103: [/input-8, 254] 
split level 104: [/input, 2407] 
split level 105: [/input, 681] 
split level 106: [/input, 1228] 
split level 107: [/input, 1278] 
split level 108: [/input, 1469] 
split level 109: [/input-8, 819] 
split level 110: [/input, 346] 
split level 111: [/input, 730] 
split level 112: [/input, 3194] 
split level 113: [/input, 2555] 
split level 114: [/input, 874] 
split level 115: [/input, 869] 
split level 116: [/input, 1260] 
split level 117: [/input, 677] 
split level 118: [/input-8, 246] 
split level 119: [/input, 4039] 
split level 120: [/input, 2137] 
split level 121: [/input-8, 24] 
split level 122: [/input, 1102] 
split level 123: [/input, 2405] 
split level 124: [/input, 682] 
split level 125: [/input, 1453] 
split level 126: [/input, 2749] 
split level 127: [/input-8, 1381] 
split level 128: [/input, 2406] 
split level 129: [/input-8, 1663] 
split level 130: [/input, 2553] 
split level 131: [/input, 193] 
split level 132: [/input, 2409] 
split level 133: [/input-8, 406] 
split level 134: [/input, 2149] 
split level 135: [/input, 1250] 
split level 136: [/input-8, 6] 
split level 137: [/input, 3195] 
split level 138: [/input, 2549] 
split level 139: [/input, 116] 
split level 140: [/input, 2931] 
split level 141: [/input-8, 1098] 
split level 142: [/input, 2550] 
split level 143: [/input, 2102] 
split level 144: [/input, 1266] 
split level 145: [/input, 2133] 
split level 146: [/input, 1006] 
split level 147: [/input, 3445] 
split level 148: [/input, 854] 
split level 149: [/input, 2932] 
split level 150: [/input, 1045] 
split level 151: [/input, 372] 
split level 152: [/input-8, 752] 
split level 153: [/input, 2118] 
split level 154: [/input-8, 958] 
split level 155: [/input, 2376] 
split level 156: [/input, 2404] 
split level 157: [/input, 2884] 
split level 158: [/input, 1245] 
split level 159: [/input, 2552] 
split level 160: [/input, 2551] 
split level 161: [/input-8, 1986] 
split level 162: [/input, 728] 
split level 163: [/input, 678] 
split level 164: [/input, 1244] 
split level 165: [/input, 2216] 
split level 166: [/input, 2419] 
split level 167: [/input-8, 399] 
split level 168: [/input, 2296] 
split level 169: [/input-8, 1613] 
split level 170: [/input, 2295] 
split level 171: [/input, 2867] 
split level 172: [/input, 727] 
split level 173: [/input, 329] 
split level 174: [/input, 857] 
split level 175: [/input, 1058] 
split level 176: [/input, 2784] 
split level 177: [/input, 1676] 
split level 178: [/input, 209] 
split level 179: [/input, 2010] 
split level 180: [/input, 1277] 
split level 181: [/input, 1457] 
split level 182: [/input, 3495] 
split level 183: [/input, 115] 
split level 184: [/input, 2768] 
split level 185: [/input, 900] 
split level 186: [/input-8, 1158] 
split level 187: [/input, 852] 
split level 188: [/input, 1105] 
split level 189: [/input, 2171] 
split level 190: [/input, 67] 
split level 191: [/input, 2012] 
split level 192: [/input, 1133] 
split level 193: [/input, 2132] 
split level 194: [/input-8, 7] 
split level 195: [/input, 2298] 
split level 196: [/input, 1134] 
split level 197: [/input, 3869] 
split level 198: [/input, 2545] 
split level 199: [/input, 1216] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08671045303344727
10 lb beta sum: 0.0, worst -0.0867166519165039
Time: prepare 0.0126    bound 0.1005    transfer 0.0031    finalize 0.0028    func 0.1216    
Accumulated time: func 0.2103    prepare 0.0226    bound 0.1888    transfer 0.0032    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.35328960) min lb tensor(-0.08670759)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.010733842849731445 
BICCOS Cumulative time: 0.010733842849731445
Preprocessing time: 0.009952783584594727 Inference time: 0.00036644935607910156 Add cuts time: 0.00013518333435058594 Cut analysis time: 0.00027942657470703125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07826 (1), -0.07810 (1), -0.07780 (1), -0.07776 (1), -0.07747 (1), -0.07701 (1), -0.07690 (1), -0.07689 (1), -0.07678 (1), -0.07633 (1), -0.07632 (1), -0.07620 (1), -0.07588 (1), -0.07571 (1), -0.07555 (1), -0.07549 (1), -0.07547 (1), -0.07512 (1), -0.07476 (1), -0.07433 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5211    set_bounds 0.0089    solve 0.1217    add 0.0727    
Accumulated time: pickout 0.0003    decision 0.5211    set_bounds 0.0089    solve 0.1217    add 0.0727    
Current (lb-rhs): -0.0782623291015625
50 domains visited
Cumulative time: 0.8290059566497803

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 31] [/input-12, 24] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 64] [/input-12, 24] [/input-12, 31] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 42] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 3: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 42] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 42] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06418800354003906

all verified at 1th iter
Time: prepare 0.0076    bound 0.0116    transfer 0.0011    finalize 0.0026    func 0.0254    
Accumulated time: func 0.2357    prepare 0.0305    bound 0.2004    transfer 0.0043    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.16281623) min lb tensor(0.00332260)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03527545928955078 
BICCOS Cumulative time: 0.04600930213928223
Preprocessing time: 0.012230634689331055 Inference time: 0.014235258102416992 Add cuts time: 0.008613109588623047 Cut analysis time: 0.0001964569091796875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0013    decision 0.0195    set_bounds 0.0117    solve 0.0254    add 0.0151    
Accumulated time: pickout 0.0016    decision 0.5407    set_bounds 0.0206    solve 0.1471    add 0.0878    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 31]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.82951758e+16, 1.29338011e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 31]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.82951758e+16, 1.34341761e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 31]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.46668313e-07, 1.07815489e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 31]), tensor([1., 1.]), tensor([0, 0]), tensor([1.46668313e-07, 1.34258792e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.017598628997802734

all verified at 1th iter
Time: prepare 0.0003    bound 0.0101    transfer 0.0001    finalize 0.0001    func 0.0108    
Accumulated time: func 0.2465    prepare 0.0308    bound 0.2105    transfer 0.0044    finalize 0.0057    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 197.5146622657776
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4854 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 94, vnnlib ID: 94 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.95301628, -37.16675568, -28.61315918, -31.63938332, -31.43132591,
         -31.90670967, -31.58338928, -34.70899582, -29.83979225, -36.90626907]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [511]; unstable size 511; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 511] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 511] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 511] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 148] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.11264598,  7.84995270,  2.51627016,  2.42221284,  2.71285677,
          2.42410803,  5.54274893,  0.54273701,  7.53125143]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.95301628, -37.16675568, -28.61315918, -31.63938332, -31.43132591,
         -31.90670967, -31.58338928, -34.70899582, -29.83979225, -36.90626907]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-27.95301628, -37.16675568, -28.61315918, -31.63938332, -31.43132591,
          -31.90670967, -31.58338928, -34.70899582, -29.83979225, -36.90626907]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.66014290]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0522 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 95, vnnlib ID: 95 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.89297295, -27.33354378, -29.85372162, -29.49278831, -29.63881493,
         -29.50118065, -28.79456902, -32.01272583, -30.67852783, -30.54553604]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [545]; unstable size 545; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 545] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 545] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 545] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 206] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.09797287,  0.63166380,  0.38092375,  0.26649189,  0.20289660,
          0.00656414,  2.20104027,  2.04292107,  2.05919957]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.89297295, -27.33354378, -29.85372162, -29.49278831, -29.63881493,
         -29.50118065, -28.79456902, -32.01272583, -30.67852783, -30.54553604]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-27.38336754, -27.56085205, -29.44116592, -29.09783745, -29.24282837,
          -29.13388443, -28.50870705, -31.71228409, -30.45660210, -30.53284836]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.17748451]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0665 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 96, vnnlib ID: 96 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.40174294, -21.80084610, -13.97534084, -16.28988266, -14.66720581,
         -15.45098114, -14.34288788, -16.27135849, -21.38418579, -20.94428825]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [473]; unstable size 473; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 262, 1, 473] with unstable size 261 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 473] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 473] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [261]; unstable size 261; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 261] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 261] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.13220167,  5.32813549, -1.68543839,  0.95246214, -1.03167868,
         -0.07594633,  0.28766191,  5.26238585,  4.65756130]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.40174294, -21.80084610, -13.97534084, -16.28988266, -14.66720581,
         -15.45098114, -14.34288788, -16.27135849, -21.38418579, -20.94428825]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.40174294, -21.80084610, -13.97533989, -16.28988647, -14.66720772,
          -15.45098114, -14.34288788, -16.27136040, -21.38418961, -20.94428825],
         [-17.40174294, -21.80084610, -13.97533989, -16.28988647, -14.66720772,
          -15.45098114, -14.34288788, -16.27136040, -21.38418961, -20.94428825]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.36754799,  0.32431984,  1.10809326]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0483 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 97, vnnlib ID: 97 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.44726753, -23.07283783, -15.31714439, -16.86220932, -16.37182045,
         -17.43654442, -16.84148979, -17.91537094, -19.79871750, -21.47072220]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1135]; unstable size 1135; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 418, 1, 1135] with unstable size 417 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 1135] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1135] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [417]; unstable size 417; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 417] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 417] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.41564429,  4.65418482,  0.18066585, -0.18956983,  0.62921107,
         -0.03981161,  1.17114091,  2.01148963,  3.41380930]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-18.44726753, -23.07283783, -15.31714439, -16.86220932, -16.37182045,
         -17.43654442, -16.84148979, -17.91537094, -19.79871750, -21.47072220]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.77it/s]100%|██████████| 1/1 [00:00<00:00,  8.76it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.84564590, -22.40072250, -14.85943127, -16.11748123, -15.43138123,
          -16.66874123, -16.04832268, -17.14625168, -19.11427307, -20.76480103],
         [-17.84564590, -22.40072250, -14.85943127, -16.11748123, -15.43138123,
          -16.66874123, -16.04832268, -17.14625168, -19.11427307, -20.76480103]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.57194996, 1.18889141]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1169 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.512422561645508
alpha/beta optimization time: 1.2181496620178223
initial alpha-crown bounds: tensor([[ 1.54290414,  4.87704468,  0.28549963, -0.07817435,  0.74323332,
          0.05854923,  1.29010868,  2.20426583,  3.58899164]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.07817435264587402
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.62201952934265
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6219778060913
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.62195372581482
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.62193274497986
Verifying property 3 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.07817435]], device='cuda:0') need to verify.
Model prediction is: tensor([-18.44726753, -23.07283783, -15.31714439, -16.86220932, -16.37182045,
        -17.43654442, -16.84148979, -17.91537094, -19.79871750, -21.47072220],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.07817435]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1135
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 400
Node /15 input 0: size torch.Size([100]) unstable 27
-----------------
# of unstable neurons: 1562
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010061264038085938
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07817345857620239
10 lb beta sum: 0.0, worst -0.07818365097045898
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0524    transfer 0.0001    finalize 0.0001    func 0.0529    
Accumulated time: func 0.0529    prepare 0.0002    bound 0.0524    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 59] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 67] 
split level 5: [/input-12, 97] 
split level 6: [/input-12, 14] 
split level 7: [/input-12, 83] 
split level 8: [/input-12, 55] 
split level 9: [/input-8, 173] 
split level 10: [/input-8, 1186] 
split level 11: [/input-12, 86] 
split level 12: [/input-8, 2018] 
split level 13: [/input-8, 163] 
split level 14: [/input-8, 1187] 
split level 15: [/input-8, 1069] 
split level 16: [/input-8, 164] 
split level 17: [/input-8, 2010] 
split level 18: [/input-8, 1178] 
split level 19: [/input-8, 1070] 
split level 20: [/input-8, 1378] 
split level 21: [/input-8, 2025] 
split level 22: [/input-8, 2009] 
split level 23: [/input-8, 132] 
split level 24: [/input-8, 141] 
split level 25: [/input-8, 874] 
split level 26: [/input-8, 877] 
split level 27: [/input-8, 130] 
split level 28: [/input-8, 1185] 
split level 29: [/input-8, 156] 
split level 30: [/input, 631] 
split level 31: [/input-8, 1361] 
split level 32: [/input-8, 869] 
split level 33: [/input, 2798] 
split level 34: [/input-12, 35] 
split level 35: [/input-8, 1370] 
split level 36: [/input, 2781] 
split level 37: [/input-8, 1386] 
split level 38: [/input-8, 1268] 
split level 39: [/input-8, 878] 
split level 40: [/input-8, 2019] 
split level 41: [/input-8, 1382] 
split level 42: [/input-8, 906] 
split level 43: [/input-8, 876] 
split level 44: [/input-8, 33] 
split level 45: [/input, 823] 
split level 46: [/input-8, 866] 
split level 47: [/input-8, 1379] 
split level 48: [/input, 3913] 
split level 49: [/input-8, 865] 
split level 50: [/input-8, 1383] 
split level 51: [/input, 3164] 
split level 52: [/input-8, 1390] 
split level 53: [/input-8, 189] 
split level 54: [/input-8, 1179] 
split level 55: [/input-8, 291] 
split level 56: [/input, 3147] 
split level 57: [/input-8, 857] 
split level 58: [/input-8, 1385] 
split level 59: [/input-8, 1251] 
split level 60: [/input-8, 884] 
split level 61: [/input, 3197] 
split level 62: [/input, 825] 
split level 63: [/input-8, 1253] 
split level 64: [/input, 1345] 
split level 65: [/input-8, 2011] 
split level 66: [/input-8, 868] 
split level 67: [/input-8, 1763] 
split level 68: [/input-8, 362] 
split level 69: [/input-8, 1391] 
split level 70: [/input-8, 219] 
split level 71: [/input-8, 2020] 
split level 72: [/input-8, 34] 
split level 73: [/input-8, 881] 
split level 74: [/input-8, 851] 
split level 75: [/input-8, 32] 
split level 76: [/input-8, 290] 
split level 77: [/input-8, 1375] 
split level 78: [/input, 824] 
split level 79: [/input, 826] 
split level 80: [/input, 2834] 
split level 81: [/input, 2763] 
split level 82: [/input, 954] 
split level 83: [/input-8, 1561] 
split level 84: [/input-8, 1269] 
split level 85: [/input, 3277] 
split level 86: [/input-8, 1078] 
split level 87: [/input-8, 1748] 
split level 88: [/input-8, 1396] 
split level 89: [/input, 2669] 
split level 90: [/input, 3279] 
split level 91: [/input, 2765] 
split level 92: [/input, 3097] 
split level 93: [/input-8, 867] 
split level 94: [/input-8, 216] 
split level 95: [/input-8, 210] 
split level 96: [/input-8, 323] 
split level 97: [/input-8, 1358] 
split level 98: [/input-8, 217] 
split level 99: [/input, 2779] 
split level 100: [/input-8, 220] 
split level 101: [/input-8, 862] 
split level 102: [/input, 2634] 
split level 103: [/input, 2635] 
split level 104: [/input-8, 218] 
split level 105: [/input, 807] 
split level 106: [/input, 3295] 
split level 107: [/input, 2780] 
split level 108: [/input-8, 1177] 
split level 109: [/input, 3366] 
split level 110: [/input-8, 209] 
split level 111: [/input-8, 883] 
split level 112: [/input, 3323] 
split level 113: [/input, 3269] 
split level 114: [/input, 2818] 
split level 115: [/input, 839] 
split level 116: [/input-8, 1233] 
split level 117: [/input, 2652] 
split level 118: [/input, 2585] 
split level 119: [/input-12, 43] 
split level 120: [/input-8, 820] 
split level 121: [/input-8, 1347] 
split level 122: [/input, 2685] 
split level 123: [/input-8, 1562] 
split level 124: [/input-8, 886] 
split level 125: [/input, 2686] 
split level 126: [/input, 842] 
split level 127: [/input-8, 201] 
split level 128: [/input, 1927] 
split level 129: [/input, 1911] 
split level 130: [/input, 923] 
split level 131: [/input-8, 1181] 
split level 132: [/input-8, 1373] 
split level 133: [/input, 956] 
split level 134: [/input-8, 599] 
split level 135: [/input, 775] 
split level 136: [/input, 907] 
split level 137: [/input, 2921] 
split level 138: [/input-8, 1514] 
split level 139: [/input, 3270] 
split level 140: [/input, 679] 
split level 141: [/input-8, 1765] 
split level 142: [/input, 792] 
split level 143: [/input, 67] 
split level 144: [/input-8, 604] 
split level 145: [/input, 2087] 
split level 146: [/input, 2653] 
split level 147: [/input, 105] 
split level 148: [/input-8, 1189] 
split level 149: [/input, 581] 
split level 150: [/input, 805] 
split level 151: [/input, 3381] 
split level 152: [/input, 2839] 
split level 153: [/input-8, 1995] 
split level 154: [/input-8, 843] 
split level 155: [/input, 3383] 
split level 156: [/input, 937] 
split level 157: [/input, 840] 
split level 158: [/input-8, 1252] 
split level 159: [/input-8, 1750] 
split level 160: [/input, 2748] 
split level 161: [/input, 986] 
split level 162: [/input, 2870] 
split level 163: [/input, 972] 
split level 164: [/input-8, 863] 
split level 165: [/input, 3081] 
split level 166: [/input, 939] 
split level 167: [/input, 1405] 
split level 168: [/input, 3384] 
split level 169: [/input-8, 208] 
split level 170: [/input, 791] 
split level 171: [/input-8, 238] 
split level 172: [/input, 315] 
split level 173: [/input, 2665] 
split level 174: [/input, 1356] 
split level 175: [/input-8, 1384] 
split level 176: [/input-8, 887] 
split level 177: [/input, 113] 
split level 178: [/input, 3043] 
split level 179: [/input, 659] 
split level 180: [/input-8, 810] 
split level 181: [/input, 77] 
split level 182: [/input, 3096] 
split level 183: [/input, 87] 
split level 184: [/input-8, 792] 
split level 185: [/input, 3468] 
split level 186: [/input-8, 242] 
split level 187: [/input-8, 1495] 
split level 188: [/input, 801] 
split level 189: [/input, 116] 
split level 190: [/input, 178] 
split level 191: [/input-8, 1349] 
split level 192: [/input, 820] 
split level 193: [/input-8, 1773] 
split level 194: [/input-8, 895] 
split level 195: [/input-8, 858] 
split level 196: [/input, 2126] 
split level 197: [/input, 450] 
split level 198: [/input-8, 364] 
split level 199: [/input, 177] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07807743549346924
10 lb beta sum: 0.0, worst -0.07808899879455566
Time: prepare 0.0113    bound 0.0980    transfer 0.0040    finalize 0.0033    func 0.1193    
Accumulated time: func 0.1721    prepare 0.0212    bound 0.1504    transfer 0.0041    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(0.16974813) min lb tensor(-0.07807481)
Number of Verified Splits: 8 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.010683298110961914 
BICCOS Cumulative time: 0.010683298110961914
Preprocessing time: 0.00994253158569336 Inference time: 0.00034332275390625 Add cuts time: 0.00012135505676269531 Cut analysis time: 0.0002760887145996094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06938 (1), -0.06922 (1), -0.06872 (1), -0.06861 (1), -0.06856 (1), -0.06854 (1), -0.06785 (1), -0.06722 (1), -0.06717 (1), -0.06715 (1), -0.06694 (1), -0.06679 (1), -0.06658 (1), -0.06618 (1), -0.06564 (1), -0.06563 (1), -0.06563 (1), -0.06492 (1), -0.06462 (1), -0.06376 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5144    set_bounds 0.0089    solve 0.1194    add 0.0684    
Accumulated time: pickout 0.0003    decision 0.5144    set_bounds 0.0089    solve 0.1194    add 0.0684    
Current (lb-rhs): -0.06938153505325317
50 domains visited
Cumulative time: 0.7810554504394531

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 59] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 59] [/input-12, 4] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 4] [/input-12, 59] 
split level 2: [/input-12, 4] [/input-12, 67] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 67] [/input-12, 4] [/input-12, 67] [/input-12, 4] 
split level 3: [/input-12, 67] [/input-12, 97] [/input-12, 67] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03169828653335571

all verified at 1th iter
Time: prepare 0.0076    bound 0.0118    transfer 0.0011    finalize 0.0025    func 0.0255    
Accumulated time: func 0.1977    prepare 0.0291    bound 0.1622    transfer 0.0052    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.24257207) min lb tensor(0.00017679)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03507590293884277 
BICCOS Cumulative time: 0.04575920104980469
Preprocessing time: 0.011782407760620117 Inference time: 0.014348030090332031 Add cuts time: 0.00875544548034668 Cut analysis time: 0.0001900196075439453
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0120    solve 0.0256    add 0.0150    
Accumulated time: pickout 0.0014    decision 0.5340    set_bounds 0.0210    solve 0.1450    add 0.0834    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 58]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.82951758e+16, 2.50047743e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 58]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.82951758e+16, 5.85430115e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 58]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.72967361e-11, 2.44831070e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 58]), tensor([1., 1.]), tensor([0, 0]), tensor([2.72967361e-11, 5.94209284e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.03265538811683655

all verified at 0th iter
Time: prepare 0.0003    bound 0.0042    transfer 0.0001    finalize 0.0001    func 0.0048    
Accumulated time: func 0.2024    prepare 0.0294    bound 0.1664    transfer 0.0053    finalize 0.0061    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 197.54634165763855
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.54626297950745
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.54623889923096
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.54621767997742
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.54611945152283
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4539 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 98, vnnlib ID: 98 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.06963348, -22.13847923, -19.43040848, -17.05935478, -17.91039848,
         -16.70587921, -18.83517647, -19.20193481, -21.40512085, -23.21081352]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [821]; unstable size 821; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 268, 1, 821] with unstable size 267 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 821] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 821] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [267]; unstable size 267; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 267] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 267] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.66440094,  3.63743877,  1.26127350,  0.04986423, -0.05376512,
          0.98363966,  0.99622285,  2.72314119,  4.88065529]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.06963348, -22.13847923, -19.43040848, -17.05935478, -17.91039848,
         -16.70587921, -18.83517647, -19.20193481, -21.40512085, -23.21081352]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.01it/s]100%|██████████| 1/1 [00:00<00:00,  9.00it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.13606453, -22.23001099, -19.50859642, -17.40411186, -17.75813293,
          -17.10116959, -19.04270172, -19.16930008, -21.49855804, -23.37729836]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.65696335]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1137 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 3th iter
best_l after optimization: 16.604549407958984
alpha/beta optimization time: 0.04438328742980957
initial alpha-crown bounds: tensor([[1.72636914e+00, 3.70138001e+00, 1.30631173e+00, 6.20776117e-02,
         6.06894493e-04, 1.02092099e+00, 1.04711533e+00, 2.80543876e+00,
         4.93432856e+00]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 0 ; Worst class: (+ rhs) 0.0006068944931030273
verified with init bound!
Result: safe-incomplete in 0.1921 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 99, vnnlib ID: 99 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.15164471, -15.32303524, -10.34104061, -11.69358635, -11.02870369,
         -12.56815910, -10.29522896, -13.35671329, -14.96125889, -15.40310478]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1104]; unstable size 1104; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 266, 1, 1104] with unstable size 265 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 1104] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1104] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [265]; unstable size 265; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 265] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 265] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.64230895,  2.91880131, -0.80557728,  0.38735643, -0.40144277,
          1.09796917,  1.71821189,  2.96996212,  2.98997831]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.15164471, -15.32303524, -10.34104061, -11.69358635, -11.02870369,
         -12.56815910, -10.29522896, -13.35671329, -14.96125889, -15.40310478]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.90528393, -15.24466515,  -9.96267986, -11.51619816, -10.76578522,
          -12.35760880, -10.27429962, -13.08486748, -14.78484154, -15.26928425],
         [-13.90528393, -15.24466515,  -9.96267986, -11.51619816, -10.76578522,
          -12.35760880, -10.27429962, -13.08486748, -14.78484154, -15.26928425]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.31161976,  0.49148560]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0490 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 100, vnnlib ID: 100 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.15521240, -20.46267700, -15.48517609, -15.11612129, -15.12829685,
         -14.53323936, -17.56829453, -16.12021637, -20.15639496, -18.95636940]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [775]; unstable size 775; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 276, 1, 775] with unstable size 275 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 775] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 775] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [275]; unstable size 275; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 275] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 275] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.33888233,  3.17010021, -0.78345799, -1.16919279, -0.99560744,
          1.16705418, -0.86630487,  3.00003195,  1.93420291]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-18.15521240, -20.46267700, -15.48517609, -15.11612129, -15.12829685,
         -14.53323936, -17.56829453, -16.12021637, -20.15639496, -18.95636940]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-18.15521240, -20.46267509, -15.48517513, -15.11611938, -15.12829590,
          -14.53323841, -17.56829262, -16.12021637, -20.15639305, -18.95636940],
         [-18.15521240, -20.46267509, -15.48517513, -15.11611938, -15.12829590,
          -14.53323841, -17.56829262, -16.12021637, -20.15639305, -18.95636940]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.36905575,  0.01217651, -0.58288097,  1.00409698]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0593 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 101, vnnlib ID: 101 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-32.25936890, -36.14345932, -37.27095795, -38.62052536, -37.58951950,
         -39.79058075, -40.22500229, -39.67473602, -32.04320145, -35.54521942]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1007]; unstable size 1007; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 1007] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 1007] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1007] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 260] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.62466037,  2.95583320,  3.49480104,  5.00074291,  3.80081654,
          5.96756840,  6.38276434,  5.76929712,  2.46701241]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-32.25936890, -36.14345932, -37.27095795, -38.62052536, -37.58951950,
         -39.79058075, -40.22500229, -39.67473602, -32.04320145, -35.54521942]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-31.96601677, -35.98268127, -36.94070435, -38.45012283, -37.27670288,
          -39.54294205, -39.97399521, -39.33332825, -32.26424026, -35.37623596]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.29822350]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0054 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0613 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 102, vnnlib ID: 102 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.35278130, -31.36741257, -23.66108131, -25.04328346, -24.10462570,
         -25.23495674, -26.15161133, -25.66592026, -29.01111603, -29.58918571]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [744]; unstable size 744; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 744] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 744] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 744] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 272] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.79987335,  5.21834946, -1.55336499, -0.28184438, -0.22590351,
          0.73269236,  0.47210923,  3.03186035,  3.45756817]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.35278130, -31.36741257, -23.66108131, -25.04328346, -24.10462570,
         -25.23495674, -26.15161133, -25.66592026, -29.01111603, -29.58918571]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-27.35277939, -31.36741257, -23.66108322, -25.04328346, -24.10462570,
          -25.23495865, -26.15161514, -25.66592407, -29.01112175, -29.58918571],
         [-27.35277939, -31.36741257, -23.66108322, -25.04328346, -24.10462570,
          -25.23495865, -26.15161514, -25.66592407, -29.01112175, -29.58918571]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44354248,  0.93865776,  1.13033295]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0527 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 103, vnnlib ID: 103 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.22183990, -23.66624069, -16.29309082, -19.27029610, -15.39398766,
         -19.13426781, -17.66785431, -19.55938721, -21.54466057, -23.50271797]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1067]; unstable size 1067; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 267, 1, 1067] with unstable size 266 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 1067] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1067] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [266]; unstable size 266; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 266] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 266] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.72265196, 6.91143179, 0.00909698, 2.97993946, 2.78059340, 0.93534499,
         3.08999920, 4.73980570, 6.88012981]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0619 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 104, vnnlib ID: 104 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.31546021, -24.12434387, -20.03258896, -20.35837746, -21.19475365,
         -18.88838959, -21.96802902, -21.15868759, -24.55088043, -23.12867355]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [905]; unstable size 905; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 307, 1, 905] with unstable size 306 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 905] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 905] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [306]; unstable size 306; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 306] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 306] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.86118579,  2.95259666, -0.24725556,  1.06830442,  0.89491701,
          1.90242505,  0.80980361,  3.26965976,  2.34717917]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.31546021, -24.12434387, -20.03258896, -20.35837746, -21.19475365,
         -18.88838959, -21.96802902, -21.15868759, -24.55088043, -23.12867355]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.03it/s]100%|██████████| 1/1 [00:00<00:00,  9.02it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.12218666, -24.16842842, -19.76392746, -20.60020447, -21.07238007,
          -19.21739769, -22.07514381, -21.27367401, -24.39806366, -23.28563499]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.54652977]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1133 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 15.521696090698242
alpha/beta optimization time: 1.2089478969573975
initial alpha-crown bounds: tensor([[ 1.94473088,  3.04444027, -0.17711711,  1.08993304,  0.95973754,
          1.94066215,  0.88277918,  3.39136577,  2.44516420]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.17711710929870605
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6295485496521
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6295108795166
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6294870376587
Verifying property 2 with 1 instances.
##### Instance 104 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.17711711]], device='cuda:0') need to verify.
Model prediction is: tensor([-22.31546021, -24.12434387, -20.03258896, -20.35837746, -21.19475365,
        -18.88838959, -21.96802902, -21.15868759, -24.55088043, -23.12867355],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.17711711]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 905
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 297
Node /15 input 0: size torch.Size([100]) unstable 22
-----------------
# of unstable neurons: 1224
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.894371032714844e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17711687088012695
10 lb beta sum: 0.0, worst -0.17712116241455078
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    func 0.0526    
Accumulated time: func 0.0526    prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] 
split level 1: [/input-12, 8] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 72] 
split level 4: [/input-12, 32] 
split level 5: [/input-12, 7] 
split level 6: [/input-12, 59] 
split level 7: [/input-12, 50] 
split level 8: [/input-8, 421] 
split level 9: [/input-8, 403] 
split level 10: [/input-8, 218] 
split level 11: [/input-8, 1709] 
split level 12: [/input-8, 1947] 
split level 13: [/input-8, 1651] 
split level 14: [/input-8, 414] 
split level 15: [/input-8, 1636] 
split level 16: [/input-8, 220] 
split level 17: [/input-8, 1659] 
split level 18: [/input-8, 400] 
split level 19: [/input-8, 1684] 
split level 20: [/input-8, 410] 
split level 21: [/input-8, 725] 
split level 22: [/input-8, 1644] 
split level 23: [/input-8, 1971] 
split level 24: [/input-8, 232] 
split level 25: [/input-8, 1661] 
split level 26: [/input-8, 747] 
split level 27: [/input-8, 406] 
split level 28: [/input-8, 1339] 
split level 29: [/input-8, 1716] 
split level 30: [/input-8, 1949] 
split level 31: [/input-8, 217] 
split level 32: [/input-8, 233] 
split level 33: [/input, 1401] 
split level 34: [/input-8, 1972] 
split level 35: [/input-8, 930] 
split level 36: [/input-8, 415] 
split level 37: [/input-8, 430] 
split level 38: [/input-8, 210] 
split level 39: [/input-8, 1206] 
split level 40: [/input-12, 6] 
split level 41: [/input-8, 240] 
split level 42: [/input-8, 1365] 
split level 43: [/input-8, 225] 
split level 44: [/input-8, 408] 
split level 45: [/input-8, 1332] 
split level 46: [/input-8, 431] 
split level 47: [/input-8, 1388] 
split level 48: [/input-8, 423] 
split level 49: [/input-8, 980] 
split level 50: [/input-8, 424] 
split level 51: [/input-8, 241] 
split level 52: [/input-8, 202] 
split level 53: [/input-8, 1957] 
split level 54: [/input-8, 224] 
split level 55: [/input-8, 938] 
split level 56: [/input-8, 1953] 
split level 57: [/input-8, 1198] 
split level 58: [/input-8, 1396] 
split level 59: [/input-8, 1650] 
split level 60: [/input-8, 248] 
split level 61: [/input-8, 1707] 
split level 62: [/input, 1385] 
split level 63: [/input-8, 1404] 
split level 64: [/input-8, 292] 
split level 65: [/input-8, 416] 
split level 66: [/input-8, 1395] 
split level 67: [/input-8, 1669] 
split level 68: [/input-8, 230] 
split level 69: [/input-8, 1973] 
split level 70: [/input-8, 309] 
split level 71: [/input-8, 216] 
split level 72: [/input-8, 1525] 
split level 73: [/input, 3557] 
split level 74: [/input-8, 1325] 
split level 75: [/input-8, 227] 
split level 76: [/input-8, 1658] 
split level 77: [/input-8, 212] 
split level 78: [/input-8, 236] 
split level 79: [/input-8, 271] 
split level 80: [/input-8, 1519] 
split level 81: [/input-8, 1978] 
split level 82: [/input-8, 16] 
split level 83: [/input-8, 249] 
split level 84: [/input-8, 214] 
split level 85: [/input-8, 1782] 
split level 86: [/input-8, 1961] 
split level 87: [/input-8, 811] 
split level 88: [/input-8, 963] 
split level 89: [/input-8, 209] 
split level 90: [/input-8, 1648] 
split level 91: [/input-8, 285] 
split level 92: [/input-8, 290] 
split level 93: [/input-8, 203] 
split level 94: [/input, 1406] 
split level 95: [/input-8, 244] 
split level 96: [/input, 2983] 
split level 97: [/input-8, 1100] 
split level 98: [/input-8, 1386] 
split level 99: [/input-8, 439] 
split level 100: [/input-8, 828] 
split level 101: [/input-8, 1497] 
split level 102: [/input-8, 912] 
split level 103: [/input-12, 56] 
split level 104: [/input, 2014] 
split level 105: [/input-8, 1621] 
split level 106: [/input-8, 286] 
split level 107: [/input, 1997] 
split level 108: [/input-8, 829] 
split level 109: [/input, 2013] 
split level 110: [/input, 2622] 
split level 111: [/input, 1998] 
split level 112: [/input, 1965] 
split level 113: [/input, 507] 
split level 114: [/input, 1332] 
split level 115: [/input, 2030] 
split level 116: [/input, 1421] 
split level 117: [/input-8, 1230] 
split level 118: [/input, 2684] 
split level 119: [/input-8, 1335] 
split level 120: [/input, 153] 
split level 121: [/input, 2869] 
split level 122: [/input, 1022] 
split level 123: [/input-8, 197] 
split level 124: [/input, 1980] 
split level 125: [/input, 1966] 
split level 126: [/input-8, 1690] 
split level 127: [/input-8, 196] 
split level 128: [/input-8, 397] 
split level 129: [/input-8, 946] 
split level 130: [/input, 509] 
split level 131: [/input, 68] 
split level 132: [/input, 124] 
split level 133: [/input, 2029] 
split level 134: [/input-8, 964] 
split level 135: [/input, 1996] 
split level 136: [/input, 2046] 
split level 137: [/input, 1434] 
split level 138: [/input, 1964] 
split level 139: [/input, 1316] 
split level 140: [/input-8, 1656] 
split level 141: [/input, 141] 
split level 142: [/input-8, 208] 
split level 143: [/input-8, 962] 
split level 144: [/input, 2666] 
split level 145: [/input, 1982] 
split level 146: [/input, 3150] 
split level 147: [/input, 117] 
split level 148: [/input, 1981] 
split level 149: [/input, 2028] 
split level 150: [/input, 2034] 
split level 151: [/input, 109] 
split level 152: [/input, 81] 
split level 153: [/input, 3406] 
split level 154: [/input, 65] 
split level 155: [/input, 2897] 
split level 156: [/input, 1732] 
split level 157: [/input, 1373] 
split level 158: [/input-8, 394] 
split level 159: [/input, 1006] 
split level 160: [/input, 142] 
split level 161: [/input, 1812] 
split level 162: [/input-8, 1262] 
split level 163: [/input, 2649] 
split level 164: [/input-8, 586] 
split level 165: [/input, 2673] 
split level 166: [/input, 98] 
split level 167: [/input, 122] 
split level 168: [/input, 113] 
split level 169: [/input, 2913] 
split level 170: [/input, 21] 
split level 171: [/input, 2012] 
split level 172: [/input, 731] 
split level 173: [/input, 2278] 
split level 174: [/input, 2008] 
split level 175: [/input, 123] 
split level 176: [/input, 1017] 
split level 177: [/input-8, 1405] 
split level 178: [/input, 37] 
split level 179: [/input, 2644] 
split level 180: [/input-8, 636] 
split level 181: [/input, 790] 
split level 182: [/input-8, 1518] 
split level 183: [/input-8, 1552] 
split level 184: [/input, 2589] 
split level 185: [/input-8, 1640] 
split level 186: [/input, 84] 
split level 187: [/input, 3578] 
split level 188: [/input, 635] 
split level 189: [/input, 2045] 
split level 190: [/input, 23] 
split level 191: [/input, 36] 
split level 192: [/input, 2945] 
split level 193: [/input, 1979] 
split level 194: [/input, 2898] 
split level 195: [/input, 2753] 
split level 196: [/input, 2946] 
split level 197: [/input, 1723] 
split level 198: [/input, 2926] 
split level 199: [/input, 1328] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1770343780517578
10 lb beta sum: 0.0, worst -0.17703509330749512
Time: prepare 0.0114    bound 0.0975    transfer 0.0017    finalize 0.0026    func 0.1158    
Accumulated time: func 0.1684    prepare 0.0213    bound 0.1496    transfer 0.0018    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.24898648) min lb tensor(-0.17703032)
Number of Verified Splits: 4 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.010680437088012695 
BICCOS Cumulative time: 0.010680437088012695
Preprocessing time: 0.009849309921264648 Inference time: 0.00019502639770507812 Add cuts time: 8.058547973632812e-05 Cut analysis time: 0.0005555152893066406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16366 (1), -0.16340 (1), -0.16283 (1), -0.16248 (1), -0.16180 (1), -0.16066 (1), -0.16018 (1), -0.16015 (1), -0.15940 (1), -0.15937 (1), -0.15912 (1), -0.15893 (1), -0.15881 (1), -0.15875 (1), -0.15875 (1), -0.15862 (1), -0.15845 (1), -0.15827 (1), -0.15796 (1), -0.15775 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5148    set_bounds 0.0087    solve 0.1159    add 0.0668    
Accumulated time: pickout 0.0003    decision 0.5148    set_bounds 0.0087    solve 0.1159    add 0.0668    
Current (lb-rhs): -0.16365671157836914
50 domains visited
Cumulative time: 0.7744269371032715

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 8] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 1: [/input-12, 8] [/input-12, 46] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13065505027770996

all verified at 6th iter
Time: prepare 0.0076    bound 0.0405    transfer 0.0011    finalize 0.0026    func 0.0543    
Accumulated time: func 0.2227    prepare 0.0291    bound 0.1902    transfer 0.0028    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.38207313) min lb tensor(0.00023174)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.034414052963256836 
BICCOS Cumulative time: 0.04509449005126953
Preprocessing time: 0.011650800704956055 Inference time: 0.014375925064086914 Add cuts time: 0.008207559585571289 Cut analysis time: 0.00017976760864257812
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0120    solve 0.0544    add 0.0150    
Accumulated time: pickout 0.0013    decision 0.5341    set_bounds 0.0207    solve 0.1703    add 0.0818    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 24]), tensor([-1., -1.]), tensor([0, 0]), tensor([3.09057100e-08, 1.32574603e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 24]), tensor([-1.,  1.]), tensor([0, 0]), tensor([3.09057100e-08, 2.02129647e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 24]), tensor([ 1., -1.]), tensor([0, 0]), tensor([3.09057100e-08, 1.29803702e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 24]), tensor([1., 1.]), tensor([0, 0]), tensor([3.09057100e-08, 2.03496024e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.03467559814453125

all verified at 0th iter
Time: prepare 0.0003    bound 0.0041    transfer 0.0001    finalize 0.0001    func 0.0047    
Accumulated time: func 0.2274    prepare 0.0294    bound 0.1943    transfer 0.0029    finalize 0.0055    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.56978845596313
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.5697135925293
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.56969046592712
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.56966996192932
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.56964993476868
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.5696301460266
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4306 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 105, vnnlib ID: 105 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.51308250, -22.43931961, -18.50501633, -19.17534065, -19.69705963,
         -19.25070381, -20.29491043, -19.66059494, -20.88692856, -21.50129509]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [811]; unstable size 811; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 309, 1, 811] with unstable size 308 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 811] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 811] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [308]; unstable size 308; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 308] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 308] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.88940120,  0.17124438, -2.58539391, -1.63983178, -1.31377959,
         -1.55795741, -0.86024141, -1.02569282, -0.27762079]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.51308250, -22.43931961, -18.50501633, -19.17534065, -19.69705963,
         -19.25070381, -20.29491043, -19.66059494, -20.88692856, -21.50129509]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.51308632, -22.43931770, -18.50501251, -19.17533684, -19.69705772,
          -19.25070381, -20.29491043, -19.66059494, -20.88693047, -21.50129509],
         [-19.51308632, -22.43931770, -18.50501251, -19.17533684, -19.69705772,
          -19.25070381, -20.29491043, -19.66059494, -20.88693047, -21.50129509]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.14750862, -1.15558243, -0.48525810,  0.03646278, -0.40989113,
           0.63431549,  1.22633553,  1.84070015]]], device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         ...,


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0859 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 106, vnnlib ID: 106 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.87668610, -20.48638916, -25.85806274, -25.13366127, -24.85799789,
         -26.38156319, -26.31613541, -25.62492752, -20.27039146, -21.82055855]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [794]; unstable size 794; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 221, 1, 794] with unstable size 220 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 794] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 794] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [220]; unstable size 220; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 220] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 220] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.78699064,  3.17528439,  2.83466196,  2.43643188,  3.92167902,
          3.64071131,  3.01096916, -1.71908140,  0.30822158]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.87668610, -20.48638916, -25.85806274, -25.13366127, -24.85799789,
         -26.38156319, -26.31613541, -25.62492752, -20.27039146, -21.82055855]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.87668610, -20.48638916, -25.85806274, -25.13366127, -24.85799789,
          -26.38156319, -26.31613541, -25.62492752, -20.27039146, -21.82055855]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.21599770]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0633 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 107, vnnlib ID: 107 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.65453911, -28.29750824, -25.45104980, -28.11194038, -25.15310860,
         -28.19610023, -28.02035522, -26.93565750, -23.93723679, -27.98169518]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [701]; unstable size 701; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 241, 1, 701] with unstable size 240 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 701] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 701] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [240]; unstable size 240; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 240] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 240] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.39394474, 1.70091999, 3.99040127, 1.13504863, 3.87649202, 3.90128398,
         2.66181898, 0.08498108, 3.97777319]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0575 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 108, vnnlib ID: 108 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.15261269, -17.94160461, -14.95448303, -13.92990398, -14.40570259,
         -14.65692043, -13.89788246, -15.86449909, -18.80389977, -17.83309364]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [800]; unstable size 800; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 364, 1, 800] with unstable size 363 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 800] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 800] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [363]; unstable size 363; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 363] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 363] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.67310369,  1.51413035, -0.13763857, -0.79897308,  0.29746601,
         -1.22556412,  0.01225758,  2.61003351,  1.46175170]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.15261269, -17.94160461, -14.95448303, -13.92990398, -14.40570259,
         -14.65692043, -13.89788246, -15.86449909, -18.80389977, -17.83309364]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.15261078, -17.94160461, -14.95448208, -13.92990494, -14.40570354,
          -14.65692043, -13.89788151, -15.86450100, -18.80390167, -17.83309174],
         [-17.15261078, -17.94160461, -14.95448208, -13.92990494, -14.40570354,
          -14.65692043, -13.89788151, -15.86450100, -18.80390167, -17.83309174]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.02457714,  0.47579861, -0.03202343]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0455 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 109, vnnlib ID: 109 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.79030228, -30.41434669, -27.64798355, -28.61847115, -28.48152161,
         -29.57408333, -29.43395233, -30.51341820, -29.47771645, -30.12065697]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [497]; unstable size 497; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 497] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 497] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 497] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 139] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.35675859, 3.17424917, 3.96514344, 3.89233851, 4.75903225, 4.93405771,
         5.60336447, 4.77322054, 5.42915249]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0561 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 110, vnnlib ID: 110 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.93199348, -23.69929504, -17.71457291, -17.07846260, -17.30852318,
         -18.18094444, -14.50052071, -20.42077255, -23.73473549, -24.23317528]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [523]; unstable size 523; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 358, 1, 523] with unstable size 357 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 523] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 523] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [357]; unstable size 357; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 357] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 357] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.54994011, 6.75454807, 1.88174129, 1.26384282, 1.37097168, 2.10497570,
         3.85746717, 6.81311655, 7.42777681]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0381 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 111, vnnlib ID: 111 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.98239326, -22.89222527, -16.59890175, -19.05320930, -15.75452042,
         -18.76253128, -18.17463303, -18.00091171, -22.45012093, -22.38698578]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [707]; unstable size 707; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 286, 1, 707] with unstable size 285 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 707] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 707] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [285]; unstable size 285; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 285] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 285] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.54880261,  4.78813791, -0.27670145,  2.23500395,  2.02165771,
          1.09089088,  1.08386612,  4.23047447,  4.55613470]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.98239326, -22.89222527, -16.59890175, -19.05320930, -15.75452042,
         -18.76253128, -18.17463303, -18.00091171, -22.45012093, -22.38698578]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.93it/s]100%|██████████| 1/1 [00:00<00:00,  8.93it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.62476921, -22.64729691, -16.24184227, -18.99933624, -15.90932655,
          -18.73588371, -18.09774780, -18.31125259, -22.13279724, -22.22531128]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.33251572]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1147 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 23.33493423461914
alpha/beta optimization time: 1.2222540378570557
initial alpha-crown bounds: tensor([[ 2.69250321,  4.96834612, -0.15371323,  2.31067252,  2.06917882,
          1.21068335,  1.12954426,  4.43741560,  4.67030382]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.15371322631835938
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6246109008789
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.62457180023193
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.62454652786255
Verifying property 2 with 1 instances.
##### Instance 111 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.15371323]], device='cuda:0') need to verify.
Model prediction is: tensor([-19.98239326, -22.89222527, -16.59890175, -19.05320930, -15.75452042,
        -18.76253128, -18.17463303, -18.00091171, -22.45012093, -22.38698578],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.15371323]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 707
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 281
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1014
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010275840759277344
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15371108055114746
10 lb beta sum: 0.0, worst -0.15372204780578613
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0528    transfer 0.0001    finalize 0.0001    func 0.0532    
Accumulated time: func 0.0532    prepare 0.0002    bound 0.0528    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 53] 
split level 3: [/input-12, 24] 
split level 4: [/input-12, 6] 
split level 5: [/input-12, 12] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 0] 
split level 8: [/input-12, 32] 
split level 9: [/input-8, 1700] 
split level 10: [/input-12, 38] 
split level 11: [/input-8, 1701] 
split level 12: [/input-12, 49] 
split level 13: [/input-8, 1628] 
split level 14: [/input-8, 929] 
split level 15: [/input-8, 1627] 
split level 16: [/input-8, 1630] 
split level 17: [/input-8, 476] 
split level 18: [/input-12, 7] 
split level 19: [/input-8, 1635] 
split level 20: [/input-8, 930] 
split level 21: [/input-8, 939] 
split level 22: [/input-8, 1637] 
split level 23: [/input-8, 474] 
split level 24: [/input-12, 57] 
split level 25: [/input-8, 1622] 
split level 26: [/input-8, 468] 
split level 27: [/input-8, 1261] 
split level 28: [/input-8, 795] 
split level 29: [/input-8, 1638] 
split level 30: [/input-8, 484] 
split level 31: [/input-8, 285] 
split level 32: [/input-8, 490] 
split level 33: [/input-8, 577] 
split level 34: [/input-8, 1614] 
split level 35: [/input-8, 1710] 
split level 36: [/input-8, 1708] 
split level 37: [/input-8, 1678] 
split level 38: [/input-8, 1970] 
split level 39: [/input-8, 797] 
split level 40: [/input-8, 1957] 
split level 41: [/input-8, 794] 
split level 42: [/input-8, 1053] 
split level 43: [/input-8, 788] 
split level 44: [/input-8, 596] 
split level 45: [/input-8, 1260] 
split level 46: [/input-8, 1684] 
split level 47: [/input-8, 1958] 
split level 48: [/input-8, 1716] 
split level 49: [/input-8, 1717] 
split level 50: [/input-8, 274] 
split level 51: [/input-8, 1949] 
split level 52: [/input-8, 1035] 
split level 53: [/input-8, 1922] 
split level 54: [/input-8, 90] 
split level 55: [/input-8, 492] 
split level 56: [/input-8, 1259] 
split level 57: [/input-8, 1052] 
split level 58: [/input-8, 1250] 
split level 59: [/input-8, 949] 
split level 60: [/input-8, 1713] 
split level 61: [/input-8, 1338] 
split level 62: [/input-8, 1262] 
split level 63: [/input-8, 1337] 
split level 64: [/input-8, 604] 
split level 65: [/input-8, 1313] 
split level 66: [/input-8, 460] 
split level 67: [/input-8, 401] 
split level 68: [/input-8, 1978] 
split level 69: [/input-8, 1643] 
split level 70: [/input-8, 422] 
split level 71: [/input-8, 1633] 
split level 72: [/input-8, 1617] 
split level 73: [/input-8, 1578] 
split level 74: [/input-8, 798] 
split level 75: [/input-8, 423] 
split level 76: [/input-8, 1659] 
split level 77: [/input-8, 108] 
split level 78: [/input-8, 307] 
split level 79: [/input-8, 1030] 
split level 80: [/input-8, 1951] 
split level 81: [/input-8, 493] 
split level 82: [/input-8, 1292] 
split level 83: [/input-8, 51] 
split level 84: [/input-8, 828] 
split level 85: [/input-8, 1625] 
split level 86: [/input-8, 1305] 
split level 87: [/input-8, 1623] 
split level 88: [/input-8, 811] 
split level 89: [/input-8, 98] 
split level 90: [/input-8, 829] 
split level 91: [/input-8, 1721] 
split level 92: [/input, 1163] 
split level 93: [/input-8, 413] 
split level 94: [/input-8, 45] 
split level 95: [/input-8, 330] 
split level 96: [/input, 183] 
split level 97: [/input-8, 50] 
split level 98: [/input-8, 505] 
split level 99: [/input-8, 82] 
split level 100: [/input-8, 1932] 
split level 101: [/input-8, 441] 
split level 102: [/input-8, 106] 
split level 103: [/input-8, 365] 
split level 104: [/input-8, 905] 
split level 105: [/input-8, 402] 
split level 106: [/input-8, 1615] 
split level 107: [/input-8, 830] 
split level 108: [/input-8, 1754] 
split level 109: [/input-8, 1595] 
split level 110: [/input-8, 1606] 
split level 111: [/input-8, 1712] 
split level 112: [/input-8, 627] 
split level 113: [/input, 1416] 
split level 114: [/input-8, 812] 
split level 115: [/input, 185] 
split level 116: [/input-8, 1646] 
split level 117: [/input-8, 498] 
split level 118: [/input-8, 1334] 
split level 119: [/input-8, 793] 
split level 120: [/input-8, 941] 
split level 121: [/input, 184] 
split level 122: [/input-8, 372] 
split level 123: [/input, 2949] 
split level 124: [/input, 2951] 
split level 125: [/input-8, 116] 
split level 126: [/input, 152] 
split level 127: [/input, 186] 
split level 128: [/input-8, 1609] 
split level 129: [/input, 3005] 
split level 130: [/input, 2504] 
split level 131: [/input-8, 446] 
split level 132: [/input, 3021] 
split level 133: [/input-8, 137] 
split level 134: [/input, 1435] 
split level 135: [/input-8, 958] 
split level 136: [/input-8, 1654] 
split level 137: [/input, 2475] 
split level 138: [/input-8, 777] 
split level 139: [/input-8, 1736] 
split level 140: [/input-8, 306] 
split level 141: [/input, 138] 
split level 142: [/input-8, 1762] 
split level 143: [/input, 1180] 
split level 144: [/input-8, 104] 
split level 145: [/input, 1607] 
split level 146: [/input-8, 1607] 
split level 147: [/input-8, 1297] 
split level 148: [/input, 1514] 
split level 149: [/input, 2440] 
split level 150: [/input, 151] 
split level 151: [/input-8, 1265] 
split level 152: [/input, 2489] 
split level 153: [/input, 2474] 
split level 154: [/input-8, 115] 
split level 155: [/input, 2491] 
split level 156: [/input-8, 117] 
split level 157: [/input, 3019] 
split level 158: [/input-8, 21] 
split level 159: [/input-8, 1251] 
split level 160: [/input, 3541] 
split level 161: [/input, 2522] 
split level 162: [/input-8, 1603] 
split level 163: [/input-8, 1108] 
split level 164: [/input-8, 447] 
split level 165: [/input-12, 36] 
split level 166: [/input, 2217] 
split level 167: [/input-8, 97] 
split level 168: [/input, 494] 
split level 169: [/input-8, 22] 
split level 170: [/input, 88] 
split level 171: [/input-8, 1746] 
split level 172: [/input-8, 1624] 
split level 173: [/input, 1015] 
split level 174: [/input-8, 500] 
split level 175: [/input, 217] 
split level 176: [/input, 199] 
split level 177: [/input, 2487] 
split level 178: [/input, 3301] 
split level 179: [/input, 2248] 
split level 180: [/input, 2408] 
split level 181: [/input, 1317] 
split level 182: [/input-8, 1027] 
split level 183: [/input-8, 956] 
split level 184: [/input, 2183] 
split level 185: [/input, 2455] 
split level 186: [/input, 3052] 
split level 187: [/input, 232] 
split level 188: [/input-8, 452] 
split level 189: [/input-8, 126] 
split level 190: [/input, 2792] 
split level 191: [/input, 1014] 
split level 192: [/input, 3038] 
split level 193: [/input, 1195] 
split level 194: [/input, 2791] 
split level 195: [/input, 1515] 
split level 196: [/input, 2250] 
split level 197: [/input-12, 92] 
split level 198: [/input, 2153] 
split level 199: [/input-8, 908] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15361344814300537
10 lb beta sum: 0.0, worst -0.15361487865447998
Time: prepare 0.0131    bound 0.0985    transfer 0.0028    finalize 0.0031    func 0.1201    
Accumulated time: func 0.1733    prepare 0.0230    bound 0.1513    transfer 0.0029    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.17703795) min lb tensor(-0.15360129)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.010891914367675781 
BICCOS Cumulative time: 0.010891914367675781
Preprocessing time: 0.009923696517944336 Inference time: 0.0002624988555908203 Add cuts time: 9.775161743164062e-05 Cut analysis time: 0.0006079673767089844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13946 (1), -0.13899 (1), -0.13871 (1), -0.13871 (1), -0.13858 (1), -0.13771 (1), -0.13699 (1), -0.13661 (1), -0.13640 (1), -0.13609 (1), -0.13552 (1), -0.13469 (1), -0.13451 (1), -0.13432 (1), -0.13412 (1), -0.13407 (1), -0.13332 (1), -0.13254 (1), -0.13219 (1), -0.13146 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5138    set_bounds 0.0091    solve 0.1202    add 0.0701    
Accumulated time: pickout 0.0003    decision 0.5138    set_bounds 0.0091    solve 0.1202    add 0.0701    
Current (lb-rhs): -0.1394561529159546
50 domains visited
Cumulative time: 0.782590389251709

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
split level 1: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 2: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 0] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13810300827026367
10 lb beta sum: 0.7302239537239075, worst -0.060819923877716064
Time: prepare 0.0073    bound 0.1171    transfer 0.0011    finalize 0.0022    func 0.1303    
Accumulated time: func 0.3036    prepare 0.0305    bound 0.2684    transfer 0.0040    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.29600096) min lb tensor(-0.06070572)
Number of Verified Splits: 201 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.023232698440551758 
BICCOS Cumulative time: 0.03412461280822754
Preprocessing time: 0.011820793151855469 Inference time: 0.007645606994628906 Add cuts time: 0.0033063888549804688 Cut analysis time: 0.00045990943908691406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01174 (2), -0.01157 (2), -0.01129 (2), -0.01123 (2), -0.01109 (2), -0.01104 (2), -0.01089 (2), -0.01070 (2), -0.01060 (2), -0.01046 (2), -0.00998 (2), -0.00978 (2), -0.00953 (2), -0.00942 (2), -0.00933 (2), -0.00930 (2), -0.00913 (2), -0.00885 (2), -0.00848 (2), -0.00829 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0120    solve 0.1304    add 0.0885    
Accumulated time: pickout 0.0013    decision 0.5332    set_bounds 0.0211    solve 0.2505    add 0.1586    
Current (lb-rhs): -0.011741280555725098
100 domains visited
Cumulative time: 1.0573387145996094

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
split level 1: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 2: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 3: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 49] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10868179798126221

all verified at 6th iter
Time: prepare 0.0074    bound 0.0484    transfer 0.0011    finalize 0.0020    func 0.0615    
Accumulated time: func 0.3652    prepare 0.0382    bound 0.3169    transfer 0.0051    finalize 0.0074    
all_split False
======================Cut inference begins======================
max lb tensor(0.24588990) min lb tensor(0.04230964)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.04064655303955078 
BICCOS Cumulative time: 0.07477116584777832
Preprocessing time: 0.011583328247070312 Inference time: 0.015951156616210938 Add cuts time: 0.012909173965454102 Cut analysis time: 0.0002028942108154297
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0190    set_bounds 0.0156    solve 0.0616    add 0.0196    
Accumulated time: pickout 0.0022    decision 0.5522    set_bounds 0.0367    solve 0.3122    add 0.1782    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([2.99189007e-11, 1.22078225e-01, 2.36569956e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.99189007e-11, 1.22078225e-01, 6.10365123e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.99189007e-11, 1.25406310e-01, 2.34756023e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([2.99189007e-11, 1.25406310e-01, 6.15420789e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([6.61115992e-15, 1.22243926e-01, 2.38445505e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([6.61115992e-15, 1.22243926e-01, 6.19631261e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([6.61115992e-15, 1.25941917e-01, 2.36675218e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([6.61115992e-15, 1.25941917e-01, 6.14444464e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09815073013305664

all verified at 2th iter
Time: prepare 0.0004    bound 0.0149    transfer 0.0001    finalize 0.0002    func 0.0156    
Accumulated time: func 0.3808    prepare 0.0386    bound 0.3317    transfer 0.0052    finalize 0.0076    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.1907925605774
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.19071793556213
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.19028282165527
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.19026017189026
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.19023990631104
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.1902198791504
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.8098 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 112, vnnlib ID: 112 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.02572250, -27.23712921, -27.95742416, -26.55063438, -28.86597252,
         -27.63702202, -28.59363937, -27.52897644, -25.43346977, -24.92130852]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [654]; unstable size 654; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 654] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 654] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 654] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 239] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.94611073,  1.33183813,  1.31211519,  0.27194166,  2.35654354,
          1.27423763,  2.06728649,  0.98785019, -0.88770485]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.02572250, -27.23712921, -27.95742416, -26.55063438, -28.86597252,
         -27.63702202, -28.59363937, -27.52897644, -25.43346977, -24.92130852]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-27.50465775, -27.85905075, -28.51387024, -27.06138802, -29.40906906,
          -28.19871521, -29.19503403, -28.15616608, -25.52621841, -25.67127037]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.14505196]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0692 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 113, vnnlib ID: 113 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.26823807, -20.68097305, -17.33302307, -15.71412659, -18.33230782,
         -15.48265743, -18.94750595, -17.71434212, -21.22698212, -20.08721161]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [904]; unstable size 904; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 247, 1, 904] with unstable size 246 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 904] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 904] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [246]; unstable size 246; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 246] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 246] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.46684694,  3.44482684,  0.77367628,  1.71358013, -0.53734148,
          2.20122409,  1.18286562,  4.27326059,  2.94509697]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.26823807, -20.68097305, -17.33302307, -15.71412659, -18.33230782,
         -15.48265743, -18.94750595, -17.71434212, -21.22698212, -20.08721161]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.26823807, -20.68097305, -17.33302307, -15.71412659, -18.33230782,
          -15.48265743, -18.94750595, -17.71434212, -21.22698212, -20.08721161]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.23146915]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.03650784, -1.00476182, -0.75079364,  ..., -0.68730158,
            -0.90952379, -1.62380958],
           [-0.44920623, -0.95714283, -0.67142856,  ..., -0.32222211,
            -0.65555555, -1.62380958],
           [-0.09999990, -0.92539680, -0.63968253,  ..., -0.22698402,
            -0.57619047, -1.63968253],
           ...,
           [-0.27460307, -0.29047608, -0.33809513,  ..., -0.87777776,
            -0.51269841, -0.48095238],
           [-0.30634910, -0.30634910, -0.33809513,  ..., -1.09999990,
            -0.65555555, -0.49682540],
           [-0.40158719, -0.40158719, -0.41746020,  ..., -1.29047608,
            -0.87777776, -0.62380952]],

          [[-1.62640905, -1.72302747, -1.65861523,  ..., -1.49758446,
            -1.57809973, -1.75523353],
           [-1.38486302, -1.77133656, -1.61030602,  ..., -1.35265696,
            -1.49758446, -1.75523353],
           [-1.09500802, -1.80354273, -1.62640905,  ..., -1.22383249,
            -1.40096617, -1.75523353],
           ...,
           [-1.25603855, -1.25603855, -1.28824472,  ..., -0.72463763,
            -0.43478248, -0.51529789],
           [-1.28824472, -1.25603855, -1.28824472,  ..., -0.88566822,
            -0.48309177, -0.45088565],
           [-1.33655393, -1.33655393, -1.33655393,  ..., -1.12721407,
            -0.67632848, -0.46698871]],

          [[-1.48275876, -1.52773619, -1.49775124,  ..., -1.28785622,
            -1.34782624, -1.42278874],
           [-1.15292358, -1.55772126, -1.54272878,  ..., -1.12293863,
            -1.19790113, -1.42278874],
           [-0.89805096, -1.54272878, -1.51274371,  ..., -1.06296861,
            -1.13793111, -1.43778121],
           ...,
           [-0.94302845, -0.94302845, -0.95802099,  ..., -0.61319339,
            -0.38830581, -0.52323836],
           [-0.94302845, -0.94302845, -0.94302845,  ..., -0.70314842,
            -0.34332830, -0.38830581],
           [-0.98800600, -1.00299859, -1.00299859,  ..., -0.89805096,
            -0.52323836, -0.31334329]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0460 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 114, vnnlib ID: 114 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.03265953, -29.80158615, -28.01462746, -29.49231339, -27.82477570,
         -29.74157143, -29.00487137, -29.65236473, -26.56688309, -30.04109955]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [952]; unstable size 952; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 952] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 952] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 952] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 256] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.56631327, 3.00716305, 4.34157372, 2.61966276, 4.48081493, 3.68361378,
         4.35380125, 1.53697205, 5.00381374]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0498 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 115, vnnlib ID: 115 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.37767220, -22.63599205, -16.68470383, -17.56246567, -14.84348488,
         -17.98977852, -17.40301132, -16.78604507, -20.68542862, -22.37132454]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [762]; unstable size 762; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 332, 1, 762] with unstable size 331 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 762] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 762] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [331]; unstable size 331; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 331] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 331] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.03614426, 5.42467785, 1.01491463, 1.54336703, 1.87700081, 1.22836041,
         1.06106234, 4.09441280, 4.97289753]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0375 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 116, vnnlib ID: 116 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.56104851, -25.43757248, -22.30799866, -20.47185135, -22.67837715,
         -19.94359779, -23.14790916, -21.03846169, -23.14024353, -23.94003487]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [756]; unstable size 756; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 262, 1, 756] with unstable size 261 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 756] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 756] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [261]; unstable size 261; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 261] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 261] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.01937962, 3.41801023, 1.25207269, 0.18682468, 1.56868887, 2.03725839,
         0.10003209, 1.46886063, 2.03972721]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0411 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 117, vnnlib ID: 117 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.62328815, -18.18186188, -18.71482468, -19.00971794, -17.99854279,
         -20.46262550, -20.13095474, -20.09570503, -10.99292850, -16.95243645]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [626]; unstable size 626; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 626] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 626] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 626] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 200] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.72617197, 5.95293808, 6.50314236, 6.90349865, 5.91612148, 8.26207638,
         7.94433355, 7.78404760, 4.84170914]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0454 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 118, vnnlib ID: 118 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.57911682, -18.01341438, -21.32861328, -22.58253288, -23.55420685,
         -22.23183250, -24.82959557, -22.38050079, -21.57038307, -21.39789391]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 173, 1, 445] with unstable size 172 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 445] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 445] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [172]; unstable size 172; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 172] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.14326191, 1.50191069, 2.99028373, 3.75916862, 2.42487860, 5.00067997,
         2.60955667, 1.96376324, 2.50974631]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0421 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 119, vnnlib ID: 119 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.73344231, -25.29462242, -19.50235748, -18.98530388, -19.31733131,
         -19.14581299, -19.42850494, -19.97113991, -22.87136459, -23.31713867]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [875]; unstable size 875; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 356, 1, 875] with unstable size 355 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 875] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 875] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [355]; unstable size 355; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 355] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 355] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.85499310,  3.47037888, -0.90604115, -0.95058942, -0.23341919,
         -0.53099990, -0.42522991,  1.47124863,  1.91838503]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.73344231, -25.29462242, -19.50235748, -18.98530388, -19.31733131,
         -19.14581299, -19.42850494, -19.97113991, -22.87136459, -23.31713867]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.02059174, -25.73818779, -19.58433533, -19.61014366, -19.58940506,
          -19.79586029, -19.83684921, -20.43855858, -23.32468796, -23.89825249],
         [-22.02059174, -25.73818779, -19.58433533, -19.61014366, -19.58940506,
          -19.79586029, -19.83684921, -20.43855858, -23.32468796, -23.89825249]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02580833, -0.02073860,  0.18571663,  0.22670555,  0.82841492]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.0121 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0580 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 120, vnnlib ID: 120 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-35.14804459, -45.50294495, -35.78569031, -36.05693054, -38.71368027,
         -36.82321548, -38.53306961, -37.81744385, -43.85329437, -44.71561813]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [867]; unstable size 867; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 166, 1, 867] with unstable size 165 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 867] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 867] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [165]; unstable size 165; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 165] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 165] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 9.32719994, -0.10789061,  0.04068589,  2.53268170,  0.74327826,
          2.51675272,  1.46775723,  8.13148308,  8.55004787]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-35.14804459, -45.50294495, -35.78569031, -36.05693054, -38.71368027,
         -36.82321548, -38.53306961, -37.81744385, -43.85329437, -44.71561813]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.98it/s]100%|██████████| 1/1 [00:00<00:00,  8.97it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-35.14495850, -45.40583420, -35.37460327, -35.73740768, -38.32579422,
          -36.45522690, -38.22663498, -37.45078278, -43.78541183, -44.53203201]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.22964478]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1140 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 33.40303039550781
alpha/beta optimization time: 1.2142410278320312
initial alpha-crown bounds: tensor([[ 9.34874344, -0.09103417,  0.06384563,  2.55859947,  0.76943469,
          2.53152680,  1.50653601,  8.14646530,  8.56891346]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.0910341739654541
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.62039279937744
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.62034583091736
Verifying property 1 with 1 instances.
##### Instance 120 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.09103417]], device='cuda:0') need to verify.
Model prediction is: tensor([-35.14804459, -45.50294495, -35.78569031, -36.05693054, -38.71368027,
        -36.82321548, -38.53306961, -37.81744385, -43.85329437, -44.71561813],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.09103417]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 867
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 159
Node /15 input 0: size torch.Size([100]) unstable 10
-----------------
# of unstable neurons: 1036
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001010894775390625
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0910344123840332
10 lb beta sum: 0.0, worst -0.09103608131408691
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    func 0.0527    
Accumulated time: func 0.0527    prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 5] 
split level 1: [/input-12, 50] 
split level 2: [/input-12, 42] 
split level 3: [/input-12, 59] 
split level 4: [/input-12, 10] 
split level 5: [/input-12, 31] 
split level 6: [/input-12, 90] 
split level 7: [/input-8, 217] 
split level 8: [/input-8, 225] 
split level 9: [/input-8, 226] 
split level 10: [/input-8, 1835] 
split level 11: [/input-8, 209] 
split level 12: [/input-8, 1188] 
split level 13: [/input-8, 233] 
split level 14: [/input-8, 1815] 
split level 15: [/input-8, 1029] 
split level 16: [/input-8, 234] 
split level 17: [/input-8, 1817] 
split level 18: [/input-8, 241] 
split level 19: [/input-8, 201] 
split level 20: [/input-8, 239] 
split level 21: [/input-8, 803] 
split level 22: [/input-8, 250] 
split level 23: [/input-8, 1371] 
split level 24: [/input, 3124] 
split level 25: [/input, 648] 
split level 26: [/input, 477] 
split level 27: [/input-8, 249] 
split level 28: [/input, 631] 
split level 29: [/input-8, 1834] 
split level 30: [/input-8, 428] 
split level 31: [/input-8, 1816] 
split level 32: [/input-8, 1826] 
split level 33: [/input-8, 247] 
split level 34: [/input, 3242] 
split level 35: [/input, 953] 
split level 36: [/input, 969] 
split level 37: [/input-8, 253] 
split level 38: [/input-8, 1847] 
split level 39: [/input-8, 902] 
split level 40: [/input-8, 635] 
split level 41: [/input-8, 508] 
split level 42: [/input, 3256] 
split level 43: [/input, 1002] 
split level 44: [/input, 917] 
split level 45: [/input-8, 901] 
split level 46: [/input-8, 634] 
split level 47: [/input, 933] 
split level 48: [/input-8, 60] 
split level 49: [/input, 3272] 
split level 50: [/input-8, 1808] 
split level 51: [/input-8, 1844] 
split level 52: [/input-8, 181] 
split level 53: [/input, 2907] 
split level 54: [/input-8, 202] 
split level 55: [/input, 3257] 
split level 56: [/input-8, 507] 
split level 57: [/input, 1004] 
split level 58: [/input-8, 586] 
split level 59: [/input-8, 576] 
split level 60: [/input, 3016] 
split level 61: [/input, 3052] 
split level 62: [/input-8, 246] 
split level 63: [/input, 3105] 
split level 64: [/input-8, 1622] 
split level 65: [/input-8, 192] 
split level 66: [/input-8, 235] 
split level 67: [/input, 3022] 
split level 68: [/input, 3676] 
split level 69: [/input, 2215] 
split level 70: [/input-8, 1379] 
split level 71: [/input, 919] 
split level 72: [/input, 3692] 
split level 73: [/input-8, 821] 
split level 74: [/input, 2600] 
split level 75: [/input, 3691] 
split level 76: [/input, 2263] 
split level 77: [/input, 2248] 
split level 78: [/input, 230] 
split level 79: [/input, 3006] 
split level 80: [/input-8, 1800] 
split level 81: [/input-8, 2004] 
split level 82: [/input, 2520] 
split level 83: [/input, 3496] 
split level 84: [/input-8, 911] 
split level 85: [/input-8, 452] 
split level 86: [/input-8, 193] 
split level 87: [/input, 2247] 
split level 88: [/input, 3379] 
split level 89: [/input, 3273] 
split level 90: [/input, 2199] 
split level 91: [/input, 2231] 
split level 92: [/input, 2844] 
split level 93: [/input, 3051] 
split level 94: [/input, 3287] 
split level 95: [/input, 229] 
split level 96: [/input, 2615] 
split level 97: [/input, 216] 
split level 98: [/input, 2519] 
split level 99: [/input, 3122] 
split level 100: [/input, 228] 
split level 101: [/input-8, 943] 
split level 102: [/input-8, 1833] 
split level 103: [/input, 2631] 
split level 104: [/input-8, 1843] 
split level 105: [/input, 2517] 
split level 106: [/input, 3268] 
split level 107: [/input, 614] 
split level 108: [/input, 2261] 
split level 109: [/input, 1336] 
split level 110: [/input, 2535] 
split level 111: [/input, 301] 
split level 112: [/input-8, 1596] 
split level 113: [/input, 199] 
split level 114: [/input, 222] 
split level 115: [/input, 699] 
split level 116: [/input-8, 205] 
split level 117: [/input, 227] 
split level 118: [/input, 2486] 
split level 119: [/input, 200] 
split level 120: [/input, 231] 
split level 121: [/input, 2616] 
split level 122: [/input, 214] 
split level 123: [/input-8, 1825] 
split level 124: [/input, 212] 
split level 125: [/input-8, 190] 
split level 126: [/input, 3300] 
split level 127: [/input, 2471] 
split level 128: [/input, 2244] 
split level 129: [/input-8, 506] 
split level 130: [/input, 213] 
split level 131: [/input, 2198] 
split level 132: [/input, 2265] 
split level 133: [/input, 232] 
split level 134: [/input, 215] 
split level 135: [/input, 2230] 
split level 136: [/input, 2502] 
split level 137: [/input, 1963] 
split level 138: [/input, 653] 
split level 139: [/input, 2213] 
split level 140: [/input, 2246] 
split level 141: [/input, 206] 
split level 142: [/input, 2232] 
split level 143: [/input, 2843] 
split level 144: [/input, 3121] 
split level 145: [/input, 3579] 
split level 146: [/input, 2534] 
split level 147: [/input, 715] 
split level 148: [/input, 2280] 
split level 149: [/input, 2277] 
split level 150: [/input, 2846] 
split level 151: [/input-8, 951] 
split level 152: [/input, 177] 
split level 153: [/input, 1964] 
split level 154: [/input-8, 1848] 
split level 155: [/input, 3301] 
split level 156: [/input, 2542] 
split level 157: [/input, 843] 
split level 158: [/input, 331] 
split level 159: [/input, 2845] 
split level 160: [/input, 217] 
split level 161: [/input, 3580] 
split level 162: [/input, 1979] 
split level 163: [/input, 198] 
split level 164: [/input, 2228] 
split level 165: [/input, 193] 
split level 166: [/input, 3675] 
split level 167: [/input, 3578] 
split level 168: [/input, 226] 
split level 169: [/input, 1833] 
split level 170: [/input, 196] 
split level 171: [/input, 2501] 
split level 172: [/input, 3380] 
split level 173: [/input, 238] 
split level 174: [/input, 210] 
split level 175: [/input, 2485] 
split level 176: [/input, 184] 
split level 177: [/input, 183] 
split level 178: [/input, 1948] 
split level 179: [/input, 46] 
split level 180: [/input, 1811] 
split level 181: [/input, 197] 
split level 182: [/input, 3708] 
split level 183: [/input, 2521] 
split level 184: [/input, 1862] 
split level 185: [/input, 3383] 
split level 186: [/input, 683] 
split level 187: [/input, 195] 
split level 188: [/input, 2455] 
split level 189: [/input, 3299] 
split level 190: [/input, 27] 
split level 191: [/input, 537] 
split level 192: [/input, 194] 
split level 193: [/input, 598] 
split level 194: [/input, 3581] 
split level 195: [/input, 28] 
split level 196: [/input, 29] 
split level 197: [/input, 2059] 
split level 198: [/input, 3577] 
split level 199: [/input, 536] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09093952178955078
10 lb beta sum: 0.0, worst -0.0909414291381836
Time: prepare 0.0114    bound 0.0974    transfer 0.0027    finalize 0.0029    func 0.1169    
Accumulated time: func 0.1696    prepare 0.0211    bound 0.1496    transfer 0.0028    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.13613749) min lb tensor(-0.09093809)
Number of Verified Splits: 4 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.010456323623657227 
BICCOS Cumulative time: 0.010456323623657227
Preprocessing time: 0.009959936141967773 Inference time: 0.00018310546875 Add cuts time: 8.082389831542969e-05 Cut analysis time: 0.00023245811462402344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08741 (1), -0.08730 (1), -0.08716 (1), -0.08697 (1), -0.08685 (1), -0.08680 (1), -0.08671 (1), -0.08632 (1), -0.08619 (1), -0.08608 (1), -0.08578 (1), -0.08554 (1), -0.08544 (1), -0.08542 (1), -0.08529 (1), -0.08498 (1), -0.08465 (1), -0.08456 (1), -0.08454 (1), -0.08446 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5112    set_bounds 0.0090    solve 0.1170    add 0.0696    
Accumulated time: pickout 0.0003    decision 0.5112    set_bounds 0.0090    solve 0.1170    add 0.0696    
Current (lb-rhs): -0.08740639686584473
50 domains visited
Cumulative time: 0.7754254341125488

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 50] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] 
split level 1: [/input-12, 42] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 2: [/input-12, 59] [/input-12, 42] [/input-12, 42] [/input-12, 59] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 3: [/input-12, 31] [/input-12, 31] [/input-12, 59] [/input-12, 31] [/input-12, 31] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07099604606628418
10 lb beta sum: 0.4434385597705841, worst -0.003886103630065918

all verified at 13th iter
Time: prepare 0.0077    bound 0.0818    transfer 0.0011    finalize 0.0025    func 0.0957    
Accumulated time: func 0.2653    prepare 0.0291    bound 0.2314    transfer 0.0039    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.28337514) min lb tensor(0.00103259)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03410196304321289 
BICCOS Cumulative time: 0.04455828666687012
Preprocessing time: 0.011793851852416992 Inference time: 0.014050960540771484 Add cuts time: 0.008072137832641602 Cut analysis time: 0.0001850128173828125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0198    set_bounds 0.0118    solve 0.0958    add 0.0151    
Accumulated time: pickout 0.0014    decision 0.5310    set_bounds 0.0208    solve 0.2128    add 0.0847    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59,  5]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.88641056e-11, 2.36450240e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59,  5]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.88641056e-11, 5.22363633e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59,  5]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.88641056e-11, 2.22712561e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59,  5]), tensor([1., 1.]), tensor([0, 0]), tensor([2.88641056e-11, 1.13030896e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0033745765686035156

all verified at 1th iter
Time: prepare 0.0003    bound 0.0097    transfer 0.0001    finalize 0.0001    func 0.0103    
Accumulated time: func 0.2756    prepare 0.0294    bound 0.2410    transfer 0.0041    finalize 0.0056    
After pruning, left:  0

Back to Regular BaB


Properties batch 2, size 1
Remaining timeout: 197.4628028869629
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 197.4627285003662
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.46270394325256
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.46268320083618
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.46266341209412
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.4626441001892
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.46262502670288
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.5374 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 121, vnnlib ID: 121 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.40458870, -23.24298668, -27.73333549, -27.90799141, -27.40376663,
         -28.05864906, -28.91640854, -27.54826736, -27.30009651, -25.52873611]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [684]; unstable size 684; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 286, 1, 684] with unstable size 285 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 684] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 684] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [285]; unstable size 285; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 285] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 285] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.35218525, 2.28642750, 2.51820278, 1.68908215, 2.53085136, 3.30504608,
         2.17191410, 2.28330278, 1.35116124]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0626 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 122, vnnlib ID: 122 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.14629936, -20.71539307, -24.46714020, -24.97179604, -24.83234215,
         -25.31670189, -27.17220497, -25.32540894, -20.97597122, -23.65787697]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [595]; unstable size 595; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 206, 1, 595] with unstable size 205 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 595] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 595] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [205]; unstable size 205; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 205] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 205] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.96349621,  1.88203382,  2.57148743,  2.24078083,  2.77335310,
          4.53415442,  2.59828901, -0.94698846,  1.90783048]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.14629936, -20.71539307, -24.46714020, -24.97179604, -24.83234215,
         -25.31670189, -27.17220497, -25.32540894, -20.97597122, -23.65787697]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.88486290, -20.97311783, -24.25113678, -24.81391716, -24.68358803,
          -25.18217659, -27.03807068, -25.29666138, -20.56512070, -23.80919075]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.40799713]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0598 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 123, vnnlib ID: 123 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.12747383, -35.12327194, -32.50504303, -34.70817566, -34.61371613,
         -34.77191544, -33.63956833, -36.66131973, -30.60513496, -36.99544525]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [448]; unstable size 448; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 264, 1, 448] with unstable size 263 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 448] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 448] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [263]; unstable size 263; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 263] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 263] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.72115159,  3.32613206,  0.34109974,  2.45504808,  2.08227730,
          2.35139227,  1.41229224,  3.91198683,  5.09997892]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-30.12747383, -35.12327194, -32.50504303, -34.70817566, -34.61371613,
         -34.77191544, -33.63956833, -36.66131973, -30.60513496, -36.99544525]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-30.12747383, -35.12327194, -32.50504303, -34.70817566, -34.61371613,
          -34.77191544, -33.63956833, -36.66131973, -30.60513496, -36.99544525]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.47766113]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-3.53968143e-01, -6.82538673e-02, -3.65078375e-02,  ...,
             1.11112073e-02, -2.11111009e-01, -5.23808524e-02],
           [-1.15872920e-01, -1.47618949e-01, -1.63491964e-01,  ...,
            -5.23808524e-02, -3.69841158e-01, -1.63491964e-01],
           [-2.42857039e-01, -1.15872920e-01, -2.26984024e-01,  ...,
             1.22222304e-01,  2.49206424e-01, -2.42857039e-01],
           ...,
           [ 1.22222304e-01,  4.28572372e-02,  2.65079439e-01,  ...,
            -7.03174591e-01, -2.11111009e-01, -2.26984024e-01],
           [ 1.53968334e-01,  3.76190543e-01, -2.26984024e-01,  ...,
            -4.17460203e-01, -4.80952382e-01, -2.26984024e-01],
           [ 3.44444513e-01,  5.19047678e-01,  3.92063558e-01,  ...,
            -3.65078375e-02, -2.74603069e-01, -2.11111009e-01]],

          [[ 1.61031820e-02,  2.25442946e-01,  2.73752123e-01,  ...,
             4.02576596e-01,  8.05154145e-02,  2.89855182e-01],
           [ 2.41546005e-01,  1.77133769e-01,  1.93236828e-01,  ...,
             3.86473536e-01, -3.22059989e-02,  1.44927651e-01],
           [ 1.12721533e-01,  2.57649064e-01,  1.61030710e-01,  ...,
             4.99194920e-01,  8.21256101e-01,  1.77133769e-01],
           ...,
           [ 7.56843865e-01,  5.79710245e-01,  6.92431629e-01,  ...,
            -3.86473298e-01,  1.61030710e-01,  2.25442946e-01],
           [ 5.95813274e-01,  7.72946954e-01,  2.09339887e-01,  ...,
             8.05154145e-02, -1.77133530e-01,  1.44927651e-01],
           [ 6.28019392e-01,  8.21256101e-01,  8.37359190e-01,  ...,
             5.31401038e-01,  1.22934580e-07,  9.66184735e-02]],

          [[ 4.51274544e-01,  7.36132085e-01,  7.36132085e-01,  ...,
             8.56072128e-01,  5.56222081e-01,  7.51124620e-01],
           [ 7.21139610e-01,  7.21139610e-01,  6.31184578e-01,  ...,
             7.96102107e-01,  3.46327007e-01,  6.01199567e-01],
           [ 5.26237071e-01,  6.76162124e-01,  6.61169589e-01,  ...,
             9.16042149e-01,  9.76012170e-01,  5.71214557e-01],
           ...,
           [ 1.05097473e+00,  8.86057138e-01,  1.09595215e+00,  ...,
             1.66416958e-01,  5.86207092e-01,  6.16192102e-01],
           [ 1.03598225e+00,  1.08095968e+00,  5.86207092e-01,  ...,
             4.96252000e-01,  3.46327007e-01,  6.31184578e-01],
           [ 1.08095968e+00,  1.15592217e+00,  1.09595215e+00,  ...,
             8.26087117e-01,  5.26237071e-01,  6.61169589e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0528 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 124, vnnlib ID: 124 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.54057121, -21.40389442, -20.55339050, -20.58682060, -20.08682251,
         -21.26310730, -20.37835312, -20.33173752, -21.91990280, -21.46942329]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [799]; unstable size 799; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 326, 1, 799] with unstable size 325 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 799] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 799] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [325]; unstable size 325; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 325] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 325] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.38908625, -1.18870044, -2.95449829, -2.60739803, -3.34873295,
         -1.96987128, -3.07361555, -3.06156135, -1.16480827]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.54057121, -21.40389442, -20.55339050, -20.58682060, -20.08682251,
         -21.26310730, -20.37835312, -20.33173752, -21.91990280, -21.46942329]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.54056931, -21.40389061, -20.55338860, -20.58681679, -20.08682060,
          -21.26310539, -20.37835312, -20.33173943, -21.91990280, -21.46942520],
         [-21.54056931, -21.40389061, -20.55338860, -20.58681679, -20.08682060,
          -21.26310539, -20.37835312, -20.33173943, -21.91990280, -21.46942520]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.07114410, -0.06553459, -0.91603661, -0.88260841, -1.38260460,
          -0.20631981, -1.09107208, -1.13768578,  0.45047760]]],
       device='cuda:0')
number of violation:  7
clean attack image tensor([[[[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         ...,


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0644 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 125, vnnlib ID: 125 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.34185982, -18.34316826, -19.90431023, -19.60602570, -20.92833138,
         -19.82821465, -22.19347191, -21.69088936, -18.03870010, -18.59241867]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [703]; unstable size 703; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 222, 1, 703] with unstable size 221 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 703] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 703] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [221]; unstable size 221; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 221] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 221] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.52273774, -0.96111465, -0.21341372, -0.24194908,  0.79662275,
         -0.12263918,  1.94755030,  1.67940426, -2.02313328]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.34185982, -18.34316826, -19.90431023, -19.60602570, -20.92833138,
         -19.82821465, -22.19347191, -21.69088936, -18.03870010, -18.59241867]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.34185982, -18.34316635, -19.90431023, -19.60602379, -20.92833138,
          -19.82821274, -22.19347000, -21.69088745, -18.03870010, -18.59241676],
         [-19.34185982, -18.34316635, -19.90431023, -19.60602379, -20.92833138,
          -19.82821274, -22.19347000, -21.69088745, -18.03870010, -18.59241676]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.74944305, -0.24925041,  1.31189346,  1.01360703,  1.23579597,
          -0.55371666]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0463 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 126, vnnlib ID: 126 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.60500145, -24.89141464, -19.17918777, -20.05367851, -18.86228371,
         -19.76714134, -19.96246719, -19.42761040, -24.32711601, -22.82327843]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [640]; unstable size 640; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 244, 1, 640] with unstable size 243 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 640] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 640] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [243]; unstable size 243; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 243] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 243] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.29259634,  3.78634930, -0.83907115,  0.12916964, -0.20247686,
         -0.06445067, -0.28860736,  3.43386006,  1.86539841]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.60500145, -24.89141464, -19.17918777, -20.05367851, -18.86228371,
         -19.76714134, -19.96246719, -19.42761040, -24.32711601, -22.82327843]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.03265953, -25.29692650, -19.45195961, -20.54336929, -19.62042999,
          -20.25281143, -20.38715744, -20.24810791, -24.68657875, -23.31516266],
         [-23.03265953, -25.29692650, -19.45195961, -20.54336929, -19.62042999,
          -20.25281143, -20.38715744, -20.24810791, -24.68657875, -23.31516266]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16847038,  0.63238144,  0.76672745,  0.62767792]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0060 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0681 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 127, vnnlib ID: 127 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
         -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [953]; unstable size 953; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 256, 1, 953] with unstable size 255 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 953] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 953] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [255]; unstable size 255; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 255] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 255] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.24769056,  1.62967801, -0.30106139, -0.63823366, -0.46131396,
          0.13329822,  1.71760356,  0.29797357,  0.64501786]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
         -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.89it/s]100%|██████████| 1/1 [00:00<00:00,  8.88it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.69696999, -28.02658463, -25.77697563, -25.08135605, -25.68766022,
          -26.01312256, -27.60112953, -26.61686516, -24.82721519, -26.62337494],
         [-25.69696999, -28.02658463, -25.77697563, -25.08135605, -25.68766022,
          -26.01312256, -27.60112953, -26.61686516, -24.82721519, -26.62337494]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.86975479, 0.94976044, 0.25414085, 0.86044502]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1153 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 3.304441452026367
alpha/beta optimization time: 1.2104110717773438
initial alpha-crown bounds: tensor([[-0.19642925,  1.68688869, -0.24070263, -0.57431978, -0.39791727,
          0.20313370,  1.77232885,  0.36443257,  0.68702650]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 4 ; Worst class: (+ rhs) -0.5743197798728943
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.62449884414673
Verifying property 0 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.19642925]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
        -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.19642925]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 953
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 248
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1222
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.918212890625e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19642651081085205
10 lb beta sum: 0.0, worst -0.19642871618270874
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0528    transfer 0.0001    finalize 0.0001    func 0.0533    
Accumulated time: func 0.0533    prepare 0.0002    bound 0.0528    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] 
split level 1: [/input-12, 61] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 32] 
split level 4: [/input-12, 79] 
split level 5: [/input-12, 4] 
split level 6: [/input-8, 913] 
split level 7: [/input-12, 2] 
split level 8: [/input-8, 1697] 
split level 9: [/input-8, 1764] 
split level 10: [/input-12, 29] 
split level 11: [/input-12, 8] 
split level 12: [/input-8, 1724] 
split level 13: [/input-12, 71] 
split level 14: [/input-8, 1052] 
split level 15: [/input-8, 1715] 
split level 16: [/input-8, 1690] 
split level 17: [/input-8, 1943] 
split level 18: [/input-8, 1698] 
split level 19: [/input-8, 1707] 
split level 20: [/input-8, 1762] 
split level 21: [/input-8, 1935] 
split level 22: [/input-8, 1716] 
split level 23: [/input-8, 1765] 
split level 24: [/input-8, 371] 
split level 25: [/input, 2679] 
split level 26: [/input-8, 1953] 
split level 27: [/input-12, 35] 
split level 28: [/input-8, 932] 
split level 29: [/input-8, 1626] 
split level 30: [/input-8, 179] 
split level 31: [/input-12, 58] 
split level 32: [/input-8, 1948] 
split level 33: [/input-8, 625] 
split level 34: [/input, 2455] 
split level 35: [/input-8, 1053] 
split level 36: [/input-8, 439] 
split level 37: [/input-8, 1756] 
split level 38: [/input-8, 1980] 
split level 39: [/input-8, 1634] 
split level 40: [/input-8, 1947] 
split level 41: [/input, 920] 
split level 42: [/input, 921] 
split level 43: [/input-8, 1034] 
split level 44: [/input, 2388] 
split level 45: [/input, 936] 
split level 46: [/input-8, 1310] 
split level 47: [/input-8, 933] 
split level 48: [/input, 2456] 
split level 49: [/input, 3016] 
split level 50: [/input-8, 2034] 
split level 51: [/input-8, 610] 
split level 52: [/input, 904] 
split level 53: [/input-8, 302] 
split level 54: [/input-8, 939] 
split level 55: [/input, 938] 
split level 56: [/input, 2439] 
split level 57: [/input, 2457] 
split level 58: [/input, 2474] 
split level 59: [/input, 2485] 
split level 60: [/input-8, 1084] 
split level 61: [/input, 2195] 
split level 62: [/input-8, 1618] 
split level 63: [/input, 2167] 
split level 64: [/input, 923] 
split level 65: [/input-8, 1520] 
split level 66: [/input, 3433] 
split level 67: [/input, 2202] 
split level 68: [/input-8, 1043] 
split level 69: [/input, 2440] 
split level 70: [/input, 2473] 
split level 71: [/input, 2371] 
split level 72: [/input, 2180] 
split level 73: [/input, 393] 
split level 74: [/input, 2230] 
split level 75: [/input, 135] 
split level 76: [/input, 2535] 
split level 77: [/input, 907] 
split level 78: [/input-8, 377] 
split level 79: [/input-8, 1757] 
split level 80: [/input, 2203] 
split level 81: [/input, 905] 
split level 82: [/input, 2406] 
split level 83: [/input, 1941] 
split level 84: [/input, 903] 
split level 85: [/input, 919] 
split level 86: [/input, 889] 
split level 87: [/input-8, 361] 
split level 88: [/input, 2148] 
split level 89: [/input, 3193] 
split level 90: [/input, 2471] 
split level 91: [/input, 2217] 
split level 92: [/input-8, 180] 
split level 93: [/input-8, 186] 
split level 94: [/input, 1350] 
split level 95: [/input, 2201] 
split level 96: [/input-8, 416] 
split level 97: [/input, 2231] 
split level 98: [/input, 3179] 
split level 99: [/input, 2168] 
split level 100: [/input, 3420] 
split level 101: [/input-8, 241] 
split level 102: [/input, 2441] 
split level 103: [/input-8, 1598] 
split level 104: [/input, 2472] 
split level 105: [/input, 2883] 
split level 106: [/input, 2475] 
split level 107: [/input, 3390] 
split level 108: [/input-8, 1523] 
split level 109: [/input-8, 604] 
split level 110: [/input, 3018] 
split level 111: [/input, 2185] 
split level 112: [/input, 2218] 
split level 113: [/input, 117] 
split level 114: [/input, 2897] 
split level 115: [/input, 2141] 
split level 116: [/input, 3466] 
split level 117: [/input, 1470] 
split level 118: [/input, 2419] 
split level 119: [/input, 2125] 
split level 120: [/input, 2170] 
split level 121: [/input, 2232] 
split level 122: [/input-8, 1227] 
split level 123: [/input, 3000] 
split level 124: [/input-8, 1780] 
split level 125: [/input-8, 446] 
split level 126: [/input, 404] 
split level 127: [/input, 2680] 
split level 128: [/input, 2169] 
split level 129: [/input, 2196] 
split level 130: [/input, 952] 
split level 131: [/input, 2697] 
split level 132: [/input-8, 934] 
split level 133: [/input, 2220] 
split level 134: [/input, 3180] 
split level 135: [/input, 85] 
split level 136: [/input-8, 1369] 
split level 137: [/input-8, 422] 
split level 138: [/input, 2154] 
split level 139: [/input, 420] 
split level 140: [/input, 2184] 
split level 141: [/input, 3017] 
split level 142: [/input, 2153] 
split level 143: [/input, 759] 
split level 144: [/input-8, 1377] 
split level 145: [/input, 435] 
split level 146: [/input-8, 1149] 
split level 147: [/input, 891] 
split level 148: [/input-8, 409] 
split level 149: [/input, 2468] 
split level 150: [/input, 2476] 
split level 151: [/input, 2205] 
split level 152: [/input, 2186] 
split level 153: [/input, 925] 
split level 154: [/input, 3192] 
split level 155: [/input-8, 1265] 
split level 156: [/input, 3181] 
split level 157: [/input, 2204] 
split level 158: [/input, 2426] 
split level 159: [/input, 3207] 
split level 160: [/input, 1349] 
split level 161: [/input, 712] 
split level 162: [/input, 474] 
split level 163: [/input, 2489] 
split level 164: [/input, 69] 
split level 165: [/input, 2219] 
split level 166: [/input, 2694] 
split level 167: [/input, 2390] 
split level 168: [/input, 2156] 
split level 169: [/input, 506] 
split level 170: [/input, 2155] 
split level 171: [/input, 3422] 
split level 172: [/input, 2433] 
split level 173: [/input, 3191] 
split level 174: [/input, 2393] 
split level 175: [/input, 2682] 
split level 176: [/input, 2442] 
split level 177: [/input, 2467] 
split level 178: [/input, 2488] 
split level 179: [/input, 2412] 
split level 180: [/input, 3468] 
split level 181: [/input-8, 212] 
split level 182: [/input, 2937] 
split level 183: [/input-8, 235] 
split level 184: [/input, 2461] 
split level 185: [/input-8, 959] 
split level 186: [/input, 714] 
split level 187: [/input, 2696] 
split level 188: [/input, 138] 
split level 189: [/input, 758] 
split level 190: [/input, 2211] 
split level 191: [/input, 713] 
split level 192: [/input, 3389] 
split level 193: [/input-8, 1317] 
split level 194: [/input, 2206] 
split level 195: [/input, 730] 
split level 196: [/input, 165] 
split level 197: [/input, 909] 
split level 198: [/input, 2416] 
split level 199: [/input, 3209] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19640350341796875
10 lb beta sum: 0.0, worst -0.19640564918518066
Time: prepare 0.0114    bound 0.0982    transfer 0.0028    finalize 0.0031    func 0.1180    
Accumulated time: func 0.1713    prepare 0.0213    bound 0.1510    transfer 0.0029    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.14749026) min lb tensor(-0.19640350)
Number of Verified Splits: 4 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.01080942153930664 
BICCOS Cumulative time: 0.01080942153930664
Preprocessing time: 0.009976625442504883 Inference time: 0.0001823902130126953 Add cuts time: 7.2479248046875e-05 Cut analysis time: 0.0005779266357421875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18764 (1), -0.18735 (1), -0.18734 (1), -0.18725 (1), -0.18632 (1), -0.18625 (1), -0.18619 (1), -0.18599 (1), -0.18594 (1), -0.18585 (1), -0.18516 (1), -0.18475 (1), -0.18458 (1), -0.18408 (1), -0.18330 (1), -0.18134 (1), -0.18113 (1), -0.18051 (1), -0.18039 (1), -0.17943 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5145    set_bounds 0.0092    solve 0.1180    add 0.0701    
Accumulated time: pickout 0.0003    decision 0.5145    set_bounds 0.0092    solve 0.1180    add 0.0701    
Current (lb-rhs): -0.1876354217529297
50 domains visited
Cumulative time: 0.7810230255126953

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 1: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 2: [/input-12, 32] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 32] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 2] [/input-12, 2] [/input-12, 32] [/input-12, 32] [/input-12, 2] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.156610906124115
10 lb beta sum: 0.5408634543418884, worst -0.10000616312026978
Time: prepare 0.0074    bound 0.1173    transfer 0.0011    finalize 0.0024    func 0.1308    
Accumulated time: func 0.3020    prepare 0.0289    bound 0.2683    transfer 0.0040    finalize 0.0056    
all_split False
======================Cut inference begins======================
max lb tensor(0.31405449) min lb tensor(-0.09976563)
Number of Verified Splits: 268 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.027271032333374023 
BICCOS Cumulative time: 0.038080453872680664
Preprocessing time: 0.01175689697265625 Inference time: 0.010076761245727539 Add cuts time: 0.0052547454833984375 Cut analysis time: 0.00018262863159179688
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0124    solve 0.1309    add 0.0146    
Accumulated time: pickout 0.0013    decision 0.5339    set_bounds 0.0216    solve 0.2489    add 0.0847    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 34]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.82951758e+16, 3.59128058e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 34]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.82951758e+16, 9.46079940e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 34]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.82951758e+16, 3.35260868e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 34]), tensor([1., 1.]), tensor([0, 0]), tensor([2.82951758e+16, 9.94946659e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0635451078414917

all verified at 2th iter
Time: prepare 0.0003    bound 0.0146    transfer 0.0001    finalize 0.0001    func 0.0152    
Accumulated time: func 0.3172    prepare 0.0292    bound 0.2829    transfer 0.0041    finalize 0.0058    
After pruning, left:  0

Back to Regular BaB


Properties batch 1, size 1
Remaining timeout: 197.44562101364136
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 197.44554543495178
Verifying property 2 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.24070263]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
        -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.24070263]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 953
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 248
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1222
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.465217590332031e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2407008409500122
10 lb beta sum: 0.0, worst -0.24070870876312256
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    func 0.0530    
Accumulated time: func 0.0530    prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] 
split level 1: [/input-12, 8] 
split level 2: [/input-12, 42] 
split level 3: [/input-12, 46] 
split level 4: [/input-12, 61] 
split level 5: [/input-12, 12] 
split level 6: [/input-12, 32] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 79] 
split level 9: [/input-12, 34] 
split level 10: [/input-12, 90] 
split level 11: [/input-8, 932] 
split level 12: [/input-8, 1697] 
split level 13: [/input-12, 58] 
split level 14: [/input-8, 939] 
split level 15: [/input-8, 913] 
split level 16: [/input-8, 1953] 
split level 17: [/input-8, 1716] 
split level 18: [/input-8, 354] 
split level 19: [/input-8, 1698] 
split level 20: [/input-8, 1724] 
split level 21: [/input-8, 1052] 
split level 22: [/input-8, 1707] 
split level 23: [/input-8, 1764] 
split level 24: [/input-8, 1053] 
split level 25: [/input-8, 933] 
split level 26: [/input-8, 1939] 
split level 27: [/input-8, 937] 
split level 28: [/input-8, 1948] 
split level 29: [/input-8, 797] 
split level 30: [/input-8, 1634] 
split level 31: [/input-8, 1626] 
split level 32: [/input-8, 1947] 
split level 33: [/input-8, 946] 
split level 34: [/input-8, 1762] 
split level 35: [/input, 952] 
split level 36: [/input, 2231] 
split level 37: [/input, 2485] 
split level 38: [/input-8, 1690] 
split level 39: [/input, 936] 
split level 40: [/input, 938] 
split level 41: [/input, 2474] 
split level 42: [/input, 954] 
split level 43: [/input-8, 1206] 
split level 44: [/input-8, 934] 
split level 45: [/input, 966] 
split level 46: [/input, 2455] 
split level 47: [/input, 3016] 
split level 48: [/input, 2248] 
split level 49: [/input, 2230] 
split level 50: [/input, 921] 
split level 51: [/input, 506] 
split level 52: [/input-8, 49] 
split level 53: [/input-8, 232] 
split level 54: [/input-8, 241] 
split level 55: [/input, 2473] 
split level 56: [/input, 2488] 
split level 57: [/input-8, 1310] 
split level 58: [/input, 2202] 
split level 59: [/input, 2459] 
split level 60: [/input, 2232] 
split level 61: [/input, 923] 
split level 62: [/input-8, 186] 
split level 63: [/input, 2456] 
split level 64: [/input, 2535] 
split level 65: [/input, 2471] 
split level 66: [/input, 2472] 
split level 67: [/input, 2490] 
split level 68: [/input, 920] 
split level 69: [/input-8, 1523] 
split level 70: [/input, 2489] 
split level 71: [/input, 1941] 
split level 72: [/input, 2180] 
split level 73: [/input-8, 1765] 
split level 74: [/input, 3509] 
split level 75: [/input-8, 179] 
split level 76: [/input, 2218] 
split level 77: [/input-8, 1598] 
split level 78: [/input-8, 1780] 
split level 79: [/input, 393] 
split level 80: [/input, 2201] 
split level 81: [/input, 905] 
split level 82: [/input, 3516] 
split level 83: [/input, 904] 
split level 84: [/input, 2217] 
split level 85: [/input, 2203] 
split level 86: [/input-8, 610] 
split level 87: [/input, 2457] 
split level 88: [/input, 2219] 
split level 89: [/input, 2167] 
split level 90: [/input, 2439] 
split level 91: [/input, 955] 
split level 92: [/input, 2475] 
split level 93: [/input-8, 57] 
split level 94: [/input, 907] 
split level 95: [/input, 2388] 
split level 96: [/input, 2440] 
split level 97: [/input-8, 1920] 
split level 98: [/input, 2184] 
split level 99: [/input, 2220] 
split level 100: [/input, 2371] 
split level 101: [/input, 3533] 
split level 102: [/input-8, 897] 
split level 103: [/input, 2186] 
split level 104: [/input-8, 1807] 
split level 105: [/input-8, 625] 
split level 106: [/input, 2185] 
split level 107: [/input, 2406] 
split level 108: [/input, 2188] 
split level 109: [/input-8, 439] 
split level 110: [/input-8, 2001] 
split level 111: [/input, 2249] 
split level 112: [/input, 949] 
split level 113: [/input, 2115] 
split level 114: [/input, 971] 
split level 115: [/input, 2476] 
split level 116: [/input, 3000] 
split level 117: [/input-8, 959] 
split level 118: [/input, 404] 
split level 119: [/input, 2491] 
split level 120: [/input, 2169] 
split level 121: [/input-8, 56] 
split level 122: [/input, 2441] 
split level 123: [/input-8, 240] 
split level 124: [/input, 474] 
split level 125: [/input, 797] 
split level 126: [/input, 2505] 
split level 127: [/input, 1978] 
split level 128: [/input, 2236] 
split level 129: [/input, 946] 
split level 130: [/input, 2168] 
split level 131: [/input, 2204] 
split level 132: [/input-8, 209] 
split level 133: [/input-8, 337] 
split level 134: [/input, 1979] 
split level 135: [/input, 3466] 
split level 136: [/input, 2254] 
split level 137: [/input-8, 1084] 
split level 138: [/input, 889] 
split level 139: [/input-8, 1943] 
split level 140: [/input, 2542] 
split level 141: [/input, 1980] 
split level 142: [/input, 2762] 
split level 143: [/input, 3017] 
split level 144: [/input, 3518] 
split level 145: [/input-8, 217] 
split level 146: [/input, 2253] 
split level 147: [/input, 2148] 
split level 148: [/input-8, 940] 
split level 149: [/input, 1015] 
split level 150: [/input, 963] 
split level 151: [/input-8, 1980] 
split level 152: [/input, 2484] 
split level 153: [/input, 420] 
split level 154: [/input, 435] 
split level 155: [/input, 501] 
split level 156: [/input, 1954] 
split level 157: [/input, 1981] 
split level 158: [/input, 3517] 
split level 159: [/input, 2419] 
split level 160: [/input, 2273] 
split level 161: [/input, 730] 
split level 162: [/input, 2250] 
split level 163: [/input, 2509] 
split level 164: [/input, 1013] 
split level 165: [/input, 2251] 
split level 166: [/input, 2196] 
split level 167: [/input-8, 196] 
split level 168: [/input, 2764] 
split level 169: [/input, 2499] 
split level 170: [/input, 2078] 
split level 171: [/input-8, 41] 
split level 172: [/input-8, 242] 
split level 173: [/input, 3411] 
split level 174: [/input, 2284] 
split level 175: [/input, 1965] 
split level 176: [/input, 2468] 
split level 177: [/input, 714] 
split level 178: [/input, 2412] 
split level 179: [/input, 2189] 
split level 180: [/input, 2156] 
split level 181: [/input, 925] 
split level 182: [/input, 713] 
split level 183: [/input, 2332] 
split level 184: [/input, 2170] 
split level 185: [/input, 2270] 
split level 186: [/input, 2524] 
split level 187: [/input, 2461] 
split level 188: [/input, 3582] 
split level 189: [/input, 2442] 
split level 190: [/input, 2444] 
split level 191: [/input, 3468] 
split level 192: [/input, 2157] 
split level 193: [/input-8, 204] 
split level 194: [/input, 891] 
split level 195: [/input, 2349] 
split level 196: [/input, 699] 
split level 197: [/input, 2269] 
split level 198: [/input, 2268] 
split level 199: [/input, 2390] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24052202701568604
10 lb beta sum: 0.0, worst -0.24045348167419434
Time: prepare 0.0115    bound 0.0985    transfer 0.0011    finalize 0.0026    func 0.1163    
Accumulated time: func 0.1692    prepare 0.0213    bound 0.1510    transfer 0.0012    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.28610140) min lb tensor(-0.24044931)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.0108795166015625 
BICCOS Cumulative time: 0.0108795166015625
Preprocessing time: 0.009929656982421875 Inference time: 0.00023794174194335938 Add cuts time: 0.00010848045349121094 Cut analysis time: 0.0006034374237060547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23033 (1), -0.23025 (1), -0.22943 (1), -0.22935 (1), -0.22913 (1), -0.22873 (1), -0.22870 (1), -0.22858 (1), -0.22843 (1), -0.22783 (1), -0.22774 (1), -0.22768 (1), -0.22656 (1), -0.22510 (1), -0.22455 (1), -0.22430 (1), -0.22407 (1), -0.22402 (1), -0.22296 (1), -0.22046 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5180    set_bounds 0.0089    solve 0.1163    add 0.0666    
Accumulated time: pickout 0.0003    decision 0.5180    set_bounds 0.0089    solve 0.1163    add 0.0666    
Current (lb-rhs): -0.23032760620117188
50 domains visited
Cumulative time: 0.7794861793518066

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 8] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 46] [/input-12, 8] [/input-12, 46] [/input-12, 8] 
split level 2: [/input-12, 46] [/input-12, 12] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 32] [/input-12, 12] [/input-12, 46] [/input-12, 12] [/input-12, 46] 
split level 3: [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 32] [/input-12, 12] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17170977592468262
10 lb beta sum: 0.810334324836731, worst -0.048759400844573975
Time: prepare 0.0074    bound 0.1176    transfer 0.0012    finalize 0.0026    func 0.1314    
Accumulated time: func 0.3007    prepare 0.0290    bound 0.2686    transfer 0.0024    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.30051607) min lb tensor(-0.04845412)
Number of Verified Splits: 326 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.031912803649902344 
BICCOS Cumulative time: 0.042792320251464844
Preprocessing time: 0.012039661407470703 Inference time: 0.012739181518554688 Add cuts time: 0.006927490234375 Cut analysis time: 0.00020647048950195312
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0196    set_bounds 0.0124    solve 0.1315    add 0.0151    
Accumulated time: pickout 0.0014    decision 0.5376    set_bounds 0.0213    solve 0.2479    add 0.0818    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 29]), tensor([-1., -1.]), tensor([0, 0]), tensor([9.95117944e-08, 1.00049600e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 29]), tensor([-1.,  1.]), tensor([0, 0]), tensor([9.95117944e-08, 2.65644848e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 29]), tensor([ 1., -1.]), tensor([0, 0]), tensor([9.95117944e-08, 1.92207202e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 29]), tensor([1., 1.]), tensor([0, 0]), tensor([9.95117944e-08, 2.83924162e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.042986154556274414

all verified at 1th iter
Time: prepare 0.0004    bound 0.0115    transfer 0.0001    finalize 0.0002    func 0.0124    
Accumulated time: func 0.3130    prepare 0.0294    bound 0.2802    transfer 0.0025    finalize 0.0056    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 196.25593733787537
Verifying property 3 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.57431978]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
        -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.57431978]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 953
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 248
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1222
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.512901306152344e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5743156671524048
10 lb beta sum: 0.0, worst -0.5743215084075928
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0528    transfer 0.0001    finalize 0.0001    func 0.0532    
Accumulated time: func 0.0532    prepare 0.0002    bound 0.0528    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 12] 
split level 2: [/input-12, 90] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 8] 
split level 5: [/input-12, 61] 
split level 6: [/input-12, 79] 
split level 7: [/input-12, 58] 
split level 8: [/input-8, 1697] 
split level 9: [/input-12, 46] 
split level 10: [/input-8, 1618] 
split level 11: [/input-8, 1610] 
split level 12: [/input-8, 1973] 
split level 13: [/input-8, 1953] 
split level 14: [/input-8, 1660] 
split level 15: [/input-12, 29] 
split level 16: [/input-8, 1707] 
split level 17: [/input-8, 913] 
split level 18: [/input-8, 1698] 
split level 19: [/input-8, 1642] 
split level 20: [/input-8, 1724] 
split level 21: [/input-8, 1626] 
split level 22: [/input-8, 946] 
split level 23: [/input-8, 1716] 
split level 24: [/input-8, 1052] 
split level 25: [/input-8, 1713] 
split level 26: [/input-8, 509] 
split level 27: [/input-8, 1690] 
split level 28: [/input-8, 490] 
split level 29: [/input-8, 461] 
split level 30: [/input, 346] 
split level 31: [/input-8, 1053] 
split level 32: [/input, 3433] 
split level 33: [/input, 3016] 
split level 34: [/input-8, 1634] 
split level 35: [/input-8, 1943] 
split level 36: [/input-8, 934] 
split level 37: [/input, 2248] 
split level 38: [/input-8, 959] 
split level 39: [/input-8, 1611] 
split level 40: [/input, 936] 
split level 41: [/input, 2535] 
split level 42: [/input-8, 1641] 
split level 43: [/input-8, 1149] 
split level 44: [/input, 2485] 
split level 45: [/input-8, 933] 
split level 46: [/input-8, 932] 
split level 47: [/input-8, 1980] 
split level 48: [/input-8, 956] 
split level 49: [/input-8, 510] 
split level 50: [/input-8, 822] 
split level 51: [/input-8, 338] 
split level 52: [/input-8, 337] 
split level 53: [/input, 2456] 
split level 54: [/input-8, 897] 
split level 55: [/input, 938] 
split level 56: [/input-8, 1935] 
split level 57: [/input, 393] 
split level 58: [/input, 2231] 
split level 59: [/input-8, 467] 
split level 60: [/input, 952] 
split level 61: [/input-8, 1084] 
split level 62: [/input-8, 798] 
split level 63: [/input, 923] 
split level 64: [/input, 2455] 
split level 65: [/input, 905] 
split level 66: [/input, 907] 
split level 67: [/input, 2202] 
split level 68: [/input-8, 595] 
split level 69: [/input-8, 1649] 
split level 70: [/input, 889] 
split level 71: [/input, 2169] 
split level 72: [/input-8, 625] 
split level 73: [/input, 3533] 
split level 74: [/input, 2440] 
split level 75: [/input, 904] 
split level 76: [/input, 2471] 
split level 77: [/input, 2230] 
split level 78: [/input-8, 942] 
split level 79: [/input, 2472] 
split level 80: [/input, 2488] 
split level 81: [/input-8, 460] 
split level 82: [/input, 3466] 
split level 83: [/input, 2388] 
split level 84: [/input, 506] 
split level 85: [/input, 2186] 
split level 86: [/input, 2474] 
split level 87: [/input-8, 1780] 
split level 88: [/input, 3509] 
split level 89: [/input-8, 1310] 
split level 90: [/input, 2201] 
split level 91: [/input-8, 939] 
split level 92: [/input, 2167] 
split level 93: [/input, 2473] 
split level 94: [/input-8, 377] 
split level 95: [/input, 2441] 
split level 96: [/input, 920] 
split level 97: [/input, 2185] 
split level 98: [/input, 2168] 
split level 99: [/input-8, 604] 
split level 100: [/input, 2217] 
split level 101: [/input, 2188] 
split level 102: [/input, 2232] 
split level 103: [/input, 3000] 
split level 104: [/input, 2203] 
split level 105: [/input-8, 1523] 
split level 106: [/input, 3518] 
split level 107: [/input, 2153] 
split level 108: [/input-8, 1034] 
split level 109: [/input, 2457] 
split level 110: [/input, 2195] 
split level 111: [/input, 2184] 
split level 112: [/input, 2489] 
split level 113: [/input-8, 951] 
split level 114: [/input, 2180] 
split level 115: [/input, 949] 
split level 116: [/input, 404] 
split level 117: [/input, 2406] 
split level 118: [/input, 946] 
split level 119: [/input, 3468] 
split level 120: [/input, 2476] 
split level 121: [/input, 3017] 
split level 122: [/input-8, 179] 
split level 123: [/input-8, 330] 
split level 124: [/input, 420] 
split level 125: [/input, 2439] 
split level 126: [/input, 344] 
split level 127: [/input-8, 1043] 
split level 128: [/input, 2426] 
split level 129: [/input, 2155] 
split level 130: [/input, 2220] 
split level 131: [/input, 3516] 
split level 132: [/input-8, 345] 
split level 133: [/input, 435] 
split level 134: [/input, 2475] 
split level 135: [/input, 1350] 
split level 136: [/input, 2170] 
split level 137: [/input, 3517] 
split level 138: [/input-8, 1920] 
split level 139: [/input, 2154] 
split level 140: [/input, 3452] 
split level 141: [/input, 2218] 
split level 142: [/input, 375] 
split level 143: [/input, 2156] 
split level 144: [/input, 474] 
split level 145: [/input, 871] 
split level 146: [/input, 2490] 
split level 147: [/input, 2762] 
split level 148: [/input, 2204] 
split level 149: [/input, 891] 
split level 150: [/input, 2427] 
split level 151: [/input, 2172] 
split level 152: [/input, 2219] 
split level 153: [/input, 1331] 
split level 154: [/input-12, 32] 
split level 155: [/input, 797] 
split level 156: [/input, 2371] 
split level 157: [/input, 2442] 
split level 158: [/input, 875] 
split level 159: [/input, 955] 
split level 160: [/input, 2390] 
split level 161: [/input-8, 361] 
split level 162: [/input, 421] 
split level 163: [/input, 725] 
split level 164: [/input-8, 1598] 
split level 165: [/input, 2419] 
split level 166: [/input, 2238] 
split level 167: [/input, 2225] 
split level 168: [/input, 2505] 
split level 169: [/input, 2254] 
split level 170: [/input, 2509] 
split level 171: [/input, 971] 
split level 172: [/input, 2206] 
split level 173: [/input, 2130] 
split level 174: [/input, 2412] 
split level 175: [/input, 501] 
split level 176: [/input, 3411] 
split level 177: [/input, 2173] 
split level 178: [/input, 1317] 
split level 179: [/input-8, 459] 
split level 180: [/input, 2189] 
split level 181: [/input, 713] 
split level 182: [/input, 2468] 
split level 183: [/input, 2428] 
split level 184: [/input, 2444] 
split level 185: [/input, 2253] 
split level 186: [/input, 2250] 
split level 187: [/input, 2196] 
split level 188: [/input, 2764] 
split level 189: [/input, 925] 
split level 190: [/input, 2484] 
split level 191: [/input, 2493] 
split level 192: [/input, 3582] 
split level 193: [/input, 963] 
split level 194: [/input, 2157] 
split level 195: [/input, 3443] 
split level 196: [/input, 2236] 
split level 197: [/input, 2467] 
split level 198: [/input, 2255] 
split level 199: [/input, 2251] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5740727782249451
10 lb beta sum: 0.0, worst -0.5740777254104614
Time: prepare 0.0114    bound 0.0982    transfer 0.0027    finalize 0.0029    func 0.1179    
Accumulated time: func 0.1711    prepare 0.0214    bound 0.1510    transfer 0.0029    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.22041655) min lb tensor(-0.57407278)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010642528533935547 
BICCOS Cumulative time: 0.010642528533935547
Preprocessing time: 0.009894371032714844 Inference time: 0.00011324882507324219 Add cuts time: 5.269050598144531e-05 Cut analysis time: 0.0005822181701660156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.56485 (1), -0.56425 (1), -0.56396 (1), -0.56343 (1), -0.56292 (1), -0.56264 (1), -0.56260 (1), -0.56250 (1), -0.56241 (1), -0.56209 (1), -0.56182 (1), -0.56142 (1), -0.56140 (1), -0.56131 (1), -0.56109 (1), -0.56050 (1), -0.56041 (1), -0.56019 (1), -0.55935 (1), -0.55920 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5188    set_bounds 0.0094    solve 0.1180    add 0.0665    
Accumulated time: pickout 0.0003    decision 0.5188    set_bounds 0.0094    solve 0.1180    add 0.0665    
Current (lb-rhs): -0.5648455023765564
50 domains visited
Cumulative time: 0.7815201282501221

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 90] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 90] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 2: [/input-12, 2] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 3: [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5382406115531921
10 lb beta sum: 0.42580822110176086, worst -0.5346451997756958
Time: prepare 0.0074    bound 0.1179    transfer 0.0011    finalize 0.0024    func 0.1314    
Accumulated time: func 0.3026    prepare 0.0290    bound 0.2689    transfer 0.0040    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.32642263) min lb tensor(-0.53447449)
Number of Verified Splits: 49 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.014864921569824219 
BICCOS Cumulative time: 0.025507450103759766
Preprocessing time: 0.011775493621826172 Inference time: 0.0017514228820800781 Add cuts time: 0.0011105537414550781 Cut analysis time: 0.00022745132446289062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30146 (2), -0.30141 (2), -0.30125 (2), -0.30105 (2), -0.30074 (2), -0.29957 (2), -0.29836 (2), -0.29754 (2), -0.29735 (2), -0.29699 (2), -0.29550 (2), -0.29414 (2), -0.29315 (2), -0.29302 (2), -0.29098 (2), -0.28964 (2), -0.28949 (2), -0.28700 (2), -0.28547 (2), -0.27915 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0123    solve 0.1315    add 0.0782    
Accumulated time: pickout 0.0013    decision 0.5381    set_bounds 0.0217    solve 0.2495    add 0.1447    
Current (lb-rhs): -0.3014591932296753
100 domains visited
Cumulative time: 1.039031744003296

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 90] [/input-12, 12] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 12] [/input-12, 90] [/input-12, 90] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 90] [/input-12, 2] [/input-12, 8] 
split level 3: [/input-12, 8] [/input-12, 8] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 58] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5579450130462646, worst -0.30145853757858276
10 lb beta sum: 0.5579450130462646, worst -0.30225181579589844
Time: prepare 0.0166    bound 0.1187    transfer 0.0011    finalize 0.0023    func 0.1419    
Accumulated time: func 0.4445    prepare 0.0458    bound 0.3876    transfer 0.0051    finalize 0.0078    
all_split False
======================Cut inference begins======================
max lb tensor(0.25812402) min lb tensor(-0.29965621)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.015665054321289062 
BICCOS Cumulative time: 0.04117250442504883
Preprocessing time: 0.011583328247070312 Inference time: 0.002525806427001953 Add cuts time: 0.001277923583984375 Cut analysis time: 0.0002779960632324219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13395 (3), -0.13366 (3), -0.13339 (3), -0.13300 (3), -0.13293 (3), -0.13230 (3), -0.12640 (3), -0.12623 (3), -0.12623 (3), -0.12470 (3), -0.12406 (3), -0.12318 (3), -0.12305 (3), -0.12285 (3), -0.12277 (3), -0.11954 (3), -0.11952 (3), -0.11563 (3), -0.11503 (3), -0.11400 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0153    solve 0.1420    add 0.0823    
Accumulated time: pickout 0.0024    decision 0.5574    set_bounds 0.0370    solve 0.3915    add 0.2270    
Current (lb-rhs): -0.13394951820373535
150 domains visited
Cumulative time: 1.3148047924041748

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 12] [/input-12, 12] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 90] 
split level 2: [/input-12, 8] [/input-12, 8] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 8] [/input-12, 2] 
split level 3: [/input-12, 58] [/input-12, 58] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 58] [/input-8, 1611] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1455487608909607
10 lb beta sum: 0.5328760147094727, worst -0.1274542212486267
Time: prepare 0.0066    bound 0.1178    transfer 0.0011    finalize 0.0021    func 0.1302    
Accumulated time: func 0.5747    prepare 0.0527    bound 0.5054    transfer 0.0062    finalize 0.0099    
all_split False
======================Cut inference begins======================
max lb tensor(0.27732515) min lb tensor(-0.12104231)
Number of Verified Splits: 165 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 5
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.022533893585205078 
BICCOS Cumulative time: 0.0637063980102539
Preprocessing time: 0.011554956436157227 Inference time: 0.008760452270507812 Add cuts time: 0.001798868179321289 Cut analysis time: 0.00041961669921875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03300 (4), -0.03208 (4), -0.03201 (4), -0.03178 (4), -0.03168 (4), -0.03136 (4), -0.03044 (4), -0.02474 (4), -0.02266 (4), -0.02217 (4), -0.02204 (4), -0.02194 (4), -0.02186 (4), -0.02184 (4), -0.02183 (4), -0.02123 (4), -0.02086 (4), -0.02075 (4), -0.01996 (4), -0.01977 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0197    set_bounds 0.0157    solve 0.1303    add 0.2373    
Accumulated time: pickout 0.0034    decision 0.5771    set_bounds 0.0527    solve 0.5218    add 0.4644    
Current (lb-rhs): -0.03299903869628906
200 domains visited
Cumulative time: 1.7416880130767822

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 8] [/input-12, 90] [/input-12, 90] [/input-12, 8] [/input-12, 90] [/input-12, 8] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 2: [/input-12, 58] [/input-12, 2] [/input-12, 58] [/input-12, 58] [/input-12, 46] [/input-12, 58] [/input-12, 2] [/input-12, 46] [/input-12, 46] [/input-12, 58] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-8, 1611] [/input-12, 46] [/input-8, 1698] [/input-12, 46] [/input-12, 46] [/input-8, 1698] [/input-8, 1698] [/input-8, 1611] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06480300426483154
10 lb beta sum: 0.4836138188838959, worst -0.3616744577884674
Time: prepare 0.0069    bound 0.1340    transfer 0.0011    finalize 0.0023    func 0.1469    
Accumulated time: func 0.7217    prepare 0.0598    bound 0.6394    transfer 0.0074    finalize 0.0123    
all_split False
======================Cut inference begins======================
max lb tensor(0.49457449) min lb tensor(-0.00995833)
Number of Verified Splits: 372 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.037731170654296875 
BICCOS Cumulative time: 0.10143756866455078
Preprocessing time: 0.011522531509399414 Inference time: 0.019343137741088867 Add cuts time: 0.005932331085205078 Cut analysis time: 0.0009331703186035156
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0212    set_bounds 0.0153    solve 0.1470    add 0.0277    
Accumulated time: pickout 0.0044    decision 0.5983    set_bounds 0.0680    solve 0.6688    add 0.4921    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58]), tensor([-1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([4.17789692e-11, 1.66292891e-01, 8.28482956e-02, 3.39650959e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58, 42]), tensor([-1., -1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([4.17789692e-11, 1.66292891e-01, 8.28482956e-02, 9.06700343e-02,
        2.99690962e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58, 42]), tensor([-1., -1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([4.17789692e-11, 1.66292891e-01, 8.28482956e-02, 9.06700343e-02,
        1.72634218e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([4.17789692e-11, 1.66292891e-01, 5.50308079e-02, 3.34289819e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58, 42]), tensor([-1., -1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([4.17789692e-11, 1.66292891e-01, 5.50308079e-02, 1.03610113e-01,
        2.98135847e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58, 42]), tensor([-1., -1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([4.17789692e-11, 1.66292891e-01, 5.50308079e-02, 1.03610113e-01,
        2.12982725e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8, 42]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([4.17789692e-11, 5.35245389e-02, 3.18674445e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8, 42]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([4.17789692e-11, 5.35245389e-02, 8.19669804e-04]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8, 42]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([6.00041128e-11, 1.96857437e-01, 3.21854651e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8, 42]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([6.00041128e-11, 1.96857437e-01, 2.56095990e-03]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8]), tensor([1., 1.]), tensor([0, 0]), tensor([6.00041128e-11, 5.11564761e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  11
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.44652318954467773
10 lb beta sum: 0.3564888536930084, worst -0.41555750370025635
Time: prepare 0.0004    bound 0.1366    transfer 0.0002    finalize 0.0002    func 0.1376    
Accumulated time: func 0.8592    prepare 0.0602    bound 0.7760    transfer 0.0076    finalize 0.0125    
After pruning, left:  6

Back to Regular BaB

BaB round 1
batch: 6
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 42] 
split level 1: [/input-12, 90] [/input-12, 90] [/input-12, 46] [/input-12, 2] [/input-12, 2] [/input-12, 90] 
split level 2: [/input-12, 79] [/input-12, 79] [/input-8, 1698] [/input-12, 79] [/input-12, 58] [/input-12, 2] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-8, 1690] [/input-12, 58] [/input-12, 46] [/input-12, 79] 
split level 4: [/input-8, 1698] [/input-8, 1698] [/input-8, 1611] [/input-12, 46] [/input-8, 1698] [/input-12, 58] 
split level 5: [/input-8, 1611] [/input-8, 1611] [/input-8, 1943] [/input-8, 337] [/input-8, 1611] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.519897997379303, worst -0.2880958616733551
10 lb beta sum: 0.5158900618553162, worst -0.26715102791786194
Time: prepare 0.0175    bound 0.1305    transfer 0.0016    finalize 0.0021    func 0.1548    
Accumulated time: func 1.0140    prepare 0.0781    bound 0.9065    transfer 0.0092    finalize 0.0146    
all_split False
======================Cut inference begins======================
max lb tensor(0.58029604) min lb tensor(-0.26701936)
Number of Verified Splits: 314 of 384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0003445148468017578 
BICCOS Cumulative time: 0.10178208351135254
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26702 (6), -0.25414 (6), -0.24629 (6), -0.23347 (6), -0.22579 (6), -0.21932 (6), -0.21374 (6), -0.20568 (6), -0.19180 (6), -0.17875 (6), -0.15378 (6), -0.14882 (6), -0.14789 (6), -0.14110 (6), -0.14021 (6), -0.13489 (6), -0.12462 (6), -0.12280 (6), -0.11992 (6), -0.11974 (6), 
Length of domains: 70
Time: pickout 0.0006    decision 0.0184    set_bounds 0.0306    solve 0.1549    add 0.0700    
Accumulated time: pickout 0.0050    decision 0.6167    set_bounds 0.0986    solve 0.8238    add 0.5620    
Current (lb-rhs): -0.2670193612575531
270 domains visited
Cumulative time: 2.4631059169769287

BaB round 2
batch: 70
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1698] [/input-12, 79] [/input-8, 1698] [/input-12, 29] [/input-12, 79] [/input-8, 1698] [/input-12, 29] [/input-12, 29] [/input-8, 1698] [/input-12, 79] 
split level 1: [/input-8, 338] [/input-8, 1618] [/input-8, 1052] [/input-8, 338] [/input-8, 1618] [/input-8, 1053] [/input-8, 1698] [/input-8, 1698] [/input-8, 338] [/input-8, 1618] 
cut re-enabled after branching node selection
0 lb beta sum: 0.42175716161727905, worst -0.2533019483089447
10 lb beta sum: 0.42528051137924194, worst -0.2531593143939972
Time: prepare 0.0123    bound 0.1326    transfer 0.0012    finalize 0.0018    func 0.1497    
Accumulated time: func 1.1637    prepare 0.0905    bound 1.0391    transfer 0.0104    finalize 0.0164    
all_split False
======================Cut inference begins======================
max lb tensor(0.14427352) min lb tensor(-0.25310400)
Number of Verified Splits: 123 of 280
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.000347137451171875 
BICCOS Cumulative time: 0.10212922096252441
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25310 (8), -0.23311 (8), -0.22956 (8), -0.22423 (8), -0.22222 (8), -0.22104 (8), -0.20932 (8), -0.20702 (8), -0.20573 (8), -0.20519 (8), -0.20313 (8), -0.20039 (8), -0.19593 (8), -0.19553 (8), -0.19133 (8), -0.19023 (8), -0.18909 (8), -0.18805 (8), -0.18688 (8), -0.18552 (8), 
Length of domains: 157
Time: pickout 0.0143    decision 0.0170    set_bounds 0.0162    solve 0.1498    add 0.0166    
Accumulated time: pickout 0.0193    decision 0.6337    set_bounds 0.1148    solve 0.9736    add 0.5786    
Current (lb-rhs): -0.25310400128364563
427 domains visited
Cumulative time: 2.6780905723571777

BaB round 3
batch: 157
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-8, 934] [/input-12, 29] [/input-8, 1626] [/input-8, 1690] [/input-12, 29] [/input-12, 29] [/input-8, 1713] [/input-12, 29] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47478777170181274, worst -0.2411690652370453
10 lb beta sum: 0.47478777170181274, worst -0.24096634984016418
Time: prepare 0.0137    bound 0.1347    transfer 0.0018    finalize 0.0019    func 0.1541    
Accumulated time: func 1.3179    prepare 0.1044    bound 1.1738    transfer 0.0123    finalize 0.0183    
all_split False
======================Cut inference begins======================
max lb tensor(0.06479287) min lb tensor(-0.24088183)
Number of Verified Splits: 92 of 314
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.00034332275390625 
BICCOS Cumulative time: 0.10247254371643066
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24088 (9), -0.24017 (9), -0.22759 (9), -0.22521 (9), -0.21539 (9), -0.21312 (9), -0.21311 (9), -0.21025 (9), -0.20833 (9), -0.20203 (9), -0.19983 (9), -0.19900 (9), -0.19631 (9), -0.19589 (9), -0.19545 (9), -0.19459 (9), -0.19247 (9), -0.18989 (9), -0.18970 (9), -0.18659 (9), 
Length of domains: 222
Time: pickout 0.0028    decision 0.0193    set_bounds 0.0130    solve 0.1542    add 0.0231    
Accumulated time: pickout 0.0221    decision 0.6530    set_bounds 0.1278    solve 1.1278    add 0.6018    
Current (lb-rhs): -0.24088183045387268
649 domains visited
Cumulative time: 2.8915812969207764

BaB round 4
batch: 222
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1618] [/input-8, 1698] [/input-8, 1690] [/input-8, 1052] [/input-8, 1053] [/input-8, 338] [/input-8, 1618] [/input-8, 1698] [/input-8, 934] [/input-8, 933] 
cut re-enabled after branching node selection
0 lb beta sum: 0.49097368121147156, worst -0.2364805042743683
10 lb beta sum: 0.49097368121147156, worst -0.23639455437660217
Time: prepare 0.0192    bound 0.1376    transfer 0.0014    finalize 0.0025    func 0.1635    
Accumulated time: func 1.4814    prepare 0.1238    bound 1.3114    transfer 0.0137    finalize 0.0209    
all_split False
======================Cut inference begins======================
max lb tensor(0.04894170) min lb tensor(-0.23637024)
Number of Verified Splits: 59 of 444
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0003609657287597656 
BICCOS Cumulative time: 0.10283350944519043
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23637 (10), -0.23536 (10), -0.22334 (10), -0.22142 (10), -0.22054 (10), -0.21809 (10), -0.21042 (10), -0.20793 (10), -0.20513 (10), -0.20510 (10), -0.20500 (10), -0.20439 (10), -0.20274 (10), -0.20269 (10), -0.20208 (10), -0.19979 (10), -0.19760 (10), -0.19689 (10), -0.18950 (10), -0.18864 (10), 
Length of domains: 385
Time: pickout 0.0039    decision 0.0226    set_bounds 0.0185    solve 0.1636    add 0.0051    
Accumulated time: pickout 0.0260    decision 0.6756    set_bounds 0.1464    solve 1.2915    add 0.6069    
Current (lb-rhs): -0.2363702356815338
1034 domains visited
Cumulative time: 3.1063942909240723

BaB round 5
batch: 385
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1626] [/input-8, 1034] [/input-8, 933] [/input-8, 1618] [/input-8, 933] [/input-8, 1943] [/input-8, 1626] [/input-8, 1034] [/input-8, 1943] [/input-8, 1626] 
cut re-enabled after branching node selection
0 lb beta sum: 0.49775636196136475, worst -0.22925391793251038
10 lb beta sum: 0.49775636196136475, worst -0.22910228371620178
Time: prepare 0.0335    bound 0.1378    transfer 0.0046    finalize 0.0043    func 0.1851    
Accumulated time: func 1.6665    prepare 0.1576    bound 1.4491    transfer 0.0182    finalize 0.0252    
all_split False
======================Cut inference begins======================
max lb tensor(0.19875550) min lb tensor(-0.22906736)
Number of Verified Splits: 92 of 770
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.00036406517028808594 
BICCOS Cumulative time: 0.10319757461547852
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22907 (11), -0.22787 (11), -0.22708 (11), -0.22249 (11), -0.21595 (11), -0.21542 (11), -0.21363 (11), -0.21343 (11), -0.21272 (11), -0.21111 (11), -0.20578 (11), -0.20347 (11), -0.20329 (11), -0.20026 (11), -0.19767 (11), -0.19566 (11), -0.19423 (11), -0.19422 (11), -0.19403 (11), -0.19399 (11), 
Length of domains: 678
Time: pickout 0.0073    decision 0.0319    set_bounds 0.0314    solve 0.1853    add 0.0106    
Accumulated time: pickout 0.0334    decision 0.7074    set_bounds 0.1777    solve 1.4768    add 0.6174    
Current (lb-rhs): -0.2290673553943634
1712 domains visited
Cumulative time: 3.374248504638672

BaB round 6
batch: 678
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1690] [/input-8, 1713] [/input-8, 1611] [/input-8, 1690] [/input-8, 1052] [/input-8, 913] [/input-8, 1713] [/input-8, 1618] [/input-8, 1611] [/input-8, 1953] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5013473629951477, worst -0.2265482246875763
10 lb beta sum: 0.5013473629951477, worst -0.22652080655097961
Time: prepare 0.0587    bound 0.1481    transfer 0.0044    finalize 0.0080    func 0.2280    
Accumulated time: func 1.8945    prepare 0.2165    bound 1.5973    transfer 0.0227    finalize 0.0332    
all_split False
======================Cut inference begins======================
max lb tensor(0.26830959) min lb tensor(-0.22651276)
Number of Verified Splits: 259 of 1356
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0004019737243652344 
BICCOS Cumulative time: 0.10359954833984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22651 (12), -0.22527 (12), -0.22452 (12), -0.22020 (12), -0.21321 (12), -0.21260 (12), -0.21087 (12), -0.21044 (12), -0.20998 (12), -0.20879 (12), -0.20829 (12), -0.20735 (12), -0.20682 (12), -0.20309 (12), -0.20052 (12), -0.19993 (12), -0.19710 (12), -0.19572 (12), -0.19498 (12), -0.19373 (12), 
Length of domains: 1097
Time: pickout 0.0084    decision 0.0479    set_bounds 0.0548    solve 0.2283    add 0.0109    
Accumulated time: pickout 0.0418    decision 0.7553    set_bounds 0.2325    solve 1.7051    add 0.6283    
Current (lb-rhs): -0.22651275992393494
2809 domains visited
Cumulative time: 3.7270736694335938

BaB round 7
batch: 1097
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1943] [/input-8, 1618] [/input-8, 1053] [/input-8, 1713] [/input-12, 61] [/input-8, 1626] [/input-8, 1953] [/input-8, 1943] [/input-8, 1716] [/input-8, 1034] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5082552433013916, worst -0.22474899888038635
10 lb beta sum: 0.5082552433013916, worst -0.2247420847415924
Time: prepare 0.0965    bound 0.1818    transfer 0.0115    finalize 0.1484    func 0.4527    
Accumulated time: func 2.3472    prepare 0.3132    bound 1.7791    transfer 0.0341    finalize 0.1816    
all_split False
======================Cut inference begins======================
max lb tensor(0.27813822) min lb tensor(-0.22472998)
Number of Verified Splits: 464 of 2194
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0005245208740234375 
BICCOS Cumulative time: 0.10412406921386719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22473 (13), -0.22342 (13), -0.21863 (13), -0.21767 (13), -0.21137 (13), -0.20972 (13), -0.20897 (13), -0.20830 (13), -0.20774 (13), -0.20710 (13), -0.20674 (13), -0.20563 (13), -0.20522 (13), -0.20477 (13), -0.20122 (13), -0.19983 (13), -0.19866 (13), -0.19687 (13), -0.19397 (13), -0.19309 (13), 
Length of domains: 1730
Time: pickout 0.0133    decision 0.0705    set_bounds 0.0897    solve 0.4532    add 0.0127    
Accumulated time: pickout 0.0551    decision 0.8259    set_bounds 0.3222    solve 2.1582    add 0.6410    
Current (lb-rhs): -0.224729984998703
4539 domains visited
Cumulative time: 4.3719823360443115

BaB round 8
batch: 1730
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1149] [/input-8, 1953] [/input-8, 1713] [/input-8, 934] [/input-12, 61] [/input-8, 1611] [/input-8, 1713] [/input-12, 61] [/input-12, 61] [/input-8, 1149] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5179063081741333, worst -0.21867141127586365
10 lb beta sum: 0.5179063081741333, worst -0.218671053647995
Time: prepare 0.1540    bound 0.2528    transfer 0.0144    finalize 0.0212    func 0.4650    
Accumulated time: func 2.8122    prepare 0.4674    bound 2.0319    transfer 0.0486    finalize 0.2028    
all_split False
======================Cut inference begins======================
max lb tensor(0.27061462) min lb tensor(-0.21866503)
Number of Verified Splits: 621 of 3460
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0004298686981201172 
BICCOS Cumulative time: 0.1045539379119873
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21867 (14), -0.21729 (14), -0.21684 (14), -0.21156 (14), -0.21034 (14), -0.20785 (14), -0.20637 (14), -0.20371 (14), -0.20252 (14), -0.20188 (14), -0.20175 (14), -0.20098 (14), -0.20085 (14), -0.20065 (14), -0.20000 (14), -0.19959 (14), -0.19906 (14), -0.19887 (14), -0.19583 (14), -0.19494 (14), 
Length of domains: 2839
Time: pickout 0.0309    decision 0.1048    set_bounds 0.1391    solve 0.4657    add 0.0451    
Accumulated time: pickout 0.0860    decision 0.9307    set_bounds 0.4614    solve 2.6239    add 0.6861    
Current (lb-rhs): -0.21866503357887268
7378 domains visited
Cumulative time: 5.165429592132568

BaB round 9
batch: 2839
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 345] [/input-8, 1626] [/input-8, 934] [/input-8, 1953] [/input-8, 604] [/input-8, 933] [/input-8, 345] [/input-8, 1053] [/input-8, 1707] [/input-8, 1716] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5247033834457397, worst -0.21286985278129578
10 lb beta sum: 0.5247033834457397, worst -0.21285322308540344
Time: prepare 0.2562    bound 0.3719    transfer 0.0393    finalize 0.0381    func 0.7476    
Accumulated time: func 3.5598    prepare 0.7238    bound 2.4038    transfer 0.0879    finalize 0.2409    
all_split False
======================Cut inference begins======================
max lb tensor(0.27767265) min lb tensor(-0.21284857)
Number of Verified Splits: 1119 of 5678
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.00046825408935546875 
BICCOS Cumulative time: 0.10502219200134277
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21285 (15), -0.21101 (15), -0.20984 (15), -0.20806 (15), -0.20575 (15), -0.20535 (15), -0.20442 (15), -0.20351 (15), -0.20122 (15), -0.20047 (15), -0.19845 (15), -0.19782 (15), -0.19718 (15), -0.19696 (15), -0.19661 (15), -0.19598 (15), -0.19582 (15), -0.19403 (15), -0.19371 (15), -0.19348 (15), 
Length of domains: 4559
Time: pickout 0.0350    decision 0.1636    set_bounds 0.3691    solve 0.7492    add 0.0309    
Accumulated time: pickout 0.1210    decision 1.0943    set_bounds 0.8304    solve 3.3731    add 0.7170    
Current (lb-rhs): -0.21284857392311096
11937 domains visited
Cumulative time: 6.526403188705444

BaB round 10
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1943] [/input-8, 1707] [/input-8, 932] [/input-8, 1713] [/input-8, 625] [/input-8, 1716] [/input-8, 1713] [/input-8, 1690] [/input-8, 604] [/input, 3016] 
cut re-enabled after branching node selection
0 lb beta sum: 0.527480959892273, worst -0.20470741391181946
10 lb beta sum: 0.527480959892273, worst -0.20456060767173767
Time: prepare 0.3920    bound 0.5023    transfer 0.0486    finalize 0.0517    func 1.0470    
Accumulated time: func 4.6068    prepare 1.1161    bound 2.9061    transfer 0.1364    finalize 0.2926    
all_split False
======================Cut inference begins======================
max lb tensor(0.27740926) min lb tensor(-0.20453796)
Number of Verified Splits: 1555 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0006518363952636719 
BICCOS Cumulative time: 0.10567402839660645
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20454 (16), -0.20402 (16), -0.20345 (16), -0.20274 (16), -0.20225 (16), -0.20164 (16), -0.19840 (16), -0.19698 (16), -0.19659 (16), -0.19649 (16), -0.19599 (16), -0.19594 (16), -0.19532 (16), -0.19523 (16), -0.19499 (16), -0.19478 (16), -0.19419 (16), -0.19202 (16), -0.19130 (16), -0.19106 (16), 
Length of domains: 7100
Time: pickout 0.0547    decision 0.2297    set_bounds 0.4991    solve 1.0492    add 0.0373    
Accumulated time: pickout 0.1757    decision 1.3240    set_bounds 1.3295    solve 4.4223    add 0.7543    
Current (lb-rhs): -0.20453795790672302
18574 domains visited
current_vram/total_varm: 10.3GB/99.9GB, batch_size increase to 8192
Cumulative time: 8.414455890655518

BaB round 11
batch: 7100
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1611] [/input-8, 1713] [/input-8, 1713] [/input-8, 1716] [/input-8, 1707] [/input-8, 1707] [/input-8, 932] [/input-8, 934] [/input-8, 1618] [/input-8, 1716] 
cut re-enabled after branching node selection
0 lb beta sum: 0.52874755859375, worst -0.2045370638370514
10 lb beta sum: 0.52874755859375, worst -0.20452985167503357
Time: prepare 0.6613    bound 0.8207    transfer 0.1340    finalize 0.1084    func 1.8181    
Accumulated time: func 6.4249    prepare 1.7777    bound 3.7268    transfer 0.2704    finalize 0.4010    
all_split False
======================Cut inference begins======================
max lb tensor(0.27678701) min lb tensor(-0.20452675)
Number of Verified Splits: 3053 of 14200
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0006234645843505859 
BICCOS Cumulative time: 0.10629749298095703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20453 (17), -0.20398 (17), -0.20334 (17), -0.20273 (17), -0.20222 (17), -0.20154 (17), -0.19831 (17), -0.19695 (17), -0.19654 (17), -0.19642 (17), -0.19592 (17), -0.19590 (17), -0.19524 (17), -0.19519 (17), -0.19492 (17), -0.19469 (17), -0.19409 (17), -0.19195 (17), -0.19123 (17), -0.19097 (17), 
Length of domains: 11147
Time: pickout 0.1232    decision 0.5862    set_bounds 0.7700    solve 1.8217    add 0.0547    
Accumulated time: pickout 0.2989    decision 1.9102    set_bounds 2.0995    solve 6.2440    add 0.8089    
Current (lb-rhs): -0.20452675223350525
29721 domains visited
Cumulative time: 11.814107418060303

BaB round 12
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1713] [/input-8, 1707] [/input-8, 1610] [/input-12, 61] [/input-8, 1713] [/input-8, 934] [/input, 2231] [/input-12, 61] [/input-8, 1690] [/input-12, 61] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5287431478500366, worst -0.19765809178352356
10 lb beta sum: 0.5287431478500366, worst -0.1975943148136139
Time: prepare 0.7890    bound 0.9341    transfer 0.1388    finalize 0.1044    func 2.0719    
Accumulated time: func 8.4967    prepare 2.5671    bound 4.6608    transfer 0.4093    finalize 0.5054    
all_split False
======================Cut inference begins======================
max lb tensor(0.27731252) min lb tensor(-0.19755086)
Number of Verified Splits: 3458 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0005898475646972656 
BICCOS Cumulative time: 0.1068873405456543
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20453 (17), -0.20398 (17), -0.20273 (17), -0.20222 (17), -0.19755 (18), -0.19695 (17), -0.19654 (17), -0.19592 (17), -0.19576 (18), -0.19539 (18), -0.19524 (17), -0.19519 (17), -0.19404 (18), -0.19358 (18), -0.19207 (18), -0.19195 (17), -0.19123 (17), -0.19033 (18), -0.19012 (18), -0.18920 (17), 
Length of domains: 15881
Time: pickout 0.1282    decision 0.6764    set_bounds 0.8966    solve 2.0759    add 0.0587    
Accumulated time: pickout 0.4271    decision 2.5866    set_bounds 2.9961    solve 8.3199    add 0.8676    
Current (lb-rhs): -0.20452675223350525
42647 domains visited
current_vram/total_varm: 22.7GB/99.9GB, batch_size increase to 16384
Cumulative time: 15.698148965835571

BaB round 13
batch: 15881
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1713] [/input-12, 61] [/input-8, 1610] [/input-8, 1634] [/input-8, 1610] [/input-8, 1943] [/input-8, 1953] [/input, 3016] [/input-8, 604] [/input-8, 1713] 
cut re-enabled after branching node selection
0 lb beta sum: 0.529042661190033, worst -0.20028308033943176
10 lb beta sum: 0.529042661190033, worst -0.20023313164710999
Time: prepare 1.5232    bound 1.7491    transfer 0.3538    finalize 0.2350    func 4.3784    
Accumulated time: func 12.8751    prepare 4.0907    bound 6.4099    transfer 0.7631    finalize 0.7404    
all_split False
======================Cut inference begins======================
max lb tensor(0.27404010) min lb tensor(-0.20022526)
Number of Verified Splits: 6839 of 31762
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0007979869842529297 
BICCOS Cumulative time: 0.10768532752990723
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20023 (18), -0.19969 (18), -0.19844 (18), -0.19792 (18), -0.19322 (19), -0.19312 (18), -0.19271 (18), -0.19260 (18), -0.19164 (18), -0.19142 (19), -0.19132 (18), -0.19117 (19), -0.19093 (18), -0.19092 (18), -0.19085 (18), -0.19059 (18), -0.18936 (19), -0.18872 (18), -0.18804 (19), -0.18767 (18), 
Length of domains: 24923
Time: pickout 0.3107    decision 1.1474    set_bounds 1.8936    solve 4.3840    add 0.0928    
Accumulated time: pickout 0.7378    decision 3.7340    set_bounds 4.8897    solve 12.7039    add 0.9605    
Current (lb-rhs): -0.20022526383399963
67570 domains visited
Cumulative time: 23.621723413467407

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1943] [/input-8, 604] [/input-8, 1713] [/input-8, 625] [/input-8, 1953] [/input-12, 61] [/input-8, 1034] [/input-8, 1707] [/input-8, 625] [/input-8, 1953] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5289183855056763, worst -0.1945013701915741
10 lb beta sum: 0.5289183855056763, worst -0.1944321095943451
Time: prepare 1.5929    bound 1.8003    transfer 0.3583    finalize 0.2081    func 4.1749    
Accumulated time: func 17.0500    prepare 5.6840    bound 8.2102    transfer 1.1213    finalize 0.9484    
all_split False
======================Cut inference begins======================
max lb tensor(0.26793918) min lb tensor(-0.19440684)
Number of Verified Splits: 7302 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.000789642333984375 
BICCOS Cumulative time: 0.1084749698638916
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19441 (19), -0.19356 (19), -0.19322 (19), -0.19262 (19), -0.19247 (19), -0.19199 (19), -0.19178 (19), -0.19142 (19), -0.19117 (19), -0.19068 (19), -0.19021 (19), -0.18936 (19), -0.18804 (19), -0.18732 (19), -0.18677 (19), -0.18638 (19), -0.18627 (19), -0.18595 (19), -0.18576 (19), -0.18572 (19), 
Length of domains: 34005
Time: pickout 0.2593    decision 1.6628    set_bounds 2.0938    solve 4.5660    add 0.1088    
Accumulated time: pickout 0.9970    decision 5.3968    set_bounds 6.9835    solve 17.2699    add 1.0693    
Current (lb-rhs): -0.19440683722496033
93036 domains visited
current_vram/total_varm: 37.8GB/99.9GB, batch_size increase to 32768
Cumulative time: 32.42370939254761

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1634] [/input-8, 1943] [/input-12, 61] [/input-12, 61] [/input-8, 509] [/input, 2231] [/input-8, 1953] [/input-8, 1943] [/input-8, 1953] [/input-8, 1707] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5299813151359558, worst -0.19027915596961975
10 lb beta sum: 0.5299813151359558, worst -0.190250426530838
Time: prepare 3.2261    bound 8.7327    transfer 0.7535    finalize 0.5442    func 13.6901    
Accumulated time: func 30.7400    prepare 8.9105    bound 16.9429    transfer 1.8748    finalize 1.4927    
all_split False
======================Cut inference begins======================
max lb tensor(0.27009532) min lb tensor(-0.19023523)
Number of Verified Splits: 14918 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0010972023010253906 
BICCOS Cumulative time: 0.10957217216491699
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19024 (20), -0.18951 (20), -0.18906 (20), -0.18845 (20), -0.18832 (20), -0.18788 (20), -0.18772 (20), -0.18726 (20), -0.18702 (20), -0.18653 (20), -0.18610 (20), -0.18572 (19), -0.18522 (20), -0.18398 (20), -0.18304 (20), -0.18235 (20), -0.18222 (20), -0.18217 (20), -0.18174 (19), -0.18163 (20), 
Length of domains: 51855
Time: pickout 0.5387    decision 3.3475    set_bounds 3.8645    solve 14.2563    add 0.1796    
Accumulated time: pickout 1.5357    decision 8.7443    set_bounds 10.8480    solve 31.5262    add 1.2490    
Current (lb-rhs): -0.1902352273464203
143654 domains visited
Cumulative time: 54.818843841552734

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1618] [/input-8, 1707] [/input, 2231] [/input-8, 1610] [/input-8, 1618] [/input-8, 1713] [/input-8, 1634] [/input-8, 1707] [/input-8, 1610] [/input-8, 1713] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5299572348594666, worst -0.1815904676914215
10 lb beta sum: 0.5299572348594666, worst -0.18160012364387512
Time: prepare 3.3192    bound 8.7336    transfer 0.7438    finalize 1.2673    func 14.5001    
Accumulated time: func 45.2402    prepare 12.2301    bound 25.6765    transfer 2.6187    finalize 2.7600    
all_split False
======================Cut inference begins======================
max lb tensor(0.26865914) min lb tensor(-0.18158570)
Number of Verified Splits: 14980 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0009653568267822266 
BICCOS Cumulative time: 0.11053752899169922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19024 (20), -0.18951 (20), -0.18906 (20), -0.18845 (20), -0.18832 (20), -0.18788 (20), -0.18772 (20), -0.18726 (20), -0.18653 (20), -0.18610 (20), -0.18398 (20), -0.18304 (20), -0.18235 (20), -0.18222 (20), -0.18217 (20), -0.18163 (20), -0.18159 (20), -0.18133 (20), -0.18125 (20), -0.18096 (20), 
Length of domains: 69643
Time: pickout 0.5688    decision 3.3514    set_bounds 4.1853    solve 14.5142    add 0.2152    
Accumulated time: pickout 2.1045    decision 12.0958    set_bounds 15.0333    solve 46.0404    add 1.4642    
Current (lb-rhs): -0.1902352273464203
194210 domains visited
Cumulative time: 77.88930654525757

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-8, 932] [/input-8, 913] [/input-8, 1713] [/input, 3000] [/input-8, 1953] [/input-8, 1713] [/input-8, 1943] [/input-8, 1618] [/input-8, 939] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5305942296981812, worst -0.1834297776222229
10 lb beta sum: 0.5305942296981812, worst -0.18333762884140015
Time: prepare 3.3314    bound 8.7338    transfer 0.7389    finalize 0.5654    func 14.6862    
Accumulated time: func 59.9263    prepare 15.5618    bound 34.4103    transfer 3.3575    finalize 3.3253    
all_split False
======================Cut inference begins======================
max lb tensor(0.27048108) min lb tensor(-0.18328336)
Number of Verified Splits: 14971 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0010762214660644531 
BICCOS Cumulative time: 0.11161375045776367
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18328 (21), -0.18312 (21), -0.18266 (21), -0.18247 (21), -0.18198 (21), -0.18178 (21), -0.18159 (20), -0.18143 (21), -0.18135 (21), -0.18134 (21), -0.18117 (21), -0.18098 (21), -0.18082 (21), -0.18081 (21), -0.18072 (21), -0.18012 (21), -0.18003 (21), -0.17997 (21), -0.17976 (21), -0.17946 (21), 
Length of domains: 87440
Time: pickout 0.5788    decision 3.6697    set_bounds 3.8648    solve 14.6986    add 0.1678    
Accumulated time: pickout 2.6834    decision 15.7655    set_bounds 18.8981    solve 60.7391    add 1.6319    
Current (lb-rhs): -0.18328335881233215
244775 domains visited
Cumulative time: 101.10176014900208

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 913] [/input-8, 1780] [/input-8, 956] [/input, 3000] [/input-8, 1707] [/input-8, 951] [/input-8, 1943] [/input-12, 61] [/input-8, 1634] [/input-12, 61] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5307945013046265, worst -0.1773623526096344
10 lb beta sum: 0.5307945013046265, worst -0.1773332953453064
Time: prepare 3.3678    bound 8.7314    transfer 0.7435    finalize 1.4968    func 14.7812    
Accumulated time: func 74.7076    prepare 18.9300    bound 43.1417    transfer 4.1011    finalize 4.8221    
all_split False
======================Cut inference begins======================
max lb tensor(0.26883629) min lb tensor(-0.17730740)
Number of Verified Splits: 14264 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.00102996826171875 
BICCOS Cumulative time: 0.11264371871948242
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18328 (21), -0.18312 (21), -0.18266 (21), -0.18247 (21), -0.18198 (21), -0.18178 (21), -0.18143 (21), -0.18135 (21), -0.18134 (21), -0.18117 (21), -0.18098 (21), -0.18082 (21), -0.18081 (21), -0.18072 (21), -0.18012 (21), -0.18003 (21), -0.17976 (21), -0.17946 (21), -0.17942 (21), -0.17914 (21), 
Length of domains: 105944
Time: pickout 0.5862    decision 3.3698    set_bounds 3.9810    solve 14.7952    add 0.1834    
Accumulated time: pickout 3.2696    decision 19.1353    set_bounds 22.8791    solve 75.5342    add 1.8153    
Current (lb-rhs): -0.18328335881233215
296047 domains visited
Cumulative time: 124.2471227645874

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 933] [/input-8, 934] [/input, 3016] [/input, 404] [/input-8, 604] [/input-8, 604] [/input, 393] [/input-8, 1707] [/input, 393] [/input-8, 933] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5305389761924744, worst -0.18067339062690735
10 lb beta sum: 0.5305389761924744, worst -0.1806301772594452
Time: prepare 3.3349    bound 8.7338    transfer 0.7530    finalize 0.5918    func 13.8609    
Accumulated time: func 88.5684    prepare 22.2653    bound 51.8755    transfer 4.8541    finalize 5.4139    
all_split False
======================Cut inference begins======================
max lb tensor(0.26855448) min lb tensor(-0.18062109)
Number of Verified Splits: 14529 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0010845661163330078 
BICCOS Cumulative time: 0.11372828483581543
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18312 (21), -0.18247 (21), -0.18135 (21), -0.18117 (21), -0.18081 (21), -0.18072 (21), -0.18062 (22), -0.17998 (22), -0.17942 (21), -0.17933 (22), -0.17906 (21), -0.17868 (22), -0.17830 (22), -0.17731 (22), -0.17679 (22), -0.17619 (22), -0.17572 (21), -0.17569 (22), -0.17549 (22), -0.17544 (22), 
Length of domains: 124183
Time: pickout 0.5951    decision 3.9184    set_bounds 4.3010    solve 13.8800    add 0.1813    
Accumulated time: pickout 3.8647    decision 23.0537    set_bounds 27.1801    solve 89.4143    add 1.9966    
Current (lb-rhs): -0.18312349915504456
347054 domains visited
Cumulative time: 147.4233546257019

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 822] [/input-8, 625] [/input-8, 1610] [/input, 3000] [/input-8, 1610] [/input-8, 1707] [/input-8, 959] [/input, 2231] [/input-8, 933] [/input-8, 956] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5307515859603882, worst -0.18051674962043762
10 lb beta sum: 0.5307515859603882, worst -0.18046805262565613
Time: prepare 3.3510    bound 8.7426    transfer 0.7511    finalize 0.5894    func 13.8740    
Accumulated time: func 102.4424    prepare 25.6167    bound 60.6182    transfer 5.6051    finalize 6.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.26918605) min lb tensor(-0.18045768)
Number of Verified Splits: 15011 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0011749267578125 
BICCOS Cumulative time: 0.11490321159362793
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18062 (22), -0.18046 (22), -0.17998 (22), -0.17980 (22), -0.17933 (22), -0.17868 (22), -0.17852 (22), -0.17830 (22), -0.17813 (22), -0.17731 (22), -0.17679 (22), -0.17665 (22), -0.17619 (22), -0.17602 (22), -0.17569 (22), -0.17559 (22), -0.17549 (22), -0.17544 (22), -0.17512 (22), -0.17502 (22), 
Length of domains: 141940
Time: pickout 0.6103    decision 4.4659    set_bounds 4.3905    solve 13.8951    add 0.1828    
Accumulated time: pickout 4.4750    decision 27.5197    set_bounds 31.5706    solve 103.3093    add 2.1795    
Current (lb-rhs): -0.18062108755111694
397579 domains visited
Cumulative time: 171.25809526443481

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 604] [/input-8, 933] [/input-8, 934] [/input-8, 1610] [/input-8, 1713] [/input-8, 1618] [/input-8, 822] [/input-8, 1943] [/input-8, 913] [/input-8, 1610] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5308196544647217, worst -0.17424476146697998
10 lb beta sum: 0.5308196544647217, worst -0.17424935102462769
Time: prepare 3.3656    bound 8.7353    transfer 0.7448    finalize 0.6010    func 13.8897    
Accumulated time: func 116.3321    prepare 28.9826    bound 69.3534    transfer 6.3499    finalize 6.6044    
all_split False
======================Cut inference begins======================
max lb tensor(0.26866165) min lb tensor(-0.17422754)
Number of Verified Splits: 15150 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.001249551773071289 
BICCOS Cumulative time: 0.11615276336669922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18062 (22), -0.18046 (22), -0.17998 (22), -0.17980 (22), -0.17933 (22), -0.17868 (22), -0.17852 (22), -0.17830 (22), -0.17813 (22), -0.17679 (22), -0.17665 (22), -0.17619 (22), -0.17602 (22), -0.17569 (22), -0.17559 (22), -0.17549 (22), -0.17544 (22), -0.17512 (22), -0.17502 (22), -0.17496 (22), 
Length of domains: 159558
Time: pickout 0.6147    decision 4.6519    set_bounds 4.5762    solve 13.9091    add 0.1926    
Accumulated time: pickout 5.0897    decision 32.1716    set_bounds 36.1467    solve 117.2185    add 2.3720    
Current (lb-rhs): -0.18062108755111694
447965 domains visited
Cumulative time: 195.48732590675354

BaB round 22
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1697] [/input-8, 1707] [/input, 2488] [/input, 2248] [/input, 2232] [/input, 474] [/input, 2456] [/input, 3016] [/input-8, 897] [/input-8, 939] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5300651788711548, worst -0.1737506091594696
10 lb beta sum: 0.5300651788711548, worst -0.17372533679008484
Time: prepare 3.4186    bound 8.7337    transfer 0.7529    finalize 0.6062    func 13.9583    
Accumulated time: func 130.2905    prepare 32.4017    bound 78.0872    transfer 7.1028    finalize 7.2105    
all_split False
======================Cut inference begins======================
max lb tensor(0.26898685) min lb tensor(-0.17371196)
Number of Verified Splits: 15200 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0010924339294433594 
BICCOS Cumulative time: 0.11724519729614258
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18062 (22), -0.18046 (22), -0.17998 (22), -0.17980 (22), -0.17933 (22), -0.17868 (22), -0.17852 (22), -0.17830 (22), -0.17813 (22), -0.17665 (22), -0.17602 (22), -0.17569 (22), -0.17559 (22), -0.17512 (22), -0.17502 (22), -0.17482 (22), -0.17470 (22), -0.17469 (22), -0.17434 (22), -0.17433 (22), 
Length of domains: 177126
Time: pickout 0.6175    decision 4.3042    set_bounds 4.8595    solve 13.9785    add 0.1923    
Accumulated time: pickout 5.7072    decision 36.4758    set_bounds 41.0062    solve 131.1969    add 2.5644    
Current (lb-rhs): -0.18062108755111694
498301 domains visited
Time out!!!!!!!!
Result: unknown in 225.0009 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 128, vnnlib ID: 128 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.50119209, -19.03553009, -15.22840977, -15.80129242, -14.75272465,
         -15.83410263, -14.41858292, -16.04555511, -18.78121948, -17.07835579]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [566]; unstable size 566; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 277, 1, 566] with unstable size 276 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 566] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 566] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [276]; unstable size 276; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 276] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 276] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.08655202,  2.27971601, -0.70720434,  0.21668988, -1.24121761,
          0.14262724, -0.35904825,  2.26373243,  0.64331388]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.50119209, -19.03553009, -15.22840977, -15.80129242, -14.75272465,
         -15.83410263, -14.41858292, -16.04555511, -18.78121948, -17.07835579]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.99197388, -18.70638084, -14.75032997, -15.45928192, -14.10924339,
          -15.45036697, -14.32971954, -15.41107941, -18.31928253, -16.74798012],
         [-15.99197388, -18.70638084, -14.75032997, -15.45928192, -14.10924339,
          -15.45036697, -14.32971954, -15.41107941, -18.31928253, -16.74798012]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.42061043, -0.22047615,  1.08135986]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0067 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0633 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 129, vnnlib ID: 129 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.34526443, -29.08344650, -25.10714531, -24.64510918, -24.53378105,
         -24.57837105, -26.13238144, -26.32098007, -25.42654800, -28.22369576]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [589]; unstable size 589; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 279, 1, 589] with unstable size 278 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 589] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 589] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [278]; unstable size 278; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 278] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 278] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.90512013,  2.61772990, -0.68264663, -0.29089302, -1.19851398,
          0.45634866,  0.37348223, -0.85104132,  1.92439842]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.34526443, -29.08344650, -25.10714531, -24.64510918, -24.53378105,
         -24.57837105, -26.13238144, -26.32098007, -25.42654800, -28.22369576]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.34526443, -29.08345222, -25.10714912, -24.64510918, -24.53377914,
          -24.57837105, -26.13237953, -26.32098007, -25.42654991, -28.22369576],
         [-25.34526443, -29.08345222, -25.10714912, -24.64510918, -24.53377914,
          -24.57837105, -26.13237953, -26.32098007, -25.42654991, -28.22369576]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.76689339,  0.52877808,  0.06673813, -0.04459190,  0.84817886]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0613 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 130, vnnlib ID: 130 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.30639458, -26.81990623, -22.08092117, -22.72490120, -20.55580521,
         -22.10051918, -22.94018555, -20.62528801, -29.47222137, -25.84111977]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [482]; unstable size 482; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 210, 1, 482] with unstable size 209 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 482] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 482] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [209]; unstable size 209; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 209] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 209] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.94138551,  2.94850779, -1.16203499,  0.27302718, -2.38051271,
         -0.17814445, -2.52197576,  5.83368587,  2.26016045]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.30639458, -26.81990623, -22.08092117, -22.72490120, -20.55580521,
         -22.10051918, -22.94018555, -20.62528801, -29.47222137, -25.84111977]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.30639648, -26.81990433, -22.08091927, -22.72489929, -20.55580711,
          -22.10051918, -22.94018173, -20.62528992, -29.47222328, -25.84112358],
         [-25.30639648, -26.81990433, -22.08091927, -22.72489929, -20.55580711,
          -22.10051918, -22.94018173, -20.62528992, -29.47222328, -25.84112358]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01959991, -1.54471207,  0.83966255, -1.47522926]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0534 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 131, vnnlib ID: 131 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.38834953, -31.51884651, -29.35291672, -31.02542496, -30.66601372,
         -31.39447021, -32.53964615, -32.87446594, -24.85302734, -31.34247780]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [590]; unstable size 590; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 208, 1, 590] with unstable size 207 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 590] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 590] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [207]; unstable size 207; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 207] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 207] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.28638124, 5.51830244, 2.94133306, 4.63216496, 3.96261120, 4.82937813,
         6.07474327, 5.84654808, 5.52136803]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0557 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 132, vnnlib ID: 132 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-35.68236923, -33.13178635, -40.98384094, -41.72174835, -40.35508347,
         -42.91672897, -41.79254532, -41.54734802, -35.50236130, -34.07597733]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [595]; unstable size 595; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 233, 1, 595] with unstable size 232 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 595] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 595] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [232]; unstable size 232; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 232] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.10743761,  5.94192982,  6.68529701,  5.16697407,  7.68069887,
          6.76294947,  6.25847864,  0.80630016, -0.04625964]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-35.68236923, -33.13178635, -40.98384094, -41.72174835, -40.35508347,
         -42.91672897, -41.79254532, -41.54734802, -35.50236130, -34.07597733]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.07it/s]100%|██████████| 1/1 [00:00<00:00,  9.06it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-34.71385956, -32.61029434, -39.89569092, -40.63676071, -39.18803787,
          -41.77312088, -40.75054550, -40.34767151, -34.64828873, -33.03255844]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.42226410]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1129 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 41.18775177001953
alpha/beta optimization time: 1.208510160446167
initial alpha-crown bounds: tensor([[ 1.18385553,  6.04057837,  6.78337193,  5.29151726,  7.78996468,
          6.85149002,  6.37167597,  0.88482237, -0.00952518]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.009525179862976074
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.63922595977783
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.63918495178223
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.63916110992432
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.63914036750793
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.63912105560303
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.63910102844238
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.63908171653748
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.63906073570251
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.6390416622162
Verifying property 8 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.00952518]], device='cuda:0') need to verify.
Model prediction is: tensor([-35.68236923, -33.13178635, -40.98384094, -41.72174835, -40.35508347,
        -42.91672897, -41.79254532, -41.54734802, -35.50236130, -34.07597733],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.00952518]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 595
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 227
Node /15 input 0: size torch.Size([100]) unstable 16
-----------------
# of unstable neurons: 838
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010061264038085938
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.009523510932922363
10 lb beta sum: 0.0, worst -0.00953364372253418
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0546    transfer 0.0001    finalize 0.0001    func 0.0550    
Accumulated time: func 0.0550    prepare 0.0002    bound 0.0546    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] 
split level 1: [/input-12, 59] 
split level 2: [/input-8, 156] 
split level 3: [/input-12, 12] 
split level 4: [/input-12, 15] 
split level 5: [/input-8, 1123] 
split level 6: [/input-8, 1122] 
split level 7: [/input-8, 157] 
split level 8: [/input-12, 89] 
split level 9: [/input-12, 36] 
split level 10: [/input-8, 1971] 
split level 11: [/input-12, 10] 
split level 12: [/input-8, 1763] 
split level 13: [/input-12, 2] 
split level 14: [/input-8, 1627] 
split level 15: [/input-8, 164] 
split level 16: [/input-8, 1628] 
split level 17: [/input-8, 147] 
split level 18: [/input-8, 793] 
split level 19: [/input-8, 1626] 
split level 20: [/input-8, 1755] 
split level 21: [/input-8, 1050] 
split level 22: [/input-8, 1067] 
split level 23: [/input-8, 1762] 
split level 24: [/input, 3177] 
split level 25: [/input, 904] 
split level 26: [/input-8, 598] 
split level 27: [/input-8, 814] 
split level 28: [/input-8, 747] 
split level 29: [/input-8, 308] 
split level 30: [/input, 3467] 
split level 31: [/input, 3210] 
split level 32: [/input-8, 748] 
split level 33: [/input-12, 13] 
split level 34: [/input-8, 1756] 
split level 35: [/input, 3146] 
split level 36: [/input-12, 8] 
split level 37: [/input-8, 1386] 
split level 38: [/input-12, 24] 
split level 39: [/input-8, 806] 
split level 40: [/input, 876] 
split level 41: [/input-8, 1500] 
split level 42: [/input-8, 1963] 
split level 43: [/input-8, 1517] 
split level 44: [/input-8, 749] 
split level 45: [/input-8, 1969] 
split level 46: [/input-8, 1968] 
split level 47: [/input-8, 1387] 
split level 48: [/input, 3464] 
split level 49: [/input-8, 1683] 
split level 50: [/input-8, 1119] 
split level 51: [/input-8, 1498] 
split level 52: [/input, 150] 
split level 53: [/input-8, 1561] 
split level 54: [/input-8, 588] 
split level 55: [/input-8, 1085] 
split level 56: [/input, 980] 
split level 57: [/input-8, 1943] 
split level 58: [/input, 3211] 
split level 59: [/input-8, 628] 
split level 60: [/input-8, 1395] 
split level 61: [/input, 4001] 
split level 62: [/input, 923] 
split level 63: [/input, 1671] 
split level 64: [/input, 3181] 
split level 65: [/input, 3499] 
split level 66: [/input-8, 973] 
split level 67: [/input-8, 1086] 
split level 68: [/input, 3441] 
split level 69: [/input, 380] 
split level 70: [/input-8, 1388] 
split level 71: [/input-8, 478] 
split level 72: [/input-8, 949] 
split level 73: [/input, 3196] 
split level 74: [/input-8, 1314] 
split level 75: [/input, 3302] 
split level 76: [/input, 857] 
split level 77: [/input-8, 1333] 
split level 78: [/input-8, 1390] 
split level 79: [/input-8, 1620] 
split level 80: [/input, 369] 
split level 81: [/input-8, 213] 
split level 82: [/input, 454] 
split level 83: [/input, 2266] 
split level 84: [/input, 3539] 
split level 85: [/input, 1442] 
split level 86: [/input, 2267] 
split level 87: [/input-8, 482] 
split level 88: [/input-8, 828] 
split level 89: [/input-8, 1033] 
split level 90: [/input, 882] 
split level 91: [/input, 2489] 
split level 92: [/input-8, 1385] 
split level 93: [/input-8, 1389] 
split level 94: [/input, 387] 
split level 95: [/input, 2278] 
split level 96: [/input, 2788] 
split level 97: [/input, 874] 
split level 98: [/input-8, 1929] 
split level 99: [/input, 2261] 
split level 100: [/input-8, 1393] 
split level 101: [/input, 883] 
split level 102: [/input, 839] 
split level 103: [/input, 833] 
split level 104: [/input, 983] 
split level 105: [/input, 2538] 
split level 106: [/input, 3483] 
split level 107: [/input, 2277] 
split level 108: [/input-8, 902] 
split level 109: [/input, 899] 
split level 110: [/input-8, 214] 
split level 111: [/input, 2518] 
split level 112: [/input, 2724] 
split level 113: [/input, 151] 
split level 114: [/input, 996] 
split level 115: [/input-8, 975] 
split level 116: [/input-8, 1973] 
split level 117: [/input, 3545] 
split level 118: [/input, 840] 
split level 119: [/input-8, 901] 
split level 120: [/input, 866] 
split level 121: [/input-8, 1820] 
split level 122: [/input-8, 1397] 
split level 123: [/input, 2534] 
split level 124: [/input-8, 1952] 
split level 125: [/input-8, 1214] 
split level 126: [/input, 982] 
split level 127: [/input, 3044] 
split level 128: [/input-8, 1644] 
split level 129: [/input, 2523] 
split level 130: [/input, 2274] 
split level 131: [/input, 314] 
split level 132: [/input, 2264] 
split level 133: [/input, 999] 
split level 134: [/input-8, 1315] 
split level 135: [/input-8, 1641] 
split level 136: [/input, 4039] 
split level 137: [/input, 175] 
split level 138: [/input-8, 1621] 
split level 139: [/input, 2725] 
split level 140: [/input, 2275] 
split level 141: [/input, 2260] 
split level 142: [/input-8, 1115] 
split level 143: [/input, 421] 
split level 144: [/input, 2487] 
split level 145: [/input, 2262] 
split level 146: [/input, 2281] 
split level 147: [/input, 978] 
split level 148: [/input, 2259] 
split level 149: [/input-8, 1757] 
split level 150: [/input, 2537] 
split level 151: [/input, 313] 
split level 152: [/input, 2279] 
split level 153: [/input, 3041] 
split level 154: [/input-8, 141] 
split level 155: [/input, 2282] 
split level 156: [/input, 405] 
split level 157: [/input, 2471] 
split level 158: [/input-8, 153] 
split level 159: [/input, 422] 
split level 160: [/input, 2244] 
split level 161: [/input, 1004] 
split level 162: [/input, 2143] 
split level 163: [/input-8, 911] 
split level 164: [/input-8, 202] 
split level 165: [/input, 2127] 
split level 166: [/input, 893] 
split level 167: [/input, 2215] 
split level 168: [/input, 822] 
split level 169: [/input-8, 1049] 
split level 170: [/input, 2539] 
split level 171: [/input-8, 201] 
split level 172: [/input, 3299] 
split level 173: [/input, 2752] 
split level 174: [/input, 2257] 
split level 175: [/input, 933] 
split level 176: [/input-8, 359] 
split level 177: [/input, 2542] 
split level 178: [/input, 3303] 
split level 179: [/input, 886] 
split level 180: [/input, 2273] 
split level 181: [/input, 2541] 
split level 182: [/input, 2533] 
split level 183: [/input, 2284] 
split level 184: [/input, 817] 
split level 185: [/input, 323] 
split level 186: [/input, 28] 
split level 187: [/input, 3480] 
split level 188: [/input, 819] 
split level 189: [/input, 76] 
split level 190: [/input, 2470] 
split level 191: [/input, 2519] 
split level 192: [/input, 2545] 
split level 193: [/input, 2706] 
split level 194: [/input, 3421] 
split level 195: [/input, 2111] 
split level 196: [/input-8, 1579] 
split level 197: [/input, 901] 
split level 198: [/input, 2228] 
split level 199: [/input, 1329] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.00944507122039795
10 lb beta sum: 0.0, worst -0.009422063827514648
Time: prepare 0.0113    bound 0.0964    transfer 0.0029    finalize 0.0029    func 0.1160    
Accumulated time: func 0.1710    prepare 0.0212    bound 0.1509    transfer 0.0030    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.24686641) min lb tensor(-0.00941086)
Number of Verified Splits: 56 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.013086557388305664 
BICCOS Cumulative time: 0.013086557388305664
Preprocessing time: 0.009941816329956055 Inference time: 0.002054929733276367 Add cuts time: 0.0009169578552246094 Cut analysis time: 0.0001728534698486328
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5167    set_bounds 0.0089    solve 0.1161    add 0.0100    
Accumulated time: pickout 0.0003    decision 0.5167    set_bounds 0.0089    solve 0.1161    add 0.0100    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71]), tensor([-1.]), tensor([0]), tensor([3.76462776e-06]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71]), tensor([1.]), tensor([0]), tensor([4.11366585e-09]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.0808722972869873

all verified at 0th iter
Time: prepare 0.0003    bound 0.0039    transfer 0.0001    finalize 0.0001    func 0.0044    
Accumulated time: func 0.1755    prepare 0.0215    bound 0.1548    transfer 0.0031    finalize 0.0031    
After pruning, left:  0

Back to Regular BaB

Result: safe in 2.2631 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 133, vnnlib ID: 133 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-36.45841980, -44.35070419, -34.18724823, -36.62807846, -41.51102829,
         -36.81817245, -39.17654037, -38.88699341, -42.89539719, -42.96294785]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [414]; unstable size 414; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 108, 1, 414] with unstable size 107 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 414] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 414] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [107]; unstable size 107; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 107] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 107] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.80952764, 9.28115177, 1.87684751, 6.70495224, 2.04463577, 4.42981815,
         4.07691669, 7.95990849, 7.91283607]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0441 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 134, vnnlib ID: 134 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.47599602, -23.78956413, -23.91806030, -25.75347519, -25.58520699,
         -27.02601433, -25.19198990, -27.62649536, -20.75136948, -23.69546700]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [952]; unstable size 952; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 268, 1, 952] with unstable size 267 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 952] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 952] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [267]; unstable size 267; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 267] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 267] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.86406422,  0.76336503,  2.41063476,  2.30971599,  3.50218749,
          1.55449724,  4.16273117, -1.88281894,  0.94847775]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.47599602, -23.78956413, -23.91806030, -25.75347519, -25.58520699,
         -27.02601433, -25.19198990, -27.62649536, -20.75136948, -23.69546700]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.47599602, -23.78956413, -23.91806030, -25.75347519, -25.58520699,
          -27.02601433, -25.19198990, -27.62649536, -20.75136948, -23.69546700]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.72462654]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.15396857,  1.01111114,  1.01111114,  ...,  1.02698421,
             1.04285717,  1.10634947],
           [ 1.02698421,  0.94761908,  0.94761908,  ...,  1.12222254,
             1.12222254,  1.16984153],
           [ 0.99523818,  0.91587305,  0.86825401,  ...,  1.12222254,
             1.13809550,  1.16984153],
           ...,
           [-0.14761895, -0.41746020, -0.43333322,  ..., -0.36984116,
            -0.33809513, -0.41746020],
           [-0.30634910, -0.56031746, -0.57619047,  ..., -0.68730158,
            -0.54444444, -0.36984116],
           [-0.22698402, -0.33809513, -0.40158719,  ..., -0.59206349,
            -0.32222211, -0.14761895]],

          [[ 1.20772982,  1.06280196,  1.06280196,  ...,  1.07890511,
             1.09500813,  1.15942061],
           [ 1.07890511,  0.99838978,  0.99838978,  ...,  1.17552364,
             1.17552364,  1.22383285],
           [ 1.04669893,  0.96618366,  0.91787446,  ...,  1.17552364,
             1.19162667,  1.22383285],
           ...,
           [-0.11272129, -0.38647330, -0.40257636,  ..., -0.33816412,
            -0.30595800, -0.38647330],
           [-0.27375188, -0.53140092, -0.54750401,  ..., -0.66022539,
            -0.51529789, -0.33816412],
           [-0.19323659, -0.30595800, -0.37037024,  ..., -0.56360704,
            -0.28985494, -0.11272129]],

          [[ 1.26086998,  1.12593722,  1.12593722,  ...,  1.14092970,
             1.15592217,  1.21589243],
           [ 1.14092970,  1.06596720,  1.06596720,  ...,  1.23088503,
             1.23088503,  1.27586246],
           [ 1.11094475,  1.03598225,  0.99100471,  ...,  1.23088503,
             1.24587750,  1.27586246],
           ...,
           [ 0.03148442, -0.22338814, -0.23838064,  ..., -0.17841063,
            -0.14842562, -0.22338814],
           [-0.11844061, -0.35832080, -0.37331331,  ..., -0.47826082,
            -0.34332830, -0.17841063],
           [-0.04347810, -0.14842562, -0.20839565,  ..., -0.38830581,
            -0.13343313,  0.03148442]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0516 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 135, vnnlib ID: 135 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.20746422, -11.40287113, -17.07642365, -16.43939400, -16.29893875,
         -16.93239021, -18.25842094, -16.83162689, -14.06174088, -12.06176949]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [503]; unstable size 503; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 222, 1, 503] with unstable size 221 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 503] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 503] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [221]; unstable size 221; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 221] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 221] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.14191914,  3.64040279,  2.98625898,  2.87868166,  3.34062910,
          4.70360136,  3.04852581,  1.37090325, -0.29452419]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.20746422, -11.40287113, -17.07642365, -16.43939400, -16.29893875,
         -16.93239021, -18.25842094, -16.83162689, -14.06174088, -12.06176949]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.94it/s]100%|██████████| 1/1 [00:00<00:00,  8.93it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.28001881, -10.99314785, -16.16373444, -15.54601288, -15.46127510,
          -16.03202248, -17.35618210, -15.82649708, -13.24569702, -11.18510056]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.19195271]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1145 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 25.241046905517578
alpha/beta optimization time: 1.2137484550476074
initial alpha-crown bounds: tensor([[ 3.18642426,  3.68983364,  3.03233433,  2.93258429,  3.39427853,
          4.75412750,  3.10958815,  1.40874910, -0.26687288]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.2668728828430176
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.61137795448303
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6113383769989
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61131525039673
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.61129426956177
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.61127519607544
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.61125326156616
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.6112344264984
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.61121463775635
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.6111958026886
Verifying property 8 with 1 instances.
##### Instance 135 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.26687288]], device='cuda:0') need to verify.
Model prediction is: tensor([-16.20746422, -11.40287113, -17.07642365, -16.43939400, -16.29893875,
        -16.93239021, -18.25842094, -16.83162689, -14.06174088, -12.06176949],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.26687288]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 503
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 219
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 745
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.679794311523438e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.26687169075012207
10 lb beta sum: 0.0, worst -0.2668788433074951
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    func 0.0530    
Accumulated time: func 0.0530    prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 20] 
split level 3: [/input-12, 32] 
split level 4: [/input-12, 89] 
split level 5: [/input-8, 164] 
split level 6: [/input-12, 12] 
split level 7: [/input-12, 97] 
split level 8: [/input-8, 156] 
split level 9: [/input-12, 36] 
split level 10: [/input-12, 2] 
split level 11: [/input-8, 163] 
split level 12: [/input-12, 79] 
split level 13: [/input-12, 10] 
split level 14: [/input-8, 419] 
split level 15: [/input, 406] 
split level 16: [/input-12, 24] 
split level 17: [/input-8, 313] 
split level 18: [/input-8, 1626] 
split level 19: [/input-8, 1634] 
split level 20: [/input-8, 469] 
split level 21: [/input-8, 1321] 
split level 22: [/input, 3478] 
split level 23: [/input-8, 166] 
split level 24: [/input-8, 403] 
split level 25: [/input, 391] 
split level 26: [/input-8, 1618] 
split level 27: [/input, 936] 
split level 28: [/input, 407] 
split level 29: [/input-12, 13] 
split level 30: [/input-8, 477] 
split level 31: [/input-8, 915] 
split level 32: [/input-8, 1068] 
split level 33: [/input-8, 592] 
split level 34: [/input-8, 405] 
split level 35: [/input-8, 932] 
split level 36: [/input, 916] 
split level 37: [/input, 886] 
split level 38: [/input-8, 906] 
split level 39: [/input-8, 269] 
split level 40: [/input-8, 745] 
split level 41: [/input-8, 1610] 
split level 42: [/input-8, 942] 
split level 43: [/input-8, 844] 
split level 44: [/input-8, 1298] 
split level 45: [/input-8, 802] 
split level 46: [/input, 3496] 
split level 47: [/input-8, 1677] 
split level 48: [/input-8, 1069] 
split level 49: [/input, 3493] 
split level 50: [/input-8, 1651] 
split level 51: [/input-8, 1355] 
split level 52: [/input-8, 1625] 
split level 53: [/input, 887] 
split level 54: [/input-8, 1590] 
split level 55: [/input-8, 46] 
split level 56: [/input-8, 1614] 
split level 57: [/input-8, 1572] 
split level 58: [/input, 932] 
split level 59: [/input-8, 783] 
split level 60: [/input-8, 1554] 
split level 61: [/input-8, 474] 
split level 62: [/input, 3464] 
split level 63: [/input-8, 1658] 
split level 64: [/input-8, 951] 
split level 65: [/input, 3556] 
split level 66: [/input-8, 1040] 
split level 67: [/input-8, 1230] 
split level 68: [/input, 358] 
split level 69: [/input, 3494] 
split level 70: [/input-8, 843] 
split level 71: [/input-8, 1779] 
split level 72: [/input, 1942] 
split level 73: [/input-8, 406] 
split level 74: [/input, 996] 
split level 75: [/input-8, 1599] 
split level 76: [/input, 501] 
split level 77: [/input-8, 1393] 
split level 78: [/input, 931] 
split level 79: [/input-8, 286] 
split level 80: [/input-8, 777] 
split level 81: [/input, 1012] 
split level 82: [/input-8, 810] 
split level 83: [/input-8, 1678] 
split level 84: [/input-8, 910] 
split level 85: [/input, 1304] 
split level 86: [/input-8, 1356] 
split level 87: [/input-8, 489] 
split level 88: [/input, 504] 
split level 89: [/input-8, 846] 
split level 90: [/input, 2952] 
split level 91: [/input-8, 948] 
split level 92: [/input-8, 1497] 
split level 93: [/input-8, 1296] 
split level 94: [/input-8, 957] 
split level 95: [/input-8, 1666] 
split level 96: [/input-8, 909] 
split level 97: [/input, 87] 
split level 98: [/input-8, 1498] 
split level 99: [/input, 1303] 
split level 100: [/input-8, 1367] 
split level 101: [/input-8, 1315] 
split level 102: [/input, 506] 
split level 103: [/input, 3002] 
split level 104: [/input-8, 1780] 
split level 105: [/input, 510] 
split level 106: [/input, 2709] 
split level 107: [/input, 3221] 
split level 108: [/input-8, 395] 
split level 109: [/input, 3021] 
split level 110: [/input, 982] 
split level 111: [/input-8, 1360] 
split level 112: [/input, 2327] 
split level 113: [/input, 3570] 
split level 114: [/input, 1926] 
split level 115: [/input, 3576] 
split level 116: [/input, 3577] 
split level 117: [/input, 3572] 
split level 118: [/input-8, 1935] 
split level 119: [/input, 1013] 
split level 120: [/input, 1912] 
split level 121: [/input, 2278] 
split level 122: [/input-8, 1306] 
split level 123: [/input, 921] 
split level 124: [/input, 997] 
split level 125: [/input, 2916] 
split level 126: [/input-8, 1170] 
split level 127: [/input, 2885] 
split level 128: [/input, 4035] 
split level 129: [/input, 2887] 
split level 130: [/input, 1014] 
split level 131: [/input-8, 219] 
split level 132: [/input, 505] 
split level 133: [/input, 998] 
split level 134: [/input-8, 1696] 
split level 135: [/input, 2215] 
split level 136: [/input, 2715] 
split level 137: [/input, 2275] 
split level 138: [/input-8, 301] 
split level 139: [/input, 508] 
split level 140: [/input, 2214] 
split level 141: [/input, 1925] 
split level 142: [/input, 2072] 
split level 143: [/input-8, 371] 
split level 144: [/input, 2264] 
split level 145: [/input-8, 33] 
split level 146: [/input, 4034] 
split level 147: [/input-8, 1743] 
split level 148: [/input-8, 812] 
split level 149: [/input, 2707] 
split level 150: [/input-8, 913] 
split level 151: [/input, 509] 
split level 152: [/input, 1990] 
split level 153: [/input, 507] 
split level 154: [/input-8, 329] 
split level 155: [/input-8, 263] 
split level 156: [/input-8, 1091] 
split level 157: [/input, 23] 
split level 158: [/input, 2550] 
split level 159: [/input, 2549] 
split level 160: [/input-8, 39] 
split level 161: [/input, 2087] 
split level 162: [/input, 3020] 
split level 163: [/input, 1883] 
split level 164: [/input, 2535] 
split level 165: [/input-8, 1504] 
split level 166: [/input, 2263] 
split level 167: [/input, 3252] 
split level 168: [/input, 1334] 
split level 169: [/input, 206] 
split level 170: [/input, 3582] 
split level 171: [/input, 2231] 
split level 172: [/input, 1460] 
split level 173: [/input, 2519] 
split level 174: [/input-8, 835] 
split level 175: [/input, 2280] 
split level 176: [/input, 1867] 
split level 177: [/input, 3436] 
split level 178: [/input, 1989] 
split level 179: [/input, 873] 
split level 180: [/input, 281] 
split level 181: [/input-8, 1687] 
split level 182: [/input, 2959] 
split level 183: [/input, 1851] 
split level 184: [/input, 2233] 
split level 185: [/input, 1924] 
split level 186: [/input, 853] 
split level 187: [/input, 113] 
split level 188: [/input-8, 775] 
split level 189: [/input, 2281] 
split level 190: [/input-8, 496] 
split level 191: [/input, 2830] 
split level 192: [/input, 3578] 
split level 193: [/input, 648] 
split level 194: [/input, 2056] 
split level 195: [/input-8, 210] 
split level 196: [/input, 875] 
split level 197: [/input, 2893] 
split level 198: [/input, 2213] 
split level 199: [/input-8, 326] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.26678693294525146
10 lb beta sum: 0.0, worst -0.26678454875946045
Time: prepare 0.0117    bound 0.0976    transfer 0.0027    finalize 0.0027    func 0.1172    
Accumulated time: func 0.1702    prepare 0.0217    bound 0.1501    transfer 0.0028    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(-0.07029063) min lb tensor(-0.26677942)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.009888410568237305 
BICCOS Cumulative time: 0.009888410568237305
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25838 (1), -0.25774 (1), -0.25718 (1), -0.25708 (1), -0.25698 (1), -0.25651 (1), -0.25638 (1), -0.25605 (1), -0.25589 (1), -0.25549 (1), -0.25532 (1), -0.25421 (1), -0.25325 (1), -0.25261 (1), -0.25239 (1), -0.25140 (1), -0.25080 (1), -0.25010 (1), -0.25007 (1), -0.24904 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5159    set_bounds 0.0143    solve 0.1173    add 0.0690    
Accumulated time: pickout 0.0003    decision 0.5159    set_bounds 0.0143    solve 0.1173    add 0.0690    
Current (lb-rhs): -0.2583763599395752
50 domains visited
Cumulative time: 0.7953169345855713

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 20] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 68] [/input-12, 71] [/input-12, 71] [/input-12, 71] 
split level 1: [/input-12, 20] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 20] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 32] [/input-12, 32] [/input-12, 20] [/input-12, 20] [/input-12, 32] [/input-12, 20] [/input-12, 32] [/input-12, 20] [/input-12, 20] [/input-12, 20] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2401587963104248
10 lb beta sum: 0.0, worst -0.24005341529846191
Time: prepare 0.0125    bound 0.0970    transfer 0.0011    finalize 0.0024    func 0.1155    
Accumulated time: func 0.2857    prepare 0.0344    bound 0.2471    transfer 0.0039    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.11847839) min lb tensor(-0.24003470)
Number of Verified Splits: 25 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.01353907585144043 
BICCOS Cumulative time: 0.023427486419677734
Preprocessing time: 0.011757850646972656 Inference time: 0.0010640621185302734 Add cuts time: 0.0003898143768310547 Cut analysis time: 0.0003273487091064453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07046 (2), -0.07039 (2), -0.07000 (2), -0.06966 (2), -0.06952 (2), -0.06902 (2), -0.06901 (2), -0.06894 (2), -0.06758 (2), -0.06705 (2), -0.06702 (2), -0.06641 (2), -0.06610 (2), -0.06562 (2), -0.06428 (2), -0.06404 (2), -0.06400 (2), -0.06115 (2), -0.06073 (2), -0.05999 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0129    solve 0.1156    add 0.0774    
Accumulated time: pickout 0.0014    decision 0.5354    set_bounds 0.0271    solve 0.2328    add 0.1464    
Current (lb-rhs): -0.07045984268188477
100 domains visited
Cumulative time: 1.035463809967041

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 71] [/input-12, 68] [/input-12, 20] [/input-12, 20] [/input-12, 68] [/input-12, 20] [/input-12, 68] [/input-12, 68] [/input-12, 20] 
split level 1: [/input-12, 68] [/input-12, 68] [/input-12, 20] [/input-12, 68] [/input-12, 68] [/input-12, 20] [/input-12, 68] [/input-12, 20] [/input-12, 20] [/input-12, 68] 
split level 2: [/input-12, 89] [/input-12, 89] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 89] [/input-12, 32] [/input-12, 89] [/input-12, 32] [/input-12, 32] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05320918560028076
10 lb beta sum: 0.5451804399490356, worst -0.03321433067321777
Time: prepare 0.0070    bound 0.1177    transfer 0.0011    finalize 0.0022    func 0.1311    
Accumulated time: func 0.4168    prepare 0.0417    bound 0.3647    transfer 0.0050    finalize 0.0074    
all_split False
======================Cut inference begins======================
max lb tensor(0.29121810) min lb tensor(-0.02850533)
Number of Verified Splits: 389 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 13
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.03738284111022949 
BICCOS Cumulative time: 0.06081032752990723
Preprocessing time: 0.011722087860107422 Inference time: 0.017218828201293945 Add cuts time: 0.007965326309204102 Cut analysis time: 0.00047659873962402344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02851 (3), -0.02805 (3), -0.01247 (3), -0.01216 (3), -0.00101 (3), -0.00060 (3), -0.00051 (3), -0.00042 (3), 
Length of domains: 8
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0152    solve 0.1312    add 0.1081    
Accumulated time: pickout 0.0024    decision 0.5548    set_bounds 0.0423    solve 0.3640    add 0.2546    
Current (lb-rhs): -0.028505325317382812
108 domains visited
Cumulative time: 1.3479101657867432

Shallow-BaB round 4
batch: 8
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 32] [/input-12, 32] 
split level 1: [/input-12, 89] [/input-12, 32] [/input-12, 89] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 89] [/input-12, 89] 
split level 2: [/input-8, 164] [/input-12, 89] [/input-8, 164] [/input-12, 89] [/input-8, 164] [/input-8, 164] [/input-8, 164] [/input-8, 164] 
split level 3: [/input-12, 12] [/input-8, 164] [/input-12, 12] [/input-8, 164] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 4: [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] 
split level 5: [/input-8, 156] [/input-8, 156] [/input-8, 156] [/input-8, 156] [/input-8, 156] [/input-8, 156] [/input-8, 156] [/input-8, 156] 
split level 6: [/input-12, 2] [/input-12, 36] [/input-12, 2] [/input-12, 36] [/input-12, 2] [/input-12, 2] [/input-12, 36] [/input-12, 2] 
split level 7: [/input-12, 36] [/input-12, 2] [/input-12, 36] [/input-12, 2] [/input-12, 36] [/input-12, 36] [/input-12, 2] [/input-12, 36] 
split level 8: [/input-8, 163] [/input-12, 79] [/input-8, 163] [/input-12, 79] [/input-8, 163] [/input-8, 163] [/input-8, 163] [/input-8, 163] 
split level 9: [/input-12, 79] [/input-8, 163] [/input-12, 79] [/input-8, 163] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
split level 10: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 11: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 12: [/input-8, 1626] [/input-8, 166] [/input-8, 1626] [/input-8, 166] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] 
split level 13: [/input-8, 166] [/input-8, 1626] [/input-8, 166] [/input-8, 1626] [/input-8, 166] [/input-8, 166] [/input-8, 166] [/input-8, 166] 
split level 14: [/input-8, 1321] [/input-8, 915] [/input-8, 1321] [/input-8, 915] [/input-8, 1321] [/input-8, 1321] [/input-8, 1321] [/input-8, 1321] 
split level 15: [/input, 3478] [/input-8, 1321] [/input, 3478] [/input-8, 1321] [/input, 3478] [/input, 3478] [/input, 3478] [/input, 3478] 
split level 16: [/input-8, 915] [/input, 3478] [/input-8, 915] [/input, 3478] [/input-8, 915] [/input-8, 915] [/input-8, 915] [/input-8, 915] 
split level 17: [/input, 391] [/input, 391] [/input, 391] [/input, 391] [/input, 391] [/input, 391] [/input, 391] [/input, 391] 
split level 18: [/input-8, 477] [/input-8, 906] [/input-8, 477] [/input-8, 906] [/input-8, 477] [/input-8, 477] [/input-8, 477] [/input-8, 477] 
split level 19: [/input, 407] [/input, 407] [/input, 407] [/input, 407] [/input, 407] [/input, 407] [/input-8, 906] [/input-8, 906] 
split level 20: [/input-8, 906] [/input-8, 1677] [/input-8, 906] [/input-8, 1677] [/input-8, 1677] [/input-8, 906] [/input, 407] [/input, 407] 
split level 21: [/input-8, 942] [/input-8, 1554] [/input-8, 1554] [/input-8, 1554] [/input-8, 1554] [/input-8, 1554] [/input-8, 1554] [/input-8, 1554] 
split level 22: [/input-8, 1554] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] 
split level 23: [/input, 916] [/input, 916] [/input, 916] [/input, 916] [/input, 916] [/input, 916] [/input, 916] [/input, 916] 
split level 24: [/input-8, 1678] [/input-8, 1678] [/input-8, 1678] [/input-8, 1678] [/input-8, 1678] [/input-8, 1678] [/input-8, 1678] [/input-8, 1678] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0359194278717041

all verified at 5th iter
Time: prepare 0.0075    bound 0.0397    transfer 0.0011    finalize 0.0023    func 0.0531    
Accumulated time: func 0.4699    prepare 0.0504    bound 0.4044    transfer 0.0061    finalize 0.0097    
all_split False
======================Cut inference begins======================
max lb tensor(0.28778231) min lb tensor(0.00172281)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.03667473793029785 
BICCOS Cumulative time: 0.09748506546020508
Preprocessing time: 0.011461496353149414 Inference time: 0.018973350524902344 Add cuts time: 0.005795478820800781 Cut analysis time: 0.0004444122314453125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0006    decision 0.0766    set_bounds 0.0125    solve 0.0532    add 0.1427    
Accumulated time: pickout 0.0030    decision 0.6314    set_bounds 0.0547    solve 0.4172    add 0.3973    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
108 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 20]), tensor([-1., -1.]), tensor([0, 0]), tensor([4.73639461e-11, 4.44250554e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 20, 68]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([4.73639461e-11, 1.21488616e-01, 1.13132402e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 20, 68, 32]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([4.73639461e-11, 1.21488616e-01, 2.61550415e-02, 5.12010306e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 20, 68, 32]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([4.73639461e-11, 1.21488616e-01, 2.61550415e-02, 7.91035146e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 12, 20]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([7.31178356e-14, 4.10498828e-02, 9.89705175e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 12, 20]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([7.31178356e-14, 4.10498828e-02, 1.16180226e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 12, 20]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([7.31178356e-14, 2.54407395e-02, 1.02479279e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 12, 20]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([7.31178356e-14, 2.54407395e-02, 1.19381472e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13282597064971924
10 lb beta sum: 0.45151156187057495, worst -0.08267921209335327
Time: prepare 0.0004    bound 0.1272    transfer 0.0001    finalize 0.0002    func 0.1280    
Accumulated time: func 0.5979    prepare 0.0509    bound 0.5316    transfer 0.0063    finalize 0.0099    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] 
split level 1: [/input-12, 32] 
split level 2: [/input-12, 89] 
split level 3: [/input-12, 12] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 36] 
split level 6: [/input-8, 163] 
split level 7: [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493062496185303, worst 0.0011293888092041016

all verified at 0th iter
Time: prepare 0.0112    bound 0.0049    transfer 0.0017    finalize 0.0013    func 0.0207    
Accumulated time: func 0.6186    prepare 0.0624    bound 0.5365    transfer 0.0080    finalize 0.0112    
all_split False
======================Cut inference begins======================
max lb tensor(0.44130194) min lb tensor(0.00112939)
Number of Verified Splits: 256 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0003108978271484375 
BICCOS Cumulative time: 0.09779596328735352
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.0216    set_bounds 0.0247    solve 0.0208    add 0.0001    
Accumulated time: pickout 0.0034    decision 0.6530    set_bounds 0.0794    solve 0.4380    add 0.3973    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
108 domains visited
Cumulative time: 1.8861255645751953

Result: safe in 3.4492 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 136, vnnlib ID: 136 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.03878975, -27.34531403, -23.53932953, -24.00347710, -23.92297554,
         -24.22077560, -25.12296104, -25.69461441, -24.00042725, -27.72712517]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [585]; unstable size 585; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 196, 1, 585] with unstable size 195 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 585] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 585] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [195]; unstable size 195; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 195] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 195] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.34309196, 0.87681007, 1.16530991, 1.17494893, 1.34177256, 2.16514826,
         2.73782158, 1.01523054, 4.69900179]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0430 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 137, vnnlib ID: 137 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.16277122, -21.12893295, -16.04788589, -16.93409729, -16.10508919,
         -17.10481453, -15.34734917, -18.76787186, -21.06470108, -20.31587410]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [438]; unstable size 438; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 276, 1, 438] with unstable size 275 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 438] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 438] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [275]; unstable size 275; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 275] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 275] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.22114444,  4.09420586, -0.54178762,  0.56779706, -0.32674569,
          0.62577593,  1.91951919,  3.76403713,  3.22747231]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.16277122, -21.12893295, -16.04788589, -16.93409729, -16.10508919,
         -17.10481453, -15.34734917, -18.76787186, -21.06470108, -20.31587410]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.92it/s]100%|██████████| 1/1 [00:00<00:00,  8.91it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.00904274, -21.11783409, -15.79992867, -16.90988350, -16.01198578,
          -17.07268524, -15.70636559, -18.61373138, -21.00964928, -20.24596214],
         [-20.00904274, -21.11783409, -15.79992867, -16.90988350, -16.01198578,
          -17.07268524, -15.70636559, -18.61373138, -21.00964928, -20.24596214]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.09356308, 0.30562019]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1150 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 17.213319778442383
alpha/beta optimization time: 1.2113885879516602
initial alpha-crown bounds: tensor([[ 3.30038977,  4.16773224, -0.48484468,  0.61480612, -0.26430136,
          0.68667132,  2.01555729,  3.85170722,  3.32560158]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.4848446846008301
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6248800754547
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.62484121322632
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.62481808662415
Verifying property 2 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.48484468]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.16277122, -21.12893295, -16.04788589, -16.93409729, -16.10508919,
        -17.10481453, -15.34734917, -18.76787186, -21.06470108, -20.31587410],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.48484468]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 438
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 269
Node /15 input 0: size torch.Size([100]) unstable 17
-----------------
# of unstable neurons: 724
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010418891906738281
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.48484236001968384
10 lb beta sum: 0.0, worst -0.4848472476005554
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    func 0.0526    
Accumulated time: func 0.0526    prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 59] 
split level 3: [/input-12, 72] 
split level 4: [/input-12, 56] 
split level 5: [/input-12, 61] 
split level 6: [/input-12, 12] 
split level 7: [/input-12, 7] 
split level 8: [/input-12, 34] 
split level 9: [/input-12, 6] 
split level 10: [/input-8, 1635] 
split level 11: [/input-12, 68] 
split level 12: [/input-8, 474] 
split level 13: [/input-8, 1619] 
split level 14: [/input-8, 811] 
split level 15: [/input-8, 157] 
split level 16: [/input-8, 1636] 
split level 17: [/input-8, 91] 
split level 18: [/input-8, 1249] 
split level 19: [/input-8, 804] 
split level 20: [/input-8, 1259] 
split level 21: [/input-8, 1939] 
split level 22: [/input-8, 476] 
split level 23: [/input-8, 1725] 
split level 24: [/input-8, 44] 
split level 25: [/input-8, 1580] 
split level 26: [/input-12, 20] 
split level 27: [/input-8, 99] 
split level 28: [/input-8, 1718] 
split level 29: [/input-8, 1963] 
split level 30: [/input-8, 803] 
split level 31: [/input-8, 418] 
split level 32: [/input-8, 161] 
split level 33: [/input-8, 92] 
split level 34: [/input-8, 269] 
split level 35: [/input-12, 97] 
split level 36: [/input-8, 932] 
split level 37: [/input-8, 757] 
split level 38: [/input-8, 1954] 
split level 39: [/input-8, 406] 
split level 40: [/input-8, 98] 
split level 41: [/input-8, 54] 
split level 42: [/input-8, 1644] 
split level 43: [/input-8, 1962] 
split level 44: [/input-8, 428] 
split level 45: [/input-8, 146] 
split level 46: [/input-8, 481] 
split level 47: [/input-8, 1645] 
split level 48: [/input-8, 1581] 
split level 49: [/input-8, 1258] 
split level 50: [/input-8, 43] 
split level 51: [/input-8, 482] 
split level 52: [/input-8, 914] 
split level 53: [/input-8, 38] 
split level 54: [/input-8, 153] 
split level 55: [/input-8, 284] 
split level 56: [/input-8, 107] 
split level 57: [/input-8, 1241] 
split level 58: [/input-8, 426] 
split level 59: [/input-8, 755] 
split level 60: [/input-8, 28] 
split level 61: [/input-8, 1929] 
split level 62: [/input-8, 483] 
split level 63: [/input-8, 922] 
split level 64: [/input-8, 1568] 
split level 65: [/input, 2988] 
split level 66: [/input-8, 785] 
split level 67: [/input-8, 347] 
split level 68: [/input-8, 441] 
split level 69: [/input-8, 1650] 
split level 70: [/input-8, 491] 
split level 71: [/input-8, 1556] 
split level 72: [/input-8, 790] 
split level 73: [/input-8, 1579] 
split level 74: [/input, 3054] 
split level 75: [/input-8, 40] 
split level 76: [/input-8, 401] 
split level 77: [/input-8, 465] 
split level 78: [/input-8, 404] 
split level 79: [/input-8, 931] 
split level 80: [/input, 172] 
split level 81: [/input-8, 722] 
split level 82: [/input-8, 166] 
split level 83: [/input-8, 899] 
split level 84: [/input-8, 66] 
split level 85: [/input-8, 505] 
split level 86: [/input-8, 1614] 
split level 87: [/input-8, 588] 
split level 88: [/input-8, 1187] 
split level 89: [/input-8, 397] 
split level 90: [/input-8, 333] 
split level 91: [/input-8, 145] 
split level 92: [/input-8, 1027] 
split level 93: [/input-8, 1936] 
split level 94: [/input-8, 186] 
split level 95: [/input-8, 749] 
split level 96: [/input-8, 41] 
split level 97: [/input-8, 490] 
split level 98: [/input-8, 65] 
split level 99: [/input-8, 913] 
split level 100: [/input-8, 357] 
split level 101: [/input-8, 1248] 
split level 102: [/input-8, 612] 
split level 103: [/input-8, 1931] 
split level 104: [/input-8, 63] 
split level 105: [/input-8, 1283] 
split level 106: [/input, 378] 
split level 107: [/input-8, 1603] 
split level 108: [/input-8, 25] 
split level 109: [/input-8, 1242] 
split level 110: [/input-8, 312] 
split level 111: [/input-8, 1238] 
split level 112: [/input, 3383] 
split level 113: [/input-8, 449] 
split level 114: [/input, 3034] 
split level 115: [/input-8, 1193] 
split level 116: [/input-8, 342] 
split level 117: [/input-8, 1395] 
split level 118: [/input, 3038] 
split level 119: [/input-8, 1706] 
split level 120: [/input, 3167] 
split level 121: [/input-8, 1602] 
split level 122: [/input, 1124] 
split level 123: [/input-8, 177] 
split level 124: [/input-8, 1240] 
split level 125: [/input, 3300] 
split level 126: [/input, 1332] 
split level 127: [/input-8, 1596] 
split level 128: [/input-8, 1243] 
split level 129: [/input-8, 101] 
split level 130: [/input-8, 1224] 
split level 131: [/input-8, 1693] 
split level 132: [/input, 3161] 
split level 133: [/input-8, 1529] 
split level 134: [/input-8, 1642] 
split level 135: [/input-8, 1214] 
split level 136: [/input, 1196] 
split level 137: [/input-8, 236] 
split level 138: [/input-8, 326] 
split level 139: [/input-8, 169] 
split level 140: [/input-8, 2018] 
split level 141: [/input-8, 716] 
split level 142: [/input-8, 138] 
split level 143: [/input-8, 1167] 
split level 144: [/input-8, 587] 
split level 145: [/input-8, 1545] 
split level 146: [/input-8, 139] 
split level 147: [/input, 1450] 
split level 148: [/input-8, 175] 
split level 149: [/input-8, 1331] 
split level 150: [/input, 1080] 
split level 151: [/input, 669] 
split level 152: [/input, 476] 
split level 153: [/input-8, 248] 
split level 154: [/input, 501] 
split level 155: [/input-8, 1164] 
split level 156: [/input, 1400] 
split level 157: [/input-8, 2047] 
split level 158: [/input-8, 440] 
split level 159: [/input-8, 589] 
split level 160: [/input-8, 1694] 
split level 161: [/input, 1334] 
split level 162: [/input-8, 1175] 
split level 163: [/input, 1021] 
split level 164: [/input, 4068] 
split level 165: [/input, 1686] 
split level 166: [/input, 2613] 
split level 167: [/input-8, 204] 
split level 168: [/input, 3286] 
split level 169: [/input-8, 238] 
split level 170: [/input-8, 1699] 
split level 171: [/input, 377] 
split level 172: [/input, 974] 
split level 173: [/input-8, 395] 
split level 174: [/input-8, 1225] 
split level 175: [/input, 218] 
split level 176: [/input, 3926] 
split level 177: [/input, 3125] 
split level 178: [/input, 1599] 
split level 179: [/input, 1565] 
split level 180: [/input, 1652] 
split level 181: [/input, 1018] 
split level 182: [/input-8, 334] 
split level 183: [/input, 748] 
split level 184: [/input-8, 1705] 
split level 185: [/input, 1615] 
split level 186: [/input-8, 1775] 
split level 187: [/input-8, 1165] 
split level 188: [/input, 1180] 
split level 189: [/input-8, 865] 
split level 190: [/input-8, 1154] 
split level 191: [/input, 3541] 
split level 192: [/input-8, 1714] 
split level 193: [/input-8, 134] 
split level 194: [/input, 209] 
split level 195: [/input, 3166] 
split level 196: [/input-8, 227] 
split level 197: [/input, 3437] 
split level 198: [/input, 1490] 
split level 199: [/input, 2645] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.48483794927597046
10 lb beta sum: 0.0, worst -0.48483479022979736
Time: prepare 0.0114    bound 0.1050    transfer 0.0027    finalize 0.0029    func 0.1246    
Accumulated time: func 0.1772    prepare 0.0212    bound 0.1571    transfer 0.0028    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(-0.05249649) min lb tensor(-0.48483169)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.01014256477355957 
BICCOS Cumulative time: 0.01014256477355957
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.46542 (1), -0.46539 (1), -0.46526 (1), -0.46516 (1), -0.46444 (1), -0.46420 (1), -0.46408 (1), -0.46403 (1), -0.46206 (1), -0.46177 (1), -0.46133 (1), -0.46098 (1), -0.46044 (1), -0.45939 (1), -0.45896 (1), -0.45891 (1), -0.45799 (1), -0.45754 (1), -0.45753 (1), -0.45485 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5099    set_bounds 0.0086    solve 0.1247    add 0.0717    
Accumulated time: pickout 0.0003    decision 0.5099    set_bounds 0.0086    solve 0.1247    add 0.0717    
Current (lb-rhs): -0.4654209017753601
50 domains visited
Cumulative time: 0.7826423645019531

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 31] [/input-12, 31] [/input-12, 8] [/input-12, 31] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 59] [/input-12, 8] [/input-12, 59] [/input-12, 8] 
split level 2: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 72] [/input-12, 59] [/input-12, 72] [/input-12, 59] 
split level 3: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 6] [/input-12, 72] [/input-12, 6] [/input-12, 6] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.445298433303833
10 lb beta sum: 0.0, worst -0.4451834559440613
Time: prepare 0.0125    bound 0.0957    transfer 0.0012    finalize 0.0020    func 0.1140    
Accumulated time: func 0.2911    prepare 0.0340    bound 0.2528    transfer 0.0040    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.24742889) min lb tensor(-0.44515139)
Number of Verified Splits: 27 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.014245033264160156 
BICCOS Cumulative time: 0.024387598037719727
Preprocessing time: 0.011731863021850586 Inference time: 0.0011699199676513672 Add cuts time: 0.0007159709930419922 Cut analysis time: 0.0006272792816162109
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19721 (2), -0.19664 (2), -0.19512 (2), -0.19194 (2), -0.18706 (2), -0.18079 (2), -0.18070 (2), -0.17756 (2), -0.17713 (2), -0.17694 (2), -0.17566 (2), -0.17544 (2), -0.16937 (2), -0.15780 (2), -0.15107 (2), -0.14526 (2), -0.14252 (2), -0.14146 (2), -0.13971 (2), -0.13862 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0200    set_bounds 0.0130    solve 0.1141    add 0.0827    
Accumulated time: pickout 0.0013    decision 0.5300    set_bounds 0.0216    solve 0.2387    add 0.1544    
Current (lb-rhs): -0.19721364974975586
100 domains visited
Cumulative time: 1.0285286903381348

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 59] [/input-12, 59] [/input-12, 31] [/input-12, 8] [/input-12, 31] 
split level 1: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 31] [/input-12, 72] [/input-12, 72] [/input-12, 59] [/input-12, 31] [/input-12, 72] 
split level 2: [/input-12, 72] [/input-12, 72] [/input-12, 61] [/input-12, 61] [/input-12, 72] [/input-12, 6] [/input-12, 61] [/input-12, 72] [/input-12, 72] [/input-12, 6] 
split level 3: [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-8, 1636] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1755073070526123
10 lb beta sum: 0.771496057510376, worst -0.14859506487846375
Time: prepare 0.0062    bound 0.1219    transfer 0.0011    finalize 0.0025    func 0.1343    
Accumulated time: func 0.4255    prepare 0.0405    bound 0.3748    transfer 0.0051    finalize 0.0075    
all_split False
======================Cut inference begins======================
max lb tensor(0.73487508) min lb tensor(-0.14463916)
Number of Verified Splits: 250 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 15
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.029914379119873047 
BICCOS Cumulative time: 0.05430197715759277
Preprocessing time: 0.011626958847045898 Inference time: 0.011835813522338867 Add cuts time: 0.005759000778198242 Cut analysis time: 0.0006926059722900391
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11632 (3), -0.11607 (3), -0.11482 (3), -0.11201 (3), -0.11144 (3), -0.11024 (3), -0.11016 (3), -0.10989 (3), -0.10925 (3), -0.10795 (3), -0.10681 (3), -0.10649 (3), -0.10524 (3), -0.10361 (3), -0.10191 (3), -0.10186 (3), -0.09926 (3), -0.09781 (3), -0.09188 (3), -0.09028 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0151    solve 0.1345    add 0.1152    
Accumulated time: pickout 0.0023    decision 0.5495    set_bounds 0.0367    solve 0.3732    add 0.2696    
Current (lb-rhs): -0.11632068455219269
150 domains visited
Cumulative time: 1.343946933746338

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 59] [/input-12, 31] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 31] 
split level 1: [/input-12, 61] [/input-12, 61] [/input-12, 59] [/input-12, 59] [/input-12, 72] [/input-12, 59] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 59] 
split level 2: [/input-12, 6] [/input-12, 6] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 72] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 6] 
split level 3: [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-12, 6] [/input-8, 1619] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16184735298156738
10 lb beta sum: 1.7259042263031006, worst -0.04894775152206421
Time: prepare 0.0068    bound 0.1333    transfer 0.0011    finalize 0.0020    func 0.1459    
Accumulated time: func 0.5714    prepare 0.0476    bound 0.5081    transfer 0.0062    finalize 0.0096    
all_split False
======================Cut inference begins======================
max lb tensor(0.50891483) min lb tensor(-0.04643619)
Number of Verified Splits: 312 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 12
#cuts 4-6: 12
#cuts >= 20: 0
BICCOS time: 0.03554654121398926 
BICCOS Cumulative time: 0.08984851837158203
Preprocessing time: 0.011373758316040039 Inference time: 0.014861345291137695 Add cuts time: 0.008595466613769531 Cut analysis time: 0.0007159709930419922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04644 (4), -0.04642 (4), -0.04641 (4), -0.04640 (4), -0.04636 (4), -0.04634 (4), -0.04560 (4), -0.04550 (4), -0.04486 (4), -0.04486 (4), -0.04483 (4), -0.04479 (4), -0.03941 (4), -0.03940 (4), -0.03836 (4), -0.03815 (4), -0.03063 (4), -0.03062 (4), -0.03043 (4), -0.02889 (4), 
Length of domains: 48
Time: pickout 0.0010    decision 0.0200    set_bounds 0.0146    solve 0.1460    add 0.2673    
Accumulated time: pickout 0.0033    decision 0.5695    set_bounds 0.0513    solve 0.5192    add 0.5369    
Current (lb-rhs): -0.046436190605163574
198 domains visited
Cumulative time: 1.8286590576171875

Shallow-BaB round 5
batch: 48
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 59] [/input-12, 72] [/input-12, 59] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 2: [/input-12, 61] [/input-12, 61] [/input-8, 1636] [/input-8, 1636] [/input-12, 6] [/input-12, 6] [/input-12, 12] [/input-12, 12] [/input-8, 1259] [/input-8, 1259] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 1.849029302597046, worst -0.5160455107688904
10 lb beta sum: 2.3633031845092773, worst -0.014735817909240723
Time: prepare 0.0159    bound 0.1309    transfer 0.0016    finalize 0.0022    func 0.1533    
Accumulated time: func 0.7246    prepare 0.0637    bound 0.6390    transfer 0.0079    finalize 0.0118    
all_split False
======================Cut inference begins======================
max lb tensor(0.64480138) min lb tensor(-0.01285344)
Number of Verified Splits: 354 of 384
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.036803483963012695 
BICCOS Cumulative time: 0.12665200233459473
Preprocessing time: 0.011255741119384766 Inference time: 0.01886582374572754 Add cuts time: 0.006278514862060547 Cut analysis time: 0.00040340423583984375
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0223    set_bounds 0.0143    solve 0.1534    add 0.0254    
Accumulated time: pickout 0.0043    decision 0.5918    set_bounds 0.0656    solve 0.6725    add 0.5623    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
198 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8]), tensor([-1., -1.]), tensor([0, 0]), tensor([4.40239400e-10, 7.51472861e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1636], [-1.0], [0], [2.8295691222646784e+16], [3]), '/input-12': (tensor([31,  8, 59, 72]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([4.40239400e-10, 2.18503997e-01, 5.38527668e-02, 3.77165526e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1636], [-1.0], [0], [2.8295691222646784e+16], [3]), '/input-12': (tensor([31,  8, 59, 72]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([4.40239400e-10, 2.18503997e-01, 5.38527668e-02, 5.56580871e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1636], [1.0], [0], [6.537055341482301e-10], [3]), '/input-12': (tensor([31,  8, 59, 72]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([4.40239400e-10, 2.18503997e-01, 5.38527668e-02, 1.09555766e-01]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1636], [1.0], [0], [6.537055341482301e-10], [3]), '/input-12': (tensor([31,  8, 59, 72]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([4.40239400e-10, 2.18503997e-01, 5.38527668e-02, 5.49099892e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8, 59]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([4.40239400e-10, 2.18503997e-01, 2.20907778e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8]), tensor([ 1., -1.]), tensor([0, 0]), tensor([4.40239400e-10, 7.29681104e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8, 59]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([4.40239400e-10, 2.58246839e-01, 2.93179024e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8, 59]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([4.40239400e-10, 2.58246839e-01, 1.05128691e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  9
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.28430062532424927
10 lb beta sum: 1.5726220607757568, worst -0.19431912899017334
Time: prepare 0.0005    bound 0.1134    transfer 0.0001    finalize 0.0002    func 0.1143    
Accumulated time: func 0.8390    prepare 0.0642    bound 0.7524    transfer 0.0080    finalize 0.0120    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] 
split level 1: [/input-12, 72] [/input-12, 72] 
split level 2: [/input-12, 61] [/input-12, 61] 
split level 3: [/input-12, 12] [/input-12, 12] 
split level 4: [/input-12, 6] [/input-12, 6] 
split level 5: [/input-8, 1619] [/input-8, 1619] 
split level 6: [/input-8, 1636] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2279794216156006, worst -0.152679443359375
10 lb beta sum: 2.2279794216156006, worst -0.15221941471099854
Time: prepare 0.0111    bound 0.1156    transfer 0.0008    finalize 0.0013    func 0.1306    
Accumulated time: func 0.9695    prepare 0.0757    bound 0.8681    transfer 0.0088    finalize 0.0133    
all_split False
======================Cut inference begins======================
max lb tensor(0.99977833) min lb tensor(-0.15198684)
Number of Verified Splits: 241 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.00031280517578125 
BICCOS Cumulative time: 0.12696480751037598
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15199 (7), -0.14584 (7), -0.13118 (7), -0.12775 (7), -0.12466 (7), -0.12136 (7), -0.10488 (7), -0.09836 (7), -0.08382 (7), -0.07743 (7), -0.05882 (7), -0.05224 (7), -0.03015 (7), -0.02278 (7), -0.00555 (7), 
Length of domains: 15
Time: pickout 0.0005    decision 0.0196    set_bounds 0.0223    solve 0.1306    add 0.0009    
Accumulated time: pickout 0.0048    decision 0.6114    set_bounds 0.0878    solve 0.8031    add 0.5632    
Current (lb-rhs): -0.15198683738708496
213 domains visited
Cumulative time: 2.3918416500091553

BaB round 2
batch: 15
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 2: [/input-8, 1259] [/input-8, 99] [/input-8, 476] [/input-8, 99] [/input-8, 1259] [/input-8, 99] [/input-8, 476] [/input-8, 99] [/input-8, 1259] [/input-8, 1644] 
split level 3: [/input-8, 1718] [/input-8, 1644] [/input-8, 1718] [/input-8, 428] [/input-8, 1718] [/input-8, 1644] [/input-8, 1718] [/input-8, 428] [/input-8, 1718] [/input-8, 99] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2279765605926514, worst -0.13884365558624268
10 lb beta sum: 2.2279765605926514, worst -0.1386423110961914
Time: prepare 0.0105    bound 0.1234    transfer 0.0018    finalize 0.0012    func 0.1385    
Accumulated time: func 1.1080    prepare 0.0865    bound 0.9915    transfer 0.0105    finalize 0.0145    
all_split False
======================Cut inference begins======================
max lb tensor(0.34854066) min lb tensor(-0.13852119)
Number of Verified Splits: 187 of 240
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.00031495094299316406 
BICCOS Cumulative time: 0.12727975845336914
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13852 (11), -0.13704 (11), -0.13212 (11), -0.13065 (11), -0.12916 (11), -0.12768 (11), -0.12328 (11), -0.12181 (11), -0.11784 (11), -0.11637 (11), -0.11230 (11), -0.11162 (11), -0.11111 (11), -0.10963 (11), -0.10846 (11), -0.10699 (11), -0.10504 (11), -0.10501 (11), -0.10439 (11), -0.10434 (11), 
Length of domains: 53
Time: pickout 0.0011    decision 0.0140    set_bounds 0.0205    solve 0.1385    add 0.0013    
Accumulated time: pickout 0.0059    decision 0.6254    set_bounds 0.1083    solve 0.9417    add 0.5645    
Current (lb-rhs): -0.1385211944580078
266 domains visited
Cumulative time: 2.568495750427246

BaB round 3
batch: 53
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1249] [/input-8, 1249] [/input-8, 1259] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 1259] [/input-8, 1249] [/input-8, 1249] [/input-8, 1259] 
split level 1: [/input-8, 476] [/input-8, 91] [/input-8, 428] [/input-8, 476] [/input-8, 476] [/input-8, 91] [/input-8, 428] [/input-8, 476] [/input-8, 91] [/input-8, 428] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2279698848724365, worst -0.12944328784942627
10 lb beta sum: 2.2279698848724365, worst -0.12929821014404297
Time: prepare 0.0093    bound 0.1178    transfer 0.0009    finalize 0.0011    func 0.1308    
Accumulated time: func 1.2388    prepare 0.0959    bound 1.1094    transfer 0.0115    finalize 0.0156    
all_split False
======================Cut inference begins======================
max lb tensor(0.02526367) min lb tensor(-0.12920809)
Number of Verified Splits: 32 of 212
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0003268718719482422 
BICCOS Cumulative time: 0.12760663032531738
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12921 (13), -0.12771 (13), -0.12257 (13), -0.12243 (13), -0.12107 (13), -0.12092 (13), -0.11977 (13), -0.11822 (13), -0.11771 (13), -0.11621 (13), -0.11356 (13), -0.11312 (13), -0.11201 (13), -0.11155 (13), -0.11052 (13), -0.10937 (13), -0.10903 (13), -0.10868 (13), -0.10787 (13), -0.10718 (13), 
Length of domains: 180
Time: pickout 0.0015    decision 0.0156    set_bounds 0.0096    solve 0.1309    add 0.0039    
Accumulated time: pickout 0.0074    decision 0.6409    set_bounds 0.1179    solve 1.0726    add 0.5684    
Current (lb-rhs): -0.12920808792114258
446 domains visited
Cumulative time: 2.7306411266326904

BaB round 4
batch: 180
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 91] [/input-8, 757] [/input-8, 99] [/input-8, 91] [/input-8, 757] [/input-8, 99] [/input-8, 91] [/input-8, 757] [/input-8, 99] [/input-8, 91] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2279598712921143, worst -0.12475216388702393
10 lb beta sum: 2.2279598712921143, worst -0.12462127208709717
Time: prepare 0.0156    bound 0.1200    transfer 0.0023    finalize 0.0017    func 0.1420    
Accumulated time: func 1.3808    prepare 0.1118    bound 1.2294    transfer 0.0138    finalize 0.0172    
all_split False
======================Cut inference begins======================
max lb tensor(0.00914216) min lb tensor(-0.12457216)
Number of Verified Splits: 33 of 360
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0003342628479003906 
BICCOS Cumulative time: 0.12794089317321777
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12457 (14), -0.12305 (14), -0.11763 (14), -0.11754 (14), -0.11610 (14), -0.11600 (14), -0.11508 (14), -0.11350 (14), -0.11249 (14), -0.11096 (14), -0.10890 (14), -0.10859 (14), -0.10815 (14), -0.10739 (14), -0.10703 (14), -0.10651 (14), -0.10547 (14), -0.10482 (14), -0.10421 (14), -0.10395 (14), 
Length of domains: 327
Time: pickout 0.0028    decision 0.0205    set_bounds 0.0148    solve 0.1421    add 0.0017    
Accumulated time: pickout 0.0102    decision 0.6614    set_bounds 0.1328    solve 1.2146    add 0.5701    
Current (lb-rhs): -0.12457215785980225
773 domains visited
Cumulative time: 2.9133875370025635

BaB round 5
batch: 327
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 99] [/input-8, 1241] [/input-8, 1580] [/input-8, 99] [/input-8, 1241] [/input-8, 1249] [/input-8, 99] [/input-8, 1241] [/input-8, 1249] [/input-8, 99] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2279534339904785, worst -0.11731553077697754
10 lb beta sum: 2.2279534339904785, worst -0.11721682548522949
Time: prepare 0.0282    bound 0.1236    transfer 0.0035    finalize 0.0028    func 0.1623    
Accumulated time: func 1.5431    prepare 0.1402    bound 1.3530    transfer 0.0172    finalize 0.0200    
all_split False
======================Cut inference begins======================
max lb tensor(0.00905341) min lb tensor(-0.11715984)
Number of Verified Splits: 78 of 654
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0003578662872314453 
BICCOS Cumulative time: 0.12829875946044922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11716 (15), -0.11587 (15), -0.11561 (15), -0.11433 (15), -0.11256 (15), -0.11097 (15), -0.10971 (15), -0.10923 (15), -0.10884 (15), -0.10830 (15), -0.10816 (15), -0.10768 (15), -0.10731 (15), -0.10671 (15), -0.10583 (15), -0.10489 (15), -0.10427 (15), -0.10371 (15), -0.10337 (15), -0.10216 (15), 
Length of domains: 576
Time: pickout 0.0044    decision 0.0287    set_bounds 0.0271    solve 0.1625    add 0.0045    
Accumulated time: pickout 0.0146    decision 0.6901    set_bounds 0.1598    solve 1.3772    add 0.5747    
Current (lb-rhs): -0.11715984344482422
1349 domains visited
Cumulative time: 3.141941785812378

BaB round 6
batch: 576
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1580] [/input-8, 428] [/input-8, 1954] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 428] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2279467582702637, worst -0.11249470710754395
10 lb beta sum: 2.2279467582702637, worst -0.11246061325073242
Time: prepare 0.0494    bound 0.1282    transfer 0.0054    finalize 0.0052    func 0.1957    
Accumulated time: func 1.7388    prepare 0.1898    bound 1.4812    transfer 0.0227    finalize 0.0253    
all_split False
======================Cut inference begins======================
max lb tensor(0.01349902) min lb tensor(-0.11245275)
Number of Verified Splits: 90 of 1152
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0003695487976074219 
BICCOS Cumulative time: 0.12866830825805664
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11245 (16), -0.11112 (16), -0.11091 (16), -0.10957 (16), -0.10767 (16), -0.10610 (16), -0.10485 (16), -0.10447 (16), -0.10442 (16), -0.10434 (16), -0.10422 (16), -0.10390 (16), -0.10330 (16), -0.10290 (16), -0.10280 (16), -0.10277 (16), -0.10259 (16), -0.10235 (16), -0.10136 (16), -0.10044 (16), 
Length of domains: 1062
Time: pickout 0.0094    decision 0.0428    set_bounds 0.0463    solve 0.1960    add 0.0057    
Accumulated time: pickout 0.0240    decision 0.7329    set_bounds 0.2061    solve 1.5731    add 0.5804    
Current (lb-rhs): -0.11245274543762207
2411 domains visited
Cumulative time: 3.4436748027801514

BaB round 7
batch: 1062
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 428] [/input-8, 28] [/input-8, 428] [/input-8, 428] [/input-8, 28] [/input-8, 428] [/input-8, 99] [/input-8, 28] [/input-8, 1954] [/input-8, 99] 
cut re-enabled after branching node selection
0 lb beta sum: 2.227947235107422, worst -0.10579526424407959
10 lb beta sum: 2.227947235107422, worst -0.10579156875610352
Time: prepare 0.0913    bound 0.1512    transfer 0.0109    finalize 0.0094    func 0.4065    
Accumulated time: func 2.1452    prepare 0.2813    bound 1.6324    transfer 0.0336    finalize 0.0347    
all_split False
======================Cut inference begins======================
max lb tensor(0.01098204) min lb tensor(-0.10578358)
Number of Verified Splits: 203 of 2124
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0004913806915283203 
BICCOS Cumulative time: 0.12915968894958496
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10578 (17), -0.10564 (17), -0.10430 (17), -0.10424 (17), -0.10409 (17), -0.10285 (17), -0.10275 (17), -0.10130 (17), -0.10024 (17), -0.10012 (17), -0.09998 (17), -0.09958 (17), -0.09957 (17), -0.09910 (17), -0.09863 (17), -0.09850 (17), -0.09842 (17), -0.09804 (17), -0.09799 (17), -0.09755 (17), 
Length of domains: 1921
Time: pickout 0.0149    decision 0.0686    set_bounds 0.0848    solve 0.4069    add 0.0078    
Accumulated time: pickout 0.0389    decision 0.8015    set_bounds 0.2910    solve 1.9800    add 0.5882    
Current (lb-rhs): -0.10578358173370361
4332 domains visited
Cumulative time: 4.029975891113281

BaB round 8
batch: 1921
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1635] [/input-8, 1929] [/input-8, 1635] [/input-8, 1635] [/input-8, 1929] [/input-8, 1635] [/input-8, 1635] [/input-8, 1929] [/input-8, 1635] [/input-8, 1635] 
cut re-enabled after branching node selection
0 lb beta sum: 2.227945327758789, worst -0.10380840301513672
10 lb beta sum: 2.227945327758789, worst -0.10378921031951904
Time: prepare 0.1663    bound 0.2232    transfer 0.0189    finalize 0.0164    func 0.4496    
Accumulated time: func 2.5949    prepare 0.4478    bound 1.8556    transfer 0.0524    finalize 0.0511    
all_split False
======================Cut inference begins======================
max lb tensor(0.02231038) min lb tensor(-0.10376847)
Number of Verified Splits: 1081 of 3842
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0005064010620117188 
BICCOS Cumulative time: 0.12966609001159668
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10377 (18), -0.10351 (18), -0.10222 (18), -0.10208 (18), -0.10197 (18), -0.10075 (18), -0.10053 (18), -0.09920 (18), -0.09842 (18), -0.09833 (18), -0.09775 (18), -0.09722 (18), -0.09721 (18), -0.09681 (18), -0.09679 (18), -0.09672 (18), -0.09619 (18), -0.09567 (18), -0.09565 (18), -0.09537 (18), 
Length of domains: 2761
Time: pickout 0.0337    decision 0.1160    set_bounds 0.1564    solve 0.4503    add 0.0157    
Accumulated time: pickout 0.0726    decision 0.9175    set_bounds 0.4473    solve 2.4303    add 0.6039    
Current (lb-rhs): -0.10376846790313721
7093 domains visited
Cumulative time: 4.810528039932251

BaB round 9
batch: 2761
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 803] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2279422283172607, worst -0.09815430641174316
10 lb beta sum: 2.2279422283172607, worst -0.09814286231994629
Time: prepare 0.2418    bound 0.2928    transfer 0.0373    finalize 0.0245    func 0.6329    
Accumulated time: func 3.2278    prepare 0.6899    bound 2.1484    transfer 0.0897    finalize 0.0756    
all_split False
======================Cut inference begins======================
max lb tensor(0.02929068) min lb tensor(-0.09813619)
Number of Verified Splits: 965 of 5522
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0004496574401855469 
BICCOS Cumulative time: 0.13011574745178223
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09814 (19), -0.09673 (19), -0.09668 (19), -0.09659 (19), -0.09632 (19), -0.09563 (19), -0.09518 (19), -0.09513 (19), -0.09478 (19), -0.09447 (19), -0.09408 (19), -0.09363 (19), -0.09333 (19), -0.09292 (19), -0.09232 (19), -0.09209 (19), -0.09200 (19), -0.09178 (19), -0.09072 (19), -0.09064 (19), 
Length of domains: 4557
Time: pickout 0.0409    decision 0.1591    set_bounds 0.3851    solve 0.6340    add 0.0261    
Accumulated time: pickout 0.1135    decision 1.0766    set_bounds 0.8325    solve 3.0643    add 0.6300    
Current (lb-rhs): -0.09813618659973145
11650 domains visited
Cumulative time: 6.066587686538696

BaB round 10
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1954] [/input-8, 28] [/input-8, 1954] [/input-8, 1954] [/input-8, 1954] [/input-8, 1635] [/input-8, 28] [/input-8, 1954] [/input-8, 1954] [/input-8, 1954] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2279388904571533, worst -0.09404957294464111
10 lb beta sum: 2.2279388904571533, worst -0.0939786434173584
Time: prepare 0.3622    bound 0.3972    transfer 0.0488    finalize 0.0372    func 0.8990    
Accumulated time: func 4.1267    prepare 1.0524    bound 2.5456    transfer 0.1386    finalize 0.1128    
all_split False
======================Cut inference begins======================
max lb tensor(0.02815163) min lb tensor(-0.09394455)
Number of Verified Splits: 1491 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0004944801330566406 
BICCOS Cumulative time: 0.13061022758483887
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09394 (20), -0.09251 (20), -0.09247 (20), -0.09240 (20), -0.09200 (20), -0.09141 (20), -0.09096 (20), -0.09092 (20), -0.09046 (20), -0.09021 (20), -0.08986 (20), -0.08945 (20), -0.08902 (20), -0.08866 (20), -0.08819 (20), -0.08808 (20), -0.08789 (20), -0.08780 (20), -0.08747 (20), -0.08664 (20), 
Length of domains: 7162
Time: pickout 0.0556    decision 0.2281    set_bounds 0.4882    solve 0.9011    add 0.0354    
Accumulated time: pickout 0.1691    decision 1.3047    set_bounds 1.3206    solve 3.9654    add 0.6653    
Current (lb-rhs): -0.09394454956054688
18351 domains visited
current_vram/total_varm: 9.9GB/99.9GB, batch_size increase to 8192
Cumulative time: 7.79165506362915

BaB round 11
batch: 7162
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1963] [/input-8, 1954] [/input-8, 1963] [/input-8, 1963] [/input-8, 1954] [/input-8, 1963] [/input-8, 1963] [/input-8, 1954] [/input-8, 1963] [/input-8, 1963] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2279369831085205, worst -0.08961319923400879
10 lb beta sum: 2.2279369831085205, worst -0.08960449695587158
Time: prepare 0.6341    bound 0.6513    transfer 0.1408    finalize 0.0680    func 1.5855    
Accumulated time: func 5.7122    prepare 1.6868    bound 3.1969    transfer 0.2794    finalize 0.1808    
all_split False
======================Cut inference begins======================
max lb tensor(0.02718788) min lb tensor(-0.08959424)
Number of Verified Splits: 2691 of 14324
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0006206035614013672 
BICCOS Cumulative time: 0.13123083114624023
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08959 (21), -0.08821 (21), -0.08816 (21), -0.08805 (21), -0.08771 (21), -0.08727 (21), -0.08666 (21), -0.08662 (21), -0.08617 (21), -0.08605 (21), -0.08572 (21), -0.08527 (21), -0.08485 (21), -0.08449 (21), -0.08372 (21), -0.08370 (21), -0.08369 (21), -0.08341 (21), -0.08331 (21), -0.08247 (21), 
Length of domains: 11633
Time: pickout 0.1290    decision 0.5677    set_bounds 0.7775    solve 1.8086    add 0.0446    
Accumulated time: pickout 0.2981    decision 1.8724    set_bounds 2.0981    solve 5.7740    add 0.7100    
Current (lb-rhs): -0.08959424495697021
29984 domains visited
Cumulative time: 11.157646656036377

BaB round 12
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 28] [/input-8, 44] [/input-8, 418] [/input-8, 418] [/input-8, 426] [/input-8, 28] [/input-8, 418] [/input-8, 28] [/input-8, 44] [/input-8, 426] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2279367446899414, worst -0.07757854461669922
10 lb beta sum: 2.2279367446899414, worst -0.07748770713806152
Time: prepare 0.7313    bound 0.7340    transfer 0.1357    finalize 0.0821    func 1.7905    
Accumulated time: func 7.5027    prepare 2.4184    bound 3.9309    transfer 0.4151    finalize 0.2629    
all_split False
======================Cut inference begins======================
max lb tensor(0.02906996) min lb tensor(-0.07742548)
Number of Verified Splits: 2858 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0006313323974609375 
BICCOS Cumulative time: 0.13186216354370117
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08959 (21), -0.08821 (21), -0.08816 (21), -0.08805 (21), -0.08771 (21), -0.08727 (21), -0.08666 (21), -0.08662 (21), -0.08617 (21), -0.08605 (21), -0.08572 (21), -0.08527 (21), -0.08485 (21), -0.08449 (21), -0.08372 (21), -0.08369 (21), -0.08341 (21), -0.08331 (21), -0.08216 (21), -0.08209 (21), 
Length of domains: 16967
Time: pickout 0.1146    decision 0.4515    set_bounds 0.9021    solve 2.0256    add 0.0600    
Accumulated time: pickout 0.4127    decision 2.3239    set_bounds 3.0003    solve 7.7996    add 0.7700    
Current (lb-rhs): -0.08959424495697021
43510 domains visited
current_vram/total_varm: 22.8GB/99.9GB, batch_size increase to 16384
Cumulative time: 14.755328178405762

BaB round 13
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1579] [/input-8, 428] [/input-8, 1579] [/input-8, 1579] [/input-8, 428] [/input-8, 28] [/input-8, 28] [/input-8, 1579] [/input-8, 28] [/input-8, 1579] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2279350757598877, worst -0.08347034454345703
10 lb beta sum: 2.2279350757598877, worst -0.08346366882324219
Time: prepare 1.4677    bound 1.4001    transfer 0.3772    finalize 0.4785    func 3.9355    
Accumulated time: func 11.4383    prepare 3.8865    bound 5.3310    transfer 0.7923    finalize 0.7414    
all_split False
======================Cut inference begins======================
max lb tensor(0.03543127) min lb tensor(-0.08345747)
Number of Verified Splits: 6222 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0008127689361572266 
BICCOS Cumulative time: 0.1326749324798584
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08346 (22), -0.08332 (22), -0.08208 (22), -0.08203 (22), -0.08196 (22), -0.08191 (22), -0.08190 (22), -0.08178 (22), -0.08166 (22), -0.08146 (22), -0.08114 (22), -0.08098 (22), -0.08053 (22), -0.08048 (22), -0.08042 (22), -0.08035 (22), -0.08012 (22), -0.07992 (22), -0.07987 (22), -0.07984 (22), 
Length of domains: 27129
Time: pickout 0.2443    decision 1.6392    set_bounds 1.9171    solve 3.9410    add 0.1119    
Accumulated time: pickout 0.6570    decision 3.9631    set_bounds 4.9174    solve 11.7406    add 0.8819    
Current (lb-rhs): -0.08345746994018555
70056 domains visited
current_vram/total_varm: 32.7GB/99.9GB, batch_size increase to 32768
Cumulative time: 22.691025972366333

BaB round 14
batch: 27129
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1579] [/input-8, 1635] [/input-8, 1579] [/input-8, 426] [/input-8, 426] [/input-8, 426] [/input-8, 426] [/input-8, 28] [/input-8, 1579] [/input-8, 1579] 
cut re-enabled after branching node selection
0 lb beta sum: 2.227933883666992, worst -0.07892107963562012
10 lb beta sum: 2.227933883666992, worst -0.07887601852416992
Time: prepare 2.4794    bound 2.2853    transfer 0.6128    finalize 0.6863    func 6.4180    
Accumulated time: func 17.8563    prepare 6.3662    bound 7.6163    transfer 1.4051    finalize 1.4277    
all_split False
======================Cut inference begins======================
max lb tensor(0.33296072) min lb tensor(-0.07885802)
Number of Verified Splits: 22692 of 54258
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0008728504180908203 
BICCOS Cumulative time: 0.13354778289794922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07886 (23), -0.07866 (23), -0.07743 (23), -0.07740 (23), -0.07738 (23), -0.07731 (23), -0.07724 (23), -0.07721 (23), -0.07711 (23), -0.07704 (23), -0.07703 (23), -0.07689 (23), -0.07653 (23), -0.07631 (23), -0.07588 (23), -0.07586 (23), -0.07584 (23), -0.07572 (23), -0.07570 (23), -0.07567 (23), 
Length of domains: 31566
Time: pickout 0.5474    decision 2.7299    set_bounds 2.9378    solve 6.4278    add 0.1644    
Accumulated time: pickout 1.2044    decision 6.6930    set_bounds 7.8552    solve 18.1684    add 1.0463    
Current (lb-rhs): -0.07885801792144775
101622 domains visited
Cumulative time: 35.68653750419617

BaB round 15
batch: 31566
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 7] [/input-8, 44] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
cut re-enabled after branching node selection
0 lb beta sum: 2.227933406829834, worst -0.0788578987121582
10 lb beta sum: 2.227933406829834, worst -0.0788569450378418
Time: prepare 2.9104    bound 2.6480    transfer 0.7182    finalize 0.3640    func 7.0516    
Accumulated time: func 24.9079    prepare 9.2770    bound 10.2643    transfer 2.1233    finalize 1.7917    
all_split False
======================Cut inference begins======================
max lb tensor(0.33039439) min lb tensor(-0.07885098)
Number of Verified Splits: 32307 of 63132
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0009717941284179688 
BICCOS Cumulative time: 0.1345195770263672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07885 (24), -0.07861 (24), -0.07740 (24), -0.07738 (24), -0.07738 (24), -0.07731 (24), -0.07717 (24), -0.07707 (24), -0.07706 (24), -0.07698 (24), -0.07688 (24), -0.07684 (24), -0.07652 (24), -0.07626 (24), -0.07586 (24), -0.07584 (24), -0.07583 (24), -0.07561 (24), -0.07560 (24), -0.07552 (24), 
Length of domains: 30825
Time: pickout 0.6483    decision 3.5775    set_bounds 4.0696    solve 7.0628    add 0.0959    
Accumulated time: pickout 1.8527    decision 10.2705    set_bounds 11.9248    solve 25.2312    add 1.1422    
Current (lb-rhs): -0.07885098457336426
132447 domains visited
Cumulative time: 51.43832755088806

BaB round 16
batch: 30825
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] 
cut re-enabled after branching node selection
0 lb beta sum: 2.227932929992676, worst -0.07548820972442627
10 lb beta sum: 2.227932929992676, worst -0.0754702091217041
Time: prepare 2.8265    bound 2.5882    transfer 0.7106    finalize 0.3593    func 6.8837    
Accumulated time: func 31.7916    prepare 12.1039    bound 12.8525    transfer 2.8339    finalize 2.1510    
all_split False
======================Cut inference begins======================
max lb tensor(0.30009830) min lb tensor(-0.07546699)
Number of Verified Splits: 19113 of 61650
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0010919570922851562 
BICCOS Cumulative time: 0.13561153411865234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07547 (25), -0.07528 (25), -0.07403 (25), -0.07403 (25), -0.07401 (25), -0.07392 (25), -0.07386 (25), -0.07373 (25), -0.07368 (25), -0.07361 (25), -0.07353 (25), -0.07342 (25), -0.07312 (25), -0.07291 (25), -0.07249 (25), -0.07247 (25), -0.07246 (25), -0.07231 (25), -0.07217 (25), -0.07213 (25), 
Length of domains: 42537
Time: pickout 0.6541    decision 3.5287    set_bounds 4.1854    solve 6.8939    add 0.1399    
Accumulated time: pickout 2.5068    decision 13.7992    set_bounds 16.1102    solve 32.1251    add 1.2821    
Current (lb-rhs): -0.07546699047088623
174984 domains visited
Cumulative time: 67.07832741737366

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 7] [/input-8, 28] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-8, 418] [/input-8, 418] [/input-8, 1579] [/input-8, 1635] [/input-12, 7] 
cut re-enabled after branching node selection
0 lb beta sum: 2.227933168411255, worst -0.06978893280029297
10 lb beta sum: 2.227933168411255, worst -0.0697488784790039
Time: prepare 3.0447    bound 7.9347    transfer 0.7372    finalize 1.0643    func 13.2096    
Accumulated time: func 45.0012    prepare 15.1490    bound 20.7872    transfer 3.5710    finalize 3.2153    
all_split False
======================Cut inference begins======================
max lb tensor(0.30281949) min lb tensor(-0.06974363)
Number of Verified Splits: 19202 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0009732246398925781 
BICCOS Cumulative time: 0.13658475875854492
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06974 (26), -0.06963 (26), -0.06955 (26), -0.06942 (26), -0.06843 (26), -0.06843 (26), -0.06834 (26), -0.06822 (26), -0.06819 (26), -0.06817 (26), -0.06814 (26), -0.06813 (26), -0.06811 (26), -0.06808 (26), -0.06804 (26), -0.06800 (26), -0.06793 (26), -0.06792 (26), -0.06787 (26), -0.06784 (26), 
Length of domains: 56103
Time: pickout 0.5708    decision 3.8558    set_bounds 4.1292    solve 13.2215    add 0.1583    
Accumulated time: pickout 3.0776    decision 17.6550    set_bounds 20.2394    solve 45.3465    add 1.4404    
Current (lb-rhs): -0.06974363327026367
221318 domains visited
Cumulative time: 89.25205898284912

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1963] [/input-8, 1963] [/input-8, 1963] [/input-8, 1963] [/input-8, 1963] [/input-8, 1963] [/input-8, 1963] [/input-8, 1963] [/input-8, 1963] [/input-8, 1963] 
cut re-enabled after branching node selection
0 lb beta sum: 2.227933168411255, worst -0.06626832485198975
10 lb beta sum: 2.227933168411255, worst -0.06622481346130371
Time: prepare 3.1062    bound 7.9427    transfer 0.7524    finalize 0.4582    func 12.6932    
Accumulated time: func 57.6943    prepare 18.2556    bound 28.7299    transfer 4.3235    finalize 3.6735    
all_split False
======================Cut inference begins======================
max lb tensor(0.30061424) min lb tensor(-0.06619906)
Number of Verified Splits: 15452 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0010266304016113281 
BICCOS Cumulative time: 0.13761138916015625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06974 (26), -0.06955 (26), -0.06843 (26), -0.06843 (26), -0.06822 (26), -0.06819 (26), -0.06813 (26), -0.06804 (26), -0.06800 (26), -0.06793 (26), -0.06792 (26), -0.06776 (26), -0.06743 (26), -0.06723 (26), -0.06689 (26), -0.06689 (26), -0.06667 (26), -0.06658 (26), -0.06649 (26), -0.06642 (26), 
Length of domains: 73419
Time: pickout 0.5883    decision 3.5167    set_bounds 4.4764    solve 12.7059    add 0.2218    
Accumulated time: pickout 3.6659    decision 21.1717    set_bounds 24.7158    solve 58.0525    add 1.6622    
Current (lb-rhs): -0.06974363327026367
271402 domains visited
Cumulative time: 111.01609063148499

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1963] [/input-8, 1963] [/input-8, 1963] [/input-8, 1963] [/input-8, 1963] [/input-8, 1963] [/input-8, 1963] [/input-8, 1963] [/input-8, 1963] [/input-8, 1963] 
cut re-enabled after branching node selection
0 lb beta sum: 2.227933168411255, worst -0.06617856025695801
10 lb beta sum: 2.227933168411255, worst -0.06611800193786621
Time: prepare 3.0351    bound 7.9376    transfer 0.7535    finalize 0.4644    func 12.6253    
Accumulated time: func 70.3196    prepare 21.2911    bound 36.6675    transfer 5.0769    finalize 4.1379    
all_split False
======================Cut inference begins======================
max lb tensor(0.05672836) min lb tensor(-0.06610620)
Number of Verified Splits: 14516 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0009503364562988281 
BICCOS Cumulative time: 0.13856172561645508
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06620 (27), -0.06611 (27), -0.06599 (27), -0.06591 (27), -0.06513 (27), -0.06496 (27), -0.06475 (27), -0.06474 (27), -0.06474 (27), -0.06472 (27), -0.06466 (27), -0.06465 (27), -0.06461 (27), -0.06456 (27), -0.06446 (27), -0.06445 (27), -0.06444 (27), -0.06444 (27), -0.06437 (27), -0.06436 (27), 
Length of domains: 91671
Time: pickout 0.5772    decision 4.0791    set_bounds 4.7031    solve 12.6378    add 0.1807    
Accumulated time: pickout 4.2431    decision 25.2509    set_bounds 29.4189    solve 70.6903    add 1.8429    
Current (lb-rhs): -0.06619906425476074
322422 domains visited
Cumulative time: 133.45498514175415

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1241] [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 483] 
cut re-enabled after branching node selection
0 lb beta sum: 2.227933168411255, worst -0.06249260902404785
10 lb beta sum: 2.227933168411255, worst -0.06242835521697998
Time: prepare 3.0527    bound 7.9402    transfer 0.7545    finalize 1.4774    func 13.6464    
Accumulated time: func 83.9660    prepare 24.3442    bound 44.6077    transfer 5.8315    finalize 5.6153    
all_split False
======================Cut inference begins======================
max lb tensor(0.05853051) min lb tensor(-0.06240213)
Number of Verified Splits: 12551 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.001039743423461914 
BICCOS Cumulative time: 0.139601469039917
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06611 (27), -0.06591 (27), -0.06474 (27), -0.06474 (27), -0.06466 (27), -0.06461 (27), -0.06456 (27), -0.06446 (27), -0.06444 (27), -0.06437 (27), -0.06436 (27), -0.06422 (27), -0.06370 (27), -0.06349 (27), -0.06320 (27), -0.06319 (27), -0.06311 (27), -0.06306 (27), -0.06293 (27), -0.06291 (27), 
Length of domains: 111888
Time: pickout 0.6099    decision 4.2422    set_bounds 3.9891    solve 13.6595    add 0.1787    
Accumulated time: pickout 4.8531    decision 29.4931    set_bounds 33.4079    solve 84.3497    add 2.0217    
Current (lb-rhs): -0.06610620021820068
375407 domains visited
Cumulative time: 156.35590624809265

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 1241] [/input-8, 1241] [/input-8, 483] [/input-8, 1241] [/input-8, 1241] 
cut re-enabled after branching node selection
0 lb beta sum: 2.227933168411255, worst -0.06226706504821777
10 lb beta sum: 2.227933168411255, worst -0.06224954128265381
Time: prepare 3.0978    bound 7.9417    transfer 0.7511    finalize 0.4733    func 12.7051    
Accumulated time: func 96.6710    prepare 27.4425    bound 52.5494    transfer 6.5826    finalize 6.0886    
all_split False
======================Cut inference begins======================
max lb tensor(0.05662650) min lb tensor(-0.06224167)
Number of Verified Splits: 12990 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.001131296157836914 
BICCOS Cumulative time: 0.1407327651977539
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06240 (28), -0.06224 (28), -0.06219 (28), -0.06205 (28), -0.06160 (27), -0.06140 (27), -0.06133 (28), -0.06116 (28), -0.06098 (28), -0.06094 (28), -0.06088 (28), -0.06088 (28), -0.06085 (28), -0.06076 (28), -0.06069 (28), -0.06069 (28), -0.06069 (28), -0.06064 (28), -0.06059 (28), -0.06057 (28), 
Length of domains: 131666
Time: pickout 0.5905    decision 3.3360    set_bounds 5.1972    solve 12.7226    add 0.1839    
Accumulated time: pickout 5.4436    decision 32.8290    set_bounds 38.6051    solve 97.0724    add 2.2056    
Current (lb-rhs): -0.06240212917327881
427953 domains visited
Cumulative time: 178.65697479248047

BaB round 22
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1241] [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 483] 
cut re-enabled after branching node selection
0 lb beta sum: 2.227933168411255, worst -0.05777597427368164
10 lb beta sum: 2.227933168411255, worst -0.0577315092086792
Time: prepare 3.0873    bound 7.9471    transfer 0.7597    finalize 1.6498    func 13.8793    
Accumulated time: func 110.5504    prepare 30.5302    bound 60.4965    transfer 7.3423    finalize 7.7383    
all_split False
======================Cut inference begins======================
max lb tensor(0.05965066) min lb tensor(-0.05770290)
Number of Verified Splits: 16140 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0010652542114257812 
BICCOS Cumulative time: 0.1417980194091797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06240 (28), -0.06224 (28), -0.06219 (28), -0.06205 (28), -0.06133 (28), -0.06116 (28), -0.06098 (28), -0.06094 (28), -0.06088 (28), -0.06088 (28), -0.06085 (28), -0.06076 (28), -0.06069 (28), -0.06069 (28), -0.06069 (28), -0.06064 (28), -0.06059 (28), -0.06057 (28), -0.06053 (28), -0.06050 (28), 
Length of domains: 148294
Time: pickout 0.6058    decision 3.3610    set_bounds 4.2804    solve 13.8930    add 0.1769    
Accumulated time: pickout 6.0494    decision 36.1900    set_bounds 42.8855    solve 110.9654    add 2.3824    
Current (lb-rhs): -0.06240212917327881
477349 domains visited
Time out!!!!!!!!
Result: unknown in 203.7475 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 138, vnnlib ID: 138 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.17530060, -23.26024055, -22.88537025, -22.34073830, -22.57217026,
         -22.95246124, -23.25955200, -23.61799812, -23.03639603, -21.12484741]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [598]; unstable size 598; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 213, 1, 598] with unstable size 212 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 598] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 598] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [212]; unstable size 212; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 212] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 212] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.89664263,  0.67908812,  0.19554520,  0.18955255,  0.73444819,
          0.71419215,  0.94188952,  0.96517801, -1.17427897]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.17530060, -23.26024055, -22.88537025, -22.34073830, -22.57217026,
         -22.95246124, -23.25955200, -23.61799812, -23.03639603, -21.12484741]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.17530060, -23.26024055, -22.88537025, -22.34073830, -22.57217026,
          -22.95246124, -23.25955200, -23.61799812, -23.03639603, -21.12484741]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05045319]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0635 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 139, vnnlib ID: 139 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.98194313, -18.68232346, -13.41521168, -15.12617874, -13.36238766,
         -15.23961639, -11.65827942, -15.93192387, -18.96205139, -18.87558174]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [486]; unstable size 486; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 299, 1, 486] with unstable size 298 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 486] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 486] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [298]; unstable size 298; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 298] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 298] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.17124963, 4.88726807, 0.27177000, 2.09688020, 0.18416548, 2.01368856,
         2.31736922, 5.04107523, 4.79337215]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0466 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 140, vnnlib ID: 140 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.01308823, -19.76593781, -25.22100067, -25.57647514, -25.42583656,
         -26.01211357, -25.51028061, -24.41519165, -23.07863426, -17.48029327]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [532]; unstable size 532; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 532] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 532] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 532] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 203] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.27216291, 1.49679089, 6.10778666, 6.38268900, 6.18334341, 6.67019939,
         6.18721390, 4.92642784, 4.46744919]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0240 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 141, vnnlib ID: 141 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.90496635, -15.11729813, -17.63558197, -17.40718079, -18.01904297,
         -18.32819939, -17.60610199, -17.95012093, -15.46633625, -14.21533680]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [703]; unstable size 703; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 270, 1, 703] with unstable size 269 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 703] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 703] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [269]; unstable size 269; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 269] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 269] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.32847404,  0.70178294,  0.40967369,  0.70709276,  1.10043859,
          0.47019577,  0.52032614, -0.85370111, -1.78019547]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.90496635, -15.11729813, -17.63558197, -17.40718079, -18.01904297,
         -18.32819939, -17.60610199, -17.95012093, -15.46633625, -14.21533680]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.90496635, -15.11729908, -17.63558006, -17.40718079, -18.01904488,
          -18.32819939, -17.60610390, -17.95012093, -15.46633720, -14.21533775],
         [-16.90496635, -15.11729908, -17.63558006, -17.40718079, -18.01904488,
          -18.32819939, -17.60610390, -17.95012093, -15.46633720, -14.21533775]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.34903812, -0.90196133]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]],


         [[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0444 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 142, vnnlib ID: 142 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.14345169, -26.23081017, -22.50061417, -23.41731834, -23.96586800,
         -24.21544456, -20.18602753, -25.76428032, -26.53347778, -25.24602318]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [390]; unstable size 390; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 312, 1, 390] with unstable size 311 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 390] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 390] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [311]; unstable size 311; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 311] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 311] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.16251564, 3.85129428, 1.07807207, 2.04974031, 2.45816231, 2.71345639,
         3.85838270, 4.14238548, 3.23237944]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0294 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 143, vnnlib ID: 143 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.55906677, -26.64030838, -19.33113098, -21.43922997, -19.03748703,
         -20.97289085, -20.39774704, -20.86362457, -27.58946419, -25.17458534]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [519]; unstable size 519; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 519] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 519] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 519] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 219] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.02097750,  5.33160591, -0.73743284,  1.28090453,  0.87938416,
          0.03270614,  0.89394522,  6.65467310,  4.26477051]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.55906677, -26.64030838, -19.33113098, -21.43922997, -19.03748703,
         -20.97289085, -20.39774704, -20.86362457, -27.58946419, -25.17458534]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.88814735, -26.08496284, -18.49759293, -20.76161766, -18.65445518,
          -20.33452797, -19.75658226, -20.62588882, -26.97995377, -24.70828247]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15686226]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0060 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0371 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 144, vnnlib ID: 144 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.72182465, -25.40373611, -21.20227242, -20.08390617, -21.28728104,
         -19.64896584, -22.07214165, -21.57941437, -23.54422569, -23.66501617]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [553]; unstable size 553; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 225, 1, 553] with unstable size 224 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 553] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 553] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [224]; unstable size 224; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 224] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 224] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.95499587, 4.21736097, 0.73983377, 0.09517530, 0.76654369, 1.38522840,
         0.98252308, 2.42742300, 2.46281242]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0399 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 145, vnnlib ID: 145 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.44517517, -24.66761017, -18.86577606, -18.69302559, -20.38499641,
         -19.18245506, -20.75661469, -21.50863075, -24.90008926, -24.19531822]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [771]; unstable size 771; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 253, 1, 771] with unstable size 252 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 771] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 771] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [252]; unstable size 252; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 252] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 252] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.21118474,  4.10176992, -1.16934454, -0.72179759,  0.25676250,
          0.67854667,  1.19206488,  4.31922293,  3.50376463]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.44517517, -24.66761017, -18.86577606, -18.69302559, -20.38499641,
         -19.18245506, -20.75661469, -21.50863075, -24.90008926, -24.19531822]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.44517326, -24.66760826, -18.86577415, -18.69302559, -20.38499451,
          -19.18245316, -20.75661469, -21.50863075, -24.90009117, -24.19531822],
         [-21.44517326, -24.66760826, -18.86577415, -18.69302559, -20.38499451,
          -19.18245316, -20.75661469, -21.50863075, -24.90009117, -24.19531822]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.31667900, -0.48942757]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]],


         [[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0378 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 146, vnnlib ID: 146 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-34.38232803, -35.89345551, -38.77233124, -38.86247635, -39.62222672,
         -39.86164474, -39.87382126, -39.40642929, -30.93457031, -36.03558350]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [499]; unstable size 499; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 499] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 499] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 499] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 197] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.37971163, 3.87611699, 6.40737104, 6.38697433, 7.03272915, 7.19149923,
         7.20581627, 6.50212860, 4.14407969]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0310 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 147, vnnlib ID: 147 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-34.24032974, -37.65886307, -32.76491928, -35.87559128, -36.34276581,
         -36.02743912, -34.61969757, -36.23526382, -36.62348938, -40.18959427]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [734]; unstable size 734; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 229, 1, 734] with unstable size 228 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 734] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 734] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [228]; unstable size 228; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 228] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 228] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.42341971, 3.43717408, 2.28934193, 2.53784966, 2.29687023, 0.88678980,
         1.92648363, 2.44576836, 5.71752739]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0288 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 148, vnnlib ID: 148 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.79258919, -17.99694252, -16.45632553, -15.40058136, -16.56349564,
         -14.87314796, -17.80143356, -13.41994190, -19.54096222, -16.64786148]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [937]; unstable size 937; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 937] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 937] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 937] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 249] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.73422527, 2.70791674, 1.68733311, 0.95580530, 2.14770555, 0.50132132,
         2.85892749, 3.87416196, 1.62221193]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0314 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 149, vnnlib ID: 149 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.01166153, -22.78888702, -15.86253738, -18.02544975, -16.82504082,
         -17.96582985, -15.98325729, -20.20303345, -22.22256470, -22.36408424]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [720]; unstable size 720; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 334, 1, 720] with unstable size 333 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 720] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 720] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [333]; unstable size 333; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 333] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 333] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.70876312,  4.66763687,  1.06026256, -0.11882287,  0.88787580,
         -0.96121287,  2.31396723,  4.62897301,  4.35728931]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.01166153, -22.78888702, -15.86253738, -18.02544975, -16.82504082,
         -17.96582985, -15.98325729, -20.20303345, -22.22256470, -22.36408424]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.41568375, -22.94868088, -16.33391953, -18.23425102, -17.13017273,
          -18.21309471, -15.88277435, -20.45126534, -22.60630798, -22.50936317],
         [-20.41568375, -22.94868088, -16.33391953, -18.23425102, -17.13017273,
          -18.21309471, -15.88277435, -20.45126534, -22.60630798, -22.50936317]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.79625320, -0.45114517]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0055 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0390 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 150, vnnlib ID: 150 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-33.39692688, -33.50623703, -38.63787079, -39.79333878, -37.69999313,
         -41.03482437, -40.31786346, -38.34481812, -33.13186264, -33.37991333]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [788]; unstable size 788; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 788] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 788] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 788] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 259] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.16785002,  2.02646685,  3.53692102,  1.20165062,  4.52165222,
          3.78477144,  1.66250515, -2.21134377, -1.22387218]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-33.39692688, -33.50623703, -38.63787079, -39.79333878, -37.69999313,
         -41.03482437, -40.31786346, -38.34481812, -33.13186264, -33.37991333]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-33.39692307, -33.50624084, -38.63787079, -39.79333115, -37.69999313,
          -41.03482437, -40.31786346, -38.34482574, -33.13185501, -33.37990952],
         [-33.39692307, -33.50624084, -38.63787079, -39.79333115, -37.69999313,
          -41.03482437, -40.31786346, -38.34482574, -33.13185501, -33.37990952]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.10931778, -0.37438583, -0.12633133]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0371 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 151, vnnlib ID: 151 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.86795235, -23.21092606, -17.76663589, -16.98049545, -18.63553619,
         -17.40380287, -19.50118446, -17.26604271, -23.47448921, -21.17066383]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [654]; unstable size 654; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 654] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 654] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 654] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 260] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.18142748,  4.33078861, -0.50891972, -0.65947902,  0.37091136,
          1.13457882, -0.94743341,  4.42701197,  2.60953665]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.86795235, -23.21092606, -17.76663589, -16.98049545, -18.63553619,
         -17.40380287, -19.50118446, -17.26604271, -23.47448921, -21.17066383]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.86795235, -23.21092987, -17.76663589, -16.98049545, -18.63553619,
          -17.40380287, -19.50118637, -17.26604462, -23.47449112, -21.17066383],
         [-21.86795235, -23.21092987, -17.76663589, -16.98049545, -18.63553619,
          -17.40380287, -19.50118637, -17.26604462, -23.47449112, -21.17066383]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.36283302, -0.42330742, -0.13775826]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]],


         [[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]],


         [[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0658 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 152, vnnlib ID: 152 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.97657204, -24.17541313, -17.49859619, -20.07994652, -17.44471931,
         -20.39148903, -18.74324608, -20.42260742, -22.87066269, -23.45691490]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [494]; unstable size 494; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 271, 1, 494] with unstable size 270 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 494] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 494] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [270]; unstable size 270; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 270] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 270] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.14928687,  4.51440048,  1.64132607, -1.13099408,  1.91445732,
          0.33408672,  1.53952134,  3.79073048,  4.14098597]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.97657204, -24.17541313, -17.49859619, -20.07994652, -17.44471931,
         -20.39148903, -18.74324608, -20.42260742, -22.87066269, -23.45691490]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.97657204, -24.17541313, -17.49859619, -20.07994652, -17.44471931,
          -20.39148903, -18.74324608, -20.42260742, -22.87066269, -23.45691490]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05387688]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-9.41269815e-01, -9.09523785e-01, -1.33809519e+00,  ...,
            -6.39682531e-01,  7.46032670e-02,  1.85714364e-01],
           [-5.28571427e-01, -7.98412681e-01, -1.25873005e+00,  ...,
            -5.76190472e-01, -2.42857039e-01,  1.06349289e-01],
           [-4.65079248e-01, -4.01587188e-01, -7.66666651e-01,  ...,
            -3.85714173e-01, -3.53968143e-01, -1.63491964e-01],
           ...,
           [ 1.97936535e+00,  1.10634947e+00,  1.42380977e+00,  ...,
             1.94761932e+00,  1.94761932e+00,  1.97936535e+00],
           [ 1.94761932e+00,  1.47142887e+00,  1.37619078e+00,  ...,
             1.96349227e+00,  1.82063520e+00,  1.80476213e+00],
           [ 1.99523830e+00,  1.78888917e+00,  1.85238123e+00,  ...,
             1.99523830e+00,  1.99523830e+00,  1.94761932e+00]],

          [[-1.12721294e-01, -1.44927412e-01, -6.28019273e-01,  ...,
            -2.25442708e-01,  3.54267418e-01,  6.28019392e-01],
           [ 2.09339887e-01, -1.12721294e-01, -5.47504008e-01,  ...,
            -2.89854944e-01,  1.22934580e-07,  5.47504127e-01],
           [ 1.93236828e-01,  2.25442946e-01, -1.61029361e-02,  ...,
            -8.05151686e-02, -8.05151686e-02,  2.89855182e-01],
           ...,
           [ 1.70692456e+00,  8.37359190e-01,  1.14331758e+00,  ...,
             1.75523376e+00,  1.73913074e+00,  1.78743994e+00],
           [ 1.73913074e+00,  1.20772982e+00,  1.04669893e+00,  ...,
             1.72302771e+00,  1.57810009e+00,  1.61030626e+00],
           [ 1.85185218e+00,  1.57810009e+00,  1.56199706e+00,  ...,
             1.75523376e+00,  1.75523376e+00,  1.73913074e+00]],

          [[-1.39280367e+00, -1.30284870e+00, -1.61769128e+00,  ...,
            -1.27286363e+00, -7.48125911e-01, -3.73313308e-01],
           [-1.19790113e+00, -1.39280367e+00, -1.60269880e+00,  ...,
            -1.25787115e+00, -1.03298354e+00, -4.33283329e-01],
           [-1.13793111e+00, -1.21289361e+00, -1.45277369e+00,  ...,
            -1.18290865e+00, -1.03298354e+00, -7.18140900e-01],
           ...,
           [ 1.84557760e+00,  9.76012170e-01,  1.24587750e+00,  ...,
             1.87556267e+00,  1.84557760e+00,  1.87556267e+00],
           [ 1.87556267e+00,  1.33583248e+00,  1.15592217e+00,  ...,
             1.83058512e+00,  1.69565260e+00,  1.69565260e+00],
           [ 1.96551764e+00,  1.69565260e+00,  1.68066013e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.84557760e+00]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0350 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 153, vnnlib ID: 153 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.82804489, -23.63042831, -29.23712158, -28.24177551, -29.14320946,
         -29.41248703, -29.22246933, -29.10352325, -24.23150253, -21.39186287]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [726]; unstable size 726; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 265, 1, 726] with unstable size 264 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 726] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 726] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [264]; unstable size 264; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 264] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 264] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.64157343, 1.36549687, 5.86060524, 5.40555191, 5.76025915, 6.48044825,
         6.13686514, 6.01794577, 1.13634586]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0300 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 154, vnnlib ID: 154 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.78194427, -31.17414474, -25.47965050, -24.27825546, -24.95229912,
         -24.05517769, -25.49534607, -26.49033356, -27.99845505, -31.18796158]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [942]; unstable size 942; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 242, 1, 942] with unstable size 241 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 942] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 942] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [241]; unstable size 241; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 241] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 241] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.41716433,  5.54713583,  0.52021503, -0.06935596, -0.04526949,
          0.63125223,  1.37135804,  2.56105852,  5.77544546]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-29.78194427, -31.17414474, -25.47965050, -24.27825546, -24.95229912,
         -24.05517769, -25.49534607, -26.49033356, -27.99845505, -31.18796158]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.85it/s]100%|██████████| 1/1 [00:00<00:00,  8.84it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.30893517, -30.56543732, -25.00318527, -23.76297760, -24.40168571,
          -23.71816635, -24.78357506, -26.12542915, -27.38504028, -30.68838120],
         [-29.30893517, -30.56543732, -25.00318527, -23.76297760, -24.40168571,
          -23.71816635, -24.78357506, -26.12542915, -27.38504028, -30.68838120]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04481125, 0.68351936]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1158 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 21.0838565826416
alpha/beta optimization time: 1.2405049800872803
initial alpha-crown bounds: tensor([[ 4.47514009,  5.59848547,  0.56283295, -0.05797195, -0.01270819,
          0.67102265,  1.41879487,  2.60586238,  5.82239676]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.057971954345703125
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.60957837104797
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.60953664779663
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6095130443573
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.60949158668518
Verifying property 3 with 1 instances.
##### Instance 154 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.05797195]], device='cuda:0') need to verify.
Model prediction is: tensor([-29.78194427, -31.17414474, -25.47965050, -24.27825546, -24.95229912,
        -24.05517769, -25.49534607, -26.49033356, -27.99845505, -31.18796158],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.05797195]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 942
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 235
Node /15 input 0: size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 1190
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00012445449829101562
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.057971954345703125
10 lb beta sum: 0.0, worst -0.05797374248504639
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0530    transfer 0.0001    finalize 0.0001    func 0.0535    
Accumulated time: func 0.0535    prepare 0.0002    bound 0.0530    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 72] 
split level 3: [/input-8, 1699] 
split level 4: [/input-12, 31] 
split level 5: [/input-8, 403] 
split level 6: [/input-8, 770] 
split level 7: [/input-8, 1732] 
split level 8: [/input-8, 1722] 
split level 9: [/input-8, 140] 
split level 10: [/input-8, 1706] 
split level 11: [/input-8, 1731] 
split level 12: [/input-8, 1713] 
split level 13: [/input-8, 405] 
split level 14: [/input-8, 141] 
split level 15: [/input-8, 771] 
split level 16: [/input-8, 418] 
split level 17: [/input-8, 592] 
split level 18: [/input-8, 1301] 
split level 19: [/input-8, 1716] 
split level 20: [/input-8, 779] 
split level 21: [/input-8, 453] 
split level 22: [/input-8, 443] 
split level 23: [/input-8, 1325] 
split level 24: [/input-8, 138] 
split level 25: [/input-8, 1499] 
split level 26: [/input-8, 906] 
split level 27: [/input-8, 1834] 
split level 28: [/input-8, 1701] 
split level 29: [/input, 1510] 
split level 30: [/input-8, 1171] 
split level 31: [/input-8, 1028] 
split level 32: [/input-8, 588] 
split level 33: [/input, 1448] 
split level 34: [/input-8, 580] 
split level 35: [/input, 2968] 
split level 36: [/input-8, 1261] 
split level 37: [/input, 2662] 
split level 38: [/input-8, 731] 
split level 39: [/input-8, 772] 
split level 40: [/input-8, 87] 
split level 41: [/input-8, 56] 
split level 42: [/input-8, 1089] 
split level 43: [/input-8, 1029] 
split level 44: [/input-8, 582] 
split level 45: [/input-8, 994] 
split level 46: [/input-8, 1733] 
split level 47: [/input-8, 1782] 
split level 48: [/input-8, 1147] 
split level 49: [/input-8, 382] 
split level 50: [/input, 1499] 
split level 51: [/input-8, 406] 
split level 52: [/input-8, 579] 
split level 53: [/input-8, 1337] 
split level 54: [/input-8, 397] 
split level 55: [/input-8, 1662] 
split level 56: [/input-8, 97] 
split level 57: [/input-8, 595] 
split level 58: [/input-8, 75] 
split level 59: [/input-8, 1270] 
split level 60: [/input-8, 578] 
split level 61: [/input-8, 1265] 
split level 62: [/input-8, 1730] 
split level 63: [/input-8, 454] 
split level 64: [/input-8, 1302] 
split level 65: [/input, 581] 
split level 66: [/input-8, 1342] 
split level 67: [/input-8, 105] 
split level 68: [/input, 1913] 
split level 69: [/input, 1449] 
split level 70: [/input-8, 1953] 
split level 71: [/input-8, 993] 
split level 72: [/input-8, 95] 
split level 73: [/input-8, 235] 
split level 74: [/input-8, 1593] 
split level 75: [/input-8, 374] 
split level 76: [/input, 3262] 
split level 77: [/input-8, 142] 
split level 78: [/input-8, 91] 
split level 79: [/input, 3010] 
split level 80: [/input-8, 1576] 
split level 81: [/input-8, 1294] 
split level 82: [/input, 1912] 
split level 83: [/input-8, 218] 
split level 84: [/input-8, 945] 
split level 85: [/input-8, 57] 
split level 86: [/input-8, 1842] 
split level 87: [/input-8, 32] 
split level 88: [/input-8, 956] 
split level 89: [/input-8, 226] 
split level 90: [/input-8, 1752] 
split level 91: [/input, 1396] 
split level 92: [/input, 1491] 
split level 93: [/input, 2730] 
split level 94: [/input, 2742] 
split level 95: [/input, 131] 
split level 96: [/input, 3347] 
split level 97: [/input, 56] 
split level 98: [/input-8, 149] 
split level 99: [/input-8, 379] 
split level 100: [/input-8, 1293] 
split level 101: [/input, 2516] 
split level 102: [/input, 292] 
split level 103: [/input, 2660] 
split level 104: [/input, 1497] 
split level 105: [/input, 3345] 
split level 106: [/input, 1478] 
split level 107: [/input, 3637] 
split level 108: [/input-8, 103] 
split level 109: [/input-8, 1791] 
split level 110: [/input-8, 1965] 
split level 111: [/input, 803] 
split level 112: [/input-8, 424] 
split level 113: [/input-8, 584] 
split level 114: [/input, 3351] 
split level 115: [/input, 787] 
split level 116: [/input-8, 79] 
split level 117: [/input-8, 1959] 
split level 118: [/input, 2474] 
split level 119: [/input-8, 432] 
split level 120: [/input, 2765] 
split level 121: [/input-8, 1283] 
split level 122: [/input, 807] 
split level 123: [/input-8, 1310] 
split level 124: [/input-8, 423] 
split level 125: [/input, 3228] 
split level 126: [/input, 2663] 
split level 127: [/input-8, 150] 
split level 128: [/input-8, 1284] 
split level 129: [/input, 940] 
split level 130: [/input-8, 143] 
split level 131: [/input-8, 236] 
split level 132: [/input, 424] 
split level 133: [/input, 819] 
split level 134: [/input, 2498] 
split level 135: [/input, 2750] 
split level 136: [/input-8, 1591] 
split level 137: [/input, 168] 
split level 138: [/input-8, 1758] 
split level 139: [/input, 177] 
split level 140: [/input, 2897] 
split level 141: [/input, 55] 
split level 142: [/input, 141] 
split level 143: [/input-8, 1971] 
split level 144: [/input, 179] 
split level 145: [/input, 2502] 
split level 146: [/input, 3566] 
split level 147: [/input, 282] 
split level 148: [/input, 791] 
split level 149: [/input, 792] 
split level 150: [/input-8, 151] 
split level 151: [/input-8, 1729] 
split level 152: [/input, 1706] 
split level 153: [/input, 2851] 
split level 154: [/input-8, 442] 
split level 155: [/input-8, 1851] 
split level 156: [/input-8, 1774] 
split level 157: [/input, 293] 
split level 158: [/input, 2282] 
split level 159: [/input, 3123] 
split level 160: [/input, 2540] 
split level 161: [/input, 308] 
split level 162: [/input, 2749] 
split level 163: [/input, 3279] 
split level 164: [/input, 809] 
split level 165: [/input, 934] 
split level 166: [/input-8, 1735] 
split level 167: [/input, 1525] 
split level 168: [/input, 467] 
split level 169: [/input, 2547] 
split level 170: [/input, 1489] 
split level 171: [/input, 1714] 
split level 172: [/input, 2103] 
split level 173: [/input, 2686] 
split level 174: [/input, 283] 
split level 175: [/input, 3116] 
split level 176: [/input-8, 2038] 
split level 177: [/input, 3419] 
split level 178: [/input, 194] 
split level 179: [/input, 215] 
split level 180: [/input-12, 61] 
split level 181: [/input, 924] 
split level 182: [/input, 811] 
split level 183: [/input, 810] 
split level 184: [/input, 348] 
split level 185: [/input, 296] 
split level 186: [/input, 3361] 
split level 187: [/input, 362] 
split level 188: [/input-8, 1271] 
split level 189: [/input, 298] 
split level 190: [/input, 2269] 
split level 191: [/input, 785] 
split level 192: [/input, 2481] 
split level 193: [/input, 346] 
split level 194: [/input, 2852] 
split level 195: [/input, 3311] 
split level 196: [/input, 2246] 
split level 197: [/input, 3511] 
split level 198: [/input, 769] 
split level 199: [/input, 140] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05793386697769165
10 lb beta sum: 0.0, worst -0.057933032512664795
Time: prepare 0.0113    bound 0.0997    transfer 0.0032    finalize 0.0029    func 0.1198    
Accumulated time: func 0.1733    prepare 0.0214    bound 0.1527    transfer 0.0033    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.09599490) min lb tensor(-0.05793130)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010854959487915039 
BICCOS Cumulative time: 0.010854959487915039
Preprocessing time: 0.010101556777954102 Inference time: 0.00012087821960449219 Add cuts time: 5.2928924560546875e-05 Cut analysis time: 0.0005795955657958984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05414 (1), -0.05390 (1), -0.05389 (1), -0.05389 (1), -0.05380 (1), -0.05375 (1), -0.05374 (1), -0.05365 (1), -0.05364 (1), -0.05345 (1), -0.05333 (1), -0.05316 (1), -0.05313 (1), -0.05309 (1), -0.05307 (1), -0.05298 (1), -0.05287 (1), -0.05277 (1), -0.05267 (1), -0.05249 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5211    set_bounds 0.0089    solve 0.1199    add 0.0662    
Accumulated time: pickout 0.0003    decision 0.5211    set_bounds 0.0089    solve 0.1199    add 0.0662    
Current (lb-rhs): -0.05413848161697388
50 domains visited
Cumulative time: 0.7862362861633301

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 31] [/input-12, 31] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-8, 403] [/input-8, 403] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 140] [/input-8, 140] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.052787601947784424
10 lb beta sum: 0.36995184421539307, worst -0.05080294609069824
Time: prepare 0.0077    bound 0.1203    transfer 0.0038    finalize 0.0028    func 0.1373    
Accumulated time: func 0.3106    prepare 0.0293    bound 0.2731    transfer 0.0072    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.06797967) min lb tensor(-0.05075204)
Number of Verified Splits: 50 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.014999151229858398 
BICCOS Cumulative time: 0.025854110717773438
Preprocessing time: 0.011937379837036133 Inference time: 0.0017020702362060547 Add cuts time: 0.0011239051818847656 Cut analysis time: 0.0002357959747314453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03597 (2), -0.03593 (2), -0.03589 (2), -0.03582 (2), -0.03577 (2), -0.03567 (2), -0.03545 (2), -0.03529 (2), -0.03526 (2), -0.03491 (2), -0.03488 (2), -0.03487 (2), -0.03479 (2), -0.03462 (2), -0.03448 (2), -0.03437 (2), -0.03434 (2), -0.03422 (2), -0.03415 (2), -0.03399 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0256    set_bounds 0.0121    solve 0.1374    add 0.0784    
Accumulated time: pickout 0.0013    decision 0.5467    set_bounds 0.0210    solve 0.2572    add 0.1446    
Current (lb-rhs): -0.035973429679870605
100 domains visited
Cumulative time: 1.0558955669403076

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 72] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 72] [/input-12, 31] [/input-12, 72] [/input-12, 72] [/input-12, 31] [/input-12, 72] [/input-12, 72] [/input-12, 31] 
split level 2: [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-12, 31] [/input-8, 403] [/input-12, 31] [/input-8, 403] [/input-8, 403] 
split level 3: [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] 
cut re-enabled after branching node selection
0 lb beta sum: 0.46296262741088867, worst -0.035973548889160156
10 lb beta sum: 0.46296262741088867, worst -0.03606715798377991
Time: prepare 0.0176    bound 0.1200    transfer 0.0012    finalize 0.0025    func 0.1440    
Accumulated time: func 0.4545    prepare 0.0472    bound 0.3931    transfer 0.0083    finalize 0.0084    
all_split False
======================Cut inference begins======================
max lb tensor(0.07995313) min lb tensor(-0.03591663)
Number of Verified Splits: 48 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.015184402465820312 
BICCOS Cumulative time: 0.04103851318359375
Preprocessing time: 0.011768579483032227 Inference time: 0.0018353462219238281 Add cuts time: 0.0013477802276611328 Cut analysis time: 0.000232696533203125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01576 (3), -0.01572 (3), -0.01567 (3), -0.01543 (3), -0.01542 (3), -0.01539 (3), -0.01484 (3), -0.01437 (3), -0.01435 (3), -0.01358 (3), -0.01357 (3), -0.01348 (3), -0.01348 (3), -0.01303 (3), -0.01299 (3), -0.01253 (3), -0.01252 (3), -0.01245 (3), -0.01244 (3), -0.01239 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0149    solve 0.1441    add 0.0828    
Accumulated time: pickout 0.0023    decision 0.5662    set_bounds 0.0359    solve 0.4013    add 0.2274    
Current (lb-rhs): -0.01576337218284607
150 domains visited
Cumulative time: 1.3334481716156006

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-12, 31] [/input-12, 31] 
split level 2: [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 403] 
split level 3: [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4651600420475006, worst -0.015763074159622192
10 lb beta sum: 0.4651600420475006, worst -0.015368148684501648
Time: prepare 0.0174    bound 0.1192    transfer 0.0012    finalize 0.0026    func 0.1434    
Accumulated time: func 0.5979    prepare 0.0648    bound 0.5122    transfer 0.0095    finalize 0.0110    
all_split False
======================Cut inference begins======================
max lb tensor(0.08399460) min lb tensor(-0.01530093)
Number of Verified Splits: 56 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 2
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.015680551528930664 
BICCOS Cumulative time: 0.056719064712524414
Preprocessing time: 0.011655807495117188 Inference time: 0.0023584365844726562 Add cuts time: 0.0008120536804199219 Cut analysis time: 0.0008542537689208984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00274 (4), -0.00274 (4), -0.00274 (4), -0.00273 (4), -0.00272 (4), -0.00272 (4), -0.00271 (4), -0.00270 (4), -0.00259 (4), -0.00259 (4), -0.00241 (4), -0.00238 (4), -0.00216 (4), -0.00205 (4), -0.00203 (4), -0.00201 (4), -0.00201 (4), -0.00191 (4), -0.00180 (4), -0.00175 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0191    set_bounds 0.0153    solve 0.1435    add 0.2096    
Accumulated time: pickout 0.0033    decision 0.5852    set_bounds 0.0512    solve 0.5448    add 0.4370    
Current (lb-rhs): -0.0027441978454589844
200 domains visited
Cumulative time: 1.7379088401794434

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 140] [/input-8, 140] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 140] [/input-8, 403] [/input-8, 1713] [/input-8, 140] [/input-8, 140] 
split level 2: [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 140] [/input-8, 771] [/input-8, 771] 
split level 3: [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 771] [/input-8, 418] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.005370676517486572
10 lb beta sum: 0.36074966192245483, worst -0.007919847965240479
Time: prepare 0.0081    bound 0.1341    transfer 0.0012    finalize 0.0025    func 0.1485    
Accumulated time: func 0.7464    prepare 0.0732    bound 0.6463    transfer 0.0107    finalize 0.0135    
all_split False
======================Cut inference begins======================
max lb tensor(0.37536442) min lb tensor(-0.00250918)
Number of Verified Splits: 330 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.032362937927246094 
BICCOS Cumulative time: 0.08908200263977051
Preprocessing time: 0.011577129364013672 Inference time: 0.015841245651245117 Add cuts time: 0.004474639892578125 Cut analysis time: 0.0004699230194091797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00251 (5), -0.00250 (5), -0.00120 (5), -0.00120 (5), -0.00102 (5), -0.00101 (5), -0.00086 (5), -0.00084 (5), 
Length of domains: 8
Time: pickout 0.0012    decision 0.0197    set_bounds 0.0156    solve 0.1485    add 0.1054    
Accumulated time: pickout 0.0045    decision 0.6050    set_bounds 0.0669    solve 0.6933    add 0.5424    
Current (lb-rhs): -0.002509176731109619
208 domains visited
Cumulative time: 2.061049461364746

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1499]), tensor([-1.]), tensor([0]), tensor([1.86540852e-41]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1499,  403]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.14794370e-41, 1.87425478e-03]), tensor([0, 3])), '/input-12': ([72, 31], [-1.0, -1.0], [0, 0], [2.829541634473984e+16, 0.007436619605869055], [1, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [1.1479437019748901e-41, 0.005107568111270666], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([2.82954163e+16, 7.43661961e-03, 1.40711982e-02]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [1.1479437019748901e-41, 0.005107568111270666], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.82954163e+16, 7.43661961e-03, 4.94436754e-05]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1499,  403]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.14794370e-41, 1.99537142e-03]), tensor([0, 3])), '/input-12': ([72, 31], [-1.0, 1.0], [0, 0], [2.829541634473984e+16, 0.007658110465854406], [1, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [1.1479437019748901e-41, 0.004824863281100988], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.82954163e+16, 7.65811047e-03, 1.40137393e-02]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [1.1479437019748901e-41, 0.004824863281100988], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([2.82954163e+16, 7.65811047e-03, 4.78343500e-05]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1499,  403]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.14794370e-41, 1.80821284e-03]), tensor([0, 3])), '/input-12': ([72, 31], [1.0, -1.0], [0, 0], [0.019967081025242805, 0.007059143390506506], [1, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [1.1479437019748901e-41, 0.005275891628116369], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([0.01996708, 0.00705914, 0.01432529]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [1.1479437019748901e-41, 0.005275891628116369], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.99670810e-02, 7.05914339e-03, 9.99999997e-07]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 418], [1.0, -1.0], [0, 0], [1.1479437019748901e-41, 0.0021819339599460363], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.01996708, 0.00782882, 0.01434282]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 418], [1.0, -1.0], [0, 0], [1.1479437019748901e-41, 0.0021819339599460363], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([0.01996708, 0.00782882, 0.00288192]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 418], [1.0, 1.0], [0, 0], [1.1479437019748901e-41, 0.0027901397552341223], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.01996708, 0.00782882, 0.01443258]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 418], [1.0, 1.0], [0, 0], [1.1479437019748901e-41, 0.0027901397552341223], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([0.01996708, 0.00782882, 0.00257644]), tensor([1, 2, 4]))}
Shallow branching resets to n domains:  14
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05788099765777588
10 lb beta sum: 0.7827003002166748, worst -0.05462571978569031
Time: prepare 0.0006    bound 0.1290    transfer 0.0002    finalize 0.0002    func 0.1301    
Accumulated time: func 0.8765    prepare 0.0737    bound 0.7753    transfer 0.0109    finalize 0.0137    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 72] [/input-8, 770] [/input-8, 770] [/input-8, 770] 
split level 2: [/input-12, 31] [/input-8, 140] [/input-8, 140] [/input-8, 140] 
split level 3: [/input-8, 403] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] 
split level 4: [/input-8, 140] [/input-8, 771] [/input-8, 771] [/input-8, 771] 
split level 5: [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.697033166885376, worst -0.03240059316158295
10 lb beta sum: 0.7101495265960693, worst -0.03224729001522064
Time: prepare 0.0114    bound 0.1303    transfer 0.0018    finalize 0.0018    func 0.1469    
Accumulated time: func 1.0235    prepare 0.0854    bound 0.9056    transfer 0.0127    finalize 0.0155    
all_split False
======================Cut inference begins======================
max lb tensor(0.06788605) min lb tensor(-0.03220563)
Number of Verified Splits: 224 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.00031375885009765625 
BICCOS Cumulative time: 0.08939576148986816
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03221 (6), -0.03194 (6), -0.03128 (6), -0.03046 (6), -0.03041 (6), -0.03018 (6), -0.02950 (6), -0.02855 (6), -0.02758 (6), -0.02715 (6), -0.02664 (6), -0.02654 (6), -0.02645 (6), -0.02635 (6), -0.02582 (6), -0.02545 (6), -0.02523 (6), -0.02488 (6), -0.02479 (6), -0.02461 (6), 
Length of domains: 32
Time: pickout 0.0006    decision 0.0175    set_bounds 0.0261    solve 0.1470    add 0.0009    
Accumulated time: pickout 0.0050    decision 0.6224    set_bounds 0.0930    solve 0.8403    add 0.5433    
Current (lb-rhs): -0.032205626368522644
240 domains visited
Cumulative time: 2.4124820232391357

BaB round 2
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] 
split level 1: [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] 
split level 2: [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5339847803115845, worst -0.029723450541496277
10 lb beta sum: 0.5340721011161804, worst -0.02967141568660736
Time: prepare 0.0111    bound 0.1324    transfer 0.0008    finalize 0.0012    func 0.1472    
Accumulated time: func 1.1707    prepare 0.0967    bound 1.0381    transfer 0.0134    finalize 0.0167    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00387697) min lb tensor(-0.02964889)
Number of Verified Splits: 0 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.00030231475830078125 
BICCOS Cumulative time: 0.08969807624816895
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02965 (9), -0.02942 (9), -0.02865 (9), -0.02786 (9), -0.02784 (9), -0.02761 (9), -0.02760 (9), -0.02734 (9), -0.02687 (9), -0.02668 (9), -0.02595 (9), -0.02583 (9), -0.02582 (9), -0.02552 (9), -0.02522 (9), -0.02492 (9), -0.02481 (9), -0.02465 (9), -0.02418 (9), -0.02415 (9), 
Length of domains: 256
Time: pickout 0.0012    decision 0.0153    set_bounds 0.0130    solve 0.1473    add 0.0016    
Accumulated time: pickout 0.0062    decision 0.6377    set_bounds 0.1059    solve 0.9876    add 0.5449    
Current (lb-rhs): -0.029648885130882263
496 domains visited
Cumulative time: 2.5913758277893066

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-8, 1731] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-8, 1731] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-8, 1731] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5341509580612183, worst -0.029648885130882263
10 lb beta sum: 0.5341199636459351, worst -0.02962993085384369
Time: prepare 0.0224    bound 0.1331    transfer 0.0027    finalize 0.0026    func 0.1641    
Accumulated time: func 1.3348    prepare 0.1193    bound 1.1711    transfer 0.0161    finalize 0.0193    
all_split False
======================Cut inference begins======================
max lb tensor(0.26315731) min lb tensor(-0.02961712)
Number of Verified Splits: 103 of 512
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.000324249267578125 
BICCOS Cumulative time: 0.09002232551574707
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02962 (10), -0.02872 (10), -0.02865 (10), -0.02781 (10), -0.02757 (10), -0.02714 (10), -0.02690 (10), -0.02688 (10), -0.02668 (10), -0.02621 (10), -0.02579 (10), -0.02534 (10), -0.02505 (10), -0.02493 (10), -0.02479 (10), -0.02459 (10), -0.02444 (10), -0.02436 (10), -0.02413 (10), -0.02403 (10), 
Length of domains: 409
Time: pickout 0.0032    decision 0.0222    set_bounds 0.0214    solve 0.1649    add 0.0023    
Accumulated time: pickout 0.0094    decision 0.6599    set_bounds 0.1273    solve 1.1525    add 0.5472    
Current (lb-rhs): -0.02961711585521698
905 domains visited
Cumulative time: 2.806291341781616

BaB round 4
batch: 409
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-8, 1701] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-8, 1731] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5380502939224243, worst -0.028963729739189148
10 lb beta sum: 0.5380232334136963, worst -0.02894197404384613
Time: prepare 0.0359    bound 0.1401    transfer 0.0033    finalize 0.0046    func 0.1892    
Accumulated time: func 1.5240    prepare 0.1554    bound 1.3112    transfer 0.0195    finalize 0.0239    
all_split False
======================Cut inference begins======================
max lb tensor(0.26858461) min lb tensor(-0.02892731)
Number of Verified Splits: 251 of 818
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.00041866302490234375 
BICCOS Cumulative time: 0.09044098854064941
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02893 (11), -0.02870 (11), -0.02802 (11), -0.02713 (11), -0.02709 (11), -0.02686 (11), -0.02686 (11), -0.02683 (11), -0.02626 (11), -0.02617 (11), -0.02531 (11), -0.02489 (11), -0.02481 (11), -0.02441 (11), -0.02434 (11), -0.02393 (11), -0.02388 (11), -0.02385 (11), -0.02371 (11), -0.02370 (11), 
Length of domains: 567
Time: pickout 0.0048    decision 0.0355    set_bounds 0.0330    solve 0.1894    add 0.0040    
Accumulated time: pickout 0.0143    decision 0.6954    set_bounds 0.1602    solve 1.3419    add 0.5512    
Current (lb-rhs): -0.028927311301231384
1472 domains visited
Cumulative time: 3.076845407485962

BaB round 5
batch: 567
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] 
cut re-enabled after branching node selection
0 lb beta sum: 0.543050229549408, worst -0.02809987962245941
10 lb beta sum: 0.543007493019104, worst -0.028065308928489685
Time: prepare 0.0489    bound 0.1428    transfer 0.0055    finalize 0.0065    func 0.2109    
Accumulated time: func 1.7349    prepare 0.2046    bound 1.4540    transfer 0.0249    finalize 0.0303    
all_split False
======================Cut inference begins======================
max lb tensor(0.26912904) min lb tensor(-0.02803861)
Number of Verified Splits: 156 of 1134
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.0003447532653808594 
BICCOS Cumulative time: 0.09078574180603027
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02804 (12), -0.02773 (12), -0.02709 (12), -0.02666 (12), -0.02618 (12), -0.02617 (12), -0.02589 (12), -0.02568 (12), -0.02566 (12), -0.02544 (12), -0.02541 (12), -0.02527 (12), -0.02492 (12), -0.02483 (12), -0.02445 (12), -0.02439 (12), -0.02429 (12), -0.02408 (12), -0.02396 (12), -0.02396 (12), 
Length of domains: 978
Time: pickout 0.0117    decision 0.0453    set_bounds 0.0484    solve 0.2112    add 0.0063    
Accumulated time: pickout 0.0260    decision 0.7407    set_bounds 0.2086    solve 1.5531    add 0.5575    
Current (lb-rhs): -0.02803860604763031
2450 domains visited
Cumulative time: 3.4015350341796875

BaB round 6
batch: 978
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1028] [/input-8, 1028] [/input-8, 1701] [/input-8, 1028] [/input-8, 1028] [/input-8, 1701] [/input-8, 1028] [/input-8, 1028] [/input-8, 1731] [/input-8, 1028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5320823192596436, worst -0.026744231581687927
10 lb beta sum: 0.5320335030555725, worst -0.026721462607383728
Time: prepare 0.0838    bound 0.1662    transfer 0.0132    finalize 0.1623    func 0.4390    
Accumulated time: func 2.1739    prepare 0.2886    bound 1.6202    transfer 0.0381    finalize 0.1927    
all_split False
======================Cut inference begins======================
max lb tensor(0.26899478) min lb tensor(-0.02671055)
Number of Verified Splits: 106 of 1956
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.00043773651123046875 
BICCOS Cumulative time: 0.09122347831726074
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02671 (13), -0.02654 (13), -0.02634 (13), -0.02622 (13), -0.02549 (13), -0.02515 (13), -0.02502 (13), -0.02494 (13), -0.02483 (13), -0.02482 (13), -0.02471 (13), -0.02469 (13), -0.02456 (13), -0.02453 (13), -0.02440 (13), -0.02409 (13), -0.02390 (13), -0.02390 (13), -0.02351 (13), -0.02350 (13), 
Length of domains: 1850
Time: pickout 0.0160    decision 0.0642    set_bounds 0.0790    solve 0.4394    add 0.0108    
Accumulated time: pickout 0.0420    decision 0.8048    set_bounds 0.2877    solve 1.9925    add 0.5683    
Current (lb-rhs): -0.02671055495738983
4300 domains visited
Cumulative time: 4.013563632965088

BaB round 7
batch: 1850
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 731] [/input-8, 1261] [/input-8, 772] [/input-8, 731] [/input-8, 1261] [/input-8, 731] [/input-8, 1261] [/input-8, 772] [/input-8, 731] [/input-8, 1261] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5280457735061646, worst -0.02565912902355194
10 lb beta sum: 0.5279985666275024, worst -0.025614723563194275
Time: prepare 0.1609    bound 0.2656    transfer 0.0324    finalize 0.0171    func 0.5002    
Accumulated time: func 2.6741    prepare 0.4498    bound 1.8858    transfer 0.0706    finalize 0.2098    
all_split False
======================Cut inference begins======================
max lb tensor(0.00481679) min lb tensor(-0.02559309)
Number of Verified Splits: 218 of 3700
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.00041866302490234375 
BICCOS Cumulative time: 0.09164214134216309
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02559 (14), -0.02531 (14), -0.02507 (14), -0.02505 (14), -0.02470 (14), -0.02467 (14), -0.02436 (14), -0.02427 (14), -0.02398 (14), -0.02397 (14), -0.02395 (14), -0.02384 (14), -0.02382 (14), -0.02376 (14), -0.02370 (14), -0.02351 (14), -0.02349 (14), -0.02339 (14), -0.02323 (14), -0.02322 (14), 
Length of domains: 3482
Time: pickout 0.0238    decision 0.1097    set_bounds 0.1481    solve 0.5014    add 0.0231    
Accumulated time: pickout 0.0658    decision 0.9145    set_bounds 0.4358    solve 2.4939    add 0.5914    
Current (lb-rhs): -0.025593087077140808
7782 domains visited
Cumulative time: 4.825354337692261

BaB round 8
batch: 3482
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1261] [/input-8, 1716] [/input-8, 1028] [/input-8, 1261] [/input-8, 1716] [/input-8, 1261] [/input-8, 1716] [/input-8, 1028] [/input-8, 1261] [/input-8, 1716] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5245565176010132, worst -0.024224624037742615
10 lb beta sum: 0.5245218276977539, worst -0.024198636412620544
Time: prepare 0.3069    bound 0.4355    transfer 0.0674    finalize 0.0382    func 0.8932    
Accumulated time: func 3.5673    prepare 0.7569    bound 2.3213    transfer 0.1380    finalize 0.2480    
all_split False
======================Cut inference begins======================
max lb tensor(0.00446300) min lb tensor(-0.02418499)
Number of Verified Splits: 525 of 6964
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.0005028247833251953 
BICCOS Cumulative time: 0.09214496612548828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02418 (15), -0.02416 (15), -0.02399 (15), -0.02392 (15), -0.02383 (15), -0.02381 (15), -0.02378 (15), -0.02360 (15), -0.02335 (15), -0.02332 (15), -0.02300 (15), -0.02297 (15), -0.02295 (15), -0.02294 (15), -0.02292 (15), -0.02274 (15), -0.02262 (15), -0.02262 (15), -0.02261 (15), -0.02260 (15), 
Length of domains: 6439
Time: pickout 0.0436    decision 0.1983    set_bounds 0.4274    solve 0.8947    add 0.0266    
Accumulated time: pickout 0.1094    decision 1.1129    set_bounds 0.8632    solve 3.3885    add 0.6180    
Current (lb-rhs): -0.02418498694896698
14221 domains visited
Cumulative time: 6.427706241607666

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1701] [/input-8, 731] [/input-8, 1701] [/input-8, 1701] [/input-8, 731] [/input-8, 731] [/input-8, 1701] [/input-8, 731] [/input-8, 1701] [/input-8, 731] 
cut re-enabled after branching node selection
0 lb beta sum: 0.52201908826828, worst -0.023359522223472595
10 lb beta sum: 0.5219828486442566, worst -0.02334432303905487
Time: prepare 0.3629    bound 0.5011    transfer 0.0966    finalize 0.0386    func 1.0531    
Accumulated time: func 4.6204    prepare 1.1201    bound 2.8224    transfer 0.2346    finalize 0.2866    
all_split False
======================Cut inference begins======================
max lb tensor(0.01060005) min lb tensor(-0.02333950)
Number of Verified Splits: 1147 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.0006139278411865234 
BICCOS Cumulative time: 0.0927588939666748
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02360 (15), -0.02335 (15), -0.02334 (16), -0.02322 (16), -0.02317 (16), -0.02314 (16), -0.02297 (15), -0.02294 (15), -0.02279 (16), -0.02276 (16), -0.02262 (15), -0.02260 (15), -0.02238 (16), -0.02236 (16), -0.02228 (15), -0.02227 (16), -0.02212 (15), -0.02207 (16), -0.02206 (15), -0.02206 (16), 
Length of domains: 9388
Time: pickout 0.0547    decision 0.3904    set_bounds 0.3553    solve 1.2539    add 0.0334    
Accumulated time: pickout 0.1641    decision 1.5033    set_bounds 1.2185    solve 4.6424    add 0.6513    
Current (lb-rhs): -0.023597583174705505
21266 domains visited
current_vram/total_varm: 24.8GB/99.9GB, batch_size increase to 8192
Cumulative time: 8.536533117294312

BaB round 10
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 772] [/input-8, 1701] [/input-8, 731] [/input-8, 1699] [/input-8, 1701] [/input-8, 731] [/input-8, 1261] [/input-8, 1701] [/input-8, 731] [/input-8, 1699] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5174961686134338, worst -0.022519990801811218
10 lb beta sum: 0.517471194267273, worst -0.022510454058647156
Time: prepare 0.7229    bound 0.9286    transfer 0.1822    finalize 0.0839    func 2.2350    
Accumulated time: func 6.8554    prepare 1.8434    bound 3.7510    transfer 0.4168    finalize 0.3705    
all_split False
======================Cut inference begins======================
max lb tensor(0.01072414) min lb tensor(-0.02250604)
Number of Verified Splits: 2955 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.000629425048828125 
BICCOS Cumulative time: 0.09338831901550293
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02251 (17), -0.02240 (17), -0.02236 (17), -0.02233 (17), -0.02230 (16), -0.02202 (16), -0.02200 (16), -0.02199 (16), -0.02198 (17), -0.02195 (17), -0.02192 (16), -0.02189 (16), -0.02169 (16), -0.02140 (17), -0.02139 (17), -0.02138 (17), -0.02137 (17), -0.02127 (17), -0.02122 (17), -0.02121 (17), 
Length of domains: 14625
Time: pickout 0.1093    decision 0.4501    set_bounds 0.8768    solve 2.2375    add 0.0567    
Accumulated time: pickout 0.2734    decision 1.9534    set_bounds 2.0953    solve 6.8799    add 0.7080    
Current (lb-rhs): -0.022506043314933777
34695 domains visited
current_vram/total_varm: 30.4GB/99.9GB, batch_size increase to 16384
Cumulative time: 12.312798500061035

BaB round 11
batch: 14625
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1701] [/input-8, 1699] [/input-8, 582] [/input-8, 1701] [/input-8, 582] [/input-8, 1701] [/input-8, 1699] [/input-8, 582] [/input-8, 1701] [/input-8, 582] 
cut re-enabled after branching node selection
0 lb beta sum: 0.509613037109375, worst -0.02169756591320038
10 lb beta sum: 0.5096001029014587, worst -0.021679267287254333
Time: prepare 1.3082    bound 1.6060    transfer 0.3285    finalize 0.1978    func 3.9200    
Accumulated time: func 10.7753    prepare 3.1520    bound 5.3570    transfer 0.7452    finalize 0.5682    
all_split False
======================Cut inference begins======================
max lb tensor(0.01036610) min lb tensor(-0.02167521)
Number of Verified Splits: 5258 of 29250
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.0007171630859375 
BICCOS Cumulative time: 0.09410548210144043
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02168 (18), -0.02165 (18), -0.02142 (17), -0.02130 (18), -0.02128 (18), -0.02124 (18), -0.02119 (17), -0.02113 (18), -0.02104 (17), -0.02102 (17), -0.02101 (17), -0.02099 (17), -0.02086 (18), -0.02085 (17), -0.02077 (18), -0.02075 (18), -0.02075 (18), -0.02072 (18), -0.02051 (18), -0.02050 (18), 
Length of domains: 23992
Time: pickout 0.2643    decision 1.0485    set_bounds 1.5190    solve 3.9251    add 0.0914    
Accumulated time: pickout 0.5377    decision 3.0019    set_bounds 3.6143    solve 10.8050    add 0.7994    
Current (lb-rhs): -0.021675214171409607
58687 domains visited
Cumulative time: 19.241864681243896

BaB round 12
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1716] [/input-8, 1261] [/input-8, 1701] [/input-8, 1716] [/input-8, 1701] [/input-8, 1716] [/input-8, 1261] [/input-8, 1701] [/input-8, 1716] [/input-8, 1701] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5089172124862671, worst -0.02110867202281952
10 lb beta sum: 0.5089060068130493, worst -0.021096214652061462
Time: prepare 1.4595    bound 1.7848    transfer 0.3911    finalize 0.2303    func 4.4249    
Accumulated time: func 15.2003    prepare 4.6118    bound 7.1418    transfer 1.1363    finalize 0.7985    
all_split False
======================Cut inference begins======================
max lb tensor(0.01048322) min lb tensor(-0.02109437)
Number of Verified Splits: 7875 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.0007977485656738281 
BICCOS Cumulative time: 0.09490323066711426
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02109 (19), -0.02106 (19), -0.02086 (18), -0.02075 (18), -0.02072 (19), -0.02069 (19), -0.02056 (19), -0.02045 (19), -0.02040 (18), -0.02038 (18), -0.02037 (18), -0.02035 (18), -0.02024 (17), -0.02024 (19), -0.02021 (19), -0.02013 (19), -0.02008 (19), -0.02004 (17), -0.02000 (18), -0.01992 (19), 
Length of domains: 32501
Time: pickout 0.2305    decision 1.7009    set_bounds 1.7768    solve 4.4310    add 0.1306    
Accumulated time: pickout 0.7682    decision 4.7028    set_bounds 5.3910    solve 15.2360    add 0.9300    
Current (lb-rhs): -0.021094366908073425
83580 domains visited
current_vram/total_varm: 40.5GB/99.9GB, batch_size increase to 32768
Cumulative time: 27.615824937820435

BaB round 13
batch: 32501
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 1261] [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 1261] [/input-8, 582] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5068551898002625, worst -0.020202085375785828
10 lb beta sum: 0.5068477392196655, worst -0.020196780562400818
Time: prepare 2.8785    bound 3.4874    transfer 0.7331    finalize 0.8968    func 8.4079    
Accumulated time: func 23.6081    prepare 7.4908    bound 10.6291    transfer 1.8694    finalize 1.6954    
all_split False
======================Cut inference begins======================
max lb tensor(0.01021107) min lb tensor(-0.02018933)
Number of Verified Splits: 18484 of 65002
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.0009691715240478516 
BICCOS Cumulative time: 0.09587240219116211
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02019 (20), -0.02019 (19), -0.02016 (19), -0.02016 (20), -0.01999 (20), -0.01996 (20), -0.01984 (19), -0.01984 (19), -0.01979 (19), -0.01976 (19), -0.01955 (20), -0.01953 (18), -0.01952 (20), -0.01945 (20), -0.01941 (18), -0.01934 (20), -0.01932 (19), -0.01916 (18), -0.01916 (18), -0.01916 (20), 
Length of domains: 46518
Time: pickout 0.5971    decision 3.2743    set_bounds 3.7588    solve 8.4181    add 0.1513    
Accumulated time: pickout 1.3653    decision 7.9772    set_bounds 9.1498    solve 23.6541    add 1.0813    
Current (lb-rhs): -0.020189329981803894
130098 domains visited
Cumulative time: 44.03079795837402

BaB round 14
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5033479928970337, worst -0.01935623586177826
10 lb beta sum: 0.5033429861068726, worst -0.019401952624320984
Time: prepare 3.0069    bound 8.7027    transfer 0.7450    finalize 1.1145    func 13.9910    
Accumulated time: func 37.5992    prepare 10.4980    bound 19.3319    transfer 2.6144    finalize 2.8099    
all_split False
======================Cut inference begins======================
max lb tensor(0.01041718) min lb tensor(-0.01934741)
Number of Verified Splits: 16194 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.0009090900421142578 
BICCOS Cumulative time: 0.09678149223327637
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01999 (20), -0.01996 (20), -0.01945 (20), -0.01935 (20), -0.01935 (20), -0.01934 (20), -0.01923 (20), -0.01915 (20), -0.01915 (20), -0.01911 (20), -0.01909 (20), -0.01906 (20), -0.01906 (20), -0.01903 (21), -0.01903 (20), -0.01899 (21), -0.01896 (21), -0.01895 (19), -0.01895 (20), -0.01893 (21), 
Length of domains: 63092
Time: pickout 0.4765    decision 3.3135    set_bounds 4.0714    solve 14.0032    add 0.1687    
Accumulated time: pickout 1.8418    decision 11.2906    set_bounds 13.2212    solve 37.6573    add 1.2500    
Current (lb-rhs): -0.019987568259239197
179440 domains visited
Cumulative time: 66.28819108009338

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5073266625404358, worst -0.019352182745933533
10 lb beta sum: 0.5073221921920776, worst -0.019346162676811218
Time: prepare 3.0150    bound 8.7032    transfer 0.7467    finalize 0.5409    func 13.4389    
Accumulated time: func 51.0380    prepare 13.5135    bound 28.0350    transfer 3.3611    finalize 3.3508    
all_split False
======================Cut inference begins======================
max lb tensor(0.00960697) min lb tensor(-0.01934169)
Number of Verified Splits: 13235 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.0011293888092041016 
BICCOS Cumulative time: 0.09791088104248047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01934 (21), -0.01931 (21), -0.01906 (20), -0.01906 (20), -0.01903 (21), -0.01899 (21), -0.01866 (20), -0.01865 (21), -0.01854 (21), -0.01852 (21), -0.01852 (21), -0.01839 (21), -0.01838 (21), -0.01836 (21), -0.01832 (20), -0.01822 (21), -0.01822 (21), -0.01822 (21), -0.01821 (20), -0.01821 (20), 
Length of domains: 82625
Time: pickout 0.4958    decision 3.4736    set_bounds 4.4436    solve 13.4513    add 0.2425    
Accumulated time: pickout 2.3377    decision 14.7643    set_bounds 17.6648    solve 51.1086    add 1.4925    
Current (lb-rhs): -0.019341692328453064
231741 domains visited
Cumulative time: 88.6452157497406

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 580] [/input-8, 1733] [/input-8, 579] [/input-8, 1733] [/input-8, 1733] [/input-8, 1733] [/input-8, 1733] [/input-8, 579] [/input-8, 1733] [/input-8, 579] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5083440542221069, worst -0.018419846892356873
10 lb beta sum: 0.5083404779434204, worst -0.018422529101371765
Time: prepare 2.9878    bound 8.7045    transfer 0.7540    finalize 1.3584    func 14.2396    
Accumulated time: func 65.2776    prepare 16.5016    bound 36.7395    transfer 4.1151    finalize 4.7092    
all_split False
======================Cut inference begins======================
max lb tensor(0.00939836) min lb tensor(-0.01841305)
Number of Verified Splits: 13062 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.016083717346191406 
BICCOS Cumulative time: 0.11399459838867188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01934 (21), -0.01931 (21), -0.01865 (21), -0.01854 (21), -0.01852 (21), -0.01841 (21), -0.01839 (21), -0.01838 (21), -0.01836 (21), -0.01832 (21), -0.01832 (20), -0.01828 (22), -0.01825 (22), -0.01822 (21), -0.01822 (21), -0.01822 (21), -0.01816 (22), -0.01816 (21), -0.01813 (22), -0.01813 (21), 
Length of domains: 102331
Time: pickout 0.4909    decision 3.6186    set_bounds 3.8088    solve 14.2521    add 0.1841    
Accumulated time: pickout 2.8286    decision 18.3829    set_bounds 21.4736    solve 65.3607    add 1.6766    
Current (lb-rhs): -0.019341692328453064
284215 domains visited
Cumulative time: 111.23593974113464

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 580] [/input-8, 1730] [/input-8, 772] [/input-8, 579] [/input-8, 579] [/input-8, 579] [/input-8, 580] [/input, 131] [/input-8, 580] [/input-8, 772] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5068835616111755, worst -0.018523558974266052
10 lb beta sum: 0.5068793296813965, worst -0.018513306975364685
Time: prepare 3.0371    bound 8.7078    transfer 0.7672    finalize 0.5523    func 13.5002    
Accumulated time: func 78.7779    prepare 19.5391    bound 45.4473    transfer 4.8823    finalize 5.2615    
all_split False
======================Cut inference begins======================
max lb tensor(0.00313784) min lb tensor(-0.01850848)
Number of Verified Splits: 13080 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.0010123252868652344 
BICCOS Cumulative time: 0.11500692367553711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01851 (22), -0.01848 (22), -0.01841 (21), -0.01832 (21), -0.01828 (22), -0.01825 (22), -0.01822 (21), -0.01822 (21), -0.01816 (22), -0.01813 (22), -0.01810 (21), -0.01809 (22), -0.01807 (21), -0.01806 (22), -0.01804 (21), -0.01784 (20), -0.01774 (22), -0.01763 (22), -0.01761 (22), -0.01760 (22), 
Length of domains: 122019
Time: pickout 0.5109    decision 3.7690    set_bounds 4.0712    solve 13.5147    add 0.1815    
Accumulated time: pickout 3.3394    decision 22.1519    set_bounds 25.5448    solve 78.8754    add 1.8580    
Current (lb-rhs): -0.01850847899913788
336671 domains visited
Cumulative time: 133.53949308395386

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1730] [/input-8, 1730] [/input-8, 1730] [/input-8, 580] [/input-8, 582] [/input-8, 582] [/input-8, 578] [/input-8, 580] [/input-8, 580] [/input-8, 580] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5001220703125, worst -0.017490848898887634
10 lb beta sum: 0.5001195669174194, worst -0.017502710223197937
Time: prepare 3.0215    bound 8.7034    transfer 0.7664    finalize 0.5581    func 13.4955    
Accumulated time: func 92.2734    prepare 22.5609    bound 54.1507    transfer 5.6488    finalize 5.8196    
all_split False
======================Cut inference begins======================
max lb tensor(0.00306477) min lb tensor(-0.01746492)
Number of Verified Splits: 13381 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.001130819320678711 
BICCOS Cumulative time: 0.11613774299621582
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01851 (22), -0.01848 (22), -0.01841 (21), -0.01832 (21), -0.01828 (22), -0.01825 (22), -0.01810 (21), -0.01774 (22), -0.01763 (22), -0.01761 (22), -0.01760 (22), -0.01757 (22), -0.01757 (22), -0.01755 (22), -0.01747 (21), -0.01746 (22), -0.01746 (22), -0.01741 (21), -0.01738 (22), -0.01738 (22), 
Length of domains: 141406
Time: pickout 0.5148    decision 3.8961    set_bounds 4.0776    solve 13.5116    add 0.1819    
Accumulated time: pickout 3.8542    decision 26.0480    set_bounds 29.6223    solve 92.3870    add 2.0399    
Current (lb-rhs): -0.01850847899913788
388826 domains visited
Cumulative time: 155.9961051940918

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1730] [/input-8, 1730] [/input-8, 579] [/input, 131] [/input-8, 580] [/input-8, 579] [/input-8, 580] [/input-8, 579] [/input-8, 1730] [/input-8, 579] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5059680938720703, worst -0.01759408414363861
10 lb beta sum: 0.5059647560119629, worst -0.01759772002696991
Time: prepare 3.0775    bound 8.7040    transfer 0.7734    finalize 0.5618    func 13.5681    
Accumulated time: func 105.8415    prepare 25.6389    bound 62.8547    transfer 6.4222    finalize 6.3814    
all_split False
======================Cut inference begins======================
max lb tensor(0.00286509) min lb tensor(-0.01757835)
Number of Verified Splits: 14374 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.0011410713195800781 
BICCOS Cumulative time: 0.1172788143157959
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01851 (22), -0.01848 (22), -0.01774 (22), -0.01763 (22), -0.01761 (22), -0.01760 (22), -0.01758 (22), -0.01757 (22), -0.01757 (22), -0.01755 (22), -0.01751 (23), -0.01749 (22), -0.01748 (23), -0.01746 (22), -0.01746 (22), -0.01738 (22), -0.01737 (22), -0.01735 (22), -0.01733 (22), -0.01732 (23), 
Length of domains: 159800
Time: pickout 0.5098    decision 4.4059    set_bounds 4.1888    solve 13.5869    add 0.1838    
Accumulated time: pickout 4.3640    decision 30.4539    set_bounds 33.8111    solve 105.9739    add 2.2237    
Current (lb-rhs): -0.01850847899913788
439988 domains visited
Cumulative time: 179.14589643478394

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 579] [/input-8, 1730] [/input-8, 1730] [/input-8, 580] [/input-8, 579] [/input-8, 579] [/input-8, 1593] [/input-8, 579] [/input-8, 579] [/input-8, 580] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5036797523498535, worst -0.017331287264823914
10 lb beta sum: 0.5036756992340088, worst -0.017299339175224304
Time: prepare 3.0896    bound 8.7020    transfer 0.7670    finalize 0.5697    func 13.5795    
Accumulated time: func 119.4210    prepare 28.7289    bound 71.5567    transfer 7.1892    finalize 6.9511    
all_split False
======================Cut inference begins======================
max lb tensor(0.00348212) min lb tensor(-0.01728199)
Number of Verified Splits: 14274 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.0010876655578613281 
BICCOS Cumulative time: 0.11836647987365723
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01774 (22), -0.01763 (22), -0.01761 (22), -0.01758 (22), -0.01757 (22), -0.01751 (23), -0.01749 (22), -0.01748 (23), -0.01746 (22), -0.01746 (22), -0.01738 (22), -0.01735 (22), -0.01732 (23), -0.01732 (22), -0.01729 (23), -0.01728 (23), -0.01727 (22), -0.01725 (23), -0.01723 (22), -0.01723 (22), 
Length of domains: 178294
Time: pickout 0.5228    decision 4.1585    set_bounds 4.4655    solve 13.5976    add 0.1909    
Accumulated time: pickout 4.8868    decision 34.6124    set_bounds 38.2766    solve 119.5715    add 2.4146    
Current (lb-rhs): -0.01774291694164276
491250 domains visited
Time out!!!!!!!!
Result: unknown in 205.1262 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 155, vnnlib ID: 155 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.92134666, -14.68086624, -14.01877499, -12.96694374, -13.68891144,
         -13.29801559, -12.61456585, -14.58385181, -12.91630363, -13.61004829]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [523]; unstable size 523; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 293, 1, 523] with unstable size 292 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 523] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 523] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [292]; unstable size 292; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 292] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 292] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.07341194,  0.02069974, -0.45618224, -0.75070500, -0.48273373,
         -0.58674026,  0.21641394, -1.83327770, -0.92162514]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.92134666, -14.68086624, -14.01877499, -12.96694374, -13.68891144,
         -13.29801559, -12.61456585, -14.58385181, -12.91630363, -13.61004829]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.55156803, -14.16532898, -13.73093128, -12.51956940, -13.35653687,
          -12.80827332, -12.73153305, -14.19154167, -12.43016529, -13.13587379],
         [-14.55156803, -14.16532898, -13.73093128, -12.51956940, -13.35653687,
          -12.80827332, -12.73153305, -14.19154167, -12.43016529, -13.13587379]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.99939823, -0.21196365,  0.62500381,  0.07674026, -0.30136776,
           0.40434074]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0138 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0755 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 156, vnnlib ID: 156 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.54337883, -22.91224098, -19.67365646, -18.07358360, -18.92478752,
         -18.42077827, -18.27539825, -20.47289658, -23.38033676, -23.14374924]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [789]; unstable size 789; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 789] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 789] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 789] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 259] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.47897100,  2.52675438,  0.01573110, -0.71339202, -0.73171163,
         -1.54283834,  0.69137216,  2.97468758,  2.91973901]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.54337883, -22.91224098, -19.67365646, -18.07358360, -18.92478752,
         -18.42077827, -18.27539825, -20.47289658, -23.38033676, -23.14374924]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.54338074, -22.91224098, -19.67365646, -18.07358170, -18.92478561,
          -18.42077637, -18.27539635, -20.47289658, -23.38033676, -23.14374733],
         [-22.54338074, -22.91224098, -19.67365646, -18.07358170, -18.92478561,
          -18.42077637, -18.27539635, -20.47289658, -23.38033676, -23.14374733]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.34719467,  0.50400925, -0.14538002]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0431 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 157, vnnlib ID: 157 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.22789001, -20.43865013, -26.99475098, -25.86932182, -27.76927757,
         -27.09349632, -26.96388435, -26.58814430, -23.07920265, -18.19562912]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [462]; unstable size 462; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 183, 1, 462] with unstable size 182 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 462] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 462] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 182] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.89370704, 1.38738179, 7.23277426, 6.41899109, 8.12875843, 7.56016350,
         7.36910868, 6.89903021, 3.88113189]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0475 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 158, vnnlib ID: 158 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.36944771, -28.77778244, -30.05463600, -28.34849167, -31.03860283,
         -28.43247223, -29.29167557, -29.50824356, -27.05603409, -31.43330383]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [584]; unstable size 584; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 235, 1, 584] with unstable size 234 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 584] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 584] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [234]; unstable size 234; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 234] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 234] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.98524362,  0.54466248,  1.17118788, -0.38150477,  1.88504887,
         -0.46537066,  0.44484520,  0.24631667,  3.03603768]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-29.36944771, -28.77778244, -30.05463600, -28.34849167, -31.03860283,
         -28.43247223, -29.29167557, -29.50824356, -27.05603409, -31.43330383]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.83it/s]100%|██████████| 1/1 [00:00<00:00,  8.82it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-28.40622520, -27.82097435, -28.63790131, -26.83477974, -29.47041893,
          -26.86197472, -27.89007187, -27.95905685, -26.50016022, -30.27786064],
         [-28.40622520, -27.82097435, -28.63790131, -26.83477974, -29.47041893,
          -26.86197472, -27.89007187, -27.95905685, -26.50016022, -30.27786064]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.33461952, 0.36181450]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1162 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 8.091231346130371
alpha/beta optimization time: 1.2164678573608398
initial alpha-crown bounds: tensor([[ 1.03688931,  0.59373093,  1.24077272, -0.31201220,  1.97173214,
         -0.38633633,  0.51818895,  0.33714414,  3.09112120]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.3863363265991211
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6176998615265
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6176586151123
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61763501167297
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.61761236190796
Verifying property 3 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.31201220]], device='cuda:0') need to verify.
Model prediction is: tensor([-29.36944771, -28.77778244, -30.05463600, -28.34849167, -31.03860283,
        -28.43247223, -29.29167557, -29.50824356, -27.05603409, -31.43330383],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.31201220]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 584
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 230
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 829
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00016307830810546875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3120107650756836
10 lb beta sum: 0.0, worst -0.31202173233032227
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0537    transfer 0.0001    finalize 0.0001    func 0.0542    
Accumulated time: func 0.0542    prepare 0.0002    bound 0.0537    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 90] 
split level 3: [/input-12, 58] 
split level 4: [/input-12, 8] 
split level 5: [/input-12, 2] 
split level 6: [/input-12, 64] 
split level 7: [/input-12, 79] 
split level 8: [/input-12, 61] 
split level 9: [/input-12, 46] 
split level 10: [/input-8, 268] 
split level 11: [/input-8, 172] 
split level 12: [/input-8, 171] 
split level 13: [/input, 456] 
split level 14: [/input, 439] 
split level 15: [/input, 3000] 
split level 16: [/input-8, 179] 
split level 17: [/input-8, 788] 
split level 18: [/input, 3017] 
split level 19: [/input, 442] 
split level 20: [/input, 3018] 
split level 21: [/input-8, 371] 
split level 22: [/input, 3032] 
split level 23: [/input, 2986] 
split level 24: [/input-8, 909] 
split level 25: [/input-8, 1287] 
split level 26: [/input-8, 1282] 
split level 27: [/input-8, 473] 
split level 28: [/input-8, 178] 
split level 29: [/input, 3066] 
split level 30: [/input, 2972] 
split level 31: [/input, 3002] 
split level 32: [/input-8, 380] 
split level 33: [/input, 954] 
split level 34: [/input-8, 892] 
split level 35: [/input-8, 372] 
split level 36: [/input-8, 1067] 
split level 37: [/input, 487] 
split level 38: [/input, 2955] 
split level 39: [/input, 3019] 
split level 40: [/input-8, 186] 
split level 41: [/input-8, 1780] 
split level 42: [/input-8, 1125] 
split level 43: [/input, 3031] 
split level 44: [/input-8, 381] 
split level 45: [/input-8, 1075] 
split level 46: [/input, 999] 
split level 47: [/input-8, 1732] 
split level 48: [/input, 506] 
split level 49: [/input-8, 1123] 
split level 50: [/input, 3013] 
split level 51: [/input-8, 1118] 
split level 52: [/input-8, 292] 
split level 53: [/input, 474] 
split level 54: [/input-8, 1772] 
split level 55: [/input-8, 1038] 
split level 56: [/input-8, 1773] 
split level 57: [/input-8, 508] 
split level 58: [/input, 1975] 
split level 59: [/input, 892] 
split level 60: [/input, 956] 
split level 61: [/input, 986] 
split level 62: [/input-8, 146] 
split level 63: [/input-8, 465] 
split level 64: [/input, 202] 
split level 65: [/input-8, 774] 
split level 66: [/input-8, 925] 
split level 67: [/input-8, 1035] 
split level 68: [/input-8, 592] 
split level 69: [/input, 200] 
split level 70: [/input-8, 871] 
split level 71: [/input-8, 1655] 
split level 72: [/input-8, 792] 
split level 73: [/input, 949] 
split level 74: [/input, 2871] 
split level 75: [/input, 3036] 
split level 76: [/input, 918] 
split level 77: [/input-8, 1643] 
split level 78: [/input, 298] 
split level 79: [/input-8, 1731] 
split level 80: [/input, 467] 
split level 81: [/input, 217] 
split level 82: [/input, 971] 
split level 83: [/input, 1993] 
split level 84: [/input, 932] 
split level 85: [/input-8, 2046] 
split level 86: [/input, 2997] 
split level 87: [/input, 618] 
split level 88: [/input, 2927] 
split level 89: [/input-8, 893] 
split level 90: [/input, 1977] 
split level 91: [/input-8, 1076] 
split level 92: [/input-8, 1180] 
split level 93: [/input, 1974] 
split level 94: [/input-8, 891] 
split level 95: [/input, 1017] 
split level 96: [/input-8, 1730] 
split level 97: [/input, 923] 
split level 98: [/input-8, 1625] 
split level 99: [/input-8, 843] 
split level 100: [/input, 1976] 
split level 101: [/input, 232] 
split level 102: [/input, 435] 
split level 103: [/input, 2947] 
split level 104: [/input, 903] 
split level 105: [/input-8, 888] 
split level 106: [/input, 1003] 
split level 107: [/input, 507] 
split level 108: [/input, 390] 
split level 109: [/input, 1012] 
split level 110: [/input-8, 1614] 
split level 111: [/input, 1960] 
split level 112: [/input-8, 165] 
split level 113: [/input, 1978] 
split level 114: [/input-8, 773] 
split level 115: [/input, 3554] 
split level 116: [/input-8, 820] 
split level 117: [/input, 1990] 
split level 118: [/input-8, 1407] 
split level 119: [/input, 597] 
split level 120: [/input, 924] 
split level 121: [/input, 633] 
split level 122: [/input, 3022] 
split level 123: [/input-8, 158] 
split level 124: [/input, 308] 
split level 125: [/input-8, 122] 
split level 126: [/input, 661] 
split level 127: [/input-8, 1790] 
split level 128: [/input-8, 1563] 
split level 129: [/input-8, 1233] 
split level 130: [/input, 884] 
split level 131: [/input, 185] 
split level 132: [/input-8, 1737] 
split level 133: [/input, 619] 
split level 134: [/input, 3037] 
split level 135: [/input, 203] 
split level 136: [/input, 219] 
split level 137: [/input-8, 879] 
split level 138: [/input, 1973] 
split level 139: [/input-8, 406] 
split level 140: [/input, 2887] 
split level 141: [/input, 283] 
split level 142: [/input-8, 334] 
split level 143: [/input, 1989] 
split level 144: [/input, 323] 
split level 145: [/input, 909] 
split level 146: [/input, 631] 
split level 147: [/input, 795] 
split level 148: [/input, 2024] 
split level 149: [/input, 3522] 
split level 150: [/input, 314] 
split level 151: [/input-8, 1548] 
split level 152: [/input, 1502] 
split level 153: [/input, 605] 
split level 154: [/input-8, 169] 
split level 155: [/input-8, 887] 
split level 156: [/input-8, 1613] 
split level 157: [/input, 222] 
split level 158: [/input-8, 890] 
split level 159: [/input, 632] 
split level 160: [/input, 2010] 
split level 161: [/input, 221] 
split level 162: [/input, 2526] 
split level 163: [/input, 187] 
split level 164: [/input-8, 1678] 
split level 165: [/input, 2092] 
split level 166: [/input, 973] 
split level 167: [/input, 1961] 
split level 168: [/input-8, 1384] 
split level 169: [/input, 2363] 
split level 170: [/input, 2021] 
split level 171: [/input, 820] 
split level 172: [/input, 2921] 
split level 173: [/input, 339] 
split level 174: [/input, 268] 
split level 175: [/input, 1996] 
split level 176: [/input, 2930] 
split level 177: [/input, 1944] 
split level 178: [/input, 588] 
split level 179: [/input, 1946] 
split level 180: [/input-8, 142] 
split level 181: [/input, 3478] 
split level 182: [/input, 2322] 
split level 183: [/input-8, 1669] 
split level 184: [/input, 617] 
split level 185: [/input, 779] 
split level 186: [/input-8, 1920] 
split level 187: [/input, 2862] 
split level 188: [/input, 70] 
split level 189: [/input, 125] 
split level 190: [/input, 2332] 
split level 191: [/input, 786] 
split level 192: [/input, 2349] 
split level 193: [/input, 803] 
split level 194: [/input-8, 1278] 
split level 195: [/input-8, 1785] 
split level 196: [/input, 72] 
split level 197: [/input, 260] 
split level 198: [/input, 3038] 
split level 199: [/input, 614] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.311964750289917
10 lb beta sum: 0.0, worst -0.31195926666259766
Time: prepare 0.0114    bound 0.0978    transfer 0.0026    finalize 0.0027    func 0.1171    
Accumulated time: func 0.1713    prepare 0.0215    bound 0.1515    transfer 0.0027    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.19403887) min lb tensor(-0.31195331)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01078653335571289 
BICCOS Cumulative time: 0.01078653335571289
Preprocessing time: 0.009931325912475586 Inference time: 0.00016379356384277344 Add cuts time: 8.988380432128906e-05 Cut analysis time: 0.0006015300750732422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.29670 (1), -0.29598 (1), -0.29591 (1), -0.29570 (1), -0.29544 (1), -0.29523 (1), -0.29453 (1), -0.29451 (1), -0.29407 (1), -0.29403 (1), -0.29383 (1), -0.29351 (1), -0.29273 (1), -0.29211 (1), -0.29185 (1), -0.29089 (1), -0.29040 (1), -0.29015 (1), -0.29006 (1), -0.29004 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5238    set_bounds 0.0089    solve 0.1171    add 0.0676    
Accumulated time: pickout 0.0003    decision 0.5238    set_bounds 0.0089    solve 0.1171    add 0.0676    
Current (lb-rhs): -0.29670143127441406
50 domains visited
Cumulative time: 0.7936058044433594

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 68] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 8] [/input-12, 8] [/input-12, 68] [/input-12, 8] [/input-12, 8] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 2] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2753455638885498
10 lb beta sum: 0.6592480540275574, worst -0.20838308334350586
Time: prepare 0.0074    bound 0.1180    transfer 0.0012    finalize 0.0023    func 0.1315    
Accumulated time: func 0.3028    prepare 0.0292    bound 0.2695    transfer 0.0039    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.29780942) min lb tensor(-0.20817971)
Number of Verified Splits: 64 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.016058921813964844 
BICCOS Cumulative time: 0.026845455169677734
Preprocessing time: 0.012027502059936523 Inference time: 0.0023767948150634766 Add cuts time: 0.001373291015625 Cut analysis time: 0.00028133392333984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11036 (2), -0.10995 (2), -0.10935 (2), -0.10904 (2), -0.10900 (2), -0.10859 (2), -0.10841 (2), -0.10803 (2), -0.10690 (2), -0.10664 (2), -0.10652 (2), -0.10589 (2), -0.10525 (2), -0.10452 (2), -0.10276 (2), -0.10263 (2), -0.10227 (2), -0.10106 (2), -0.09940 (2), -0.09830 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0199    set_bounds 0.0124    solve 0.1316    add 0.0796    
Accumulated time: pickout 0.0014    decision 0.5437    set_bounds 0.0213    solve 0.2488    add 0.1472    
Current (lb-rhs): -0.11035692691802979
100 domains visited
Cumulative time: 1.0545101165771484

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 68] 
split level 1: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] 
split level 2: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 2] [/input-12, 79] [/input-12, 64] [/input-12, 64] [/input-12, 2] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18611383438110352
10 lb beta sum: 0.7561198472976685, worst -0.09558486938476562
Time: prepare 0.0073    bound 0.1183    transfer 0.0011    finalize 0.0027    func 0.1321    
Accumulated time: func 0.4349    prepare 0.0368    bound 0.3878    transfer 0.0051    finalize 0.0078    
all_split False
======================Cut inference begins======================
max lb tensor(0.40660188) min lb tensor(-0.09285450)
Number of Verified Splits: 205 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 15
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.024434804916381836 
BICCOS Cumulative time: 0.05128026008605957
Preprocessing time: 0.011702775955200195 Inference time: 0.008909940719604492 Add cuts time: 0.0033388137817382812 Cut analysis time: 0.0004832744598388672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02887 (3), -0.02777 (3), -0.02672 (3), -0.02671 (3), -0.02555 (3), -0.02539 (3), -0.02504 (3), -0.02334 (3), -0.02286 (3), -0.02179 (3), -0.02085 (3), -0.02083 (3), -0.02080 (3), -0.02028 (3), -0.02024 (3), -0.01916 (3), -0.01909 (3), -0.01869 (3), -0.01835 (3), -0.01825 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0154    solve 0.1322    add 0.0936    
Accumulated time: pickout 0.0024    decision 0.5632    set_bounds 0.0367    solve 0.3809    add 0.2408    
Current (lb-rhs): -0.028868138790130615
150 domains visited
Cumulative time: 1.3408889770507812

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 8] [/input-12, 64] [/input-12, 8] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 64] [/input-12, 79] [/input-12, 64] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1351640224456787
10 lb beta sum: 1.0161627531051636, worst -0.08978140354156494
Time: prepare 0.0076    bound 0.1519    transfer 0.0012    finalize 0.0026    func 0.1667    
Accumulated time: func 0.6016    prepare 0.0446    bound 0.5397    transfer 0.0062    finalize 0.0104    
all_split False
======================Cut inference begins======================
max lb tensor(0.68372792) min lb tensor(-0.01021101)
Number of Verified Splits: 376 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 8
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.04304838180541992 
BICCOS Cumulative time: 0.09432864189147949
Preprocessing time: 0.012049436569213867 Inference time: 0.0176236629486084 Add cuts time: 0.012726783752441406 Cut analysis time: 0.00064849853515625
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0192    set_bounds 0.0153    solve 0.1668    add 0.0231    
Accumulated time: pickout 0.0035    decision 0.5824    set_bounds 0.0520    solve 0.5478    add 0.2639    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([2.82952102e+16, 1.43342867e-01, 1.06318548e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8, 42]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.82952102e+16, 1.43342867e-01, 5.76876551e-02, 1.48439750e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8, 42]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.82952102e+16, 1.43342867e-01, 5.76876551e-02, 1.81713719e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.82952102e+16, 1.52053460e-01, 1.04179665e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8, 42]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.82952102e+16, 1.52053460e-01, 5.66059798e-02, 1.50892124e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8, 42]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.82952102e+16, 1.52053460e-01, 5.66059798e-02, 1.81549210e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61, 42]), tensor([ 1., -1.]), tensor([0, 0]), tensor([9.63599405e-08, 5.72376370e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61, 42]), tensor([1., 1.]), tensor([0, 0]), tensor([9.63599405e-08, 8.73806924e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22560644149780273
10 lb beta sum: 1.0109610557556152, worst -0.1329573392868042
Time: prepare 0.0005    bound 0.1282    transfer 0.0001    finalize 0.0002    func 0.1290    
Accumulated time: func 0.7306    prepare 0.0450    bound 0.6678    transfer 0.0064    finalize 0.0106    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 1: [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 2: [/input-12, 58] [/input-12, 58] [/input-12, 8] 
split level 3: [/input-12, 64] [/input-12, 64] [/input-12, 2] 
split level 4: [/input-12, 79] [/input-12, 79] [/input-12, 64] 
split level 5: [/input-12, 46] [/input-12, 46] [/input-12, 79] 
split level 6: [/input-8, 179] [/input-8, 179] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4878228902816772, worst -0.035515546798706055
10 lb beta sum: 1.4960440397262573, worst -0.03532862663269043
Time: prepare 0.0161    bound 0.1313    transfer 0.0018    finalize 0.0019    func 0.1536    
Accumulated time: func 0.8843    prepare 0.0615    bound 0.7991    transfer 0.0082    finalize 0.0125    
all_split False
======================Cut inference begins======================
max lb tensor(0.99605012) min lb tensor(-0.03529620)
Number of Verified Splits: 380 of 384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 19.
#cuts 1-3: 8
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.00034308433532714844 
BICCOS Cumulative time: 0.09467172622680664
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03530 (7), -0.03190 (7), -0.02938 (7), -0.02566 (7), 
Length of domains: 4
Time: pickout 0.0005    decision 0.0201    set_bounds 0.0324    solve 0.1538    add 0.0006    
Accumulated time: pickout 0.0040    decision 0.6025    set_bounds 0.0844    solve 0.7015    add 0.2645    
Current (lb-rhs): -0.03529620170593262
154 domains visited
Cumulative time: 1.966569185256958

BaB round 2
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 171] [/input-8, 171] [/input-8, 171] [/input-8, 171] 
split level 2: [/input, 3000] [/input, 3000] [/input, 3000] [/input, 3000] 
split level 3: [/input, 3017] [/input, 3017] [/input, 3017] [/input, 3017] 
split level 4: [/input, 3018] [/input, 3018] [/input, 3018] [/input, 3018] 
split level 5: [/input-8, 179] [/input-8, 179] [/input-8, 179] [/input-8, 179] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4055986404418945, worst 0.004990339279174805

all verified at 0th iter
Time: prepare 0.0127    bound 0.0058    transfer 0.0011    finalize 0.0013    func 0.0226    
Accumulated time: func 0.9068    prepare 0.0746    bound 0.8050    transfer 0.0093    finalize 0.0138    
all_split False
======================Cut inference begins======================
max lb tensor(0.33522058) min lb tensor(0.00499034)
Number of Verified Splits: 256 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 19.
#cuts 1-3: 8
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.00036263465881347656 
BICCOS Cumulative time: 0.09503436088562012
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0177    set_bounds 0.1702    solve 0.0227    add 0.0001    
Accumulated time: pickout 0.0050    decision 0.6202    set_bounds 0.2546    solve 0.7242    add 0.2646    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
154 domains visited
Cumulative time: 2.179879903793335


Properties batch 4, size 1
Remaining timeout: 196.2658293247223
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 196.26574563980103
Verifying property 5 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.38633633]], device='cuda:0') need to verify.
Model prediction is: tensor([-29.36944771, -28.77778244, -30.05463600, -28.34849167, -31.03860283,
        -28.43247223, -29.29167557, -29.50824356, -27.05603409, -31.43330383],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.38633633]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 584
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 230
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 829
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.870529174804688e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3863341808319092
10 lb beta sum: 0.0, worst -0.3863396644592285
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0530    transfer 0.0001    finalize 0.0001    func 0.0535    
Accumulated time: func 0.0535    prepare 0.0002    bound 0.0530    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 90] 
split level 3: [/input-12, 8] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 58] 
split level 6: [/input-12, 64] 
split level 7: [/input-12, 79] 
split level 8: [/input-12, 61] 
split level 9: [/input-12, 46] 
split level 10: [/input-8, 268] 
split level 11: [/input-8, 909] 
split level 12: [/input-8, 172] 
split level 13: [/input-8, 171] 
split level 14: [/input, 456] 
split level 15: [/input, 439] 
split level 16: [/input, 3000] 
split level 17: [/input-8, 1282] 
split level 18: [/input-8, 179] 
split level 19: [/input, 442] 
split level 20: [/input, 3032] 
split level 21: [/input, 2986] 
split level 22: [/input, 3017] 
split level 23: [/input, 3018] 
split level 24: [/input-8, 788] 
split level 25: [/input-8, 1067] 
split level 26: [/input-8, 371] 
split level 27: [/input-8, 1287] 
split level 28: [/input-8, 892] 
split level 29: [/input, 3066] 
split level 30: [/input-8, 178] 
split level 31: [/input, 487] 
split level 32: [/input, 2972] 
split level 33: [/input-8, 473] 
split level 34: [/input, 3002] 
split level 35: [/input, 954] 
split level 36: [/input, 2955] 
split level 37: [/input, 3031] 
split level 38: [/input-8, 925] 
split level 39: [/input-8, 1780] 
split level 40: [/input, 3019] 
split level 41: [/input-8, 372] 
split level 42: [/input-8, 186] 
split level 43: [/input-8, 1075] 
split level 44: [/input-8, 1038] 
split level 45: [/input-8, 1772] 
split level 46: [/input, 506] 
split level 47: [/input-8, 380] 
split level 48: [/input, 999] 
split level 49: [/input-8, 1773] 
split level 50: [/input-8, 774] 
split level 51: [/input-8, 1123] 
split level 52: [/input-8, 381] 
split level 53: [/input, 474] 
split level 54: [/input, 3013] 
split level 55: [/input-8, 1125] 
split level 56: [/input-8, 1035] 
split level 57: [/input-8, 508] 
split level 58: [/input-8, 1643] 
split level 59: [/input-8, 465] 
split level 60: [/input-8, 1732] 
split level 61: [/input, 892] 
split level 62: [/input, 986] 
split level 63: [/input-8, 146] 
split level 64: [/input, 202] 
split level 65: [/input-8, 871] 
split level 66: [/input, 949] 
split level 67: [/input-8, 1548] 
split level 68: [/input, 298] 
split level 69: [/input, 956] 
split level 70: [/input-8, 792] 
split level 71: [/input-8, 891] 
split level 72: [/input-8, 292] 
split level 73: [/input-8, 1118] 
split level 74: [/input-8, 1635] 
split level 75: [/input, 3036] 
split level 76: [/input-8, 893] 
split level 77: [/input, 923] 
split level 78: [/input, 467] 
split level 79: [/input, 200] 
split level 80: [/input, 1975] 
split level 81: [/input-8, 1180] 
split level 82: [/input, 918] 
split level 83: [/input-8, 2046] 
split level 84: [/input, 217] 
split level 85: [/input-8, 592] 
split level 86: [/input, 971] 
split level 87: [/input, 2927] 
split level 88: [/input, 1017] 
split level 89: [/input-8, 1076] 
split level 90: [/input-8, 1228] 
split level 91: [/input, 932] 
split level 92: [/input, 2997] 
split level 93: [/input-8, 843] 
split level 94: [/input, 924] 
split level 95: [/input, 232] 
split level 96: [/input-8, 1563] 
split level 97: [/input, 507] 
split level 98: [/input-8, 773] 
split level 99: [/input-8, 820] 
split level 100: [/input-8, 1614] 
split level 101: [/input, 618] 
split level 102: [/input, 1003] 
split level 103: [/input, 2947] 
split level 104: [/input, 1974] 
split level 105: [/input-8, 165] 
split level 106: [/input, 435] 
split level 107: [/input, 1012] 
split level 108: [/input, 2871] 
split level 109: [/input-8, 1731] 
split level 110: [/input, 1977] 
split level 111: [/input, 390] 
split level 112: [/input-8, 1243] 
split level 113: [/input, 1993] 
split level 114: [/input-8, 888] 
split level 115: [/input, 903] 
split level 116: [/input-8, 12] 
split level 117: [/input-8, 1625] 
split level 118: [/input, 3022] 
split level 119: [/input-8, 332] 
split level 120: [/input, 1976] 
split level 121: [/input-8, 158] 
split level 122: [/input, 283] 
split level 123: [/input, 1960] 
split level 124: [/input-8, 122] 
split level 125: [/input, 3554] 
split level 126: [/input, 811] 
split level 127: [/input, 633] 
split level 128: [/input, 2092] 
split level 129: [/input-8, 1233] 
split level 130: [/input-8, 890] 
split level 131: [/input-8, 1920] 
split level 132: [/input, 884] 
split level 133: [/input, 597] 
split level 134: [/input-8, 879] 
split level 135: [/input, 203] 
split level 136: [/input, 795] 
split level 137: [/input, 308] 
split level 138: [/input, 1978] 
split level 139: [/input, 1990] 
split level 140: [/input, 219] 
split level 141: [/input, 314] 
split level 142: [/input, 3037] 
split level 143: [/input, 185] 
split level 144: [/input-8, 334] 
split level 145: [/input-8, 1678] 
split level 146: [/input-8, 1407] 
split level 147: [/input, 909] 
split level 148: [/input, 792] 
split level 149: [/input-8, 1642] 
split level 150: [/input-8, 1737] 
split level 151: [/input, 2363] 
split level 152: [/input-8, 887] 
split level 153: [/input, 323] 
split level 154: [/input, 72] 
split level 155: [/input, 619] 
split level 156: [/input, 2887] 
split level 157: [/input, 1502] 
split level 158: [/input-8, 1384] 
split level 159: [/input, 222] 
split level 160: [/input, 3522] 
split level 161: [/input, 71] 
split level 162: [/input-8, 1669] 
split level 163: [/input-8, 169] 
split level 164: [/input-8, 1613] 
split level 165: [/input-8, 1730] 
split level 166: [/input, 339] 
split level 167: [/input, 973] 
split level 168: [/input, 221] 
split level 169: [/input, 605] 
split level 170: [/input, 70] 
split level 171: [/input, 632] 
split level 172: [/input, 631] 
split level 173: [/input, 2106] 
split level 174: [/input, 187] 
split level 175: [/input, 2930] 
split level 176: [/input, 2109] 
split level 177: [/input, 268] 
split level 178: [/input, 2862] 
split level 179: [/input, 2332] 
split level 180: [/input, 1335] 
split level 181: [/input, 2322] 
split level 182: [/input, 1989] 
split level 183: [/input, 1996] 
split level 184: [/input, 1944] 
split level 185: [/input-8, 1554] 
split level 186: [/input, 2091] 
split level 187: [/input, 1946] 
split level 188: [/input, 3038] 
split level 189: [/input, 779] 
split level 190: [/input, 260] 
split level 191: [/input-8, 1027] 
split level 192: [/input, 786] 
split level 193: [/input, 820] 
split level 194: [/input, 285] 
split level 195: [/input, 2349] 
split level 196: [/input, 1336] 
split level 197: [/input, 617] 
split level 198: [/input, 2021] 
split level 199: [/input, 588] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3861422538757324
10 lb beta sum: 0.0, worst -0.3861391544342041
Time: prepare 0.0116    bound 0.0978    transfer 0.0029    finalize 0.0030    func 0.1178    
Accumulated time: func 0.1713    prepare 0.0215    bound 0.1508    transfer 0.0029    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.17392492) min lb tensor(-0.38613462)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010384082794189453 
BICCOS Cumulative time: 0.010384082794189453
Preprocessing time: 0.009999275207519531 Inference time: 0.00011754035949707031 Add cuts time: 5.4836273193359375e-05 Cut analysis time: 0.0002124309539794922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.36964 (1), -0.36948 (1), -0.36816 (1), -0.36791 (1), -0.36660 (1), -0.36599 (1), -0.36591 (1), -0.36571 (1), -0.36540 (1), -0.36503 (1), -0.36488 (1), -0.36479 (1), -0.36474 (1), -0.36415 (1), -0.36413 (1), -0.36401 (1), -0.36327 (1), -0.36227 (1), -0.36142 (1), -0.36121 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5174    set_bounds 0.0090    solve 0.1179    add 0.0892    
Accumulated time: pickout 0.0003    decision 0.5174    set_bounds 0.0090    solve 0.1179    add 0.0892    
Current (lb-rhs): -0.36963510513305664
50 domains visited
Cumulative time: 0.802649974822998

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 68] [/input-12, 42] 
split level 1: [/input-12, 68] [/input-12, 8] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] [/input-12, 68] 
split level 2: [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 8] 
split level 3: [/input-12, 2] [/input-12, 79] [/input-12, 2] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 2] [/input-12, 2] [/input-12, 79] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.32616567611694336
10 lb beta sum: 0.4465484619140625, worst -0.30382776260375977
Time: prepare 0.0075    bound 0.1181    transfer 0.0012    finalize 0.0023    func 0.1317    
Accumulated time: func 0.3030    prepare 0.0292    bound 0.2689    transfer 0.0041    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.26297235) min lb tensor(-0.30361462)
Number of Verified Splits: 96 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.017590045928955078 
BICCOS Cumulative time: 0.02797412872314453
Preprocessing time: 0.011841058731079102 Inference time: 0.003622293472290039 Add cuts time: 0.0018420219421386719 Cut analysis time: 0.0002846717834472656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18671 (2), -0.18588 (2), -0.18565 (2), -0.18520 (2), -0.18405 (2), -0.18395 (2), -0.18361 (2), -0.18318 (2), -0.18291 (2), -0.18212 (2), -0.18153 (2), -0.18019 (2), -0.17819 (2), -0.17701 (2), -0.17696 (2), -0.17644 (2), -0.17560 (2), -0.17524 (2), -0.17485 (2), -0.17440 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0241    set_bounds 0.0124    solve 0.1317    add 0.0831    
Accumulated time: pickout 0.0014    decision 0.5415    set_bounds 0.0214    solve 0.2497    add 0.1723    
Current (lb-rhs): -0.1867063045501709
100 domains visited
Cumulative time: 1.0730316638946533

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2369840145111084
10 lb beta sum: 0.7949876189231873, worst -0.15892529487609863
Time: prepare 0.0073    bound 0.1178    transfer 0.0011    finalize 0.0027    func 0.1315    
Accumulated time: func 0.4345    prepare 0.0368    bound 0.3868    transfer 0.0053    finalize 0.0081    
all_split False
======================Cut inference begins======================
max lb tensor(0.41913170) min lb tensor(-0.15695453)
Number of Verified Splits: 133 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 6
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.020107507705688477 
BICCOS Cumulative time: 0.04808163642883301
Preprocessing time: 0.011576414108276367 Inference time: 0.0062198638916015625 Add cuts time: 0.001995086669921875 Cut analysis time: 0.0003161430358886719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04339 (3), -0.04210 (3), -0.04131 (3), -0.04108 (3), -0.03998 (3), -0.03920 (3), -0.03905 (3), -0.03806 (3), -0.03780 (3), -0.03728 (3), -0.03705 (3), -0.03678 (3), -0.03661 (3), -0.03650 (3), -0.03635 (3), -0.03524 (3), -0.03301 (3), -0.03145 (3), -0.03121 (3), -0.03006 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0153    solve 0.1316    add 0.0873    
Accumulated time: pickout 0.0025    decision 0.5611    set_bounds 0.0367    solve 0.3813    add 0.2596    
Current (lb-rhs): -0.04339107871055603
150 domains visited
Cumulative time: 1.348130464553833

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
split level 3: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1501140594482422
10 lb beta sum: 0.8387399315834045, worst -0.01957765221595764
Time: prepare 0.0077    bound 0.1335    transfer 0.0012    finalize 0.0024    func 0.1474    
Accumulated time: func 0.5820    prepare 0.0447    bound 0.5202    transfer 0.0065    finalize 0.0105    
all_split False
======================Cut inference begins======================
max lb tensor(0.18235356) min lb tensor(-0.01798610)
Number of Verified Splits: 371 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 20
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.039461374282836914 
BICCOS Cumulative time: 0.08754301071166992
Preprocessing time: 0.011617898941040039 Inference time: 0.017154455184936523 Add cuts time: 0.009998083114624023 Cut analysis time: 0.0006909370422363281
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0192    set_bounds 0.0155    solve 0.1475    add 0.0241    
Accumulated time: pickout 0.0035    decision 0.5803    set_bounds 0.0522    solve 0.5288    add 0.2837    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1067]), tensor([-1.]), tensor([0]), tensor([2.82952445e+16]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [2.8295244546048e+16], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([0.17002697, 0.16139407, 0.08347581]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [2.8295244546048e+16], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([0.17002697, 0.16139407, 0.03720395]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [2.8295244546048e+16], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.17002697, 0.12524308, 0.09722714]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [2.8295244546048e+16], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([0.17002697, 0.12524308, 0.01881361]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [2.8295244546048e+16], [0]), '/input-12': (tensor([2, 8]), tensor([ 1., -1.]), tensor([0, 0]), tensor([0.17358826, 0.16715185]), tensor([1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [2.8295244546048e+16], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.17358826, 0.12684204, 0.10091127]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [2.8295244546048e+16], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([0.17358826, 0.12684204, 0.01888617]), tensor([1, 2, 3]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3853566646575928
10 lb beta sum: 1.086531639099121, worst -0.24505412578582764
Time: prepare 0.0004    bound 0.1417    transfer 0.0002    finalize 0.0002    func 0.1426    
Accumulated time: func 0.7245    prepare 0.0452    bound 0.6619    transfer 0.0067    finalize 0.0107    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 90] 
split level 3: [/input-12, 8] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 79] 
split level 6: [/input-12, 61] 
split level 7: [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4406702518463135, worst -0.05337125062942505
10 lb beta sum: 1.464111566543579, worst -0.0519862174987793
Time: prepare 0.0109    bound 0.1437    transfer 0.0014    finalize 0.0020    func 0.1597    
Accumulated time: func 0.8842    prepare 0.0565    bound 0.8056    transfer 0.0081    finalize 0.0126    
all_split False
======================Cut inference begins======================
max lb tensor(0.98341340) min lb tensor(-0.05188870)
Number of Verified Splits: 249 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 20
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.00031375885009765625 
BICCOS Cumulative time: 0.08785676956176758
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05189 (8), -0.04825 (8), -0.04582 (8), -0.04137 (8), -0.00664 (8), -0.00390 (8), -0.00262 (8), 
Length of domains: 7
Time: pickout 0.0004    decision 0.0217    set_bounds 0.0176    solve 0.1598    add 0.0007    
Accumulated time: pickout 0.0039    decision 0.6020    set_bounds 0.0697    solve 0.6886    add 0.2845    
Current (lb-rhs): -0.05188870429992676
157 domains visited
Cumulative time: 1.956676959991455

BaB round 2
batch: 7
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input, 3000] [/input-8, 171] [/input-8, 268] [/input, 3000] [/input-8, 171] [/input-8, 171] [/input-8, 268] 
split level 2: [/input-8, 179] [/input, 3000] [/input-8, 171] [/input-8, 179] [/input, 3000] [/input-8, 179] [/input-8, 171] 
split level 3: [/input, 3017] [/input-8, 179] [/input-8, 179] [/input, 3017] [/input-8, 179] [/input, 3017] [/input-8, 179] 
split level 4: [/input, 3018] [/input, 3017] [/input, 3018] [/input, 3018] [/input, 3017] [/input, 3018] [/input, 3018] 
cut re-enabled after branching node selection
0 lb beta sum: 1.63681161403656, worst -0.014738321304321289
10 lb beta sum: 1.63681161403656, worst -0.014554500579833984
Time: prepare 0.0112    bound 0.1447    transfer 0.0009    finalize 0.0013    func 0.1595    
Accumulated time: func 1.0437    prepare 0.0680    bound 0.9503    transfer 0.0090    finalize 0.0139    
all_split False
======================Cut inference begins======================
max lb tensor(0.09692580) min lb tensor(-0.01448178)
Number of Verified Splits: 195 of 224
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 20
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.0003032684326171875 
BICCOS Cumulative time: 0.08816003799438477
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01448 (13), -0.01268 (13), -0.01266 (13), -0.01071 (13), -0.00980 (13), -0.00903 (13), -0.00876 (13), -0.00857 (13), -0.00837 (13), -0.00808 (13), -0.00741 (13), -0.00619 (13), -0.00548 (13), -0.00483 (13), -0.00465 (13), -0.00461 (13), -0.00459 (13), -0.00431 (13), -0.00356 (13), -0.00332 (13), 
Length of domains: 29
Time: pickout 0.0007    decision 0.0156    set_bounds 0.0247    solve 0.1596    add 0.0009    
Accumulated time: pickout 0.0047    decision 0.6176    set_bounds 0.0944    solve 0.8482    add 0.2854    
Current (lb-rhs): -0.014481782913208008
186 domains visited
Cumulative time: 2.1595618724823

BaB round 3
batch: 29
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 171] [/input, 3018] [/input-8, 171] [/input, 3018] [/input, 3018] [/input-8, 171] [/input, 3018] [/input, 3018] [/input-8, 171] [/input, 3018] 
split level 2: [/input, 3002] [/input, 3002] [/input, 3002] [/input, 3032] [/input, 3002] [/input, 3002] [/input, 3032] [/input, 3002] [/input, 3002] [/input, 3002] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4382987022399902, worst -0.001104593276977539
10 lb beta sum: 1.4382987022399902, worst -0.001024484634399414
Time: prepare 0.0121    bound 0.1541    transfer 0.0017    finalize 0.0013    func 0.1707    
Accumulated time: func 1.2145    prepare 0.0803    bound 1.1043    transfer 0.0107    finalize 0.0152    
all_split False
======================Cut inference begins======================
max lb tensor(0.30306315) min lb tensor(-0.00096917)
Number of Verified Splits: 231 of 232
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 20
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.0003504753112792969 
BICCOS Cumulative time: 0.08851051330566406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00097 (16), 
Length of domains: 1
Time: pickout 0.0012    decision 0.0148    set_bounds 0.1400    solve 0.1708    add 0.0006    
Accumulated time: pickout 0.0059    decision 0.6324    set_bounds 0.2345    solve 1.0190    add 0.2860    
Current (lb-rhs): -0.0009691715240478516
187 domains visited
Cumulative time: 2.488983392715454

BaB round 4
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 268] 
split level 1: [/input, 456] 
split level 2: [/input-8, 172] 
split level 3: [/input-8, 372] 
split level 4: [/input-8, 178] 
split level 5: [/input, 3002] 
split level 6: [/input, 3031] 
split level 7: [/input-8, 1125] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4382987022399902, worst 0.03751873970031738

all verified at 0th iter
Time: prepare 0.0127    bound 0.0060    transfer 0.0013    finalize 0.0012    func 0.0229    
Accumulated time: func 1.2373    prepare 0.0935    bound 1.1103    transfer 0.0121    finalize 0.0164    
all_split False
======================Cut inference begins======================
max lb tensor(0.11207366) min lb tensor(0.03751874)
Number of Verified Splits: 256 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 24.
#cuts 1-3: 20
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.0004203319549560547 
BICCOS Cumulative time: 0.08893084526062012
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0012    decision 0.0220    set_bounds 0.0320    solve 0.0230    add 0.0001    
Accumulated time: pickout 0.0071    decision 0.6543    set_bounds 0.2665    solve 1.0419    add 0.2860    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
187 domains visited
Cumulative time: 2.5685079097747803


Properties batch 6, size 1
Remaining timeout: 193.52669215202332
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 193.52660751342773
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 193.526043176651
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 6.4740 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 159, vnnlib ID: 159 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.30548668, -31.13262558, -30.14710617, -29.36580276, -31.43879890,
         -30.41797447, -28.40415192, -33.04300690, -32.20061874, -30.97929573]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [616]; unstable size 616; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 174, 1, 616] with unstable size 173 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 616] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 616] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [173]; unstable size 173; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 173] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 173] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.89829922, 1.27482843, 1.03844345, 0.41801405, 2.17892432, 1.35105968,
         3.53787804, 2.40265918, 1.21200323]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0542 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 160, vnnlib ID: 160 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.07235527, -18.64887428, -12.18960285, -14.05477905, -11.31740856,
         -14.56902885, -12.93454456, -14.51499081, -16.24306488, -18.54707718]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1027]; unstable size 1027; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 299, 1, 1027] with unstable size 298 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 32, 1, 1027] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1027] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [298]; unstable size 298; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 32, 1, 298] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 298] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [31]; unstable size 31; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.02182770,  4.76163769, -0.19650874,  1.45338190,  1.88351476,
          0.29130304,  1.95355940,  2.40450525,  4.61817694]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.07235527, -18.64887428, -12.18960285, -14.05477905, -11.31740856,
         -14.56902885, -12.93454456, -14.51499081, -16.24306488, -18.54707718]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.96it/s]100%|██████████| 1/1 [00:00<00:00,  8.95it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.18057632, -18.80869865, -12.22730350, -14.22425270, -11.66834641,
          -14.76986408, -13.08735275, -14.91366482, -16.30006790, -18.73601723]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.55895710]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1146 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 20.154891967773438
alpha/beta optimization time: 1.2222485542297363
initial alpha-crown bounds: tensor([[ 2.14901781,  4.91513681, -0.11741811,  1.51492643,  1.96165752,
          0.36733061,  2.03420472,  2.56605887,  4.76397753]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.11741811037063599
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.61488318443298
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61483502388
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61481094360352
Verifying property 2 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.11741811]], device='cuda:0') need to verify.
Model prediction is: tensor([-15.07235527, -18.64887428, -12.18960285, -14.05477905, -11.31740856,
        -14.56902885, -12.93454456, -14.51499081, -16.24306488, -18.54707718],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.11741811]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1027
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 30
-----------------
# of unstable neurons: 1350
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010609626770019531
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11741331219673157
10 lb beta sum: 0.0, worst -0.11741966009140015
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    func 0.0539    
Accumulated time: func 0.0539    prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] 
split level 1: [/input-12, 24] 
split level 2: [/input-12, 53] 
split level 3: [/input-12, 69] 
split level 4: [/input-12, 96] 
split level 5: [/input-12, 6] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 12] 
split level 8: [/input-12, 46] 
split level 9: [/input-12, 0] 
split level 10: [/input-8, 1955] 
split level 11: [/input-12, 18] 
split level 12: [/input-12, 49] 
split level 13: [/input-12, 15] 
split level 14: [/input-12, 38] 
split level 15: [/input-8, 1628] 
split level 16: [/input-8, 1708] 
split level 17: [/input-8, 275] 
split level 18: [/input-8, 1962] 
split level 19: [/input-8, 481] 
split level 20: [/input-8, 484] 
split level 21: [/input-8, 274] 
split level 22: [/input-8, 1954] 
split level 23: [/input-8, 1705] 
split level 24: [/input-8, 1678] 
split level 25: [/input-8, 477] 
split level 26: [/input-8, 1945] 
split level 27: [/input-8, 1710] 
split level 28: [/input-8, 1938] 
split level 29: [/input-8, 930] 
split level 30: [/input-8, 1946] 
split level 31: [/input-8, 1626] 
split level 32: [/input-12, 20] 
split level 33: [/input-8, 1716] 
split level 34: [/input-8, 1963] 
split level 35: [/input-8, 1618] 
split level 36: [/input-8, 1300] 
split level 37: [/input-8, 797] 
split level 38: [/input-8, 1931] 
split level 39: [/input-8, 469] 
split level 40: [/input-12, 57] 
split level 41: [/input-8, 1630] 
split level 42: [/input-8, 1318] 
split level 43: [/input-8, 1301] 
split level 44: [/input-8, 1953] 
split level 45: [/input-8, 592] 
split level 46: [/input-8, 1660] 
split level 47: [/input-8, 285] 
split level 48: [/input-8, 461] 
split level 49: [/input-8, 804] 
split level 50: [/input-8, 1363] 
split level 51: [/input-8, 779] 
split level 52: [/input-8, 100] 
split level 53: [/input-8, 438] 
split level 54: [/input-8, 1638] 
split level 55: [/input-8, 1621] 
split level 56: [/input-8, 453] 
split level 57: [/input-8, 1230] 
split level 58: [/input-8, 1338] 
split level 59: [/input-8, 1939] 
split level 60: [/input-8, 578] 
split level 61: [/input-8, 1961] 
split level 62: [/input-8, 433] 
split level 63: [/input-8, 1340] 
split level 64: [/input-8, 777] 
split level 65: [/input-8, 1940] 
split level 66: [/input-8, 1941] 
split level 67: [/input-8, 75] 
split level 68: [/input-8, 1029] 
split level 69: [/input-8, 108] 
split level 70: [/input-8, 1372] 
split level 71: [/input-8, 1290] 
split level 72: [/input-8, 1364] 
split level 73: [/input-8, 1652] 
split level 74: [/input-8, 298] 
split level 75: [/input-8, 478] 
split level 76: [/input-8, 434] 
split level 77: [/input-8, 1054] 
split level 78: [/input-8, 778] 
split level 79: [/input-8, 1329] 
split level 80: [/input-8, 1226] 
split level 81: [/input-8, 918] 
split level 82: [/input-8, 624] 
split level 83: [/input-8, 1790] 
split level 84: [/input-8, 441] 
split level 85: [/input, 2710] 
split level 86: [/input-8, 814] 
split level 87: [/input-8, 830] 
split level 88: [/input-8, 91] 
split level 89: [/input-8, 603] 
split level 90: [/input-8, 465] 
split level 91: [/input-8, 577] 
split level 92: [/input-8, 785] 
split level 93: [/input-8, 595] 
split level 94: [/input-8, 829] 
split level 95: [/input-8, 1613] 
split level 96: [/input-8, 1646] 
split level 97: [/input-8, 1260] 
split level 98: [/input-8, 28] 
split level 99: [/input-8, 73] 
split level 100: [/input-8, 1229] 
split level 101: [/input-8, 1337] 
split level 102: [/input-8, 798] 
split level 103: [/input-8, 409] 
split level 104: [/input-8, 83] 
split level 105: [/input, 1446] 
split level 106: [/input-8, 813] 
split level 107: [/input-8, 82] 
split level 108: [/input-8, 76] 
split level 109: [/input-8, 1596] 
split level 110: [/input-8, 1297] 
split level 111: [/input-8, 955] 
split level 112: [/input-8, 1597] 
split level 113: [/input-8, 74] 
split level 114: [/input-8, 1225] 
split level 115: [/input-8, 492] 
split level 116: [/input-8, 958] 
split level 117: [/input-8, 1764] 
split level 118: [/input-8, 1773] 
split level 119: [/input-8, 1595] 
split level 120: [/input-8, 293] 
split level 121: [/input-8, 1762] 
split level 122: [/input, 612] 
split level 123: [/input-8, 109] 
split level 124: [/input-8, 1593] 
split level 125: [/input-8, 446] 
split level 126: [/input-8, 21] 
split level 127: [/input-8, 85] 
split level 128: [/input, 2725] 
split level 129: [/input-8, 1227] 
split level 130: [/input, 3460] 
split level 131: [/input-8, 1321] 
split level 132: [/input-8, 81] 
split level 133: [/input-8, 1657] 
split level 134: [/input-8, 486] 
split level 135: [/input-8, 22] 
split level 136: [/input, 3208] 
split level 137: [/input-8, 452] 
split level 138: [/input-8, 78] 
split level 139: [/input, 508] 
split level 140: [/input, 610] 
split level 141: [/input, 884] 
split level 142: [/input, 885] 
split level 143: [/input-8, 1594] 
split level 144: [/input, 597] 
split level 145: [/input-8, 626] 
split level 146: [/input-8, 812] 
split level 147: [/input-8, 1365] 
split level 148: [/input-8, 345] 
split level 149: [/input, 1223] 
split level 150: [/input-8, 1252] 
split level 151: [/input, 3239] 
split level 152: [/input, 2164] 
split level 153: [/input-8, 1228] 
split level 154: [/input, 3224] 
split level 155: [/input-8, 1222] 
split level 156: [/input, 1012] 
split level 157: [/input, 1209] 
split level 158: [/input, 1019] 
split level 159: [/input, 551] 
split level 160: [/input-8, 86] 
split level 161: [/input-8, 488] 
split level 162: [/input, 593] 
split level 163: [/input-8, 92] 
split level 164: [/input-8, 278] 
split level 165: [/input-8, 116] 
split level 166: [/input, 900] 
split level 167: [/input-8, 1781] 
split level 168: [/input, 2786] 
split level 169: [/input, 3492] 
split level 170: [/input, 611] 
split level 171: [/input, 3446] 
split level 172: [/input, 2787] 
split level 173: [/input, 2163] 
split level 174: [/input-8, 1761] 
split level 175: [/input, 1020] 
split level 176: [/input, 2181] 
split level 177: [/input-8, 384] 
split level 178: [/input, 3578] 
split level 179: [/input, 1210] 
split level 180: [/input, 1179] 
split level 181: [/input-8, 442] 
split level 182: [/input, 2772] 
split level 183: [/input, 3048] 
split level 184: [/input, 2196] 
split level 185: [/input, 387] 
split level 186: [/input, 557] 
split level 187: [/input, 1208] 
split level 188: [/input, 3498] 
split level 189: [/input, 2789] 
split level 190: [/input, 552] 
split level 191: [/input, 3020] 
split level 192: [/input, 3541] 
split level 193: [/input, 2792] 
split level 194: [/input, 956] 
split level 195: [/input, 444] 
split level 196: [/input, 2556] 
split level 197: [/input, 1194] 
split level 198: [/input, 3532] 
split level 199: [/input, 2660] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11737534403800964
10 lb beta sum: 0.0, worst -0.11736664175987244
Time: prepare 0.0116    bound 0.0979    transfer 0.0028    finalize 0.0029    func 0.1177    
Accumulated time: func 0.1716    prepare 0.0216    bound 0.1513    transfer 0.0029    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.13235807) min lb tensor(-0.11736479)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.010769128799438477 
BICCOS Cumulative time: 0.010769128799438477
Preprocessing time: 0.009925127029418945 Inference time: 0.0005171298980712891 Add cuts time: 8.797645568847656e-05 Cut analysis time: 0.00023889541625976562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10714 (1), -0.10712 (1), -0.10690 (1), -0.10673 (1), -0.10672 (1), -0.10634 (1), -0.10629 (1), -0.10602 (1), -0.10581 (1), -0.10580 (1), -0.10568 (1), -0.10532 (1), -0.10528 (1), -0.10510 (1), -0.10450 (1), -0.10413 (1), -0.10399 (1), -0.10324 (1), -0.10308 (1), -0.10299 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5169    set_bounds 0.0090    solve 0.1178    add 0.0685    
Accumulated time: pickout 0.0003    decision 0.5169    set_bounds 0.0090    solve 0.1178    add 0.0685    
Current (lb-rhs): -0.10714402794837952
50 domains visited
Cumulative time: 0.7819607257843018

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 24] [/input-12, 24] [/input-12, 53] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 53] [/input-12, 53] [/input-12, 69] [/input-12, 53] [/input-12, 69] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 3: [/input-12, 69] [/input-12, 69] [/input-12, 6] [/input-12, 69] [/input-12, 6] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08096775412559509

all verified at 6th iter
Time: prepare 0.0069    bound 0.0405    transfer 0.0011    finalize 0.0022    func 0.0533    
Accumulated time: func 0.2249    prepare 0.0287    bound 0.1918    transfer 0.0040    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.17984016) min lb tensor(0.00160831)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03515958786010742 
BICCOS Cumulative time: 0.0459287166595459
Preprocessing time: 0.011727094650268555 Inference time: 0.015845298767089844 Add cuts time: 0.007407665252685547 Cut analysis time: 0.00017952919006347656
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0129    solve 0.0533    add 0.0149    
Accumulated time: pickout 0.0013    decision 0.5363    set_bounds 0.0219    solve 0.1712    add 0.0835    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 31]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.48726713e-07, 1.88168690e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 31]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.48726713e-07, 2.02158555e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 31]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.21592514e-09, 1.93648085e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 31]), tensor([1., 1.]), tensor([0, 0]), tensor([1.21592514e-09, 1.88853160e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05777570605278015

all verified at 2th iter
Time: prepare 0.0003    bound 0.0148    transfer 0.0001    finalize 0.0001    func 0.0154    
Accumulated time: func 0.2403    prepare 0.0291    bound 0.2066    transfer 0.0041    finalize 0.0054    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.50627779960632
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.5062026977539
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.50617933273315
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.50615787506104
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.50600171089172
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.5059790611267
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4941 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 161, vnnlib ID: 161 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.26904869, -33.04354858, -25.95203400, -25.30147362, -26.82607079,
         -23.58791351, -27.02210999, -26.74736023, -30.97900772, -31.80931664]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [497]; unstable size 497; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 236, 1, 497] with unstable size 235 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 497] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 497] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [235]; unstable size 235; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 235] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 235] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.07312441, 7.09390211, 1.17368364, 1.32954621, 1.97332025, 2.09624052,
         2.19010592, 5.61076880, 6.28059912]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0373 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 162, vnnlib ID: 162 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.48896790, -26.36515045, -19.88720322, -22.34896469, -20.88877678,
         -23.03698540, -20.63687515, -24.80028343, -23.16793442, -27.18689156]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [914]; unstable size 914; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 265, 1, 914] with unstable size 264 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 914] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 914] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [264]; unstable size 264; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 264] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 264] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.50396144,  4.56140327,  1.59753525,  0.26819670,  2.21705484,
         -0.30545199,  3.74951553,  1.75252247,  5.38511562]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.48896790, -26.36515045, -19.88720322, -22.34896469, -20.88877678,
         -23.03698540, -20.63687515, -24.80028343, -23.16793442, -27.18689156]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.01it/s]100%|██████████| 1/1 [00:00<00:00,  9.00it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.65819931, -26.38527298, -20.12338066, -22.42969704, -20.93481636,
          -23.17112923, -20.35648537, -24.91724396, -23.23488617, -27.27224159]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.23310471]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1137 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 21.216482162475586
alpha/beta optimization time: 1.2086973190307617
initial alpha-crown bounds: tensor([[ 1.54622126,  4.63079453,  1.64909256,  0.31041062,  2.27289939,
         -0.27205825,  3.81806374,  1.79653811,  5.46451998]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.27205824851989746
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.63054537773132
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.63050532341003
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.63048195838928
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.63046097755432
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.6304416656494
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.6304223537445
Verifying property 5 with 1 instances.
##### Instance 162 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.27205825]], device='cuda:0') need to verify.
Model prediction is: tensor([-22.48896790, -26.36515045, -19.88720322, -22.34896469, -20.88877678,
        -23.03698540, -20.63687515, -24.80028343, -23.16793442, -27.18689156],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.27205825]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 914
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 259
Node /15 input 0: size torch.Size([100]) unstable 17
-----------------
# of unstable neurons: 1190
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010061264038085938
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.27205705642700195
10 lb beta sum: 0.0, worst -0.27205896377563477
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0531    transfer 0.0001    finalize 0.0001    func 0.0536    
Accumulated time: func 0.0536    prepare 0.0002    bound 0.0531    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] 
split level 1: [/input-12, 36] 
split level 2: [/input-12, 96] 
split level 3: [/input-12, 89] 
split level 4: [/input-12, 43] 
split level 5: [/input-12, 15] 
split level 6: [/input-12, 18] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 90] 
split level 9: [/input, 2968] 
split level 10: [/input-8, 1772] 
split level 11: [/input-8, 173] 
split level 12: [/input-8, 1171] 
split level 13: [/input, 419] 
split level 14: [/input, 2984] 
split level 15: [/input-8, 953] 
split level 16: [/input-8, 1756] 
split level 17: [/input-8, 1755] 
split level 18: [/input, 900] 
split level 19: [/input, 2966] 
split level 20: [/input-8, 1236] 
split level 21: [/input-8, 1762] 
split level 22: [/input, 3044] 
split level 23: [/input-8, 1734] 
split level 24: [/input, 901] 
split level 25: [/input, 932] 
split level 26: [/input-8, 228] 
split level 27: [/input, 953] 
split level 28: [/input-8, 372] 
split level 29: [/input, 885] 
split level 30: [/input, 2935] 
split level 31: [/input-8, 954] 
split level 32: [/input, 137] 
split level 33: [/input, 117] 
split level 34: [/input-8, 1374] 
split level 35: [/input, 966] 
split level 36: [/input, 3028] 
split level 37: [/input-8, 1245] 
split level 38: [/input, 2920] 
split level 39: [/input-8, 1740] 
split level 40: [/input, 3235] 
split level 41: [/input, 962] 
split level 42: [/input-8, 1769] 
split level 43: [/input-8, 2015] 
split level 44: [/input, 869] 
split level 45: [/input, 647] 
split level 46: [/input, 140] 
split level 47: [/input-8, 1716] 
split level 48: [/input, 133] 
split level 49: [/input-8, 2006] 
split level 50: [/input-8, 1332] 
split level 51: [/input, 964] 
split level 52: [/input, 1912] 
split level 53: [/input, 118] 
split level 54: [/input, 948] 
split level 55: [/input-8, 1625] 
split level 56: [/input-8, 1618] 
split level 57: [/input, 853] 
split level 58: [/input, 2685] 
split level 59: [/input-8, 1649] 
split level 60: [/input-8, 1193] 
split level 61: [/input-8, 1748] 
split level 62: [/input, 949] 
split level 63: [/input, 1390] 
split level 64: [/input, 2936] 
split level 65: [/input, 1943] 
split level 66: [/input, 916] 
split level 67: [/input, 934] 
split level 68: [/input, 169] 
split level 69: [/input, 167] 
split level 70: [/input, 125] 
split level 71: [/input, 2988] 
split level 72: [/input, 450] 
split level 73: [/input-8, 1077] 
split level 74: [/input, 965] 
split level 75: [/input, 141] 
split level 76: [/input, 970] 
split level 77: [/input-8, 1331] 
split level 78: [/input, 164] 
split level 79: [/input, 213] 
split level 80: [/input-8, 1244] 
split level 81: [/input, 102] 
split level 82: [/input, 2972] 
split level 83: [/input, 968] 
split level 84: [/input, 1928] 
split level 85: [/input-8, 1996] 
split level 86: [/input-8, 1650] 
split level 87: [/input, 884] 
split level 88: [/input, 172] 
split level 89: [/input-8, 1633] 
split level 90: [/input, 871] 
split level 91: [/input, 2686] 
split level 92: [/input-8, 1781] 
split level 93: [/input, 2441] 
split level 94: [/input-8, 2032] 
split level 95: [/input, 852] 
split level 96: [/input, 698] 
split level 97: [/input, 631] 
split level 98: [/input, 3460] 
split level 99: [/input, 946] 
split level 100: [/input, 142] 
split level 101: [/input, 678] 
split level 102: [/input, 89] 
split level 103: [/input, 2211] 
split level 104: [/input, 2670] 
split level 105: [/input, 406] 
split level 106: [/input-8, 1157] 
split level 107: [/input-8, 2017] 
split level 108: [/input, 2964] 
split level 109: [/input-8, 181] 
split level 110: [/input, 2692] 
split level 111: [/input, 868] 
split level 112: [/input, 854] 
split level 113: [/input, 2963] 
split level 114: [/input, 823] 
split level 115: [/input, 2524] 
split level 116: [/input, 375] 
split level 117: [/input-8, 1366] 
split level 118: [/input, 1913] 
split level 119: [/input, 1897] 
split level 120: [/input, 855] 
split level 121: [/input-8, 229] 
split level 122: [/input, 211] 
split level 123: [/input-8, 771] 
split level 124: [/input, 2948] 
split level 125: [/input-8, 956] 
split level 126: [/input, 2691] 
split level 127: [/input, 156] 
split level 128: [/input-8, 1610] 
split level 129: [/input, 1927] 
split level 130: [/input, 1881] 
split level 131: [/input, 3531] 
split level 132: [/input, 3131] 
split level 133: [/input, 930] 
split level 134: [/input, 3291] 
split level 135: [/input, 3476] 
split level 136: [/input, 4007] 
split level 137: [/input, 2939] 
split level 138: [/input, 662] 
split level 139: [/input, 216] 
split level 140: [/input, 2248] 
split level 141: [/input-8, 1617] 
split level 142: [/input, 1898] 
split level 143: [/input, 126] 
split level 144: [/input, 3532] 
split level 145: [/input, 914] 
split level 146: [/input, 838] 
split level 147: [/input, 132] 
split level 148: [/input, 228] 
split level 149: [/input, 957] 
split level 150: [/input, 2425] 
split level 151: [/input, 981] 
split level 152: [/input, 94] 
split level 153: [/input, 3549] 
split level 154: [/input-8, 1284] 
split level 155: [/input, 2690] 
split level 156: [/input, 101] 
split level 157: [/input, 2156] 
split level 158: [/input, 2702] 
split level 159: [/input-8, 1749] 
split level 160: [/input, 158] 
split level 161: [/input, 2477] 
split level 162: [/input, 898] 
split level 163: [/input-8, 366] 
split level 164: [/input, 2142] 
split level 165: [/input, 974] 
split level 166: [/input, 2932] 
split level 167: [/input, 2706] 
split level 168: [/input, 87] 
split level 169: [/input, 2212] 
split level 170: [/input, 2931] 
split level 171: [/input, 2492] 
split level 172: [/input, 2676] 
split level 173: [/input, 2436] 
split level 174: [/input, 2659] 
split level 175: [/input, 214] 
split level 176: [/input, 2181] 
split level 177: [/input, 2660] 
split level 178: [/input, 2675] 
split level 179: [/input, 215] 
split level 180: [/input, 2504] 
split level 181: [/input-8, 213] 
split level 182: [/input, 2507] 
split level 183: [/input, 2180] 
split level 184: [/input, 2424] 
split level 185: [/input, 73] 
split level 186: [/input, 2661] 
split level 187: [/input, 1882] 
split level 188: [/input, 2254] 
split level 189: [/input, 3501] 
split level 190: [/input, 1498] 
split level 191: [/input, 2677] 
split level 192: [/input, 2163] 
split level 193: [/input, 2658] 
split level 194: [/input, 2206] 
split level 195: [/input, 2638] 
split level 196: [/input, 2398] 
split level 197: [/input, 3041] 
split level 198: [/input, 2674] 
split level 199: [/input, 2705] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.271825909614563
10 lb beta sum: 0.0, worst -0.27181339263916016
Time: prepare 0.0114    bound 0.0978    transfer 0.0012    finalize 0.0030    func 0.1159    
Accumulated time: func 0.1695    prepare 0.0213    bound 0.1509    transfer 0.0013    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.02815509) min lb tensor(-0.27181041)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010782957077026367 
BICCOS Cumulative time: 0.010782957077026367
Preprocessing time: 0.009953498840332031 Inference time: 0.00015473365783691406 Add cuts time: 7.319450378417969e-05 Cut analysis time: 0.0006015300750732422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26584 (1), -0.26583 (1), -0.26572 (1), -0.26563 (1), -0.26555 (1), -0.26530 (1), -0.26509 (1), -0.26495 (1), -0.26458 (1), -0.26443 (1), -0.26409 (1), -0.26402 (1), -0.26370 (1), -0.26369 (1), -0.26352 (1), -0.26337 (1), -0.26332 (1), -0.26329 (1), -0.26328 (1), -0.26313 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5204    set_bounds 0.0088    solve 0.1160    add 0.0670    
Accumulated time: pickout 0.0003    decision 0.5204    set_bounds 0.0088    solve 0.1160    add 0.0670    
Current (lb-rhs): -0.26583755016326904
50 domains visited
Cumulative time: 0.7875158786773682

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 96] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 96] 
split level 1: [/input-12, 89] [/input-12, 89] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 89] 
split level 2: [/input-12, 43] [/input-12, 43] [/input-12, 89] [/input-12, 43] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 43] 
split level 3: [/input-12, 18] [/input-12, 18] [/input-12, 43] [/input-12, 18] [/input-12, 18] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 18] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24262547492980957
10 lb beta sum: 0.5864970088005066, worst -0.23490500450134277
Time: prepare 0.0076    bound 0.1185    transfer 0.0012    finalize 0.0025    func 0.1323    
Accumulated time: func 0.3018    prepare 0.0292    bound 0.2694    transfer 0.0024    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.09601897) min lb tensor(-0.23489141)
Number of Verified Splits: 12 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 11
#cuts >= 20: 0
BICCOS time: 0.013118743896484375 
BICCOS Cumulative time: 0.023901700973510742
Preprocessing time: 0.011937618255615234 Inference time: 0.0005512237548828125 Add cuts time: 0.00023865699768066406 Cut analysis time: 0.00039124488830566406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07051 (2), -0.06993 (2), -0.06976 (2), -0.06924 (2), -0.06897 (2), -0.06897 (2), -0.06893 (2), -0.06889 (2), -0.06862 (2), -0.06841 (2), -0.06812 (2), -0.06781 (2), -0.06766 (2), -0.06756 (2), -0.06562 (2), -0.06559 (2), -0.06382 (2), -0.06258 (2), -0.06155 (2), -0.06141 (2), 
Length of domains: 50
Time: pickout 0.0013    decision 0.0209    set_bounds 0.0120    solve 0.1324    add 0.0803    
Accumulated time: pickout 0.0016    decision 0.5413    set_bounds 0.0208    solve 0.2484    add 0.1473    
Current (lb-rhs): -0.07050912082195282
100 domains visited
Cumulative time: 1.0478882789611816

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-12, 83] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 96] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] 
split level 1: [/input-12, 96] [/input-12, 96] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 36] [/input-12, 89] [/input-12, 36] 
split level 2: [/input-12, 89] [/input-12, 89] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 89] [/input-12, 43] [/input-12, 89] 
split level 3: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 43] [/input-12, 18] [/input-12, 43] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07522916793823242
10 lb beta sum: 0.7986534237861633, worst -0.11695098876953125
Time: prepare 0.0072    bound 0.1180    transfer 0.0011    finalize 0.0024    func 0.1312    
Accumulated time: func 0.4330    prepare 0.0366    bound 0.3874    transfer 0.0035    finalize 0.0079    
all_split False
======================Cut inference begins======================
max lb tensor(0.29588318) min lb tensor(-0.03636098)
Number of Verified Splits: 378 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.03551840782165527 
BICCOS Cumulative time: 0.059420108795166016
Preprocessing time: 0.01166987419128418 Inference time: 0.016476154327392578 Add cuts time: 0.007025003433227539 Cut analysis time: 0.00034737586975097656
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0156    solve 0.1313    add 0.0196    
Accumulated time: pickout 0.0026    decision 0.5607    set_bounds 0.0364    solve 0.3797    add 0.1669    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 43, 83]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 1.02749884e-01, 3.00441802e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 43, 83]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 1.02749884e-01, 4.66854870e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 43, 83]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 4.89034206e-02, 2.93978959e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 43, 83]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 4.89034206e-02, 4.14608866e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 96]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.82951758e+16, 3.73041630e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 96, 83]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 1.89526066e-01, 2.58444428e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 96, 83]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 1.89526066e-01, 5.95291108e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  7
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21220040321350098
10 lb beta sum: 0.5384144186973572, worst -0.19475743174552917
Time: prepare 0.0004    bound 0.1347    transfer 0.0001    finalize 0.0002    func 0.1355    
Accumulated time: func 0.5685    prepare 0.0370    bound 0.5221    transfer 0.0037    finalize 0.0081    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 96] [/input-12, 83] 
split level 1: [/input-12, 89] [/input-12, 89] 
split level 2: [/input-12, 15] [/input-12, 43] 
split level 3: [/input-8, 1171] [/input-12, 18] 
split level 4: [/input, 2984] [/input-8, 1171] 
split level 5: [/input, 2966] [/input, 2984] 
split level 6: [/input-8, 1762] [/input, 2966] 
cut re-enabled after branching node selection
0 lb beta sum: 1.0952541828155518, worst -0.10419665277004242
10 lb beta sum: 1.1569130420684814, worst -0.10395441949367523
Time: prepare 0.0126    bound 0.1296    transfer 0.0018    finalize 0.0015    func 0.1471    
Accumulated time: func 0.7156    prepare 0.0500    bound 0.6516    transfer 0.0054    finalize 0.0096    
all_split False
======================Cut inference begins======================
max lb tensor(0.68825006) min lb tensor(-0.10389815)
Number of Verified Splits: 224 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.0003218650817871094 
BICCOS Cumulative time: 0.059741973876953125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10390 (7), -0.10013 (7), -0.09845 (7), -0.09761 (7), -0.09469 (7), -0.09389 (7), -0.09217 (7), -0.08843 (7), -0.08572 (7), -0.08235 (7), -0.08030 (7), -0.07970 (7), -0.07715 (7), -0.07652 (7), -0.07438 (7), -0.07127 (7), -0.04720 (7), -0.04480 (7), -0.04381 (7), -0.04181 (7), 
Length of domains: 32
Time: pickout 0.0005    decision 0.0196    set_bounds 0.0275    solve 0.1472    add 0.0009    
Accumulated time: pickout 0.0031    decision 0.5803    set_bounds 0.0639    solve 0.5269    add 0.1678    
Current (lb-rhs): -0.10389815270900726
132 domains visited
Cumulative time: 1.6186721324920654

BaB round 2
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] 
split level 1: [/input-8, 1650] [/input-12, 2] [/input-8, 1650] [/input-12, 2] [/input-8, 1650] [/input-12, 2] [/input-8, 1650] [/input-12, 2] [/input-8, 1650] [/input-12, 2] 
split level 2: [/input-8, 1077] [/input-8, 1762] [/input-8, 1077] [/input-8, 1236] [/input-8, 1077] [/input-8, 1762] [/input-8, 1077] [/input-8, 1236] [/input-8, 1077] [/input-8, 1762] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493061304092407, worst -0.09995327889919281
10 lb beta sum: 0.9493061304092407, worst -0.09982024133205414
Time: prepare 0.0125    bound 0.1304    transfer 0.0007    finalize 0.0014    func 0.1467    
Accumulated time: func 0.8623    prepare 0.0626    bound 0.7821    transfer 0.0062    finalize 0.0110    
all_split False
======================Cut inference begins======================
max lb tensor(0.48234594) min lb tensor(-0.09977649)
Number of Verified Splits: 187 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.0003325939178466797 
BICCOS Cumulative time: 0.060074567794799805
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09978 (10), -0.09777 (10), -0.09604 (10), -0.09432 (10), -0.09408 (10), -0.09360 (10), -0.09231 (10), -0.09059 (10), -0.09022 (10), -0.08989 (10), -0.08863 (10), -0.08815 (10), -0.08652 (10), -0.08477 (10), -0.08444 (10), -0.08168 (10), -0.08108 (10), -0.07783 (10), -0.07647 (10), -0.07571 (10), 
Length of domains: 69
Time: pickout 0.0014    decision 0.0125    set_bounds 0.0211    solve 0.1467    add 0.0032    
Accumulated time: pickout 0.0046    decision 0.5928    set_bounds 0.0850    solve 0.6736    add 0.1710    
Current (lb-rhs): -0.099776491522789
201 domains visited
Cumulative time: 1.8066885471343994

BaB round 3
batch: 69
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input, 3028] [/input-8, 1772] [/input-12, 90] [/input, 3028] [/input-8, 1772] [/input-12, 90] [/input, 3028] [/input-8, 1772] [/input-12, 90] 
split level 1: [/input-8, 1756] [/input-8, 1781] [/input-12, 90] [/input-8, 1756] [/input-8, 1781] [/input-12, 90] [/input-8, 1756] [/input-8, 1781] [/input-12, 90] [/input-8, 1756] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493061304092407, worst -0.097975954413414
10 lb beta sum: 0.9493061304092407, worst -0.09792695939540863
Time: prepare 0.0139    bound 0.1356    transfer 0.0020    finalize 0.0018    func 0.1550    
Accumulated time: func 1.0173    prepare 0.0772    bound 0.9177    transfer 0.0081    finalize 0.0128    
all_split False
======================Cut inference begins======================
max lb tensor(0.19359054) min lb tensor(-0.09790085)
Number of Verified Splits: 114 of 276
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.00033736228942871094 
BICCOS Cumulative time: 0.060411930084228516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09790 (12), -0.09590 (12), -0.09421 (12), -0.09247 (12), -0.09223 (12), -0.09165 (12), -0.09045 (12), -0.08880 (12), -0.08805 (12), -0.08797 (12), -0.08683 (12), -0.08622 (12), -0.08450 (12), -0.08262 (12), -0.08256 (12), -0.07910 (12), -0.07908 (12), -0.07527 (12), -0.07373 (12), -0.07309 (12), 
Length of domains: 162
Time: pickout 0.0032    decision 0.0216    set_bounds 0.0230    solve 0.1551    add 0.0078    
Accumulated time: pickout 0.0077    decision 0.6143    set_bounds 0.1080    solve 0.8288    add 0.1788    
Current (lb-rhs): -0.09790085256099701
363 domains visited
Cumulative time: 2.0184571743011475

BaB round 4
batch: 162
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1772] [/input-8, 1762] [/input-8, 1772] [/input-8, 1762] [/input-8, 1772] [/input-8, 1762] [/input-8, 1772] [/input-8, 1762] [/input-8, 1772] [/input-8, 1762] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493061900138855, worst -0.0948561280965805
10 lb beta sum: 0.9493061900138855, worst -0.0948253720998764
Time: prepare 0.0159    bound 0.1367    transfer 0.0011    finalize 0.0018    func 0.1581    
Accumulated time: func 1.1754    prepare 0.0932    bound 1.0544    transfer 0.0092    finalize 0.0146    
all_split False
======================Cut inference begins======================
max lb tensor(0.25952423) min lb tensor(-0.09480618)
Number of Verified Splits: 99 of 324
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.00036144256591796875 
BICCOS Cumulative time: 0.060773372650146484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09481 (13), -0.09280 (13), -0.09085 (13), -0.08939 (13), -0.08891 (13), -0.08890 (13), -0.08849 (13), -0.08737 (13), -0.08702 (13), -0.08687 (13), -0.08545 (13), -0.08496 (13), -0.08479 (13), -0.08459 (13), -0.08349 (13), -0.08348 (13), -0.08307 (13), -0.08271 (13), -0.08162 (13), -0.08146 (13), 
Length of domains: 225
Time: pickout 0.0028    decision 0.0198    set_bounds 0.0140    solve 0.1582    add 0.0037    
Accumulated time: pickout 0.0105    decision 0.6342    set_bounds 0.1220    solve 0.9870    add 0.1825    
Current (lb-rhs): -0.09480617940425873
588 domains visited
Cumulative time: 2.2187891006469727

BaB round 5
batch: 225
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1236] [/input-8, 954] [/input-8, 1236] [/input-8, 954] [/input-8, 1236] [/input-8, 954] [/input-8, 1236] [/input-8, 954] [/input-8, 1236] [/input-8, 954] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493062496185303, worst -0.09313319623470306
10 lb beta sum: 0.9493062496185303, worst -0.0931163877248764
Time: prepare 0.0220    bound 0.1389    transfer 0.0024    finalize 0.0024    func 0.1686    
Accumulated time: func 1.3440    prepare 0.1154    bound 1.1933    transfer 0.0117    finalize 0.0170    
all_split False
======================Cut inference begins======================
max lb tensor(0.23410524) min lb tensor(-0.09310065)
Number of Verified Splits: 101 of 450
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.00034356117248535156 
BICCOS Cumulative time: 0.061116933822631836
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09310 (14), -0.09038 (14), -0.08842 (14), -0.08815 (14), -0.08769 (14), -0.08677 (14), -0.08648 (14), -0.08633 (14), -0.08497 (14), -0.08449 (14), -0.08434 (14), -0.08300 (14), -0.08299 (14), -0.08297 (14), -0.08276 (14), -0.08249 (14), -0.08184 (14), -0.08136 (14), -0.08109 (14), -0.08090 (14), 
Length of domains: 349
Time: pickout 0.0040    decision 0.0230    set_bounds 0.0194    solve 0.1688    add 0.0044    
Accumulated time: pickout 0.0145    decision 0.6572    set_bounds 0.1413    solve 1.1558    add 0.1869    
Current (lb-rhs): -0.0931006520986557
937 domains visited
Cumulative time: 2.4399099349975586

BaB round 6
batch: 349
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1245] [/input-8, 1756] [/input-8, 1245] [/input-8, 1756] [/input-8, 1245] [/input-8, 1756] [/input-8, 1245] [/input-8, 1756] [/input-8, 1245] [/input, 901] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493062496185303, worst -0.09069083631038666
10 lb beta sum: 0.9493062496185303, worst -0.09067319333553314
Time: prepare 0.0340    bound 0.1392    transfer 0.0038    finalize 0.0037    func 0.1858    
Accumulated time: func 1.5299    prepare 0.1496    bound 1.3325    transfer 0.0155    finalize 0.0207    
all_split False
======================Cut inference begins======================
max lb tensor(0.24805607) min lb tensor(-0.09065734)
Number of Verified Splits: 41 of 698
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.0003368854522705078 
BICCOS Cumulative time: 0.061453819274902344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09066 (15), -0.08745 (15), -0.08571 (15), -0.08550 (15), -0.08539 (15), -0.08525 (15), -0.08424 (15), -0.08355 (15), -0.08323 (15), -0.08305 (15), -0.08205 (15), -0.08152 (15), -0.08142 (15), -0.08126 (15), -0.08096 (15), -0.08060 (15), -0.08045 (15), -0.08029 (15), -0.08010 (15), -0.07997 (15), 
Length of domains: 657
Time: pickout 0.0063    decision 0.0295    set_bounds 0.0295    solve 0.1860    add 0.0080    
Accumulated time: pickout 0.0208    decision 0.6867    set_bounds 0.1709    solve 1.3418    add 0.1949    
Current (lb-rhs): -0.09065733850002289
1594 domains visited
Cumulative time: 2.700392961502075

BaB round 7
batch: 657
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 954] [/input, 3028] [/input-8, 954] [/input, 2935] [/input-8, 954] [/input, 3028] [/input-8, 1374] [/input, 2935] [/input-8, 954] [/input-8, 1756] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493061900138855, worst -0.08776389062404633
10 lb beta sum: 0.9493061900138855, worst -0.08774839341640472
Time: prepare 0.0644    bound 0.1480    transfer 0.0068    finalize 0.1497    func 0.3773    
Accumulated time: func 1.9072    prepare 0.2142    bound 1.4805    transfer 0.0223    finalize 0.1704    
all_split False
======================Cut inference begins======================
max lb tensor(0.00676788) min lb tensor(-0.08774458)
Number of Verified Splits: 119 of 1314
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.0004622936248779297 
BICCOS Cumulative time: 0.06191611289978027
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08774 (16), -0.08577 (16), -0.08540 (16), -0.08366 (16), -0.08278 (16), -0.08234 (16), -0.08230 (16), -0.08131 (16), -0.08096 (16), -0.08080 (16), -0.08049 (16), -0.08036 (16), -0.08035 (16), -0.08003 (16), -0.07999 (16), -0.07983 (16), -0.07942 (16), -0.07900 (16), -0.07886 (16), -0.07869 (16), 
Length of domains: 1195
Time: pickout 0.0122    decision 0.0464    set_bounds 0.0547    solve 0.3776    add 0.0122    
Accumulated time: pickout 0.0330    decision 0.7331    set_bounds 0.2256    solve 1.7194    add 0.2071    
Current (lb-rhs): -0.0877445787191391
2789 domains visited
Cumulative time: 3.2058968544006348

BaB round 8
batch: 1195
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3028] [/input, 901] [/input-8, 1374] [/input, 3028] [/input-8, 1374] [/input, 901] [/input-8, 954] [/input, 3028] [/input, 3028] [/input, 3028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493061900138855, worst -0.0845550149679184
10 lb beta sum: 0.9493061900138855, worst -0.08455739915370941
Time: prepare 0.1165    bound 0.1934    transfer 0.0111    finalize 0.0137    func 0.3505    
Accumulated time: func 2.2577    prepare 0.3310    bound 1.6739    transfer 0.0333    finalize 0.1841    
all_split False
======================Cut inference begins======================
max lb tensor(0.01290371) min lb tensor(-0.08455287)
Number of Verified Splits: 359 of 2390
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.00038123130798339844 
BICCOS Cumulative time: 0.06229734420776367
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08455 (17), -0.08321 (17), -0.08257 (17), -0.08219 (17), -0.08123 (17), -0.08085 (17), -0.08084 (17), -0.08044 (17), -0.07958 (17), -0.07950 (17), -0.07915 (17), -0.07909 (17), -0.07891 (17), -0.07823 (17), -0.07812 (17), -0.07781 (17), -0.07759 (17), -0.07755 (17), -0.07727 (17), -0.07725 (17), 
Length of domains: 2031
Time: pickout 0.0195    decision 0.0769    set_bounds 0.0988    solve 0.3510    add 0.0186    
Accumulated time: pickout 0.0525    decision 0.8101    set_bounds 0.3244    solve 2.0703    add 0.2257    
Current (lb-rhs): -0.08455286920070648
4820 domains visited
Cumulative time: 3.7750117778778076

BaB round 9
batch: 2031
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1374] [/input, 2935] [/input, 3028] [/input-8, 228] [/input, 3028] [/input, 2935] [/input, 2935] [/input-8, 228] [/input-8, 1374] [/input, 2935] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493062496185303, worst -0.08177469670772552
10 lb beta sum: 0.9493062496185303, worst -0.08177100121974945
Time: prepare 0.2000    bound 0.2838    transfer 0.0283    finalize 0.0236    func 0.5623    
Accumulated time: func 2.8200    prepare 0.5312    bound 1.9577    transfer 0.0616    finalize 0.2076    
all_split False
======================Cut inference begins======================
max lb tensor(0.00931467) min lb tensor(-0.08176814)
Number of Verified Splits: 456 of 4062
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.0004858970642089844 
BICCOS Cumulative time: 0.06278324127197266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08177 (18), -0.08042 (18), -0.07977 (18), -0.07936 (18), -0.07842 (18), -0.07801 (18), -0.07801 (18), -0.07760 (18), -0.07679 (18), -0.07666 (18), -0.07625 (18), -0.07615 (18), -0.07604 (18), -0.07593 (18), -0.07556 (18), -0.07545 (18), -0.07536 (18), -0.07480 (18), -0.07470 (18), -0.07445 (18), 
Length of domains: 3606
Time: pickout 0.0399    decision 0.1234    set_bounds 0.1682    solve 0.5633    add 0.0233    
Accumulated time: pickout 0.0923    decision 0.9335    set_bounds 0.4926    solve 2.6336    add 0.2490    
Current (lb-rhs): -0.08176814019680023
8426 domains visited
Cumulative time: 4.700069904327393

BaB round 10
batch: 3606
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2935] [/input-8, 228] [/input, 2935] [/input, 1928] [/input, 2935] [/input-8, 228] [/input, 3028] [/input, 1928] [/input-8, 1740] [/input-8, 228] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493062496185303, worst -0.08099626004695892
10 lb beta sum: 0.9493062496185303, worst -0.08099482953548431
Time: prepare 0.3614    bound 0.4529    transfer 0.0603    finalize 0.0422    func 0.9638    
Accumulated time: func 3.7838    prepare 0.8928    bound 2.4106    transfer 0.1219    finalize 0.2498    
all_split False
======================Cut inference begins======================
max lb tensor(0.01049985) min lb tensor(-0.08099388)
Number of Verified Splits: 694 of 7212
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.0004391670227050781 
BICCOS Cumulative time: 0.06322240829467773
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08099 (19), -0.07965 (19), -0.07900 (19), -0.07858 (19), -0.07765 (19), -0.07723 (19), -0.07721 (19), -0.07683 (19), -0.07602 (19), -0.07587 (19), -0.07548 (19), -0.07538 (19), -0.07525 (19), -0.07513 (19), -0.07479 (19), -0.07467 (19), -0.07458 (19), -0.07403 (19), -0.07390 (19), -0.07369 (19), 
Length of domains: 6518
Time: pickout 0.0601    decision 0.3608    set_bounds 0.3010    solve 0.9654    add 0.0426    
Accumulated time: pickout 0.1525    decision 1.2943    set_bounds 0.7935    solve 3.5990    add 0.2916    
Current (lb-rhs): -0.08099387586116791
14944 domains visited
Cumulative time: 6.44693398475647

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1740] [/input, 1928] [/input-8, 1740] [/input-8, 1374] [/input-8, 1740] [/input, 1928] [/input-8, 1740] [/input-8, 1374] [/input, 2935] [/input, 1928] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493063688278198, worst -0.07817278802394867
10 lb beta sum: 0.9493063688278198, worst -0.07815943658351898
Time: prepare 0.4140    bound 0.4995    transfer 0.0808    finalize 0.0540    func 1.1014    
Accumulated time: func 4.8852    prepare 1.3071    bound 2.9101    transfer 0.2028    finalize 0.3038    
all_split False
======================Cut inference begins======================
max lb tensor(0.01144977) min lb tensor(-0.07815455)
Number of Verified Splits: 627 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.0004467964172363281 
BICCOS Cumulative time: 0.06366920471191406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07815 (20), -0.07775 (20), -0.07616 (20), -0.07576 (20), -0.07573 (20), -0.07548 (20), -0.07534 (20), -0.07446 (20), -0.07435 (20), -0.07400 (20), -0.07395 (20), -0.07367 (20), -0.07360 (20), -0.07318 (20), -0.07310 (20), -0.07281 (20), -0.07254 (20), -0.07246 (20), -0.07241 (20), -0.07213 (20), 
Length of domains: 9987
Time: pickout 0.0664    decision 0.3765    set_bounds 0.3473    solve 1.1034    add 0.0444    
Accumulated time: pickout 0.2189    decision 1.6707    set_bounds 1.1408    solve 4.7024    add 0.3361    
Current (lb-rhs): -0.0781545490026474
22509 domains visited
current_vram/total_varm: 11.6GB/99.9GB, batch_size increase to 8192
Cumulative time: 8.40770173072815

BaB round 12
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 137] [/input, 3028] [/input, 137] [/input-8, 1740] [/input, 137] [/input, 3028] [/input, 3028] [/input-8, 1374] [/input, 3028] [/input, 3028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493061900138855, worst -0.07673726975917816
10 lb beta sum: 0.9493061900138855, worst -0.07669280469417572
Time: prepare 0.8257    bound 0.9268    transfer 0.1830    finalize 0.0984    func 2.1416    
Accumulated time: func 7.0267    prepare 2.1332    bound 3.8369    transfer 0.3858    finalize 0.4021    
all_split False
======================Cut inference begins======================
max lb tensor(0.01114596) min lb tensor(-0.07666372)
Number of Verified Splits: 1397 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.0005354881286621094 
BICCOS Cumulative time: 0.06420469284057617
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07666 (21), -0.07548 (20), -0.07491 (21), -0.07467 (21), -0.07446 (20), -0.07423 (21), -0.07389 (21), -0.07367 (20), -0.07310 (20), -0.07291 (21), -0.07287 (21), -0.07251 (21), -0.07248 (21), -0.07223 (21), -0.07189 (21), -0.07175 (20), -0.07171 (21), -0.07149 (20), -0.07145 (21), -0.07111 (21), 
Length of domains: 16782
Time: pickout 0.1417    decision 0.6207    set_bounds 0.9090    solve 2.1444    add 0.0711    
Accumulated time: pickout 0.3605    decision 2.2915    set_bounds 2.0499    solve 6.8469    add 0.4072    
Current (lb-rhs): -0.07666371762752533
37496 domains visited
current_vram/total_varm: 19.4GB/99.9GB, batch_size increase to 16384
Cumulative time: 12.332106113433838

BaB round 13
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1740] [/input, 2936] [/input, 2936] [/input-8, 2006] [/input, 2936] [/input-8, 2006] [/input, 2936] [/input-8, 1769] [/input, 137] [/input, 948] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493061900138855, worst -0.0744849294424057
10 lb beta sum: 0.9493061900138855, worst -0.07446299493312836
Time: prepare 1.6849    bound 1.7860    transfer 0.3669    finalize 0.2523    func 4.3033    
Accumulated time: func 11.3300    prepare 3.8184    bound 5.6229    transfer 0.7527    finalize 0.6545    
all_split False
======================Cut inference begins======================
max lb tensor(0.01129808) min lb tensor(-0.07445882)
Number of Verified Splits: 3298 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.0007576942443847656 
BICCOS Cumulative time: 0.06496238708496094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07446 (22), -0.07376 (21), -0.07272 (22), -0.07228 (22), -0.07207 (22), -0.07196 (21), -0.07185 (22), -0.07167 (22), -0.07159 (21), -0.07139 (21), -0.07099 (21), -0.07067 (22), -0.07053 (22), -0.07033 (22), -0.07032 (22), -0.07014 (22), -0.07012 (22), -0.07004 (21), -0.06982 (22), -0.06976 (21), 
Length of domains: 29868
Time: pickout 0.2795    decision 2.0972    set_bounds 1.7124    solve 4.6177    add 0.1029    
Accumulated time: pickout 0.6400    decision 4.3886    set_bounds 3.7623    solve 11.4645    add 0.5101    
Current (lb-rhs): -0.07445882260799408
66966 domains visited
current_vram/total_varm: 33.6GB/99.9GB, batch_size increase to 32768
Cumulative time: 21.219974040985107

BaB round 14
batch: 29868
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3028] [/input-8, 1769] [/input-8, 1769] [/input, 885] [/input-8, 1769] [/input-8, 2006] [/input, 3028] [/input, 419] [/input-8, 1769] [/input, 3028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493061900138855, worst -0.07224820554256439
10 lb beta sum: 0.9493061900138855, worst -0.07224725186824799
Time: prepare 3.0457    bound 3.2070    transfer 0.6841    finalize 0.8225    func 8.1493    
Accumulated time: func 19.4793    prepare 6.8646    bound 8.8299    transfer 1.4368    finalize 1.4769    
all_split False
======================Cut inference begins======================
max lb tensor(0.01744081) min lb tensor(-0.07224523)
Number of Verified Splits: 6377 of 59736
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.001020193099975586 
BICCOS Cumulative time: 0.06598258018493652
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07225 (23), -0.07145 (22), -0.07050 (23), -0.07007 (23), -0.07005 (23), -0.06985 (23), -0.06963 (23), -0.06944 (23), -0.06944 (22), -0.06940 (22), -0.06912 (22), -0.06888 (22), -0.06866 (22), -0.06846 (23), -0.06832 (23), -0.06831 (23), -0.06811 (23), -0.06810 (23), -0.06795 (23), -0.06793 (23), 
Length of domains: 53359
Time: pickout 0.6450    decision 3.0218    set_bounds 3.0128    solve 8.5582    add 0.1822    
Accumulated time: pickout 1.2850    decision 7.4104    set_bounds 6.7750    solve 20.0227    add 0.6923    
Current (lb-rhs): -0.07224522531032562
120325 domains visited
Cumulative time: 36.76894783973694

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1193] [/input-8, 1193] [/input, 3028] [/input, 884] [/input-8, 1193] [/input-8, 1769] [/input-8, 1769] [/input, 871] [/input, 2935] [/input, 3028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493061900138855, worst -0.06925974786281586
10 lb beta sum: 0.9493061900138855, worst -0.0692887157201767
Time: prepare 3.3718    bound 8.7021    transfer 0.7513    finalize 0.5194    func 14.3815    
Accumulated time: func 33.8609    prepare 10.2369    bound 17.5321    transfer 2.1881    finalize 1.9964    
all_split False
======================Cut inference begins======================
max lb tensor(0.01764204) min lb tensor(-0.06921397)
Number of Verified Splits: 6942 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.0010187625885009766 
BICCOS Cumulative time: 0.0670013427734375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07225 (23), -0.07050 (23), -0.07007 (23), -0.06985 (23), -0.06963 (23), -0.06944 (23), -0.06921 (23), -0.06846 (23), -0.06832 (23), -0.06816 (24), -0.06811 (23), -0.06810 (23), -0.06793 (23), -0.06789 (23), -0.06751 (23), -0.06727 (23), -0.06727 (23), -0.06726 (23), -0.06718 (23), -0.06718 (23), 
Length of domains: 79185
Time: pickout 0.5899    decision 3.7857    set_bounds 3.5148    solve 14.3930    add 0.2432    
Accumulated time: pickout 1.8749    decision 11.1961    set_bounds 10.2899    solve 34.4157    add 0.9355    
Current (lb-rhs): -0.07224522531032562
178919 domains visited
Cumulative time: 59.45253276824951

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1390] [/input-8, 1193] [/input, 885] [/input, 885] [/input, 885] [/input-8, 1769] [/input, 1912] [/input-8, 1769] [/input, 419] [/input-8, 1769] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493061900138855, worst -0.07040797173976898
10 lb beta sum: 0.9493061900138855, worst -0.07036291062831879
Time: prepare 3.3911    bound 8.7052    transfer 0.7487    finalize 1.1832    func 14.4684    
Accumulated time: func 48.3293    prepare 13.6284    bound 26.2373    transfer 2.9369    finalize 3.1796    
all_split False
======================Cut inference begins======================
max lb tensor(0.01941825) min lb tensor(-0.07034908)
Number of Verified Splits: 7606 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.0009610652923583984 
BICCOS Cumulative time: 0.0679624080657959
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07035 (24), -0.06921 (23), -0.06859 (24), -0.06793 (24), -0.06782 (24), -0.06773 (24), -0.06751 (24), -0.06718 (23), -0.06713 (23), -0.06685 (23), -0.06663 (23), -0.06657 (24), -0.06641 (23), -0.06620 (24), -0.06607 (24), -0.06596 (24), -0.06593 (25), -0.06586 (24), -0.06576 (24), -0.06569 (24), 
Length of domains: 104347
Time: pickout 0.6087    decision 3.3276    set_bounds 3.6241    solve 14.4802    add 0.1982    
Accumulated time: pickout 2.4835    decision 14.5237    set_bounds 13.9139    solve 48.8960    add 1.1338    
Current (lb-rhs): -0.0703490823507309
236849 domains visited
Cumulative time: 81.86323094367981

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1769] [/input-8, 1193] [/input-8, 1769] [/input, 3028] [/input-8, 1769] [/input-8, 1245] [/input, 901] [/input-8, 1245] [/input, 871] [/input, 2936] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493061900138855, worst -0.06712447106838226
10 lb beta sum: 0.9493061900138855, worst -0.06716571748256683
Time: prepare 3.4033    bound 8.7022    transfer 0.7519    finalize 0.5177    func 13.8166    
Accumulated time: func 62.1458    prepare 17.0321    bound 34.9394    transfer 3.6887    finalize 3.6973    
all_split False
======================Cut inference begins======================
max lb tensor(0.01837124) min lb tensor(-0.06710945)
Number of Verified Splits: 7511 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.0010402202606201172 
BICCOS Cumulative time: 0.06900262832641602
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07035 (24), -0.06859 (24), -0.06793 (24), -0.06782 (24), -0.06773 (24), -0.06751 (24), -0.06711 (24), -0.06663 (23), -0.06657 (24), -0.06620 (24), -0.06607 (24), -0.06596 (24), -0.06593 (25), -0.06586 (24), -0.06569 (24), -0.06538 (24), -0.06538 (24), -0.06537 (24), -0.06527 (24), -0.06523 (23), 
Length of domains: 129604
Time: pickout 0.6305    decision 4.0175    set_bounds 3.9434    solve 14.7484    add 0.2425    
Accumulated time: pickout 3.1140    decision 18.5412    set_bounds 17.8573    solve 63.6443    add 1.3762    
Current (lb-rhs): -0.0703490823507309
294874 domains visited
Cumulative time: 105.61967968940735

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1390] [/input, 2936] [/input-8, 1769] [/input-8, 1769] [/input-8, 1193] [/input-8, 1769] [/input-8, 1769] [/input-8, 1769] [/input, 885] [/input-8, 1769] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493061900138855, worst -0.06817828118801117
10 lb beta sum: 0.9493061900138855, worst -0.0681527704000473
Time: prepare 3.3862    bound 8.7029    transfer 0.7510    finalize 0.5580    func 13.8379    
Accumulated time: func 75.9837    prepare 20.4187    bound 43.6424    transfer 4.4397    finalize 4.2553    
all_split False
======================Cut inference begins======================
max lb tensor(0.01876880) min lb tensor(-0.06814204)
Number of Verified Splits: 8228 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.0009343624114990234 
BICCOS Cumulative time: 0.06993699073791504
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06814 (25), -0.06782 (24), -0.06711 (24), -0.06638 (25), -0.06607 (24), -0.06593 (25), -0.06586 (24), -0.06573 (25), -0.06569 (24), -0.06548 (25), -0.06538 (24), -0.06530 (25), -0.06527 (24), -0.06505 (24), -0.06501 (24), -0.06496 (24), -0.06496 (24), -0.06494 (24), -0.06455 (24), -0.06434 (25), 
Length of domains: 154144
Time: pickout 0.6023    decision 3.3254    set_bounds 4.0813    solve 13.8547    add 0.2122    
Accumulated time: pickout 3.7163    decision 21.8665    set_bounds 21.9386    solve 77.4990    add 1.5884    
Current (lb-rhs): -0.06814204156398773
352182 domains visited
Cumulative time: 127.93230247497559

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1769] [/input, 1943] [/input, 871] [/input-8, 1245] [/input, 1928] [/input, 964] [/input, 167] [/input, 167] [/input-8, 1769] [/input-8, 1769] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493061900138855, worst -0.06598149240016937
10 lb beta sum: 0.9493061900138855, worst -0.06594286859035492
Time: prepare 3.4300    bound 8.7051    transfer 0.7448    finalize 0.5753    func 13.8898    
Accumulated time: func 89.8735    prepare 23.8491    bound 52.3474    transfer 5.1845    finalize 4.8306    
all_split False
======================Cut inference begins======================
max lb tensor(0.01959015) min lb tensor(-0.06592081)
Number of Verified Splits: 8298 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.001008749008178711 
BICCOS Cumulative time: 0.07094573974609375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06814 (25), -0.06711 (24), -0.06638 (25), -0.06593 (25), -0.06592 (25), -0.06573 (25), -0.06548 (25), -0.06530 (25), -0.06496 (24), -0.06496 (24), -0.06494 (24), -0.06455 (24), -0.06434 (25), -0.06431 (24), -0.06418 (25), -0.06416 (25), -0.06397 (25), -0.06396 (25), -0.06386 (25), -0.06380 (25), 
Length of domains: 178614
Time: pickout 0.6350    decision 4.3966    set_bounds 4.3673    solve 13.9072    add 0.2093    
Accumulated time: pickout 4.3513    decision 26.2632    set_bounds 26.3059    solve 91.4062    add 1.7978    
Current (lb-rhs): -0.06814204156398773
409420 domains visited
Cumulative time: 151.68091344833374

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 948] [/input, 137] [/input-8, 1245] [/input, 885] [/input, 2936] [/input, 167] [/input, 1912] [/input, 964] [/input, 964] [/input, 1912] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493061900138855, worst -0.06311474740505219
10 lb beta sum: 0.9493061900138855, worst -0.06314884126186371
Time: prepare 3.4615    bound 8.7033    transfer 0.7569    finalize 0.5817    func 13.9321    
Accumulated time: func 103.8056    prepare 27.3111    bound 61.0508    transfer 5.9413    finalize 5.4123    
all_split False
======================Cut inference begins======================
max lb tensor(0.01958705) min lb tensor(-0.06308256)
Number of Verified Splits: 7517 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.0010230541229248047 
BICCOS Cumulative time: 0.07196879386901855
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06814 (25), -0.06711 (24), -0.06638 (25), -0.06592 (25), -0.06573 (25), -0.06548 (25), -0.06530 (25), -0.06496 (24), -0.06496 (24), -0.06455 (24), -0.06434 (25), -0.06431 (24), -0.06416 (25), -0.06397 (25), -0.06396 (25), -0.06380 (25), -0.06373 (25), -0.06346 (25), -0.06328 (25), -0.06316 (25), 
Length of domains: 203865
Time: pickout 0.6256    decision 4.1567    set_bounds 3.1513    solve 15.3912    add 0.2140    
Accumulated time: pickout 4.9769    decision 30.4199    set_bounds 29.4572    solve 106.7974    add 2.0118    
Current (lb-rhs): -0.06814204156398773
467439 domains visited
Cumulative time: 175.4499056339264

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1193] [/input-8, 1769] [/input-8, 1769] [/input-8, 1245] [/input-8, 1193] [/input, 948] [/input-8, 1193] [/input, 948] [/input, 871] [/input, 932] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493061900138855, worst -0.06527076661586761
10 lb beta sum: 0.9493061900138855, worst -0.06530128419399261
Time: prepare 3.4181    bound 8.7068    transfer 0.7706    finalize 2.1642    func 15.4844    
Accumulated time: func 119.2900    prepare 30.7296    bound 69.7575    transfer 6.7120    finalize 7.5765    
all_split False
======================Cut inference begins======================
max lb tensor(0.01891102) min lb tensor(-0.06522261)
Number of Verified Splits: 8224 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.0009198188781738281 
BICCOS Cumulative time: 0.07288861274719238
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06814 (25), -0.06638 (25), -0.06592 (25), -0.06573 (25), -0.06548 (25), -0.06530 (25), -0.06522 (25), -0.06455 (24), -0.06434 (25), -0.06416 (25), -0.06397 (25), -0.06396 (25), -0.06380 (25), -0.06373 (25), -0.06346 (25), -0.06316 (25), -0.06316 (25), -0.06311 (25), -0.06308 (25), -0.06308 (26), 
Length of domains: 228409
Time: pickout 0.6232    decision 3.3597    set_bounds 3.3217    solve 15.4980    add 0.2016    
Accumulated time: pickout 5.6000    decision 33.7796    set_bounds 32.7790    solve 122.2954    add 2.2134    
Current (lb-rhs): -0.06814204156398773
524751 domains visited
Cumulative time: 198.6218020915985

BaB round 22
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1390] [/input, 1943] [/input, 137] [/input, 1943] [/input, 2936] [/input, 1928] [/input, 1928] [/input, 137] [/input-8, 1245] [/input, 137] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493061900138855, worst -0.06040726602077484
10 lb beta sum: 0.9493061900138855, worst -0.06041322648525238
Time: prepare 3.4420    bound 8.7037    transfer 0.7755    finalize 0.5955    func 13.9438    
Accumulated time: func 133.2337    prepare 34.1720    bound 78.4613    transfer 7.4875    finalize 8.1720    
all_split False
======================Cut inference begins======================
max lb tensor(0.01955165) min lb tensor(-0.06037174)
Number of Verified Splits: 7994 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.0010304450988769531 
BICCOS Cumulative time: 0.07391905784606934
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06814 (25), -0.06638 (25), -0.06592 (25), -0.06573 (25), -0.06548 (25), -0.06530 (25), -0.06522 (25), -0.06455 (24), -0.06434 (25), -0.06416 (25), -0.06397 (25), -0.06396 (25), -0.06380 (25), -0.06373 (25), -0.06346 (25), -0.06316 (25), -0.06316 (25), -0.06311 (25), -0.06308 (25), -0.06308 (26), 
Length of domains: 253183
Time: pickout 0.6109    decision 3.3443    set_bounds 4.7621    solve 13.9598    add 0.2165    
Accumulated time: pickout 6.2109    decision 37.1239    set_bounds 37.5410    solve 136.2552    add 2.4299    
Current (lb-rhs): -0.06814204156398773
582293 domains visited
Time out!!!!!!!!
Result: unknown in 225.1262 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 163, vnnlib ID: 163 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.72241402, -24.34649849, -23.13090515, -23.33512688, -23.44177818,
         -22.72599030, -24.29437256, -23.28028107, -25.88602257, -23.95406342]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [815]; unstable size 815; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 815] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 815] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 815] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 288] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.40899801, -1.25211000, -1.71175003, -1.47050405, -0.92382908,
         -2.03374124, -0.67183733,  0.06250143, -1.59028816]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.72241402, -24.34649849, -23.13090515, -23.33512688, -23.44177818,
         -22.72599030, -24.29437256, -23.28028107, -25.88602257, -23.95406342]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.72241211, -24.34649277, -23.13090134, -23.33512497, -23.44177628,
          -22.72598839, -24.29437065, -23.28027916, -25.88602257, -23.95405960],
         [-23.72241211, -24.34649277, -23.13090134, -23.33512497, -23.44177628,
          -22.72598839, -24.29437065, -23.28027916, -25.88602257, -23.95405960]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.44213295,  1.06621361, -0.14937782,  0.05484581,  0.16149712,
          -0.55429077,  1.01409149,  0.67378044]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         ...,


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0740 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 164, vnnlib ID: 164 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.75207901, -26.19200516, -21.51674461, -21.03239250, -21.79173470,
         -19.86995125, -22.43434525, -21.71803665, -25.64961243, -25.42793655]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [834]; unstable size 834; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 834] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 834] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 834] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 272] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.31165791, 4.29574871, 0.41222405, 0.84093684, 0.84679615, 1.26739872,
         0.78366554, 3.96632433, 3.82774210]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0422 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 165, vnnlib ID: 165 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.22746849, -18.94099426, -15.30552959, -16.48309898, -16.57509995,
         -17.20245552, -18.03771782, -16.32104874, -17.03782463, -18.11646080]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [739]; unstable size 739; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 296, 1, 739] with unstable size 295 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 739] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 739] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [295]; unstable size 295; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 295] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 295] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.56572258,  0.72621620, -1.85110521, -0.71412635, -0.72852206,
         -0.07062489,  0.71391821, -0.96604085,  0.12609494]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.22746849, -18.94099426, -15.30552959, -16.48309898, -16.57509995,
         -17.20245552, -18.03771782, -16.32104874, -17.03782463, -18.11646080]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.22747231, -18.94099617, -15.30552959, -16.48309898, -16.57509995,
          -17.20245552, -18.03771782, -16.32104874, -17.03782654, -18.11646080],
         [-17.22747231, -18.94099617, -15.30552959, -16.48309898, -16.57509995,
          -17.20245552, -18.03771782, -16.32104874, -17.03782654, -18.11646080]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.90642357, -1.01551914,  0.16205025,  0.25405121,  0.88140678,
           0.71677780]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0681 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 166, vnnlib ID: 166 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.80888367, -17.65867996, -15.04872608, -14.86061478, -14.44957924,
         -15.80550385, -12.51641083, -16.93015480, -17.87636757, -16.77168083]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 300, 1, 527] with unstable size 299 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 32, 1, 527] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [299]; unstable size 299; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 32, 1, 299] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 299] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [31]; unstable size 31; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.97510839, 3.01688457, 0.83104944, 0.91215861, 0.13671112, 1.58025622,
         1.78175306, 2.71599054, 2.04945326]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0437 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 167, vnnlib ID: 167 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.61078835, -21.87978363, -18.13955688, -19.07592964, -19.79349327,
         -19.61386681, -20.54054451, -20.75547600, -18.17226410, -21.24487877]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [616]; unstable size 616; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 264, 1, 616] with unstable size 263 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 616] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 616] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [263]; unstable size 263; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 263] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 263] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.55854058, -0.58301997, -0.01108980,  0.84704185,  0.37303162,
          1.41230500,  1.42802870, -0.66239882,  1.97629499]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.61078835, -21.87978363, -18.13955688, -19.07592964, -19.79349327,
         -19.61386681, -20.54054451, -20.75547600, -18.17226410, -21.24487877]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-18.57685661, -22.56581497, -19.07938957, -19.82606697, -20.69490051,
          -20.37679100, -21.29722595, -21.48613167, -18.54705811, -21.81942558],
         [-18.57685661, -22.56581497, -19.07938957, -19.82606697, -20.69490051,
          -20.37679100, -21.29722595, -21.48613167, -18.54705811, -21.81942558]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.50253296,  1.24921036, -0.02979851]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0065 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0533 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 168, vnnlib ID: 168 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.20258904, -28.97587204, -21.97974777, -26.12151527, -22.80328751,
         -24.79159355, -26.35929489, -25.88696289, -29.32278824, -27.97410202]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 81, 1, 659] with unstable size 80 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 659] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [80]; unstable size 80; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 80] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 80] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.61785424, 5.97946167, 3.68134069, 0.37307760, 2.26610637, 3.72874069,
         3.38983059, 6.45273161, 5.22464991]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0527 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 169, vnnlib ID: 169 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.22389221, -25.61617279, -20.58332062, -23.34521294, -20.21918297,
         -23.68240929, -23.30189896, -22.01793289, -23.25316620, -24.99141312]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [521]; unstable size 521; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 194, 1, 521] with unstable size 193 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 521] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 521] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [193]; unstable size 193; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 193] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.86727238,  3.52099204, -0.37071085,  2.10049105,  2.35707164,
          2.03269410,  1.03111458,  1.52145672,  3.31146598]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.22389221, -25.61617279, -20.58332062, -23.34521294, -20.21918297,
         -23.68240929, -23.30189896, -22.01793289, -23.25316620, -24.99141312]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.60488319, -25.99536514, -20.81976700, -23.81729126, -20.91196251,
          -24.20612526, -23.65208626, -22.70511818, -23.60512924, -25.38808250]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.09219551]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0693 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 170, vnnlib ID: 170 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.96089172, -27.30179405, -18.06871414, -21.83080864, -18.06796074,
         -20.49729729, -22.39441490, -20.41414833, -26.60469437, -25.81503868]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [620]; unstable size 620; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 620] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 620] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 620] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 180] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.75783086,  7.53109550, -0.86600566,  3.01546717,  1.56956530,
          3.31403446,  1.72679365,  7.39529610,  6.39896202]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.96089172, -27.30179405, -18.06871414, -21.83080864, -18.06796074,
         -20.49729729, -22.39441490, -20.41414833, -26.60469437, -25.81503868]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.90667343, -27.24209404, -18.02988434, -21.79633713, -18.04055214,
          -20.46184349, -22.36747742, -20.38863564, -26.56404114, -25.75972939]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01066780]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0043 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0391 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 171, vnnlib ID: 171 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-28.76115799, -29.22484970, -26.75863647, -27.30132103, -27.79590416,
         -27.84509468, -25.49637985, -28.66069603, -31.11473465, -27.50533867]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [617]; unstable size 617; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 214, 1, 617] with unstable size 213 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 617] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 617] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [213]; unstable size 213; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 213] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 213] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.97265589, 2.28189516, 0.24724329, 0.96132362, 1.16451240, 1.43096912,
         1.79910529, 3.81141233, 0.72075939]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0280 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 172, vnnlib ID: 172 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.93356705, -26.18995857, -23.55833054, -25.85114861, -23.34313011,
         -26.63274956, -26.89310074, -26.08115768, -22.53829002, -26.71156120]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [854]; unstable size 854; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 854] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 854] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 854] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 206] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.99029946,  0.58493596,  2.75045848,  0.33922207,  3.42682934,
          3.47799635,  2.48519039, -0.45412576,  3.58810210]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.93356705, -26.18995857, -23.55833054, -25.85114861, -23.34313011,
         -26.63274956, -26.89310074, -26.08115768, -22.53829002, -26.71156120]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.96it/s]100%|██████████| 1/1 [00:00<00:00,  8.95it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.22096062, -26.21256256, -23.75860405, -25.94044685, -23.61741447,
          -26.77490807, -27.01570129, -26.42127228, -22.25056458, -26.82394600]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02960396]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1142 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.763309478759766
alpha/beta optimization time: 1.218747854232788
initial alpha-crown bounds: tensor([[ 3.05976844,  0.63149035,  2.80625153,  0.39776492,  3.48817921,
          3.54835129,  2.58086824, -0.39641106,  3.64704680]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.39641106128692627
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.61917924880981
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61913776397705
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6191062927246
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6190848350525
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.61906552314758
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.61904644966125
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.61902737617493
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.61900758743286
Verifying property 7 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.39641106]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.93356705, -26.18995857, -23.55833054, -25.85114861, -23.34313011,
        -26.63274956, -26.89310074, -26.08115768, -22.53829002, -26.71156120],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.39641106]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 854
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 201
Node /15 input 0: size torch.Size([100]) unstable 25
-----------------
# of unstable neurons: 1080
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011181831359863281
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3964102268218994
10 lb beta sum: 0.0, worst -0.3964127004146576
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0533    transfer 0.0001    finalize 0.0001    func 0.0538    
Accumulated time: func 0.0538    prepare 0.0002    bound 0.0533    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] 
split level 1: [/input-12, 92] 
split level 2: [/input-12, 24] 
split level 3: [/input-12, 0] 
split level 4: [/input-12, 20] 
split level 5: [/input-8, 819] 
split level 6: [/input-8, 817] 
split level 7: [/input-8, 818] 
split level 8: [/input-12, 83] 
split level 9: [/input-8, 443] 
split level 10: [/input-8, 1334] 
split level 11: [/input-8, 500] 
split level 12: [/input-8, 444] 
split level 13: [/input-8, 1196] 
split level 14: [/input-8, 1715] 
split level 15: [/input-12, 42] 
split level 16: [/input-8, 497] 
split level 17: [/input-12, 64] 
split level 18: [/input-8, 499] 
split level 19: [/input-8, 1650] 
split level 20: [/input-8, 1169] 
split level 21: [/input-8, 1515] 
split level 22: [/input-8, 442] 
split level 23: [/input-8, 1114] 
split level 24: [/input-8, 1612] 
split level 25: [/input-8, 1065] 
split level 26: [/input-8, 1660] 
split level 27: [/input, 2938] 
split level 28: [/input-8, 1399] 
split level 29: [/input-8, 1619] 
split level 30: [/input-8, 1324] 
split level 31: [/input-8, 157] 
split level 32: [/input-8, 498] 
split level 33: [/input-8, 1611] 
split level 34: [/input-8, 1661] 
split level 35: [/input-8, 748] 
split level 36: [/input-8, 1134] 
split level 37: [/input-8, 1613] 
split level 38: [/input, 873] 
split level 39: [/input, 2781] 
split level 40: [/input-8, 747] 
split level 41: [/input-8, 338] 
split level 42: [/input-12, 43] 
split level 43: [/input-8, 1516] 
split level 44: [/input-8, 1662] 
split level 45: [/input-12, 59] 
split level 46: [/input-8, 1646] 
split level 47: [/input-8, 1322] 
split level 48: [/input-8, 749] 
split level 49: [/input-8, 1653] 
split level 50: [/input-8, 1654] 
split level 51: [/input-8, 793] 
split level 52: [/input-8, 1618] 
split level 53: [/input-8, 1768] 
split level 54: [/input-8, 1174] 
split level 55: [/input-8, 1610] 
split level 56: [/input-8, 403] 
split level 57: [/input, 889] 
split level 58: [/input-8, 404] 
split level 59: [/input, 857] 
split level 60: [/input-8, 154] 
split level 61: [/input-8, 1071] 
split level 62: [/input-8, 1172] 
split level 63: [/input, 872] 
split level 64: [/input, 665] 
split level 65: [/input-8, 794] 
split level 66: [/input, 974] 
split level 67: [/input, 651] 
split level 68: [/input, 3549] 
split level 69: [/input, 3521] 
split level 70: [/input, 667] 
split level 71: [/input, 680] 
split level 72: [/input-8, 406] 
split level 73: [/input, 361] 
split level 74: [/input-8, 68] 
split level 75: [/input, 3221] 
split level 76: [/input-8, 1549] 
split level 77: [/input, 2766] 
split level 78: [/input-8, 105] 
split level 79: [/input, 946] 
split level 80: [/input, 2779] 
split level 81: [/input-8, 2022] 
split level 82: [/input, 332] 
split level 83: [/input, 434] 
split level 84: [/input-8, 21] 
split level 85: [/input-8, 69] 
split level 86: [/input-8, 1161] 
split level 87: [/input-8, 429] 
split level 88: [/input, 844] 
split level 89: [/input, 165] 
split level 90: [/input, 345] 
split level 91: [/input-8, 1231] 
split level 92: [/input-8, 1265] 
split level 93: [/input-8, 475] 
split level 94: [/input-8, 441] 
split level 95: [/input, 930] 
split level 96: [/input, 2747] 
split level 97: [/input, 2760] 
split level 98: [/input-8, 167] 
split level 99: [/input, 871] 
split level 100: [/input-8, 476] 
split level 101: [/input, 2663] 
split level 102: [/input, 3414] 
split level 103: [/input, 3288] 
split level 104: [/input, 2778] 
split level 105: [/input, 316] 
split level 106: [/input, 957] 
split level 107: [/input-8, 331] 
split level 108: [/input, 2877] 
split level 109: [/input-8, 1617] 
split level 110: [/input-8, 1341] 
split level 111: [/input-8, 1924] 
split level 112: [/input-8, 1342] 
split level 113: [/input, 990] 
split level 114: [/input, 855] 
split level 115: [/input, 3192] 
split level 116: [/input, 225] 
split level 117: [/input-8, 1609] 
split level 118: [/input, 3031] 
split level 119: [/input-8, 1614] 
split level 120: [/input, 331] 
split level 121: [/input-8, 410] 
split level 122: [/input, 3975] 
split level 123: [/input, 381] 
split level 124: [/input-8, 401] 
split level 125: [/input-8, 402] 
split level 126: [/input, 1511] 
split level 127: [/input, 3041] 
split level 128: [/input-8, 468] 
split level 129: [/input, 3418] 
split level 130: [/input, 1134] 
split level 131: [/input, 3043] 
split level 132: [/input, 1510] 
split level 133: [/input, 226] 
split level 134: [/input, 962] 
split level 135: [/input-8, 1375] 
split level 136: [/input, 3459] 
split level 137: [/input, 683] 
split level 138: [/input-8, 488] 
split level 139: [/input, 2136] 
split level 140: [/input, 3030] 
split level 141: [/input, 843] 
split level 142: [/input-8, 1783] 
split level 143: [/input-8, 973] 
split level 144: [/input, 403] 
split level 145: [/input, 840] 
split level 146: [/input, 1509] 
split level 147: [/input, 2664] 
split level 148: [/input, 2424] 
split level 149: [/input, 841] 
split level 150: [/input, 1719] 
split level 151: [/input-8, 953] 
split level 152: [/input, 3042] 
split level 153: [/input-8, 1520] 
split level 154: [/input-8, 70] 
split level 155: [/input, 317] 
split level 156: [/input, 899] 
split level 157: [/input, 3548] 
split level 158: [/input, 2393] 
split level 159: [/input, 3246] 
split level 160: [/input, 1216] 
split level 161: [/input, 376] 
split level 162: [/input, 224] 
split level 163: [/input-8, 1925] 
split level 164: [/input, 3457] 
split level 165: [/input, 1492] 
split level 166: [/input, 2391] 
split level 167: [/input, 1006] 
split level 168: [/input, 2409] 
split level 169: [/input, 300] 
split level 170: [/input, 3443] 
split level 171: [/input, 3111] 
split level 172: [/input, 122] 
split level 173: [/input, 1021] 
split level 174: [/input, 3099] 
split level 175: [/input-8, 990] 
split level 176: [/input, 1017] 
split level 177: [/input, 2392] 
split level 178: [/input, 979] 
split level 179: [/input, 2137] 
split level 180: [/input, 1512] 
split level 181: [/input, 1514] 
split level 182: [/input, 975] 
split level 183: [/input, 3114] 
split level 184: [/input-8, 1547] 
split level 185: [/input, 2135] 
split level 186: [/input, 329] 
split level 187: [/input, 568] 
split level 188: [/input, 357] 
split level 189: [/input, 218] 
split level 190: [/input, 341] 
split level 191: [/input, 3419] 
split level 192: [/input, 2152] 
split level 193: [/input, 333] 
split level 194: [/input, 3441] 
split level 195: [/input, 1099] 
split level 196: [/input, 1513] 
split level 197: [/input, 3113] 
split level 198: [/input-8, 1347] 
split level 199: [/input, 1519] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3963732123374939
10 lb beta sum: 0.0, worst -0.3963693380355835
Time: prepare 0.0116    bound 0.1032    transfer 0.0024    finalize 0.0032    func 0.1229    
Accumulated time: func 0.1767    prepare 0.0216    bound 0.1565    transfer 0.0025    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.07017183) min lb tensor(-0.39636719)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010528564453125 
BICCOS Cumulative time: 0.010528564453125
Preprocessing time: 0.01007533073425293 Inference time: 0.00015807151794433594 Add cuts time: 7.224082946777344e-05 Cut analysis time: 0.00022292137145996094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.38675 (1), -0.38674 (1), -0.38656 (1), -0.38642 (1), -0.38626 (1), -0.38588 (1), -0.38583 (1), -0.38573 (1), -0.38354 (1), -0.38254 (1), -0.38204 (1), -0.37946 (1), -0.37930 (1), -0.37873 (1), -0.37843 (1), -0.37808 (1), -0.37797 (1), -0.37730 (1), -0.37708 (1), -0.37684 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5183    set_bounds 0.0090    solve 0.1230    add 0.0669    
Accumulated time: pickout 0.0003    decision 0.5183    set_bounds 0.0090    solve 0.1230    add 0.0669    
Current (lb-rhs): -0.38675373792648315
50 domains visited
Cumulative time: 0.7920999526977539

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] 
split level 1: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 92] [/input-12, 24] [/input-12, 92] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 24] [/input-12, 0] [/input-12, 0] [/input-12, 0] 
split level 3: [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3726046085357666
10 lb beta sum: 0.580084502696991, worst -0.3685385286808014
Time: prepare 0.0075    bound 0.1200    transfer 0.0012    finalize 0.0026    func 0.1339    
Accumulated time: func 0.3107    prepare 0.0294    bound 0.2765    transfer 0.0036    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.14343381) min lb tensor(-0.36848295)
Number of Verified Splits: 16 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.013125896453857422 
BICCOS Cumulative time: 0.023654460906982422
Preprocessing time: 0.011973857879638672 Inference time: 0.0006780624389648438 Add cuts time: 0.00024056434631347656 Cut analysis time: 0.0002334117889404297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23975 (2), -0.23949 (2), -0.23885 (2), -0.23773 (2), -0.23733 (2), -0.23706 (2), -0.23682 (2), -0.23628 (2), -0.23563 (2), -0.23549 (2), -0.23546 (2), -0.23546 (2), -0.23510 (2), -0.23344 (2), -0.23259 (2), -0.23241 (2), -0.23231 (2), -0.23210 (2), -0.23201 (2), -0.22929 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0210    set_bounds 0.0125    solve 0.1340    add 0.0843    
Accumulated time: pickout 0.0013    decision 0.5393    set_bounds 0.0216    solve 0.2571    add 0.1512    
Current (lb-rhs): -0.2397526502609253
100 domains visited
Cumulative time: 1.0588839054107666

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 24] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 24] [/input-12, 0] [/input-12, 24] [/input-12, 92] [/input-12, 0] [/input-12, 0] [/input-12, 92] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 0] [/input-8, 819] [/input-12, 0] [/input-12, 0] [/input-8, 819] [/input-8, 819] [/input-12, 0] [/input-8, 819] [/input-8, 819] [/input-12, 0] 
split level 3: [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23940813541412354
10 lb beta sum: 0.7652418613433838, worst -0.23561027646064758
Time: prepare 0.0075    bound 0.1193    transfer 0.0033    finalize 0.0025    func 0.1351    
Accumulated time: func 0.4458    prepare 0.0371    bound 0.3958    transfer 0.0070    finalize 0.0084    
all_split False
======================Cut inference begins======================
max lb tensor(0.48864335) min lb tensor(-0.23514140)
Number of Verified Splits: 51 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.015809059143066406 
BICCOS Cumulative time: 0.03946352005004883
Preprocessing time: 0.011904716491699219 Inference time: 0.0021317005157470703 Add cuts time: 0.0014874935150146484 Cut analysis time: 0.00028514862060546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12185 (3), -0.11956 (3), -0.11955 (3), -0.11928 (3), -0.11908 (3), -0.11856 (3), -0.11796 (3), -0.11623 (3), -0.11411 (3), -0.11286 (3), -0.11168 (3), -0.11166 (3), -0.10858 (3), -0.10600 (3), -0.10471 (3), -0.10434 (3), -0.10281 (3), -0.10101 (3), -0.10089 (3), -0.09646 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0192    set_bounds 0.0145    solve 0.1352    add 0.0835    
Accumulated time: pickout 0.0022    decision 0.5584    set_bounds 0.0360    solve 0.3923    add 0.2347    
Current (lb-rhs): -0.12185263633728027
150 domains visited
Cumulative time: 1.3283255100250244

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 0] [/input-12, 0] [/input-12, 92] [/input-12, 92] [/input-8, 818] [/input-12, 0] [/input-12, 0] [/input-12, 24] [/input-12, 24] [/input-8, 818] 
split level 2: [/input-8, 819] [/input-8, 819] [/input-8, 818] [/input-8, 818] [/input-8, 1322] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 500] 
split level 3: [/input-8, 818] [/input-8, 818] [/input-8, 1516] [/input-8, 500] [/input-8, 21] [/input-8, 500] [/input-8, 500] [/input-8, 1058] [/input-8, 1058] [/input-8, 157] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12624257802963257
10 lb beta sum: 0.7355108261108398, worst -0.12132582813501358
Time: prepare 0.0078    bound 0.1200    transfer 0.0012    finalize 0.0028    func 0.1343    
Accumulated time: func 0.5801    prepare 0.0451    bound 0.5158    transfer 0.0081    finalize 0.0112    
all_split False
======================Cut inference begins======================
max lb tensor(0.50553226) min lb tensor(-0.11839946)
Number of Verified Splits: 88 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 4
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.017923831939697266 
BICCOS Cumulative time: 0.057387351989746094
Preprocessing time: 0.011611461639404297 Inference time: 0.004106760025024414 Add cuts time: 0.0017504692077636719 Cut analysis time: 0.0004551410675048828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04699 (4), -0.04657 (4), -0.04620 (4), -0.04620 (4), -0.04556 (4), -0.04547 (4), -0.04474 (4), -0.04468 (4), -0.04451 (4), -0.04412 (4), -0.04400 (4), -0.04397 (4), -0.04390 (4), -0.04381 (4), -0.04307 (4), -0.04196 (4), -0.04162 (4), -0.03982 (4), -0.03943 (4), -0.03941 (4), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0195    set_bounds 0.0136    solve 0.1344    add 0.2160    
Accumulated time: pickout 0.0032    decision 0.5779    set_bounds 0.0496    solve 0.5267    add 0.4507    
Current (lb-rhs): -0.04698780179023743
200 domains visited
Cumulative time: 1.731022596359253

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-8, 819] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-12, 0] 
split level 2: [/input-8, 818] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 818] 
split level 3: [/input-8, 500] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 500] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05164909362792969
10 lb beta sum: 0.6670933365821838, worst -0.10890533030033112
Time: prepare 0.0083    bound 0.1348    transfer 0.0017    finalize 0.0026    func 0.1501    
Accumulated time: func 0.7302    prepare 0.0537    bound 0.6506    transfer 0.0099    finalize 0.0138    
all_split False
======================Cut inference begins======================
max lb tensor(0.04273111) min lb tensor(-0.04520303)
Number of Verified Splits: 139 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.02214646339416504 
BICCOS Cumulative time: 0.07953381538391113
Preprocessing time: 0.011620521545410156 Inference time: 0.007172822952270508 Add cuts time: 0.0024335384368896484 Cut analysis time: 0.0009195804595947266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00682 (5), -0.00681 (5), -0.00653 (5), -0.00651 (5), -0.00651 (5), -0.00634 (5), -0.00632 (5), -0.00591 (5), -0.00560 (5), -0.00542 (5), -0.00539 (5), -0.00530 (5), -0.00487 (5), -0.00487 (5), -0.00470 (5), -0.00467 (5), -0.00448 (5), -0.00437 (5), -0.00412 (5), -0.00409 (5), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0196    set_bounds 0.0155    solve 0.1501    add 0.1000    
Accumulated time: pickout 0.0043    decision 0.5976    set_bounds 0.0651    solve 0.6768    add 0.5507    
Current (lb-rhs): -0.006822905037552118
250 domains visited
Cumulative time: 2.0398013591766357

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([64]), tensor([-1.]), tensor([0]), tensor([2.82952445e+16]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [-1.0], [0], [0.02334587462246418], [3]), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.58732407e-43, 1.37508854e-01, 7.51479715e-02, 2.73033250e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [-1.0], [0], [0.02334587462246418], [3]), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.58732407e-43, 1.37508854e-01, 7.51479715e-02, 5.65230399e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [1.0], [0], [2.829555378369331e+16], [3]), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.58732407e-43, 1.37508854e-01, 7.51479715e-02, 2.76325513e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [1.0], [0], [2.829555378369331e+16], [3]), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.58732407e-43, 1.37508854e-01, 7.51479715e-02, 5.60157448e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.58732407e-43, 1.37508854e-01, 3.57287973e-02, 5.23226103e-04]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.58732407e-43, 1.37508854e-01, 3.57287973e-02, 4.99587804e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [-1.0], [0], [2.4081189898326104e-36], [3]), '/input-12': (tensor([64, 36, 24, 92]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.58732407e-43, 1.16705731e-01, 1.03368148e-01, 2.65611876e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [-1.0], [0], [2.4081189898326104e-36], [3]), '/input-12': (tensor([64, 36, 24, 92]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.58732407e-43, 1.16705731e-01, 1.03368148e-01, 4.78358418e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [1.0], [0], [5.558181692677522e-11], [3]), '/input-12': (tensor([64, 36, 24, 92]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.58732407e-43, 1.16705731e-01, 1.03368148e-01, 2.77579594e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [1.0], [0], [5.558181692677522e-11], [3]), '/input-12': (tensor([64, 36, 24, 92]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.58732407e-43, 1.16705731e-01, 1.03368148e-01, 4.83037382e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([64, 36, 24]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([3.58732407e-43, 1.16705731e-01, 3.52583379e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3935966491699219
10 lb beta sum: 0.8473874926567078, worst -0.38535773754119873
Time: prepare 0.0005    bound 0.1296    transfer 0.0002    finalize 0.0002    func 0.1307    
Accumulated time: func 0.8609    prepare 0.0543    bound 0.7802    transfer 0.0101    finalize 0.0140    
After pruning, left:  7

Back to Regular BaB

BaB round 1
batch: 7
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 0] [/input-12, 0] [/input-12, 92] 
split level 1: [/input-12, 92] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-12, 0] 
split level 2: [/input-12, 24] [/input-8, 1334] [/input-8, 1334] [/input-8, 818] [/input-8, 500] [/input-8, 500] [/input-8, 819] 
split level 3: [/input-12, 0] [/input, 2938] [/input, 2938] [/input-8, 1334] [/input-8, 1334] [/input-8, 1334] [/input-8, 818] 
split level 4: [/input-8, 818] [/input-8, 1058] [/input-8, 1058] [/input, 2938] [/input-8, 1516] [/input-8, 1516] [/input-8, 1334] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8528068661689758, worst -0.19487681984901428
10 lb beta sum: 0.8533709645271301, worst -0.19418102502822876
Time: prepare 0.0113    bound 0.1321    transfer 0.0016    finalize 0.0016    func 0.1480    
Accumulated time: func 1.0089    prepare 0.0658    bound 0.9123    transfer 0.0116    finalize 0.0156    
all_split False
======================Cut inference begins======================
max lb tensor(0.27959824) min lb tensor(-0.19391944)
Number of Verified Splits: 188 of 224
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.00038504600524902344 
BICCOS Cumulative time: 0.07991886138916016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19392 (5), -0.19245 (5), -0.17419 (5), -0.17049 (5), -0.15550 (5), -0.15311 (5), -0.14802 (5), -0.14683 (5), -0.13814 (5), -0.13502 (5), -0.11640 (5), -0.11215 (5), -0.06620 (5), -0.06600 (5), -0.05980 (5), -0.05739 (5), -0.05457 (5), -0.05438 (5), -0.04365 (5), -0.04237 (5), 
Length of domains: 36
Time: pickout 0.0006    decision 0.0157    set_bounds 0.0218    solve 0.1481    add 0.0010    
Accumulated time: pickout 0.0049    decision 0.6133    set_bounds 0.0869    solve 0.8249    add 0.5518    
Current (lb-rhs): -0.19391943514347076
286 domains visited
Cumulative time: 2.3843119144439697

BaB round 2
batch: 36
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 819] [/input-8, 500] [/input-8, 500] [/input-8, 817] [/input-8, 817] [/input-8, 819] [/input-8, 819] [/input-8, 817] [/input-8, 817] [/input-8, 819] 
split level 1: [/input-8, 500] [/input, 2938] [/input-8, 157] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] 
split level 2: [/input-8, 157] [/input-8, 1058] [/input-8, 1662] [/input-8, 1516] [/input-8, 1516] [/input, 2938] [/input, 2938] [/input-8, 1516] [/input-8, 1516] [/input-8, 157] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9212216138839722, worst -0.17997780442237854
10 lb beta sum: 0.9232966303825378, worst -0.1796806901693344
Time: prepare 0.0133    bound 0.1392    transfer 0.0020    finalize 0.0018    func 0.1582    
Accumulated time: func 1.1671    prepare 0.0793    bound 1.0515    transfer 0.0137    finalize 0.0174    
all_split False
======================Cut inference begins======================
max lb tensor(0.03675240) min lb tensor(-0.17953758)
Number of Verified Splits: 98 of 288
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0003654956817626953 
BICCOS Cumulative time: 0.08028435707092285
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17954 (8), -0.17826 (8), -0.16862 (8), -0.16623 (8), -0.16403 (8), -0.16307 (8), -0.15937 (8), -0.15536 (8), -0.15380 (8), -0.15130 (8), -0.14883 (8), -0.14847 (8), -0.14610 (8), -0.14610 (8), -0.14394 (8), -0.13967 (8), -0.13817 (8), -0.13787 (8), -0.13724 (8), -0.13640 (8), 
Length of domains: 190
Time: pickout 0.0014    decision 0.0161    set_bounds 0.0163    solve 0.1583    add 0.0018    
Accumulated time: pickout 0.0063    decision 0.6294    set_bounds 0.1031    solve 0.9833    add 0.5535    
Current (lb-rhs): -0.1795375794172287
476 domains visited
Cumulative time: 2.5791428089141846

BaB round 3
batch: 190
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2938] [/input-8, 1399] [/input-8, 1065] [/input-12, 20] [/input-8, 817] [/input-8, 817] [/input-8, 1065] [/input-8, 1334] [/input-8, 1334] [/input-12, 20] 
cut re-enabled after branching node selection
0 lb beta sum: 0.930554986000061, worst -0.17953777313232422
10 lb beta sum: 0.9305852651596069, worst -0.17940621078014374
Time: prepare 0.0175    bound 0.1406    transfer 0.0021    finalize 0.0024    func 0.1652    
Accumulated time: func 1.3322    prepare 0.0970    bound 1.1921    transfer 0.0158    finalize 0.0199    
all_split False
======================Cut inference begins======================
max lb tensor(0.27101600) min lb tensor(-0.17933314)
Number of Verified Splits: 111 of 380
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.00037789344787597656 
BICCOS Cumulative time: 0.08066225051879883
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17933 (9), -0.17808 (9), -0.16794 (9), -0.16554 (9), -0.16308 (9), -0.16206 (9), -0.15522 (9), -0.15268 (9), -0.15110 (9), -0.14997 (9), -0.14433 (9), -0.14387 (9), -0.14346 (9), -0.14140 (9), -0.13938 (9), -0.13544 (9), -0.13376 (9), -0.13366 (9), -0.13356 (9), -0.13243 (9), 
Length of domains: 269
Time: pickout 0.0027    decision 0.0211    set_bounds 0.0161    solve 0.1654    add 0.0020    
Accumulated time: pickout 0.0091    decision 0.6504    set_bounds 0.1192    solve 1.1486    add 0.5555    
Current (lb-rhs): -0.1793331354856491
745 domains visited
Cumulative time: 2.7876839637756348

BaB round 4
batch: 269
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1661] [/input-12, 20] [/input-8, 1334] [/input-8, 1334] [/input-8, 1715] [/input-8, 1661] [/input-8, 1661] [/input-12, 20] [/input-8, 1661] [/input-12, 20] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9372280240058899, worst -0.17536838352680206
10 lb beta sum: 0.9372280240058899, worst -0.17532555758953094
Time: prepare 0.0249    bound 0.1398    transfer 0.0028    finalize 0.0032    func 0.1742    
Accumulated time: func 1.5064    prepare 0.1221    bound 1.3319    transfer 0.0186    finalize 0.0231    
all_split False
======================Cut inference begins======================
max lb tensor(0.26963902) min lb tensor(-0.17530276)
Number of Verified Splits: 124 of 538
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0003521442413330078 
BICCOS Cumulative time: 0.08101439476013184
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17530 (10), -0.17443 (10), -0.16390 (10), -0.16188 (10), -0.15869 (10), -0.15791 (10), -0.15507 (10), -0.15100 (10), -0.14830 (10), -0.14793 (10), -0.14603 (10), -0.14402 (10), -0.14367 (10), -0.14252 (10), -0.14125 (10), -0.13900 (10), -0.13844 (10), -0.13661 (10), -0.13263 (10), -0.13157 (10), 
Length of domains: 414
Time: pickout 0.0036    decision 0.0254    set_bounds 0.0223    solve 0.1744    add 0.0025    
Accumulated time: pickout 0.0127    decision 0.6758    set_bounds 0.1415    solve 1.3230    add 0.5580    
Current (lb-rhs): -0.17530275881290436
1159 domains visited
Cumulative time: 3.017035722732544

BaB round 5
batch: 414
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1065] [/input-12, 20] [/input-8, 1174] [/input-8, 157] [/input-8, 1065] [/input-12, 20] [/input-12, 20] [/input-8, 1174] [/input-8, 157] [/input-8, 1516] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9389920830726624, worst -0.17166651785373688
10 lb beta sum: 0.9389920830726624, worst -0.17160385847091675
Time: prepare 0.0382    bound 0.1405    transfer 0.0044    finalize 0.0046    func 0.1931    
Accumulated time: func 1.6995    prepare 0.1605    bound 1.4724    transfer 0.0230    finalize 0.0277    
all_split False
======================Cut inference begins======================
max lb tensor(0.27529371) min lb tensor(-0.17156392)
Number of Verified Splits: 162 of 828
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0004470348358154297 
BICCOS Cumulative time: 0.08146142959594727
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17156 (11), -0.17069 (11), -0.16002 (11), -0.15801 (11), -0.15720 (11), -0.15632 (11), -0.15465 (11), -0.15392 (11), -0.15115 (11), -0.14808 (11), -0.14708 (11), -0.14606 (11), -0.14420 (11), -0.14345 (11), -0.14206 (11), -0.14035 (11), -0.13994 (11), -0.13959 (11), -0.13956 (11), -0.13788 (11), 
Length of domains: 666
Time: pickout 0.0073    decision 0.0344    set_bounds 0.0343    solve 0.1934    add 0.0072    
Accumulated time: pickout 0.0200    decision 0.7102    set_bounds 0.1758    solve 1.5163    add 0.5652    
Current (lb-rhs): -0.17156392335891724
1825 domains visited
Cumulative time: 3.2970666885375977

BaB round 6
batch: 666
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3521] [/input-8, 1399] [/input-8, 1516] [/input, 3521] [/input-8, 1399] [/input-8, 1516] [/input-8, 819] [/input-8, 157] [/input-8, 819] [/input-8, 748] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9395779967308044, worst -0.16789133846759796
10 lb beta sum: 0.9395779967308044, worst -0.16783525049686432
Time: prepare 0.0651    bound 0.1642    transfer 0.0039    finalize 0.0081    func 0.2500    
Accumulated time: func 1.9495    prepare 0.2259    bound 1.6366    transfer 0.0269    finalize 0.0359    
all_split False
======================Cut inference begins======================
max lb tensor(0.25056928) min lb tensor(-0.16782741)
Number of Verified Splits: 250 of 1332
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.00041747093200683594 
BICCOS Cumulative time: 0.0818789005279541
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16783 (12), -0.16742 (12), -0.16608 (12), -0.16242 (12), -0.15588 (12), -0.15465 (12), -0.15454 (12), -0.15342 (12), -0.15246 (12), -0.15235 (12), -0.15105 (12), -0.15056 (12), -0.15038 (12), -0.14905 (12), -0.14813 (12), -0.14802 (12), -0.14779 (12), -0.14405 (12), -0.14395 (12), -0.14326 (12), 
Length of domains: 1082
Time: pickout 0.0111    decision 0.0527    set_bounds 0.0564    solve 0.2515    add 0.0084    
Accumulated time: pickout 0.0311    decision 0.7629    set_bounds 0.2322    solve 1.7678    add 0.5735    
Current (lb-rhs): -0.16782741248607635
2907 domains visited
Cumulative time: 3.6798412799835205

BaB round 7
batch: 1082
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1715] [/input-8, 748] [/input-8, 1654] [/input-8, 1715] [/input-8, 748] [/input-8, 1654] [/input-8, 1662] [/input-8, 1715] [/input-8, 1399] [/input-8, 1516] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9392774105072021, worst -0.16520677506923676
10 lb beta sum: 0.9392774105072021, worst -0.1652045100927353
Time: prepare 0.1039    bound 0.1859    transfer 0.0089    finalize 0.2354    func 0.5516    
Accumulated time: func 2.5012    prepare 0.3300    bound 1.8225    transfer 0.0358    finalize 0.2713    
all_split False
======================Cut inference begins======================
max lb tensor(0.28052032) min lb tensor(-0.16519895)
Number of Verified Splits: 408 of 2164
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0005939006805419922 
BICCOS Cumulative time: 0.0824728012084961
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16520 (13), -0.16386 (13), -0.16368 (13), -0.16264 (13), -0.16235 (13), -0.16130 (13), -0.16067 (13), -0.15279 (13), -0.15244 (13), -0.15110 (13), -0.15049 (13), -0.15023 (13), -0.15012 (13), -0.15011 (13), -0.14916 (13), -0.14882 (13), -0.14871 (13), -0.14860 (13), -0.14816 (13), -0.14767 (13), 
Length of domains: 1756
Time: pickout 0.0141    decision 0.0705    set_bounds 0.0885    solve 0.5530    add 0.0125    
Accumulated time: pickout 0.0452    decision 0.8333    set_bounds 0.3207    solve 2.3208    add 0.5860    
Current (lb-rhs): -0.16519895195960999
4663 domains visited
Cumulative time: 4.430678367614746

BaB round 8
batch: 1756
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 157] [/input-8, 817] [/input-8, 1662] [/input-8, 157] [/input-8, 817] [/input-8, 817] [/input-8, 157] [/input-8, 817] [/input-8, 817] [/input-8, 157] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9392741322517395, worst -0.16221804916858673
10 lb beta sum: 0.9392741322517395, worst -0.16221067309379578
Time: prepare 0.1715    bound 0.2618    transfer 0.0285    finalize 0.0222    func 0.5073    
Accumulated time: func 3.0085    prepare 0.5018    bound 2.0844    transfer 0.0643    finalize 0.2935    
all_split False
======================Cut inference begins======================
max lb tensor(0.27753925) min lb tensor(-0.16220362)
Number of Verified Splits: 539 of 3512
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.00043582916259765625 
BICCOS Cumulative time: 0.08290863037109375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16220 (14), -0.16154 (14), -0.16086 (14), -0.16035 (14), -0.16020 (14), -0.15961 (14), -0.15901 (14), -0.15828 (14), -0.15649 (14), -0.15627 (14), -0.15518 (14), -0.15494 (14), -0.15269 (14), -0.15136 (14), -0.15021 (14), -0.14898 (14), -0.14887 (14), -0.14819 (14), -0.14765 (14), -0.14764 (14), 
Length of domains: 2973
Time: pickout 0.0391    decision 0.1169    set_bounds 0.1474    solve 0.5085    add 0.0190    
Accumulated time: pickout 0.0843    decision 0.9503    set_bounds 0.4681    solve 2.8293    add 0.6050    
Current (lb-rhs): -0.1622036248445511
7636 domains visited
Cumulative time: 5.269047260284424

BaB round 9
batch: 2973
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 748] [/input-12, 20] [/input-8, 498] [/input-8, 1662] [/input-8, 748] [/input-12, 20] [/input-8, 498] [/input-8, 1662] [/input-12, 20] [/input-8, 748] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9390432238578796, worst -0.15998798608779907
10 lb beta sum: 0.9390432238578796, worst -0.15999829769134521
Time: prepare 0.2990    bound 0.3907    transfer 0.0535    finalize 0.0472    func 0.8304    
Accumulated time: func 3.8389    prepare 0.8010    bound 2.4751    transfer 0.1178    finalize 0.3407    
all_split False
======================Cut inference begins======================
max lb tensor(0.28110003) min lb tensor(-0.15998799)
Number of Verified Splits: 1103 of 5946
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0006864070892333984 
BICCOS Cumulative time: 0.08359503746032715
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15999 (15), -0.15868 (15), -0.15865 (15), -0.15743 (15), -0.15735 (15), -0.15733 (15), -0.15671 (15), -0.15609 (15), -0.15600 (15), -0.15537 (15), -0.15424 (15), -0.15289 (15), -0.15248 (15), -0.15237 (15), -0.15168 (15), -0.15133 (15), -0.15116 (15), -0.15104 (15), -0.15102 (15), -0.15037 (15), 
Length of domains: 4843
Time: pickout 0.0409    decision 0.1746    set_bounds 0.4273    solve 0.8327    add 0.0394    
Accumulated time: pickout 0.1252    decision 1.1249    set_bounds 0.8954    solve 3.6620    add 0.6444    
Current (lb-rhs): -0.15998798608779907
12479 domains visited
Cumulative time: 6.803231477737427

BaB round 10
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 889] [/input-8, 748] [/input-8, 748] [/input, 889] [/input-8, 748] [/input-12, 20] [/input-8, 498] [/input-8, 748] [/input-12, 20] [/input-8, 498] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9393172860145569, worst -0.30445045232772827
10 lb beta sum: 0.9393172860145569, worst -0.1568826138973236
Time: prepare 0.3984    bound 0.5021    transfer 0.0694    finalize 0.0590    func 1.0828    
Accumulated time: func 4.9216    prepare 1.2001    bound 2.9772    transfer 0.1872    finalize 0.3997    
all_split False
======================Cut inference begins======================
max lb tensor(0.28153297) min lb tensor(-0.15685244)
Number of Verified Splits: 1762 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0004949569702148438 
BICCOS Cumulative time: 0.08408999443054199
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15743 (15), -0.15685 (16), -0.15671 (15), -0.15593 (16), -0.15552 (16), -0.15537 (15), -0.15464 (16), -0.15457 (16), -0.15328 (16), -0.15295 (16), -0.15263 (16), -0.15168 (15), -0.15138 (16), -0.15130 (16), -0.15004 (16), -0.14962 (16), -0.14935 (16), -0.14874 (16), -0.14830 (16), -0.14828 (16), 
Length of domains: 7177
Time: pickout 0.0664    decision 0.2358    set_bounds 0.5551    solve 1.0846    add 0.0365    
Accumulated time: pickout 0.1916    decision 1.3607    set_bounds 1.4505    solve 4.7466    add 0.6809    
Current (lb-rhs): -0.15743345022201538
18909 domains visited
current_vram/total_varm: 26.4GB/99.9GB, batch_size increase to 8192
Cumulative time: 8.810691833496094

BaB round 11
batch: 7177
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 748] [/input-8, 1516] [/input-8, 747] [/input, 977] [/input-8, 1662] [/input-8, 498] [/input-8, 1516] [/input-12, 20] [/input-8, 498] [/input-8, 748] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9400667548179626, worst -0.28580325841903687
10 lb beta sum: 0.9400667548179626, worst -0.15431943535804749
Time: prepare 0.7107    bound 0.8256    transfer 0.1208    finalize 0.3279    func 2.0787    
Accumulated time: func 7.0003    prepare 1.9110    bound 3.8029    transfer 0.3080    finalize 0.7276    
all_split False
======================Cut inference begins======================
max lb tensor(0.28429079) min lb tensor(-0.15429099)
Number of Verified Splits: 2305 of 14354
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0005815029144287109 
BICCOS Cumulative time: 0.0846714973449707
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15429 (16), -0.15413 (17), -0.15396 (16), -0.15277 (17), -0.15260 (16), -0.15259 (17), -0.15141 (17), -0.15130 (17), -0.15123 (17), -0.15020 (17), -0.15012 (17), -0.15007 (16), -0.15004 (17), -0.14996 (17), -0.14968 (17), -0.14882 (16), -0.14876 (17), -0.14866 (17), -0.14832 (17), -0.14784 (17), 
Length of domains: 12049
Time: pickout 0.1404    decision 0.5951    set_bounds 0.6165    solve 2.0822    add 0.0647    
Accumulated time: pickout 0.3320    decision 1.9558    set_bounds 2.0669    solve 6.8288    add 0.7456    
Current (lb-rhs): -0.15429098904132843
30958 domains visited
Cumulative time: 12.349172353744507

BaB round 12
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1322] [/input-12, 20] [/input-8, 1654] [/input, 434] [/input-8, 747] [/input-12, 20] [/input, 2938] [/input-8, 1322] [/input-12, 20] [/input, 977] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9407923221588135, worst -0.15158842504024506
10 lb beta sum: 0.9407923221588135, worst -0.15157529711723328
Time: prepare 0.8179    bound 0.9349    transfer 0.1671    finalize 0.3638    func 2.3925    
Accumulated time: func 9.3928    prepare 2.7292    bound 4.7377    transfer 0.4751    finalize 1.0914    
all_split False
======================Cut inference begins======================
max lb tensor(0.28379357) min lb tensor(-0.15156212)
Number of Verified Splits: 2121 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0005779266357421875 
BICCOS Cumulative time: 0.08524942398071289
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15413 (17), -0.15277 (17), -0.15259 (17), -0.15156 (17), -0.15130 (17), -0.15123 (17), -0.15028 (17), -0.15020 (17), -0.14996 (17), -0.14920 (17), -0.14892 (17), -0.14875 (18), -0.14866 (17), -0.14842 (18), -0.14829 (18), -0.14786 (17), -0.14784 (17), -0.14739 (18), -0.14731 (17), -0.14711 (17), 
Length of domains: 18120
Time: pickout 0.1306    decision 0.4586    set_bounds 0.9202    solve 2.3961    add 0.0625    
Accumulated time: pickout 0.4626    decision 2.4144    set_bounds 2.9871    solve 9.2249    add 0.8081    
Current (lb-rhs): -0.15413078665733337
45221 domains visited
current_vram/total_varm: 26.4GB/99.9GB, batch_size increase to 16384
Cumulative time: 16.365877866744995

BaB round 13
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 20] [/input-8, 747] [/input, 889] [/input-8, 747] [/input-8, 1516] [/input, 889] [/input-8, 1174] [/input-8, 1516] [/input-8, 747] [/input-8, 748] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9402432441711426, worst -0.1532067060470581
10 lb beta sum: 0.9402432441711426, worst -0.15320903062820435
Time: prepare 1.6658    bound 1.7913    transfer 0.3634    finalize 0.2393    func 4.6370    
Accumulated time: func 14.0298    prepare 4.3954    bound 6.5291    transfer 0.8385    finalize 1.3307    
all_split False
======================Cut inference begins======================
max lb tensor(0.28421593) min lb tensor(-0.15319830)
Number of Verified Splits: 4154 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0007309913635253906 
BICCOS Cumulative time: 0.08598041534423828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15320 (18), -0.15184 (18), -0.15075 (18), -0.14947 (18), -0.14939 (18), -0.14875 (18), -0.14852 (18), -0.14846 (18), -0.14813 (18), -0.14773 (18), -0.14765 (18), -0.14749 (19), -0.14739 (18), -0.14728 (18), -0.14715 (18), -0.14710 (18), -0.14688 (18), -0.14645 (19), -0.14638 (18), -0.14637 (18), 
Length of domains: 30350
Time: pickout 0.2559    decision 1.7018    set_bounds 1.8437    solve 4.6435    add 0.1123    
Accumulated time: pickout 0.7185    decision 4.1162    set_bounds 4.8308    solve 13.8684    add 0.9204    
Current (lb-rhs): -0.15319830179214478
73835 domains visited
current_vram/total_varm: 34.2GB/99.9GB, batch_size increase to 32768
Cumulative time: 25.018755435943604

BaB round 14
batch: 30350
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 748] [/input-8, 748] [/input-8, 747] [/input-12, 20] [/input, 889] [/input-8, 1324] [/input, 977] [/input-8, 497] [/input, 978] [/input-8, 748] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9400457143783569, worst -0.14955684542655945
10 lb beta sum: 0.9400457143783569, worst -0.14952483773231506
Time: prepare 3.0901    bound 3.2681    transfer 0.7292    finalize 0.5010    func 8.4924    
Accumulated time: func 22.5223    prepare 7.4859    bound 9.7971    transfer 1.5677    finalize 1.8317    
all_split False
======================Cut inference begins======================
max lb tensor(0.28379360) min lb tensor(-0.14951566)
Number of Verified Splits: 8220 of 60700
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0010743141174316406 
BICCOS Cumulative time: 0.08705472946166992
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14952 (19), -0.14928 (19), -0.14846 (19), -0.14816 (19), -0.14800 (19), -0.14792 (19), -0.14709 (19), -0.14701 (19), -0.14668 (19), -0.14665 (19), -0.14616 (19), -0.14579 (19), -0.14565 (19), -0.14532 (19), -0.14510 (19), -0.14500 (20), -0.14488 (19), -0.14479 (19), -0.14443 (19), -0.14418 (19), 
Length of domains: 52480
Time: pickout 0.6121    decision 3.1053    set_bounds 3.6161    solve 8.5028    add 0.1839    
Accumulated time: pickout 1.3307    decision 7.2215    set_bounds 8.4469    solve 22.3713    add 1.1044    
Current (lb-rhs): -0.14951565861701965
126315 domains visited
Cumulative time: 41.2005078792572

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1662] [/input-8, 1662] [/input, 434] [/input-8, 747] [/input, 434] [/input-8, 794] [/input, 962] [/input-8, 794] [/input, 434] [/input-8, 497] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9394199848175049, worst -0.1474275141954422
10 lb beta sum: 0.9394199848175049, worst -0.1474171280860901
Time: prepare 4.5187    bound 8.7095    transfer 0.8111    finalize 1.2286    func 15.6879    
Accumulated time: func 38.2102    prepare 12.0050    bound 18.5067    transfer 2.3789    finalize 3.0603    
all_split False
======================Cut inference begins======================
max lb tensor(0.28421402) min lb tensor(-0.14741392)
Number of Verified Splits: 9465 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0009694099426269531 
BICCOS Cumulative time: 0.08802413940429688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14952 (19), -0.14816 (19), -0.14741 (20), -0.14701 (19), -0.14650 (20), -0.14616 (19), -0.14614 (20), -0.14606 (20), -0.14579 (19), -0.14565 (19), -0.14513 (20), -0.14500 (20), -0.14499 (20), -0.14488 (19), -0.14479 (19), -0.14478 (20), -0.14443 (19), -0.14418 (19), -0.14407 (19), -0.14389 (19), 
Length of domains: 75783
Time: pickout 0.5451    decision 3.4023    set_bounds 3.6018    solve 15.7007    add 0.2290    
Accumulated time: pickout 1.8758    decision 10.6238    set_bounds 12.0487    solve 38.0720    add 1.3334    
Current (lb-rhs): -0.14951565861701965
182386 domains visited
Cumulative time: 64.87094807624817

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1169] [/input-8, 1174] [/input-8, 1661] [/input-8, 1399] [/input-8, 1324] [/input, 3549] [/input-8, 1516] [/input-8, 1134] [/input-8, 748] [/input, 3549] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9398119449615479, worst -0.14770008623600006
10 lb beta sum: 0.9398119449615479, worst -0.147705078125
Time: prepare 3.3610    bound 8.7093    transfer 0.7966    finalize 0.5566    func 14.6418    
Accumulated time: func 52.8520    prepare 15.3664    bound 27.2160    transfer 3.1755    finalize 3.6169    
all_split False
======================Cut inference begins======================
max lb tensor(0.28458589) min lb tensor(-0.14769566)
Number of Verified Splits: 8899 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0010132789611816406 
BICCOS Cumulative time: 0.08903741836547852
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14770 (20), -0.14741 (20), -0.14634 (20), -0.14614 (20), -0.14606 (20), -0.14515 (20), -0.14499 (20), -0.14478 (20), -0.14478 (21), -0.14461 (20), -0.14429 (20), -0.14391 (20), -0.14379 (20), -0.14363 (20), -0.14343 (21), -0.14342 (20), -0.14327 (20), -0.14325 (20), -0.14315 (21), -0.14302 (20), 
Length of domains: 99652
Time: pickout 0.5440    decision 3.5319    set_bounds 3.7919    solve 14.6537    add 0.2513    
Accumulated time: pickout 2.4198    decision 14.1557    set_bounds 15.8405    solve 52.7257    add 1.5846    
Current (lb-rhs): -0.1476956605911255
239023 domains visited
Cumulative time: 87.83137083053589

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 498] [/input-8, 404] [/input-8, 1169] [/input-12, 43] [/input-8, 1516] [/input-8, 498] [/input-8, 794] [/input-8, 404] [/input-8, 1169] [/input-8, 1610] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9394837021827698, worst -0.14501827955245972
10 lb beta sum: 0.9394837021827698, worst -0.14500339329242706
Time: prepare 3.3851    bound 8.7134    transfer 0.7651    finalize 1.4020    func 14.6986    
Accumulated time: func 67.5506    prepare 18.7518    bound 35.9294    transfer 3.9405    finalize 5.0189    
all_split False
======================Cut inference begins======================
max lb tensor(0.28423738) min lb tensor(-0.14499836)
Number of Verified Splits: 9607 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0009236335754394531 
BICCOS Cumulative time: 0.08996105194091797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14770 (20), -0.14634 (20), -0.14515 (20), -0.14500 (21), -0.14499 (20), -0.14478 (21), -0.14461 (20), -0.14429 (20), -0.14391 (20), -0.14379 (20), -0.14372 (21), -0.14362 (21), -0.14343 (21), -0.14325 (20), -0.14315 (21), -0.14302 (20), -0.14293 (20), -0.14255 (20), -0.14235 (21), -0.14226 (20), 
Length of domains: 122813
Time: pickout 0.5460    decision 3.3668    set_bounds 3.8423    solve 14.7121    add 0.1977    
Accumulated time: pickout 2.9658    decision 17.5225    set_bounds 19.6828    solve 67.4378    add 1.7823    
Current (lb-rhs): -0.1476956605911255
294952 domains visited
Cumulative time: 110.68898749351501

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1611] [/input-8, 1662] [/input-8, 1516] [/input-8, 794] [/input-8, 1654] [/input-8, 498] [/input-8, 497] [/input-8, 1324] [/input, 889] [/input, 889] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9399138689041138, worst -0.14610710740089417
10 lb beta sum: 0.9399138689041138, worst -0.1460200995206833
Time: prepare 3.3825    bound 8.7129    transfer 0.7593    finalize 0.5953    func 13.8853    
Accumulated time: func 81.4359    prepare 22.1348    bound 44.6423    transfer 4.6998    finalize 5.6143    
all_split False
======================Cut inference begins======================
max lb tensor(0.28477478) min lb tensor(-0.14601089)
Number of Verified Splits: 8982 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.001070261001586914 
BICCOS Cumulative time: 0.09103131294250488
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14601 (21), -0.14500 (21), -0.14478 (21), -0.14465 (21), -0.14461 (20), -0.14372 (21), -0.14362 (21), -0.14343 (21), -0.14325 (20), -0.14311 (21), -0.14274 (21), -0.14235 (21), -0.14187 (21), -0.14186 (20), -0.14175 (21), -0.14168 (21), -0.14161 (21), -0.14149 (21), -0.14144 (21), -0.14136 (21), 
Length of domains: 146599
Time: pickout 0.5672    decision 3.8256    set_bounds 4.1020    solve 13.9021    add 0.1912    
Accumulated time: pickout 3.5330    decision 21.3482    set_bounds 23.7848    solve 81.3399    add 1.9735    
Current (lb-rhs): -0.1460108906030655
351506 domains visited
Cumulative time: 133.5319640636444

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 978] [/input, 3041] [/input, 978] [/input, 962] [/input-8, 497] [/input, 978] [/input, 978] [/input, 993] [/input, 978] [/input, 993] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9399511218070984, worst -0.14301680028438568
10 lb beta sum: 0.9399511218070984, worst -0.1429949253797531
Time: prepare 3.4092    bound 8.7107    transfer 0.7703    finalize 1.7296    func 15.0572    
Accumulated time: func 96.4931    prepare 25.5443    bound 53.3530    transfer 5.4701    finalize 7.3438    
all_split False
======================Cut inference begins======================
max lb tensor(0.28390747) min lb tensor(-0.14291081)
Number of Verified Splits: 8428 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0008814334869384766 
BICCOS Cumulative time: 0.09191274642944336
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14601 (21), -0.14500 (21), -0.14478 (21), -0.14465 (21), -0.14372 (21), -0.14362 (21), -0.14343 (21), -0.14311 (21), -0.14291 (21), -0.14274 (21), -0.14235 (21), -0.14187 (21), -0.14175 (21), -0.14168 (21), -0.14161 (21), -0.14155 (21), -0.14149 (21), -0.14144 (21), -0.14136 (21), -0.14074 (21), 
Length of domains: 170939
Time: pickout 0.5775    decision 3.9807    set_bounds 3.1912    solve 15.0713    add 0.1984    
Accumulated time: pickout 4.1104    decision 25.3289    set_bounds 26.9760    solve 96.4112    add 2.1719    
Current (lb-rhs): -0.1460108906030655
408614 domains visited
Cumulative time: 156.72200632095337

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 498] [/input-8, 1169] [/input-8, 498] [/input, 3537] [/input, 3549] [/input-8, 1324] [/input-8, 1324] [/input-8, 498] [/input-8, 157] [/input, 3537] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9393545985221863, worst -0.14292898774147034
10 lb beta sum: 0.9393545985221863, worst -0.14290764927864075
Time: prepare 3.4173    bound 8.7148    transfer 0.7662    finalize 0.6037    func 15.3580    
Accumulated time: func 111.8511    prepare 28.9620    bound 62.0678    transfer 6.2363    finalize 7.9475    
all_split False
======================Cut inference begins======================
max lb tensor(0.28259361) min lb tensor(-0.14289461)
Number of Verified Splits: 9238 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.000993967056274414 
BICCOS Cumulative time: 0.09290671348571777
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14601 (21), -0.14500 (21), -0.14465 (21), -0.14372 (21), -0.14362 (21), -0.14311 (21), -0.14291 (21), -0.14289 (22), -0.14274 (21), -0.14235 (21), -0.14187 (21), -0.14168 (21), -0.14161 (21), -0.14155 (21), -0.14152 (22), -0.14149 (21), -0.14136 (21), -0.14074 (21), -0.14072 (22), -0.14060 (21), 
Length of domains: 194469
Time: pickout 0.5586    decision 4.5897    set_bounds 3.0772    solve 15.3718    add 0.1910    
Accumulated time: pickout 4.6690    decision 29.9186    set_bounds 30.0532    solve 111.7831    add 2.3629    
Current (lb-rhs): -0.1460108906030655
464912 domains visited
Cumulative time: 180.7230486869812

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 497] [/input, 889] [/input, 437] [/input-8, 1324] [/input-8, 1324] [/input-8, 1324] [/input-8, 747] [/input-8, 1661] [/input-8, 1661] [/input-8, 1661] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9397907257080078, worst -0.14203444123268127
10 lb beta sum: 0.9397907257080078, worst -0.14209744334220886
Time: prepare 3.4359    bound 8.7133    transfer 0.7765    finalize 0.5867    func 13.9513    
Accumulated time: func 125.8024    prepare 32.3983    bound 70.7811    transfer 7.0129    finalize 8.5342    
all_split False
======================Cut inference begins======================
max lb tensor(0.28479028) min lb tensor(-0.14202884)
Number of Verified Splits: 8347 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0010592937469482422 
BICCOS Cumulative time: 0.09396600723266602
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14601 (21), -0.14465 (21), -0.14291 (21), -0.14289 (22), -0.14274 (21), -0.14203 (22), -0.14190 (22), -0.14187 (21), -0.14155 (21), -0.14152 (22), -0.14149 (21), -0.14136 (21), -0.14074 (21), -0.14072 (22), -0.14070 (22), -0.14060 (21), -0.14051 (21), -0.14041 (22), -0.14035 (22), -0.14017 (21), 
Length of domains: 218890
Time: pickout 0.5714    decision 3.3818    set_bounds 4.7641    solve 13.9658    add 0.2006    
Accumulated time: pickout 5.2404    decision 33.3003    set_bounds 34.8172    solve 125.7489    add 2.5635    
Current (lb-rhs): -0.1460108906030655
522101 domains visited
Time out!!!!!!!!
Result: unknown in 206.9432 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 173, vnnlib ID: 173 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.90053749, -18.83853912, -16.65795326, -15.93625736, -16.87875748,
         -16.65612221, -15.87883949, -18.48574829, -19.30859566, -18.32104874]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [775]; unstable size 775; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 292, 1, 775] with unstable size 291 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 775] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 775] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [291]; unstable size 291; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 291] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 291] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.07465285,  0.67120814, -0.69678187, -0.40189314,  0.40541002,
         -1.27040470,  0.91171992,  1.11740494,  0.40299439]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.90053749, -18.83853912, -16.65795326, -15.93625736, -16.87875748,
         -16.65612221, -15.87883949, -18.48574829, -19.30859566, -18.32104874]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.90053940, -18.83854103, -16.65795326, -15.93625832, -16.87875938,
          -16.65612030, -15.87884331, -18.48575401, -19.30859756, -18.32105255],
         [-17.90053940, -18.83854103, -16.65795326, -15.93625832, -16.87875938,
          -16.65612030, -15.87884331, -18.48575401, -19.30859756, -18.32105255]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.96428108,  0.72169495,  0.94250107, -0.05741501]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0836 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 174, vnnlib ID: 174 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.01452446, -31.17614365, -24.06021309, -25.31211662, -23.70052147,
         -25.47224236, -25.36236954, -25.44280624, -27.95291138, -29.38704109]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [639]; unstable size 639; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 278, 1, 639] with unstable size 277 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 639] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 639] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [277]; unstable size 277; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 277] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 277] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.53353500,  4.77915430, -0.68763828,  0.12715709,  0.16958112,
          0.30826467,  0.61279368,  2.10399437,  3.39013553]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.01452446, -31.17614365, -24.06021309, -25.31211662, -23.70052147,
         -25.47224236, -25.36236954, -25.44280624, -27.95291138, -29.38704109]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.68703270, -30.86822891, -23.70858955, -25.04109001, -23.84642792,
          -25.24173546, -25.21504593, -25.60833549, -27.57862473, -29.10008049]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.13783836]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0061 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0718 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 175, vnnlib ID: 175 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-28.88498878, -31.32757950, -31.15767288, -32.62705231, -31.05282402,
         -32.13772202, -32.09079361, -30.79269218, -31.35886765, -30.31673813]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [770]; unstable size 770; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 291, 1, 770] with unstable size 290 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 770] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 770] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [290]; unstable size 290; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 290] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 290] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.78770685,  1.03243494,  1.96444631,  0.51057148,  1.33818674,
          1.22204292,  0.09967989,  0.93596256, -0.07644725]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-28.88498878, -31.32757950, -31.15767288, -32.62705231, -31.05282402,
         -32.13772202, -32.09079361, -30.79269218, -31.35886765, -30.31673813]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.04it/s]100%|██████████| 1/1 [00:00<00:00,  9.04it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.30589676, -31.02769279, -31.51187515, -32.71813583, -31.26396370,
          -32.18457031, -32.28963852, -30.93294144, -31.53766632, -30.01214409]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.70624733]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1132 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 23th iter
best_l after optimization: 8.505002975463867
alpha/beta optimization time: 0.287564754486084
initial alpha-crown bounds: tensor([[8.78651619e-01, 1.08035851e+00, 2.04135466e+00, 5.90096474e-01,
         1.42439306e+00, 1.30015993e+00, 2.00366884e-01, 9.89597440e-01,
         2.40802765e-05]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 0 ; Worst class: (+ rhs) 2.4080276489257812e-05
verified with init bound!
Result: safe-incomplete in 0.4467 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 176, vnnlib ID: 176 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.17542076, -27.76688576, -22.42221451, -23.23637009, -22.93698311,
         -23.34073257, -23.85361671, -24.75134850, -25.51817131, -27.31844711]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [710]; unstable size 710; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 188, 1, 710] with unstable size 187 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 710] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 710] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 187] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.05221039,  3.04186749, -1.68551719, -1.26099956, -0.22333625,
          0.06938851,  0.46372619,  0.85233927,  2.67835474]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.17542076, -27.76688576, -22.42221451, -23.23637009, -22.93698311,
         -23.34073257, -23.85361671, -24.75134850, -25.51817131, -27.31844711]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-24.17541504, -27.76688766, -22.42221451, -23.23637199, -22.93698311,
          -23.34073448, -23.85361481, -24.75134277, -25.51817131, -27.31844521],
         [-24.17541504, -27.76688766, -22.42221451, -23.23637199, -22.93698311,
          -23.34073448, -23.85361481, -24.75134277, -25.51817131, -27.31844521]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.81415749, -0.29938889,  0.10436249]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]],


         [[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]],


         [[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0586 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 177, vnnlib ID: 177 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-45.55731201, -50.89083099, -42.06116486, -47.85534668, -48.62054062,
         -48.15819550, -49.32711411, -47.74969101, -49.46615982, -52.86323929]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [518]; unstable size 518; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 116, 1, 518] with unstable size 115 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 518] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 518] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [115]; unstable size 115; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 115] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 115] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.03216028, 7.96402073, 5.21769238, 5.94199657, 5.50237274, 6.70993805,
         5.09641886, 6.72968769, 9.94023228]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0443 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 178, vnnlib ID: 178 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-28.28612328, -36.58068848, -28.50667953, -31.36640739, -29.10656929,
         -32.13262939, -33.39686966, -30.94572258, -36.68356323, -37.42233658]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [770]; unstable size 770; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 150, 1, 770] with unstable size 149 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 770] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 770] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [149]; unstable size 149; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 149] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 6.97211361, -0.64362013,  1.92279148, -0.18267369,  2.60485077,
          3.75918412,  1.37062335,  7.21187782,  7.83291054]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-28.28612328, -36.58068848, -28.50667953, -31.36640739, -29.10656929,
         -32.13262939, -33.39686966, -30.94572258, -36.68356323, -37.42233658]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-28.54264641, -36.73462677, -28.27592087, -31.21742058, -28.90563011,
          -31.94429970, -33.19551468, -30.80367088, -36.82108307, -37.53708267],
         [-28.54264641, -36.73462677, -28.27592087, -31.21742058, -28.90563011,
          -31.94429970, -33.19551468, -30.80367088, -36.82108307, -37.53708267]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.26672554,  0.36298370]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0431 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 179, vnnlib ID: 179 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.31065178, -29.77011871, -24.73226166, -28.38901711, -26.21283531,
         -28.98853493, -28.51242447, -30.11011124, -25.90357208, -30.21725655]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [606]; unstable size 606; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 205, 1, 606] with unstable size 204 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 606] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 606] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [204]; unstable size 204; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 204] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 204] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.38776445, 1.62000227, 4.98641109, 2.86554337, 5.48513174, 5.11340475,
         6.28316784, 2.58398366, 6.84431124]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0436 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 180, vnnlib ID: 180 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.24666405, -28.76270676, -23.26070213, -22.05362892, -20.50691032,
         -21.35376549, -23.01077271, -17.43795013, -27.58108521, -26.06879044]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [599]; unstable size 599; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 274, 1, 599] with unstable size 273 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 599] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 599] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [273]; unstable size 273; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 273] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 273] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.87905025, 8.74207592, 3.91814947, 3.03320622, 2.01956224, 2.34560633,
         3.41726923, 7.67006540, 6.18134117]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0340 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 181, vnnlib ID: 181 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.61829376, -18.38642883, -14.96894455, -16.51321602, -15.02400494,
         -16.66117096, -14.13184452, -17.61631203, -17.11466599, -18.21944618]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [694]; unstable size 694; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 694] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 694] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 694] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 259] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.01481485,  2.06577015, -0.04681468,  1.60054755, -0.07306194,
          1.60960817,  2.27459669,  1.25393152,  2.08621788]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.61829376, -18.38642883, -14.96894455, -16.51321602, -15.02400494,
         -16.66117096, -14.13184452, -17.61631203, -17.11466599, -18.21944618]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.86it/s]100%|██████████| 1/1 [00:00<00:00,  8.85it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.10665894, -18.15736580, -14.30402184, -16.10336876, -14.55302238,
          -16.18386459, -13.99254227, -17.08933067, -16.75724792, -17.95055962],
         [-17.10665894, -18.15736580, -14.30402184, -16.10336876, -14.55302238,
          -16.18386459, -13.99254227, -17.08933067, -16.75724792, -17.95055962]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.31147957, 0.56048012]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1156 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.356432914733887
alpha/beta optimization time: 1.2105908393859863
initial alpha-crown bounds: tensor([[ 2.11682534,  2.15421152, -0.00883770,  1.63260901, -0.03195810,
          1.64549243,  2.32464242,  1.34506631,  2.17838144]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.03195810317993164
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6413140296936
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.64127206802368
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.64124846458435
Verifying property 2 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.00883770]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.61829376, -18.38642883, -14.96894455, -16.51321602, -15.02400494,
        -16.66117096, -14.13184452, -17.61631203, -17.11466599, -18.21944618],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.00883770]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 694
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 257
Node /15 input 0: size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 964
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.870529174804688e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.008837461471557617
10 lb beta sum: 0.0, worst -0.008846759796142578
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0528    transfer 0.0001    finalize 0.0001    func 0.0533    
Accumulated time: func 0.0533    prepare 0.0002    bound 0.0528    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] 
split level 1: [/input-12, 12] 
split level 2: [/input-12, 61] 
split level 3: [/input-8, 1627] 
split level 4: [/input-8, 1635] 
split level 5: [/input-12, 92] 
split level 6: [/input-8, 1954] 
split level 7: [/input-8, 1051] 
split level 8: [/input-8, 1628] 
split level 9: [/input-8, 924] 
split level 10: [/input-8, 1969] 
split level 11: [/input-8, 477] 
split level 12: [/input-12, 71] 
split level 13: [/input-8, 410] 
split level 14: [/input-8, 155] 
split level 15: [/input-8, 1961] 
split level 16: [/input-8, 1962] 
split level 17: [/input-8, 418] 
split level 18: [/input-12, 50] 
split level 19: [/input-8, 1380] 
split level 20: [/input-8, 1963] 
split level 21: [/input-8, 1570] 
split level 22: [/input-8, 1589] 
split level 23: [/input-8, 1973] 
split level 24: [/input-8, 306] 
split level 25: [/input-8, 466] 
split level 26: [/input-8, 1246] 
split level 27: [/input-8, 1590] 
split level 28: [/input-8, 300] 
split level 29: [/input-8, 930] 
split level 30: [/input-8, 424] 
split level 31: [/input-8, 1560] 
split level 32: [/input-8, 339] 
split level 33: [/input-8, 1371] 
split level 34: [/input-8, 435] 
split level 35: [/input-8, 307] 
split level 36: [/input-8, 36] 
split level 37: [/input-8, 741] 
split level 38: [/input-8, 161] 
split level 39: [/input-8, 458] 
split level 40: [/input-8, 1290] 
split level 41: [/input-8, 957] 
split level 42: [/input-8, 436] 
split level 43: [/input-8, 995] 
split level 44: [/input-8, 758] 
split level 45: [/input-8, 1598] 
split level 46: [/input-8, 869] 
split level 47: [/input-8, 738] 
split level 48: [/input-8, 408] 
split level 49: [/input-8, 1619] 
split level 50: [/input-8, 281] 
split level 51: [/input-8, 1561] 
split level 52: [/input-8, 150] 
split level 53: [/input-8, 459] 
split level 54: [/input-8, 159] 
split level 55: [/input-8, 149] 
split level 56: [/input-8, 1968] 
split level 57: [/input-8, 276] 
split level 58: [/input-8, 1680] 
split level 59: [/input-8, 625] 
split level 60: [/input-8, 177] 
split level 61: [/input-8, 1674] 
split level 62: [/input-8, 298] 
split level 63: [/input-12, 20] 
split level 64: [/input-8, 342] 
split level 65: [/input-8, 1038] 
split level 66: [/input-8, 243] 
split level 67: [/input-8, 102] 
split level 68: [/input-8, 299] 
split level 69: [/input-8, 349] 
split level 70: [/input-8, 908] 
split level 71: [/input-8, 770] 
split level 72: [/input-8, 1370] 
split level 73: [/input-8, 1638] 
split level 74: [/input-8, 357] 
split level 75: [/input-8, 1515] 
split level 76: [/input-8, 1701] 
split level 77: [/input-8, 1678] 
split level 78: [/input-8, 782] 
split level 79: [/input-8, 285] 
split level 80: [/input-8, 110] 
split level 81: [/input-8, 802] 
split level 82: [/input-8, 769] 
split level 83: [/input-8, 2036] 
split level 84: [/input-8, 771] 
split level 85: [/input-8, 85] 
split level 86: [/input-8, 494] 
split level 87: [/input-8, 244] 
split level 88: [/input-8, 1381] 
split level 89: [/input-8, 1945] 
split level 90: [/input-8, 997] 
split level 91: [/input, 1381] 
split level 92: [/input-8, 773] 
split level 93: [/input-8, 93] 
split level 94: [/input, 2787] 
split level 95: [/input-8, 1199] 
split level 96: [/input, 3314] 
split level 97: [/input-8, 245] 
split level 98: [/input-8, 1034] 
split level 99: [/input-8, 176] 
split level 100: [/input-8, 1210] 
split level 101: [/input-8, 169] 
split level 102: [/input-8, 1060] 
split level 103: [/input-8, 1947] 
split level 104: [/input, 4062] 
split level 105: [/input-8, 827] 
split level 106: [/input, 2804] 
split level 107: [/input, 1455] 
split level 108: [/input-8, 772] 
split level 109: [/input-8, 160] 
split level 110: [/input-8, 1656] 
split level 111: [/input-8, 411] 
split level 112: [/input, 2694] 
split level 113: [/input-8, 1227] 
split level 114: [/input-8, 1081] 
split level 115: [/input-8, 1225] 
split level 116: [/input, 2802] 
split level 117: [/input-8, 801] 
split level 118: [/input-8, 247] 
split level 119: [/input-8, 634] 
split level 120: [/input, 3463] 
split level 121: [/input-8, 246] 
split level 122: [/input-8, 71] 
split level 123: [/input-8, 449] 
split level 124: [/input, 1013] 
split level 125: [/input, 3991] 
split level 126: [/input, 85] 
split level 127: [/input-8, 1698] 
split level 128: [/input-8, 460] 
split level 129: [/input-8, 1937] 
split level 130: [/input-8, 1601] 
split level 131: [/input-8, 144] 
split level 132: [/input, 2941] 
split level 133: [/input-8, 1702] 
split level 134: [/input, 1382] 
split level 135: [/input, 832] 
split level 136: [/input-8, 488] 
split level 137: [/input, 3453] 
split level 138: [/input-8, 97] 
split level 139: [/input-8, 774] 
split level 140: [/input-8, 1609] 
split level 141: [/input, 1668] 
split level 142: [/input-8, 1073] 
split level 143: [/input, 1010] 
split level 144: [/input, 535] 
split level 145: [/input-8, 393] 
split level 146: [/input-8, 404] 
split level 147: [/input-8, 2037] 
split level 148: [/input-8, 1555] 
split level 149: [/input, 1488] 
split level 150: [/input, 2788] 
split level 151: [/input-8, 237] 
split level 152: [/input-8, 987] 
split level 153: [/input, 281] 
split level 154: [/input-8, 910] 
split level 155: [/input, 2012] 
split level 156: [/input-8, 251] 
split level 157: [/input-8, 1230] 
split level 158: [/input, 3234] 
split level 159: [/input, 844] 
split level 160: [/input-8, 1035] 
split level 161: [/input-8, 1688] 
split level 162: [/input, 841] 
split level 163: [/input, 621] 
split level 164: [/input-8, 37] 
split level 165: [/input-8, 1611] 
split level 166: [/input, 2908] 
split level 167: [/input, 3254] 
split level 168: [/input, 1252] 
split level 169: [/input, 610] 
split level 170: [/input, 3264] 
split level 171: [/input, 1305] 
split level 172: [/input, 509] 
split level 173: [/input-8, 1337] 
split level 174: [/input, 910] 
split level 175: [/input-8, 1789] 
split level 176: [/input-8, 451] 
split level 177: [/input, 1197] 
split level 178: [/input, 3049] 
split level 179: [/input, 2073] 
split level 180: [/input-8, 496] 
split level 181: [/input, 2843] 
split level 182: [/input, 857] 
split level 183: [/input-8, 407] 
split level 184: [/input, 1687] 
split level 185: [/input, 2009] 
split level 186: [/input-8, 255] 
split level 187: [/input, 2088] 
split level 188: [/input, 495] 
split level 189: [/input, 1148] 
split level 190: [/input, 2089] 
split level 191: [/input, 732] 
split level 192: [/input-8, 626] 
split level 193: [/input, 2013] 
split level 194: [/input-8, 391] 
split level 195: [/input, 514] 
split level 196: [/input, 3387] 
split level 197: [/input-8, 236] 
split level 198: [/input, 526] 
split level 199: [/input, 1017] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.008778095245361328
10 lb beta sum: 0.0, worst -0.008772850036621094
Time: prepare 0.0117    bound 0.0980    transfer 0.0029    finalize 0.0027    func 0.1179    
Accumulated time: func 0.1712    prepare 0.0217    bound 0.1509    transfer 0.0030    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.19408154) min lb tensor(-0.00876832)
Number of Verified Splits: 75 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.013972997665405273 
BICCOS Cumulative time: 0.013972997665405273
Preprocessing time: 0.009917736053466797 Inference time: 0.002812623977661133 Add cuts time: 0.0010635852813720703 Cut analysis time: 0.00017905235290527344
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5141    set_bounds 0.0087    solve 0.1180    add 0.0102    
Accumulated time: pickout 0.0003    decision 0.5141    set_bounds 0.0087    solve 0.1180    add 0.0102    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46]), tensor([-1.]), tensor([0]), tensor([2.82951758e+16]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46]), tensor([1.]), tensor([0]), tensor([2.82951758e+16]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.03352785110473633

all verified at 0th iter
Time: prepare 0.0003    bound 0.0041    transfer 0.0001    finalize 0.0001    func 0.0047    
Accumulated time: func 0.1759    prepare 0.0220    bound 0.1550    transfer 0.0031    finalize 0.0030    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.73797178268433
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.7379126548767
Verifying property 4 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03195810]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.61829376, -18.38642883, -14.96894455, -16.51321602, -15.02400494,
        -16.66117096, -14.13184452, -17.61631203, -17.11466599, -18.21944618],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03195810]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 694
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 257
Node /15 input 0: size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 964
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.751319885253906e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03195619583129883
10 lb beta sum: 0.0, worst -0.03195619583129883
Time: prepare 0.0002    bound 0.0900    transfer 0.0001    finalize 0.0001    func 0.0905    
Accumulated time: func 0.0905    prepare 0.0002    bound 0.0900    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] 
split level 1: [/input-12, 50] 
split level 2: [/input-12, 61] 
split level 3: [/input-12, 10] 
split level 4: [/input-12, 4] 
split level 5: [/input-12, 92] 
split level 6: [/input-8, 1051] 
split level 7: [/input-8, 155] 
split level 8: [/input-12, 71] 
split level 9: [/input-8, 306] 
split level 10: [/input-8, 1570] 
split level 11: [/input-8, 418] 
split level 12: [/input-8, 1370] 
split level 13: [/input-8, 300] 
split level 14: [/input-8, 349] 
split level 15: [/input-8, 410] 
split level 16: [/input-8, 1246] 
split level 17: [/input-8, 924] 
split level 18: [/input-8, 307] 
split level 19: [/input-8, 342] 
split level 20: [/input-8, 1380] 
split level 21: [/input-8, 1371] 
split level 22: [/input-8, 170] 
split level 23: [/input-8, 1680] 
split level 24: [/input-8, 299] 
split level 25: [/input-12, 55] 
split level 26: [/input-8, 149] 
split level 27: [/input-8, 1635] 
split level 28: [/input-8, 741] 
split level 29: [/input-8, 150] 
split level 30: [/input-8, 408] 
split level 31: [/input-8, 357] 
split level 32: [/input-8, 1589] 
split level 33: [/input-8, 1560] 
split level 34: [/input-8, 1381] 
split level 35: [/input-8, 1963] 
split level 36: [/input-8, 869] 
split level 37: [/input-8, 339] 
split level 38: [/input-8, 908] 
split level 39: [/input-8, 1561] 
split level 40: [/input-8, 2036] 
split level 41: [/input-8, 177] 
split level 42: [/input-8, 1210] 
split level 43: [/input-8, 738] 
split level 44: [/input-8, 1590] 
split level 45: [/input-8, 161] 
split level 46: [/input-8, 957] 
split level 47: [/input-8, 1324] 
split level 48: [/input-8, 1065] 
split level 49: [/input-8, 2037] 
split level 50: [/input-8, 1290] 
split level 51: [/input-8, 1515] 
split level 52: [/input-8, 758] 
split level 53: [/input-8, 36] 
split level 54: [/input-8, 424] 
split level 55: [/input-8, 298] 
split level 56: [/input-8, 179] 
split level 57: [/input-8, 1073] 
split level 58: [/input-8, 1962] 
split level 59: [/input-8, 1598] 
split level 60: [/input-8, 770] 
split level 61: [/input-8, 285] 
split level 62: [/input-8, 1674] 
split level 63: [/input-8, 1060] 
split level 64: [/input, 85] 
split level 65: [/input-8, 769] 
split level 66: [/input-8, 254] 
split level 67: [/input-8, 956] 
split level 68: [/input-8, 2011] 
split level 69: [/input-8, 1332] 
split level 70: [/input, 3497] 
split level 71: [/input, 3314] 
split level 72: [/input-8, 251] 
split level 73: [/input, 1381] 
split level 74: [/input-8, 1627] 
split level 75: [/input-8, 1941] 
split level 76: [/input, 2953] 
split level 77: [/input-8, 1688] 
split level 78: [/input-8, 466] 
split level 79: [/input-8, 37] 
split level 80: [/input-8, 995] 
split level 81: [/input, 1382] 
split level 82: [/input-8, 252] 
split level 83: [/input-8, 997] 
split level 84: [/input, 2919] 
split level 85: [/input-8, 1969] 
split level 86: [/input-8, 802] 
split level 87: [/input-8, 1035] 
split level 88: [/input, 3466] 
split level 89: [/input-8, 1081] 
split level 90: [/input, 906] 
split level 91: [/input-8, 245] 
split level 92: [/input, 2787] 
split level 93: [/input, 410] 
split level 94: [/input-8, 243] 
split level 95: [/input-8, 827] 
split level 96: [/input-8, 102] 
split level 97: [/input-8, 1162] 
split level 98: [/input-8, 244] 
split level 99: [/input, 2802] 
split level 100: [/input-8, 773] 
split level 101: [/input-8, 1232] 
split level 102: [/input-8, 1034] 
split level 103: [/input-8, 253] 
split level 104: [/input-8, 1656] 
split level 105: [/input-8, 159] 
split level 106: [/input-8, 281] 
split level 107: [/input-8, 1362] 
split level 108: [/input, 2804] 
split level 109: [/input-8, 169] 
split level 110: [/input-8, 435] 
split level 111: [/input, 2930] 
split level 112: [/input-8, 782] 
split level 113: [/input-8, 771] 
split level 114: [/input-8, 38] 
split level 115: [/input-8, 30] 
split level 116: [/input, 345] 
split level 117: [/input, 2931] 
split level 118: [/input-8, 255] 
split level 119: [/input-8, 246] 
split level 120: [/input, 1687] 
split level 121: [/input, 2954] 
split level 122: [/input, 3387] 
split level 123: [/input, 1013] 
split level 124: [/input-8, 972] 
split level 125: [/input, 2904] 
split level 126: [/input, 857] 
split level 127: [/input, 1406] 
split level 128: [/input-8, 144] 
split level 129: [/input-8, 1961] 
split level 130: [/input, 844] 
split level 131: [/input-8, 1601] 
split level 132: [/input-8, 820] 
split level 133: [/input-8, 1199] 
split level 134: [/input-8, 772] 
split level 135: [/input, 343] 
split level 136: [/input-8, 1968] 
split level 137: [/input-8, 1347] 
split level 138: [/input, 828] 
split level 139: [/input-8, 816] 
split level 140: [/input-8, 176] 
split level 141: [/input, 2028] 
split level 142: [/input, 1252] 
split level 143: [/input-8, 411] 
split level 144: [/input, 2788] 
split level 145: [/input-8, 160] 
split level 146: [/input, 2638] 
split level 147: [/input, 426] 
split level 148: [/input, 281] 
split level 149: [/input, 839] 
split level 150: [/input-8, 1225] 
split level 151: [/input, 104] 
split level 152: [/input, 1197] 
split level 153: [/input, 135] 
split level 154: [/input, 841] 
split level 155: [/input, 2871] 
split level 156: [/input, 2012] 
split level 157: [/input, 2637] 
split level 158: [/input, 2027] 
split level 159: [/input, 716] 
split level 160: [/input, 2013] 
split level 161: [/input, 2941] 
split level 162: [/input, 359] 
split level 163: [/input, 495] 
split level 164: [/input, 2884] 
split level 165: [/input, 2344] 
split level 166: [/input, 1305] 
split level 167: [/input-8, 1787] 
split level 168: [/input, 812] 
split level 169: [/input, 3496] 
split level 170: [/input, 791] 
split level 171: [/input, 732] 
split level 172: [/input, 921] 
split level 173: [/input-8, 801] 
split level 174: [/input-8, 963] 
split level 175: [/input, 838] 
split level 176: [/input, 837] 
split level 177: [/input, 3373] 
split level 178: [/input, 509] 
split level 179: [/input, 3528] 
split level 180: [/input, 789] 
split level 181: [/input, 792] 
split level 182: [/input, 811] 
split level 183: [/input, 3234] 
split level 184: [/input-8, 407] 
split level 185: [/input, 1521] 
split level 186: [/input, 1300] 
split level 187: [/input, 2089] 
split level 188: [/input, 325] 
split level 189: [/input-8, 71] 
split level 190: [/input, 2088] 
split level 191: [/input, 163] 
split level 192: [/input, 621] 
split level 193: [/input, 3197] 
split level 194: [/input, 2085] 
split level 195: [/input, 938] 
split level 196: [/input, 1317] 
split level 197: [/input, 2073] 
split level 198: [/input, 3093] 
split level 199: [/input, 2086] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03189873695373535
10 lb beta sum: 0.0, worst -0.031899213790893555
Time: prepare 0.0117    bound 0.0993    transfer 0.0017    finalize 0.0030    func 0.1183    
Accumulated time: func 0.2088    prepare 0.0218    bound 0.1893    transfer 0.0018    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.36952090) min lb tensor(-0.03189564)
Number of Verified Splits: 18 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011047840118408203 
BICCOS Cumulative time: 0.011047840118408203
Preprocessing time: 0.009940147399902344 Inference time: 0.0007150173187255859 Add cuts time: 0.00022935867309570312 Cut analysis time: 0.0001633167266845703
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5255    set_bounds 0.0091    solve 0.1184    add 0.0103    
Accumulated time: pickout 0.0003    decision 0.5255    set_bounds 0.0091    solve 0.1184    add 0.0103    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46]), tensor([-1.]), tensor([0]), tensor([4.12888612e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46]), tensor([1.]), tensor([0]), tensor([4.12888612e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0021719932556152344

all verified at 1th iter
Time: prepare 0.0003    bound 0.0097    transfer 0.0001    finalize 0.0001    func 0.0103    
Accumulated time: func 0.2191    prepare 0.0221    bound 0.1990    transfer 0.0020    finalize 0.0033    
After pruning, left:  0

Back to Regular BaB


Properties batch 5, size 1
Remaining timeout: 196.79443311691284
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 196.79437112808228
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 196.79432129859924
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 196.7943000793457
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.2057 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 182, vnnlib ID: 182 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-39.90199280, -44.40210342, -40.76707840, -43.34727097, -43.50157547,
         -44.47279358, -43.63641739, -44.64598465, -42.91106033, -44.25598907]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [505]; unstable size 505; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 505] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 505] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 505] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 148] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.55335236, 0.12430644, 2.72152376, 3.00824594, 3.66845274, 2.93544888,
         3.93169498, 2.25763535, 3.53325558]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0545 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 183, vnnlib ID: 183 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.65114021, -23.35434914, -17.16299438, -18.00729561, -16.22119331,
         -18.46559906, -16.77936554, -19.72109604, -21.88067436, -23.28927422]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [818]; unstable size 818; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 507, 1, 818] with unstable size 506 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 818] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 818] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [506]; unstable size 506; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 506] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 506] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.09171438,  3.97727203, -0.48304790,  0.36927646,  0.67224628,
         -1.08889961,  1.76183987,  2.47835660,  4.03331804]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.65114021, -23.35434914, -17.16299438, -18.00729561, -16.22119331,
         -18.46559906, -16.77936554, -19.72109604, -21.88067436, -23.28927422]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.52699089, -24.13881493, -17.97516441, -18.83475685, -17.27757835,
          -19.32626915, -17.26466370, -20.90072250, -22.71590424, -24.12178040],
         [-21.52699089, -24.13881493, -17.97516441, -18.83475685, -17.27757835,
          -19.32626915, -17.26466370, -20.90072250, -22.71590424, -24.12178040]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.69758606, -0.01291466]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0494 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 184, vnnlib ID: 184 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.96131706, -20.58467484, -24.37945938, -24.98764610, -24.46944046,
         -25.62986183, -27.33307266, -24.34143448, -19.32966995, -19.06360817]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [585]; unstable size 585; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 585] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 585] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 585] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 203] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.81747246,  0.87446880,  3.82560635,  4.56164360,  3.79659176,
          5.13659954,  6.65209723,  3.81942344, -1.01505280]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.96131706, -20.58467484, -24.37945938, -24.98764610, -24.46944046,
         -25.62986183, -27.33307266, -24.34143448, -19.32966995, -19.06360817]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.07253075, -20.96897125, -24.48687744, -25.10561180, -24.55494499,
          -25.78580666, -27.47519875, -24.59646225, -19.11740875, -19.64290428]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.52549553]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0055 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0688 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 185, vnnlib ID: 185 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.26067162, -13.01693153, -13.98059750, -14.13839722, -13.50657654,
         -14.73349571, -13.24168968, -14.22063255, -15.82023048, -12.07003784]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [650]; unstable size 650; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 234, 1, 650] with unstable size 233 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 650] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 650] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [233]; unstable size 233; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 233] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 233] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.41751957,  0.11600971,  0.06584835,  0.44963408, -0.42950106,
          0.86466193, -0.55640554,  0.24044418,  2.07411909]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.26067162, -13.01693153, -13.98059750, -14.13839722, -13.50657654,
         -14.73349571, -13.24168968, -14.22063255, -15.82023048, -12.07003784]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.88it/s]100%|██████████| 1/1 [00:00<00:00,  8.87it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.83787632, -12.90878677, -13.31283855, -13.55456448, -12.88510323,
          -14.10630894, -12.37308025, -13.75913048, -15.46708488, -12.04697514],
         [-15.83787632, -12.90878677, -13.31283855, -13.55456448, -12.88510323,
          -14.10630894, -12.37308025, -13.75913048, -15.46708488, -12.04697514]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.83812809, 0.32610512]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1154 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 5.902814865112305
alpha/beta optimization time: 1.2114942073822021
initial alpha-crown bounds: tensor([[ 2.50665474,  0.15565354,  0.15051508,  0.50773573, -0.35287333,
          0.92790413, -0.47352695,  0.32139444,  2.15935755]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.4735269546508789
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.62860465049744
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.62856602668762
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.62854313850403
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6285219192505
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.62850260734558
Verifying property 4 with 1 instances.
##### Instance 185 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.35287333]], device='cuda:0') need to verify.
Model prediction is: tensor([-16.26067162, -13.01693153, -13.98059750, -14.13839722, -13.50657654,
        -14.73349571, -13.24168968, -14.22063255, -15.82023048, -12.07003784],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.35287333]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 650
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 225
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 899
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010085105895996094
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3528728485107422
10 lb beta sum: 0.0, worst -0.3528752326965332
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0529    transfer 0.0001    finalize 0.0001    func 0.0534    
Accumulated time: func 0.0534    prepare 0.0002    bound 0.0529    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 13] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 69] 
split level 4: [/input-12, 4] 
split level 5: [/input-12, 2] 
split level 6: [/input-12, 90] 
split level 7: [/input-12, 29] 
split level 8: [/input-12, 38] 
split level 9: [/input-12, 79] 
split level 10: [/input-12, 34] 
split level 11: [/input-12, 12] 
split level 12: [/input-8, 1690] 
split level 13: [/input-12, 64] 
split level 14: [/input-12, 55] 
split level 15: [/input-8, 923] 
split level 16: [/input-8, 913] 
split level 17: [/input-8, 820] 
split level 18: [/input-8, 1693] 
split level 19: [/input-8, 1674] 
split level 20: [/input-8, 915] 
split level 21: [/input-8, 1966] 
split level 22: [/input-8, 1698] 
split level 23: [/input-8, 1714] 
split level 24: [/input-8, 336] 
split level 25: [/input-8, 249] 
split level 26: [/input-8, 240] 
split level 27: [/input-8, 930] 
split level 28: [/input, 3571] 
split level 29: [/input-8, 1323] 
split level 30: [/input-8, 1705] 
split level 31: [/input-8, 1934] 
split level 32: [/input-8, 1718] 
split level 33: [/input-8, 1713] 
split level 34: [/input-8, 1932] 
split level 35: [/input-8, 742] 
split level 36: [/input-8, 1676] 
split level 37: [/input-8, 250] 
split level 38: [/input-8, 1406] 
split level 39: [/input-8, 916] 
split level 40: [/input-8, 1951] 
split level 41: [/input-8, 242] 
split level 42: [/input-8, 1040] 
split level 43: [/input, 3572] 
split level 44: [/input-8, 305] 
split level 45: [/input-8, 239] 
split level 46: [/input-8, 750] 
split level 47: [/input-8, 300] 
split level 48: [/input, 2836] 
split level 49: [/input-8, 1704] 
split level 50: [/input-8, 1483] 
split level 51: [/input-8, 757] 
split level 52: [/input-8, 186] 
split level 53: [/input-8, 55] 
split level 54: [/input, 2167] 
split level 55: [/input, 328] 
split level 56: [/input, 2013] 
split level 57: [/input-8, 41] 
split level 58: [/input, 647] 
split level 59: [/input, 648] 
split level 60: [/input-8, 254] 
split level 61: [/input-8, 1954] 
split level 62: [/input, 2403] 
split level 63: [/input, 291] 
split level 64: [/input, 2787] 
split level 65: [/input, 1019] 
split level 66: [/input, 2004] 
split level 67: [/input, 2425] 
split level 68: [/input, 3794] 
split level 69: [/input, 3418] 
split level 70: [/input, 2340] 
split level 71: [/input-8, 331] 
split level 72: [/input, 343] 
split level 73: [/input-8, 2003] 
split level 74: [/input-8, 1634] 
split level 75: [/input, 2392] 
split level 76: [/input, 2007] 
split level 77: [/input, 1556] 
split level 78: [/input, 2933] 
split level 79: [/input-8, 581] 
split level 80: [/input, 1015] 
split level 81: [/input-8, 734] 
split level 82: [/input, 1350] 
split level 83: [/input, 856] 
split level 84: [/input-8, 398] 
split level 85: [/input-8, 1325] 
split level 86: [/input-8, 723] 
split level 87: [/input, 487] 
split level 88: [/input-8, 487] 
split level 89: [/input, 1013] 
split level 90: [/input, 490] 
split level 91: [/input-8, 479] 
split level 92: [/input, 3433] 
split level 93: [/input, 2835] 
split level 94: [/input, 2137] 
split level 95: [/input, 2552] 
split level 96: [/input, 2021] 
split level 97: [/input, 2002] 
split level 98: [/input-8, 246] 
split level 99: [/input, 2752] 
split level 100: [/input, 1020] 
split level 101: [/input, 312] 
split level 102: [/input, 2020] 
split level 103: [/input, 2556] 
split level 104: [/input, 2199] 
split level 105: [/input, 2006] 
split level 106: [/input, 2375] 
split level 107: [/input, 2010] 
split level 108: [/input, 2457] 
split level 109: [/input-8, 47] 
split level 110: [/input, 2949] 
split level 111: [/input, 3738] 
split level 112: [/input, 3481] 
split level 113: [/input-8, 765] 
split level 114: [/input, 83] 
split level 115: [/input, 2284] 
split level 116: [/input-8, 132] 
split level 117: [/input, 2339] 
split level 118: [/input-8, 2001] 
split level 119: [/input-8, 1311] 
split level 120: [/input, 2008] 
split level 121: [/input-8, 1245] 
split level 122: [/input, 2003] 
split level 123: [/input-8, 1383] 
split level 124: [/input-8, 1403] 
split level 125: [/input, 3384] 
split level 126: [/input, 2300] 
split level 127: [/input, 2768] 
split level 128: [/input, 3280] 
split level 129: [/input, 2553] 
split level 130: [/input, 2357] 
split level 131: [/input-8, 1646] 
split level 132: [/input, 3419] 
split level 133: [/input, 2409] 
split level 134: [/input, 327] 
split level 135: [/input, 486] 
split level 136: [/input, 3563] 
split level 137: [/input-8, 238] 
split level 138: [/input, 427] 
split level 139: [/input, 3788] 
split level 140: [/input, 348] 
split level 141: [/input, 1973] 
split level 142: [/input-8, 1204] 
split level 143: [/input, 3452] 
split level 144: [/input, 65] 
split level 145: [/input, 1348] 
split level 146: [/input, 2281] 
split level 147: [/input, 733] 
split level 148: [/input, 2147] 
split level 149: [/input, 817] 
split level 150: [/input, 2395] 
split level 151: [/input, 3300] 
split level 152: [/input, 701] 
split level 153: [/input, 858] 
split level 154: [/input, 396] 
split level 155: [/input, 2551] 
split level 156: [/input, 2180] 
split level 157: [/input, 791] 
split level 158: [/input, 1138] 
split level 159: [/input, 2341] 
split level 160: [/input, 2385] 
split level 161: [/input, 645] 
split level 162: [/input, 3785] 
split level 163: [/input, 2204] 
split level 164: [/input, 1851] 
split level 165: [/input, 2558] 
split level 166: [/input, 840] 
split level 167: [/input, 2882] 
split level 168: [/input, 824] 
split level 169: [/input, 2878] 
split level 170: [/input-8, 195] 
split level 171: [/input, 2098] 
split level 172: [/input-8, 1589] 
split level 173: [/input, 2087] 
split level 174: [/input, 859] 
split level 175: [/input, 2901] 
split level 176: [/input, 739] 
split level 177: [/input-8, 495] 
split level 178: [/input, 3264] 
split level 179: [/input, 2298] 
split level 180: [/input, 3279] 
split level 181: [/input, 651] 
split level 182: [/input, 2400] 
split level 183: [/input, 2417] 
split level 184: [/input, 813] 
split level 185: [/input, 2472] 
split level 186: [/input, 2297] 
split level 187: [/input-8, 1385] 
split level 188: [/input, 68] 
split level 189: [/input, 2277] 
split level 190: [/input, 3972] 
split level 191: [/input, 1003] 
split level 192: [/input, 2291] 
split level 193: [/input, 1251] 
split level 194: [/input, 2840] 
split level 195: [/input, 2302] 
split level 196: [/input, 2469] 
split level 197: [/input, 2849] 
split level 198: [/input, 3096] 
split level 199: [/input, 2912] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.35274314880371094
10 lb beta sum: 0.0, worst -0.35274457931518555
Time: prepare 0.0114    bound 0.0993    transfer 0.0022    finalize 0.0029    func 0.1184    
Accumulated time: func 0.1718    prepare 0.0215    bound 0.1522    transfer 0.0023    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.30290967) min lb tensor(-0.35273695)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01050877571105957 
BICCOS Cumulative time: 0.01050877571105957
Preprocessing time: 0.010021448135375977 Inference time: 0.00016355514526367188 Add cuts time: 8.416175842285156e-05 Cut analysis time: 0.0002396106719970703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.33611 (1), -0.33606 (1), -0.33556 (1), -0.33518 (1), -0.33511 (1), -0.33375 (1), -0.33347 (1), -0.33336 (1), -0.33115 (1), -0.33034 (1), -0.33017 (1), -0.33012 (1), -0.33011 (1), -0.32917 (1), -0.32910 (1), -0.32841 (1), -0.32839 (1), -0.32832 (1), -0.32715 (1), -0.32650 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5205    set_bounds 0.0088    solve 0.1185    add 0.0696    
Accumulated time: pickout 0.0003    decision 0.5205    set_bounds 0.0088    solve 0.1185    add 0.0696    
Current (lb-rhs): -0.33611345291137695
50 domains visited
Cumulative time: 0.786395788192749

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 13] [/input-12, 13] [/input-12, 46] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] 
split level 1: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 46] [/input-12, 4] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 90] [/input-12, 90] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2823028564453125
10 lb beta sum: 0.5416095852851868, worst -0.2655094861984253
Time: prepare 0.0073    bound 0.1183    transfer 0.0011    finalize 0.0028    func 0.1326    
Accumulated time: func 0.3043    prepare 0.0290    bound 0.2705    transfer 0.0035    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.22613287) min lb tensor(-0.26535428)
Number of Verified Splits: 54 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.015850543975830078 
BICCOS Cumulative time: 0.02635931968688965
Preprocessing time: 0.011947393417358398 Inference time: 0.0022401809692382812 Add cuts time: 0.0013184547424316406 Cut analysis time: 0.0003445148468017578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11971 (2), -0.11905 (2), -0.11862 (2), -0.11688 (2), -0.11497 (2), -0.11381 (2), -0.11171 (2), -0.10984 (2), -0.10826 (2), -0.10379 (2), -0.10367 (2), -0.10301 (2), -0.10166 (2), -0.09754 (2), -0.09689 (2), -0.09686 (2), -0.09447 (2), -0.09117 (2), -0.09099 (2), -0.09085 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0198    set_bounds 0.0127    solve 0.1326    add 0.0840    
Accumulated time: pickout 0.0014    decision 0.5403    set_bounds 0.0215    solve 0.2511    add 0.1536    
Current (lb-rhs): -0.11971390247344971
100 domains visited
Cumulative time: 1.052649736404419

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 13] [/input-12, 69] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] 
split level 1: [/input-12, 4] [/input-12, 69] [/input-12, 4] [/input-12, 69] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 2] [/input-12, 4] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 2] [/input-12, 69] [/input-12, 69] [/input-12, 2] [/input-12, 4] 
split level 3: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08434438705444336
10 lb beta sum: 0.5135010480880737, worst -0.017792224884033203
Time: prepare 0.0062    bound 0.1171    transfer 0.0011    finalize 0.0025    func 0.1295    
Accumulated time: func 0.4339    prepare 0.0355    bound 0.3876    transfer 0.0046    finalize 0.0083    
all_split False
======================Cut inference begins======================
max lb tensor(0.29333091) min lb tensor(-0.01512361)
Number of Verified Splits: 395 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03681015968322754 
BICCOS Cumulative time: 0.06316947937011719
Preprocessing time: 0.011528730392456055 Inference time: 0.018043994903564453 Add cuts time: 0.0070536136627197266 Cut analysis time: 0.0001838207244873047
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0152    solve 0.1296    add 0.0185    
Accumulated time: pickout 0.0024    decision 0.5599    set_bounds 0.0367    solve 0.3807    add 0.1721    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 13, 46]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([2.82952102e+16, 1.35568067e-01, 8.94222707e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 13, 46]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.82952102e+16, 1.35568067e-01, 1.68667004e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 13]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.82952102e+16, 2.34080836e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2,  4, 13]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([2.82952102e+16, 1.06083795e-01, 1.98321149e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2,  4, 13]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.82952102e+16, 1.06083795e-01, 2.19893619e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2,  4, 13]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.82952102e+16, 1.78118631e-01, 9.94745940e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2,  4, 13]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([2.82952102e+16, 1.78118631e-01, 2.22391769e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  7
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06003427505493164

all verified at 2th iter
Time: prepare 0.0004    bound 0.0147    transfer 0.0001    finalize 0.0002    func 0.0155    
Accumulated time: func 0.4494    prepare 0.0359    bound 0.4023    transfer 0.0047    finalize 0.0085    
After pruning, left:  0

Back to Regular BaB


Properties batch 5, size 1
Remaining timeout: 197.16379523277283
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.16372084617615
Verifying property 6 with 1 instances.
##### Instance 185 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.47352695]], device='cuda:0') need to verify.
Model prediction is: tensor([-16.26067162, -13.01693153, -13.98059750, -14.13839722, -13.50657654,
        -14.73349571, -13.24168968, -14.22063255, -15.82023048, -12.07003784],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.47352695]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 650
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 225
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 899
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.822845458984375e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4735274314880371
10 lb beta sum: 0.0, worst -0.47353458404541016
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0526    transfer 0.0001    finalize 0.0001    func 0.0531    
Accumulated time: func 0.0531    prepare 0.0002    bound 0.0526    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] 
split level 1: [/input-12, 0] 
split level 2: [/input-12, 83] 
split level 3: [/input-12, 38] 
split level 4: [/input-12, 29] 
split level 5: [/input-12, 4] 
split level 6: [/input-12, 13] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 46] 
split level 9: [/input-12, 12] 
split level 10: [/input-12, 58] 
split level 11: [/input-12, 90] 
split level 12: [/input-12, 69] 
split level 13: [/input-8, 1690] 
split level 14: [/input-8, 820] 
split level 15: [/input-8, 1966] 
split level 16: [/input-12, 79] 
split level 17: [/input-8, 1713] 
split level 18: [/input-12, 55] 
split level 19: [/input-8, 1693] 
split level 20: [/input-8, 1974] 
split level 21: [/input-8, 1676] 
split level 22: [/input-12, 6] 
split level 23: [/input-12, 34] 
split level 24: [/input-8, 1714] 
split level 25: [/input-8, 1698] 
split level 26: [/input-8, 1325] 
split level 27: [/input-8, 1718] 
split level 28: [/input-8, 1674] 
split level 29: [/input-8, 1687] 
split level 30: [/input-8, 1932] 
split level 31: [/input-8, 1951] 
split level 32: [/input-8, 1705] 
split level 33: [/input-8, 1704] 
split level 34: [/input-8, 601] 
split level 35: [/input-8, 1954] 
split level 36: [/input-8, 913] 
split level 37: [/input-8, 1323] 
split level 38: [/input-8, 923] 
split level 39: [/input, 2167] 
split level 40: [/input-8, 930] 
split level 41: [/input-8, 2003] 
split level 42: [/input-8, 1406] 
split level 43: [/input-8, 1934] 
split level 44: [/input-8, 588] 
split level 45: [/input, 2392] 
split level 46: [/input, 1350] 
split level 47: [/input-8, 621] 
split level 48: [/input-8, 750] 
split level 49: [/input, 2425] 
split level 50: [/input, 856] 
split level 51: [/input, 328] 
split level 52: [/input, 2137] 
split level 53: [/input-8, 1646] 
split level 54: [/input, 3433] 
split level 55: [/input, 872] 
split level 56: [/input, 3418] 
split level 57: [/input-8, 581] 
split level 58: [/input-8, 915] 
split level 59: [/input, 3571] 
split level 60: [/input, 3572] 
split level 61: [/input, 2199] 
split level 62: [/input, 1013] 
split level 63: [/input, 1661] 
split level 64: [/input-8, 595] 
split level 65: [/input-8, 742] 
split level 66: [/input, 2403] 
split level 67: [/input, 2552] 
split level 68: [/input-8, 336] 
split level 69: [/input-8, 1403] 
split level 70: [/input, 3452] 
split level 71: [/input-8, 331] 
split level 72: [/input, 1020] 
split level 73: [/input, 3794] 
split level 74: [/input, 857] 
split level 75: [/input-8, 1311] 
split level 76: [/input, 312] 
split level 77: [/input, 3419] 
split level 78: [/input, 3512] 
split level 79: [/input, 3384] 
split level 80: [/input-8, 757] 
split level 81: [/input-8, 1191] 
split level 82: [/input-8, 240] 
split level 83: [/input, 1019] 
split level 84: [/input-8, 879] 
split level 85: [/input, 2375] 
split level 86: [/input, 2004] 
split level 87: [/input, 2457] 
split level 88: [/input-8, 249] 
split level 89: [/input, 967] 
split level 90: [/input, 1348] 
split level 91: [/input, 2398] 
split level 92: [/input, 2340] 
split level 93: [/input, 2395] 
split level 94: [/input-8, 892] 
split level 95: [/input, 3496] 
split level 96: [/input, 2472] 
split level 97: [/input, 3785] 
split level 98: [/input-8, 250] 
split level 99: [/input, 348] 
split level 100: [/input, 2357] 
split level 101: [/input, 2204] 
split level 102: [/input, 2409] 
split level 103: [/input-8, 186] 
split level 104: [/input, 3563] 
split level 105: [/input, 2121] 
split level 106: [/input-8, 1720] 
split level 107: [/input, 2553] 
split level 108: [/input-8, 254] 
split level 109: [/input-8, 239] 
split level 110: [/input, 3788] 
split level 111: [/input, 2087] 
split level 112: [/input, 2327] 
split level 113: [/input, 2519] 
split level 114: [/input, 3278] 
split level 115: [/input, 2281] 
split level 116: [/input, 2275] 
split level 117: [/input, 858] 
split level 118: [/input, 1947] 
split level 119: [/input, 2284] 
split level 120: [/input, 2341] 
split level 121: [/input, 2836] 
split level 122: [/input, 487] 
split level 123: [/input, 2147] 
split level 124: [/input, 2020] 
split level 125: [/input, 824] 
split level 126: [/input, 2532] 
split level 127: [/input, 1466] 
split level 128: [/input, 2469] 
split level 129: [/input, 2949] 
split level 130: [/input, 2344] 
split level 131: [/input, 2558] 
split level 132: [/input, 2377] 
split level 133: [/input, 396] 
split level 134: [/input, 330] 
split level 135: [/input, 2933] 
split level 136: [/input, 951] 
split level 137: [/input, 327] 
split level 138: [/input, 3163] 
split level 139: [/input, 3804] 
split level 140: [/input, 2339] 
split level 141: [/input-8, 55] 
split level 142: [/input-8, 765] 
split level 143: [/input, 2277] 
split level 144: [/input, 840] 
split level 145: [/input-8, 1634] 
split level 146: [/input, 2007] 
split level 147: [/input, 486] 
split level 148: [/input, 2397] 
split level 149: [/input, 1901] 
split level 150: [/input, 1946] 
split level 151: [/input, 2180] 
split level 152: [/input, 2006] 
split level 153: [/input, 2473] 
split level 154: [/input, 1948] 
split level 155: [/input, 952] 
split level 156: [/input, 2300] 
split level 157: [/input, 3738] 
split level 158: [/input-8, 1285] 
split level 159: [/input, 859] 
split level 160: [/input, 2486] 
split level 161: [/input, 2298] 
split level 162: [/input, 739] 
split level 163: [/input-8, 479] 
split level 164: [/input, 1945] 
split level 165: [/input, 1902] 
split level 166: [/input, 2466] 
split level 167: [/input-8, 894] 
split level 168: [/input, 83] 
split level 169: [/input, 733] 
split level 170: [/input, 2122] 
split level 171: [/input, 2835] 
split level 172: [/input, 2291] 
split level 173: [/input, 2003] 
split level 174: [/input, 2302] 
split level 175: [/input-8, 1612] 
split level 176: [/input, 418] 
split level 177: [/input, 2211] 
split level 178: [/input-8, 246] 
split level 179: [/input, 3336] 
split level 180: [/input, 721] 
split level 181: [/input-8, 579] 
split level 182: [/input, 1894] 
split level 183: [/input-8, 495] 
split level 184: [/input, 3554] 
split level 185: [/input, 3279] 
split level 186: [/input, 2297] 
split level 187: [/input, 1893] 
split level 188: [/input, 3259] 
split level 189: [/input, 2008] 
split level 190: [/input, 2551] 
split level 191: [/input-8, 1924] 
split level 192: [/input, 2190] 
split level 193: [/input, 2098] 
split level 194: [/input, 2252] 
split level 195: [/input, 1958] 
split level 196: [/input, 2508] 
split level 197: [/input, 2501] 
split level 198: [/input, 2627] 
split level 199: [/input, 1895] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.47341394424438477
10 lb beta sum: 0.0, worst -0.47342538833618164
Time: prepare 0.0117    bound 0.0968    transfer 0.0011    finalize 0.0026    func 0.1147    
Accumulated time: func 0.1678    prepare 0.0216    bound 0.1494    transfer 0.0012    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.43399239) min lb tensor(-0.47341394)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.010352611541748047 
BICCOS Cumulative time: 0.010352611541748047
Preprocessing time: 0.009803295135498047 Inference time: 0.0002276897430419922 Add cuts time: 7.772445678710938e-05 Cut analysis time: 0.00024390220642089844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.45865 (1), -0.45846 (1), -0.45832 (1), -0.45812 (1), -0.45785 (1), -0.45761 (1), -0.45733 (1), -0.45583 (1), -0.45583 (1), -0.45566 (1), -0.45555 (1), -0.45477 (1), -0.45426 (1), -0.45220 (1), -0.45212 (1), -0.45116 (1), -0.44992 (1), -0.44945 (1), -0.44744 (1), -0.44692 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5175    set_bounds 0.0085    solve 0.1148    add 0.0686    
Accumulated time: pickout 0.0003    decision 0.5175    set_bounds 0.0085    solve 0.1148    add 0.0686    
Current (lb-rhs): -0.458648681640625
50 domains visited
Cumulative time: 0.7777070999145508

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input-12, 38] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] 
split level 2: [/input-12, 4] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 4] [/input-12, 4] [/input-12, 38] [/input-12, 38] [/input-12, 38] 
split level 3: [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 2] [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4105997085571289
10 lb beta sum: 1.04615318775177, worst -0.39881014823913574
Time: prepare 0.0072    bound 0.1179    transfer 0.0011    finalize 0.0023    func 0.1310    
Accumulated time: func 0.2988    prepare 0.0291    bound 0.2673    transfer 0.0022    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.28392577) min lb tensor(-0.39856261)
Number of Verified Splits: 107 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.018067359924316406 
BICCOS Cumulative time: 0.028419971466064453
Preprocessing time: 0.011749029159545898 Inference time: 0.004094123840332031 Add cuts time: 0.0018835067749023438 Cut analysis time: 0.0003407001495361328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20267 (2), -0.20267 (2), -0.20265 (2), -0.20169 (2), -0.19615 (2), -0.19583 (2), -0.19505 (2), -0.19374 (2), -0.19327 (2), -0.18703 (2), -0.18630 (2), -0.18154 (2), -0.18105 (2), -0.17890 (2), -0.17831 (2), -0.17828 (2), -0.17759 (2), -0.17728 (2), -0.17629 (2), -0.17227 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0129    solve 0.1311    add 0.0807    
Accumulated time: pickout 0.0014    decision 0.5371    set_bounds 0.0214    solve 0.2459    add 0.1493    
Current (lb-rhs): -0.2026745080947876
100 domains visited
Cumulative time: 1.0414481163024902

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 38] [/input-12, 0] [/input-12, 0] [/input-12, 0] 
split level 2: [/input-12, 4] [/input-12, 4] [/input-12, 38] [/input-12, 38] [/input-12, 13] [/input-12, 13] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 13] 
split level 3: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21434450149536133
10 lb beta sum: 1.2125385999679565, worst -0.20120596885681152
Time: prepare 0.0065    bound 0.1169    transfer 0.0011    finalize 0.0022    func 0.1292    
Accumulated time: func 0.4280    prepare 0.0358    bound 0.3842    transfer 0.0033    finalize 0.0071    
all_split False
======================Cut inference begins======================
max lb tensor(0.36011499) min lb tensor(-0.19960952)
Number of Verified Splits: 228 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 10
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.026736974716186523 
BICCOS Cumulative time: 0.05515694618225098
Preprocessing time: 0.01145315170288086 Inference time: 0.010543584823608398 Add cuts time: 0.0043337345123291016 Cut analysis time: 0.00040650367736816406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12969 (3), -0.12718 (3), -0.12715 (3), -0.12033 (3), -0.12027 (3), -0.11952 (3), -0.11462 (3), -0.11456 (3), -0.10395 (3), -0.10367 (3), -0.10366 (3), -0.10349 (3), -0.09986 (3), -0.09981 (3), -0.09956 (3), -0.09295 (3), -0.09293 (3), -0.08356 (3), -0.08336 (3), -0.08144 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0192    set_bounds 0.0155    solve 0.1293    add 0.0996    
Accumulated time: pickout 0.0023    decision 0.5563    set_bounds 0.0369    solve 0.3752    add 0.2488    
Current (lb-rhs): -0.1296887993812561
150 domains visited
Cumulative time: 1.3328475952148438

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 0] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 64] [/input-12, 0] [/input-12, 0] [/input-12, 0] 
split level 2: [/input-12, 4] [/input-12, 2] [/input-12, 4] [/input-12, 13] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 13] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-12, 13] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 90] [/input-12, 13] [/input-12, 13] [/input-12, 2] [/input-12, 13] [/input-12, 13] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1801748275756836
10 lb beta sum: 1.6400716304779053, worst -0.09964257478713989
Time: prepare 0.0065    bound 0.1329    transfer 0.0011    finalize 0.0021    func 0.1452    
Accumulated time: func 0.5732    prepare 0.0425    bound 0.5170    transfer 0.0045    finalize 0.0092    
all_split False
======================Cut inference begins======================
max lb tensor(0.48241234) min lb tensor(-0.09790397)
Number of Verified Splits: 361 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 17
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.041274309158325195 
BICCOS Cumulative time: 0.09643125534057617
Preprocessing time: 0.011489152908325195 Inference time: 0.018991470336914062 Add cuts time: 0.010255575180053711 Cut analysis time: 0.0005381107330322266
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0195    set_bounds 0.0155    solve 0.1453    add 0.1512    
Accumulated time: pickout 0.0032    decision 0.5758    set_bounds 0.0524    solve 0.5204    add 0.4000    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 64]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.82951758e+16, 6.02409244e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 64]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.82951758e+16, 6.07542247e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38,  2, 64]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([2.82951758e+16, 1.66148469e-01, 1.18065521e-01, 1.85633346e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38,  2, 64]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.82951758e+16, 1.66148469e-01, 1.18065521e-01, 8.12932700e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38,  2, 64]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.82951758e+16, 1.66148469e-01, 1.39508292e-01, 1.84987828e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38,  2, 64]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.82951758e+16, 1.66148469e-01, 1.39508292e-01, 8.43589753e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38, 64]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 2.22195074e-01, 2.27386162e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38, 64]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 2.22195074e-01, 7.56146163e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.40236806869506836
10 lb beta sum: 1.4212714433670044, worst -0.16862928867340088
Time: prepare 0.0004    bound 0.1276    transfer 0.0002    finalize 0.0002    func 0.1284    
Accumulated time: func 0.7016    prepare 0.0429    bound 0.6446    transfer 0.0046    finalize 0.0094    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 0] 
split level 1: [/input-12, 38] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 13] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 46] 
split level 6: [/input-12, 90] 
split level 7: [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 2.5855064392089844, worst 0.01379847526550293

all verified at 0th iter
Time: prepare 0.0096    bound 0.0049    transfer 0.0014    finalize 0.0012    func 0.0189    
Accumulated time: func 0.7205    prepare 0.0530    bound 0.6495    transfer 0.0060    finalize 0.0106    
all_split False
======================Cut inference begins======================
max lb tensor(1.19861627) min lb tensor(0.01379848)
Number of Verified Splits: 256 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 1-3: 17
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.00030994415283203125 
BICCOS Cumulative time: 0.0967411994934082
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0005    decision 0.0218    set_bounds 0.0206    solve 0.0189    add 0.0001    
Accumulated time: pickout 0.0037    decision 0.5977    set_bounds 0.0730    solve 0.5394    add 0.4001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
Cumulative time: 1.9178178310394287


Properties batch 7, size 1
Remaining timeout: 195.06883144378662
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 195.06875038146973
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 4.9313 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 186, vnnlib ID: 186 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.58661270, -19.23237419, -17.80228806, -19.64345360, -18.73787880,
         -20.88980293, -20.24271202, -20.68834686, -12.61566162, -18.87177277]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [600]; unstable size 600; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 600] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 600] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 600] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 197] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.94333220, 5.41133165, 3.87400436, 5.60846615, 4.71442032, 6.68207359,
         6.00083208, 6.36807299, 5.18235540]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0359 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 187, vnnlib ID: 187 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
         -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1008]; unstable size 1008; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 327, 1, 1008] with unstable size 326 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 1008] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1008] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [326]; unstable size 326; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 326] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 326] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.10357356,  2.68191576, -0.13346767, -0.21289110, -0.43652606,
          0.26639271,  0.25994682,  0.99712348,  1.33664083]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
         -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.74it/s]100%|██████████| 1/1 [00:00<00:00,  8.74it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.90251732, -26.33744431, -23.53162193, -23.43214035, -23.35580063,
          -24.08613586, -24.26792908, -25.13724709, -22.15360260, -24.83103943],
         [-22.90251732, -26.33744431, -23.53162193, -23.43214035, -23.35580063,
          -24.08613586, -24.26792908, -25.13724709, -22.15360260, -24.83103943]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.74891472, 1.37801933, 1.27853775, 1.20219803]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1174 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 5.630868434906006
alpha/beta optimization time: 1.219142198562622
initial alpha-crown bounds: tensor([[-0.02824748,  2.79288340, -0.02322054, -0.12002277, -0.32431316,
          0.37612605,  0.35790443,  1.15994823,  1.43981028]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 4 ; Worst class: (+ rhs) -0.3243131637573242
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.61485624313354
Verifying property 0 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02824748]], device='cuda:0') need to verify.
Model prediction is: tensor([-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
        -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02824748]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1008
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1349
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011038780212402344
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028244495391845703
10 lb beta sum: 0.0, worst -0.028252005577087402
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0528    transfer 0.0001    finalize 0.0001    func 0.0533    
Accumulated time: func 0.0533    prepare 0.0002    bound 0.0528    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 32] 
split level 1: [/input-12, 69] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 79] 
split level 6: [/input-12, 56] 
split level 7: [/input-12, 53] 
split level 8: [/input-12, 68] 
split level 9: [/input-8, 1643] 
split level 10: [/input-8, 1698] 
split level 11: [/input-12, 89] 
split level 12: [/input-8, 1060] 
split level 13: [/input-8, 1950] 
split level 14: [/input-12, 97] 
split level 15: [/input-8, 1707] 
split level 16: [/input-8, 1708] 
split level 17: [/input-8, 1635] 
split level 18: [/input-8, 1691] 
split level 19: [/input-8, 372] 
split level 20: [/input-8, 1699] 
split level 21: [/input-12, 71] 
split level 22: [/input-8, 626] 
split level 23: [/input-8, 1050] 
split level 24: [/input-8, 172] 
split level 25: [/input-8, 371] 
split level 26: [/input-8, 1067] 
split level 27: [/input-12, 78] 
split level 28: [/input-8, 611] 
split level 29: [/input-8, 627] 
split level 30: [/input-8, 1716] 
split level 31: [/input-12, 10] 
split level 32: [/input-8, 1948] 
split level 33: [/input-8, 1651] 
split level 34: [/input-8, 1693] 
split level 35: [/input-8, 1652] 
split level 36: [/input-8, 349] 
split level 37: [/input-12, 67] 
split level 38: [/input-8, 1764] 
split level 39: [/input-8, 1941] 
split level 40: [/input-8, 373] 
split level 41: [/input-8, 1634] 
split level 42: [/input-8, 612] 
split level 43: [/input-8, 1630] 
split level 44: [/input, 405] 
split level 45: [/input-8, 1402] 
split level 46: [/input-8, 276] 
split level 47: [/input-8, 1646] 
split level 48: [/input-8, 1243] 
split level 49: [/input-8, 1638] 
split level 50: [/input-8, 1945] 
split level 51: [/input, 3511] 
split level 52: [/input-8, 1404] 
split level 53: [/input-8, 302] 
split level 54: [/input, 3495] 
split level 55: [/input-8, 362] 
split level 56: [/input-8, 342] 
split level 57: [/input-8, 1057] 
split level 58: [/input-12, 35] 
split level 59: [/input-8, 1235] 
split level 60: [/input, 457] 
split level 61: [/input-8, 931] 
split level 62: [/input-8, 1627] 
split level 63: [/input, 423] 
split level 64: [/input, 2468] 
split level 65: [/input-8, 227] 
split level 66: [/input, 440] 
split level 67: [/input-8, 1660] 
split level 68: [/input-8, 1625] 
split level 69: [/input-8, 1301] 
split level 70: [/input, 2248] 
split level 71: [/input-8, 1642] 
split level 72: [/input, 2504] 
split level 73: [/input-8, 907] 
split level 74: [/input-8, 602] 
split level 75: [/input-8, 1626] 
split level 76: [/input, 2520] 
split level 77: [/input-8, 228] 
split level 78: [/input-8, 597] 
split level 79: [/input, 2488] 
split level 80: [/input-8, 481] 
split level 81: [/input, 2180] 
split level 82: [/input-8, 1958] 
split level 83: [/input-8, 871] 
split level 84: [/input, 948] 
split level 85: [/input, 2199] 
split level 86: [/input, 2247] 
split level 87: [/input-8, 1610] 
split level 88: [/input-8, 219] 
split level 89: [/input, 750] 
split level 90: [/input, 2246] 
split level 91: [/input, 1962] 
split level 92: [/input-8, 234] 
split level 93: [/input, 406] 
split level 94: [/input, 2505] 
split level 95: [/input, 2949] 
split level 96: [/input, 2172] 
split level 97: [/input-8, 111] 
split level 98: [/input-8, 163] 
split level 99: [/input, 2181] 
split level 100: [/input, 2214] 
split level 101: [/input, 390] 
split level 102: [/input-8, 863] 
split level 103: [/input, 2009] 
split level 104: [/input, 2010] 
split level 105: [/input-8, 1378] 
split level 106: [/input, 1991] 
split level 107: [/input-8, 1405] 
split level 108: [/input-8, 737] 
split level 109: [/input, 2263] 
split level 110: [/input-8, 750] 
split level 111: [/input, 2040] 
split level 112: [/input, 1994] 
split level 113: [/input-8, 473] 
split level 114: [/input, 81] 
split level 115: [/input, 3510] 
split level 116: [/input, 2473] 
split level 117: [/input, 988] 
split level 118: [/input, 2898] 
split level 119: [/input, 442] 
split level 120: [/input-8, 235] 
split level 121: [/input-8, 948] 
split level 122: [/input, 2042] 
split level 123: [/input, 972] 
split level 124: [/input, 3527] 
split level 125: [/input-8, 153] 
split level 126: [/input, 2264] 
split level 127: [/input, 1370] 
split level 128: [/input, 950] 
split level 129: [/input, 1978] 
split level 130: [/input-8, 1521] 
split level 131: [/input, 2008] 
split level 132: [/input, 1457] 
split level 133: [/input, 2011] 
split level 134: [/input, 2536] 
split level 135: [/input-8, 255] 
split level 136: [/input-8, 154] 
split level 137: [/input, 2506] 
split level 138: [/input-8, 1752] 
split level 139: [/input, 2266] 
split level 140: [/input, 3547] 
split level 141: [/input-8, 414] 
split level 142: [/input-8, 432] 
split level 143: [/input, 82] 
split level 144: [/input, 1992] 
split level 145: [/input-8, 218] 
split level 146: [/input-8, 1406] 
split level 147: [/input, 3526] 
split level 148: [/input, 3437] 
split level 149: [/input, 2250] 
split level 150: [/input, 939] 
split level 151: [/input-8, 1620] 
split level 152: [/input, 1993] 
split level 153: [/input-8, 1618] 
split level 154: [/input, 1362] 
split level 155: [/input, 2534] 
split level 156: [/input, 2202] 
split level 157: [/input-8, 248] 
split level 158: [/input, 2007] 
split level 159: [/input, 2533] 
split level 160: [/input-8, 1758] 
split level 161: [/input-8, 2035] 
split level 162: [/input-8, 119] 
split level 163: [/input, 1378] 
split level 164: [/input-8, 511] 
split level 165: [/input, 1975] 
split level 166: [/input, 2474] 
split level 167: [/input, 2930] 
split level 168: [/input, 2158] 
split level 169: [/input, 984] 
split level 170: [/input-8, 1364] 
split level 171: [/input-8, 790] 
split level 172: [/input-8, 949] 
split level 173: [/input, 2413] 
split level 174: [/input-8, 2034] 
split level 175: [/input-8, 1715] 
split level 176: [/input-8, 229] 
split level 177: [/input, 2262] 
split level 178: [/input, 2657] 
split level 179: [/input, 1946] 
split level 180: [/input, 2515] 
split level 181: [/input, 2458] 
split level 182: [/input, 663] 
split level 183: [/input, 2229] 
split level 184: [/input, 1976] 
split level 185: [/input, 1944] 
split level 186: [/input-8, 1667] 
split level 187: [/input-8, 447] 
split level 188: [/input, 2280] 
split level 189: [/input-8, 1045] 
split level 190: [/input, 1419] 
split level 191: [/input, 2139] 
split level 192: [/input, 1928] 
split level 193: [/input, 2269] 
split level 194: [/input-8, 1568] 
split level 195: [/input, 2417] 
split level 196: [/input, 2142] 
split level 197: [/input, 2245] 
split level 198: [/input, 2460] 
split level 199: [/input, 711] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028210163116455078
10 lb beta sum: 0.0, worst -0.028209686279296875
Time: prepare 0.0116    bound 0.1012    transfer 0.0022    finalize 0.0027    func 0.1204    
Accumulated time: func 0.1737    prepare 0.0218    bound 0.1540    transfer 0.0023    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.49938869) min lb tensor(-0.02820683)
Number of Verified Splits: 33 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.012158870697021484 
BICCOS Cumulative time: 0.012158870697021484
Preprocessing time: 0.009984970092773438 Inference time: 0.0012745857238769531 Add cuts time: 0.0003750324249267578 Cut analysis time: 0.0005242824554443359
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5295    set_bounds 0.0089    solve 0.1205    add 0.0099    
Accumulated time: pickout 0.0003    decision 0.5295    set_bounds 0.0089    solve 0.1205    add 0.0099    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([32]), tensor([-1.]), tensor([0]), tensor([5.91445781e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([32]), tensor([1.]), tensor([0]), tensor([5.91445781e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.008170843124389648

all verified at 1th iter
Time: prepare 0.0003    bound 0.0096    transfer 0.0001    finalize 0.0001    func 0.0101    
Accumulated time: func 0.1839    prepare 0.0221    bound 0.1636    transfer 0.0024    finalize 0.0030    
After pruning, left:  0

Back to Regular BaB


Properties batch 1, size 1
Remaining timeout: 197.69898462295532
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 197.69892287254333
Verifying property 2 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02322054]], device='cuda:0') need to verify.
Model prediction is: tensor([-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
        -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02322054]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1008
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1349
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010085105895996094
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02321481704711914
10 lb beta sum: 0.0, worst -0.023223876953125
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0527    transfer 0.0001    finalize 0.0001    func 0.0532    
Accumulated time: func 0.0532    prepare 0.0002    bound 0.0527    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] 
split level 1: [/input-12, 53] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 69] 
split level 4: [/input-12, 32] 
split level 5: [/input-12, 12] 
split level 6: [/input-12, 24] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 10] 
split level 9: [/input-12, 59] 
split level 10: [/input-8, 1643] 
split level 11: [/input-12, 68] 
split level 12: [/input-12, 90] 
split level 13: [/input-8, 1635] 
split level 14: [/input-8, 1707] 
split level 15: [/input-12, 79] 
split level 16: [/input-8, 1698] 
split level 17: [/input-8, 1699] 
split level 18: [/input-8, 1691] 
split level 19: [/input-8, 1307] 
split level 20: [/input-8, 1950] 
split level 21: [/input-8, 1693] 
split level 22: [/input-8, 276] 
split level 23: [/input-8, 1627] 
split level 24: [/input-8, 1948] 
split level 25: [/input-8, 1651] 
split level 26: [/input-8, 371] 
split level 27: [/input-8, 1652] 
split level 28: [/input-8, 931] 
split level 29: [/input-8, 372] 
split level 30: [/input-8, 737] 
split level 31: [/input-8, 947] 
split level 32: [/input-8, 1708] 
split level 33: [/input-8, 1660] 
split level 34: [/input-8, 602] 
split level 35: [/input-8, 1941] 
split level 36: [/input-8, 1638] 
split level 37: [/input-8, 1299] 
split level 38: [/input-8, 1947] 
split level 39: [/input-8, 1301] 
split level 40: [/input-8, 1659] 
split level 41: [/input-8, 1646] 
split level 42: [/input-8, 611] 
split level 43: [/input-8, 1634] 
split level 44: [/input-8, 1620] 
split level 45: [/input-8, 1945] 
split level 46: [/input-8, 948] 
split level 47: [/input-8, 172] 
split level 48: [/input-8, 1060] 
split level 49: [/input, 457] 
split level 50: [/input, 2468] 
split level 51: [/input, 423] 
split level 52: [/input-8, 898] 
split level 53: [/input-8, 1662] 
split level 54: [/input-8, 594] 
split level 55: [/input-8, 1642] 
split level 56: [/input-8, 477] 
split level 57: [/input, 663] 
split level 58: [/input-8, 1958] 
split level 59: [/input-8, 1716] 
split level 60: [/input, 3511] 
split level 61: [/input-8, 1626] 
split level 62: [/input-8, 342] 
split level 63: [/input, 440] 
split level 64: [/input-8, 941] 
split level 65: [/input-8, 593] 
split level 66: [/input, 948] 
split level 67: [/input, 1962] 
split level 68: [/input-8, 1764] 
split level 69: [/input-8, 587] 
split level 70: [/input, 2520] 
split level 71: [/input-8, 612] 
split level 72: [/input-8, 750] 
split level 73: [/input-8, 907] 
split level 74: [/input, 1991] 
split level 75: [/input-8, 373] 
split level 76: [/input, 3495] 
split level 77: [/input, 1978] 
split level 78: [/input, 2246] 
split level 79: [/input-8, 949] 
split level 80: [/input-8, 597] 
split level 81: [/input-8, 348] 
split level 82: [/input, 2504] 
split level 83: [/input, 2214] 
split level 84: [/input, 3546] 
split level 85: [/input-8, 1625] 
split level 86: [/input-8, 627] 
split level 87: [/input-8, 786] 
split level 88: [/input, 1004] 
split level 89: [/input-8, 781] 
split level 90: [/input, 3543] 
split level 91: [/input, 2248] 
split level 92: [/input, 2199] 
split level 93: [/input-8, 1618] 
split level 94: [/input-8, 1650] 
split level 95: [/input-8, 790] 
split level 96: [/input, 1994] 
split level 97: [/input, 2010] 
split level 98: [/input-8, 793] 
split level 99: [/input, 2247] 
split level 100: [/input, 2488] 
split level 101: [/input, 3560] 
split level 102: [/input, 1975] 
split level 103: [/input, 3526] 
split level 104: [/input, 3547] 
split level 105: [/input, 2263] 
split level 106: [/input, 3562] 
split level 107: [/input, 3563] 
split level 108: [/input-8, 1404] 
split level 109: [/input, 2536] 
split level 110: [/input, 984] 
split level 111: [/input, 988] 
split level 112: [/input, 442] 
split level 113: [/input-8, 899] 
split level 114: [/input, 2229] 
split level 115: [/input-8, 782] 
split level 116: [/input-8, 255] 
split level 117: [/input, 2505] 
split level 118: [/input, 2264] 
split level 119: [/input, 2009] 
split level 120: [/input, 2537] 
split level 121: [/input, 3510] 
split level 122: [/input, 3525] 
split level 123: [/input, 2040] 
split level 124: [/input, 1946] 
split level 125: [/input-12, 56] 
split level 126: [/input, 2473] 
split level 127: [/input-8, 234] 
split level 128: [/input-8, 780] 
split level 129: [/input, 3422] 
split level 130: [/input-8, 1235] 
split level 131: [/input, 2008] 
split level 132: [/input-8, 1715] 
split level 133: [/input, 1370] 
split level 134: [/input, 2266] 
split level 135: [/input-8, 785] 
split level 136: [/input, 2281] 
split level 137: [/input, 3524] 
split level 138: [/input, 1993] 
split level 139: [/input-8, 473] 
split level 140: [/input, 3527] 
split level 141: [/input, 1944] 
split level 142: [/input-8, 1658] 
split level 143: [/input-8, 1045] 
split level 144: [/input-8, 239] 
split level 145: [/input-8, 329] 
split level 146: [/input, 1992] 
split level 147: [/input-8, 481] 
split level 148: [/input, 2228] 
split level 149: [/input, 2007] 
split level 150: [/input, 2282] 
split level 151: [/input, 2011] 
split level 152: [/input-8, 248] 
split level 153: [/input, 972] 
split level 154: [/input-8, 796] 
split level 155: [/input-8, 1364] 
split level 156: [/input, 1977] 
split level 157: [/input, 2506] 
split level 158: [/input, 711] 
split level 159: [/input-8, 56] 
split level 160: [/input, 1976] 
split level 161: [/input, 2250] 
split level 162: [/input, 2280] 
split level 163: [/input, 987] 
split level 164: [/input, 1003] 
split level 165: [/input-8, 245] 
split level 166: [/input-8, 871] 
split level 167: [/input, 2534] 
split level 168: [/input, 2012] 
split level 169: [/input, 2245] 
split level 170: [/input, 406] 
split level 171: [/input-8, 474] 
split level 172: [/input, 3561] 
split level 173: [/input, 1960] 
split level 174: [/input, 2533] 
split level 175: [/input, 2262] 
split level 176: [/input, 2244] 
split level 177: [/input, 950] 
split level 178: [/input, 2540] 
split level 179: [/input-8, 231] 
split level 180: [/input, 1928] 
split level 181: [/input-8, 804] 
split level 182: [/input, 3409] 
split level 183: [/input, 3507] 
split level 184: [/input, 3437] 
split level 185: [/input, 2283] 
split level 186: [/input, 2551] 
split level 187: [/input-8, 218] 
split level 188: [/input-8, 330] 
split level 189: [/input-8, 235] 
split level 190: [/input-8, 1667] 
split level 191: [/input-8, 49] 
split level 192: [/input, 1974] 
split level 193: [/input, 2474] 
split level 194: [/input, 2532] 
split level 195: [/input-8, 254] 
split level 196: [/input, 2770] 
split level 197: [/input, 2269] 
split level 198: [/input, 678] 
split level 199: [/input, 2278] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023130416870117188
10 lb beta sum: 0.0, worst -0.023139476776123047
Time: prepare 0.0116    bound 0.0988    transfer 0.0017    finalize 0.0029    func 0.1176    
Accumulated time: func 0.1708    prepare 0.0216    bound 0.1516    transfer 0.0018    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.16038322) min lb tensor(-0.02312994)
Number of Verified Splits: 48 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.012844562530517578 
BICCOS Cumulative time: 0.012844562530517578
Preprocessing time: 0.009980201721191406 Inference time: 0.0018458366394042969 Add cuts time: 0.0008318424224853516 Cut analysis time: 0.00018668174743652344
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5222    set_bounds 0.0090    solve 0.1177    add 0.0101    
Accumulated time: pickout 0.0003    decision 0.5222    set_bounds 0.0090    solve 0.1177    add 0.0101    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78]), tensor([-1.]), tensor([0]), tensor([1.49760240e-08]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78]), tensor([1.]), tensor([0]), tensor([1.49760240e-08]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.0056629180908203125

all verified at 0th iter
Time: prepare 0.0003    bound 0.0039    transfer 0.0001    finalize 0.0001    func 0.0045    
Accumulated time: func 0.1753    prepare 0.0219    bound 0.1555    transfer 0.0019    finalize 0.0032    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 196.80013704299927
Verifying property 3 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.12002277]], device='cuda:0') need to verify.
Model prediction is: tensor([-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
        -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.12002277]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1008
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1349
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.72747802734375e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12001848220825195
10 lb beta sum: 0.0, worst -0.12002253532409668
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0526    transfer 0.0001    finalize 0.0001    func 0.0530    
Accumulated time: func 0.0530    prepare 0.0002    bound 0.0526    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 12] 
split level 1: [/input-12, 90] 
split level 2: [/input-12, 2] 
split level 3: [/input-12, 10] 
split level 4: [/input-12, 68] 
split level 5: [/input-12, 53] 
split level 6: [/input-12, 67] 
split level 7: [/input-12, 79] 
split level 8: [/input-8, 1643] 
split level 9: [/input-12, 59] 
split level 10: [/input-12, 46] 
split level 11: [/input-8, 172] 
split level 12: [/input-12, 78] 
split level 13: [/input-8, 1698] 
split level 14: [/input-8, 1707] 
split level 15: [/input-8, 173] 
split level 16: [/input-8, 1651] 
split level 17: [/input-8, 1699] 
split level 18: [/input-8, 1630] 
split level 19: [/input-8, 372] 
split level 20: [/input-8, 371] 
split level 21: [/input-8, 276] 
split level 22: [/input-8, 1693] 
split level 23: [/input-8, 1659] 
split level 24: [/input-8, 898] 
split level 25: [/input-8, 1691] 
split level 26: [/input-8, 1635] 
split level 27: [/input-8, 1652] 
split level 28: [/input-8, 947] 
split level 29: [/input-8, 737] 
split level 30: [/input-8, 1301] 
split level 31: [/input-8, 1638] 
split level 32: [/input-8, 786] 
split level 33: [/input-8, 1646] 
split level 34: [/input-8, 626] 
split level 35: [/input-8, 1067] 
split level 36: [/input-8, 1610] 
split level 37: [/input-8, 1060] 
split level 38: [/input-8, 1662] 
split level 39: [/input-8, 785] 
split level 40: [/input-8, 907] 
split level 41: [/input-8, 611] 
split level 42: [/input, 457] 
split level 43: [/input-8, 908] 
split level 44: [/input-8, 507] 
split level 45: [/input-8, 1945] 
split level 46: [/input-8, 931] 
split level 47: [/input, 423] 
split level 48: [/input-8, 1299] 
split level 49: [/input-12, 69] 
split level 50: [/input-8, 1404] 
split level 51: [/input-8, 793] 
split level 52: [/input, 405] 
split level 53: [/input, 3495] 
split level 54: [/input-8, 612] 
split level 55: [/input-8, 1660] 
split level 56: [/input-8, 790] 
split level 57: [/input-8, 1708] 
split level 58: [/input, 3511] 
split level 59: [/input, 948] 
split level 60: [/input-8, 899] 
split level 61: [/input-8, 597] 
split level 62: [/input-8, 627] 
split level 63: [/input-8, 782] 
split level 64: [/input-8, 373] 
split level 65: [/input-8, 506] 
split level 66: [/input-8, 473] 
split level 67: [/input-8, 1650] 
split level 68: [/input-8, 593] 
split level 69: [/input-8, 1950] 
split level 70: [/input-8, 602] 
split level 71: [/input-8, 1625] 
split level 72: [/input-8, 948] 
split level 73: [/input-8, 1634] 
split level 74: [/input-8, 342] 
split level 75: [/input-8, 781] 
split level 76: [/input-8, 477] 
split level 77: [/input, 2468] 
split level 78: [/input-8, 1941] 
split level 79: [/input-8, 1618] 
split level 80: [/input-8, 348] 
split level 81: [/input, 663] 
split level 82: [/input-8, 788] 
split level 83: [/input-8, 1642] 
split level 84: [/input-8, 481] 
split level 85: [/input-8, 1764] 
split level 86: [/input-8, 163] 
split level 87: [/input-8, 879] 
split level 88: [/input, 1370] 
split level 89: [/input-8, 629] 
split level 90: [/input-8, 1667] 
split level 91: [/input-8, 779] 
split level 92: [/input-8, 505] 
split level 93: [/input-8, 466] 
split level 94: [/input, 971] 
split level 95: [/input-8, 871] 
split level 96: [/input, 440] 
split level 97: [/input-8, 1402] 
split level 98: [/input, 442] 
split level 99: [/input-8, 1620] 
split level 100: [/input, 2246] 
split level 101: [/input-8, 510] 
split level 102: [/input-8, 1406] 
split level 103: [/input, 3546] 
split level 104: [/input, 3526] 
split level 105: [/input-8, 1045] 
split level 106: [/input-8, 796] 
split level 107: [/input-8, 1715] 
split level 108: [/input, 2520] 
split level 109: [/input-8, 1626] 
split level 110: [/input, 3525] 
split level 111: [/input, 2247] 
split level 112: [/input-8, 780] 
split level 113: [/input, 3510] 
split level 114: [/input, 2214] 
split level 115: [/input, 969] 
split level 116: [/input, 3527] 
split level 117: [/input-8, 1605] 
split level 118: [/input, 750] 
split level 119: [/input, 2248] 
split level 120: [/input-8, 474] 
split level 121: [/input-8, 1658] 
split level 122: [/input-8, 1235] 
split level 123: [/input-8, 594] 
split level 124: [/input, 947] 
split level 125: [/input-8, 1947] 
split level 126: [/input, 3507] 
split level 127: [/input-8, 804] 
split level 128: [/input, 2504] 
split level 129: [/input, 2199] 
split level 130: [/input, 3547] 
split level 131: [/input-8, 490] 
split level 132: [/input, 2263] 
split level 133: [/input-8, 167] 
split level 134: [/input, 406] 
split level 135: [/input, 3524] 
split level 136: [/input, 3467] 
split level 137: [/input-8, 949] 
split level 138: [/input, 1978] 
split level 139: [/input, 2229] 
split level 140: [/input, 988] 
split level 141: [/input, 2488] 
split level 142: [/input-8, 941] 
split level 143: [/input-8, 750] 
split level 144: [/input-8, 329] 
split level 145: [/input, 2473] 
split level 146: [/input, 3422] 
split level 147: [/input, 984] 
split level 148: [/input, 972] 
split level 149: [/input-8, 328] 
split level 150: [/input, 1991] 
split level 151: [/input, 2209] 
split level 152: [/input, 2151] 
split level 153: [/input, 2264] 
split level 154: [/input-8, 1057] 
split level 155: [/input, 2266] 
split level 156: [/input-8, 1521] 
split level 157: [/input, 2250] 
split level 158: [/input, 2202] 
split level 159: [/input, 1354] 
split level 160: [/input, 3560] 
split level 161: [/input, 1994] 
split level 162: [/input-8, 863] 
split level 163: [/input-8, 1401] 
split level 164: [/input-8, 1405] 
split level 165: [/input, 1975] 
split level 166: [/input, 786] 
split level 167: [/input, 2226] 
split level 168: [/input-8, 1356] 
split level 169: [/input, 2506] 
split level 170: [/input-8, 154] 
split level 171: [/input, 1946] 
split level 172: [/input, 3409] 
split level 173: [/input, 3451] 
split level 174: [/input, 2536] 
split level 175: [/input, 711] 
split level 176: [/input, 3441] 
split level 177: [/input, 1976] 
split level 178: [/input, 790] 
split level 179: [/input-8, 457] 
split level 180: [/input, 1929] 
split level 181: [/input, 2474] 
split level 182: [/input-8, 119] 
split level 183: [/input, 1992] 
split level 184: [/input, 2460] 
split level 185: [/input, 2280] 
split level 186: [/input, 2458] 
split level 187: [/input, 987] 
split level 188: [/input, 2262] 
split level 189: [/input-8, 1958] 
split level 190: [/input, 2136] 
split level 191: [/input, 3437] 
split level 192: [/input, 2326] 
split level 193: [/input, 2149] 
split level 194: [/input, 678] 
split level 195: [/input, 1944] 
split level 196: [/input, 3561] 
split level 197: [/input, 2245] 
split level 198: [/input, 787] 
split level 199: [/input, 1977] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11991000175476074
10 lb beta sum: 0.0, worst -0.11991477012634277
Time: prepare 0.0117    bound 0.1033    transfer 0.0011    finalize 0.0027    func 0.1216    
Accumulated time: func 0.1746    prepare 0.0216    bound 0.1559    transfer 0.0012    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.48652983) min lb tensor(-0.11991000)
Number of Verified Splits: 7 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.012587547302246094 
BICCOS Cumulative time: 0.012587547302246094
Preprocessing time: 0.01180410385131836 Inference time: 0.0003464221954345703 Add cuts time: 0.00011849403381347656 Cut analysis time: 0.0003185272216796875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10394 (1), -0.10381 (1), -0.10380 (1), -0.10371 (1), -0.10096 (1), -0.10080 (1), -0.10064 (1), -0.10015 (1), -0.10008 (1), -0.10006 (1), -0.09958 (1), -0.09889 (1), -0.09836 (1), -0.09814 (1), -0.09750 (1), -0.09747 (1), -0.09692 (1), -0.09616 (1), -0.09552 (1), -0.09529 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5168    set_bounds 0.0096    solve 0.1217    add 0.0789    
Accumulated time: pickout 0.0003    decision 0.5168    set_bounds 0.0096    solve 0.1217    add 0.0789    
Current (lb-rhs): -0.10394477844238281
50 domains visited
Cumulative time: 0.7978644371032715

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 12] [/input-12, 12] [/input-12, 2] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 1: [/input-12, 2] [/input-12, 2] [/input-12, 53] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 2: [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 67] [/input-12, 53] 
split level 3: [/input-12, 79] [/input-12, 53] [/input-12, 79] [/input-12, 67] [/input-12, 67] [/input-12, 79] [/input-12, 53] [/input-12, 67] [/input-12, 79] [/input-12, 67] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08253097534179688

all verified at 3th iter
Time: prepare 0.0077    bound 0.0237    transfer 0.0011    finalize 0.0025    func 0.0374    
Accumulated time: func 0.2121    prepare 0.0295    bound 0.1796    transfer 0.0023    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.27384365) min lb tensor(6.81877136e-05)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03471255302429199 
BICCOS Cumulative time: 0.047300100326538086
Preprocessing time: 0.011960029602050781 Inference time: 0.014100074768066406 Add cuts time: 0.008468866348266602 Cut analysis time: 0.00018358230590820312
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0118    solve 0.0375    add 0.0151    
Accumulated time: pickout 0.0013    decision 0.5365    set_bounds 0.0214    solve 0.1592    add 0.0940    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53, 12]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.82952102e+16, 2.43944094e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53, 12]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.82952102e+16, 9.05237645e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53, 12]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.82952102e+16, 2.41997048e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53, 12]), tensor([1., 1.]), tensor([0, 0]), tensor([2.82952102e+16, 9.14109200e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.03120136260986328

all verified at 0th iter
Time: prepare 0.0003    bound 0.0041    transfer 0.0001    finalize 0.0002    func 0.0048    
Accumulated time: func 0.2168    prepare 0.0298    bound 0.1837    transfer 0.0024    finalize 0.0055    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 195.73136162757874
Verifying property 4 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.32431316]], device='cuda:0') need to verify.
Model prediction is: tensor([-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
        -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.32431316]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1008
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1349
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.393692016601562e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.324310302734375
10 lb beta sum: 0.0, worst -0.32430505752563477
Time: prepare 0.0002    bound 0.0878    transfer 0.0001    finalize 0.0001    func 0.0883    
Accumulated time: func 0.0883    prepare 0.0002    bound 0.0878    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] 
split level 1: [/input-12, 90] 
split level 2: [/input-12, 59] 
split level 3: [/input-12, 10] 
split level 4: [/input-12, 46] 
split level 5: [/input-12, 97] 
split level 6: [/input-12, 69] 
split level 7: [/input-12, 32] 
split level 8: [/input-12, 12] 
split level 9: [/input-12, 68] 
split level 10: [/input-12, 53] 
split level 11: [/input-12, 56] 
split level 12: [/input-12, 4] 
split level 13: [/input-12, 79] 
split level 14: [/input-12, 67] 
split level 15: [/input-8, 1643] 
split level 16: [/input-12, 78] 
split level 17: [/input-8, 172] 
split level 18: [/input-8, 173] 
split level 19: [/input-8, 1698] 
split level 20: [/input-8, 1691] 
split level 21: [/input-8, 371] 
split level 22: [/input-8, 372] 
split level 23: [/input-8, 1699] 
split level 24: [/input-8, 1950] 
split level 25: [/input-8, 931] 
split level 26: [/input-8, 1651] 
split level 27: [/input-8, 1307] 
split level 28: [/input-8, 737] 
split level 29: [/input-8, 1652] 
split level 30: [/input-8, 1635] 
split level 31: [/input-8, 1947] 
split level 32: [/input-8, 1693] 
split level 33: [/input-8, 1067] 
split level 34: [/input, 457] 
split level 35: [/input-8, 1941] 
split level 36: [/input-8, 1660] 
split level 37: [/input-8, 907] 
split level 38: [/input, 3495] 
split level 39: [/input, 948] 
split level 40: [/input-8, 1299] 
split level 41: [/input-8, 1707] 
split level 42: [/input-8, 1060] 
split level 43: [/input, 3511] 
split level 44: [/input-8, 373] 
split level 45: [/input-8, 1945] 
split level 46: [/input, 423] 
split level 47: [/input, 971] 
split level 48: [/input, 663] 
split level 49: [/input, 2468] 
split level 50: [/input-8, 898] 
split level 51: [/input-8, 348] 
split level 52: [/input-8, 1301] 
split level 53: [/input, 988] 
split level 54: [/input-8, 941] 
split level 55: [/input-8, 908] 
split level 56: [/input, 3546] 
split level 57: [/input, 2520] 
split level 58: [/input-8, 1642] 
split level 59: [/input, 1004] 
split level 60: [/input, 3510] 
split level 61: [/input, 3526] 
split level 62: [/input, 442] 
split level 63: [/input-8, 342] 
split level 64: [/input, 3543] 
split level 65: [/input, 1962] 
split level 66: [/input-8, 1764] 
split level 67: [/input, 440] 
split level 68: [/input, 3547] 
split level 69: [/input, 3525] 
split level 70: [/input-8, 948] 
split level 71: [/input, 969] 
split level 72: [/input, 1978] 
split level 73: [/input-8, 1646] 
split level 74: [/input, 1991] 
split level 75: [/input-8, 255] 
split level 76: [/input-8, 163] 
split level 77: [/input-8, 1667] 
split level 78: [/input, 984] 
split level 79: [/input, 972] 
split level 80: [/input, 2246] 
split level 81: [/input, 947] 
split level 82: [/input, 3527] 
split level 83: [/input, 2214] 
split level 84: [/input, 2010] 
split level 85: [/input, 3562] 
split level 86: [/input-8, 234] 
split level 87: [/input-8, 899] 
split level 88: [/input, 2247] 
split level 89: [/input-8, 253] 
split level 90: [/input-8, 612] 
split level 91: [/input, 2263] 
split level 92: [/input, 3524] 
split level 93: [/input, 2504] 
split level 94: [/input, 987] 
split level 95: [/input, 2248] 
split level 96: [/input, 1994] 
split level 97: [/input, 2009] 
split level 98: [/input, 3563] 
split level 99: [/input, 2473] 
split level 100: [/input, 2264] 
split level 101: [/input, 998] 
split level 102: [/input, 3507] 
split level 103: [/input, 2199] 
split level 104: [/input, 2537] 
split level 105: [/input, 2229] 
split level 106: [/input-8, 611] 
split level 107: [/input-8, 1650] 
split level 108: [/input, 3560] 
split level 109: [/input, 2536] 
split level 110: [/input, 1370] 
split level 111: [/input-8, 1958] 
split level 112: [/input, 2266] 
split level 113: [/input, 3422] 
split level 114: [/input-8, 329] 
split level 115: [/input, 1975] 
split level 116: [/input-8, 597] 
split level 117: [/input, 2008] 
split level 118: [/input, 2505] 
split level 119: [/input, 3438] 
split level 120: [/input, 406] 
split level 121: [/input, 2488] 
split level 122: [/input, 2202] 
split level 123: [/input-8, 2035] 
split level 124: [/input-8, 245] 
split level 125: [/input, 1946] 
split level 126: [/input-8, 793] 
split level 127: [/input-8, 1708] 
split level 128: [/input-8, 154] 
split level 129: [/input-8, 782] 
split level 130: [/input, 2281] 
split level 131: [/input, 2011] 
split level 132: [/input, 2007] 
split level 133: [/input-8, 328] 
split level 134: [/input, 3437] 
split level 135: [/input, 2282] 
split level 136: [/input, 1993] 
split level 137: [/input-8, 949] 
split level 138: [/input-8, 248] 
split level 139: [/input, 939] 
split level 140: [/input, 1992] 
split level 141: [/input-8, 790] 
split level 142: [/input-8, 1057] 
split level 143: [/input-8, 2034] 
split level 144: [/input-8, 239] 
split level 145: [/input, 2539] 
split level 146: [/input, 2250] 
split level 147: [/input, 2228] 
split level 148: [/input, 1976] 
split level 149: [/input, 2506] 
split level 150: [/input, 2012] 
split level 151: [/input, 803] 
split level 152: [/input, 2262] 
split level 153: [/input, 2474] 
split level 154: [/input, 1003] 
split level 155: [/input, 950] 
split level 156: [/input, 1362] 
split level 157: [/input, 2540] 
split level 158: [/input-8, 254] 
split level 159: [/input, 2458] 
split level 160: [/input, 2534] 
split level 161: [/input, 923] 
split level 162: [/input, 711] 
split level 163: [/input, 2283] 
split level 164: [/input, 2269] 
split level 165: [/input, 2245] 
split level 166: [/input-8, 217] 
split level 167: [/input, 3409] 
split level 168: [/input, 3561] 
split level 169: [/input, 1977] 
split level 170: [/input-8, 871] 
split level 171: [/input, 1960] 
split level 172: [/input-8, 785] 
split level 173: [/input-8, 1513] 
split level 174: [/input, 787] 
split level 175: [/input, 2533] 
split level 176: [/input-8, 251] 
split level 177: [/input, 1944] 
split level 178: [/input, 2280] 
split level 179: [/input-8, 1235] 
split level 180: [/input-8, 863] 
split level 181: [/input, 786] 
split level 182: [/input, 2014] 
split level 183: [/input-8, 231] 
split level 184: [/input, 2244] 
split level 185: [/input, 790] 
split level 186: [/input, 2142] 
split level 187: [/input, 2657] 
split level 188: [/input, 1974] 
split level 189: [/input, 3397] 
split level 190: [/input, 2006] 
split level 191: [/input, 2594] 
split level 192: [/input, 2898] 
split level 193: [/input-8, 49] 
split level 194: [/input, 82] 
split level 195: [/input, 2413] 
split level 196: [/input, 2278] 
split level 197: [/input-8, 473] 
split level 198: [/input, 2139] 
split level 199: [/input, 819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.32419371604919434
10 lb beta sum: 0.0, worst -0.3241922855377197
Time: prepare 0.0117    bound 0.0970    transfer 0.0022    finalize 0.0026    func 0.1161    
Accumulated time: func 0.2044    prepare 0.0215    bound 0.1849    transfer 0.0023    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.44236279) min lb tensor(-0.32418847)
Number of Verified Splits: 7 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.010696887969970703 
BICCOS Cumulative time: 0.010696887969970703
Preprocessing time: 0.009712696075439453 Inference time: 0.0002961158752441406 Add cuts time: 0.00010180473327636719 Cut analysis time: 0.0005862712860107422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30803 (1), -0.30783 (1), -0.30706 (1), -0.30703 (1), -0.30696 (1), -0.30653 (1), -0.30579 (1), -0.30577 (1), -0.30557 (1), -0.30473 (1), -0.30447 (1), -0.30382 (1), -0.30376 (1), -0.30141 (1), -0.29946 (1), -0.29911 (1), -0.29836 (1), -0.29713 (1), -0.29649 (1), -0.29503 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5163    set_bounds 0.0085    solve 0.1162    add 0.0702    
Accumulated time: pickout 0.0003    decision 0.5163    set_bounds 0.0085    solve 0.1162    add 0.0702    
Current (lb-rhs): -0.3080322742462158
50 domains visited
Cumulative time: 0.815030574798584

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 59] [/input-12, 59] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 69] [/input-12, 69] [/input-12, 53] [/input-12, 69] [/input-12, 69] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 69] [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.27242040634155273
10 lb beta sum: 1.3615096807479858, worst -0.2215244174003601
Time: prepare 0.0074    bound 0.1178    transfer 0.0011    finalize 0.0023    func 0.1312    
Accumulated time: func 0.3356    prepare 0.0291    bound 0.3027    transfer 0.0034    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.37184310) min lb tensor(-0.22145766)
Number of Verified Splits: 85 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.01712489128112793 
BICCOS Cumulative time: 0.027821779251098633
Preprocessing time: 0.011678457260131836 Inference time: 0.0031366348266601562 Add cuts time: 0.0019388198852539062 Cut analysis time: 0.00037097930908203125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07792 (2), -0.07767 (2), -0.07704 (2), -0.07691 (2), -0.07556 (2), -0.07528 (2), -0.07462 (2), -0.07446 (2), -0.07411 (2), -0.07243 (2), -0.07092 (2), -0.06993 (2), -0.06856 (2), -0.06745 (2), -0.06689 (2), -0.06372 (2), -0.06344 (2), -0.06338 (2), -0.06300 (2), -0.06241 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0126    solve 0.1313    add 0.0813    
Accumulated time: pickout 0.0014    decision 0.5358    set_bounds 0.0210    solve 0.2474    add 0.1515    
Current (lb-rhs): -0.07792341709136963
100 domains visited
Cumulative time: 1.0781021118164062

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 46] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 59] 
split level 2: [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 53] [/input-12, 53] [/input-12, 69] [/input-12, 46] 
split level 3: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 79] [/input-12, 79] [/input-12, 53] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1281299591064453
10 lb beta sum: 1.5393520593643188, worst -0.03537917137145996
Time: prepare 0.0069    bound 0.1345    transfer 0.0011    finalize 0.0026    func 0.1478    
Accumulated time: func 0.4833    prepare 0.0362    bound 0.4372    transfer 0.0045    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.36876643) min lb tensor(-0.03476655)
Number of Verified Splits: 387 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03574872016906738 
BICCOS Cumulative time: 0.06357049942016602
Preprocessing time: 0.011652946472167969 Inference time: 0.016610145568847656 Add cuts time: 0.007287740707397461 Cut analysis time: 0.00019788742065429688
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0153    solve 0.1479    add 0.0187    
Accumulated time: pickout 0.0024    decision 0.5552    set_bounds 0.0364    solve 0.3953    add 0.1703    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 53,  2]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 1.41401812e-01, 1.27636239e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 53,  2]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 1.41401812e-01, 1.29559681e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 53,  2]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 1.57477424e-01, 1.23916432e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 53,  2]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 1.57477424e-01, 1.29922673e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 59,  2]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 1.74028561e-01, 1.22428343e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 59,  2]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.82951758e+16, 1.74028561e-01, 4.24300879e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 59]), tensor([1., 1.]), tensor([0, 0]), tensor([2.82951758e+16, 2.72029579e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  7
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1318070888519287

all verified at 3th iter
Time: prepare 0.0004    bound 0.0198    transfer 0.0001    finalize 0.0002    func 0.0205    
Accumulated time: func 0.5039    prepare 0.0366    bound 0.4570    transfer 0.0046    finalize 0.0079    
After pruning, left:  0

Back to Regular BaB


Properties batch 5, size 1
Remaining timeout: 194.22604036331177
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 194.2257981300354
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 194.22576451301575
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 194.22574377059937
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 5.7744 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 188, vnnlib ID: 188 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.53459740, -20.49768829, -16.34491158, -18.79847145, -17.40628815,
         -19.14499092, -17.82529068, -20.38037872, -18.29029465, -19.59790993]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [480]; unstable size 480; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 239, 1, 480] with unstable size 238 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 480] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 480] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [238]; unstable size 238; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 238] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 238] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.72171795,  2.40926933,  1.62155735,  0.22273876,  1.79393649,
          0.73343164,  2.65353632,  0.41378766,  1.72563457]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.53459740, -20.49768829, -16.34491158, -18.79847145, -17.40628815,
         -19.14499092, -17.82529068, -20.38037872, -18.29029465, -19.59790993]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.48662758, -20.62913132, -16.81054306, -19.12439919, -17.79170799,
          -19.52311707, -18.19662857, -20.78978157, -18.31701279, -19.74012566]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.32391548]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0703 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 189, vnnlib ID: 189 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.10610676, -17.76342773, -12.52653217, -13.96433544, -11.74744606,
         -14.36178112, -12.99651241, -15.44241428, -18.03474236, -17.01032066]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [516]; unstable size 516; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 216, 1, 516] with unstable size 215 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 516] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 516] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [215]; unstable size 215; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 215] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.92541993,  3.79097605, -0.20490730,  0.89167619,  1.22881341,
         -0.10279578,  2.61780787,  4.21574497,  3.57154131]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.10610676, -17.76342773, -12.52653217, -13.96433544, -11.74744606,
         -14.36178112, -12.99651241, -15.44241428, -18.03474236, -17.01032066]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.91it/s]100%|██████████| 1/1 [00:00<00:00,  8.90it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.15584469, -17.83042526, -12.47017097, -14.04410172, -12.16684818,
          -14.42788124, -13.11213207, -15.65166855, -18.07901192, -17.04457092],
         [-15.15584469, -17.83042526, -12.47017097, -14.04410172, -12.16684818,
          -14.42788124, -13.11213207, -15.65166855, -18.07901192, -17.04457092]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.30332279, 0.94528389]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1150 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 18.441944122314453
alpha/beta optimization time: 1.2100539207458496
initial alpha-crown bounds: tensor([[ 1.97218180,  3.86037827, -0.17338097,  0.95068341,  1.30200839,
         -0.04648808,  2.66390920,  4.29102182,  3.62162971]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.17338097095489502
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.62848281860352
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.62844276428223
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6284191608429
Verifying property 2 with 1 instances.
##### Instance 189 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.17338097]], device='cuda:0') need to verify.
Model prediction is: tensor([-15.10610676, -17.76342773, -12.52653217, -13.96433544, -11.74744606,
        -14.36178112, -12.99651241, -15.44241428, -18.03474236, -17.01032066],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.17338097]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 516
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 211
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 750
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.894371032714844e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17337989807128906
10 lb beta sum: 0.0, worst -0.1733846664428711
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0531    transfer 0.0001    finalize 0.0001    func 0.0536    
Accumulated time: func 0.0536    prepare 0.0002    bound 0.0531    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] 
split level 1: [/input-12, 53] 
split level 2: [/input-12, 6] 
split level 3: [/input-12, 69] 
split level 4: [/input-12, 12] 
split level 5: [/input-12, 18] 
split level 6: [/input-12, 49] 
split level 7: [/input-8, 1962] 
split level 8: [/input-12, 15] 
split level 9: [/input-12, 38] 
split level 10: [/input-12, 7] 
split level 11: [/input-8, 1717] 
split level 12: [/input-8, 1947] 
split level 13: [/input-8, 579] 
split level 14: [/input-8, 1710] 
split level 15: [/input-8, 1691] 
split level 16: [/input-8, 478] 
split level 17: [/input-8, 1698] 
split level 18: [/input-8, 467] 
split level 19: [/input-8, 476] 
split level 20: [/input-8, 1701] 
split level 21: [/input-8, 1954] 
split level 22: [/input-8, 1500] 
split level 23: [/input-8, 1634] 
split level 24: [/input-8, 109] 
split level 25: [/input-12, 57] 
split level 26: [/input-8, 438] 
split level 27: [/input-8, 723] 
split level 28: [/input-8, 1964] 
split level 29: [/input-8, 452] 
split level 30: [/input-8, 1617] 
split level 31: [/input, 3253] 
split level 32: [/input-8, 1702] 
split level 33: [/input-8, 1356] 
split level 34: [/input-8, 420] 
split level 35: [/input-8, 430] 
split level 36: [/input-8, 486] 
split level 37: [/input-8, 1970] 
split level 38: [/input-8, 227] 
split level 39: [/input-8, 1298] 
split level 40: [/input-8, 733] 
split level 41: [/input-8, 900] 
split level 42: [/input-8, 84] 
split level 43: [/input-8, 1035] 
split level 44: [/input-8, 429] 
split level 45: [/input, 3254] 
split level 46: [/input-8, 1372] 
split level 47: [/input-8, 1485] 
split level 48: [/input-8, 1357] 
split level 49: [/input-8, 1605] 
split level 50: [/input-8, 91] 
split level 51: [/input-8, 630] 
split level 52: [/input-8, 898] 
split level 53: [/input-8, 923] 
split level 54: [/input-8, 174] 
split level 55: [/input-8, 584] 
split level 56: [/input-8, 1609] 
split level 57: [/input, 3067] 
split level 58: [/input-8, 450] 
split level 59: [/input-8, 280] 
split level 60: [/input, 235] 
split level 61: [/input, 2756] 
split level 62: [/input-8, 2004] 
split level 63: [/input-8, 1771] 
split level 64: [/input-8, 145] 
split level 65: [/input-8, 1355] 
split level 66: [/input, 636] 
split level 67: [/input-8, 406] 
split level 68: [/input-8, 794] 
split level 69: [/input, 1652] 
split level 70: [/input-8, 717] 
split level 71: [/input, 2266] 
split level 72: [/input, 2722] 
split level 73: [/input, 362] 
split level 74: [/input, 2987] 
split level 75: [/input-8, 1237] 
split level 76: [/input, 3382] 
split level 77: [/input-8, 1782] 
split level 78: [/input, 3506] 
split level 79: [/input, 2537] 
split level 80: [/input-8, 1549] 
split level 81: [/input-8, 1248] 
split level 82: [/input, 3492] 
split level 83: [/input, 3543] 
split level 84: [/input, 360] 
split level 85: [/input, 1463] 
split level 86: [/input, 1491] 
split level 87: [/input, 3478] 
split level 88: [/input, 2229] 
split level 89: [/input, 2482] 
split level 90: [/input-8, 747] 
split level 91: [/input-8, 189] 
split level 92: [/input, 364] 
split level 93: [/input, 234] 
split level 94: [/input, 1175] 
split level 95: [/input, 2759] 
split level 96: [/input, 2214] 
split level 97: [/input-8, 1026] 
split level 98: [/input, 3526] 
split level 99: [/input-8, 1635] 
split level 100: [/input, 3442] 
split level 101: [/input-8, 432] 
split level 102: [/input, 2199] 
split level 103: [/input, 2523] 
split level 104: [/input, 1483] 
split level 105: [/input, 940] 
split level 106: [/input, 594] 
split level 107: [/input, 1337] 
split level 108: [/input, 2476] 
split level 109: [/input, 2248] 
split level 110: [/input-8, 1387] 
split level 111: [/input, 596] 
split level 112: [/input-8, 1601] 
split level 113: [/input-8, 187] 
split level 114: [/input, 1129] 
split level 115: [/input-8, 346] 
split level 116: [/input-8, 80] 
split level 117: [/input, 2284] 
split level 118: [/input, 2247] 
split level 119: [/input, 2263] 
split level 120: [/input-8, 1825] 
split level 121: [/input, 3485] 
split level 122: [/input, 3892] 
split level 123: [/input, 3490] 
split level 124: [/input, 2226] 
split level 125: [/input, 2241] 
split level 126: [/input-8, 1380] 
split level 127: [/input, 198] 
split level 128: [/input, 2556] 
split level 129: [/input, 2774] 
split level 130: [/input-8, 981] 
split level 131: [/input-8, 434] 
split level 132: [/input, 3863] 
split level 133: [/input, 2539] 
split level 134: [/input, 1942] 
split level 135: [/input, 707] 
split level 136: [/input, 1144] 
split level 137: [/input, 2485] 
split level 138: [/input-8, 378] 
split level 139: [/input, 1112] 
split level 140: [/input, 1218] 
split level 141: [/input, 366] 
split level 142: [/input, 196] 
split level 143: [/input, 2180] 
split level 144: [/input, 3910] 
split level 145: [/input, 1494] 
split level 146: [/input, 2233] 
split level 147: [/input, 413] 
split level 148: [/input-8, 1534] 
split level 149: [/input, 2787] 
split level 150: [/input, 2441] 
split level 151: [/input, 2598] 
split level 152: [/input, 1544] 
split level 153: [/input, 3890] 
split level 154: [/input-8, 158] 
split level 155: [/input, 1669] 
split level 156: [/input, 2540] 
split level 157: [/input, 183] 
split level 158: [/input-8, 10] 
split level 159: [/input, 2007] 
split level 160: [/input, 2766] 
split level 161: [/input-8, 73] 
split level 162: [/input, 218] 
split level 163: [/input, 3093] 
split level 164: [/input-8, 1824] 
split level 165: [/input-8, 1682] 
split level 166: [/input, 2451] 
split level 167: [/input-12, 92] 
split level 168: [/input, 2513] 
split level 169: [/input, 877] 
split level 170: [/input-8, 1672] 
split level 171: [/input, 3021] 
split level 172: [/input-8, 1218] 
split level 173: [/input, 156] 
split level 174: [/input-8, 1995] 
split level 175: [/input-8, 440] 
split level 176: [/input-8, 1735] 
split level 177: [/input, 190] 
split level 178: [/input, 2929] 
split level 179: [/input, 546] 
split level 180: [/input, 862] 
split level 181: [/input, 1014] 
split level 182: [/input, 2910] 
split level 183: [/input, 2298] 
split level 184: [/input, 2668] 
split level 185: [/input-8, 1033] 
split level 186: [/input, 1235] 
split level 187: [/input, 2330] 
split level 188: [/input, 3437] 
split level 189: [/input, 2878] 
split level 190: [/input, 982] 
split level 191: [/input, 2478] 
split level 192: [/input, 3582] 
split level 193: [/input, 2548] 
split level 194: [/input, 2784] 
split level 195: [/input-8, 1379] 
split level 196: [/input, 846] 
split level 197: [/input, 1495] 
split level 198: [/input, 3335] 
split level 199: [/input-8, 362] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1733388900756836
10 lb beta sum: 0.0, worst -0.17332422733306885
Time: prepare 0.0117    bound 0.0993    transfer 0.0011    finalize 0.0027    func 0.1174    
Accumulated time: func 0.1710    prepare 0.0217    bound 0.1524    transfer 0.0012    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.01895174) min lb tensor(-0.17331839)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010305643081665039 
BICCOS Cumulative time: 0.010305643081665039
Preprocessing time: 0.009919404983520508 Inference time: 0.00011658668518066406 Add cuts time: 5.507469177246094e-05 Cut analysis time: 0.00021457672119140625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16248 (1), -0.16235 (1), -0.16214 (1), -0.16177 (1), -0.16122 (1), -0.16119 (1), -0.16111 (1), -0.16097 (1), -0.16011 (1), -0.15968 (1), -0.15933 (1), -0.15929 (1), -0.15788 (1), -0.15780 (1), -0.15772 (1), -0.15751 (1), -0.15748 (1), -0.15742 (1), -0.15736 (1), -0.15694 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5207    set_bounds 0.0096    solve 0.1175    add 0.0677    
Accumulated time: pickout 0.0003    decision 0.5207    set_bounds 0.0096    solve 0.1175    add 0.0677    
Current (lb-rhs): -0.16247916221618652
50 domains visited
Cumulative time: 0.7850468158721924

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] [/input-12, 53] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 53] [/input-12, 78] [/input-12, 78] [/input-12, 78] 
split level 1: [/input-12, 53] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 53] [/input-12, 53] [/input-12, 6] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 2: [/input-12, 6] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 6] [/input-12, 6] [/input-12, 69] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 3: [/input-12, 69] [/input-12, 49] [/input-12, 49] [/input-12, 49] [/input-12, 69] [/input-12, 69] [/input-12, 49] [/input-12, 49] [/input-12, 49] [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14616823196411133
10 lb beta sum: 0.34676826000213623, worst -0.14577257633209229
Time: prepare 0.0071    bound 0.1174    transfer 0.0016    finalize 0.0021    func 0.1308    
Accumulated time: func 0.3018    prepare 0.0290    bound 0.2698    transfer 0.0028    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.11064661) min lb tensor(-0.14573228)
Number of Verified Splits: 89 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.017254352569580078 
BICCOS Cumulative time: 0.027559995651245117
Preprocessing time: 0.01182103157043457 Inference time: 0.00336456298828125 Add cuts time: 0.0018811225891113281 Cut analysis time: 0.0001876354217529297
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0126    solve 0.1309    add 0.0152    
Accumulated time: pickout 0.0013    decision 0.5403    set_bounds 0.0221    solve 0.2484    add 0.0829    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78, 53]), tensor([-1., -1.]), tensor([0, 0]), tensor([7.14906179e-09, 1.16578788e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78, 53]), tensor([-1.,  1.]), tensor([0, 0]), tensor([7.14906179e-09, 1.24739021e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78, 53]), tensor([ 1., -1.]), tensor([0, 0]), tensor([4.45864856e-09, 8.75446647e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78, 53]), tensor([1., 1.]), tensor([0, 0]), tensor([4.45864856e-09, 9.90783423e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.012821614742279053

all verified at 1th iter
Time: prepare 0.0003    bound 0.0096    transfer 0.0001    finalize 0.0001    func 0.0103    
Accumulated time: func 0.3121    prepare 0.0294    bound 0.2794    transfer 0.0029    finalize 0.0051    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.45983290672302
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.45975732803345
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.4597339630127
Verifying property 5 with 1 instances.
##### Instance 189 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04648808]], device='cuda:0') need to verify.
Model prediction is: tensor([-15.10610676, -17.76342773, -12.52653217, -13.96433544, -11.74744606,
        -14.36178112, -12.99651241, -15.44241428, -18.03474236, -17.01032066],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04648808]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 516
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 211
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 750
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010037422180175781
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.046486228704452515
10 lb beta sum: 0.0, worst -0.04649466276168823
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0530    transfer 0.0001    finalize 0.0001    func 0.0534    
Accumulated time: func 0.0534    prepare 0.0002    bound 0.0530    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 49] 
split level 1: [/input-12, 42] 
split level 2: [/input-12, 18] 
split level 3: [/input-12, 15] 
split level 4: [/input-12, 78] 
split level 5: [/input-12, 38] 
split level 6: [/input-12, 53] 
split level 7: [/input-12, 6] 
split level 8: [/input-12, 12] 
split level 9: [/input-8, 584] 
split level 10: [/input-12, 57] 
split level 11: [/input-8, 1068] 
split level 12: [/input-8, 1698] 
split level 13: [/input-8, 227] 
split level 14: [/input-8, 478] 
split level 15: [/input-8, 1053] 
split level 16: [/input-8, 1035] 
split level 17: [/input-8, 1069] 
split level 18: [/input-8, 467] 
split level 19: [/input-8, 1041] 
split level 20: [/input-8, 630] 
split level 21: [/input, 3442] 
split level 22: [/input, 2891] 
split level 23: [/input-8, 822] 
split level 24: [/input-8, 1742] 
split level 25: [/input-8, 476] 
split level 26: [/input-8, 109] 
split level 27: [/input-8, 909] 
split level 28: [/input-8, 1691] 
split level 29: [/input-8, 452] 
split level 30: [/input, 2923] 
split level 31: [/input-8, 486] 
split level 32: [/input-8, 1714] 
split level 33: [/input-8, 379] 
split level 34: [/input-8, 1682] 
split level 35: [/input-8, 1485] 
split level 36: [/input, 373] 
split level 37: [/input-8, 1771] 
split level 38: [/input-8, 280] 
split level 39: [/input-8, 1995] 
split level 40: [/input-8, 900] 
split level 41: [/input-8, 1964] 
split level 42: [/input, 2513] 
split level 43: [/input-8, 2004] 
split level 44: [/input-8, 80] 
split level 45: [/input, 636] 
split level 46: [/input-8, 1701] 
split level 47: [/input, 1942] 
split level 48: [/input-8, 73] 
split level 49: [/input, 898] 
split level 50: [/input, 3485] 
split level 51: [/input-8, 1702] 
split level 52: [/input-8, 1161] 
split level 53: [/input, 1494] 
split level 54: [/input-8, 411] 
split level 55: [/input, 1463] 
split level 56: [/input-8, 450] 
split level 57: [/input, 2241] 
split level 58: [/input-8, 1357] 
split level 59: [/input-8, 1298] 
split level 60: [/input, 414] 
split level 61: [/input-8, 1970] 
split level 62: [/input, 1511] 
split level 63: [/input, 1927] 
split level 64: [/input, 2900] 
split level 65: [/input, 2987] 
split level 66: [/input, 169] 
split level 67: [/input-8, 1617] 
split level 68: [/input-8, 372] 
split level 69: [/input-8, 1710] 
split level 70: [/input, 2759] 
split level 71: [/input, 2117] 
split level 72: [/input-8, 1355] 
split level 73: [/input, 940] 
split level 74: [/input-8, 1782] 
split level 75: [/input-8, 579] 
split level 76: [/input, 1337] 
split level 77: [/input, 2917] 
split level 78: [/input, 1495] 
split level 79: [/input, 2405] 
split level 80: [/input, 2936] 
split level 81: [/input, 2266] 
split level 82: [/input, 2548] 
split level 83: [/input, 2162] 
split level 84: [/input-8, 1988] 
split level 85: [/input, 2910] 
split level 86: [/input, 362] 
split level 87: [/input, 218] 
split level 88: [/input-8, 1757] 
split level 89: [/input, 364] 
split level 90: [/input, 413] 
split level 91: [/input, 2909] 
split level 92: [/input-8, 1062] 
split level 93: [/input-8, 1668] 
split level 94: [/input-8, 1605] 
split level 95: [/input, 956] 
split level 96: [/input, 198] 
split level 97: [/input-8, 1051] 
split level 98: [/input-8, 72] 
split level 99: [/input-8, 1731] 
split level 100: [/input-8, 1634] 
split level 101: [/input, 915] 
split level 102: [/input-8, 1609] 
split level 103: [/input, 2482] 
split level 104: [/input, 75] 
split level 105: [/input, 1452] 
split level 106: [/input, 2263] 
split level 107: [/input, 555] 
split level 108: [/input, 3254] 
split level 109: [/input, 2774] 
split level 110: [/input, 137] 
split level 111: [/input, 3548] 
split level 112: [/input, 901] 
split level 113: [/input-8, 420] 
split level 114: [/input, 2180] 
split level 115: [/input, 217] 
split level 116: [/input, 86] 
split level 117: [/input, 1432] 
split level 118: [/input, 181] 
split level 119: [/input, 1331] 
split level 120: [/input, 596] 
split level 121: [/input, 2476] 
split level 122: [/input, 2248] 
split level 123: [/input, 1369] 
split level 124: [/input, 2878] 
split level 125: [/input, 2902] 
split level 126: [/input, 3490] 
split level 127: [/input, 594] 
split level 128: [/input, 420] 
split level 129: [/input, 790] 
split level 130: [/input, 914] 
split level 131: [/input, 366] 
split level 132: [/input, 3027] 
split level 133: [/input, 862] 
split level 134: [/input, 885] 
split level 135: [/input, 2539] 
split level 136: [/input, 877] 
split level 137: [/input-8, 378] 
split level 138: [/input, 2247] 
split level 139: [/input, 90] 
split level 140: [/input, 2947] 
split level 141: [/input, 2925] 
split level 142: [/input, 156] 
split level 143: [/input-8, 1358] 
split level 144: [/input, 907] 
split level 145: [/input, 1021] 
split level 146: [/input, 2950] 
split level 147: [/input, 234] 
split level 148: [/input, 1313] 
split level 149: [/input, 60] 
split level 150: [/input, 183] 
split level 151: [/input, 91] 
split level 152: [/input, 1652] 
split level 153: [/input-8, 1142] 
split level 154: [/input, 3013] 
split level 155: [/input, 2929] 
split level 156: [/input-8, 1033] 
split level 157: [/input-8, 717] 
split level 158: [/input, 974] 
split level 159: [/input, 3260] 
split level 160: [/input, 1669] 
split level 161: [/input, 2372] 
split level 162: [/input, 2218] 
split level 163: [/input, 2229] 
split level 164: [/input, 182] 
split level 165: [/input, 846] 
split level 166: [/input, 663] 
split level 167: [/input, 2510] 
split level 168: [/input, 2284] 
split level 169: [/input, 2451] 
split level 170: [/input, 773] 
split level 171: [/input, 2178] 
split level 172: [/input, 929] 
split level 173: [/input, 2007] 
split level 174: [/input, 2998] 
split level 175: [/input-8, 116] 
split level 176: [/input, 2441] 
split level 177: [/input, 2355] 
split level 178: [/input, 2286] 
split level 179: [/input, 2556] 
split level 180: [/input, 3437] 
split level 181: [/input, 214] 
split level 182: [/input, 2254] 
split level 183: [/input, 1299] 
split level 184: [/input, 109] 
split level 185: [/input, 261] 
split level 186: [/input, 632] 
split level 187: [/input-8, 1730] 
split level 188: [/input, 948] 
split level 189: [/input, 2189] 
split level 190: [/input, 2370] 
split level 191: [/input, 65] 
split level 192: [/input, 1346] 
split level 193: [/input, 3582] 
split level 194: [/input, 964] 
split level 195: [/input-8, 2007] 
split level 196: [/input, 3276] 
split level 197: [/input-8, 123] 
split level 198: [/input, 446] 
split level 199: [/input, 484] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04642370343208313
10 lb beta sum: 0.0, worst -0.04642042517662048
Time: prepare 0.0117    bound 0.0979    transfer 0.0022    finalize 0.0026    func 0.1169    
Accumulated time: func 0.1704    prepare 0.0215    bound 0.1509    transfer 0.0023    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.19992012) min lb tensor(-0.04641291)
Number of Verified Splits: 13 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010606765747070312 
BICCOS Cumulative time: 0.010606765747070312
Preprocessing time: 0.009761333465576172 Inference time: 0.0005211830139160156 Add cuts time: 0.00016641616821289062 Cut analysis time: 0.00015783309936523438
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5145    set_bounds 0.0088    solve 0.1170    add 0.0099    
Accumulated time: pickout 0.0003    decision 0.5145    set_bounds 0.0088    solve 0.1170    add 0.0099    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49]), tensor([-1.]), tensor([0]), tensor([2.36128415e-08]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49]), tensor([1.]), tensor([0]), tensor([3.34354322e-10]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.01937723159790039

all verified at 0th iter
Time: prepare 0.0003    bound 0.0039    transfer 0.0001    finalize 0.0001    func 0.0045    
Accumulated time: func 0.1748    prepare 0.0218    bound 0.1548    transfer 0.0024    finalize 0.0028    
After pruning, left:  0

Back to Regular BaB


Properties batch 6, size 1
Remaining timeout: 196.58784461021423
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 196.58778524398804
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 196.58776307106018
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.4123 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 190, vnnlib ID: 190 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.31871891, -18.47064972, -19.12639618, -20.47543144, -18.57441521,
         -21.48938560, -20.72224808, -20.14287567, -13.06752682, -17.90552711]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [738]; unstable size 738; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 738] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 738] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 738] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 239] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.85416585, 3.53390384, 4.32532692, 5.85610437, 3.81353569, 6.73792982,
         5.85599041, 5.13794851, 3.02939796]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0333 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 191, vnnlib ID: 191 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.47589493, -26.35393333, -20.38714218, -18.54223824, -19.56955147,
         -18.76048660, -21.12660980, -21.15067482, -25.07092285, -25.82291603]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [646]; unstable size 646; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 298, 1, 646] with unstable size 297 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 646] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 646] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [297]; unstable size 297; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 297] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 297] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.24239540,  5.63600874,  0.64621520, -0.16879284, -0.18126953,
          1.30519700,  1.09948564,  4.69383430,  5.11891603]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.47589493, -26.35393333, -20.38714218, -18.54223824, -19.56955147,
         -18.76048660, -21.12660980, -21.15067482, -25.07092285, -25.82291603]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.83it/s]100%|██████████| 1/1 [00:00<00:00,  8.82it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-24.64265060, -26.67287445, -20.56673622, -18.70374489, -19.68147850,
          -18.73836899, -21.39741135, -21.13756561, -25.31505966, -26.03724861],
         [-24.64265060, -26.67287445, -20.56673622, -18.70374489, -19.68147850,
          -18.73836899, -21.39741135, -21.13756561, -25.31505966, -26.03724861]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.97773361, 0.03462410]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1161 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 23.097370147705078
alpha/beta optimization time: 1.211841106414795
initial alpha-crown bounds: tensor([[ 4.31553078,  5.74813271,  0.69852722, -0.09507746, -0.16205470,
          1.35331535,  1.20960510,  4.79450607,  5.23488522]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.16205470263957977
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.60682725906372
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.60678625106812
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6067636013031
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.60674285888672
Verifying property 3 with 1 instances.
##### Instance 191 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.09507746]], device='cuda:0') need to verify.
Model prediction is: tensor([-24.47589493, -26.35393333, -20.38714218, -18.54223824, -19.56955147,
        -18.76048660, -21.12660980, -21.15067482, -25.07092285, -25.82291603],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.09507746]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 646
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 960
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010156631469726562
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09507584571838379
10 lb beta sum: 0.0, worst -0.09507626295089722
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0526    transfer 0.0001    finalize 0.0001    func 0.0530    
Accumulated time: func 0.0530    prepare 0.0002    bound 0.0526    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] 
split level 1: [/input-12, 4] 
split level 2: [/input-12, 17] 
split level 3: [/input-12, 56] 
split level 4: [/input-12, 97] 
split level 5: [/input-12, 2] 
split level 6: [/input-12, 90] 
split level 7: [/input-12, 83] 
split level 8: [/input-12, 10] 
split level 9: [/input-12, 79] 
split level 10: [/input-12, 31] 
split level 11: [/input-12, 72] 
split level 12: [/input-8, 1371] 
split level 13: [/input-8, 1682] 
split level 14: [/input-8, 1940] 
split level 15: [/input-8, 1379] 
split level 16: [/input-8, 1380] 
split level 17: [/input-8, 851] 
split level 18: [/input-8, 1069] 
split level 19: [/input-8, 1370] 
split level 20: [/input-8, 850] 
split level 21: [/input-8, 1196] 
split level 22: [/input-8, 1681] 
split level 23: [/input-8, 245] 
split level 24: [/input-8, 1388] 
split level 25: [/input-8, 204] 
split level 26: [/input-8, 1061] 
split level 27: [/input-8, 224] 
split level 28: [/input-8, 1362] 
split level 29: [/input-8, 1363] 
split level 30: [/input-8, 232] 
split level 31: [/input-8, 852] 
split level 32: [/input-8, 246] 
split level 33: [/input-8, 230] 
split level 34: [/input-8, 1373] 
split level 35: [/input-8, 1070] 
split level 36: [/input-8, 1386] 
split level 37: [/input-8, 1387] 
split level 38: [/input-8, 1932] 
split level 39: [/input-8, 2030] 
split level 40: [/input-8, 250] 
split level 41: [/input-8, 37] 
split level 42: [/input-8, 244] 
split level 43: [/input-12, 71] 
split level 44: [/input-8, 192] 
split level 45: [/input, 3180] 
split level 46: [/input-8, 860] 
split level 47: [/input-8, 1690] 
split level 48: [/input-8, 236] 
split level 49: [/input-8, 1374] 
split level 50: [/input-12, 35] 
split level 51: [/input-8, 249] 
split level 52: [/input-8, 1939] 
split level 53: [/input-8, 194] 
split level 54: [/input, 3181] 
split level 55: [/input-8, 1206] 
split level 56: [/input-8, 597] 
split level 57: [/input-8, 46] 
split level 58: [/input-8, 1636] 
split level 59: [/input-8, 2005] 
split level 60: [/input-8, 240] 
split level 61: [/input-8, 2024] 
split level 62: [/input, 3214] 
split level 63: [/input-8, 962] 
split level 64: [/input-8, 1749] 
split level 65: [/input-8, 1955] 
split level 66: [/input, 3008] 
split level 67: [/input-8, 410] 
split level 68: [/input, 122] 
split level 69: [/input-8, 39] 
split level 70: [/input-8, 1382] 
split level 71: [/input, 123] 
split level 72: [/input, 3195] 
split level 73: [/input-8, 1076] 
split level 74: [/input-8, 215] 
split level 75: [/input, 2835] 
split level 76: [/input-8, 1665] 
split level 77: [/input, 2670] 
split level 78: [/input-8, 1765] 
split level 79: [/input-8, 1260] 
split level 80: [/input, 1307] 
split level 81: [/input-8, 182] 
split level 82: [/input-8, 1252] 
split level 83: [/input-8, 1473] 
split level 84: [/input-8, 30] 
split level 85: [/input-8, 994] 
split level 86: [/input-8, 409] 
split level 87: [/input, 3275] 
split level 88: [/input, 3166] 
split level 89: [/input-8, 1585] 
split level 90: [/input-8, 1366] 
split level 91: [/input, 2884] 
split level 92: [/input-8, 1365] 
split level 93: [/input-8, 1078] 
split level 94: [/input-8, 1954] 
split level 95: [/input, 107] 
split level 96: [/input-8, 1569] 
split level 97: [/input, 121] 
split level 98: [/input, 2976] 
split level 99: [/input-8, 170] 
split level 100: [/input, 1400] 
split level 101: [/input-8, 207] 
split level 102: [/input-8, 1308] 
split level 103: [/input, 137] 
split level 104: [/input-8, 174] 
split level 105: [/input-8, 1057] 
split level 106: [/input, 905] 
split level 107: [/input, 3177] 
split level 108: [/input-8, 1775] 
split level 109: [/input, 1324] 
split level 110: [/input, 44] 
split level 111: [/input-8, 1079] 
split level 112: [/input, 2650] 
split level 113: [/input-8, 1785] 
split level 114: [/input-8, 1375] 
split level 115: [/input, 140] 
split level 116: [/input, 2074] 
split level 117: [/input, 139] 
split level 118: [/input, 449] 
split level 119: [/input-8, 320] 
split level 120: [/input-8, 1708] 
split level 121: [/input, 3034] 
split level 122: [/input-8, 367] 
split level 123: [/input, 1308] 
split level 124: [/input, 145] 
split level 125: [/input-8, 958] 
split level 126: [/input-8, 1391] 
split level 127: [/input, 3276] 
split level 128: [/input-8, 1354] 
split level 129: [/input, 2361] 
split level 130: [/input, 1003] 
split level 131: [/input, 921] 
split level 132: [/input, 2075] 
split level 133: [/input, 2339] 
split level 134: [/input-8, 352] 
split level 135: [/input, 3243] 
split level 136: [/input, 2664] 
split level 137: [/input-8, 1750] 
split level 138: [/input, 120] 
split level 139: [/input, 2031] 
split level 140: [/input, 956] 
split level 141: [/input, 489] 
split level 142: [/input, 1004] 
split level 143: [/input, 193] 
split level 144: [/input, 2347] 
split level 145: [/input, 24] 
split level 146: [/input, 873] 
split level 147: [/input, 2345] 
split level 148: [/input, 1399] 
split level 149: [/input, 2653] 
split level 150: [/input-8, 47] 
split level 151: [/input, 156] 
split level 152: [/input, 4042] 
split level 153: [/input, 28] 
split level 154: [/input, 162] 
split level 155: [/input, 491] 
split level 156: [/input, 968] 
split level 157: [/input, 2615] 
split level 158: [/input, 2109] 
split level 159: [/input, 92] 
split level 160: [/input, 862] 
split level 161: [/input, 2077] 
split level 162: [/input, 27] 
split level 163: [/input, 274] 
split level 164: [/input, 2068] 
split level 165: [/input, 957] 
split level 166: [/input, 2631] 
split level 167: [/input, 3242] 
split level 168: [/input, 889] 
split level 169: [/input, 3244] 
split level 170: [/input, 81] 
split level 171: [/input-8, 336] 
split level 172: [/input, 2599] 
split level 173: [/input, 3148] 
split level 174: [/input, 2363] 
split level 175: [/input, 2620] 
split level 176: [/input, 78] 
split level 177: [/input, 4043] 
split level 178: [/input, 310] 
split level 179: [/input, 2680] 
split level 180: [/input, 3049] 
split level 181: [/input, 2099] 
split level 182: [/input, 2696] 
split level 183: [/input, 797] 
split level 184: [/input, 2494] 
split level 185: [/input, 2366] 
split level 186: [/input, 105] 
split level 187: [/input, 445] 
split level 188: [/input, 2187] 
split level 189: [/input, 2381] 
split level 190: [/input, 2093] 
split level 191: [/input, 1020] 
split level 192: [/input, 2333] 
split level 193: [/input, 45] 
split level 194: [/input, 1374] 
split level 195: [/input, 2731] 
split level 196: [/input, 2477] 
split level 197: [/input, 2114] 
split level 198: [/input, 2604] 
split level 199: [/input, 464] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09498906135559082
10 lb beta sum: 0.0, worst -0.09498846530914307
Time: prepare 0.0114    bound 0.0989    transfer 0.0027    finalize 0.0031    func 0.1188    
Accumulated time: func 0.1718    prepare 0.0213    bound 0.1515    transfer 0.0028    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.19737232) min lb tensor(-0.09498549)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.011060476303100586 
BICCOS Cumulative time: 0.011060476303100586
Preprocessing time: 0.009937286376953125 Inference time: 0.0003788471221923828 Add cuts time: 0.0001246929168701172 Cut analysis time: 0.0006196498870849609
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08701 (1), -0.08692 (1), -0.08686 (1), -0.08682 (1), -0.08681 (1), -0.08678 (1), -0.08657 (1), -0.08651 (1), -0.08627 (1), -0.08614 (1), -0.08608 (1), -0.08604 (1), -0.08602 (1), -0.08600 (1), -0.08568 (1), -0.08556 (1), -0.08533 (1), -0.08529 (1), -0.08498 (1), -0.08402 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5201    set_bounds 0.0098    solve 0.1188    add 0.0699    
Accumulated time: pickout 0.0003    decision 0.5201    set_bounds 0.0098    solve 0.1188    add 0.0699    
Current (lb-rhs): -0.08700793981552124
50 domains visited
Cumulative time: 0.7875912189483643

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 4] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
split level 1: [/input-12, 4] [/input-12, 4] [/input-12, 17] [/input-12, 17] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 2: [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
split level 3: [/input-12, 90] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06346821784973145

all verified at 1th iter
Time: prepare 0.0073    bound 0.0116    transfer 0.0011    finalize 0.0025    func 0.0249    
Accumulated time: func 0.1967    prepare 0.0288    bound 0.1631    transfer 0.0039    finalize 0.0057    
all_split False
======================Cut inference begins======================
max lb tensor(0.19576016) min lb tensor(2.80141830e-05)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.034648895263671875 
BICCOS Cumulative time: 0.04570937156677246
Preprocessing time: 0.011835575103759766 Inference time: 0.014415979385375977 Add cuts time: 0.008213281631469727 Cut analysis time: 0.00018405914306640625
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0122    solve 0.0250    add 0.0150    
Accumulated time: pickout 0.0013    decision 0.5395    set_bounds 0.0219    solve 0.1439    add 0.0849    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([83, 59]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.82952102e+16, 5.47270030e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([83, 59]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.82952102e+16, 1.84509680e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([83, 59]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.82952102e+16, 1.55847117e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([83, 59]), tensor([1., 1.]), tensor([0, 0]), tensor([2.82952102e+16, 1.89725742e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.006880700588226318

all verified at 1th iter
Time: prepare 0.0003    bound 0.0101    transfer 0.0001    finalize 0.0002    func 0.0107    
Accumulated time: func 0.2074    prepare 0.0292    bound 0.1731    transfer 0.0040    finalize 0.0059    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 197.51097226142883
Verifying property 4 with 1 instances.
##### Instance 191 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.16205470]], device='cuda:0') need to verify.
Model prediction is: tensor([-24.47589493, -26.35393333, -20.38714218, -18.54223824, -19.56955147,
        -18.76048660, -21.12660980, -21.15067482, -25.07092285, -25.82291603],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.16205470]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 646
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 960
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.417533874511719e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1620543748140335
10 lb beta sum: 0.0, worst -0.16205506026744843
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    func 0.0529    
Accumulated time: func 0.0529    prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] 
split level 1: [/input-12, 2] 
split level 2: [/input-12, 10] 
split level 3: [/input-12, 8] 
split level 4: [/input-12, 90] 
split level 5: [/input-12, 97] 
split level 6: [/input-12, 17] 
split level 7: [/input-8, 908] 
split level 8: [/input-8, 868] 
split level 9: [/input-8, 875] 
split level 10: [/input-8, 930] 
split level 11: [/input-12, 56] 
split level 12: [/input-8, 909] 
split level 13: [/input-8, 20] 
split level 14: [/input-8, 1548] 
split level 15: [/input-12, 43] 
split level 16: [/input-8, 860] 
split level 17: [/input-8, 1052] 
split level 18: [/input-8, 869] 
split level 19: [/input-8, 853] 
split level 20: [/input-8, 1748] 
split level 21: [/input-8, 1259] 
split level 22: [/input-8, 1242] 
split level 23: [/input-8, 1756] 
split level 24: [/input-8, 877] 
split level 25: [/input-8, 861] 
split level 26: [/input-8, 852] 
split level 27: [/input-8, 1252] 
split level 28: [/input-8, 26] 
split level 29: [/input-8, 812] 
split level 30: [/input-8, 938] 
split level 31: [/input-8, 1363] 
split level 32: [/input-12, 59] 
split level 33: [/input-8, 918] 
split level 34: [/input, 3108] 
split level 35: [/input-8, 1379] 
split level 36: [/input-8, 1234] 
split level 37: [/input-8, 1061] 
split level 38: [/input-8, 1749] 
split level 39: [/input-8, 192] 
split level 40: [/input, 2629] 
split level 41: [/input-8, 1069] 
split level 42: [/input-8, 794] 
split level 43: [/input-8, 364] 
split level 44: [/input-8, 934] 
split level 45: [/input-8, 862] 
split level 46: [/input-8, 870] 
split level 47: [/input-8, 1362] 
split level 48: [/input-12, 79] 
split level 49: [/input-8, 336] 
split level 50: [/input-8, 1628] 
split level 51: [/input-8, 1260] 
split level 52: [/input-8, 1357] 
split level 53: [/input-8, 1371] 
split level 54: [/input-8, 1076] 
split level 55: [/input-8, 1932] 
split level 56: [/input-8, 358] 
split level 57: [/input-8, 224] 
split level 58: [/input-8, 1370] 
split level 59: [/input, 1315] 
split level 60: [/input-8, 1636] 
split level 61: [/input-8, 1373] 
split level 62: [/input-8, 101] 
split level 63: [/input-8, 1763] 
split level 64: [/input-8, 4] 
split level 65: [/input, 1332] 
split level 66: [/input-8, 1196] 
split level 67: [/input-8, 1387] 
split level 68: [/input-8, 344] 
split level 69: [/input, 1316] 
split level 70: [/input-8, 851] 
split level 71: [/input-8, 1618] 
split level 72: [/input-8, 854] 
split level 73: [/input, 1320] 
split level 74: [/input-8, 1354] 
split level 75: [/input-8, 174] 
split level 76: [/input-8, 1380] 
split level 77: [/input-8, 1633] 
split level 78: [/input-8, 1637] 
split level 79: [/input-8, 1365] 
split level 80: [/input-8, 1612] 
split level 81: [/input, 2581] 
split level 82: [/input-8, 1641] 
split level 83: [/input, 887] 
split level 84: [/input-8, 92] 
split level 85: [/input-8, 1765] 
split level 86: [/input-8, 1030] 
split level 87: [/input-8, 232] 
split level 88: [/input-8, 230] 
split level 89: [/input-8, 1625] 
split level 90: [/input-8, 215] 
split level 91: [/input-8, 2005] 
split level 92: [/input-8, 245] 
split level 93: [/input-8, 170] 
split level 94: [/input, 1815] 
split level 95: [/input, 3417] 
split level 96: [/input-8, 1386] 
split level 97: [/input, 1334] 
split level 98: [/input, 1351] 
split level 99: [/input-8, 109] 
split level 100: [/input, 1305] 
split level 101: [/input, 1400] 
split level 102: [/input-8, 887] 
split level 103: [/input, 889] 
split level 104: [/input-8, 1710] 
split level 105: [/input-8, 1388] 
split level 106: [/input, 855] 
split level 107: [/input-8, 1772] 
split level 108: [/input-8, 37] 
split level 109: [/input-8, 194] 
split level 110: [/input-8, 182] 
split level 111: [/input-8, 154] 
split level 112: [/input, 3539] 
split level 113: [/input-8, 1366] 
split level 114: [/input-8, 93] 
split level 115: [/input-8, 1374] 
split level 116: [/input-8, 207] 
split level 117: [/input, 1287] 
split level 118: [/input, 885] 
split level 119: [/input-8, 846] 
split level 120: [/input, 3142] 
split level 121: [/input-8, 1263] 
split level 122: [/input, 2394] 
split level 123: [/input, 905] 
split level 124: [/input-8, 249] 
split level 125: [/input-8, 1180] 
split level 126: [/input-8, 1976] 
split level 127: [/input, 2407] 
split level 128: [/input, 1399] 
split level 129: [/input, 2135] 
split level 130: [/input, 436] 
split level 131: [/input, 2134] 
split level 132: [/input, 1306] 
split level 133: [/input-8, 1382] 
split level 134: [/input, 1817] 
split level 135: [/input-8, 246] 
split level 136: [/input-8, 1404] 
split level 137: [/input, 533] 
split level 138: [/input-8, 1057] 
split level 139: [/input, 489] 
split level 140: [/input, 3444] 
split level 141: [/input-8, 175] 
split level 142: [/input-8, 845] 
split level 143: [/input-8, 1039] 
split level 144: [/input, 107] 
split level 145: [/input, 947] 
split level 146: [/input, 1079] 
split level 147: [/input, 3860] 
split level 148: [/input-8, 1676] 
split level 149: [/input-8, 240] 
split level 150: [/input-8, 947] 
split level 151: [/input-8, 473] 
split level 152: [/input, 2361] 
split level 153: [/input, 871] 
split level 154: [/input, 2696] 
split level 155: [/input, 2423] 
split level 156: [/input, 3034] 
split level 157: [/input, 53] 
split level 158: [/input, 2345] 
split level 159: [/input, 120] 
split level 160: [/input, 2680] 
split level 161: [/input, 310] 
split level 162: [/input-8, 1406] 
split level 163: [/input-8, 439] 
split level 164: [/input, 1307] 
split level 165: [/input-8, 510] 
split level 166: [/input, 27] 
split level 167: [/input, 1544] 
split level 168: [/input-8, 1540] 
split level 169: [/input-8, 797] 
split level 170: [/input, 535] 
split level 171: [/input, 362] 
split level 172: [/input-8, 250] 
split level 173: [/input-8, 1649] 
split level 174: [/input, 423] 
split level 175: [/input, 873] 
split level 176: [/input, 122] 
split level 177: [/input-8, 1350] 
split level 178: [/input-8, 1961] 
split level 179: [/input, 2624] 
split level 180: [/input, 2640] 
split level 181: [/input, 445] 
split level 182: [/input, 1080] 
split level 183: [/input-8, 102] 
split level 184: [/input, 2168] 
split level 185: [/input-8, 1668] 
split level 186: [/input, 85] 
split level 187: [/input-8, 1262] 
split level 188: [/input-8, 183] 
split level 189: [/input-8, 1939] 
split level 190: [/input, 2068] 
split level 191: [/input, 22] 
split level 192: [/input-8, 445] 
split level 193: [/input, 2072] 
split level 194: [/input-8, 352] 
split level 195: [/input, 1344] 
split level 196: [/input, 2391] 
split level 197: [/input, 1324] 
split level 198: [/input, 3049] 
split level 199: [/input-8, 863] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1620098054409027
10 lb beta sum: 0.0, worst -0.16200436651706696
Time: prepare 0.0118    bound 0.0981    transfer 0.0011    finalize 0.0026    func 0.1162    
Accumulated time: func 0.1691    prepare 0.0217    bound 0.1506    transfer 0.0012    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(-0.06769678) min lb tensor(-0.16200201)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.009919881820678711 
BICCOS Cumulative time: 0.009919881820678711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15805 (1), -0.15801 (1), -0.15788 (1), -0.15777 (1), -0.15770 (1), -0.15765 (1), -0.15764 (1), -0.15740 (1), -0.15722 (1), -0.15719 (1), -0.15663 (1), -0.15656 (1), -0.15656 (1), -0.15610 (1), -0.15590 (1), -0.15513 (1), -0.15512 (1), -0.15512 (1), -0.15501 (1), -0.15500 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5139    set_bounds 0.0088    solve 0.1163    add 0.0690    
Accumulated time: pickout 0.0003    decision 0.5139    set_bounds 0.0088    solve 0.1163    add 0.0690    
Current (lb-rhs): -0.15804587304592133
50 domains visited
Cumulative time: 0.7757511138916016

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 1: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 90] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 3: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-8, 868] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-8, 868] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1510952115058899
10 lb beta sum: 0.0, worst -0.1509455144405365
Time: prepare 0.0129    bound 0.0966    transfer 0.0011    finalize 0.0024    func 0.1155    
Accumulated time: func 0.2846    prepare 0.0348    bound 0.2472    transfer 0.0023    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.02657773) min lb tensor(-0.15093702)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012134313583374023 
BICCOS Cumulative time: 0.022054195404052734
Preprocessing time: 0.011645078659057617 Inference time: 0.0001780986785888672 Add cuts time: 8.106231689453125e-05 Cut analysis time: 0.0002300739288330078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06087 (2), -0.06086 (2), -0.06084 (2), -0.06082 (2), -0.06066 (2), -0.06055 (2), -0.06042 (2), -0.06038 (2), -0.06006 (2), -0.05974 (2), -0.05960 (2), -0.05929 (2), -0.05788 (2), -0.05771 (2), -0.05765 (2), -0.05761 (2), -0.05735 (2), -0.05602 (2), -0.05597 (2), -0.05584 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0122    solve 0.1156    add 0.0790    
Accumulated time: pickout 0.0013    decision 0.5334    set_bounds 0.0210    solve 0.2318    add 0.1480    
Current (lb-rhs): -0.06087435781955719
100 domains visited
Cumulative time: 1.0153639316558838

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 68] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 8] [/input-12, 8] [/input-12, 90] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-8, 868] [/input-12, 90] [/input-12, 90] 
split level 3: [/input-8, 1252] [/input-8, 868] [/input-8, 860] [/input-8, 1371] [/input-8, 868] [/input-8, 1252] [/input-12, 17] [/input-8, 860] [/input-12, 17] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05793614685535431
10 lb beta sum: 0.11694122850894928, worst -0.25163784623146057
Time: prepare 0.0069    bound 0.1170    transfer 0.0011    finalize 0.0021    func 0.1296    
Accumulated time: func 0.4142    prepare 0.0420    bound 0.3642    transfer 0.0034    finalize 0.0072    
all_split False
======================Cut inference begins======================
max lb tensor(0.21991113) min lb tensor(-0.05420637)
Number of Verified Splits: 143 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.020917177200317383 
BICCOS Cumulative time: 0.04297137260437012
Preprocessing time: 0.011676549911499023 Inference time: 0.006875514984130859 Add cuts time: 0.0020067691802978516 Cut analysis time: 0.00035834312438964844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02618 (3), -0.02600 (3), -0.02600 (3), -0.02574 (3), -0.02468 (3), -0.02411 (3), -0.02410 (3), -0.02371 (3), -0.02358 (3), -0.02330 (3), -0.02329 (3), -0.02328 (3), -0.02270 (3), -0.02268 (3), -0.02188 (3), -0.02151 (3), -0.02092 (3), -0.02057 (3), -0.02025 (3), -0.02013 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0194    set_bounds 0.0148    solve 0.1297    add 0.0929    
Accumulated time: pickout 0.0023    decision 0.5528    set_bounds 0.0359    solve 0.3615    add 0.2409    
Current (lb-rhs): -0.02617894858121872
150 domains visited
Cumulative time: 1.294297456741333

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 8] [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 17] [/input-12, 17] [/input-12, 10] [/input-12, 8] 
split level 2: [/input-12, 90] [/input-8, 868] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-12, 90] [/input-12, 17] 
split level 3: [/input-8, 868] [/input-8, 1252] [/input-8, 1371] [/input-8, 868] [/input-8, 1371] [/input-8, 1371] [/input-8, 1252] [/input-8, 1252] [/input-12, 17] [/input-8, 868] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029671072959899902
10 lb beta sum: 0.15581072866916656, worst -0.04386909306049347
Time: prepare 0.0070    bound 0.1189    transfer 0.0017    finalize 0.0024    func 0.1326    
Accumulated time: func 0.5468    prepare 0.0492    bound 0.4831    transfer 0.0051    finalize 0.0096    
all_split False
======================Cut inference begins======================
max lb tensor(0.11034134) min lb tensor(-0.02254184)
Number of Verified Splits: 225 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 5
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.02774190902709961 
BICCOS Cumulative time: 0.07071328163146973
Preprocessing time: 0.011717557907104492 Inference time: 0.011239767074584961 Add cuts time: 0.004315376281738281 Cut analysis time: 0.000469207763671875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01162 (4), -0.01139 (4), -0.01131 (4), -0.01128 (4), -0.01094 (4), -0.01089 (4), -0.01087 (4), -0.01058 (4), -0.01045 (4), -0.01036 (4), -0.01027 (4), -0.00995 (4), -0.00989 (4), -0.00970 (4), -0.00932 (4), -0.00868 (4), -0.00824 (4), -0.00814 (4), -0.00810 (4), -0.00797 (4), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0195    set_bounds 0.0142    solve 0.1326    add 0.2557    
Accumulated time: pickout 0.0032    decision 0.5723    set_bounds 0.0501    solve 0.4942    add 0.4966    
Current (lb-rhs): -0.01161956787109375
200 domains visited
Cumulative time: 1.7454023361206055

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-12, 17] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 17] [/input-12, 17] 
split level 2: [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-8, 868] [/input-8, 868] 
split level 3: [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 860] [/input-8, 860] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018809422850608826
10 lb beta sum: 0.6392165422439575, worst -0.2263849377632141
Time: prepare 0.0078    bound 0.1340    transfer 0.0012    finalize 0.0025    func 0.1480    
Accumulated time: func 0.6948    prepare 0.0573    bound 0.6170    transfer 0.0062    finalize 0.0120    
all_split False
======================Cut inference begins======================
max lb tensor(0.04802734) min lb tensor(-0.01084024)
Number of Verified Splits: 288 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.03187227249145508 
BICCOS Cumulative time: 0.1025855541229248
Preprocessing time: 0.011803150177001953 Inference time: 0.014680862426757812 Add cuts time: 0.004922628402709961 Cut analysis time: 0.00046563148498535156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00804 (5), -0.00803 (5), -0.00796 (5), -0.00796 (5), -0.00795 (5), -0.00795 (5), -0.00504 (5), -0.00490 (5), -0.00490 (5), -0.00314 (5), -0.00306 (5), -0.00305 (5), -0.00287 (5), -0.00281 (5), -0.00275 (5), -0.00016 (5), -0.00006 (5), -0.00005 (5), 
Length of domains: 18
Time: pickout 0.0011    decision 0.0198    set_bounds 0.0149    solve 0.1481    add 0.1107    
Accumulated time: pickout 0.0043    decision 0.5921    set_bounds 0.0650    solve 0.6423    add 0.6073    
Current (lb-rhs): -0.008043915033340454
218 domains visited
Cumulative time: 2.0721030235290527

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  8, 90,  2]), tensor([-1., -1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([5.50097190e-11, 2.09059287e-02, 2.07905769e-02, 2.04517357e-02,
        3.35795595e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  8, 90,  2]), tensor([-1., -1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([5.50097190e-11, 2.09059287e-02, 2.07905769e-02, 2.04517357e-02,
        3.26402262e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  8, 90,  2]), tensor([-1., -1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([5.50097190e-11, 2.09059287e-02, 2.07905769e-02, 1.46977343e-02,
        3.34398611e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  8, 90,  2]), tensor([-1., -1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([5.50097190e-11, 2.09059287e-02, 2.07905769e-02, 1.46977343e-02,
        3.51715833e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([860], [-1.0], [0], [0.00914205051958561], [3]), '/input-12': (tensor([68, 17,  8,  2]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([5.50097190e-11, 2.09059287e-02, 2.72032190e-02, 7.01110950e-03]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([860], [-1.0], [0], [0.00914205051958561], [3]), '/input-12': (tensor([68, 17,  8,  2]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.50097190e-11, 2.09059287e-02, 2.72032190e-02, 3.51698324e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([860], [1.0], [0], [5.902223154663488e-11], [3]), '/input-12': (tensor([68, 17,  8,  2]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([5.50097190e-11, 2.09059287e-02, 2.72032190e-02, 6.97323820e-03]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([860], [1.0], [0], [5.902223154663488e-11], [3]), '/input-12': (tensor([68, 17,  8,  2]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.50097190e-11, 2.09059287e-02, 2.72032190e-02, 3.58725488e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  2]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.50097190e-11, 7.31994351e-03, 6.67380681e-03]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  2]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([5.50097190e-11, 7.31994351e-03, 2.62186915e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68,  8]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.50097190e-11, 1.69062857e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68,  8]), tensor([1., 1.]), tensor([0, 0]), tensor([5.50097190e-11, 1.73320118e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1034138947725296
10 lb beta sum: 0.4764866530895233, worst -0.09314537048339844
Time: prepare 0.0005    bound 0.1307    transfer 0.0002    finalize 0.0002    func 0.1317    
Accumulated time: func 0.8265    prepare 0.0578    bound 0.7477    transfer 0.0065    finalize 0.0122    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 97] [/input-12, 8] [/input-12, 90] [/input-12, 10] 
split level 2: [/input-8, 868] [/input-12, 90] [/input-12, 17] [/input-12, 90] 
split level 3: [/input-8, 860] [/input-12, 97] [/input-8, 868] [/input-12, 17] 
split level 4: [/input-8, 1052] [/input-8, 868] [/input-8, 869] [/input-8, 868] 
split level 5: [/input-8, 1748] [/input-8, 860] [/input-8, 1052] [/input-8, 1052] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8635215759277344, worst -0.06448483467102051
10 lb beta sum: 0.864518940448761, worst -0.0641258955001831
Time: prepare 0.0112    bound 0.1297    transfer 0.0020    finalize 0.0016    func 0.1461    
Accumulated time: func 0.9726    prepare 0.0693    bound 0.8774    transfer 0.0084    finalize 0.0138    
all_split False
======================Cut inference begins======================
max lb tensor(0.24069650) min lb tensor(-0.06395537)
Number of Verified Splits: 192 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0003459453582763672 
BICCOS Cumulative time: 0.10293149948120117
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06396 (6), -0.06320 (6), -0.06222 (6), -0.06218 (6), -0.06046 (6), -0.05946 (6), -0.05871 (6), -0.05864 (6), -0.05772 (6), -0.05769 (6), -0.05709 (6), -0.05695 (6), -0.05576 (6), -0.05504 (6), -0.05469 (6), -0.05432 (6), -0.05431 (6), -0.05307 (6), -0.05115 (6), -0.05090 (6), 
Length of domains: 64
Time: pickout 0.0005    decision 0.0175    set_bounds 0.0214    solve 0.1462    add 0.0012    
Accumulated time: pickout 0.0048    decision 0.6096    set_bounds 0.0864    solve 0.7885    add 0.6085    
Current (lb-rhs): -0.06395536661148071
282 domains visited
Cumulative time: 2.4164717197418213

BaB round 2
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 97] [/input-12, 10] [/input-12, 10] [/input-12, 97] [/input-12, 10] [/input-8, 908] [/input-12, 10] [/input-12, 97] 
split level 1: [/input-12, 97] [/input-12, 97] [/input-8, 869] [/input-12, 97] [/input-12, 97] [/input-8, 869] [/input-12, 97] [/input-8, 861] [/input-12, 97] [/input-8, 909] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9124410152435303, worst -0.06222188472747803
10 lb beta sum: 0.9124410152435303, worst -0.06206387281417847
Time: prepare 0.0113    bound 0.1306    transfer 0.0008    finalize 0.0015    func 0.1461    
Accumulated time: func 1.1188    prepare 0.0807    bound 1.0080    transfer 0.0092    finalize 0.0153    
all_split False
======================Cut inference begins======================
max lb tensor(0.29424220) min lb tensor(-0.06197613)
Number of Verified Splits: 155 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.00034689903259277344 
BICCOS Cumulative time: 0.10327839851379395
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06198 (8), -0.06194 (8), -0.06138 (8), -0.06059 (8), -0.05849 (8), -0.05845 (8), -0.05794 (8), -0.05742 (8), -0.05689 (8), -0.05685 (8), -0.05577 (8), -0.05555 (8), -0.05500 (8), -0.05484 (8), -0.05464 (8), -0.05436 (8), -0.05398 (8), -0.05384 (8), -0.05235 (8), -0.05131 (8), 
Length of domains: 101
Time: pickout 0.0016    decision 0.0143    set_bounds 0.0144    solve 0.1462    add 0.0014    
Accumulated time: pickout 0.0064    decision 0.6239    set_bounds 0.1008    solve 0.9347    add 0.6099    
Current (lb-rhs): -0.06197613477706909
383 domains visited
Cumulative time: 2.595418691635132

BaB round 3
batch: 101
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-8, 908] [/input-12, 56] [/input-8, 908] [/input-12, 56] [/input-8, 20] [/input-8, 20] [/input-12, 56] [/input-8, 908] [/input-8, 908] 
split level 1: [/input-8, 909] [/input-12, 56] [/input-8, 909] [/input-12, 56] [/input-8, 909] [/input-8, 860] [/input-8, 909] [/input-8, 1052] [/input-8, 20] [/input-8, 1052] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8955904841423035, worst -0.05925166606903076
10 lb beta sum: 0.8955904841423035, worst -0.05914723873138428
Time: prepare 0.0179    bound 0.1546    transfer 0.0012    finalize 0.0024    func 0.1797    
Accumulated time: func 1.2985    prepare 0.0988    bound 1.1625    transfer 0.0104    finalize 0.0177    
all_split False
======================Cut inference begins======================
max lb tensor(0.02149773) min lb tensor(-0.05908263)
Number of Verified Splits: 108 of 404
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0004138946533203125 
BICCOS Cumulative time: 0.10369229316711426
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05908 (10), -0.05907 (10), -0.05834 (10), -0.05759 (10), -0.05564 (10), -0.05562 (10), -0.05495 (10), -0.05457 (10), -0.05402 (10), -0.05393 (10), -0.05272 (10), -0.05206 (10), -0.05202 (10), -0.05136 (10), -0.05129 (10), -0.05120 (10), -0.05080 (10), -0.05064 (10), -0.04867 (10), -0.04806 (10), 
Length of domains: 296
Time: pickout 0.0018    decision 0.0201    set_bounds 0.0218    solve 0.1799    add 0.0023    
Accumulated time: pickout 0.0082    decision 0.6439    set_bounds 0.1227    solve 1.1146    add 0.6122    
Current (lb-rhs): -0.059082627296447754
679 domains visited
Cumulative time: 2.82277774810791

BaB round 4
batch: 296
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 908] [/input-8, 860] [/input-8, 869] [/input-8, 869] [/input-8, 908] [/input-8, 1748] [/input-8, 869] [/input-8, 869] [/input-8, 908] [/input-8, 908] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9278510808944702, worst -0.056646764278411865
10 lb beta sum: 0.9278510808944702, worst -0.05657154321670532
Time: prepare 0.0260    bound 0.1395    transfer 0.0029    finalize 0.0029    func 0.1751    
Accumulated time: func 1.4736    prepare 0.1250    bound 1.3021    transfer 0.0133    finalize 0.0205    
all_split False
======================Cut inference begins======================
max lb tensor(0.00750911) min lb tensor(-0.05652791)
Number of Verified Splits: 83 of 592
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0003650188446044922 
BICCOS Cumulative time: 0.10405731201171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05653 (11), -0.05649 (11), -0.05610 (11), -0.05548 (11), -0.05309 (11), -0.05308 (11), -0.05303 (11), -0.05230 (11), -0.05202 (11), -0.05186 (11), -0.05143 (11), -0.05083 (11), -0.05049 (11), -0.05043 (11), -0.05027 (11), -0.05019 (11), -0.04975 (11), -0.04945 (11), -0.04917 (11), -0.04907 (11), 
Length of domains: 509
Time: pickout 0.0043    decision 0.0281    set_bounds 0.0254    solve 0.1753    add 0.0028    
Accumulated time: pickout 0.0125    decision 0.6721    set_bounds 0.1481    solve 1.2899    add 0.6150    
Current (lb-rhs): -0.056527912616729736
1188 domains visited
Cumulative time: 3.060131549835205

BaB round 5
batch: 509
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 909] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 909] [/input-8, 908] [/input-8, 1748] [/input-8, 1748] [/input-8, 909] [/input-8, 860] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9370875358581543, worst -0.05475473403930664
10 lb beta sum: 0.9370875358581543, worst -0.05469733476638794
Time: prepare 0.0442    bound 0.1416    transfer 0.0054    finalize 0.0055    func 0.2033    
Accumulated time: func 1.6769    prepare 0.1694    bound 1.4437    transfer 0.0187    finalize 0.0261    
all_split False
======================Cut inference begins======================
max lb tensor(0.02891433) min lb tensor(-0.05467451)
Number of Verified Splits: 158 of 1018
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0004596710205078125 
BICCOS Cumulative time: 0.10451698303222656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05467 (12), -0.05465 (12), -0.05279 (12), -0.05233 (12), -0.05210 (12), -0.05163 (12), -0.05122 (12), -0.05119 (12), -0.05016 (12), -0.04974 (12), -0.04958 (12), -0.04925 (12), -0.04896 (12), -0.04871 (12), -0.04851 (12), -0.04846 (12), -0.04842 (12), -0.04832 (12), -0.04779 (12), -0.04777 (12), 
Length of domains: 860
Time: pickout 0.0084    decision 0.0422    set_bounds 0.0422    solve 0.2036    add 0.0093    
Accumulated time: pickout 0.0209    decision 0.7143    set_bounds 0.1902    solve 1.4934    add 0.6243    
Current (lb-rhs): -0.054674506187438965
2048 domains visited
Cumulative time: 3.367723226547241

BaB round 6
batch: 860
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1932] [/input-8, 1252] [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 1932] [/input-8, 860] [/input-8, 1748] [/input-8, 860] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9437532424926758, worst -0.05168956518173218
10 lb beta sum: 0.9437532424926758, worst -0.051654040813446045
Time: prepare 0.0751    bound 0.1590    transfer 0.0056    finalize 0.0081    func 0.4208    
Accumulated time: func 2.0977    prepare 0.2447    bound 1.6027    transfer 0.0243    finalize 0.0341    
all_split False
======================Cut inference begins======================
max lb tensor(0.02008897) min lb tensor(-0.05164707)
Number of Verified Splits: 181 of 1720
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0005252361297607422 
BICCOS Cumulative time: 0.1050422191619873
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05165 (13), -0.05159 (13), -0.05129 (13), -0.05116 (13), -0.05038 (13), -0.04990 (13), -0.04967 (13), -0.04944 (13), -0.04939 (13), -0.04893 (13), -0.04863 (13), -0.04824 (13), -0.04811 (13), -0.04798 (13), -0.04777 (13), -0.04764 (13), -0.04753 (13), -0.04730 (13), -0.04681 (13), -0.04667 (13), 
Length of domains: 1539
Time: pickout 0.0138    decision 0.0583    set_bounds 0.0691    solve 0.4212    add 0.0112    
Accumulated time: pickout 0.0348    decision 0.7725    set_bounds 0.2593    solve 1.9146    add 0.6355    
Current (lb-rhs): -0.051647067070007324
3587 domains visited
Cumulative time: 3.944837808609009

BaB round 7
batch: 1539
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 908] [/input-8, 860] [/input-8, 938] [/input-8, 1932] [/input-8, 1252] [/input-8, 938] [/input-8, 1748] [/input-8, 1748] [/input-8, 938] [/input-8, 1748] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9472864866256714, worst -0.049601852893829346
10 lb beta sum: 0.9472864866256714, worst -0.049590468406677246
Time: prepare 0.1333    bound 0.2295    transfer 0.0102    finalize 0.0175    func 0.4103    
Accumulated time: func 2.5081    prepare 0.3783    bound 1.8322    transfer 0.0344    finalize 0.0517    
all_split False
======================Cut inference begins======================
max lb tensor(0.04611272) min lb tensor(-0.04958630)
Number of Verified Splits: 664 of 3078
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0004258155822753906 
BICCOS Cumulative time: 0.1054680347442627
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04959 (14), -0.04953 (14), -0.04904 (14), -0.04883 (14), -0.04851 (14), -0.04842 (14), -0.04829 (14), -0.04823 (14), -0.04802 (14), -0.04801 (14), -0.04775 (14), -0.04771 (14), -0.04767 (14), -0.04707 (14), -0.04695 (14), -0.04648 (14), -0.04637 (14), -0.04611 (14), -0.04603 (14), -0.04581 (14), 
Length of domains: 2414
Time: pickout 0.0198    decision 0.0955    set_bounds 0.1250    solve 0.4112    add 0.0179    
Accumulated time: pickout 0.0546    decision 0.8680    set_bounds 0.3843    solve 2.3259    add 0.6534    
Current (lb-rhs): -0.04958629608154297
6001 domains visited
Cumulative time: 4.621109247207642

BaB round 8
batch: 2414
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9489675760269165, worst -0.04749298095703125
10 lb beta sum: 0.9489675760269165, worst -0.047477126121520996
Time: prepare 0.2127    bound 0.3215    transfer 0.0381    finalize 0.0270    func 0.6302    
Accumulated time: func 3.1383    prepare 0.5912    bound 2.1537    transfer 0.0725    finalize 0.0787    
all_split False
======================Cut inference begins======================
max lb tensor(0.04686552) min lb tensor(-0.04747075)
Number of Verified Splits: 1825 of 4828
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0004591941833496094 
BICCOS Cumulative time: 0.1059272289276123
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04747 (15), -0.04698 (15), -0.04698 (15), -0.04690 (15), -0.04677 (15), -0.04661 (15), -0.04638 (15), -0.04625 (15), -0.04623 (15), -0.04617 (15), -0.04594 (15), -0.04587 (15), -0.04587 (15), -0.04580 (15), -0.04578 (15), -0.04562 (15), -0.04561 (15), -0.04544 (15), -0.04543 (15), -0.04511 (15), 
Length of domains: 3003
Time: pickout 0.0315    decision 0.1415    set_bounds 0.3434    solve 0.6319    add 0.0213    
Accumulated time: pickout 0.0861    decision 1.0096    set_bounds 0.7277    solve 2.9577    add 0.6747    
Current (lb-rhs): -0.04747074842453003
9004 domains visited
Cumulative time: 5.805086135864258

BaB round 9
batch: 3003
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 26] [/input-8, 1061] [/input-8, 26] [/input-8, 26] [/input-8, 1061] [/input-8, 26] [/input-8, 26] [/input-8, 1061] [/input-8, 26] [/input-8, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9491429328918457, worst -0.045870065689086914
10 lb beta sum: 0.9491429328918457, worst -0.04584145545959473
Time: prepare 0.2676    bound 0.3865    transfer 0.0185    finalize 0.0321    func 0.7443    
Accumulated time: func 3.8826    prepare 0.8591    bound 2.5402    transfer 0.0910    finalize 0.1108    
all_split False
======================Cut inference begins======================
max lb tensor(0.03756231) min lb tensor(-0.04582030)
Number of Verified Splits: 816 of 6006
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0006253719329833984 
BICCOS Cumulative time: 0.1065526008605957
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04582 (16), -0.04534 (16), -0.04533 (16), -0.04516 (16), -0.04512 (16), -0.04495 (16), -0.04467 (16), -0.04459 (16), -0.04458 (16), -0.04445 (16), -0.04428 (16), -0.04417 (16), -0.04414 (16), -0.04413 (16), -0.04413 (16), -0.04396 (16), -0.04395 (16), -0.04377 (16), -0.04370 (16), -0.04339 (16), 
Length of domains: 5190
Time: pickout 0.0538    decision 0.1715    set_bounds 0.4169    solve 0.7461    add 0.0322    
Accumulated time: pickout 0.1400    decision 1.1811    set_bounds 1.1446    solve 3.7038    add 0.7069    
Current (lb-rhs): -0.04582029581069946
14194 domains visited
Cumulative time: 7.2378458976745605

BaB round 10
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 938] [/input-8, 877] [/input-8, 1252] [/input-8, 938] [/input-8, 918] [/input-8, 918] [/input-8, 1363] [/input-8, 877] [/input-8, 1252] [/input-8, 1363] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9492664337158203, worst -0.044216811656951904
10 lb beta sum: 0.9492664337158203, worst -0.04421091079711914
Time: prepare 0.3621    bound 0.4944    transfer 0.0499    finalize 0.0453    func 1.0059    
Accumulated time: func 4.8885    prepare 1.2215    bound 3.0347    transfer 0.1409    finalize 0.1560    
all_split False
======================Cut inference begins======================
max lb tensor(0.03689945) min lb tensor(-0.04420865)
Number of Verified Splits: 1336 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0005040168762207031 
BICCOS Cumulative time: 0.1070566177368164
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04421 (17), -0.04373 (17), -0.04372 (17), -0.04352 (17), -0.04351 (17), -0.04334 (17), -0.04299 (17), -0.04296 (17), -0.04268 (17), -0.04253 (17), -0.04252 (17), -0.04235 (17), -0.04234 (17), -0.04228 (17), -0.04216 (17), -0.04207 (17), -0.04182 (16), -0.04180 (17), -0.04174 (17), -0.04152 (17), 
Length of domains: 7950
Time: pickout 0.0596    decision 0.2290    set_bounds 0.5563    solve 1.0074    add 0.0381    
Accumulated time: pickout 0.1996    decision 1.4101    set_bounds 1.7010    solve 4.7113    add 0.7450    
Current (lb-rhs): -0.044208645820617676
21050 domains visited
current_vram/total_varm: 11.0GB/99.9GB, batch_size increase to 8192
Cumulative time: 9.147072553634644

BaB round 11
batch: 7950
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1252] [/input-8, 26] [/input-12, 56] [/input-8, 26] [/input-8, 26] [/input-8, 26] [/input-8, 1748] [/input-8, 861] [/input-8, 1061] [/input-8, 861] 
cut re-enabled after branching node selection
0 lb beta sum: 0.949306309223175, worst -0.04276961088180542
10 lb beta sum: 0.949306309223175, worst -0.04276639223098755
Time: prepare 0.7048    bound 0.8959    transfer 0.1473    finalize 0.0809    func 1.9314    
Accumulated time: func 6.8199    prepare 1.9266    bound 3.9305    transfer 0.2882    finalize 0.2370    
all_split False
======================Cut inference begins======================
max lb tensor(0.03703898) min lb tensor(-0.04276496)
Number of Verified Splits: 2257 of 15900
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0005881786346435547 
BICCOS Cumulative time: 0.10764479637145996
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04276 (18), -0.04246 (18), -0.04225 (18), -0.04222 (18), -0.04199 (18), -0.04188 (18), -0.04151 (18), -0.04149 (18), -0.04117 (18), -0.04099 (18), -0.04096 (18), -0.04093 (18), -0.04084 (18), -0.04070 (18), -0.04047 (18), -0.04036 (18), -0.04028 (18), -0.04028 (18), -0.04024 (18), -0.04007 (18), 
Length of domains: 13643
Time: pickout 0.1451    decision 0.4448    set_bounds 1.0843    solve 1.9347    add 0.0901    
Accumulated time: pickout 0.3447    decision 1.8549    set_bounds 2.7852    solve 6.6460    add 0.8352    
Current (lb-rhs): -0.04276496171951294
34693 domains visited
Cumulative time: 12.888756275177002

BaB round 12
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1932] [/input-8, 877] [/input-8, 1932] [/input-8, 1748] [/input-8, 877] [/input-8, 1061] [/input-8, 1932] [/input-8, 26] [/input-8, 1932] [/input-8, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493063688278198, worst -0.04165464639663696
10 lb beta sum: 0.9493063688278198, worst -0.04165524244308472
Time: prepare 0.7287    bound 0.9197    transfer 0.1354    finalize 0.0817    func 1.9728    
Accumulated time: func 8.7927    prepare 2.6556    bound 4.8502    transfer 0.4235    finalize 0.3187    
all_split False
======================Cut inference begins======================
max lb tensor(0.02670920) min lb tensor(-0.04165316)
Number of Verified Splits: 2241 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0005691051483154297 
BICCOS Cumulative time: 0.10821390151977539
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04165 (19), -0.04112 (19), -0.04111 (19), -0.04086 (19), -0.04086 (19), -0.04047 (19), -0.04038 (19), -0.04036 (18), -0.04028 (18), -0.04028 (18), -0.04009 (19), -0.04005 (18), -0.04001 (18), -0.04001 (18), -0.03988 (18), -0.03985 (19), -0.03984 (19), -0.03980 (19), -0.03977 (18), -0.03975 (18), 
Length of domains: 19594
Time: pickout 0.1174    decision 0.6841    set_bounds 1.0001    solve 1.9765    add 0.0665    
Accumulated time: pickout 0.4621    decision 2.5390    set_bounds 3.7853    solve 8.6225    add 0.9017    
Current (lb-rhs): -0.04165315628051758
48836 domains visited
current_vram/total_varm: 24.7GB/99.9GB, batch_size increase to 16384
Cumulative time: 16.776183366775513

BaB round 13
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 918] [/input-8, 26] [/input-8, 1076] [/input-8, 1252] [/input-8, 1076] [/input-8, 1748] [/input-8, 918] [/input-8, 26] [/input-8, 1076] [/input-8, 877] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493063688278198, worst -0.038678646087646484
10 lb beta sum: 0.9493063688278198, worst -0.038651108741760254
Time: prepare 1.4631    bound 1.7737    transfer 0.3889    finalize 0.4758    func 4.3158    
Accumulated time: func 13.1085    prepare 4.1191    bound 6.6240    transfer 0.8124    finalize 0.7945    
all_split False
======================Cut inference begins======================
max lb tensor(0.00541562) min lb tensor(-0.03864211)
Number of Verified Splits: 5025 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0013356208801269531 
BICCOS Cumulative time: 0.10954952239990234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04165 (19), -0.04112 (19), -0.04111 (19), -0.04086 (19), -0.04086 (19), -0.04047 (19), -0.04038 (19), -0.04009 (19), -0.03985 (19), -0.03980 (19), -0.03945 (19), -0.03920 (19), -0.03893 (19), -0.03875 (19), -0.03865 (19), -0.03864 (19), -0.03862 (19), -0.03850 (19), -0.03838 (19), -0.03835 (19), 
Length of domains: 30953
Time: pickout 0.2377    decision 1.6877    set_bounds 1.7290    solve 4.3351    add 0.1494    
Accumulated time: pickout 0.6998    decision 4.2266    set_bounds 5.5143    solve 12.9575    add 1.0511    
Current (lb-rhs): -0.04165315628051758
76579 domains visited
current_vram/total_varm: 33.6GB/99.9GB, batch_size increase to 32768
Cumulative time: 25.001668691635132

BaB round 14
batch: 30953
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1061] [/input-8, 918] [/input-8, 877] [/input-8, 861] [/input-8, 861] [/input-8, 1061] [/input-8, 877] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] 
cut re-enabled after branching node selection
0 lb beta sum: 0.949306309223175, worst -0.03939253091812134
10 lb beta sum: 0.949306309223175, worst -0.0393829345703125
Time: prepare 2.7714    bound 3.2963    transfer 0.7171    finalize 0.3905    func 7.5793    
Accumulated time: func 20.6878    prepare 6.8909    bound 9.9203    transfer 1.5296    finalize 1.1850    
all_split False
======================Cut inference begins======================
max lb tensor(0.00873649) min lb tensor(-0.03937781)
Number of Verified Splits: 9843 of 61906
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0009996891021728516 
BICCOS Cumulative time: 0.1105492115020752
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03938 (20), -0.03885 (20), -0.03884 (20), -0.03870 (20), -0.03865 (20), -0.03858 (20), -0.03855 (20), -0.03826 (20), -0.03816 (20), -0.03814 (20), -0.03810 (20), -0.03791 (20), -0.03790 (20), -0.03786 (20), -0.03763 (20), -0.03757 (20), -0.03743 (20), -0.03742 (20), -0.03738 (20), -0.03735 (20), 
Length of domains: 52063
Time: pickout 0.5773    decision 3.8813    set_bounds 3.5957    solve 8.0402    add 0.1873    
Accumulated time: pickout 1.2771    decision 8.1079    set_bounds 9.1099    solve 20.9977    add 1.2384    
Current (lb-rhs): -0.039377808570861816
128642 domains visited
Cumulative time: 41.448052406311035

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 861] [/input-8, 1061] [/input-8, 1061] [/input-8, 1618] [/input-8, 1061] [/input-8, 1932] [/input-8, 861] [/input-8, 1252] [/input-8, 918] [/input-8, 861] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493063688278198, worst -0.03744107484817505
10 lb beta sum: 0.9493063688278198, worst -0.03741657733917236
Time: prepare 3.0191    bound 8.6833    transfer 0.7482    finalize 1.0478    func 13.9238    
Accumulated time: func 34.6117    prepare 9.9104    bound 18.6035    transfer 2.2777    finalize 2.2328    
all_split False
======================Cut inference begins======================
max lb tensor(0.01558778) min lb tensor(-0.03740710)
Number of Verified Splits: 11244 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0009133815765380859 
BICCOS Cumulative time: 0.11146259307861328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03741 (21), -0.03682 (21), -0.03674 (21), -0.03668 (21), -0.03662 (21), -0.03650 (21), -0.03646 (21), -0.03628 (21), -0.03612 (21), -0.03609 (21), -0.03601 (21), -0.03597 (21), -0.03596 (21), -0.03585 (21), -0.03585 (20), -0.03585 (21), -0.03582 (21), -0.03577 (21), -0.03577 (21), -0.03577 (21), 
Length of domains: 73587
Time: pickout 0.4811    decision 3.3414    set_bounds 3.9710    solve 13.9363    add 0.2427    
Accumulated time: pickout 1.7581    decision 11.4493    set_bounds 13.0809    solve 34.9340    add 1.4811    
Current (lb-rhs): -0.037407100200653076
182934 domains visited
Cumulative time: 63.627320289611816

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] [/input-8, 918] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493063688278198, worst -0.03518146276473999
10 lb beta sum: 0.9493063688278198, worst -0.03515821695327759
Time: prepare 2.9924    bound 8.6796    transfer 0.7483    finalize 1.1705    func 14.0259    
Accumulated time: func 48.6376    prepare 12.9031    bound 27.2831    transfer 3.0260    finalize 3.4033    
all_split False
======================Cut inference begins======================
max lb tensor(0.01203236) min lb tensor(-0.03514796)
Number of Verified Splits: 12451 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0009353160858154297 
BICCOS Cumulative time: 0.11239790916442871
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03741 (21), -0.03682 (21), -0.03674 (21), -0.03668 (21), -0.03662 (21), -0.03650 (21), -0.03628 (21), -0.03609 (21), -0.03601 (21), -0.03597 (21), -0.03585 (21), -0.03582 (21), -0.03577 (21), -0.03577 (21), -0.03573 (21), -0.03573 (21), -0.03559 (21), -0.03552 (21), -0.03542 (21), -0.03541 (21), 
Length of domains: 93904
Time: pickout 0.4872    decision 3.5123    set_bounds 3.7169    solve 14.0356    add 0.2110    
Accumulated time: pickout 2.2454    decision 14.9616    set_bounds 16.7978    solve 48.9695    add 1.6921    
Current (lb-rhs): -0.037407100200653076
236019 domains visited
Cumulative time: 85.806147813797

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 938] [/input-8, 1076] [/input-8, 1932] [/input-8, 1932] [/input-8, 938] [/input-8, 1076] [/input-8, 938] [/input-8, 1076] [/input-8, 938] [/input-8, 938] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493063688278198, worst -0.03570336103439331
10 lb beta sum: 0.9493063688278198, worst -0.03569287061691284
Time: prepare 3.0048    bound 8.6838    transfer 0.7491    finalize 0.5214    func 14.2956    
Accumulated time: func 62.9332    prepare 15.9083    bound 35.9669    transfer 3.7751    finalize 3.9247    
all_split False
======================Cut inference begins======================
max lb tensor(0.01363671) min lb tensor(-0.03568763)
Number of Verified Splits: 14050 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.001226186752319336 
BICCOS Cumulative time: 0.11362409591674805
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03668 (21), -0.03609 (21), -0.03597 (21), -0.03577 (21), -0.03577 (21), -0.03569 (22), -0.03559 (21), -0.03552 (22), -0.03543 (22), -0.03541 (21), -0.03528 (21), -0.03520 (22), -0.03519 (21), -0.03515 (22), -0.03493 (22), -0.03480 (22), -0.03476 (22), -0.03473 (21), -0.03471 (22), -0.03469 (21), 
Length of domains: 112622
Time: pickout 0.5141    decision 3.6785    set_bounds 3.9032    solve 14.3074    add 0.1750    
Accumulated time: pickout 2.7595    decision 18.6401    set_bounds 20.7010    solve 63.2769    add 1.8671    
Current (lb-rhs): -0.036677420139312744
287505 domains visited
Cumulative time: 108.61092948913574

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 938] [/input-8, 938] [/input-8, 938] [/input-8, 938] [/input-8, 938] [/input-8, 938] [/input-8, 938] [/input-8, 938] [/input-8, 938] [/input-8, 938] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493063688278198, worst -0.03498518466949463
10 lb beta sum: 0.9493063688278198, worst -0.03494894504547119
Time: prepare 3.0685    bound 8.6833    transfer 0.7476    finalize 1.5190    func 14.4528    
Accumulated time: func 77.3860    prepare 18.9772    bound 44.6502    transfer 4.5227    finalize 5.4437    
all_split False
======================Cut inference begins======================
max lb tensor(0.01358712) min lb tensor(-0.03493309)
Number of Verified Splits: 15485 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0009760856628417969 
BICCOS Cumulative time: 0.11460018157958984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03569 (22), -0.03552 (22), -0.03543 (22), -0.03520 (22), -0.03493 (22), -0.03493 (22), -0.03476 (22), -0.03476 (22), -0.03471 (22), -0.03465 (22), -0.03463 (22), -0.03452 (22), -0.03443 (22), -0.03438 (22), -0.03433 (22), -0.03421 (22), -0.03419 (22), -0.03412 (22), -0.03408 (22), -0.03405 (22), 
Length of domains: 129905
Time: pickout 0.5188    decision 3.3570    set_bounds 4.0293    solve 14.4647    add 0.1773    
Accumulated time: pickout 3.2783    decision 21.9971    set_bounds 24.7303    solve 77.7416    add 2.0443    
Current (lb-rhs): -0.03568762540817261
337556 domains visited
Cumulative time: 131.4082534313202

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 794] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1932] [/input-8, 1363] [/input-8, 861] [/input-8, 1363] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493063688278198, worst -0.03262120485305786
10 lb beta sum: 0.9493063688278198, worst -0.03263199329376221
Time: prepare 3.0133    bound 8.6888    transfer 0.7509    finalize 1.6102    func 14.4977    
Accumulated time: func 91.8837    prepare 21.9909    bound 53.3390    transfer 5.2736    finalize 7.0539    
all_split False
======================Cut inference begins======================
max lb tensor(0.01266396) min lb tensor(-0.03260773)
Number of Verified Splits: 17135 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0011134147644042969 
BICCOS Cumulative time: 0.11571359634399414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03569 (22), -0.03552 (22), -0.03543 (22), -0.03520 (22), -0.03493 (22), -0.03493 (22), -0.03476 (22), -0.03476 (22), -0.03471 (22), -0.03465 (22), -0.03463 (22), -0.03452 (22), -0.03443 (22), -0.03438 (22), -0.03433 (22), -0.03421 (22), -0.03419 (22), -0.03412 (22), -0.03408 (22), -0.03405 (22), 
Length of domains: 145538
Time: pickout 0.5177    decision 3.4007    set_bounds 4.1956    solve 14.5114    add 0.1773    
Accumulated time: pickout 3.7960    decision 25.3978    set_bounds 28.9259    solve 92.2530    add 2.2217    
Current (lb-rhs): -0.03568762540817261
385957 domains visited
Cumulative time: 154.4594442844391

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 930] [/input-8, 1076] [/input-8, 930] [/input-8, 930] [/input-8, 930] [/input-8, 364] [/input-8, 930] [/input-8, 1076] [/input-8, 930] [/input-8, 1618] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493063688278198, worst -0.034583449363708496
10 lb beta sum: 0.9493063688278198, worst -0.03457003831863403
Time: prepare 3.0254    bound 8.6829    transfer 0.7532    finalize 1.8439    func 14.7390    
Accumulated time: func 106.6227    prepare 25.0167    bound 62.0219    transfer 6.0269    finalize 8.8979    
all_split False
======================Cut inference begins======================
max lb tensor(0.01350361) min lb tensor(-0.03456646)
Number of Verified Splits: 18462 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0011131763458251953 
BICCOS Cumulative time: 0.11682677268981934
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03493 (22), -0.03476 (22), -0.03463 (22), -0.03457 (23), -0.03443 (22), -0.03437 (23), -0.03431 (23), -0.03408 (22), -0.03405 (22), -0.03403 (23), -0.03401 (23), -0.03391 (22), -0.03378 (23), -0.03375 (22), -0.03369 (23), -0.03362 (23), -0.03358 (23), -0.03352 (22), -0.03351 (23), -0.03348 (23), 
Length of domains: 159844
Time: pickout 0.5152    decision 3.3817    set_bounds 4.2503    solve 14.7531    add 0.1672    
Accumulated time: pickout 4.3113    decision 28.7795    set_bounds 33.1762    solve 107.0061    add 2.3889    
Current (lb-rhs): -0.03493309020996094
433031 domains visited
Cumulative time: 177.80785822868347

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1618] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493063688278198, worst -0.03362053632736206
10 lb beta sum: 0.9493063688278198, worst -0.03360182046890259
Time: prepare 3.0476    bound 8.6784    transfer 0.7561    finalize 0.5215    func 13.4469    
Accumulated time: func 120.0696    prepare 28.0647    bound 70.7004    transfer 6.7830    finalize 9.4194    
all_split False
======================Cut inference begins======================
max lb tensor(0.01161700) min lb tensor(-0.03358871)
Number of Verified Splits: 19393 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0010981559753417969 
BICCOS Cumulative time: 0.11792492866516113
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03493 (22), -0.03457 (23), -0.03437 (23), -0.03431 (23), -0.03408 (22), -0.03405 (22), -0.03403 (23), -0.03401 (23), -0.03378 (23), -0.03375 (22), -0.03369 (23), -0.03362 (23), -0.03359 (23), -0.03358 (23), -0.03352 (22), -0.03351 (23), -0.03350 (23), -0.03348 (23), -0.03337 (23), -0.03335 (23), 
Length of domains: 173219
Time: pickout 0.5267    decision 3.3674    set_bounds 4.5261    solve 14.9214    add 0.1609    
Accumulated time: pickout 4.8380    decision 32.1470    set_bounds 37.7022    solve 121.9275    add 2.5498    
Current (lb-rhs): -0.03493309020996094
479174 domains visited
Time out!!!!!!!!
Result: unknown in 205.3368 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 192, vnnlib ID: 192 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.11565208, -26.29471397, -20.11076927, -23.31661606, -21.61720848,
         -22.97149086, -21.28172302, -23.18593788, -27.03968811, -25.88165855]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [697]; unstable size 697; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 312, 1, 697] with unstable size 311 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 697] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 697] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [311]; unstable size 311; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 311] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 311] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.78565788, 4.27323294, 2.01961517, 0.27245522, 1.55622101, 0.05096972,
         1.07475817, 5.46636105, 4.11699867]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0585 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 193, vnnlib ID: 193 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-33.48653412, -28.85784149, -33.36421204, -32.71415710, -32.16485214,
         -32.94163132, -33.09236145, -31.24285507, -33.00304794, -27.07908058]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [755]; unstable size 755; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 755] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 755] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 755] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 272] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.82790470, 0.86489165, 4.30059624, 3.81733036, 3.25241184, 3.89844656,
         3.96334553, 2.53978443, 4.38356400]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0618 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 194, vnnlib ID: 194 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.57879448, -25.87275887, -18.40335464, -22.53392982, -18.78349113,
         -22.35590553, -20.82909393, -22.13958931, -23.90252686, -25.55131340]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [942]; unstable size 942; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 299, 1, 942] with unstable size 298 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 942] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 942] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [298]; unstable size 298; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 298] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 298] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.78787947,  5.47186089,  3.06105733, -0.50585997,  2.82687855,
          1.17288113,  2.26738644,  3.64541602,  5.32217216]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.57879448, -25.87275887, -18.40335464, -22.53392982, -18.78349113,
         -22.35590553, -20.82909393, -22.13958931, -23.90252686, -25.55131340]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.34274864, -26.69354248, -19.10419273, -23.07092094, -19.10215950,
          -22.83916855, -21.32789803, -22.39095688, -24.61488724, -26.29346466]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00203323]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0074 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0564 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 195, vnnlib ID: 195 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.54196358, -20.82349014, -15.98302746, -15.75083733, -17.00555420,
         -16.15604782, -17.53281975, -17.70917892, -21.04745102, -20.12406921]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [787]; unstable size 787; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 787] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 787] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 787] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 259] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.29445934,  2.55111361, -1.20112312,  0.14969736, -0.85841584,
          0.26714236,  0.60579431,  3.49371672,  1.95312977]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.54196358, -20.82349014, -15.98302746, -15.75083733, -17.00555420,
         -16.15604782, -17.53281975, -17.70917892, -21.04745102, -20.12406921]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.54196358, -20.82349205, -15.98302746, -15.75083637, -17.00555229,
          -16.15604591, -17.53282166, -17.70917892, -21.04744911, -20.12407112],
         [-19.54196358, -20.82349205, -15.98302746, -15.75083637, -17.00555229,
          -16.15604591, -17.53282166, -17.70917892, -21.04744911, -20.12407112]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.23219109,  0.17301846]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.03650784, -1.03650784, -1.02063489,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           [-1.06825387, -1.05238092, -1.03650784,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           [-1.09999990, -1.06825387, -1.06825387,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           ...,
           [-1.29047608, -1.17936504, -1.16349196,  ..., -1.13174593,
            -1.13174593, -1.13174593],
           [-1.35396814, -1.27460313, -1.24285710,  ..., -1.11587298,
            -1.13174593, -1.13174593],
           [-1.32222211, -1.32222211, -1.22698402,  ..., -1.11587298,
            -1.13174593, -1.13174593]],

          [[-1.14331722, -1.14331722, -1.11111104,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           [-1.15942025, -1.14331722, -1.12721407,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           [-1.17552328, -1.14331722, -1.14331722,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           ...,
           [-1.27214170, -1.20772946, -1.20772946,  ..., -1.20772946,
            -1.19162631, -1.19162631],
           [-1.35265696, -1.28824472, -1.25603855,  ..., -1.20772946,
            -1.19162631, -1.19162631],
           [-1.33655393, -1.32045078, -1.23993552,  ..., -1.20772946,
            -1.19162631, -1.19162631]],

          [[-1.16791618, -1.18290865, -1.16791618,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           [-1.22788620, -1.21289361, -1.19790113,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           [-1.25787115, -1.21289361, -1.18290865,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           ...,
           [-1.09295356, -1.04797614, -1.06296861,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.15292358, -1.10794616, -1.07796109,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.12293863, -1.12293863, -1.01799107,  ..., -1.25787115,
            -1.25787115, -1.25787115]]],


         [[[-1.03650784, -1.03650784, -1.02063489,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           [-1.06825387, -1.05238092, -1.03650784,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           [-1.09999990, -1.06825387, -1.06825387,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           ...,
           [-1.29047608, -1.17936504, -1.16349196,  ..., -1.13174593,
            -1.13174593, -1.13174593],
           [-1.35396814, -1.27460313, -1.24285710,  ..., -1.11587298,
            -1.13174593, -1.13174593],
           [-1.32222211, -1.32222211, -1.22698402,  ..., -1.11587298,
            -1.13174593, -1.13174593]],

          [[-1.14331722, -1.14331722, -1.11111104,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           [-1.15942025, -1.14331722, -1.12721407,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           [-1.17552328, -1.14331722, -1.14331722,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           ...,
           [-1.27214170, -1.20772946, -1.20772946,  ..., -1.20772946,
            -1.19162631, -1.19162631],
           [-1.35265696, -1.28824472, -1.25603855,  ..., -1.20772946,
            -1.19162631, -1.19162631],
           [-1.33655393, -1.32045078, -1.23993552,  ..., -1.20772946,
            -1.19162631, -1.19162631]],

          [[-1.16791618, -1.18290865, -1.16791618,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           [-1.22788620, -1.21289361, -1.19790113,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           [-1.25787115, -1.21289361, -1.18290865,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           ...,
           [-1.09295356, -1.04797614, -1.06296861,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.15292358, -1.10794616, -1.07796109,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.12293863, -1.12293863, -1.01799107,  ..., -1.25787115,
            -1.25787115, -1.25787115]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0495 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 196, vnnlib ID: 196 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.03269768, -23.39742851, -19.98416901, -18.36516571, -20.57546043,
         -19.22831917, -18.52441025, -21.12701797, -21.40182495, -21.89733315]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [675]; unstable size 675; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 330, 1, 675] with unstable size 329 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 675] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 675] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [329]; unstable size 329; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 329] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 329] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.27801871,  2.64099765,  0.07614517,  0.77937651,  0.49395734,
         -0.89621019,  1.17210174,  0.74582720,  1.35976243]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.03269768, -23.39742851, -19.98416901, -18.36516571, -20.57546043,
         -19.22831917, -18.52441025, -21.12701797, -21.40182495, -21.89733315]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.70111656, -23.92578506, -20.54925156, -19.09409904, -21.12871933,
          -19.96413612, -18.72333908, -21.88397980, -22.08024597, -22.51139450]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.37075996]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0463 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 197, vnnlib ID: 197 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.98860359, -29.81665421, -22.90506172, -26.87357140, -25.76964569,
         -27.17270279, -26.79407501, -29.03504753, -24.31199837, -29.65661049]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 508] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 508] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 139] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[7.01010895, 0.43884718, 4.07559013, 3.17350507, 4.33794928, 3.97197700,
         6.33449650, 1.59434080, 6.97273016]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0469 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 198, vnnlib ID: 198 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.75551414, -26.88309479, -22.24279404, -22.79791832, -24.11035538,
         -23.30415535, -24.49540329, -25.17525864, -25.53401184, -26.56663895]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [796]; unstable size 796; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 161, 1, 796] with unstable size 160 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 796] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 796] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [160]; unstable size 160; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 160] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 160] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.89236879, -0.28250682, -0.08627716,  1.25970483,  0.33654252,
          1.56063485,  2.24391103,  2.57144260,  3.82517886]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.75551414, -26.88309479, -22.24279404, -22.79791832, -24.11035538,
         -23.30415535, -24.49540329, -25.17525864, -25.53401184, -26.56663895]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.79it/s]100%|██████████| 1/1 [00:00<00:00,  8.79it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.14568901, -27.12878036, -22.18230820, -22.67010307, -24.06120300,
          -23.14287567, -24.43312645, -25.13286972, -25.67265129, -26.70305634],
         [-22.14568901, -27.12878036, -22.18230820, -22.67010307, -24.06120300,
          -23.14287567, -24.43312645, -25.13286972, -25.67265129, -26.70305634]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.03661919, 0.52441406]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1165 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 15.666088104248047
alpha/beta optimization time: 1.2464625835418701
initial alpha-crown bounds: tensor([[ 3.92945385, -0.25881696, -0.04859769,  1.30887079,  0.37676287,
          1.59917831,  2.28565168,  2.62420368,  3.84938169]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.2588169574737549
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.58790946006775
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5878665447235
Verifying property 1 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.25881696]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.75551414, -26.88309479, -22.24279404, -22.79791832, -24.11035538,
        -23.30415535, -24.49540329, -25.17525864, -25.53401184, -26.56663895],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.25881696]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 796
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 160
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 971
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010967254638671875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2588176727294922
10 lb beta sum: 0.0, worst -0.25881779193878174
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0529    transfer 0.0001    finalize 0.0001    func 0.0534    
Accumulated time: func 0.0534    prepare 0.0002    bound 0.0529    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] 
split level 1: [/input-12, 12] 
split level 2: [/input-12, 59] 
split level 3: [/input-12, 0] 
split level 4: [/input-8, 1819] 
split level 5: [/input-12, 10] 
split level 6: [/input-8, 1578] 
split level 7: [/input-8, 1571] 
split level 8: [/input-8, 595] 
split level 9: [/input-8, 283] 
split level 10: [/input-8, 796] 
split level 11: [/input-12, 58] 
split level 12: [/input-8, 1197] 
split level 13: [/input-8, 1182] 
split level 14: [/input-8, 1590] 
split level 15: [/input-8, 794] 
split level 16: [/input-8, 1573] 
split level 17: [/input-8, 1581] 
split level 18: [/input-8, 470] 
split level 19: [/input-8, 461] 
split level 20: [/input-8, 1612] 
split level 21: [/input-8, 166] 
split level 22: [/input-8, 1637] 
split level 23: [/input, 662] 
split level 24: [/input-8, 1598] 
split level 25: [/input-8, 174] 
split level 26: [/input-8, 460] 
split level 27: [/input, 3528] 
split level 28: [/input-8, 309] 
split level 29: [/input-8, 1206] 
split level 30: [/input, 3292] 
split level 31: [/input, 661] 
split level 32: [/input, 3259] 
split level 33: [/input, 954] 
split level 34: [/input, 3513] 
split level 35: [/input, 963] 
split level 36: [/input-8, 1613] 
split level 37: [/input-12, 6] 
split level 38: [/input, 3432] 
split level 39: [/input, 2980] 
split level 40: [/input, 935] 
split level 41: [/input-8, 951] 
split level 42: [/input, 2764] 
split level 43: [/input-8, 246] 
split level 44: [/input, 2762] 
split level 45: [/input, 967] 
split level 46: [/input-8, 473] 
split level 47: [/input, 979] 
split level 48: [/input, 3257] 
split level 49: [/input-8, 274] 
split level 50: [/input, 951] 
split level 51: [/input-8, 1045] 
split level 52: [/input, 2729] 
split level 53: [/input, 3416] 
split level 54: [/input, 420] 
split level 55: [/input, 922] 
split level 56: [/input, 983] 
split level 57: [/input-8, 1622] 
split level 58: [/input, 3244] 
split level 59: [/input, 3399] 
split level 60: [/input, 2780] 
split level 61: [/input, 980] 
split level 62: [/input, 2246] 
split level 63: [/input, 659] 
split level 64: [/input-8, 1804] 
split level 65: [/input-8, 589] 
split level 66: [/input, 971] 
split level 67: [/input, 2231] 
split level 68: [/input, 2104] 
split level 69: [/input, 2120] 
split level 70: [/input, 1942] 
split level 71: [/input-8, 1597] 
split level 72: [/input, 988] 
split level 73: [/input-8, 1614] 
split level 74: [/input-8, 238] 
split level 75: [/input, 972] 
split level 76: [/input, 949] 
split level 77: [/input, 2779] 
split level 78: [/input, 583] 
split level 79: [/input, 989] 
split level 80: [/input, 948] 
split level 81: [/input, 1304] 
split level 82: [/input, 2727] 
split level 83: [/input, 2599] 
split level 84: [/input-8, 1805] 
split level 85: [/input, 2731] 
split level 86: [/input, 2121] 
split level 87: [/input, 379] 
split level 88: [/input-8, 457] 
split level 89: [/input, 3546] 
split level 90: [/input, 990] 
split level 91: [/input-8, 959] 
split level 92: [/input, 332] 
split level 93: [/input, 2796] 
split level 94: [/input, 2520] 
split level 95: [/input, 2135] 
split level 96: [/input-8, 508] 
split level 97: [/input-8, 1921] 
split level 98: [/input, 2486] 
split level 99: [/input, 200] 
split level 100: [/input, 2503] 
split level 101: [/input, 3533] 
split level 102: [/input, 2122] 
split level 103: [/input, 2517] 
split level 104: [/input, 1001] 
split level 105: [/input, 1941] 
split level 106: [/input, 1303] 
split level 107: [/input-8, 1833] 
split level 108: [/input, 228] 
split level 109: [/input, 3564] 
split level 110: [/input, 3256] 
split level 111: [/input, 919] 
split level 112: [/input, 1457] 
split level 113: [/input, 2247] 
split level 114: [/input, 1006] 
split level 115: [/input, 3105] 
split level 116: [/input, 973] 
split level 117: [/input-8, 428] 
split level 118: [/input-8, 369] 
split level 119: [/input, 3563] 
split level 120: [/input-8, 507] 
split level 121: [/input, 2152] 
split level 122: [/input-8, 1604] 
split level 123: [/input, 1963] 
split level 124: [/input, 3467] 
split level 125: [/input, 1944] 
split level 126: [/input, 999] 
split level 127: [/input, 924] 
split level 128: [/input, 2245] 
split level 129: [/input, 3384] 
split level 130: [/input, 2261] 
split level 131: [/input, 193] 
split level 132: [/input, 2504] 
split level 133: [/input, 201] 
split level 134: [/input, 2264] 
split level 135: [/input, 646] 
split level 136: [/input-8, 916] 
split level 137: [/input, 3255] 
split level 138: [/input, 2518] 
split level 139: [/input, 2230] 
split level 140: [/input, 2600] 
split level 141: [/input-8, 61] 
split level 142: [/input, 1322] 
split level 143: [/input, 199] 
split level 144: [/input, 182] 
split level 145: [/input, 2049] 
split level 146: [/input, 232] 
split level 147: [/input, 3032] 
split level 148: [/input, 3089] 
split level 149: [/input, 2501] 
split level 150: [/input, 2734] 
split level 151: [/input, 1943] 
split level 152: [/input, 2249] 
split level 153: [/input, 231] 
split level 154: [/input, 781] 
split level 155: [/input, 892] 
split level 156: [/input, 3452] 
split level 157: [/input, 2153] 
split level 158: [/input, 234] 
split level 159: [/input, 2117] 
split level 160: [/input-8, 1951] 
split level 161: [/input, 2537] 
split level 162: [/input, 2215] 
split level 163: [/input, 2279] 
split level 164: [/input, 2280] 
split level 165: [/input, 3090] 
split level 166: [/input, 227] 
split level 167: [/input, 2357] 
split level 168: [/input, 2343] 
split level 169: [/input, 2515] 
split level 170: [/input, 165] 
split level 171: [/input, 660] 
split level 172: [/input, 676] 
split level 173: [/input, 233] 
split level 174: [/input, 2134] 
split level 175: [/input, 2262] 
split level 176: [/input, 668] 
split level 177: [/input, 3358] 
split level 178: [/input, 3106] 
split level 179: [/input, 2050] 
split level 180: [/input, 2514] 
split level 181: [/input, 230] 
split level 182: [/input, 2761] 
split level 183: [/input, 2535] 
split level 184: [/input, 3289] 
split level 185: [/input, 3373] 
split level 186: [/input, 2051] 
split level 187: [/input, 2232] 
split level 188: [/input, 2061] 
split level 189: [/input, 2052] 
split level 190: [/input, 2521] 
split level 191: [/input, 508] 
split level 192: [/input, 675] 
split level 193: [/input, 2149] 
split level 194: [/input, 2094] 
split level 195: [/input, 2282] 
split level 196: [/input, 3374] 
split level 197: [/input, 1948] 
split level 198: [/input, 2333] 
split level 199: [/input, 2075] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.25867676734924316
10 lb beta sum: 0.0, worst -0.25867772102355957
Time: prepare 0.0116    bound 0.1042    transfer 0.0033    finalize 0.0027    func 0.1244    
Accumulated time: func 0.1777    prepare 0.0216    bound 0.1571    transfer 0.0034    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.15740919) min lb tensor(-0.25867569)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010586261749267578 
BICCOS Cumulative time: 0.010586261749267578
Preprocessing time: 0.009957313537597656 Inference time: 0.0003859996795654297 Add cuts time: 4.410743713378906e-05 Cut analysis time: 0.00019884109497070312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25248 (1), -0.25241 (1), -0.25232 (1), -0.25226 (1), -0.25213 (1), -0.25183 (1), -0.25180 (1), -0.25179 (1), -0.25179 (1), -0.25166 (1), -0.25146 (1), -0.25112 (1), -0.25061 (1), -0.25037 (1), -0.25018 (1), -0.25011 (1), -0.25003 (1), -0.24996 (1), -0.24988 (1), -0.24896 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5184    set_bounds 0.0087    solve 0.1244    add 0.0667    
Accumulated time: pickout 0.0003    decision 0.5184    set_bounds 0.0087    solve 0.1244    add 0.0667    
Current (lb-rhs): -0.25248003005981445
50 domains visited
Cumulative time: 0.7979388236999512

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 12] [/input-12, 12] [/input-12, 59] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 1: [/input-12, 59] [/input-12, 0] [/input-12, 0] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
split level 2: [/input-12, 0] [/input-12, 10] [/input-12, 10] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 10] [/input-12, 0] 
split level 3: [/input-8, 283] [/input-8, 470] [/input-12, 58] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 58] [/input-12, 58] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23920559883117676
10 lb beta sum: 0.19286824762821198, worst -0.2378227710723877
Time: prepare 0.0077    bound 0.1165    transfer 0.0011    finalize 0.0024    func 0.1302    
Accumulated time: func 0.3080    prepare 0.0294    bound 0.2736    transfer 0.0045    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.09562683) min lb tensor(-0.23767412)
Number of Verified Splits: 12 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.012839317321777344 
BICCOS Cumulative time: 0.023425579071044922
Preprocessing time: 0.011827707290649414 Inference time: 0.0005173683166503906 Add cuts time: 0.0002079010009765625 Cut analysis time: 0.00028634071350097656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07722 (2), -0.07687 (2), -0.07681 (2), -0.07625 (2), -0.07605 (2), -0.07550 (2), -0.07527 (2), -0.07482 (2), -0.07477 (2), -0.07476 (2), -0.07329 (2), -0.07276 (2), -0.07263 (2), -0.07161 (2), -0.07060 (2), -0.07018 (2), -0.06987 (2), -0.06900 (2), -0.06805 (2), -0.06773 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0197    set_bounds 0.0120    solve 0.1303    add 0.0756    
Accumulated time: pickout 0.0014    decision 0.5382    set_bounds 0.0207    solve 0.2548    add 0.1422    
Current (lb-rhs): -0.07721734046936035
100 domains visited
Cumulative time: 1.0502674579620361

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 12] [/input-12, 12] [/input-12, 59] [/input-12, 59] [/input-12, 12] [/input-12, 12] [/input-12, 59] [/input-12, 0] [/input-12, 12] 
split level 1: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 10] [/input-12, 0] 
split level 2: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-8, 1573] [/input-8, 470] 
split level 3: [/input-12, 58] [/input-8, 470] [/input-8, 470] [/input-12, 58] [/input-12, 58] [/input-8, 470] [/input-8, 470] [/input-12, 58] [/input-8, 470] [/input-8, 461] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07463884353637695
10 lb beta sum: 0.3701665699481964, worst -0.09714818000793457
Time: prepare 0.0080    bound 0.1338    transfer 0.0012    finalize 0.0024    func 0.1480    
Accumulated time: func 0.4559    prepare 0.0376    bound 0.4074    transfer 0.0057    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.07089910) min lb tensor(-0.05598047)
Number of Verified Splits: 120 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 16
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.019618988037109375 
BICCOS Cumulative time: 0.0430445671081543
Preprocessing time: 0.01174616813659668 Inference time: 0.005383491516113281 Add cuts time: 0.0019176006317138672 Cut analysis time: 0.0005717277526855469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02275 (3), -0.02255 (3), -0.02248 (3), -0.02216 (3), -0.02106 (3), -0.02090 (3), -0.02084 (3), -0.02068 (3), -0.02062 (3), -0.02034 (3), -0.01987 (3), -0.01976 (3), -0.01962 (3), -0.01954 (3), -0.01913 (3), -0.01896 (3), -0.01852 (3), -0.01836 (3), -0.01807 (3), -0.01791 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0148    solve 0.1480    add 0.0921    
Accumulated time: pickout 0.0024    decision 0.5577    set_bounds 0.0355    solve 0.4028    add 0.2344    
Current (lb-rhs): -0.022747129201889038
150 domains visited
Cumulative time: 1.3457646369934082

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 0] [/input-12, 10] [/input-12, 10] [/input-12, 0] 
split level 1: [/input-12, 10] [/input-12, 10] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 10] [/input-12, 58] [/input-12, 58] [/input-12, 10] 
split level 2: [/input-12, 58] [/input-12, 58] [/input-8, 1581] [/input-8, 1637] [/input-8, 461] [/input-8, 1637] [/input-8, 1573] [/input-8, 1573] [/input-8, 1573] [/input-8, 1573] 
split level 3: [/input-8, 309] [/input-8, 309] [/input-8, 1637] [/input-8, 309] [/input-8, 1637] [/input-8, 309] [/input-8, 470] [/input-8, 470] [/input-8, 470] [/input-8, 470] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.033547401428222656
10 lb beta sum: 0.35573330521583557, worst -0.12704597413539886
Time: prepare 0.0080    bound 0.1337    transfer 0.0012    finalize 0.0025    func 0.1480    
Accumulated time: func 0.6040    prepare 0.0459    bound 0.5411    transfer 0.0068    finalize 0.0102    
all_split False
======================Cut inference begins======================
max lb tensor(0.06036949) min lb tensor(-0.01487362)
Number of Verified Splits: 302 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.034830570220947266 
BICCOS Cumulative time: 0.07787513732910156
Preprocessing time: 0.012680292129516602 Inference time: 0.013656377792358398 Add cuts time: 0.00722050666809082 Cut analysis time: 0.0012733936309814453
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0148    solve 0.1481    add 0.0262    
Accumulated time: pickout 0.0035    decision 0.5772    set_bounds 0.0503    solve 0.5509    add 0.2605    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12]), tensor([-1., -1.]), tensor([0, 0]), tensor([4.00607880e-11, 8.83416384e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12,  0, 10]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([4.00607880e-11, 4.91172522e-02, 3.01990081e-02, 2.31310297e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12,  0, 10]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([4.00607880e-11, 4.91172522e-02, 3.01990081e-02, 1.30000282e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12,  0]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([4.00607880e-11, 4.91172522e-02, 4.03582454e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12]), tensor([ 1., -1.]), tensor([0, 0]), tensor([4.00607880e-11, 1.63814232e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12]), tensor([1., 1.]), tensor([0, 0]), tensor([4.00607880e-11, 3.43116969e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21267199516296387
10 lb beta sum: 0.4787251949310303, worst -0.21098069846630096
Time: prepare 0.0004    bound 0.1407    transfer 0.0001    finalize 0.0002    func 0.1415    
Accumulated time: func 0.7454    prepare 0.0463    bound 0.6818    transfer 0.0070    finalize 0.0104    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 10] [/input-12, 0] [/input-12, 0] 
split level 1: [/input-8, 1573] [/input-12, 58] [/input-12, 10] [/input-12, 10] 
split level 2: [/input-8, 1581] [/input-8, 1581] [/input-12, 58] [/input-8, 283] 
split level 3: [/input-8, 470] [/input-8, 1573] [/input-8, 470] [/input-12, 58] 
split level 4: [/input-8, 461] [/input-8, 470] [/input-8, 461] [/input-8, 470] 
split level 5: [/input-8, 174] [/input-8, 174] [/input-8, 309] [/input-8, 461] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6101257801055908, worst -0.1488419771194458
10 lb beta sum: 0.610084056854248, worst -0.14864403009414673
Time: prepare 0.0111    bound 0.1446    transfer 0.0010    finalize 0.0013    func 0.1597    
Accumulated time: func 0.9052    prepare 0.0577    bound 0.8265    transfer 0.0080    finalize 0.0117    
all_split False
======================Cut inference begins======================
max lb tensor(0.07210377) min lb tensor(-0.14858145)
Number of Verified Splits: 186 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.0003292560577392578 
BICCOS Cumulative time: 0.07820439338684082
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14858 (6), -0.14641 (6), -0.14633 (6), -0.14357 (6), -0.14326 (6), -0.14240 (6), -0.14114 (6), -0.14070 (6), -0.14052 (6), -0.14026 (6), -0.13773 (6), -0.13734 (6), -0.13549 (6), -0.13373 (6), -0.13293 (6), -0.13012 (6), -0.12525 (6), -0.12449 (6), -0.12302 (6), -0.12281 (6), 
Length of domains: 70
Time: pickout 0.0005    decision 0.0174    set_bounds 0.0209    solve 0.1598    add 0.0012    
Accumulated time: pickout 0.0039    decision 0.5946    set_bounds 0.0712    solve 0.7107    add 0.2617    
Current (lb-rhs): -0.14858144521713257
220 domains visited
Cumulative time: 1.9466097354888916

BaB round 2
batch: 70
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 794] [/input-8, 794] [/input-8, 796] [/input-8, 796] [/input-8, 794] [/input-8, 794] [/input-8, 796] [/input-8, 796] [/input-8, 794] [/input-8, 794] 
split level 1: [/input-8, 1612] [/input-8, 1612] [/input-8, 794] [/input-8, 1581] [/input-8, 1612] [/input-8, 1612] [/input-8, 794] [/input-8, 1581] [/input-8, 1612] [/input-8, 1612] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47975051403045654, worst -0.14349502325057983
10 lb beta sum: 0.47975051403045654, worst -0.14338397979736328
Time: prepare 0.0120    bound 0.1444    transfer 0.0016    finalize 0.0016    func 0.1614    
Accumulated time: func 1.0666    prepare 0.0699    bound 0.9709    transfer 0.0095    finalize 0.0133    
all_split False
======================Cut inference begins======================
max lb tensor(0.01816374) min lb tensor(-0.14334297)
Number of Verified Splits: 24 of 280
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.00031495094299316406 
BICCOS Cumulative time: 0.07851934432983398
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14334 (8), -0.14110 (8), -0.14107 (8), -0.13802 (8), -0.13794 (8), -0.13687 (8), -0.13555 (8), -0.13514 (8), -0.13496 (8), -0.13472 (8), -0.13460 (8), -0.13236 (8), -0.13233 (8), -0.13216 (8), -0.13176 (8), -0.12961 (8), -0.12920 (8), -0.12859 (8), -0.12798 (8), -0.12723 (8), 
Length of domains: 256
Time: pickout 0.0017    decision 0.0144    set_bounds 0.0124    solve 0.1615    add 0.0014    
Accumulated time: pickout 0.0056    decision 0.6090    set_bounds 0.0836    solve 0.8722    add 0.2631    
Current (lb-rhs): -0.1433429718017578
476 domains visited
Cumulative time: 2.13871693611145

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1581] [/input-8, 1581] [/input-8, 1573] [/input-8, 794] [/input-8, 796] [/input-8, 1581] [/input-8, 1573] [/input-8, 794] [/input-8, 1581] [/input-8, 1581] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.14015895128250122
10 lb beta sum: 0.47465312480926514, worst -0.14005571603775024
Time: prepare 0.0220    bound 0.1472    transfer 0.0028    finalize 0.0022    func 0.1776    
Accumulated time: func 1.2442    prepare 0.0921    bound 1.1181    transfer 0.0124    finalize 0.0155    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02656251) min lb tensor(-0.14002782)
Number of Verified Splits: 0 of 512
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.0003266334533691406 
BICCOS Cumulative time: 0.07884597778320312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14003 (9), -0.13778 (9), -0.13776 (9), -0.13462 (9), -0.13457 (9), -0.13377 (9), -0.13206 (9), -0.13185 (9), -0.13170 (9), -0.13170 (9), -0.13161 (9), -0.13084 (9), -0.12964 (9), -0.12943 (9), -0.12904 (9), -0.12859 (9), -0.12857 (9), -0.12829 (9), -0.12648 (9), -0.12645 (9), 
Length of domains: 512
Time: pickout 0.0038    decision 0.0219    set_bounds 0.0210    solve 0.1777    add 0.0024    
Accumulated time: pickout 0.0094    decision 0.6309    set_bounds 0.1046    solve 1.0500    add 0.2655    
Current (lb-rhs): -0.14002782106399536
988 domains visited
Cumulative time: 2.3662524223327637

BaB round 4
batch: 512
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1571] [/input-8, 1637] [/input-8, 1581] [/input-8, 1573] [/input-8, 1571] [/input-8, 796] [/input-8, 1581] [/input-8, 1573] [/input-8, 1571] [/input-8, 460] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.13707751035690308
10 lb beta sum: 0.47465312480926514, worst -0.13704031705856323
Time: prepare 0.0444    bound 0.1553    transfer 0.0027    finalize 0.0049    func 0.2138    
Accumulated time: func 1.4580    prepare 0.1368    bound 1.2734    transfer 0.0151    finalize 0.0203    
all_split False
======================Cut inference begins======================
max lb tensor(0.00484532) min lb tensor(-0.13702160)
Number of Verified Splits: 12 of 1024
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.0003795623779296875 
BICCOS Cumulative time: 0.07922554016113281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13702 (10), -0.13478 (10), -0.13475 (10), -0.13171 (10), -0.13161 (10), -0.13123 (10), -0.12932 (10), -0.12921 (10), -0.12911 (10), -0.12885 (10), -0.12825 (10), -0.12768 (10), -0.12747 (10), -0.12647 (10), -0.12601 (10), -0.12598 (10), -0.12545 (10), -0.12544 (10), -0.12540 (10), -0.12536 (10), 
Length of domains: 1012
Time: pickout 0.0061    decision 0.0358    set_bounds 0.1925    solve 0.2141    add 0.0067    
Accumulated time: pickout 0.0155    decision 0.6667    set_bounds 0.2971    solve 1.2640    add 0.2722    
Current (lb-rhs): -0.13702160120010376
2000 domains visited
Cumulative time: 2.8227968215942383

BaB round 5
batch: 1012
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 460] [/input-8, 1612] [/input-8, 1612] [/input-8, 1581] [/input-8, 1637] [/input-8, 1612] [/input-8, 1612] [/input-8, 796] [/input-8, 1571] [/input-8, 1612] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4746531546115875, worst -0.1335180401802063
10 lb beta sum: 0.4746531546115875, worst -0.13350719213485718
Time: prepare 0.0867    bound 0.2249    transfer 0.0089    finalize 0.0089    func 0.3430    
Accumulated time: func 1.8010    prepare 0.2237    bound 1.4983    transfer 0.0240    finalize 0.0292    
all_split False
======================Cut inference begins======================
max lb tensor(0.01888126) min lb tensor(-0.13350064)
Number of Verified Splits: 157 of 2024
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.0004057884216308594 
BICCOS Cumulative time: 0.07963132858276367
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13350 (11), -0.13119 (11), -0.13101 (11), -0.12968 (11), -0.12862 (11), -0.12827 (11), -0.12786 (11), -0.12763 (11), -0.12746 (11), -0.12570 (11), -0.12559 (11), -0.12547 (11), -0.12546 (11), -0.12534 (11), -0.12449 (11), -0.12407 (11), -0.12404 (11), -0.12361 (11), -0.12352 (11), -0.12299 (11), 
Length of domains: 1867
Time: pickout 0.0193    decision 0.0658    set_bounds 0.0813    solve 0.3433    add 0.0100    
Accumulated time: pickout 0.0348    decision 0.7324    set_bounds 0.3784    solve 1.6074    add 0.2822    
Current (lb-rhs): -0.13350063562393188
3867 domains visited
Cumulative time: 3.3454320430755615

BaB round 6
batch: 1867
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1571] [/input-8, 1571] [/input-8, 1637] [/input-8, 460] [/input-8, 1571] [/input-8, 1571] [/input-8, 1637] [/input-8, 460] [/input-8, 174] [/input-8, 460] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465309500694275, worst -0.13045364618301392
10 lb beta sum: 0.47465309500694275, worst -0.1304423213005066
Time: prepare 0.1629    bound 0.3555    transfer 0.0305    finalize 0.1494    func 0.7224    
Accumulated time: func 2.5234    prepare 0.3869    bound 1.8538    transfer 0.0545    finalize 0.1787    
all_split False
======================Cut inference begins======================
max lb tensor(0.02748406) min lb tensor(-0.13044089)
Number of Verified Splits: 368 of 3734
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.0005085468292236328 
BICCOS Cumulative time: 0.0801398754119873
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13044 (12), -0.12809 (12), -0.12754 (12), -0.12752 (12), -0.12617 (12), -0.12561 (12), -0.12539 (12), -0.12532 (12), -0.12522 (12), -0.12514 (12), -0.12494 (12), -0.12431 (12), -0.12341 (12), -0.12338 (12), -0.12321 (12), -0.12307 (12), -0.12279 (12), -0.12245 (12), -0.12233 (12), -0.12223 (12), 
Length of domains: 3366
Time: pickout 0.0231    decision 0.1130    set_bounds 0.1516    solve 0.7230    add 0.0176    
Accumulated time: pickout 0.0579    decision 0.8455    set_bounds 0.5301    solve 2.3304    add 0.2998    
Current (lb-rhs): -0.13044089078903198
7233 domains visited
Cumulative time: 4.38006854057312

BaB round 7
batch: 3366
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1571] [/input-8, 1637] [/input-8, 1182] [/input-8, 1571] [/input-8, 309] [/input-8, 1637] [/input, 935] [/input-8, 460] [/input-8, 1571] [/input-8, 1637] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465309500694275, worst -0.12914782762527466
10 lb beta sum: 0.47465309500694275, worst -0.12913429737091064
Time: prepare 0.4399    bound 0.5824    transfer 0.0934    finalize 0.0356    func 1.1953    
Accumulated time: func 3.7187    prepare 0.8271    bound 2.4362    transfer 0.1479    finalize 0.2143    
all_split False
======================Cut inference begins======================
max lb tensor(0.02631366) min lb tensor(-0.12912768)
Number of Verified Splits: 806 of 6732
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.0005025863647460938 
BICCOS Cumulative time: 0.0806424617767334
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12913 (13), -0.12678 (13), -0.12620 (13), -0.12619 (13), -0.12484 (13), -0.12429 (13), -0.12406 (13), -0.12401 (13), -0.12390 (13), -0.12375 (13), -0.12299 (13), -0.12229 (13), -0.12208 (13), -0.12207 (13), -0.12190 (13), -0.12175 (13), -0.12092 (13), -0.12091 (13), -0.12077 (13), -0.12075 (13), 
Length of domains: 5926
Time: pickout 0.0398    decision 0.1912    set_bounds 0.2757    solve 1.1970    add 0.0370    
Accumulated time: pickout 0.0977    decision 1.0366    set_bounds 0.8058    solve 3.5274    add 0.3368    
Current (lb-rhs): -0.12912768125534058
13159 domains visited
Cumulative time: 6.131469011306763

BaB round 8
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 174] [/input-8, 460] [/input-8, 1571] [/input-8, 1571] [/input-8, 1637] [/input-8, 1182] [/input-8, 309] [/input-8, 1571] [/input, 935] [/input-8, 174] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.12545835971832275
10 lb beta sum: 0.47465312480926514, worst -0.12550121545791626
Time: prepare 0.3716    bound 0.6885    transfer 0.0882    finalize 0.0451    func 1.2471    
Accumulated time: func 4.9658    prepare 1.1989    bound 3.1246    transfer 0.2362    finalize 0.2594    
all_split False
======================Cut inference begins======================
max lb tensor(0.02058667) min lb tensor(-0.12540221)
Number of Verified Splits: 1110 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.0007805824279785156 
BICCOS Cumulative time: 0.08142304420471191
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12913 (13), -0.12678 (13), -0.12619 (13), -0.12540 (14), -0.12429 (13), -0.12407 (14), -0.12375 (13), -0.12328 (14), -0.12323 (14), -0.12313 (14), -0.12299 (13), -0.12229 (13), -0.12208 (13), -0.12207 (13), -0.12113 (14), -0.12098 (14), -0.12092 (13), -0.12075 (13), -0.12013 (14), -0.12011 (13), 
Length of domains: 8912
Time: pickout 0.0538    decision 0.2298    set_bounds 0.5011    solve 1.2491    add 0.0304    
Accumulated time: pickout 0.1515    decision 1.2664    set_bounds 1.3069    solve 4.7764    add 0.3671    
Current (lb-rhs): -0.12912768125534058
20241 domains visited
current_vram/total_varm: 24.2GB/99.9GB, batch_size increase to 8192
Cumulative time: 8.212875604629517

BaB round 9
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1571] [/input-8, 174] [/input-8, 1637] [/input-8, 1182] [/input-8, 174] [/input-8, 460] [/input-8, 1571] [/input-8, 1637] [/input-8, 1182] [/input-8, 1573] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465309500694275, worst -0.12837690114974976
10 lb beta sum: 0.47465309500694275, worst -0.1283521056175232
Time: prepare 0.7311    bound 1.3095    transfer 0.1318    finalize 0.0931    func 2.3720    
Accumulated time: func 7.3377    prepare 1.9304    bound 4.4342    transfer 0.3680    finalize 0.3526    
all_split False
======================Cut inference begins======================
max lb tensor(0.02990705) min lb tensor(-0.12834734)
Number of Verified Splits: 2744 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.0006239414215087891 
BICCOS Cumulative time: 0.0820469856262207
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12835 (14), -0.12600 (14), -0.12540 (14), -0.12351 (14), -0.12219 (14), -0.12160 (15), -0.12131 (14), -0.12130 (14), -0.12096 (14), -0.12086 (15), -0.12028 (15), -0.12022 (14), -0.11954 (15), -0.11950 (15), -0.11945 (15), -0.11934 (15), -0.11877 (14), -0.11876 (15), -0.11871 (15), -0.11870 (14), 
Length of domains: 14360
Time: pickout 0.1013    decision 0.6601    set_bounds 0.8888    solve 2.3747    add 0.0515    
Accumulated time: pickout 0.2528    decision 1.9265    set_bounds 2.1957    solve 7.1511    add 0.4187    
Current (lb-rhs): -0.12834733724594116
33881 domains visited
current_vram/total_varm: 29.8GB/99.9GB, batch_size increase to 16384
Cumulative time: 12.33523416519165

BaB round 10
batch: 14360
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1819] [/input-8, 1182] [/input-8, 174] [/input-8, 1819] [/input-8, 1571] [/input-8, 1182] [/input-8, 174] [/input-8, 174] [/input-8, 1819] [/input-8, 1182] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.12460857629776001
10 lb beta sum: 0.47465312480926514, worst -0.1245775818824768
Time: prepare 1.3097    bound 2.2238    transfer 0.3389    finalize 0.2036    func 4.2664    
Accumulated time: func 11.6041    prepare 3.2404    bound 6.6580    transfer 0.7069    finalize 0.5561    
all_split False
======================Cut inference begins======================
max lb tensor(0.41731524) min lb tensor(-0.12455934)
Number of Verified Splits: 6167 of 28720
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.0007944107055664062 
BICCOS Cumulative time: 0.08284139633178711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12456 (15), -0.12382 (15), -0.12222 (15), -0.12161 (15), -0.12148 (15), -0.12087 (15), -0.12025 (15), -0.11973 (15), -0.11899 (15), -0.11857 (16), -0.11840 (15), -0.11805 (15), -0.11776 (15), -0.11766 (15), -0.11757 (16), -0.11754 (15), -0.11751 (15), -0.11725 (16), -0.11685 (16), -0.11680 (15), 
Length of domains: 22553
Time: pickout 0.2459    decision 1.0310    set_bounds 1.6656    solve 4.5744    add 0.0808    
Accumulated time: pickout 0.4987    decision 2.9575    set_bounds 3.8613    solve 11.7255    add 0.4995    
Current (lb-rhs): -0.12455934286117554
56434 domains visited
Cumulative time: 20.00832772254944

BaB round 11
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 309] [/input-8, 460] [/input-8, 1182] [/input-8, 309] [/input-8, 309] [/input-8, 1573] [/input-8, 1573] [/input-12, 8] [/input-8, 1182] [/input-8, 1573] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.12158763408660889
10 lb beta sum: 0.47465312480926514, worst -0.12154960632324219
Time: prepare 1.5641    bound 2.5292    transfer 0.3696    finalize 0.2045    func 4.8839    
Accumulated time: func 16.4880    prepare 4.8050    bound 9.1872    transfer 1.0765    finalize 0.7606    
all_split False
======================Cut inference begins======================
max lb tensor(0.41232681) min lb tensor(-0.12153137)
Number of Verified Splits: 6892 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.0007784366607666016 
BICCOS Cumulative time: 0.08361983299255371
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12153 (16), -0.12052 (16), -0.11980 (16), -0.11947 (16), -0.11937 (16), -0.11919 (16), -0.11858 (16), -0.11854 (17), -0.11817 (16), -0.11757 (16), -0.11753 (17), -0.11746 (16), -0.11722 (17), -0.11722 (16), -0.11712 (16), -0.11689 (16), -0.11685 (16), -0.11681 (17), -0.11671 (16), -0.11651 (16), 
Length of domains: 32045
Time: pickout 0.2248    decision 1.6619    set_bounds 1.9668    solve 4.8903    add 0.0820    
Accumulated time: pickout 0.7235    decision 4.6194    set_bounds 5.8281    solve 16.6158    add 0.5815    
Current (lb-rhs): -0.12153136730194092
82310 domains visited
current_vram/total_varm: 39.7GB/99.9GB, batch_size increase to 32768
Cumulative time: 28.937578439712524

BaB round 12
batch: 32045
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1819] [/input, 935] [/input-8, 1819] [/input-12, 8] [/input-12, 8] [/input-8, 1819] [/input, 3257] [/input, 935] [/input-12, 8] [/input-8, 1637] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.12153059244155884
10 lb beta sum: 0.47465312480926514, worst -0.12151330709457397
Time: prepare 3.1270    bound 4.8989    transfer 0.7371    finalize 0.9890    func 10.1639    
Accumulated time: func 26.6519    prepare 7.9324    bound 14.0862    transfer 1.8136    finalize 1.7497    
all_split False
======================Cut inference begins======================
max lb tensor(0.41545206) min lb tensor(-0.12150151)
Number of Verified Splits: 16332 of 64090
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.00109100341796875 
BICCOS Cumulative time: 0.08471083641052246
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12150 (17), -0.12049 (17), -0.11978 (17), -0.11942 (17), -0.11916 (17), -0.11855 (17), -0.11815 (17), -0.11754 (17), -0.11743 (17), -0.11707 (17), -0.11682 (17), -0.11669 (17), -0.11647 (17), -0.11646 (17), -0.11641 (18), -0.11616 (17), -0.11601 (18), -0.11565 (17), -0.11534 (17), -0.11514 (17), 
Length of domains: 47758
Time: pickout 0.5864    decision 3.6338    set_bounds 3.5186    solve 10.1749    add 0.1645    
Accumulated time: pickout 1.3099    decision 8.2532    set_bounds 9.3467    solve 26.7907    add 0.7460    
Current (lb-rhs): -0.12150150537490845
130068 domains visited
Cumulative time: 47.221121072769165

BaB round 13
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 935] [/input-8, 1819] [/input-8, 174] [/input, 935] [/input-8, 1819] [/input-8, 1819] [/input-12, 8] [/input, 3257] [/input, 935] [/input, 935] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.11944514513015747
10 lb beta sum: 0.47465312480926514, worst -0.11939603090286255
Time: prepare 3.3134    bound 10.1952    transfer 0.7565    finalize 0.5291    func 15.9675    
Accumulated time: func 42.6194    prepare 11.2462    bound 24.2814    transfer 2.5701    finalize 2.2788    
all_split False
======================Cut inference begins======================
max lb tensor(0.41432309) min lb tensor(-0.11936611)
Number of Verified Splits: 18316 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.0010995864868164062 
BICCOS Cumulative time: 0.08581042289733887
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12049 (17), -0.11978 (17), -0.11942 (17), -0.11937 (18), -0.11815 (17), -0.11754 (17), -0.11743 (17), -0.11707 (17), -0.11702 (18), -0.11682 (17), -0.11647 (17), -0.11641 (18), -0.11641 (18), -0.11601 (18), -0.11565 (17), -0.11550 (18), -0.11508 (18), -0.11500 (17), -0.11494 (17), -0.11470 (18), 
Length of domains: 62210
Time: pickout 0.5124    decision 3.4468    set_bounds 3.9655    solve 15.9820    add 0.1654    
Accumulated time: pickout 1.8223    decision 11.7000    set_bounds 13.3121    solve 42.7727    add 0.9114    
Current (lb-rhs): -0.12049126625061035
177288 domains visited
Cumulative time: 71.55801749229431

BaB round 14
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input, 3257] [/input-8, 174] [/input-12, 8] [/input-8, 1819] [/input, 3259] [/input, 3257] [/input-12, 8] [/input-12, 8] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.11899757385253906
10 lb beta sum: 0.47465312480926514, worst -0.11900752782821655
Time: prepare 3.4110    bound 10.1968    transfer 0.7610    finalize 0.5367    func 15.3418    
Accumulated time: func 57.9612    prepare 14.6576    bound 34.4782    transfer 3.3311    finalize 2.8154    
all_split False
======================Cut inference begins======================
max lb tensor(0.41408750) min lb tensor(-0.11898047)
Number of Verified Splits: 19001 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.0012562274932861328 
BICCOS Cumulative time: 0.087066650390625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11937 (18), -0.11898 (18), -0.11763 (18), -0.11728 (18), -0.11702 (18), -0.11664 (18), -0.11641 (18), -0.11618 (18), -0.11603 (18), -0.11550 (18), -0.11529 (18), -0.11493 (18), -0.11491 (19), -0.11467 (18), -0.11455 (18), -0.11433 (18), -0.11431 (18), -0.11419 (18), -0.11415 (18), -0.11391 (19), 
Length of domains: 75977
Time: pickout 0.5236    decision 3.3792    set_bounds 4.4435    solve 16.2813    add 0.2162    
Accumulated time: pickout 2.3459    decision 15.0792    set_bounds 17.7557    solve 59.0540    add 1.1276    
Current (lb-rhs): -0.1193661093711853
223823 domains visited
Cumulative time: 96.64592576026917

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1182] [/input, 935] [/input-8, 589] [/input, 3257] [/input-8, 1819] [/input, 935] [/input-8, 1819] [/input-8, 1819] [/input, 935] [/input-8, 1613] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.11791974306106567
10 lb beta sum: 0.47465312480926514, worst -0.11788827180862427
Time: prepare 3.3916    bound 10.1960    transfer 0.7599    finalize 1.5233    func 16.3010    
Accumulated time: func 74.2622    prepare 18.0496    bound 44.6742    transfer 4.0909    finalize 4.3388    
all_split False
======================Cut inference begins======================
max lb tensor(0.41245171) min lb tensor(-0.11787605)
Number of Verified Splits: 17242 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.001130819320678711 
BICCOS Cumulative time: 0.08819746971130371
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11898 (18), -0.11788 (19), -0.11763 (18), -0.11728 (18), -0.11664 (18), -0.11618 (18), -0.11603 (18), -0.11553 (19), -0.11529 (18), -0.11512 (19), -0.11493 (18), -0.11492 (19), -0.11491 (19), -0.11467 (18), -0.11433 (18), -0.11419 (18), -0.11415 (18), -0.11391 (19), -0.11383 (18), -0.11383 (19), 
Length of domains: 91503
Time: pickout 0.5617    decision 3.3665    set_bounds 3.8176    solve 16.3152    add 0.1643    
Accumulated time: pickout 2.9076    decision 18.4457    set_bounds 21.5732    solve 75.3692    add 1.2920    
Current (lb-rhs): -0.11898046731948853
272117 domains visited
Cumulative time: 121.10963487625122

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input, 949] [/input-12, 8] [/input, 935] [/input-12, 8] [/input, 935] [/input-12, 8] [/input, 935] [/input-12, 8] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.1169477105140686
10 lb beta sum: 0.47465312480926514, worst -0.11689478158950806
Time: prepare 3.4379    bound 10.1972    transfer 0.7566    finalize 0.5386    func 15.3740    
Accumulated time: func 89.6361    prepare 21.4878    bound 54.8714    transfer 4.8476    finalize 4.8773    
all_split False
======================Cut inference begins======================
max lb tensor(0.41316083) min lb tensor(-0.11687225)
Number of Verified Splits: 16738 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.0011599063873291016 
BICCOS Cumulative time: 0.08935737609863281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11788 (19), -0.11687 (19), -0.11627 (19), -0.11595 (19), -0.11553 (19), -0.11512 (19), -0.11492 (19), -0.11452 (19), -0.11400 (19), -0.11392 (19), -0.11392 (19), -0.11383 (19), -0.11360 (19), -0.11332 (19), -0.11316 (20), -0.11305 (19), -0.11300 (19), -0.11298 (19), -0.11298 (19), -0.11282 (19), 
Length of domains: 107533
Time: pickout 0.5728    decision 3.9261    set_bounds 4.1756    solve 15.3933    add 0.1671    
Accumulated time: pickout 3.4804    decision 22.3718    set_bounds 25.7488    solve 90.7625    add 1.4591    
Current (lb-rhs): -0.11787605285644531
320915 domains visited
Cumulative time: 145.6447150707245

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1590] [/input-8, 1590] [/input, 935] [/input, 935] [/input, 3257] [/input-8, 1819] [/input-8, 1590] [/input, 948] [/input-12, 8] [/input-8, 1819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.11335915327072144
10 lb beta sum: 0.47465312480926514, worst -0.11331331729888916
Time: prepare 3.4853    bound 10.1956    transfer 0.7579    finalize 0.5224    func 15.4021    
Accumulated time: func 105.0383    prepare 24.9736    bound 65.0670    transfer 5.6054    finalize 5.3998    
all_split False
======================Cut inference begins======================
max lb tensor(0.41405141) min lb tensor(-0.11329406)
Number of Verified Splits: 15268 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.0011687278747558594 
BICCOS Cumulative time: 0.09052610397338867
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11788 (19), -0.11687 (19), -0.11627 (19), -0.11595 (19), -0.11553 (19), -0.11492 (19), -0.11452 (19), -0.11400 (19), -0.11392 (19), -0.11392 (19), -0.11383 (19), -0.11360 (19), -0.11332 (19), -0.11329 (20), -0.11316 (20), -0.11305 (19), -0.11300 (19), -0.11298 (19), -0.11298 (19), -0.11282 (19), 
Length of domains: 125033
Time: pickout 0.6015    decision 4.0786    set_bounds 4.3325    solve 15.4201    add 0.1720    
Accumulated time: pickout 4.0820    decision 26.4504    set_bounds 30.0814    solve 106.1825    add 1.6310    
Current (lb-rhs): -0.11787605285644531
371183 domains visited
Cumulative time: 170.54339981079102

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2780] [/input-8, 916] [/input-12, 8] [/input-8, 916] [/input-12, 8] [/input-12, 8] [/input, 949] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.11615258455276489
10 lb beta sum: 0.47465312480926514, worst -0.11613136529922485
Time: prepare 3.4705    bound 10.1943    transfer 0.7573    finalize 0.5265    func 15.3863    
Accumulated time: func 120.4246    prepare 28.4444    bound 75.2613    transfer 6.3627    finalize 5.9263    
all_split False
======================Cut inference begins======================
max lb tensor(0.41391021) min lb tensor(-0.11611986)
Number of Verified Splits: 13081 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.0011150836944580078 
BICCOS Cumulative time: 0.09164118766784668
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11687 (19), -0.11627 (19), -0.11612 (20), -0.11595 (19), -0.11452 (19), -0.11440 (20), -0.11400 (19), -0.11392 (19), -0.11392 (19), -0.11377 (20), -0.11360 (19), -0.11332 (19), -0.11329 (20), -0.11317 (20), -0.11316 (20), -0.11300 (19), -0.11298 (19), -0.11282 (19), -0.11253 (20), -0.11244 (19), 
Length of domains: 144720
Time: pickout 0.6046    decision 4.2709    set_bounds 4.5814    solve 15.4019    add 0.1815    
Accumulated time: pickout 4.6866    decision 30.7212    set_bounds 34.6628    solve 121.5844    add 1.8125    
Current (lb-rhs): -0.11687225103378296
423638 domains visited
Cumulative time: 195.8482563495636

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 924] [/input-12, 8] [/input, 972] [/input-12, 8] [/input, 949] [/input, 949] [/input-12, 8] [/input-8, 246] [/input, 3259] [/input-12, 8] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.11281365156173706
10 lb beta sum: 0.47465312480926514, worst -0.11279529333114624
Time: prepare 3.5304    bound 10.1966    transfer 0.7614    finalize 2.2628    func 17.1831    
Accumulated time: func 137.6077    prepare 31.9752    bound 85.4578    transfer 7.1242    finalize 8.1891    
all_split False
======================Cut inference begins======================
max lb tensor(0.41382533) min lb tensor(-0.11276203)
Number of Verified Splits: 13266 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.0012745857238769531 
BICCOS Cumulative time: 0.09291577339172363
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11687 (19), -0.11627 (19), -0.11612 (20), -0.11595 (19), -0.11452 (19), -0.11440 (20), -0.11392 (19), -0.11392 (19), -0.11377 (20), -0.11360 (19), -0.11332 (19), -0.11329 (20), -0.11317 (20), -0.11300 (19), -0.11276 (20), -0.11253 (20), -0.11237 (20), -0.11205 (20), -0.11205 (19), -0.11174 (21), 
Length of domains: 164222
Time: pickout 0.6204    decision 4.4849    set_bounds 3.0162    solve 17.1977    add 0.1883    
Accumulated time: pickout 5.3069    decision 35.2061    set_bounds 37.6790    solve 138.7821    add 2.0008    
Current (lb-rhs): -0.11687225103378296
475908 domains visited
Time out!!!!!!!!
Result: unknown in 224.6815 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 199, vnnlib ID: 199 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.63621330, -19.31394958, -18.21076202, -17.92309380, -18.10323524,
         -18.31404495, -16.63964081, -19.00939178, -21.36870193, -18.44220543]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [674]; unstable size 674; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 288, 1, 674] with unstable size 287 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 32, 1, 674] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 674] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [287]; unstable size 287; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 32, 1, 287] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 287] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [31]; unstable size 31; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.81797171, -0.16427088,  0.28392172, -0.02352792,  0.05720663,
          0.13988924,  0.34796524,  2.02355814, -0.78494501]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.63621330, -19.31394958, -18.21076202, -17.92309380, -18.10323524,
         -18.31404495, -16.63964081, -19.00939178, -21.36870193, -18.44220543]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.39it/s]100%|██████████| 1/1 [00:00<00:00,  8.38it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.02352142, -19.11580658, -19.11502075, -18.61793518, -18.98342514,
          -19.01864624, -17.76090240, -19.74974632, -21.62246895, -18.24372292],
         [-20.02352142, -19.11580658, -19.11502075, -18.61793518, -18.98342514,
          -19.01864624, -17.76090240, -19.74974632, -21.62246895, -18.24372292]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[1.35490417, 0.85703278, 0.48282051]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1230 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 3.6754589080810547
alpha/beta optimization time: 1.2206621170043945
initial alpha-crown bounds: tensor([[ 0.93886685,  0.00690556,  0.35141206,  0.04002100,  0.13587236,
          0.21445990,  0.44984019,  2.16908169, -0.63100052]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.6310005187988281
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.60545349121094
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6054129600525
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.605388879776
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.60536813735962
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.6053488254547
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.60532879829407
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.605309009552
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.60528802871704
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.60526847839355
Verifying property 8 with 1 instances.
##### Instance 199 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.63100052]], device='cuda:0') need to verify.
Model prediction is: tensor([-19.63621330, -19.31394958, -18.21076202, -17.92309380, -18.10323524,
        -18.31404495, -16.63964081, -19.00939178, -21.36870193, -18.44220543],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.63100052]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 674
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 282
Node /15 input 0: size torch.Size([100]) unstable 31
-----------------
# of unstable neurons: 987
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010085105895996094
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6309971809387207
10 lb beta sum: 0.0, worst -0.6310110092163086
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0530    transfer 0.0001    finalize 0.0001    func 0.0534    
Accumulated time: func 0.0534    prepare 0.0002    bound 0.0530    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] 
split level 1: [/input-12, 18] 
split level 2: [/input-12, 20] 
split level 3: [/input-12, 7] 
split level 4: [/input-12, 68] 
split level 5: [/input-12, 86] 
split level 6: [/input-12, 32] 
split level 7: [/input-12, 59] 
split level 8: [/input-8, 868] 
split level 9: [/input-12, 92] 
split level 10: [/input-12, 15] 
split level 11: [/input-12, 14] 
split level 12: [/input-8, 870] 
split level 13: [/input-8, 36] 
split level 14: [/input-8, 155] 
split level 15: [/input-8, 467] 
split level 16: [/input-8, 1057] 
split level 17: [/input-8, 438] 
split level 18: [/input-8, 877] 
split level 19: [/input-8, 1379] 
split level 20: [/input, 2950] 
split level 21: [/input-8, 1126] 
split level 22: [/input-8, 149] 
split level 23: [/input-8, 430] 
split level 24: [/input-8, 1563] 
split level 25: [/input, 2949] 
split level 26: [/input-8, 35] 
split level 27: [/input-8, 883] 
split level 28: [/input-8, 1380] 
split level 29: [/input-8, 156] 
split level 30: [/input-8, 118] 
split level 31: [/input-8, 466] 
split level 32: [/input-8, 382] 
split level 33: [/input-8, 1571] 
split level 34: [/input-8, 1378] 
split level 35: [/input-8, 461] 
split level 36: [/input-8, 451] 
split level 37: [/input-8, 34] 
split level 38: [/input-8, 1124] 
split level 39: [/input-8, 442] 
split level 40: [/input-8, 1061] 
split level 41: [/input-8, 1044] 
split level 42: [/input-8, 1036] 
split level 43: [/input-8, 1053] 
split level 44: [/input, 2916] 
split level 45: [/input-8, 1388] 
split level 46: [/input-8, 1370] 
split level 47: [/input-8, 1628] 
split level 48: [/input, 389] 
split level 49: [/input-8, 944] 
split level 50: [/input-8, 1387] 
split level 51: [/input-8, 1027] 
split level 52: [/input-8, 1562] 
split level 53: [/input-8, 773] 
split level 54: [/input-8, 413] 
split level 55: [/input-8, 1509] 
split level 56: [/input-8, 1381] 
split level 57: [/input-8, 441] 
split level 58: [/input, 935] 
split level 59: [/input-8, 1382] 
split level 60: [/input-8, 182] 
split level 61: [/input-8, 1738] 
split level 62: [/input-8, 125] 
split level 63: [/input-8, 179] 
split level 64: [/input, 887] 
split level 65: [/input-8, 1358] 
split level 66: [/input-8, 945] 
split level 67: [/input-8, 1620] 
split level 68: [/input-8, 1355] 
split level 69: [/input-8, 884] 
split level 70: [/input-8, 446] 
split level 71: [/input-8, 119] 
split level 72: [/input-8, 1369] 
split level 73: [/input-8, 1386] 
split level 74: [/input-8, 1389] 
split level 75: [/input-12, 56] 
split level 76: [/input-12, 57] 
split level 77: [/input-8, 1109] 
split level 78: [/input, 650] 
split level 79: [/input-8, 955] 
split level 80: [/input, 343] 
split level 81: [/input, 138] 
split level 82: [/input-8, 1390] 
split level 83: [/input-8, 1612] 
split level 84: [/input-8, 410] 
split level 85: [/input-8, 212] 
split level 86: [/input-8, 20] 
split level 87: [/input, 937] 
split level 88: [/input, 155] 
split level 89: [/input-8, 140] 
split level 90: [/input, 134] 
split level 91: [/input, 916] 
split level 92: [/input, 2743] 
split level 93: [/input, 1481] 
split level 94: [/input-8, 1359] 
split level 95: [/input-8, 1621] 
split level 96: [/input, 117] 
split level 97: [/input-8, 585] 
split level 98: [/input-8, 402] 
split level 99: [/input, 1453] 
split level 100: [/input, 1451] 
split level 101: [/input, 156] 
split level 102: [/input-8, 1613] 
split level 103: [/input-8, 1739] 
split level 104: [/input-8, 1385] 
split level 105: [/input-8, 863] 
split level 106: [/input-8, 304] 
split level 107: [/input, 1499] 
split level 108: [/input, 917] 
split level 109: [/input-8, 1247] 
split level 110: [/input, 169] 
split level 111: [/input-8, 403] 
split level 112: [/input, 116] 
split level 113: [/input-8, 1291] 
split level 114: [/input, 1454] 
split level 115: [/input, 3363] 
split level 116: [/input-8, 2027] 
split level 117: [/input, 3009] 
split level 118: [/input-8, 1398] 
split level 119: [/input-8, 1747] 
split level 120: [/input-8, 431] 
split level 121: [/input-8, 412] 
split level 122: [/input-8, 1077] 
split level 123: [/input, 1303] 
split level 124: [/input, 885] 
split level 125: [/input, 3229] 
split level 126: [/input-8, 885] 
split level 127: [/input, 3252] 
split level 128: [/input-8, 1526] 
split level 129: [/input, 181] 
split level 130: [/input-8, 404] 
split level 131: [/input, 2757] 
split level 132: [/input-8, 218] 
split level 133: [/input-8, 235] 
split level 134: [/input-8, 1678] 
split level 135: [/input-8, 733] 
split level 136: [/input-8, 1329] 
split level 137: [/input, 3292] 
split level 138: [/input, 102] 
split level 139: [/input, 3273] 
split level 140: [/input, 1514] 
split level 141: [/input-8, 220] 
split level 142: [/input, 150] 
split level 143: [/input-8, 1670] 
split level 144: [/input, 130] 
split level 145: [/input, 2716] 
split level 146: [/input, 2765] 
split level 147: [/input-8, 447] 
split level 148: [/input-8, 407] 
split level 149: [/input, 2739] 
split level 150: [/input, 857] 
split level 151: [/input-8, 578] 
split level 152: [/input-8, 1622] 
split level 153: [/input-8, 176] 
split level 154: [/input, 2667] 
split level 155: [/input-8, 440] 
split level 156: [/input, 649] 
split level 157: [/input, 648] 
split level 158: [/input-8, 969] 
split level 159: [/input, 2751] 
split level 160: [/input-8, 1331] 
split level 161: [/input-8, 229] 
split level 162: [/input-8, 278] 
split level 163: [/input, 216] 
split level 164: [/input-8, 411] 
split level 165: [/input, 905] 
split level 166: [/input, 165] 
split level 167: [/input-8, 87] 
split level 168: [/input, 876] 
split level 169: [/input, 841] 
split level 170: [/input-8, 1219] 
split level 171: [/input-8, 296] 
split level 172: [/input, 2875] 
split level 173: [/input-8, 59] 
split level 174: [/input-8, 1539] 
split level 175: [/input-8, 961] 
split level 176: [/input, 235] 
split level 177: [/input-8, 174] 
split level 178: [/input-8, 62] 
split level 179: [/input, 1509] 
split level 180: [/input-8, 439] 
split level 181: [/input-8, 909] 
split level 182: [/input, 956] 
split level 183: [/input-8, 211] 
split level 184: [/input-8, 355] 
split level 185: [/input, 2766] 
split level 186: [/input, 2674] 
split level 187: [/input, 844] 
split level 188: [/input, 2720] 
split level 189: [/input, 1767] 
split level 190: [/input-8, 928] 
split level 191: [/input-8, 284] 
split level 192: [/input-8, 14] 
split level 193: [/input, 24] 
split level 194: [/input, 939] 
split level 195: [/input-8, 130] 
split level 196: [/input, 1165] 
split level 197: [/input, 1768] 
split level 198: [/input-8, 1347] 
split level 199: [/input, 1130] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6308536529541016
10 lb beta sum: 0.0, worst -0.6308555603027344
Time: prepare 0.0117    bound 0.0971    transfer 0.0037    finalize 0.0028    func 0.1179    
Accumulated time: func 0.1714    prepare 0.0217    bound 0.1501    transfer 0.0038    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.33893394) min lb tensor(-0.63083935)
Number of Verified Splits: 7 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.010528326034545898 
BICCOS Cumulative time: 0.010528326034545898
Preprocessing time: 0.00985097885131836 Inference time: 0.00030803680419921875 Add cuts time: 0.00010466575622558594 Cut analysis time: 0.0002646446228027344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.60489 (1), -0.60481 (1), -0.60424 (1), -0.60408 (1), -0.60220 (1), -0.60144 (1), -0.60139 (1), -0.60124 (1), -0.60065 (1), -0.59956 (1), -0.59949 (1), -0.59679 (1), -0.59613 (1), -0.59579 (1), -0.59523 (1), -0.59267 (1), -0.59182 (1), -0.59134 (1), -0.59101 (1), -0.59061 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5187    set_bounds 0.0091    solve 0.1180    add 0.0678    
Accumulated time: pickout 0.0003    decision 0.5187    set_bounds 0.0091    solve 0.1180    add 0.0678    
Current (lb-rhs): -0.6048879623413086
50 domains visited
Cumulative time: 0.7825717926025391

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 20] [/input-12, 18] 
split level 2: [/input-12, 20] [/input-12, 86] [/input-12, 86] [/input-12, 20] [/input-12, 20] [/input-12, 20] [/input-12, 20] [/input-12, 20] [/input-12, 86] [/input-12, 20] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 86] [/input-12, 86] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5662164688110352
10 lb beta sum: 1.4109927415847778, worst -0.4495925307273865
Time: prepare 0.0075    bound 0.1177    transfer 0.0011    finalize 0.0024    func 0.1313    
Accumulated time: func 0.3027    prepare 0.0294    bound 0.2678    transfer 0.0049    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.56413424) min lb tensor(-0.44908017)
Number of Verified Splits: 152 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.020260095596313477 
BICCOS Cumulative time: 0.030788421630859375
Preprocessing time: 0.011873722076416016 Inference time: 0.005999326705932617 Add cuts time: 0.0020933151245117188 Cut analysis time: 0.000293731689453125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21996 (2), -0.21952 (2), -0.21895 (2), -0.21651 (2), -0.21570 (2), -0.21541 (2), -0.21508 (2), -0.21464 (2), -0.21432 (2), -0.21055 (2), -0.20996 (2), -0.20925 (2), -0.20922 (2), -0.20887 (2), -0.20832 (2), -0.20691 (2), -0.20646 (2), -0.20531 (2), -0.20491 (2), -0.20347 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0254    set_bounds 0.0119    solve 0.1314    add 0.0914    
Accumulated time: pickout 0.0013    decision 0.5440    set_bounds 0.0210    solve 0.2494    add 0.1592    
Current (lb-rhs): -0.21995985507965088
100 domains visited
Cumulative time: 1.0641131401062012

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] 
split level 2: [/input-12, 86] [/input-12, 7] [/input-12, 7] [/input-12, 20] [/input-12, 7] [/input-12, 7] [/input-12, 20] [/input-12, 20] [/input-12, 86] [/input-12, 7] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 7] [/input-12, 7] [/input-12, 32] [/input-12, 86] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3658013343811035
10 lb beta sum: 1.3766350746154785, worst -0.20603978633880615
Time: prepare 0.0072    bound 0.1165    transfer 0.0013    finalize 0.0024    func 0.1300    
Accumulated time: func 0.4327    prepare 0.0368    bound 0.3843    transfer 0.0062    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.62425983) min lb tensor(-0.20534647)
Number of Verified Splits: 224 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 18
#cuts >= 20: 0
BICCOS time: 0.026309967041015625 
BICCOS Cumulative time: 0.057098388671875
Preprocessing time: 0.01160120964050293 Inference time: 0.009609699249267578 Add cuts time: 0.004672527313232422 Cut analysis time: 0.0004265308380126953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10091 (3), -0.09691 (3), -0.09672 (3), -0.09536 (3), -0.07721 (3), -0.07668 (3), -0.07480 (3), -0.07458 (3), -0.07423 (3), -0.07399 (3), -0.07382 (3), -0.06945 (3), -0.06889 (3), -0.06865 (3), -0.06779 (3), -0.06768 (3), -0.06607 (3), -0.06457 (3), -0.06450 (3), -0.06291 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0192    set_bounds 0.0153    solve 0.1301    add 0.0930    
Accumulated time: pickout 0.0023    decision 0.5632    set_bounds 0.0363    solve 0.3795    add 0.2522    
Current (lb-rhs): -0.10090970993041992
150 domains visited
Cumulative time: 1.3491442203521729

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] 
split level 2: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
split level 3: [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-8, 868] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.257171630859375
10 lb beta sum: 2.041074752807617, worst -0.07906246185302734
Time: prepare 0.0076    bound 0.1325    transfer 0.0011    finalize 0.0020    func 0.1462    
Accumulated time: func 0.5789    prepare 0.0447    bound 0.5168    transfer 0.0073    finalize 0.0097    
all_split False
======================Cut inference begins======================
max lb tensor(0.44942093) min lb tensor(-0.07731056)
Number of Verified Splits: 347 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 34
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.03924298286437988 
BICCOS Cumulative time: 0.09634137153625488
Preprocessing time: 0.011463165283203125 Inference time: 0.015171051025390625 Add cuts time: 0.011768341064453125 Cut analysis time: 0.0008404254913330078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02959 (4), -0.02958 (4), -0.02957 (4), -0.02957 (4), -0.02955 (4), -0.02954 (4), -0.02952 (4), -0.02949 (4), -0.02921 (4), -0.02921 (4), -0.02919 (4), -0.02914 (4), -0.02894 (4), -0.02893 (4), -0.02891 (4), -0.02883 (4), -0.02701 (4), -0.02701 (4), -0.02700 (4), -0.02699 (4), 
Length of domains: 32
Time: pickout 0.0010    decision 0.0191    set_bounds 0.0152    solve 0.1463    add 0.2375    
Accumulated time: pickout 0.0033    decision 0.5823    set_bounds 0.0515    solve 0.5258    add 0.4897    
Current (lb-rhs): -0.029586315155029297
182 domains visited
Cumulative time: 1.8077847957611084

Shallow-BaB round 5
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 18] [/input-12, 18] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 7] [/input-12, 7] 
split level 2: [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-12, 7] [/input-8, 868] [/input-12, 7] [/input-8, 868] [/input-8, 868] [/input-8, 868] 
split level 3: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 4: [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] 
split level 5: [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23261499404907227

all verified at 5th iter
Time: prepare 0.0070    bound 0.0393    transfer 0.0021    finalize 0.0026    func 0.0534    
Accumulated time: func 0.6323    prepare 0.0520    bound 0.5561    transfer 0.0095    finalize 0.0123    
all_split False
======================Cut inference begins======================
max lb tensor(0.52575541) min lb tensor(0.00088000)
Number of Verified Splits: 384 of 384
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 34
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.03848433494567871 
BICCOS Cumulative time: 0.1348257064819336
Preprocessing time: 0.011077642440795898 Inference time: 0.019385576248168945 Add cuts time: 0.007057905197143555 Cut analysis time: 0.0009632110595703125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0244    set_bounds 0.0134    solve 0.0535    add 0.0296    
Accumulated time: pickout 0.0042    decision 0.6067    set_bounds 0.0648    solve 0.5793    add 0.5193    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
182 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 72]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.82951758e+16, 1.89147994e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 72]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.82951758e+16, 6.27067149e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 72]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.21896981e-09, 3.64283979e-01, 1.37302149e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 72]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.21896981e-09, 3.64283979e-01, 4.53523338e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72, 18]), tensor([ 1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.21896981e-09, 2.65586793e-01, 1.45734832e-01, 1.78817976e-02,
        3.45724404e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72, 18]), tensor([ 1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.21896981e-09, 2.65586793e-01, 1.45734832e-01, 1.78817976e-02,
        3.12309731e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.21896981e-09, 2.65586793e-01, 1.45734832e-01, 4.82242286e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72, 18]), tensor([ 1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.21896981e-09, 2.65586793e-01, 1.41787454e-01, 1.91255081e-02,
        3.43751729e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72, 18]), tensor([ 1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.21896981e-09, 2.65586793e-01, 1.41787454e-01, 1.91255081e-02,
        3.05260886e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([1.21896981e-09, 2.65586793e-01, 1.41787454e-01, 4.61321652e-01]), tensor([0, 1, 2, 3]))}
Shallow branching resets to n domains:  10
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2752699851989746

all verified at 3th iter
Time: prepare 0.0004    bound 0.0252    transfer 0.0002    finalize 0.0002    func 0.0260    
Accumulated time: func 0.6584    prepare 0.0524    bound 0.5813    transfer 0.0096    finalize 0.0125    
After pruning, left:  0

Back to Regular BaB

Result: safe in 3.5886 seconds
############# Summary #############
Final verified acc: 51.0% (total 200 examples)
Problem instances count: 200 , total verified (safe/unsat): 102 , total falsified (unsafe/sat): 85 , timeout: 13
mean time for ALL instances (total 200):14.399976545597562, max time: 225.1262013912201
mean time for verified SAFE instances(total 102): 0.996700268165738, max time: 19.388716220855713
mean time for verified (SAFE + UNSAFE) instances (total 187): 0.569369419373293, max time: [1.1311006546020508, 9.588352918624878, 0.03515219688415527, 0.04158329963684082, 0.045221805572509766, 0.062222957611083984, 0.06269359588623047, 0.2874171733856201, 2.371302604675293, 0.039936065673828125, 0.06858229637145996, 0.03815197944641113, 3.6330158710479736, 0.036232948303222656, 0.04931902885437012, 0.04662203788757324, 0.06737303733825684, 0.06363797187805176, 0.04527902603149414, 0.048433542251586914, 2.38877272605896, 0.03206610679626465, 0.048104047775268555, 0.03829169273376465, 0.04578542709350586, 0.05213308334350586, 2.6132383346557617, 0.06450414657592773, 0.06150484085083008, 0.06297779083251953, 2.3425605297088623, 0.0690908432006836, 0.0472712516784668, 0.03625845909118652, 2.5511460304260254, 2.843595027923584, 0.053435325622558594, 0.06286144256591797, 0.0643625259399414, 0.06291031837463379, 0.06210756301879883, 0.0628054141998291, 0.047927141189575195, 0.04198575019836426, 0.04752182960510254, 19.388716220855713, 0.03904438018798828, 0.04924488067626953, 0.05850672721862793, 2.4854366779327393, 2.4539244174957275, 0.19206690788269043, 0.06189417839050293, 2.430595636367798, 0.057520151138305664, 0.05609774589538574, 0.03809785842895508, 2.8098385334014893, 0.049831390380859375, 0.03754234313964844, 0.041062355041503906, 0.045404911041259766, 0.042093515396118164, 2.537419080734253, 0.06260800361633301, 0.05573844909667969, 2.2631137371063232, 0.044142961502075195, 3.4492149353027344, 0.0429995059967041, 0.04662823677062988, 0.02399611473083496, 0.02942681312561035, 0.039850711822509766, 0.030991792678833008, 0.02875661849975586, 0.03142285346984863, 0.02997422218322754, 0.04753470420837402, 6.474013090133667, 0.05418562889099121, 2.4940640926361084, 0.037255287170410156, 0.04221391677856445, 0.04366159439086914, 0.05266261100769043, 0.02800297737121582, 0.4467039108276367, 0.0443267822265625, 0.04355764389038086, 0.03403329849243164, 3.205744743347168, 0.05445122718811035, 4.931297302246094, 0.0358579158782959, 5.774403095245361, 3.4122815132141113, 0.03326845169067383, 0.058528900146484375, 0.061812400817871094, 0.046887874603271484, 3.5886268615722656]
mean time for verified SAFE + TIMEOUT instances (total 115): 25.001624339559804, max time: [220.02399015426636, 222.61157822608948, 207.48333168029785, 204.85318899154663, 218.82749366760254, 203.76144361495972, 225.0009160041809, 203.74747562408447, 205.1261923313141, 225.1262013912201, 206.94316482543945, 205.33684706687927, 224.6815481185913] 
mean time for verified UNSAFE instances (total 85): 0.056572400822358974, max time: 0.08594703674316406
safe-incomplete (total 79), index: [0, 7, 8, 11, 14, 17, 18, 20, 22, 23, 26, 27, 28, 30, 31, 33, 37, 39, 40, 41, 42, 47, 49, 51, 52, 55, 60, 62, 68, 69, 70, 71, 73, 74, 75, 79, 81, 85, 86, 89, 98, 103, 107, 109, 110, 114, 115, 116, 117, 118, 121, 131, 133, 136, 139, 140, 142, 144, 146, 147, 148, 153, 157, 159, 161, 164, 166, 168, 171, 175, 177, 179, 180, 182, 186, 190, 192, 193, 197]
unsafe-pgd (total 85), index: [1, 3, 4, 5, 6, 9, 10, 12, 15, 16, 21, 25, 29, 32, 34, 35, 36, 43, 44, 45, 46, 50, 53, 56, 58, 61, 63, 65, 72, 78, 80, 82, 84, 87, 88, 90, 91, 92, 94, 95, 96, 99, 100, 101, 102, 105, 106, 108, 112, 113, 119, 122, 123, 124, 125, 126, 128, 129, 130, 134, 138, 141, 143, 145, 149, 150, 151, 152, 155, 156, 163, 165, 167, 169, 170, 173, 174, 176, 178, 183, 184, 188, 194, 195, 196]
safe (total 23), index: [2, 19, 24, 38, 48, 54, 64, 67, 83, 93, 97, 104, 111, 120, 132, 135, 158, 160, 181, 185, 187, 189, 199]
unknown (total 13), index: [13, 57, 59, 66, 76, 77, 127, 137, 154, 162, 172, 191, 198]
