Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  verify_onnxruntime_output: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  prepare_only: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: ablation_results/cifar_cnn_a_mix4/biccos_all.out
  root_path: ''
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: false
  output_file: out.pkl
  return_optimized_model: false
model:
  name: cnn_4layer_mix4
  path: models/sdp/cifar_cnn_a_mix4.model
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: []
  onnx_vnnlib_joint_optimization_flags: none
  check_optimized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.00784313725
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 4096
  auto_enlarge_batch_size: true
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    relu_option: adaptive
    compare_crown_with_ibp: false
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: []
    max_time: 1.0
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    max_dim: 10000
    reset_threshold: 1.0
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    unstable_neuron_threshold: 0
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
    topk_filter: 1.0
    sliding_window: -1
    extra_constraint: false
    refine_neuron_timeout_increasement: 0
    timeout_neuron_percentage: 0.3
    remaining_timeout_threshold: 1
    remove_unstable_neurons: false
    lp_solver: mip
    output_cut: false
bab:
  initial_max_domains: 1
  backing_up_max_domain: null
  max_domains: .inf
  decision_thresh: 0
  timeout: 200
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: false
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  tree_traversal: breadth_first
  cut:
    enabled: true
    cuts_path: /tmp/abcrown_cuts_372
    implication: false
    bab_cut: true
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 0.99
    iteration: 200
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.05
    number_cuts: 500
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
    biccos:
      enabled: true
      auto_param: false
      constraint_strengthening: true
      recursively_strengthening: false
      merge_cut_enabled: false
      fast_inference_enabled: false
      drop_ratio: 0.5
      max_infer_iter: 40
      heuristic: neuron_influence_score
      save_cuts: false
      multi_tree_branching:
        enabled: true
        restore_best_tree: true
        keep_n_best_domains: 50
        target_batch_size: 200
        iterations: 5
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      filter: false
      filter_beta: false
      filter_clamp: false
      filter_batch_size: 10000
      filter_iterations: 25
      relu_only: false
      loose_tanh_threshold: null
      dynamic_bbps: false
      dynamic_options: [uniform, three_left, three_right]
      branching_point_node: ''
      branching_point_db: []
    input_split:
      enable_clip_domains: false
      split_hint: null
      reorder_bab: false
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_sum: false
      sb_primary_spec: null
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_iters: 1000000000.0
      bf_batch_size: 100000
      bf_zero_crossing_score: false
      touch_zero_score: 0
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 0.001
      sort_index: null
      sort_descending: true
      show_progress: false
      presplit_domains: null
      skip_getting_worst_domain: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: middle
  pgd_steps: 100
  pgd_restarts: 50
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_alpha_scale: false
  pgd_loss_mode: null
  pgd_restart_when_stuck: false
  enable_mip_attack: false
  adv_saver: default_adv_saver
  adv_verifier: default_adv_verifier
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    enabled: auto
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false
  biccos_mip_sanity_check: false
  sanity_check: 0
  z_split_enabled: false

Experiments at Wed Oct 30 06:59:07 2024 on n23g0030.hpc.itc.rwth-aachen.de
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten(start_dim=1, end_dim=-1)
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
Parameters:
  0.weight: shape torch.Size([16, 3, 4, 4])
  0.bias: shape torch.Size([16])
  2.weight: shape torch.Size([32, 16, 4, 4])
  2.bias: shape torch.Size([32])
  5.weight: shape torch.Size([100, 2048])
  5.bias: shape torch.Size([100])
  7.weight: shape torch.Size([10, 100])
  7.bias: shape torch.Size([10])
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308715)
############################
Internal results will be saved to ablation_results/cifar_cnn_a_mix4/biccos_all.out.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.71758652, -10.60625553,  -8.48054504,  -7.71353006,  -8.18405724,
          -8.17642593,  -8.98493576,  -8.79066181, -11.70876884, -10.32774353]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [744]; unstable size 744; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 150, 1, 744] with unstable size 149 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 744] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 744] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [149]; unstable size 149; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 149] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.43510044, 2.04025793, 0.39722466, 0.03137314, 0.32232368, 0.68482649,
         0.70088989, 3.05900335, 1.95559049]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.3861 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.86604881, -21.89766502, -32.18166733, -30.40774727, -31.19883347,
         -31.09389877, -30.58707047, -32.34036255, -29.66195297, -22.73365021]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [681]; unstable size 681; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 237, 1, 681] with unstable size 236 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 681] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 681] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [236]; unstable size 236; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 236] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 236] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.86854863, -1.72656703,  7.80241489,  6.11302567,  6.77265549,
          6.66194582,  6.08438587,  7.59613085,  5.53368521]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.86604881, -21.89766502, -32.18166733, -30.40774727, -31.19883347,
         -31.09389877, -30.58707047, -32.34036255, -29.66195297, -22.73365021]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.86604881, -21.89766502, -32.18166733, -30.40774727, -31.19883347,
          -31.09389877, -30.58707047, -32.34036255, -29.66195297, -22.73365021]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.83598518]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.46507931, -1.30634916, -1.32222211,  ...,  0.10634929,
             0.02698422,  0.04285724],
           [-1.25873005, -1.35396814, -1.40158725,  ...,  0.31269848,
             0.28095245,  0.28095245],
           [ 0.15396833,  0.42380959,  0.29682547,  ..., -0.00476181,
            -0.17936498, -0.24285704],
           ...,
           [-0.86190474, -0.60793650, -0.38571417,  ...,  0.91587305,
             0.82063496,  0.83650798],
           [-0.43333322, -0.30634910, -0.22698402,  ...,  0.90000004,
             0.77301592,  0.75714290],
           [-0.33809513, -0.30634910, -0.27460307,  ...,  0.88412702,
             0.78888893,  0.67777783]],

          [[-1.44927526, -1.28824472, -1.30434775,  ...,  0.20933989,
             0.14492765,  0.20933989],
           [-1.35265696, -1.36875999, -1.33655393,  ...,  0.37037048,
             0.35426742,  0.40257660],
           [-1.32045078, -1.35265696, -1.41706920,  ...,  0.04830930,
            -0.14492741, -0.24154577],
           ...,
           [-0.75684375, -0.51529789, -0.30595800,  ...,  0.91787446,
             0.83735919,  0.90177143],
           [-0.32206106, -0.19323659, -0.14492741,  ...,  0.90177143,
             0.78904998,  0.82125610],
           [-0.17713353, -0.17713353, -0.16103047,  ...,  0.90177143,
             0.78904998,  0.74074084]],

          [[-1.54272878, -1.49775124, -1.49775124,  ...,  0.42128953,
             0.34632701,  0.37631202],
           [-1.51274371, -1.55772126, -1.52773619,  ...,  0.52623707,
             0.49625200,  0.49625200],
           [-1.13793111, -1.09295356, -1.12293863,  ...,  0.09145443,
            -0.08845562, -0.19340314],
           ...,
           [-0.59820086, -0.43328333, -0.28335828,  ...,  0.88605714,
             0.81109464,  0.88605714],
           [-0.23838064, -0.14842562, -0.11844061,  ...,  0.85607213,
             0.76611710,  0.81109464],
           [-0.07346311, -0.10344811, -0.08845562,  ...,  0.75112462,
             0.79610211,  0.73613209]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1827 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.40543556, -20.17714310, -24.91600418, -24.17427254, -23.62779045,
         -24.44828224, -24.39273453, -25.42860413, -22.45011139, -21.93351555]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [974]; unstable size 974; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 268, 1, 974] with unstable size 267 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 974] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 974] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [267]; unstable size 267; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 267] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 267] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.48544788,  2.23013401,  1.58959150,  1.19109154,  1.84305763,
          1.51451492,  3.08925152,  0.10891151,  0.42558658]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.40543556, -20.17714310, -24.91600418, -24.17427254, -23.62779045,
         -24.44828224, -24.39273453, -25.42860413, -22.45011139, -21.93351555]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  2.05it/s]100%|██████████| 1/1 [00:00<00:00,  2.05it/s]
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/cuts/infered_cuts.py:406: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(history[3]),
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.96112823, -19.53406715, -23.43943405, -22.77491570, -22.15659523,
          -23.06166649, -22.97703743, -23.94551468, -21.15086555, -20.97314644]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.42706108]]], device='cuda:0')
number of violation:  0
Attack finished in 0.4912 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 12.328790664672852
alpha/beta optimization time: 3.7127766609191895
initial alpha-crown bounds: tensor([[-0.41349792,  2.33963585,  1.68942118,  1.28609324,  1.95209122,
          1.58836651,  3.19598174,  0.21351433,  0.47718394]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.4134979248046875
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 195.72668075561523
Verifying property 0 with 1 instances.
##### Instance 2 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.41349792]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.40543556, -20.17714310, -24.91600418, -24.17427254, -23.62779045,
        -24.44828224, -24.39273453, -25.42860413, -22.45011139, -21.93351555],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.41349792]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 974
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 263
Node /15 input 0: size torch.Size([100]) unstable 22
-----------------
# of unstable neurons: 1259
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00013327598571777344
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4134941101074219
10 lb beta sum: 0.0, worst -0.41351747512817383
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.5577    transfer 0.0001    finalize 0.0004    func 0.5584    
Accumulated time: func 0.5584    prepare 0.0002    bound 0.5577    transfer 0.0001    finalize 0.0004    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] 
split level 1: [/input-12, 6] 
split level 2: [/input-12, 79] 
split level 3: [/input-12, 67] 
split level 4: [/input-12, 24] 
split level 5: [/input-12, 90] 
split level 6: [/input-8, 1963] 
split level 7: [/input-12, 53] 
split level 8: [/input-12, 64] 
split level 9: [/input-12, 29] 
split level 10: [/input-12, 71] 
split level 11: [/input-8, 1964] 
split level 12: [/input-8, 1956] 
split level 13: [/input-12, 57] 
split level 14: [/input-8, 1133] 
split level 15: [/input-8, 1948] 
split level 16: [/input-8, 853] 
split level 17: [/input-8, 852] 
split level 18: [/input-8, 857] 
split level 19: [/input-8, 425] 
split level 20: [/input-8, 165] 
split level 21: [/input-8, 379] 
split level 22: [/input-8, 157] 
split level 23: [/input-8, 155] 
split level 24: [/input-8, 282] 
split level 25: [/input-8, 314] 
split level 26: [/input-8, 854] 
split level 27: [/input-8, 1719] 
split level 28: [/input-8, 922] 
split level 29: [/input-8, 421] 
split level 30: [/input-8, 290] 
split level 31: [/input-8, 619] 
split level 32: [/input-8, 1932] 
split level 33: [/input-8, 424] 
split level 34: [/input-8, 603] 
split level 35: [/input-8, 1236] 
split level 36: [/input-8, 317] 
split level 37: [/input-8, 745] 
split level 38: [/input-8, 617] 
split level 39: [/input-8, 154] 
split level 40: [/input-8, 618] 
split level 41: [/input-8, 1709] 
split level 42: [/input-8, 439] 
split level 43: [/input, 3542] 
split level 44: [/input-8, 928] 
split level 45: [/input, 3557] 
split level 46: [/input-8, 614] 
split level 47: [/input-8, 1763] 
split level 48: [/input-8, 1393] 
split level 49: [/input-8, 432] 
split level 50: [/input-8, 749] 
split level 51: [/input-8, 377] 
split level 52: [/input-8, 1698] 
split level 53: [/input-8, 416] 
split level 54: [/input-8, 105] 
split level 55: [/input-8, 318] 
split level 56: [/input-8, 1649] 
split level 57: [/input-8, 422] 
split level 58: [/input-8, 372] 
split level 59: [/input-8, 1701] 
split level 60: [/input-8, 313] 
split level 61: [/input-8, 1931] 
split level 62: [/input-8, 1625] 
split level 63: [/input-8, 858] 
split level 64: [/input-8, 1702] 
split level 65: [/input-8, 1700] 
split level 66: [/input-8, 1764] 
split level 67: [/input-8, 410] 
split level 68: [/input-8, 1235] 
split level 69: [/input, 3541] 
split level 70: [/input, 3958] 
split level 71: [/input-8, 316] 
split level 72: [/input-8, 414] 
split level 73: [/input-8, 371] 
split level 74: [/input-8, 1617] 
split level 75: [/input-8, 1650] 
split level 76: [/input-8, 1585] 
split level 77: [/input-8, 1040] 
split level 78: [/input-8, 408] 
split level 79: [/input-8, 1705] 
split level 80: [/input-8, 1704] 
split level 81: [/input-8, 1125] 
split level 82: [/input, 3573] 
split level 83: [/input-8, 1210] 
split level 84: [/input, 3560] 
split level 85: [/input, 2726] 
split level 86: [/input, 3558] 
split level 87: [/input, 3564] 
split level 88: [/input-8, 92] 
split level 89: [/input, 998] 
split level 90: [/input, 1016] 
split level 91: [/input, 3789] 
split level 92: [/input, 3575] 
split level 93: [/input, 1004] 
split level 94: [/input-8, 1628] 
split level 95: [/input-8, 1314] 
split level 96: [/input-8, 904] 
split level 97: [/input, 1003] 
split level 98: [/input-8, 981] 
split level 99: [/input, 3559] 
split level 100: [/input-12, 12] 
split level 101: [/input, 1483] 
split level 102: [/input, 3447] 
split level 103: [/input-8, 1619] 
split level 104: [/input, 1444] 
split level 105: [/input, 3578] 
split level 106: [/input, 3581] 
split level 107: [/input, 164] 
split level 108: [/input, 3556] 
split level 109: [/input-8, 381] 
split level 110: [/input, 3555] 
split level 111: [/input, 1002] 
split level 112: [/input, 1021] 
split level 113: [/input, 1948] 
split level 114: [/input, 995] 
split level 115: [/input, 3237] 
split level 116: [/input, 3572] 
split level 117: [/input-8, 1610] 
split level 118: [/input-8, 828] 
split level 119: [/input, 1457] 
split level 120: [/input-8, 973] 
split level 121: [/input, 1943] 
split level 122: [/input, 3543] 
split level 123: [/input-8, 1535] 
split level 124: [/input, 3553] 
split level 125: [/input, 1484] 
split level 126: [/input-8, 370] 
split level 127: [/input, 3574] 
split level 128: [/input-8, 412] 
split level 129: [/input-8, 2045] 
split level 130: [/input-8, 810] 
split level 131: [/input-8, 1712] 
split level 132: [/input, 2537] 
split level 133: [/input-8, 949] 
split level 134: [/input-8, 475] 
split level 135: [/input, 2503] 
split level 136: [/input, 2282] 
split level 137: [/input, 3540] 
split level 138: [/input, 2538] 
split level 139: [/input, 2519] 
split level 140: [/input, 494] 
split level 141: [/input-8, 415] 
split level 142: [/input, 2553] 
split level 143: [/input, 3554] 
split level 144: [/input, 2786] 
split level 145: [/input, 1970] 
split level 146: [/input, 2551] 
split level 147: [/input, 2552] 
split level 148: [/input, 1947] 
split level 149: [/input, 1758] 
split level 150: [/input-8, 1713] 
split level 151: [/input, 2788] 
split level 152: [/input, 2266] 
split level 153: [/input, 2279] 
split level 154: [/input-12, 36] 
split level 155: [/input, 3537] 
split level 156: [/input-8, 1609] 
split level 157: [/input, 888] 
split level 158: [/input-8, 1369] 
split level 159: [/input, 3241] 
split level 160: [/input, 3570] 
split level 161: [/input, 2991] 
split level 162: [/input, 3571] 
split level 163: [/input, 2769] 
split level 164: [/input, 872] 
split level 165: [/input-8, 818] 
split level 166: [/input-8, 980] 
split level 167: [/input-8, 1620] 
split level 168: [/input, 3569] 
split level 169: [/input, 3873] 
split level 170: [/input-8, 162] 
split level 171: [/input, 3269] 
split level 172: [/input, 1000] 
split level 173: [/input, 3041] 
split level 174: [/input, 2555] 
split level 175: [/input, 2182] 
split level 176: [/input-8, 466] 
split level 177: [/input-8, 1708] 
split level 178: [/input, 3469] 
split level 179: [/input, 2534] 
split level 180: [/input-8, 401] 
split level 181: [/input, 2682] 
split level 182: [/input-8, 168] 
split level 183: [/input, 2529] 
split level 184: [/input, 2214] 
split level 185: [/input, 2004] 
split level 186: [/input, 1950] 
split level 187: [/input-8, 1924] 
split level 188: [/input-8, 407] 
split level 189: [/input, 1917] 
split level 190: [/input, 3282] 
split level 191: [/input, 2278] 
split level 192: [/input, 2275] 
split level 193: [/input-8, 1611] 
split level 194: [/input, 1999] 
split level 195: [/input, 2583] 
split level 196: [/input, 2006] 
split level 197: [/input, 3161] 
split level 198: [/input, 1698] 
split level 199: [/input, 2260] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.41329431533813477
10 lb beta sum: 0.0, worst -0.4132537841796875
Time: prepare 0.0113    bound 0.1377    transfer 0.0030    finalize 0.0032    func 0.1579    
Accumulated time: func 0.7163    prepare 0.0217    bound 0.6953    transfer 0.0031    finalize 0.0036    
all_split False
======================Cut inference begins======================
max lb tensor(0.27173090) min lb tensor(-0.41324854)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.011018991470336914 
BICCOS Cumulative time: 0.011018991470336914
Preprocessing time: 0.009914398193359375 Inference time: 0.0007395744323730469 Add cuts time: 7.700920104980469e-05 Cut analysis time: 0.0002880096435546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.39415 (1), -0.39300 (1), -0.39261 (1), -0.39247 (1), -0.39090 (1), -0.39077 (1), -0.39066 (1), -0.38895 (1), -0.38807 (1), -0.38751 (1), -0.38648 (1), -0.38567 (1), -0.38450 (1), -0.38403 (1), -0.38378 (1), -0.38222 (1), -0.38198 (1), -0.38050 (1), -0.37986 (1), -0.37857 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5402    set_bounds 0.0081    solve 0.1580    add 0.0902    
Accumulated time: pickout 0.0004    decision 0.5402    set_bounds 0.0081    solve 0.1580    add 0.0902    
Current (lb-rhs): -0.39414501190185547
50 domains visited
Cumulative time: 1.4076354503631592

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 79] [/input-12, 79] [/input-12, 67] [/input-12, 67] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 6] 
split level 2: [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] 
split level 3: [/input-12, 53] [/input-12, 53] [/input-12, 64] [/input-12, 64] [/input-12, 53] [/input-12, 53] [/input-12, 64] [/input-12, 64] [/input-12, 53] [/input-12, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3831210136413574
10 lb beta sum: 0.3769442141056061, worst -0.3798961639404297
Time: prepare 0.0071    bound 1.2026    transfer 0.0015    finalize 0.0024    func 1.2163    
Accumulated time: func 1.9326    prepare 0.0290    bound 1.8979    transfer 0.0047    finalize 0.0060    
all_split False
======================Cut inference begins======================
max lb tensor(0.66269541) min lb tensor(-0.37981510)
Number of Verified Splits: 51 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.014689207077026367 
BICCOS Cumulative time: 0.02570819854736328
Preprocessing time: 0.01143646240234375 Inference time: 0.0020592212677001953 Add cuts time: 0.0008842945098876953 Cut analysis time: 0.00030922889709472656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21197 (2), -0.20931 (2), -0.20674 (2), -0.20533 (2), -0.20519 (2), -0.20485 (2), -0.20467 (2), -0.20360 (2), -0.20353 (2), -0.20270 (2), -0.20237 (2), -0.20110 (2), -0.19950 (2), -0.19931 (2), -0.19782 (2), -0.19747 (2), -0.19484 (2), -0.19452 (2), -0.19349 (2), -0.19341 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0215    set_bounds 0.0120    solve 1.2165    add 0.0776    
Accumulated time: pickout 0.0014    decision 0.5617    set_bounds 0.0201    solve 1.3744    add 0.1678    
Current (lb-rhs): -0.21196889877319336
100 domains visited
Cumulative time: 2.7511203289031982

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 6] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 67] [/input-12, 67] [/input-12, 79] [/input-12, 67] [/input-12, 79] [/input-12, 67] 
split level 2: [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 3: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 53] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2150259017944336
10 lb beta sum: 0.4623958468437195, worst -0.20325851440429688
Time: prepare 0.0062    bound 0.1180    transfer 0.0015    finalize 0.0023    func 0.1307    
Accumulated time: func 2.0633    prepare 0.0355    bound 2.0159    transfer 0.0062    finalize 0.0083    
all_split False
======================Cut inference begins======================
max lb tensor(0.70531851) min lb tensor(-0.19990599)
Number of Verified Splits: 88 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.01711249351501465 
BICCOS Cumulative time: 0.04282069206237793
Preprocessing time: 0.011072397232055664 Inference time: 0.003690958023071289 Add cuts time: 0.002071857452392578 Cut analysis time: 0.0002772808074951172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08874 (3), -0.08830 (3), -0.08755 (3), -0.08717 (3), -0.08681 (3), -0.08672 (3), -0.08661 (3), -0.08639 (3), -0.08602 (3), -0.08597 (3), -0.08484 (3), -0.08484 (3), -0.08444 (3), -0.08430 (3), -0.08343 (3), -0.08329 (3), -0.08178 (3), -0.07973 (3), -0.07902 (3), -0.07877 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0194    set_bounds 0.0148    solve 0.1307    add 0.0837    
Accumulated time: pickout 0.0023    decision 0.5811    set_bounds 0.0350    solve 1.5052    add 0.2515    
Current (lb-rhs): -0.08874288201332092
150 domains visited
Cumulative time: 3.0181195735931396

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] 
split level 2: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 3: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10748291015625
10 lb beta sum: 0.560276985168457, worst -0.08919486403465271
Time: prepare 0.0062    bound 0.1178    transfer 0.0015    finalize 0.0019    func 0.1302    
Accumulated time: func 2.1935    prepare 0.0419    bound 2.1338    transfer 0.0078    finalize 0.0102    
all_split False
======================Cut inference begins======================
max lb tensor(0.20601086) min lb tensor(-0.08702540)
Number of Verified Splits: 218 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 6
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.028484106063842773 
BICCOS Cumulative time: 0.0713047981262207
Preprocessing time: 0.01107478141784668 Inference time: 0.01230311393737793 Add cuts time: 0.004564046859741211 Cut analysis time: 0.0005421638488769531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02503 (4), -0.02442 (4), -0.02381 (4), -0.02324 (4), -0.02232 (4), -0.01958 (4), -0.01941 (4), -0.01929 (4), -0.01929 (4), -0.01891 (4), -0.01864 (4), -0.01828 (4), -0.01790 (4), -0.01734 (4), -0.01725 (4), -0.01717 (4), -0.01712 (4), -0.01707 (4), -0.01702 (4), -0.01689 (4), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0192    set_bounds 0.0150    solve 0.1302    add 0.2372    
Accumulated time: pickout 0.0032    decision 0.6003    set_bounds 0.0500    solve 1.6354    add 0.4887    
Current (lb-rhs): -0.02503339946269989
200 domains visited
Cumulative time: 3.4495630264282227

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 29] [/input-12, 29] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 2: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 71] [/input-12, 71] [/input-8, 1964] [/input-8, 1964] [/input-12, 71] [/input-12, 71] 
split level 3: [/input-12, 71] [/input-12, 71] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-12, 71] [/input-12, 71] [/input-8, 1964] [/input-8, 1964] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04514312744140625
10 lb beta sum: 0.4397270977497101, worst -0.02308034896850586
Time: prepare 0.0064    bound 1.3392    transfer 0.0018    finalize 0.0022    func 1.3530    
Accumulated time: func 3.5465    prepare 0.0486    bound 3.4730    transfer 0.0096    finalize 0.0124    
all_split False
======================Cut inference begins======================
max lb tensor(0.12624550) min lb tensor(-0.01532602)
Number of Verified Splits: 385 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 9
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.04095029830932617 
BICCOS Cumulative time: 0.11225509643554688
Preprocessing time: 0.011489391326904297 Inference time: 0.019660234451293945 Add cuts time: 0.009314298629760742 Cut analysis time: 0.0004863739013671875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0148    solve 1.3532    add 0.0266    
Accumulated time: pickout 0.0043    decision 0.6196    set_bounds 0.0647    solve 2.9886    add 0.5153    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 56]), tensor([-1., -1.]), tensor([0, 0]), tensor([0.03876834, 0.01433806]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 56]), tensor([-1.,  1.]), tensor([0, 0]), tensor([0.03876834, 0.98579079]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 29, 56]), tensor([ 1., -1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.40792384e-36, 9.74979848e-02, 7.81883523e-02, 6.25116006e-02,
        4.56671789e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 29, 56]), tensor([ 1., -1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.40792384e-36, 9.74979848e-02, 7.81883523e-02, 6.25116006e-02,
        1.14575908e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 29, 56]), tensor([ 1., -1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.40792384e-36, 9.74979848e-02, 7.81883523e-02, 6.33622780e-02,
        4.73429933e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 29, 56]), tensor([ 1., -1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.40792384e-36, 9.74979848e-02, 7.81883523e-02, 6.33622780e-02,
        1.18037269e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.40792384e-36, 9.74979848e-02, 5.11648655e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 64, 56]), tensor([ 1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.40792384e-36, 9.43456143e-02, 7.29204193e-02, 6.44507334e-02,
        2.27885111e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 64, 56]), tensor([ 1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.40792384e-36, 9.43456143e-02, 7.29204193e-02, 6.44507334e-02,
        1.16165683e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 64, 56]), tensor([ 1.,  1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.40792384e-36, 9.43456143e-02, 7.29204193e-02, 6.80870935e-02,
        2.67987116e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 64, 56]), tensor([ 1.,  1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.40792384e-36, 9.43456143e-02, 7.29204193e-02, 6.80870935e-02,
        1.13003299e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([2.40792384e-36, 9.43456143e-02, 5.42602241e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.36418914794921875
10 lb beta sum: 0.571523904800415, worst -0.34502458572387695
Time: prepare 0.0005    bound 0.1358    transfer 0.0001    finalize 0.0002    func 0.1368    
Accumulated time: func 3.6833    prepare 0.0492    bound 3.6088    transfer 0.0097    finalize 0.0126    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 79] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 67] [/input-12, 64] [/input-12, 64] 
split level 2: [/input-12, 53] [/input-12, 29] [/input-12, 71] 
split level 3: [/input-12, 64] [/input-12, 71] [/input-12, 29] 
split level 4: [/input-12, 29] [/input-8, 1964] [/input-8, 1964] 
split level 5: [/input-12, 71] [/input-8, 1956] [/input-8, 1956] 
split level 6: [/input-8, 1956] [/input-8, 1948] [/input-8, 1948] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8771228790283203, worst -0.037012577056884766
10 lb beta sum: 0.8771164417266846, worst -0.03567171096801758
Time: prepare 0.0162    bound 0.1400    transfer 0.0006    finalize 0.0019    func 0.1612    
Accumulated time: func 3.8444    prepare 0.0657    bound 3.7487    transfer 0.0104    finalize 0.0145    
all_split False
======================Cut inference begins======================
max lb tensor(0.55729294) min lb tensor(-0.03531885)
Number of Verified Splits: 358 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.8891113996505737, worst -0.3951911926269531
10 lb beta sum: 1.1217516660690308, worst -0.3837594985961914
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 76.
#cuts 1-3: 9
#cuts 4-6: 29
#cuts 7-9: 38
#cuts >= 20: 0
BICCOS time: 0.381166934967041 
BICCOS Cumulative time: 0.4934220314025879
Preprocessing time: 0.010259628295898438 Inference time: 0.3469212055206299 Add cuts time: 0.02051091194152832 Cut analysis time: 0.003475189208984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03532 (7), -0.03087 (7), -0.03009 (7), -0.03004 (7), -0.02788 (7), -0.02460 (7), -0.02212 (7), -0.02056 (7), -0.01997 (7), -0.01838 (7), -0.01821 (7), -0.01433 (7), -0.01092 (7), -0.00978 (7), -0.00931 (7), -0.00804 (7), -0.00700 (7), -0.00691 (7), -0.00607 (7), -0.00447 (7), 
Length of domains: 26
Time: pickout 0.0005    decision 0.0202    set_bounds 0.0332    solve 0.1613    add 0.0016    
Accumulated time: pickout 0.0048    decision 0.6399    set_bounds 0.0980    solve 3.1499    add 0.5169    
Current (lb-rhs): -0.035318851470947266
226 domains visited
Cumulative time: 5.6701860427856445

BaB round 2
batch: 26
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1964] [/input-8, 1964] [/input-12, 57] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] 
split level 1: [/input-12, 57] [/input-12, 57] [/input-8, 1964] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] 
split level 2: [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.008136272430419922

all verified at 1th iter
Time: prepare 0.0042    bound 0.0178    transfer 0.0004    finalize 0.0011    func 0.0249    
Accumulated time: func 3.8694    prepare 0.0701    bound 3.7666    transfer 0.0108    finalize 0.0156    
all_split False
======================Cut inference begins======================
max lb tensor(0.12114048) min lb tensor(6.00814819e-05)
Number of Verified Splits: 208 of 208
No cut inferred: All or none verified.
Total number of valid cuts: 76.
#cuts 1-3: 9
#cuts 4-6: 29
#cuts 7-9: 38
#cuts >= 20: 0
BICCOS time: 0.0061473846435546875 
BICCOS Cumulative time: 0.4995694160461426
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0014    decision 0.0150    set_bounds 0.0166    solve 0.0250    add 0.0001    
Accumulated time: pickout 0.0062    decision 0.6548    set_bounds 0.1146    solve 3.1749    add 0.5170    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
226 domains visited
Cumulative time: 5.735382556915283


Properties batch 1, size 1
Remaining timeout: 189.79251551628113
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 189.7918827533722
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 189.7918336391449
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 189.79181027412415
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 189.79178977012634
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 189.79176831245422
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 189.7917366027832
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 189.79171514511108
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 10.2084 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.49797249, -32.02593231, -24.13653946, -24.35863113, -22.85143471,
         -23.68348503, -27.44120789, -21.38064575, -32.04727936, -30.62964058]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [524]; unstable size 524; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 231, 1, 524] with unstable size 230 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 524] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 524] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [230]; unstable size 230; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 230] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 230] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 5.57842255,  7.92652655,  0.44128591,  0.66715550, -0.01040912,
          3.37060809, -2.14889312,  8.08667374,  6.50471687]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-29.49797249, -32.02593231, -24.13653946, -24.35863113, -22.85143471,
         -23.68348503, -27.44120789, -21.38064575, -32.04727936, -30.62964058]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.49797440, -32.02593613, -24.13653946, -24.35863304, -22.85143471,
          -23.68348312, -27.44120789, -21.38064194, -32.04728317, -30.62964058],
         [-29.49797440, -32.02593613, -24.13653946, -24.35863304, -22.85143471,
          -23.68348312, -27.44120789, -21.38064194, -32.04728317, -30.62964058]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.83204842, -1.47079277]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]],


         [[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0557 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 4, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.15470314, -20.96789932, -15.15356350, -17.63923645, -15.52186012,
         -17.33632088, -16.64702988, -17.53084564, -21.19912529, -20.21182442]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [586]; unstable size 586; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 241, 1, 586] with unstable size 240 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 586] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 586] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [240]; unstable size 240; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 240] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 240] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.88010216,  3.64075136, -1.31467092,  1.09980750,  0.71520281,
          0.08684754,  0.73927283,  3.52310133,  2.98584604]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-18.15470314, -20.96789932, -15.15356350, -17.63923645, -15.52186012,
         -17.33632088, -16.64702988, -17.53084564, -21.19912529, -20.21182442]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-18.15470314, -20.96789932, -15.15356350, -17.63923645, -15.52186012,
          -17.33632088, -16.64702988, -17.53084564, -21.19912529, -20.21182442]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.36829662]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.45555562,  0.47142863,  0.50317466,  ...,  0.23333341,
             0.16984135, -0.06825387],
           [ 0.37619054,  0.55079371,  0.91587305,  ...,  0.39206356,
             0.59841275,  0.21746039],
           [ 0.47142863,  0.64603180,  0.70952386,  ...,  0.58253974,
             0.85238099,  0.82063496],
           ...,
           [ 0.32857150,  0.55079371,  0.18571436,  ..., -0.67142856,
            -1.22698402, -1.06825387],
           [ 0.47142863,  0.47142863,  0.21746039,  ..., -0.00476181,
            -1.14761901, -1.44920623],
           [ 0.45555562,  0.15396833, -0.11587292,  ...,  1.04285717,
             0.34444451, -0.54444444]],

          [[ 1.03059590,  1.09500813,  1.19162667,  ...,  1.12721443,
             0.96618366,  0.70853472],
           [ 1.03059590,  1.14331758,  1.28824508,  ...,  1.27214205,
             1.36876035,  0.98228669],
           [ 1.15942061,  1.22383285,  1.23993587,  ...,  1.38486338,
             1.54589403,  1.44927561],
           ...,
           [ 1.07890511,  1.28824508,  0.86956531,  ..., -0.70853460,
            -1.20772946, -0.96618354],
           [ 1.15942061,  1.22383285,  1.03059590,  ..., -0.19323659,
            -1.12721407, -1.33655393],
           [ 1.07890511,  0.93397754,  0.85346222,  ...,  0.99838978,
             0.28985518, -0.43478248]],

          [[ 0.10644694,  0.19640197,  0.42128953,  ..., -0.01349309,
             0.09145443, -0.31334329],
           [ 0.16641696,  0.45127454,  0.94602716,  ...,  0.19640197,
             0.75112462,  0.28635699],
           [ 0.16641696,  0.39130452,  0.48125952,  ...,  0.36131951,
             0.91604215,  1.03598225],
           ...,
           [ 0.06146942,  0.37631202,  0.07646193,  ..., -0.83808094,
            -1.27286363, -1.09295356],
           [ 0.19640197,  0.37631202, -0.11844061,  ..., -0.43328333,
            -1.27286363, -1.42278874],
           [ 0.25637197, -0.14842562, -0.73313338,  ...,  0.82608712,
            -0.02848560, -0.82308841]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0538 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 5, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.93012428, -28.86279678, -22.95105362, -22.21138573, -22.55353546,
         -22.42994499, -25.40056229, -25.07742310, -28.55600357, -29.30382729]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [702]; unstable size 702; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 702] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 702] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 702] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 197] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.11360049,  4.75878477, -0.60330009, -1.14847970, -0.96145177,
          1.62045574,  1.45868993,  4.42397833,  5.39402246]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.93012428, -28.86279678, -22.95105362, -22.21138573, -22.55353546,
         -22.42994499, -25.40056229, -25.07742310, -28.55600357, -29.30382729]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.93012238, -28.86279297, -22.95105362, -22.21138191, -22.55353355,
          -22.42994118, -25.40056038, -25.07742310, -28.55599976, -29.30382729],
         [-23.93012238, -28.86279297, -22.95105362, -22.21138191, -22.55353355,
          -22.42994118, -25.40056038, -25.07742310, -28.55599976, -29.30382729]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.39752007, -0.34215164, -0.12359238]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]],


         [[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]],


         [[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0794 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 6, vnnlib ID: 6 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.40559387, -22.88947487, -25.63683701, -27.29631996, -26.72020721,
         -27.76915359, -27.74243546, -26.42049408, -23.75277328, -24.53628540]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [600]; unstable size 600; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 210, 1, 600] with unstable size 209 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 600] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 600] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [209]; unstable size 209; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 209] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 209] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.74476361,  2.03233957,  3.50479412,  2.95214272,  3.84003520,
          3.82891798,  2.31719518,  0.27049708,  0.99338436]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.40559387, -22.88947487, -25.63683701, -27.29631996, -26.72020721,
         -27.76915359, -27.74243546, -26.42049408, -23.75277328, -24.53628540]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.70954704, -22.50856209, -25.82820511, -27.24475288, -26.80752373,
          -27.71620750, -27.81856155, -26.49511337, -23.68723488, -24.25093651]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20098495]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0709 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 7, vnnlib ID: 7 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.38412285, -21.59840584, -16.79981041, -17.57214165, -15.52907753,
         -18.46681404, -14.29935837, -18.97409439, -21.41892242, -22.47642326]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [661]; unstable size 661; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 281, 1, 661] with unstable size 280 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 661] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 661] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [280]; unstable size 280; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 280] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 280] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.40035439, 4.96538544, 1.38254380, 2.09833980, 0.19923019, 2.73652506,
         2.77133226, 5.19357300, 5.75338554]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0680 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 8, vnnlib ID: 8 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.33151817, -30.12449837, -30.12789345, -32.32761765, -31.50092506,
         -33.39948273, -34.24899292, -33.59529877, -28.85486984, -31.05011368]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [660]; unstable size 660; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 125, 1, 660] with unstable size 124 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 660] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 660] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [124]; unstable size 124; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 124] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 124] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.10990644, 3.26029587, 5.21397591, 4.49963570, 6.16231823, 7.11179638,
         6.38362360, 1.83803415, 4.12780380]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0666 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 9, vnnlib ID: 9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.09156418, -20.41763687, -14.61236668, -14.66382980, -15.40889931,
         -14.92277241, -16.08656311, -16.88404655, -16.89081764, -19.10676003]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [652]; unstable size 652; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 652] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 652] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 652] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 272] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.76794934,  3.46308827, -1.30139863, -0.50252223, -0.49823189,
          0.25928664,  1.05345249,  0.17230219,  2.34708548]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.09156418, -20.41763687, -14.61236668, -14.66382980, -15.40889931,
         -14.92277241, -16.08656311, -16.88404655, -16.89081764, -19.10676003]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.09156036, -20.41763496, -14.61236477, -14.66382885, -15.40889931,
          -14.92277145, -16.08656311, -16.88404655, -16.89081764, -19.10676003],
         [-17.09156036, -20.41763496, -14.61236477, -14.66382885, -15.40889931,
          -14.92277145, -16.08656311, -16.88404655, -16.89081764, -19.10676003]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.31040668, -0.25894260,  0.48612785]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0747 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 10, vnnlib ID: 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.21570015, -30.75971413, -22.25073242, -22.32918739, -25.08177185,
         -21.45276070, -27.76211929, -23.59930420, -27.91633797, -28.86312294]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [602]; unstable size 602; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 138, 1, 602] with unstable size 137 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 602] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 602] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [137]; unstable size 137; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 137] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 137] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.99381137,  6.23491001, -1.89244652, -1.75638413,  1.05084133,
         -2.64184880,  3.30787563,  3.47557878,  4.31073761]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.21570015, -30.75971413, -22.25073242, -22.32918739, -25.08177185,
         -21.45276070, -27.76211929, -23.59930420, -27.91633797, -28.86312294]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.21570015, -30.75971603, -22.25073242, -22.32919121, -25.08177567,
          -21.45276070, -27.76212311, -23.59930420, -27.91633797, -28.86312675],
         [-26.21570015, -30.75971603, -22.25073242, -22.32919121, -25.08177567,
          -21.45276070, -27.76212311, -23.59930420, -27.91633797, -28.86312675]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.34857178, -1.27011299, -2.14654350]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0780 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 11, vnnlib ID: 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.21021080, -22.37670517, -15.79945183, -19.83161354, -17.04315186,
         -20.54102135, -18.07866096, -20.16787720, -20.66229820, -22.52699852]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [783]; unstable size 783; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 272, 1, 783] with unstable size 271 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 783] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 783] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [271]; unstable size 271; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 271] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 271] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.10988951, 4.28679037, 2.71925116, 0.07136536, 3.35213232, 0.93095958,
         2.59224558, 3.15873289, 4.39236212]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0740 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 12, vnnlib ID: 12 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.29772568, -26.69688797, -24.65950394, -26.42867851, -27.60770798,
         -25.51318932, -30.98760223, -25.11904716, -28.58666801, -27.05063820]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [512]; unstable size 512; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 148, 1, 512] with unstable size 147 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 512] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 512] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [147]; unstable size 147; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 147] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.19138759,  0.13958788, -1.25776398,  0.64105916,  1.78224003,
         -0.24006486,  4.64796352,  2.03586721,  0.69128203]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.29772568, -26.69688797, -24.65950394, -26.42867851, -27.60770798,
         -25.51318932, -30.98760223, -25.11904716, -28.58666801, -27.05063820]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.29772758, -26.69688797, -24.65950203, -26.42867661, -27.60770798,
          -25.51318359, -30.98759842, -25.11904335, -28.58666611, -27.05063820],
         [-26.29772758, -26.69688797, -24.65950203, -26.42867661, -27.60770798,
          -25.51318359, -30.98759842, -25.11904335, -28.58666611, -27.05063820]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.45954132,  0.39414024]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.56666672,  0.66190481,  0.64603180,  ...,  0.24920642,
             0.26507944,  0.21746039],
           [ 0.43968260,  0.53492069,  0.51904768,  ...,  0.29682547,
             0.29682547,  0.24920642],
           [ 0.34444451,  0.39206356,  0.39206356,  ...,  0.32857150,
             0.34444451,  0.29682547],
           ...,
           [-1.83015871, -1.73492062, -1.73492062,  ..., -0.51269841,
            -0.52857143, -0.60793650],
           [-1.87777781, -1.81428576, -1.81428576,  ..., -0.52857143,
            -0.51269841, -0.52857143],
           [-1.90952384, -1.89365077, -1.87777781,  ..., -0.56031746,
            -0.59206349, -0.54444444]],

          [[ 1.15942061,  1.20772982,  1.19162667,  ...,  0.95008057,
             0.96618366,  0.91787446],
           [ 1.09500813,  1.12721443,  1.09500813,  ...,  0.98228669,
             0.99838978,  0.93397754],
           [ 0.99838978,  1.03059590,  1.01449287,  ...,  0.98228669,
             0.99838978,  0.95008057],
           ...,
           [-1.72302747, -1.57809973, -1.61030602,  ..., -0.06441211,
            -0.01610294, -0.09661824],
           [-1.80354273, -1.72302747, -1.73913050,  ..., -0.03220600,
            -0.01610294, -0.04830906],
           [-1.83574879, -1.81964576, -1.80354273,  ..., -0.06441211,
            -0.08051517, -0.04830906]],

          [[ 1.62069011,  1.62069011,  1.60569763,  ...,  1.50075006,
             1.51574254,  1.47076499],
           [ 1.59070504,  1.59070504,  1.56072009,  ...,  1.53073502,
             1.54572761,  1.48575759],
           [ 1.51574254,  1.51574254,  1.50075006,  ...,  1.50075006,
             1.51574254,  1.47076499],
           ...,
           [-1.49775124, -1.37781119, -1.39280367,  ..., -0.55322337,
            -0.61319339, -0.70314842],
           [-1.55772126, -1.49775124, -1.49775124,  ..., -0.56821585,
            -0.61319339, -0.58320838],
           [-1.58770621, -1.57271373, -1.55772126,  ..., -0.65817088,
            -0.71814090, -0.61319339]]],


         [[[ 0.56666672,  0.66190481,  0.64603180,  ...,  0.24920642,
             0.26507944,  0.21746039],
           [ 0.43968260,  0.53492069,  0.51904768,  ...,  0.29682547,
             0.29682547,  0.24920642],
           [ 0.34444451,  0.39206356,  0.39206356,  ...,  0.32857150,
             0.34444451,  0.29682547],
           ...,
           [-1.83015871, -1.73492062, -1.73492062,  ..., -0.51269841,
            -0.52857143, -0.60793650],
           [-1.87777781, -1.81428576, -1.81428576,  ..., -0.52857143,
            -0.51269841, -0.52857143],
           [-1.90952384, -1.89365077, -1.87777781,  ..., -0.56031746,
            -0.59206349, -0.54444444]],

          [[ 1.15942061,  1.20772982,  1.19162667,  ...,  0.95008057,
             0.96618366,  0.91787446],
           [ 1.09500813,  1.12721443,  1.09500813,  ...,  0.98228669,
             0.99838978,  0.93397754],
           [ 0.99838978,  1.03059590,  1.01449287,  ...,  0.98228669,
             0.99838978,  0.95008057],
           ...,
           [-1.72302747, -1.57809973, -1.61030602,  ..., -0.06441211,
            -0.01610294, -0.09661824],
           [-1.80354273, -1.72302747, -1.73913050,  ..., -0.03220600,
            -0.01610294, -0.04830906],
           [-1.83574879, -1.81964576, -1.80354273,  ..., -0.06441211,
            -0.08051517, -0.04830906]],

          [[ 1.62069011,  1.62069011,  1.60569763,  ...,  1.50075006,
             1.51574254,  1.47076499],
           [ 1.59070504,  1.59070504,  1.56072009,  ...,  1.53073502,
             1.54572761,  1.48575759],
           [ 1.51574254,  1.51574254,  1.50075006,  ...,  1.50075006,
             1.51574254,  1.47076499],
           ...,
           [-1.49775124, -1.37781119, -1.39280367,  ..., -0.55322337,
            -0.61319339, -0.70314842],
           [-1.55772126, -1.49775124, -1.49775124,  ..., -0.56821585,
            -0.61319339, -0.58320838],
           [-1.58770621, -1.57271373, -1.55772126,  ..., -0.65817088,
            -0.71814090, -0.61319339]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0758 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 13, vnnlib ID: 13 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.11111641, -23.23637962, -27.61908340, -29.99626923, -29.48331070,
         -31.42300415, -29.79775810, -31.17150879, -25.13313293, -25.51217079]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [800]; unstable size 800; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 212, 1, 800] with unstable size 211 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 800] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 800] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [211]; unstable size 211; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 211] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 211] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.64949799,  2.53695869,  4.98263073,  4.08614779,  6.12158489,
          4.88727713,  5.69290876,  0.59366226,  1.31843674]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.11111641, -23.23637962, -27.61908340, -29.99626923, -29.48331070,
         -31.42300415, -29.79775810, -31.17150879, -25.13313293, -25.51217079]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.62it/s]100%|██████████| 1/1 [00:00<00:00,  8.61it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.69252968, -23.57816505, -27.19650650, -29.87729073, -29.16208076,
          -31.30131340, -29.60456848, -30.91409683, -24.93794060, -25.69927025]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.11436462]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1188 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 30.024341583251953
alpha/beta optimization time: 1.2373170852661133
initial alpha-crown bounds: tensor([[-0.60099697,  2.58548117,  5.03595448,  4.14844227,  6.18062925,
          4.93974590,  5.75246954,  0.64157963,  1.34103727]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.6009969711303711
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.60067057609558
Verifying property 0 with 1 instances.
##### Instance 13 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.60099697]], device='cuda:0') need to verify.
Model prediction is: tensor([-24.11111641, -23.23637962, -27.61908340, -29.99626923, -29.48331070,
        -31.42300415, -29.79775810, -31.17150879, -25.13313293, -25.51217079],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.60099697]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 800
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 204
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1025
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011086463928222656
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6009960174560547
10 lb beta sum: 0.0, worst -0.6010022163391113
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0543    transfer 0.0001    finalize 0.0001    func 0.0548    
Accumulated time: func 0.0548    prepare 0.0002    bound 0.0543    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] 
split level 1: [/input-12, 38] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 53] 
split level 4: [/input-12, 89] 
split level 5: [/input-12, 64] 
split level 6: [/input-12, 2] 
split level 7: [/input-12, 90] 
split level 8: [/input-12, 8] 
split level 9: [/input-12, 71] 
split level 10: [/input-8, 1955] 
split level 11: [/input-12, 32] 
split level 12: [/input-8, 292] 
split level 13: [/input-12, 14] 
split level 14: [/input-8, 1949] 
split level 15: [/input-8, 757] 
split level 16: [/input-8, 146] 
split level 17: [/input-8, 155] 
split level 18: [/input-8, 1134] 
split level 19: [/input-8, 1387] 
split level 20: [/input-8, 418] 
split level 21: [/input-8, 420] 
split level 22: [/input-8, 158] 
split level 23: [/input-8, 147] 
split level 24: [/input-8, 416] 
split level 25: [/input-8, 306] 
split level 26: [/input-8, 1384] 
split level 27: [/input-8, 751] 
split level 28: [/input-8, 1674] 
split level 29: [/input-8, 1388] 
split level 30: [/input-12, 13] 
split level 31: [/input-8, 939] 
split level 32: [/input-8, 150] 
split level 33: [/input, 3544] 
split level 34: [/input-8, 1852] 
split level 35: [/input-8, 1396] 
split level 36: [/input-8, 423] 
split level 37: [/input, 374] 
split level 38: [/input-8, 1755] 
split level 39: [/input-8, 1629] 
split level 40: [/input-8, 1195] 
split level 41: [/input-8, 1395] 
split level 42: [/input-8, 633] 
split level 43: [/input-8, 154] 
split level 44: [/input, 3545] 
split level 45: [/input-8, 242] 
split level 46: [/input-8, 634] 
split level 47: [/input-8, 414] 
split level 48: [/input-8, 1391] 
split level 49: [/input, 469] 
split level 50: [/input-8, 1178] 
split level 51: [/input-8, 1754] 
split level 52: [/input-8, 1851] 
split level 53: [/input-8, 1397] 
split level 54: [/input-8, 1378] 
split level 55: [/input-8, 737] 
split level 56: [/input-8, 141] 
split level 57: [/input, 506] 
split level 58: [/input, 2503] 
split level 59: [/input, 3165] 
split level 60: [/input, 3563] 
split level 61: [/input, 1449] 
split level 62: [/input, 3130] 
split level 63: [/input, 1003] 
split level 64: [/input-12, 68] 
split level 65: [/input-8, 433] 
split level 66: [/input-8, 1615] 
split level 67: [/input-8, 1399] 
split level 68: [/input-8, 635] 
split level 69: [/input-8, 1097] 
split level 70: [/input-8, 400] 
split level 71: [/input-8, 410] 
split level 72: [/input, 986] 
split level 73: [/input, 987] 
split level 74: [/input, 968] 
split level 75: [/input, 373] 
split level 76: [/input, 983] 
split level 77: [/input, 1453] 
split level 78: [/input, 961] 
split level 79: [/input-8, 736] 
split level 80: [/input, 508] 
split level 81: [/input, 2931] 
split level 82: [/input-8, 350] 
split level 83: [/input, 981] 
split level 84: [/input, 963] 
split level 85: [/input, 988] 
split level 86: [/input, 1001] 
split level 87: [/input, 3480] 
split level 88: [/input, 492] 
split level 89: [/input-8, 1377] 
split level 90: [/input, 3197] 
split level 91: [/input, 977] 
split level 92: [/input-8, 2033] 
split level 93: [/input, 3913] 
split level 94: [/input, 3579] 
split level 95: [/input, 1006] 
split level 96: [/input, 3565] 
split level 97: [/input, 2264] 
split level 98: [/input, 408] 
split level 99: [/input-8, 1512] 
split level 100: [/input, 3525] 
split level 101: [/input-8, 241] 
split level 102: [/input, 825] 
split level 103: [/input, 995] 
split level 104: [/input, 452] 
split level 105: [/input, 2266] 
split level 106: [/input, 2265] 
split level 107: [/input, 2913] 
split level 108: [/input, 325] 
split level 109: [/input, 2282] 
split level 110: [/input, 844] 
split level 111: [/input, 2771] 
split level 112: [/input-8, 243] 
split level 113: [/input, 2262] 
split level 114: [/input, 996] 
split level 115: [/input, 2406] 
split level 116: [/input, 470] 
split level 117: [/input, 2263] 
split level 118: [/input, 3580] 
split level 119: [/input, 979] 
split level 120: [/input, 2183] 
split level 121: [/input, 2789] 
split level 122: [/input, 3113] 
split level 123: [/input, 3578] 
split level 124: [/input, 827] 
split level 125: [/input, 998] 
split level 126: [/input, 505] 
split level 127: [/input, 2515] 
split level 128: [/input, 3562] 
split level 129: [/input-8, 1398] 
split level 130: [/input-8, 427] 
split level 131: [/input, 3269] 
split level 132: [/input, 993] 
split level 133: [/input, 2516] 
split level 134: [/input, 2009] 
split level 135: [/input-8, 1376] 
split level 136: [/input, 692] 
split level 137: [/input, 2010] 
split level 138: [/input, 2281] 
split level 139: [/input-8, 636] 
split level 140: [/input, 3180] 
split level 141: [/input, 693] 
split level 142: [/input, 904] 
split level 143: [/input, 2267] 
split level 144: [/input, 2539] 
split level 145: [/input, 2969] 
split level 146: [/input-8, 363] 
split level 147: [/input, 2654] 
split level 148: [/input, 3007] 
split level 149: [/input, 691] 
split level 150: [/input, 2553] 
split level 151: [/input, 2283] 
split level 152: [/input, 2258] 
split level 153: [/input, 2538] 
split level 154: [/input, 129] 
split level 155: [/input, 3148] 
split level 156: [/input, 2517] 
split level 157: [/input, 709] 
split level 158: [/input, 2757] 
split level 159: [/input-8, 94] 
split level 160: [/input, 2129] 
split level 161: [/input, 711] 
split level 162: [/input, 371] 
split level 163: [/input, 2685] 
split level 164: [/input, 710] 
split level 165: [/input, 822] 
split level 166: [/input, 3133] 
split level 167: [/input, 2530] 
split level 168: [/input, 3284] 
split level 169: [/input, 2273] 
split level 170: [/input, 3283] 
split level 171: [/input, 707] 
split level 172: [/input, 225] 
split level 173: [/input, 729] 
split level 174: [/input, 808] 
split level 175: [/input, 2514] 
split level 176: [/input, 497] 
split level 177: [/input, 708] 
split level 178: [/input-8, 1855] 
split level 179: [/input, 690] 
split level 180: [/input, 210] 
split level 181: [/input, 2011] 
split level 182: [/input, 713] 
split level 183: [/input, 498] 
split level 184: [/input, 3560] 
split level 185: [/input, 3576] 
split level 186: [/input, 2180] 
split level 187: [/input, 689] 
split level 188: [/input, 487] 
split level 189: [/input-8, 912] 
split level 190: [/input, 705] 
split level 191: [/input, 2259] 
split level 192: [/input, 2436] 
split level 193: [/input, 2916] 
split level 194: [/input, 209] 
split level 195: [/input, 706] 
split level 196: [/input, 989] 
split level 197: [/input, 2556] 
split level 198: [/input, 208] 
split level 199: [/input, 885] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6008286476135254
10 lb beta sum: 0.0, worst -0.6008262634277344
Time: prepare 0.0116    bound 0.1026    transfer 0.0030    finalize 0.0032    func 0.1232    
Accumulated time: func 0.1780    prepare 0.0219    bound 0.1570    transfer 0.0031    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(0.07155848) min lb tensor(-0.60082150)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010727882385253906 
BICCOS Cumulative time: 0.010727882385253906
Preprocessing time: 0.010019302368164062 Inference time: 0.00011992454528808594 Add cuts time: 5.8650970458984375e-05 Cut analysis time: 0.0005300045013427734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.58948 (1), -0.58923 (1), -0.58918 (1), -0.58855 (1), -0.58774 (1), -0.58718 (1), -0.58651 (1), -0.58590 (1), -0.58475 (1), -0.58436 (1), -0.58393 (1), -0.58375 (1), -0.58357 (1), -0.58354 (1), -0.58353 (1), -0.58341 (1), -0.58314 (1), -0.58214 (1), -0.58196 (1), -0.58137 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5281    set_bounds 0.0084    solve 0.1233    add 0.1673    
Accumulated time: pickout 0.0004    decision 0.5281    set_bounds 0.0084    solve 0.1233    add 0.1673    
Current (lb-rhs): -0.5894837379455566
50 domains visited
Cumulative time: 0.9155747890472412

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] [/input-12, 38] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 1: [/input-12, 38] [/input-12, 4] [/input-12, 4] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] 
split level 2: [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.550868034362793
10 lb beta sum: 0.3896826207637787, worst -0.5451349020004272
Time: prepare 0.0070    bound 0.1202    transfer 0.0009    finalize 0.0024    func 0.1331    
Accumulated time: func 0.3111    prepare 0.0292    bound 0.2772    transfer 0.0040    finalize 0.0057    
all_split False
======================Cut inference begins======================
max lb tensor(0.28867859) min lb tensor(-0.54499441)
Number of Verified Splits: 13 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.013336896896362305 
BICCOS Cumulative time: 0.02406477928161621
Preprocessing time: 0.011655330657958984 Inference time: 0.0005636215209960938 Add cuts time: 0.0002205371856689453 Cut analysis time: 0.0008974075317382812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11135 (2), -0.11049 (2), -0.11024 (2), -0.10906 (2), -0.10883 (2), -0.10839 (2), -0.10746 (2), -0.10662 (2), -0.10579 (2), -0.10572 (2), -0.10542 (2), -0.10480 (2), -0.10471 (2), -0.10412 (2), -0.10401 (2), -0.10341 (2), -0.10262 (2), -0.10257 (2), -0.10215 (2), -0.10081 (2), 
Length of domains: 50
Time: pickout 0.0079    decision 0.0199    set_bounds 0.0141    solve 0.1332    add 0.0844    
Accumulated time: pickout 0.0083    decision 0.5480    set_bounds 0.0225    solve 0.2565    add 0.2517    
Current (lb-rhs): -0.11135266721248627
100 domains visited
Cumulative time: 1.1886610984802246

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 38] [/input-12, 34] [/input-12, 38] [/input-12, 38] [/input-12, 34] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 34] [/input-12, 34] 
split level 1: [/input-12, 89] [/input-12, 38] [/input-12, 4] [/input-12, 89] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 38] [/input-12, 4] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 89] [/input-12, 2] [/input-12, 4] [/input-12, 2] 
split level 3: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11111974716186523
10 lb beta sum: 0.33431753516197205, worst -0.13505688309669495
Time: prepare 0.0071    bound 0.1373    transfer 0.0007    finalize 0.0022    func 0.1505    
Accumulated time: func 0.4616    prepare 0.0366    bound 0.4145    transfer 0.0047    finalize 0.0080    
all_split False
======================Cut inference begins======================
max lb tensor(0.88375813) min lb tensor(-0.02825005)
Number of Verified Splits: 348 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.03324484825134277 
BICCOS Cumulative time: 0.057309627532958984
Preprocessing time: 0.011472225189208984 Inference time: 0.014496803283691406 Add cuts time: 0.006925106048583984 Cut analysis time: 0.00035071372985839844
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0214    set_bounds 0.0153    solve 0.1507    add 0.0189    
Accumulated time: pickout 0.0093    decision 0.5694    set_bounds 0.0378    solve 0.4072    add 0.2706    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34,  2, 38]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([5.32480726e-11, 6.66906685e-02, 2.01029405e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34,  2, 38]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.32480726e-11, 6.66906685e-02, 9.07544941e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34,  2, 38]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.32480726e-11, 7.43200779e-02, 2.00259417e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34,  2, 38]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([5.32480726e-11, 7.43200779e-02, 8.65751505e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34, 38]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.32480726e-11, 3.82359743e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34, 38]), tensor([1., 1.]), tensor([0, 0]), tensor([5.32480726e-11, 4.49638814e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5220332145690918
10 lb beta sum: 0.7933733463287354, worst -0.5109838247299194
Time: prepare 0.0004    bound 0.1212    transfer 0.0001    finalize 0.0002    func 0.1220    
Accumulated time: func 0.5837    prepare 0.0370    bound 0.5358    transfer 0.0048    finalize 0.0081    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 1: [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] 
split level 2: [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] 
split level 3: [/input-12, 71] [/input-12, 71] [/input-12, 8] [/input-12, 8] 
split level 4: [/input-8, 1134] [/input-8, 1134] [/input-12, 71] [/input-12, 71] 
split level 5: [/input-8, 306] [/input-8, 306] [/input-12, 32] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8030385971069336, worst -0.265051007270813
10 lb beta sum: 0.8030385971069336, worst -0.2637573480606079
Time: prepare 0.0105    bound 0.1221    transfer 0.0022    finalize 0.0014    func 0.1379    
Accumulated time: func 0.7215    prepare 0.0478    bound 0.6578    transfer 0.0070    finalize 0.0096    
all_split False
======================Cut inference begins======================
max lb tensor(0.38013393) min lb tensor(-0.26314461)
Number of Verified Splits: 216 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.8199013471603394, worst -0.29540789127349854
10 lb beta sum: 1.0159646272659302, worst -0.14209270477294922
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 9
#cuts 4-6: 10
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.25239014625549316 
BICCOS Cumulative time: 0.30969977378845215
Preprocessing time: 0.006779193878173828 Inference time: 0.23889422416687012 Add cuts time: 0.005898475646972656 Cut analysis time: 0.0008182525634765625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26314 (6), -0.26243 (6), -0.26222 (6), -0.26033 (6), -0.25068 (6), -0.25031 (6), -0.24857 (6), -0.24766 (6), -0.23446 (6), -0.23230 (6), -0.22927 (6), -0.22670 (6), -0.22049 (6), -0.21991 (6), -0.20895 (6), -0.20486 (6), -0.13450 (6), -0.13002 (6), -0.12823 (6), -0.12460 (6), 
Length of domains: 40
Time: pickout 0.0005    decision 0.0201    set_bounds 0.0194    solve 0.1379    add 0.0017    
Accumulated time: pickout 0.0097    decision 0.5895    set_bounds 0.0571    solve 0.5451    add 0.2723    
Current (lb-rhs): -0.2631446123123169
140 domains visited
Cumulative time: 1.9992823600769043

BaB round 2
batch: 40
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] 
split level 2: [/input-8, 757] [/input-8, 757] [/input-8, 1754] [/input-8, 1754] [/input-8, 757] [/input-8, 757] [/input-8, 1754] [/input-8, 1754] [/input-8, 757] [/input-8, 757] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2497105598449707
10 lb beta sum: 0.3530046343803406, worst -0.24106678366661072
Time: prepare 0.0062    bound 0.1233    transfer 0.0012    finalize 0.0019    func 0.1347    
Accumulated time: func 0.8563    prepare 0.0542    bound 0.7812    transfer 0.0081    finalize 0.0115    
all_split False
======================Cut inference begins======================
max lb tensor(0.61744297) min lb tensor(-0.24094117)
Number of Verified Splits: 187 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5196199417114258
10 lb beta sum: 1.1475489139556885, worst -0.3008931875228882
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 9
#cuts 4-6: 10
#cuts 7-9: 11
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.2476482391357422 
BICCOS Cumulative time: 0.5573480129241943
Preprocessing time: 0.009263753890991211 Inference time: 0.2294788360595703 Add cuts time: 0.007513284683227539 Cut analysis time: 0.001392364501953125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24094 (9), -0.24032 (9), -0.23947 (9), -0.23802 (9), -0.22835 (9), -0.22736 (9), -0.22492 (9), -0.22490 (9), -0.22472 (9), -0.22373 (9), -0.22372 (9), -0.22175 (9), -0.21480 (9), -0.21273 (9), -0.21242 (9), -0.21238 (9), -0.21055 (9), -0.20977 (9), -0.20969 (9), -0.20963 (9), 
Length of domains: 133
Time: pickout 0.0013    decision 0.0158    set_bounds 0.0210    solve 0.1348    add 0.0013    
Accumulated time: pickout 0.0110    decision 0.6053    set_bounds 0.0781    solve 0.6799    add 0.2737    
Current (lb-rhs): -0.24094116687774658
273 domains visited
Cumulative time: 2.422703266143799

BaB round 3
batch: 133
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 14] [/input-8, 1955] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2436075210571289
10 lb beta sum: 0.32711535692214966, worst -0.2408231794834137
Time: prepare 0.0054    bound 0.1373    transfer 0.0006    finalize 0.0015    func 0.1470    
Accumulated time: func 1.0032    prepare 0.0598    bound 0.9184    transfer 0.0087    finalize 0.0129    
all_split False
======================Cut inference begins======================
max lb tensor(0.35024971) min lb tensor(-0.24073605)
Number of Verified Splits: 90 of 266
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 9
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.020583629608154297 
BICCOS Cumulative time: 0.5779316425323486
Preprocessing time: 0.008392810821533203 Inference time: 0.008505821228027344 Add cuts time: 0.0027475357055664062 Cut analysis time: 0.0009374618530273438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24074 (10), -0.24014 (10), -0.23932 (10), -0.23782 (10), -0.22818 (10), -0.22720 (10), -0.22456 (10), -0.22455 (10), -0.22424 (10), -0.22330 (10), -0.22325 (10), -0.22139 (10), -0.21446 (10), -0.21229 (10), -0.21209 (10), -0.21208 (10), -0.21002 (10), -0.20912 (10), -0.20842 (10), -0.20839 (10), 
Length of domains: 176
Time: pickout 0.0024    decision 0.0187    set_bounds 0.0115    solve 0.2927    add 0.0026    
Accumulated time: pickout 0.0134    decision 0.6240    set_bounds 0.0896    solve 0.9727    add 0.2763    
Current (lb-rhs): -0.24073605239391327
449 domains visited
Cumulative time: 2.772052526473999

BaB round 4
batch: 176
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23736572265625
10 lb beta sum: 0.28920039534568787, worst -0.23461048305034637
Time: prepare 0.0069    bound 0.1385    transfer 0.0007    finalize 0.0018    func 0.1503    
Accumulated time: func 1.1535    prepare 0.0670    bound 1.0570    transfer 0.0094    finalize 0.0148    
all_split False
======================Cut inference begins======================
max lb tensor(0.33024013) min lb tensor(-0.23455435)
Number of Verified Splits: 95 of 352
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 9
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.023639917373657227 
BICCOS Cumulative time: 0.6015715599060059
Preprocessing time: 0.010074138641357422 Inference time: 0.009526968002319336 Add cuts time: 0.003049135208129883 Cut analysis time: 0.000989675521850586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23455 (11), -0.23387 (11), -0.23169 (11), -0.23167 (11), -0.22210 (11), -0.22104 (11), -0.21791 (11), -0.21761 (11), -0.21736 (11), -0.21702 (11), -0.21559 (11), -0.21524 (11), -0.20902 (11), -0.20682 (11), -0.20599 (11), -0.20582 (11), -0.20278 (11), -0.20256 (11), -0.20241 (11), -0.20227 (11), 
Length of domains: 257
Time: pickout 0.0028    decision 0.0213    set_bounds 0.0151    solve 0.1509    add 0.0015    
Accumulated time: pickout 0.0161    decision 0.6453    set_bounds 0.1047    solve 1.1235    add 0.2777    
Current (lb-rhs): -0.23455435037612915
706 domains visited
Cumulative time: 2.9880268573760986

BaB round 5
batch: 257
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 155] [/input-8, 418] [/input-8, 155] [/input-8, 418] [/input-8, 155] [/input-8, 418] [/input-8, 155] [/input-8, 418] [/input-8, 146] [/input-8, 146] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23123598098754883
10 lb beta sum: 0.2563958168029785, worst -0.22845308482646942
Time: prepare 0.0098    bound 0.1411    transfer 0.0020    finalize 0.0024    func 0.1587    
Accumulated time: func 1.3123    prepare 0.0770    bound 1.1981    transfer 0.0114    finalize 0.0172    
all_split False
======================Cut inference begins======================
max lb tensor(0.21275985) min lb tensor(-0.22843319)
Number of Verified Splits: 117 of 514
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 10
#cuts 4-6: 12
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.031225204467773438 
BICCOS Cumulative time: 0.6327967643737793
Preprocessing time: 0.014376640319824219 Inference time: 0.01301264762878418 Add cuts time: 0.0030646324157714844 Cut analysis time: 0.0007712841033935547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22843 (12), -0.22841 (12), -0.22804 (12), -0.22502 (12), -0.21588 (12), -0.21579 (12), -0.21461 (12), -0.21338 (12), -0.21253 (12), -0.21228 (12), -0.21194 (12), -0.21167 (12), -0.21165 (12), -0.21114 (12), -0.20856 (12), -0.20851 (12), -0.19964 (12), -0.19931 (12), -0.19925 (12), -0.19854 (12), 
Length of domains: 397
Time: pickout 0.0042    decision 0.0242    set_bounds 0.0215    solve 0.1589    add 0.0022    
Accumulated time: pickout 0.0203    decision 0.6696    set_bounds 0.1262    solve 1.2824    add 0.2799    
Current (lb-rhs): -0.22843319177627563
1103 domains visited
Cumulative time: 3.2312755584716797

BaB round 6
batch: 397
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 147] [/input-8, 1134] [/input-8, 147] [/input-8, 1134] [/input-8, 147] [/input-8, 306] [/input-8, 147] [/input-8, 306] [/input-8, 155] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22609853744506836
10 lb beta sum: 0.21592463552951813, worst -0.22331802546977997
Time: prepare 0.0156    bound 0.1415    transfer 0.0033    finalize 0.0042    func 0.1698    
Accumulated time: func 1.4820    prepare 0.0928    bound 1.3396    transfer 0.0147    finalize 0.0213    
all_split False
======================Cut inference begins======================
max lb tensor(0.45713705) min lb tensor(-0.22328410)
Number of Verified Splits: 173 of 794
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 11
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.0454404354095459 
BICCOS Cumulative time: 0.6782371997833252
Preprocessing time: 0.022113561630249023 Inference time: 0.020154237747192383 Add cuts time: 0.0027091503143310547 Cut analysis time: 0.0004634857177734375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22328 (13), -0.22326 (13), -0.21539 (13), -0.21506 (13), -0.21333 (13), -0.21270 (13), -0.21021 (13), -0.21012 (13), -0.20967 (13), -0.20889 (13), -0.20884 (13), -0.20823 (13), -0.20765 (13), -0.20711 (13), -0.20691 (13), -0.20510 (13), -0.20403 (13), -0.20360 (13), -0.20308 (13), -0.19853 (13), 
Length of domains: 621
Time: pickout 0.0063    decision 0.0326    set_bounds 0.0332    solve 0.1699    add 0.0036    
Accumulated time: pickout 0.0266    decision 0.7022    set_bounds 0.1594    solve 1.4524    add 0.2835    
Current (lb-rhs): -0.22328409552574158
1724 domains visited
Cumulative time: 3.523972749710083

BaB round 7
batch: 621
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 751] [/input-8, 306] [/input, 374] [/input-8, 306] [/input-8, 751] [/input-8, 751] [/input, 374] [/input-8, 751] [/input-8, 1134] [/input-8, 306] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.222900390625
10 lb beta sum: 0.47578591108322144, worst -0.21830406785011292
Time: prepare 0.0245    bound 0.1495    transfer 0.0072    finalize 0.0064    func 0.1963    
Accumulated time: func 1.6783    prepare 0.1175    bound 1.4890    transfer 0.0220    finalize 0.0277    
all_split False
======================Cut inference begins======================
max lb tensor(0.49803340) min lb tensor(-0.21827559)
Number of Verified Splits: 220 of 1242
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 14
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.06497025489807129 
BICCOS Cumulative time: 0.7432074546813965
Preprocessing time: 0.03688645362854004 Inference time: 0.024828195571899414 Add cuts time: 0.0027599334716796875 Cut analysis time: 0.0004956722259521484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21828 (14), -0.21733 (14), -0.20967 (14), -0.20921 (14), -0.20716 (14), -0.20652 (14), -0.20492 (14), -0.20351 (14), -0.20282 (14), -0.20253 (14), -0.20243 (14), -0.20131 (14), -0.20105 (14), -0.20043 (14), -0.19976 (14), -0.19922 (14), -0.19876 (14), -0.19763 (14), -0.19704 (14), -0.19628 (14), 
Length of domains: 1022
Time: pickout 0.0083    decision 0.0454    set_bounds 0.0501    solve 0.1966    add 0.0047    
Accumulated time: pickout 0.0349    decision 0.7476    set_bounds 0.2095    solve 1.6489    add 0.2882    
Current (lb-rhs): -0.21827559173107147
2746 domains visited
Cumulative time: 3.896547317504883

BaB round 8
batch: 1022
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1134] [/input-8, 751] [/input-8, 751] [/input-8, 416] [/input, 374] [/input-8, 147] [/input-8, 751] [/input-8, 1134] [/input-8, 751] [/input-8, 751] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2205195426940918
10 lb beta sum: 0.91556316614151, worst -0.20715847611427307
Time: prepare 0.0430    bound 0.1765    transfer 0.0087    finalize 0.0127    func 0.2544    
Accumulated time: func 1.9327    prepare 0.1607    bound 1.6655    transfer 0.0307    finalize 0.0405    
all_split False
======================Cut inference begins======================
max lb tensor(0.57387966) min lb tensor(-0.20713763)
Number of Verified Splits: 1401 of 2044
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 14
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.4014272689819336 
BICCOS Cumulative time: 1.14463472366333
Preprocessing time: 0.20951151847839355 Inference time: 0.16791772842407227 Add cuts time: 0.023296833038330078 Cut analysis time: 0.0007011890411376953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20714 (15), -0.20666 (15), -0.20520 (15), -0.20312 (15), -0.20249 (15), -0.20190 (15), -0.19655 (15), -0.19599 (15), -0.19251 (15), -0.19230 (15), -0.19169 (15), -0.19162 (15), -0.19160 (15), -0.19102 (15), -0.19087 (15), -0.19066 (15), -0.19047 (15), -0.19037 (15), -0.19032 (15), -0.18979 (15), 
Length of domains: 643
Time: pickout 0.0166    decision 0.0665    set_bounds 0.0827    solve 0.2552    add 0.0042    
Accumulated time: pickout 0.0516    decision 0.8141    set_bounds 0.2922    solve 1.9041    add 0.2924    
Current (lb-rhs): -0.20713762938976288
3389 domains visited
Cumulative time: 4.734510183334351

BaB round 9
batch: 643
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 292] [/input-8, 306] [/input-8, 147] [/input-8, 418] [/input-8, 147] [/input-8, 751] [/input-8, 147] [/input-8, 416] [/input-8, 147] [/input-8, 416] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8585909605026245, worst -0.2029438465833664
10 lb beta sum: 0.8585909605026245, worst -0.20289044082164764
Time: prepare 0.0545    bound 0.1495    transfer 0.0020    finalize 0.0068    func 0.2212    
Accumulated time: func 2.1539    prepare 0.2155    bound 1.8151    transfer 0.0326    finalize 0.0472    
all_split False
======================Cut inference begins======================
max lb tensor(0.15450764) min lb tensor(-0.20287280)
Number of Verified Splits: 24 of 1286
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 16
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.04335832595825195 
BICCOS Cumulative time: 1.187993049621582
Preprocessing time: 0.038231849670410156 Inference time: 0.003752470016479492 Add cuts time: 0.0008876323699951172 Cut analysis time: 0.0004863739013671875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20287 (16), -0.20234 (16), -0.20056 (16), -0.19954 (16), -0.19945 (16), -0.19882 (16), -0.19283 (16), -0.19230 (16), -0.18912 (16), -0.18889 (16), -0.18844 (16), -0.18774 (16), -0.18760 (16), -0.18716 (16), -0.18713 (16), -0.18706 (16), -0.18688 (16), -0.18634 (16), -0.18633 (16), -0.18629 (16), 
Length of domains: 1262
Time: pickout 0.0129    decision 0.0462    set_bounds 0.0552    solve 0.2215    add 0.0170    
Accumulated time: pickout 0.0645    decision 0.8602    set_bounds 0.3475    solve 2.1256    add 0.3095    
Current (lb-rhs): -0.20287279784679413
4651 domains visited
Cumulative time: 5.13223123550415

BaB round 10
batch: 1262
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 147] [/input-8, 292] [/input-8, 423] [/input-8, 420] [/input-8, 423] [/input-8, 147] [/input-8, 423] [/input-8, 147] [/input-8, 292] [/input-8, 292] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21212100982666016
10 lb beta sum: 0.9359152317047119, worst -0.1990460455417633
Time: prepare 0.0482    bound 0.2011    transfer 0.0100    finalize 0.0122    func 0.2884    
Accumulated time: func 2.4423    prepare 0.2640    bound 2.0161    transfer 0.0426    finalize 0.0594    
all_split False
======================Cut inference begins======================
max lb tensor(0.53657377) min lb tensor(-0.19902663)
Number of Verified Splits: 1444 of 2524
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 22
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.4353516101837158 
BICCOS Cumulative time: 1.6233446598052979
Preprocessing time: 0.07493734359741211 Inference time: 0.3334798812866211 Add cuts time: 0.026287317276000977 Cut analysis time: 0.0006470680236816406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19903 (17), -0.19846 (17), -0.19634 (17), -0.19556 (17), -0.19325 (17), -0.19262 (17), -0.18913 (17), -0.18884 (17), -0.18847 (17), -0.18827 (17), -0.18450 (17), -0.18394 (17), -0.18333 (17), -0.18300 (17), -0.18252 (17), -0.18248 (17), -0.18231 (17), -0.18205 (17), -0.18188 (17), -0.18112 (17), 
Length of domains: 1080
Time: pickout 0.0162    decision 0.0798    set_bounds 0.1050    solve 0.2888    add 0.0035    
Accumulated time: pickout 0.0807    decision 0.9400    set_bounds 0.4525    solve 2.4144    add 0.3129    
Current (lb-rhs): -0.19902662932872772
5731 domains visited
Cumulative time: 6.073485612869263

BaB round 11
batch: 1080
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 292] [/input-8, 292] [/input-8, 155] [/input-8, 155] [/input-8, 292] [/input-8, 420] [/input-8, 939] [/input-8, 155] [/input-8, 292] [/input-8, 420] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20908737182617188
10 lb beta sum: 1.565372109413147, worst -0.18973523378372192
Time: prepare 0.0403    bound 0.1792    transfer 0.0090    finalize 0.0095    func 0.2532    
Accumulated time: func 2.6955    prepare 0.3045    bound 2.1953    transfer 0.0516    finalize 0.0690    
all_split False
======================Cut inference begins======================
max lb tensor(0.56993127) min lb tensor(-0.18972212)
Number of Verified Splits: 1094 of 2160
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 22
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.23404979705810547 
BICCOS Cumulative time: 1.8573944568634033
Preprocessing time: 0.06528425216674805 Inference time: 0.15181970596313477 Add cuts time: 0.01633930206298828 Cut analysis time: 0.000606536865234375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18972 (18), -0.18912 (18), -0.18887 (18), -0.18771 (18), -0.18717 (18), -0.18706 (18), -0.18503 (18), -0.18444 (18), -0.18361 (18), -0.18289 (18), -0.17951 (18), -0.17891 (18), -0.17741 (18), -0.17676 (18), -0.17671 (18), -0.17641 (18), -0.17631 (18), -0.17503 (18), -0.17447 (18), -0.17434 (18), 
Length of domains: 1066
Time: pickout 0.0200    decision 0.0675    set_bounds 0.0912    solve 0.2536    add 0.0032    
Accumulated time: pickout 0.1007    decision 1.0075    set_bounds 0.5437    solve 2.6680    add 0.3162    
Current (lb-rhs): -0.18972212076187134
6797 domains visited
Cumulative time: 6.752680540084839

BaB round 12
batch: 1066
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 292] [/input-8, 155] [/input-8, 292] [/input-8, 420] [/input-8, 423] [/input-8, 420] [/input-8, 292] [/input-8, 292] [/input-8, 292] [/input-8, 420] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7763177156448364, worst -0.18914318084716797
10 lb beta sum: 1.7763177156448364, worst -0.18907690048217773
Time: prepare 0.0896    bound 0.1771    transfer 0.0085    finalize 0.0096    func 0.2986    
Accumulated time: func 2.9941    prepare 0.3943    bound 2.3724    transfer 0.0602    finalize 0.0785    
all_split False
======================Cut inference begins======================
max lb tensor(0.25396323) min lb tensor(-0.18887281)
Number of Verified Splits: 333 of 2132
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 22
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.11881113052368164 
BICCOS Cumulative time: 1.976205587387085
Preprocessing time: 0.06494951248168945 Inference time: 0.048007965087890625 Add cuts time: 0.005263328552246094 Cut analysis time: 0.0005903244018554688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18887 (19), -0.18886 (19), -0.18716 (19), -0.18492 (19), -0.18431 (19), -0.18319 (19), -0.18252 (19), -0.18051 (19), -0.17992 (19), -0.17934 (19), -0.17861 (19), -0.17641 (19), -0.17622 (19), -0.17468 (19), -0.17432 (19), -0.17411 (19), -0.17364 (19), -0.17357 (19), -0.17345 (19), -0.17297 (19), 
Length of domains: 1799
Time: pickout 0.0153    decision 0.0668    set_bounds 0.0911    solve 0.2997    add 0.0054    
Accumulated time: pickout 0.1160    decision 1.0743    set_bounds 0.6348    solve 2.9677    add 0.3216    
Current (lb-rhs): -0.1888728141784668
8596 domains visited
Cumulative time: 7.35408616065979

BaB round 13
batch: 1799
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 292] [/input-8, 292] [/input-8, 292] [/input-8, 292] [/input-8, 292] [/input-8, 292] [/input-8, 292] [/input-8, 292] [/input-8, 158] [/input-8, 292] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7488610744476318, worst -0.1890401840209961
10 lb beta sum: 1.7488610744476318, worst -0.18901824951171875
Time: prepare 0.1519    bound 0.2598    transfer 0.0143    finalize 0.0161    func 0.4670    
Accumulated time: func 3.4611    prepare 0.5465    bound 2.6322    transfer 0.0745    finalize 0.0947    
all_split False
======================Cut inference begins======================
max lb tensor(0.26167488) min lb tensor(-0.18887281)
Number of Verified Splits: 1026 of 3598
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 25
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.28293943405151367 
BICCOS Cumulative time: 2.2591450214385986
Preprocessing time: 0.10976433753967285 Inference time: 0.15535473823547363 Add cuts time: 0.017148256301879883 Cut analysis time: 0.0006721019744873047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18887 (20), -0.18886 (20), -0.18716 (20), -0.18715 (20), -0.18491 (20), -0.18431 (20), -0.18049 (20), -0.17991 (20), -0.17842 (20), -0.17773 (20), -0.17620 (20), -0.17608 (20), -0.17470 (20), -0.17467 (20), -0.17463 (20), -0.17448 (20), -0.17432 (20), -0.17432 (20), -0.17410 (20), -0.17390 (20), 
Length of domains: 2572
Time: pickout 0.0310    decision 0.2300    set_bounds 0.1530    solve 0.4680    add 0.0343    
Accumulated time: pickout 0.1470    decision 1.3044    set_bounds 0.7879    solve 3.4357    add 0.3559    
Current (lb-rhs): -0.1888728141784668
11168 domains visited
Cumulative time: 8.568667888641357

BaB round 14
batch: 2572
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 292] [/input-8, 292] [/input-8, 158] [/input-8, 158] [/input-8, 292] [/input-8, 292] [/input-8, 154] [/input-8, 154] [/input-8, 1395] [/input-8, 292] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19242048263549805
10 lb beta sum: 1.7093610763549805, worst -0.18206721544265747
Time: prepare 0.1055    bound 0.3461    transfer 0.0260    finalize 0.0315    func 0.5441    
Accumulated time: func 4.0052    prepare 0.6523    bound 2.9783    transfer 0.1005    finalize 0.1262    
all_split False
======================Cut inference begins======================
max lb tensor(0.56594014) min lb tensor(-0.18191394)
Number of Verified Splits: 1992 of 5144
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 26
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.698822021484375 
BICCOS Cumulative time: 2.9579670429229736
Preprocessing time: 0.15769505500793457 Inference time: 0.5017902851104736 Add cuts time: 0.03831624984741211 Cut analysis time: 0.0010204315185546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18191 (21), -0.18166 (21), -0.17751 (21), -0.17691 (21), -0.17594 (21), -0.17522 (21), -0.17349 (21), -0.17340 (21), -0.17256 (21), -0.17247 (21), -0.16721 (21), -0.16663 (21), -0.16638 (21), -0.16620 (21), -0.16592 (21), -0.16590 (21), -0.16580 (21), -0.16578 (21), -0.16566 (21), -0.16559 (21), 
Length of domains: 3152
Time: pickout 0.0353    decision 0.2798    set_bounds 0.2285    solve 0.5454    add 0.0191    
Accumulated time: pickout 0.1823    decision 1.5842    set_bounds 1.0163    solve 3.9811    add 0.3750    
Current (lb-rhs): -0.18191394209861755
14320 domains visited
Cumulative time: 10.401426792144775

BaB round 15
batch: 3152
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 158] [/input-8, 414] [/input-8, 1195] [/input-8, 155] [/input-8, 1195] [/input-8, 155] [/input-8, 1395] [/input-8, 1384] [/input-8, 1395] [/input-8, 1395] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18534326553344727
10 lb beta sum: 1.6800453662872314, worst -0.17499762773513794
Time: prepare 0.1276    bound 0.4048    transfer 0.0321    finalize 0.1769    func 0.7840    
Accumulated time: func 4.7893    prepare 0.7802    bound 3.3831    transfer 0.1326    finalize 0.3031    
all_split False
======================Cut inference begins======================
max lb tensor(0.31614995) min lb tensor(-0.17494071)
Number of Verified Splits: 1664 of 6304
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 27
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.5200560092926025 
BICCOS Cumulative time: 3.478023052215576
Preprocessing time: 0.19546842575073242 Inference time: 0.290194034576416 Add cuts time: 0.03363299369812012 Cut analysis time: 0.0007605552673339844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17494 (22), -0.17486 (22), -0.17450 (22), -0.17443 (22), -0.17376 (22), -0.17317 (22), -0.16932 (22), -0.16928 (22), -0.16862 (22), -0.16834 (22), -0.16831 (22), -0.16793 (22), -0.16452 (22), -0.16449 (22), -0.16426 (22), -0.16423 (22), -0.16348 (22), -0.16291 (22), -0.16199 (22), -0.16194 (22), 
Length of domains: 4640
Time: pickout 0.0587    decision 0.1764    set_bounds 0.2800    solve 0.7855    add 0.0660    
Accumulated time: pickout 0.2410    decision 1.7606    set_bounds 1.2963    solve 4.7667    add 0.4410    
Current (lb-rhs): -0.17494070529937744
18960 domains visited
Cumulative time: 12.31270146369934

BaB round 16
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 155] [/input-12, 13] [/input-8, 414] [/input-8, 154] [/input-8, 154] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-8, 154] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1822490692138672
10 lb beta sum: 1.6470718383789062, worst -0.17205315828323364
Time: prepare 0.1714    bound 0.5016    transfer 0.0391    finalize 0.0451    func 0.8118    
Accumulated time: func 5.6010    prepare 0.9519    bound 3.8847    transfer 0.1717    finalize 0.3482    
all_split False
======================Cut inference begins======================
max lb tensor(0.57079637) min lb tensor(-0.17203435)
Number of Verified Splits: 2405 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 26
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.92252516746521 
BICCOS Cumulative time: 4.400548219680786
Preprocessing time: 0.25832223892211914 Inference time: 0.6100449562072754 Add cuts time: 0.05345559120178223 Cut analysis time: 0.0007023811340332031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17203 (23), -0.17198 (23), -0.17135 (23), -0.17130 (23), -0.16963 (23), -0.16929 (23), -0.16926 (23), -0.16904 (23), -0.16861 (23), -0.16833 (23), -0.16830 (23), -0.16793 (23), -0.16167 (22), -0.16165 (23), -0.16148 (23), -0.16135 (23), -0.16122 (23), -0.16090 (22), -0.15937 (23), -0.15880 (23), 
Length of domains: 6331
Time: pickout 0.0610    decision 0.2261    set_bounds 0.5159    solve 0.8141    add 0.0214    
Accumulated time: pickout 0.3021    decision 1.9867    set_bounds 1.8122    solve 5.5807    add 0.4624    
Current (lb-rhs): -0.172034353017807
24747 domains visited
current_vram/total_varm: 12.1GB/99.9GB, batch_size increase to 8192
Cumulative time: 14.913410902023315

BaB round 17
batch: 6331
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 414] [/input-8, 1395] [/input-8, 155] [/input-12, 13] [/input-8, 414] [/input-8, 1195] [/input-8, 939] [/input-8, 1387] [/input-8, 414] [/input-8, 154] 
cut re-enabled after branching node selection
0 lb beta sum: 0.1729143112897873, worst -0.1793370246887207
10 lb beta sum: 1.7515740394592285, worst -0.16860896348953247
Time: prepare 0.2919    bound 0.7414    transfer 0.0644    finalize 0.0789    func 1.2625    
Accumulated time: func 6.8635    prepare 1.2441    bound 4.6261    transfer 0.2361    finalize 0.4271    
all_split False
======================Cut inference begins======================
max lb tensor(0.57493973) min lb tensor(-0.16860634)
Number of Verified Splits: 8339 of 12662
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 26
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 2.3540890216827393 
BICCOS Cumulative time: 6.754637241363525
Preprocessing time: 0.6124191284179688 Inference time: 1.5895709991455078 Add cuts time: 0.15094709396362305 Cut analysis time: 0.0011518001556396484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16861 (24), -0.16793 (24), -0.16649 (24), -0.16647 (24), -0.16568 (24), -0.16510 (24), -0.16500 (24), -0.16494 (24), -0.16428 (24), -0.16421 (24), -0.16351 (24), -0.16348 (24), -0.15976 (24), -0.15974 (24), -0.15937 (24), -0.15880 (24), -0.15832 (24), -0.15763 (24), -0.15753 (23), -0.15739 (24), 
Length of domains: 4323
Time: pickout 0.1206    decision 0.3474    set_bounds 0.7548    solve 1.2661    add 0.0279    
Accumulated time: pickout 0.4227    decision 2.3342    set_bounds 2.5670    solve 6.8468    add 0.4903    
Current (lb-rhs): -0.16860634088516235
29070 domains visited
Cumulative time: 19.892149209976196

BaB round 18
batch: 4323
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 13] [/input-8, 146] [/input-8, 155] [/input-12, 13] [/input-8, 155] [/input-12, 13] [/input-12, 13] [/input-8, 154] [/input-8, 1195] [/input-12, 13] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8859717845916748, worst -0.16860777139663696
10 lb beta sum: 1.8859717845916748, worst -0.16860920190811157
Time: prepare 0.3880    bound 0.5308    transfer 0.0418    finalize 0.0553    func 1.0730    
Accumulated time: func 7.9365    prepare 1.6324    bound 5.1569    transfer 0.2779    finalize 0.4825    
all_split False
======================Cut inference begins======================
max lb tensor(0.35009050) min lb tensor(-0.16860443)
Number of Verified Splits: 1589 of 8646
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 28
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.6139967441558838 
BICCOS Cumulative time: 7.368633985519409
Preprocessing time: 0.2818419933319092 Inference time: 0.30733346939086914 Add cuts time: 0.02408623695373535 Cut analysis time: 0.0007350444793701172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16860 (25), -0.16793 (25), -0.16568 (25), -0.16509 (25), -0.16496 (25), -0.16491 (25), -0.16423 (25), -0.16418 (25), -0.16167 (25), -0.16166 (25), -0.16068 (25), -0.16066 (25), -0.15832 (25), -0.15792 (25), -0.15791 (25), -0.15763 (25), -0.15735 (25), -0.15734 (25), -0.15674 (25), -0.15673 (25), 
Length of domains: 7057
Time: pickout 0.0707    decision 0.4411    set_bounds 0.3938    solve 1.2712    add 0.0299    
Accumulated time: pickout 0.4934    decision 2.7753    set_bounds 2.9608    solve 8.1180    add 0.5202    
Current (lb-rhs): -0.16860443353652954
36127 domains visited
Cumulative time: 22.741522312164307

BaB round 19
batch: 7057
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 423] [/input-8, 1395] [/input-8, 1395] [/input-8, 1395] [/input-8, 1395] [/input-8, 1395] [/input-8, 1395] [/input-8, 158] [/input-8, 1395] [/input-8, 1395] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17304658889770508
10 lb beta sum: 1.6665741205215454, worst -0.1659654825925827
Time: prepare 0.3112    bound 0.8173    transfer 0.0719    finalize 0.2742    func 1.5682    
Accumulated time: func 9.5047    prepare 1.9439    bound 5.9741    transfer 0.3498    finalize 0.7567    
all_split False
======================Cut inference begins======================
max lb tensor(0.58246338) min lb tensor(-0.16595274)
Number of Verified Splits: 8583 of 14114
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 28
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 2.5047354698181152 
BICCOS Cumulative time: 9.873369455337524
Preprocessing time: 0.4509313106536865 Inference time: 1.9280247688293457 Add cuts time: 0.125046968460083 Cut analysis time: 0.000732421875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16595 (26), -0.16527 (26), -0.16493 (26), -0.16488 (26), -0.16420 (26), -0.16415 (26), -0.16288 (26), -0.16229 (26), -0.15908 (26), -0.15906 (26), -0.15808 (26), -0.15805 (26), -0.15568 (26), -0.15514 (26), -0.15511 (26), -0.15499 (26), -0.15411 (26), -0.15408 (26), -0.15303 (25), -0.15259 (26), 
Length of domains: 5531
Time: pickout 0.1399    decision 0.3859    set_bounds 0.8062    solve 1.5708    add 0.0247    
Accumulated time: pickout 0.6333    decision 3.1611    set_bounds 3.7669    solve 9.6888    add 0.5449    
Current (lb-rhs): -0.16595274209976196
41658 domains visited
Cumulative time: 28.280304431915283

BaB round 20
batch: 5531
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 158] [/input-8, 158] [/input-8, 146] [/input-8, 158] [/input-8, 146] [/input-8, 158] [/input-8, 146] [/input-8, 146] [/input-8, 158] [/input-8, 146] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7899993658065796, worst -0.16595369577407837
10 lb beta sum: 1.7899993658065796, worst -0.16595512628555298
Time: prepare 0.5053    bound 0.6607    transfer 0.0560    finalize 0.0806    func 1.3764    
Accumulated time: func 10.8811    prepare 2.4495    bound 6.6348    transfer 0.4058    finalize 0.8374    
all_split False
======================Cut inference begins======================
max lb tensor(0.37937570) min lb tensor(-0.16595274)
Number of Verified Splits: 3443 of 11062
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 28
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 1.3280673027038574 
BICCOS Cumulative time: 11.201436758041382
Preprocessing time: 0.5953812599182129 Inference time: 0.6904504299163818 Add cuts time: 0.04122471809387207 Cut analysis time: 0.001010894775390625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16595 (27), -0.16527 (27), -0.16287 (27), -0.16229 (27), -0.16012 (27), -0.16007 (27), -0.15939 (27), -0.15935 (27), -0.15908 (27), -0.15906 (27), -0.15807 (27), -0.15805 (27), -0.15641 (27), -0.15636 (27), -0.15568 (27), -0.15566 (27), -0.15562 (27), -0.15512 (27), -0.15509 (27), -0.15499 (27), 
Length of domains: 7619
Time: pickout 0.1184    decision 0.3059    set_bounds 0.6995    solve 1.3806    add 0.0325    
Accumulated time: pickout 0.7517    decision 3.4670    set_bounds 4.4664    solve 11.0693    add 0.5774    
Current (lb-rhs): -0.16595274209976196
49277 domains visited
Cumulative time: 32.19327187538147

BaB round 21
batch: 7619
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 13] [/input-8, 420] [/input-8, 420] [/input-8, 420] [/input-8, 1949] [/input-8, 414] [/input-8, 414] [/input-8, 146] [/input-8, 146] [/input-8, 146] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7362068891525269, worst -0.16287106275558472
10 lb beta sum: 1.7362068891525269, worst -0.1628839373588562
Time: prepare 0.7035    bound 0.8741    transfer 0.0740    finalize 0.3114    func 2.0626    
Accumulated time: func 12.9437    prepare 3.1534    bound 7.5090    transfer 0.4798    finalize 1.1488    
all_split False
======================Cut inference begins======================
max lb tensor(0.37008786) min lb tensor(-0.16287106)
Number of Verified Splits: 4611 of 15238
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 29
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 1.7824068069458008 
BICCOS Cumulative time: 12.983843564987183
Preprocessing time: 0.4891812801361084 Inference time: 1.2131991386413574 Add cuts time: 0.07892704010009766 Cut analysis time: 0.0010993480682373047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16287 (28), -0.16230 (28), -0.16229 (28), -0.16162 (28), -0.16012 (28), -0.16007 (28), -0.15939 (28), -0.15935 (28), -0.15908 (28), -0.15906 (28), -0.15807 (28), -0.15805 (28), -0.15626 (28), -0.15621 (28), -0.15552 (28), -0.15548 (28), -0.15511 (28), -0.15509 (28), -0.15409 (28), -0.15408 (28), 
Length of domains: 10627
Time: pickout 0.1625    decision 0.4219    set_bounds 0.9014    solve 2.0664    add 0.2687    
Accumulated time: pickout 0.9142    decision 3.8889    set_bounds 5.3678    solve 13.1357    add 0.8461    
Current (lb-rhs): -0.16287106275558472
59904 domains visited
Cumulative time: 37.865843534469604

BaB round 22
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 414] [/input-8, 1395] [/input-8, 1395] [/input-8, 1949] [/input-8, 1949] [/input, 3180] [/input-8, 1949] [/input-8, 1395] [/input-8, 1949] [/input, 3180] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16203689575195312
10 lb beta sum: 1.2937805652618408, worst -0.15625038743019104
Time: prepare 0.4208    bound 0.9369    transfer 0.0781    finalize 0.1135    func 1.6570    
Accumulated time: func 14.6007    prepare 3.5746    bound 8.4459    transfer 0.5579    finalize 1.2623    
all_split False
======================Cut inference begins======================
max lb tensor(0.61459708) min lb tensor(-0.15624459)
Number of Verified Splits: 9220 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 32
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 2.959946632385254 
BICCOS Cumulative time: 15.943790197372437
Preprocessing time: 0.8364982604980469 Inference time: 1.987764596939087 Add cuts time: 0.13480830192565918 Cut analysis time: 0.0008754730224609375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15624 (29), -0.15618 (29), -0.15607 (29), -0.15605 (29), -0.15551 (29), -0.15545 (29), -0.15503 (29), -0.15501 (29), -0.15293 (29), -0.15230 (29), -0.15197 (29), -0.15175 (29), -0.15144 (29), -0.15099 (29), -0.15091 (29), -0.14993 (29), -0.14717 (28), -0.14592 (28), -0.14569 (28), -0.14560 (29), 
Length of domains: 9599
Time: pickout 0.1586    decision 0.4597    set_bounds 0.9755    solve 1.6616    add 0.0301    
Accumulated time: pickout 1.0728    decision 4.3486    set_bounds 6.3433    solve 14.7973    add 0.8762    
Current (lb-rhs): -0.15624459087848663
67068 domains visited
current_vram/total_varm: 32.2GB/99.9GB, batch_size increase to 16384
Cumulative time: 44.234410762786865

BaB round 23
batch: 9599
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1195] [/input-12, 13] [/input-12, 13] [/input-8, 1195] [/input-8, 1195] [/input-12, 13] [/input-12, 13] [/input-8, 1195] [/input-12, 13] [/input-12, 13] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15842580795288086
10 lb beta sum: 1.5778026580810547, worst -0.15076285600662231
Time: prepare 0.4576    bound 1.0910    transfer 0.0980    finalize 0.1300    func 1.9051    
Accumulated time: func 16.5058    prepare 4.0326    bound 9.5368    transfer 0.6559    finalize 1.3923    
all_split False
======================Cut inference begins======================
max lb tensor(0.78005981) min lb tensor(-0.15074450)
Number of Verified Splits: 13100 of 19198
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 32
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 3.953834056854248 
BICCOS Cumulative time: 19.897624254226685
Preprocessing time: 0.6185793876647949 Inference time: 3.1236732006073 Add cuts time: 0.21061491966247559 Cut analysis time: 0.0009665489196777344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15074 (30), -0.15068 (30), -0.15000 (30), -0.14994 (30), -0.14481 (30), -0.14372 (30), -0.14328 (30), -0.14305 (30), -0.14241 (30), -0.14221 (30), -0.14201 (30), -0.14178 (30), -0.14136 (30), -0.14118 (30), -0.14092 (30), -0.14063 (30), -0.14034 (30), -0.13982 (30), -0.13978 (30), -0.13977 (30), 
Length of domains: 6098
Time: pickout 0.2202    decision 0.7657    set_bounds 1.1282    solve 2.1914    add 0.0252    
Accumulated time: pickout 1.2930    decision 5.1143    set_bounds 7.4716    solve 16.9887    add 0.9014    
Current (lb-rhs): -0.1507444977760315
73166 domains visited
Cumulative time: 52.685903787612915

BaB round 24
batch: 6098
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 939] [/input-8, 939] [/input-8, 939] [/input-8, 939] [/input-8, 939] [/input-8, 1384] [/input-8, 158] [/input-8, 939] [/input-8, 423] [/input-8, 423] 
cut re-enabled after branching node selection
0 lb beta sum: 1.697324275970459, worst -0.1507449746131897
10 lb beta sum: 1.697324275970459, worst -0.1507459282875061
Time: prepare 0.5490    bound 0.7211    transfer 0.0607    finalize 0.2842    func 1.6955    
Accumulated time: func 18.2013    prepare 4.5819    bound 10.2579    transfer 0.7166    finalize 1.6764    
all_split False
======================Cut inference begins======================
max lb tensor(0.35107279) min lb tensor(-0.15073973)
Number of Verified Splits: 3752 of 12196
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 33
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 1.2401189804077148 
BICCOS Cumulative time: 21.1377432346344
Preprocessing time: 0.40235042572021484 Inference time: 0.7983691692352295 Add cuts time: 0.03859877586364746 Cut analysis time: 0.0008006095886230469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15074 (31), -0.14529 (31), -0.14478 (31), -0.14476 (31), -0.14457 (31), -0.14454 (31), -0.14418 (31), -0.14407 (31), -0.14369 (31), -0.14320 (31), -0.14304 (31), -0.14233 (31), -0.14215 (31), -0.14200 (31), -0.14166 (31), -0.14130 (31), -0.14108 (31), -0.14052 (31), -0.14033 (31), -0.13978 (31), 
Length of domains: 8444
Time: pickout 0.1152    decision 0.3358    set_bounds 0.5580    solve 1.6992    add 0.0302    
Accumulated time: pickout 1.4082    decision 5.4501    set_bounds 8.0296    solve 18.6879    add 0.9316    
Current (lb-rhs): -0.15073972940444946
81610 domains visited
Cumulative time: 56.72016763687134

BaB round 25
batch: 8444
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1178] [/input-8, 1178] [/input-8, 414] [/input-8, 1178] [/input-8, 1178] [/input-8, 939] [/input-8, 1178] [/input-8, 414] [/input-8, 414] [/input-8, 737] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15087175369262695
10 lb beta sum: 1.3613965511322021, worst -0.1447582244873047
Time: prepare 0.3751    bound 0.9673    transfer 0.0868    finalize 0.1079    func 1.9204    
Accumulated time: func 20.1217    prepare 4.9573    bound 11.2251    transfer 0.8034    finalize 1.7843    
all_split False
======================Cut inference begins======================
max lb tensor(0.55899894) min lb tensor(-0.14475536)
Number of Verified Splits: 7920 of 16888
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 33
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 2.665369749069214 
BICCOS Cumulative time: 23.803112983703613
Preprocessing time: 0.5396785736083984 Inference time: 2.024717330932617 Add cuts time: 0.10010695457458496 Cut analysis time: 0.0008668899536132812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14476 (32), -0.14425 (32), -0.14368 (32), -0.13893 (32), -0.13891 (32), -0.13846 (32), -0.13823 (32), -0.13817 (32), -0.13802 (32), -0.13792 (32), -0.13786 (32), -0.13761 (32), -0.13749 (32), -0.13740 (32), -0.13738 (32), -0.13727 (32), -0.13697 (32), -0.13689 (32), -0.13622 (32), -0.13614 (32), 
Length of domains: 8968
Time: pickout 0.1534    decision 0.6691    set_bounds 0.9774    solve 1.9246    add 0.0378    
Accumulated time: pickout 1.5616    decision 6.1192    set_bounds 9.0069    solve 20.6126    add 0.9695    
Current (lb-rhs): -0.14475536346435547
90578 domains visited
Cumulative time: 63.249696254730225

BaB round 26
batch: 8968
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1384] [/input-8, 414] [/input-8, 1384] [/input-8, 414] [/input-8, 1384] [/input-8, 1384] [/input-8, 1395] [/input-8, 1395] [/input-8, 1395] [/input-8, 1395] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6021968126296997, worst -0.13909387588500977
10 lb beta sum: 1.6021968126296997, worst -0.1390514373779297
Time: prepare 0.8246    bound 1.0237    transfer 0.0884    finalize 0.1120    func 2.1690    
Accumulated time: func 22.2907    prepare 5.7824    bound 12.2488    transfer 0.8919    finalize 1.8964    
all_split False
======================Cut inference begins======================
max lb tensor(0.31228137) min lb tensor(-0.13901424)
Number of Verified Splits: 3976 of 17936
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 34
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 1.812183141708374 
BICCOS Cumulative time: 25.615296125411987
Preprocessing time: 0.8699157238006592 Inference time: 0.8990950584411621 Add cuts time: 0.04234147071838379 Cut analysis time: 0.0008308887481689453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13901 (33), -0.13888 (33), -0.13883 (33), -0.13883 (33), -0.13847 (33), -0.13842 (33), -0.13825 (33), -0.13816 (33), -0.13815 (33), -0.13798 (33), -0.13795 (33), -0.13785 (33), -0.13783 (33), -0.13754 (33), -0.13749 (33), -0.13736 (33), -0.13736 (33), -0.13736 (33), -0.13725 (33), -0.13689 (33), 
Length of domains: 13960
Time: pickout 0.2074    decision 0.4977    set_bounds 1.0348    solve 2.1733    add 0.0513    
Accumulated time: pickout 1.7690    decision 6.6169    set_bounds 10.0418    solve 22.7859    add 1.0208    
Current (lb-rhs): -0.13901424407958984
104538 domains visited
Cumulative time: 69.09057998657227

BaB round 27
batch: 13960
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 414] [/input-8, 414] [/input-8, 416] [/input-8, 416] [/input-8, 1754] [/input-8, 1754] [/input-8, 1754] [/input-8, 414] [/input-8, 1754] [/input-8, 1754] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14196538925170898
10 lb beta sum: 1.3489381074905396, worst -0.13583946228027344
Time: prepare 0.6660    bound 1.5496    transfer 0.1378    finalize 0.5030    func 3.0423    
Accumulated time: func 25.3331    prepare 6.4488    bound 13.7984    transfer 1.0297    finalize 2.3993    
all_split False
======================Cut inference begins======================
max lb tensor(0.29820943) min lb tensor(-0.13581419)
Number of Verified Splits: 6762 of 27920
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 34
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 3.0549256801605225 
BICCOS Cumulative time: 28.67022180557251
Preprocessing time: 0.9491622447967529 Inference time: 2.017129898071289 Add cuts time: 0.08772945404052734 Cut analysis time: 0.000904083251953125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13581 (34), -0.13573 (34), -0.13568 (34), -0.13564 (34), -0.13562 (34), -0.13543 (34), -0.13522 (34), -0.13521 (34), -0.13518 (34), -0.13517 (34), -0.13512 (34), -0.13510 (34), -0.13500 (34), -0.13481 (34), -0.13480 (34), -0.13476 (34), -0.13471 (34), -0.13468 (34), -0.13459 (34), -0.13451 (34), 
Length of domains: 21158
Time: pickout 0.3237    decision 1.0636    set_bounds 1.5124    solve 3.0483    add 0.2685    
Accumulated time: pickout 2.0927    decision 7.6805    set_bounds 11.5541    solve 25.8342    add 1.2893    
Current (lb-rhs): -0.13581418991088867
125696 domains visited
Cumulative time: 78.46656227111816

BaB round 28
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 414] [/input-8, 414] [/input-8, 414] [/input-8, 414] [/input-8, 414] [/input-8, 414] [/input-8, 414] [/input-8, 414] [/input-8, 414] [/input-8, 414] 
cut re-enabled after branching node selection
0 lb beta sum: 1.5766363143920898, worst -0.13402938842773438
10 lb beta sum: 1.5767326354980469, worst -0.13401031494140625
Time: prepare 1.5859    bound 1.8028    transfer 0.1566    finalize 0.2186    func 3.9812    
Accumulated time: func 29.3142    prepare 8.0351    bound 15.6011    transfer 1.1863    finalize 2.6179    
all_split False
======================Cut inference begins======================
max lb tensor(0.25428319) min lb tensor(-0.13399506)
Number of Verified Splits: 4470 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 35
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 2.5365896224975586 
BICCOS Cumulative time: 31.20681142807007
Preprocessing time: 1.4592769145965576 Inference time: 1.0242576599121094 Add cuts time: 0.05210566520690918 Cut analysis time: 0.0009493827819824219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13512 (34), -0.13451 (34), -0.13400 (35), -0.13396 (35), -0.13390 (35), -0.13389 (35), -0.13389 (34), -0.13348 (35), -0.13344 (35), -0.13339 (35), -0.13330 (35), -0.13327 (35), -0.13322 (35), -0.13315 (35), -0.13306 (34), -0.13305 (35), -0.13300 (35), -0.13266 (35), -0.13265 (35), -0.13255 (35), 
Length of domains: 33072
Time: pickout 0.3314    decision 1.6642    set_bounds 2.1975    solve 3.9886    add 0.4914    
Accumulated time: pickout 2.4241    decision 9.3446    set_bounds 13.7516    solve 29.8228    add 1.7807    
Current (lb-rhs): -0.13511806726455688
153994 domains visited
Cumulative time: 89.75635695457458

BaB round 29
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 154] [/input-8, 410] [/input-8, 410] [/input-8, 410] [/input-8, 1097] [/input-8, 1097] [/input-8, 1097] [/input-8, 433] [/input-8, 1097] [/input-8, 410] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13766193389892578
10 lb beta sum: 1.4109673500061035, worst -0.1339535266160965
Time: prepare 0.8530    bound 1.8072    transfer 0.1586    finalize 0.2294    func 3.2599    
Accumulated time: func 32.5741    prepare 8.8885    bound 17.4083    transfer 1.3448    finalize 2.8474    
all_split False
======================Cut inference begins======================
max lb tensor(0.29821956) min lb tensor(-0.13394010)
Number of Verified Splits: 5849 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 35
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 2.999385118484497 
BICCOS Cumulative time: 34.206196546554565
Preprocessing time: 1.5550000667572021 Inference time: 1.3527638912200928 Add cuts time: 0.09038019180297852 Cut analysis time: 0.0012409687042236328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13394 (36), -0.13387 (36), -0.13337 (36), -0.13327 (36), -0.13316 (36), -0.13310 (36), -0.13259 (36), -0.13249 (36), -0.13136 (36), -0.13127 (36), -0.13083 (36), -0.13080 (36), -0.13065 (35), -0.13036 (36), -0.13036 (36), -0.13031 (36), -0.13004 (35), -0.12984 (36), -0.12984 (36), -0.12975 (36), 
Length of domains: 43607
Time: pickout 0.3331    decision 1.8507    set_bounds 1.9892    solve 3.2676    add 0.0926    
Accumulated time: pickout 2.7572    decision 11.1953    set_bounds 15.7409    solve 33.0904    add 1.8733    
Current (lb-rhs): -0.13394010066986084
180913 domains visited
Cumulative time: 100.37631797790527

BaB round 30
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 433] [/input-8, 433] [/input-8, 1097] [/input-8, 433] [/input-8, 433] [/input-8, 423] [/input-8, 433] [/input-8, 423] [/input-8, 737] [/input-8, 1396] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13048267364501953
10 lb beta sum: 1.4170258045196533, worst -0.1279904842376709
Time: prepare 0.8367    bound 1.8061    transfer 0.1552    finalize 0.7844    func 3.7922    
Accumulated time: func 36.3663    prepare 9.7256    bound 19.2144    transfer 1.5000    finalize 3.6317    
all_split False
======================Cut inference begins======================
max lb tensor(0.29528981) min lb tensor(-0.12783110)
Number of Verified Splits: 5631 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 39.
#cuts 1-3: 37
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 3.1117358207702637 
BICCOS Cumulative time: 37.31793236732483
Preprocessing time: 1.007204294204712 Inference time: 2.0134294033050537 Add cuts time: 0.09022307395935059 Cut analysis time: 0.0008790493011474609
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13394 (36), -0.13387 (36), -0.13337 (36), -0.13327 (36), -0.13316 (36), -0.13310 (36), -0.13259 (36), -0.13249 (36), -0.13136 (36), -0.13127 (36), -0.13083 (36), -0.13080 (36), -0.13065 (35), -0.13036 (36), -0.13036 (36), -0.13031 (36), -0.13004 (35), -0.12984 (36), -0.12984 (36), -0.12975 (36), 
Length of domains: 54360
Time: pickout 0.3387    decision 2.0036    set_bounds 1.5438    solve 3.7987    add 0.1015    
Accumulated time: pickout 3.0959    decision 13.1989    set_bounds 17.2846    solve 36.8891    add 1.9748    
Current (lb-rhs): -0.13394010066986084
208050 domains visited
Cumulative time: 111.35799646377563

BaB round 31
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 939] [/input-8, 939] [/input-8, 939] [/input-8, 939] [/input-8, 939] [/input-8, 939] [/input-8, 414] [/input-8, 939] [/input-8, 939] [/input-8, 939] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13205623626708984
10 lb beta sum: 1.4135489463806152, worst -0.13136005401611328
Time: prepare 0.8391    bound 2.5291    transfer 0.1550    finalize 0.2228    func 3.9625    
Accumulated time: func 40.3288    prepare 10.5651    bound 21.7435    transfer 1.6551    finalize 3.8545    
all_split False
======================Cut inference begins======================
max lb tensor(0.34226018) min lb tensor(-0.13135386)
Number of Verified Splits: 5260 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 38
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 3.1406877040863037 
BICCOS Cumulative time: 40.45862007141113
Preprocessing time: 1.0086309909820557 Inference time: 2.044675350189209 Add cuts time: 0.08642935752868652 Cut analysis time: 0.0009520053863525391
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13394 (36), -0.13387 (36), -0.13337 (36), -0.13327 (36), -0.13316 (36), -0.13310 (36), -0.13259 (36), -0.13249 (36), -0.13135 (37), -0.13126 (37), -0.13083 (37), -0.13080 (37), -0.13036 (37), -0.13036 (36), -0.13031 (37), -0.12984 (37), -0.12984 (37), -0.12975 (36), -0.12911 (36), -0.12842 (36), 
Length of domains: 65484
Time: pickout 0.3383    decision 1.6501    set_bounds 2.2527    solve 3.9697    add 0.1014    
Accumulated time: pickout 3.4342    decision 14.8490    set_bounds 19.5373    solve 40.8588    add 2.0762    
Current (lb-rhs): -0.13394010066986084
235558 domains visited
Cumulative time: 122.90061545372009

BaB round 32
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 737] [/input-8, 1388] [/input-8, 737] [/input-8, 737] [/input-8, 1388] [/input-8, 737] [/input-8, 737] [/input-8, 1195] [/input, 3544] [/input, 3544] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13437795639038086
10 lb beta sum: 1.8463151454925537, worst -0.1282813549041748
Time: prepare 0.8548    bound 1.8078    transfer 0.1556    finalize 0.2175    func 3.2488    
Accumulated time: func 43.5776    prepare 11.4203    bound 23.5513    transfer 1.8106    finalize 4.0720    
all_split False
======================Cut inference begins======================
max lb tensor(0.55785400) min lb tensor(-0.12827361)
Number of Verified Splits: 16213 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 40
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 6.04036545753479 
BICCOS Cumulative time: 46.49898552894592
Preprocessing time: 1.026965856552124 Inference time: 4.748559474945068 Add cuts time: 0.26386332511901855 Cut analysis time: 0.0009768009185791016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13135 (37), -0.13126 (37), -0.13083 (37), -0.13080 (37), -0.13036 (37), -0.13031 (37), -0.12984 (37), -0.12984 (37), -0.12827 (37), -0.12783 (36), -0.12776 (36), -0.12757 (37), -0.12747 (37), -0.12687 (36), -0.12678 (36), -0.12669 (37), -0.12669 (36), -0.12627 (37), -0.12621 (36), -0.12608 (37), 
Length of domains: 65655
Time: pickout 0.3497    decision 1.6476    set_bounds 2.3763    solve 3.2560    add 7.2894    
Accumulated time: pickout 3.7840    decision 16.4966    set_bounds 21.9136    solve 44.1149    add 9.3657    
Current (lb-rhs): -0.13135385513305664
252113 domains visited
Cumulative time: 144.07295608520508

BaB round 33
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 963] [/input-8, 433] [/input, 2931] [/input-8, 1388] [/input-8, 1388] [/input-8, 410] [/input-8, 410] [/input-8, 410] [/input-8, 433] [/input-8, 150] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12872791290283203
10 lb beta sum: 2.171745777130127, worst -0.11560928821563721
Time: prepare 0.8539    bound 1.8136    transfer 0.1572    finalize 0.2110    func 3.2571    
Accumulated time: func 46.8347    prepare 12.2746    bound 25.3649    transfer 1.9678    finalize 4.2830    
all_split False
======================Cut inference begins======================
max lb tensor(0.47765350) min lb tensor(-0.11546457)
Number of Verified Splits: 15607 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 40
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 6.491676092147827 
BICCOS Cumulative time: 52.99066162109375
Preprocessing time: 1.1173489093780518 Inference time: 5.095349550247192 Add cuts time: 0.2777862548828125 Cut analysis time: 0.0011913776397705078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13135 (37), -0.13126 (37), -0.13083 (37), -0.13080 (37), -0.13036 (37), -0.13031 (37), -0.12984 (37), -0.12984 (37), -0.12827 (37), -0.12757 (37), -0.12747 (37), -0.12687 (36), -0.12669 (37), -0.12627 (37), -0.12621 (36), -0.12608 (37), -0.12600 (36), -0.12590 (37), -0.12529 (37), -0.12524 (36), 
Length of domains: 66432
Time: pickout 0.3757    decision 1.6523    set_bounds 2.4806    solve 3.2645    add 0.1505    
Accumulated time: pickout 4.1596    decision 18.1490    set_bounds 24.3941    solve 47.3794    add 9.5162    
Current (lb-rhs): -0.13135385513305664
269274 domains visited
Cumulative time: 158.74260544776917

BaB round 34
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 374] [/input, 3544] [/input, 373] [/input, 3544] [/input-8, 1754] [/input-8, 1387] [/input-8, 1629] [/input-8, 1629] [/input-8, 1097] [/input-8, 433] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12862682342529297
10 lb beta sum: 2.109567642211914, worst -0.11809462308883667
Time: prepare 0.8714    bound 1.8140    transfer 0.1548    finalize 0.2424    func 3.3165    
Accumulated time: func 50.1512    prepare 13.1464    bound 27.1789    transfer 2.1227    finalize 4.5255    
all_split False
======================Cut inference begins======================
max lb tensor(0.47510004) min lb tensor(-0.11803406)
Number of Verified Splits: 16851 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 41
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 6.962230443954468 
BICCOS Cumulative time: 59.95289206504822
Preprocessing time: 1.1654407978057861 Inference time: 5.4574198722839355 Add cuts time: 0.3381202220916748 Cut analysis time: 0.001249551773071289
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13135 (37), -0.13126 (37), -0.13083 (37), -0.13080 (37), -0.13036 (37), -0.13031 (37), -0.12984 (37), -0.12984 (37), -0.12827 (37), -0.12757 (37), -0.12747 (37), -0.12669 (37), -0.12627 (37), -0.12608 (37), -0.12590 (37), -0.12529 (37), -0.12512 (37), -0.12462 (36), -0.12426 (36), -0.12380 (37), 
Length of domains: 65965
Time: pickout 0.3904    decision 1.6584    set_bounds 2.6533    solve 3.3260    add 0.0808    
Accumulated time: pickout 4.5501    decision 19.8074    set_bounds 27.0474    solve 50.7053    add 9.5970    
Current (lb-rhs): -0.13135385513305664
285191 domains visited
Cumulative time: 174.05604934692383

BaB round 35
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 737] [/input-8, 1388] [/input-8, 737] [/input-8, 1388] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12930822372436523
10 lb beta sum: 2.278658628463745, worst -0.11593371629714966
Time: prepare 0.8621    bound 1.8147    transfer 0.1560    finalize 1.2319    func 4.2838    
Accumulated time: func 54.4350    prepare 14.0089    bound 28.9936    transfer 2.2787    finalize 5.7574    
all_split False
======================Cut inference begins======================
max lb tensor(0.48086667) min lb tensor(-0.11583489)
Number of Verified Splits: 15160 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 41
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 6.714779615402222 
BICCOS Cumulative time: 66.66767168045044
Preprocessing time: 1.1386141777038574 Inference time: 4.097243785858154 Add cuts time: 1.477773666381836 Cut analysis time: 0.0011479854583740234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12827 (37), -0.12757 (37), -0.12747 (37), -0.12669 (37), -0.12627 (37), -0.12608 (37), -0.12590 (37), -0.12529 (37), -0.12254 (37), -0.12242 (37), -0.12143 (37), -0.12132 (37), -0.12105 (37), -0.12044 (37), -0.12005 (37), -0.11921 (37), -0.11880 (37), -0.11852 (37), -0.11806 (37), -0.11803 (37), 
Length of domains: 67189
Time: pickout 0.3806    decision 1.6697    set_bounds 1.6820    solve 4.2924    add 0.0870    
Accumulated time: pickout 4.9306    decision 21.4771    set_bounds 28.7295    solve 54.9977    add 9.6839    
Current (lb-rhs): -0.128273606300354
302799 domains visited
Cumulative time: 189.08510994911194

BaB round 36
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 737] [/input-8, 737] [/input-8, 1388] [/input-8, 737] [/input-8, 737] [/input-8, 1388] [/input-8, 737] [/input-8, 737] [/input-8, 737] [/input-8, 737] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13160037994384766
10 lb beta sum: 2.1757001876831055, worst -0.11853897571563721
Time: prepare 0.9160    bound 1.8160    transfer 0.1540    finalize 1.2882    func 4.3965    
Accumulated time: func 58.8314    prepare 14.9254    bound 30.8096    transfer 2.4327    finalize 7.0455    
all_split False
======================Cut inference begins======================
max lb tensor(0.43459463) min lb tensor(-0.11852181)
Number of Verified Splits: 11075 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 42
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 4.421765327453613 
BICCOS Cumulative time: 71.08943700790405
Preprocessing time: 1.2059295177459717 Inference time: 3.0114405155181885 Add cuts time: 0.20310473442077637 Cut analysis time: 0.0012905597686767578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11852 (38), -0.11850 (38), -0.11833 (38), -0.11825 (38), -0.11803 (37), -0.11783 (38), -0.11765 (38), -0.11749 (37), -0.11745 (38), -0.11659 (38), -0.11583 (38), -0.11574 (38), -0.11546 (37), -0.11527 (38), -0.11522 (38), -0.11519 (38), -0.11511 (38), -0.11485 (38), -0.11469 (38), -0.11459 (38), 
Length of domains: 72498
Time: pickout 0.3891    decision 1.6693    set_bounds 1.6995    solve 4.4064    add 0.1001    
Accumulated time: pickout 5.3197    decision 23.1464    set_bounds 30.4290    solve 59.4041    add 9.7840    
Current (lb-rhs): -0.1185218095779419
324492 domains visited
Time out!!!!!!!!
Result: unknown in 204.3024 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 14, vnnlib ID: 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.06784821, -10.58980083, -14.57435703, -13.27788925, -13.83081436,
         -14.45864487, -13.14409447, -13.97298336, -12.07690144,  -9.28960514]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [479]; unstable size 479; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 218, 1, 479] with unstable size 217 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 479] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 479] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [217]; unstable size 217; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 217] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 217] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.56003881, 0.62899363, 3.70473766, 2.64315939, 3.00231862, 3.71363783,
         2.32805920, 2.93838763, 1.83370149]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0684 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 15, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.44266796, -16.16106987, -11.92645931, -10.71731567, -11.05861855,
         -10.75457382, -13.42498779, -10.81375790, -16.44475365, -15.04152584]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [587]; unstable size 587; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 222, 1, 587] with unstable size 221 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 587] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 587] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [221]; unstable size 221; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 221] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 221] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.55051112,  4.09006023,  0.36009479, -0.47126311, -0.31621832,
          1.88454580, -0.86957794,  4.73674726,  3.06783509]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.44266796, -16.16106987, -11.92645931, -10.71731567, -11.05861855,
         -10.75457382, -13.42498779, -10.81375790, -16.44475365, -15.04152584]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.83619690, -16.61016846, -12.28275108, -11.27688122, -11.14465904,
          -11.27646160, -13.88090134, -10.95770168, -16.84897423, -15.54391193],
         [-14.83619690, -16.61016846, -12.28275108, -11.27688122, -11.14465904,
          -11.27646160, -13.88090134, -10.95770168, -16.84897423, -15.54391193]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.13222218, -0.00041962, -0.31917953]]], device='cuda:0')
number of violation:  3
Attack finished in 0.0132 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0780 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 16, vnnlib ID: 16 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.68520546, -29.33057404, -23.34724998, -23.50040627, -23.08244896,
         -23.89678383, -23.22287750, -25.18677521, -28.65573311, -29.02714920]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [857]; unstable size 857; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 401, 1, 857] with unstable size 400 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 857] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 857] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [400]; unstable size 400; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 400] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 400] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.34057271,  3.30707383, -1.46605754, -1.78303576, -0.07614887,
         -1.46367002,  0.02865028,  2.77813053,  3.23617649]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.68520546, -29.33057404, -23.34724998, -23.50040627, -23.08244896,
         -23.89678383, -23.22287750, -25.18677521, -28.65573311, -29.02714920]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.68520737, -29.33057594, -23.34725189, -23.50040627, -23.08245087,
          -23.89678574, -23.22287941, -25.18677711, -28.65573311, -29.02714920],
         [-26.68520737, -29.33057594, -23.34725189, -23.50040627, -23.08245087,
          -23.89678574, -23.22287941, -25.18677711, -28.65573311, -29.02714920]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15315437, -0.41795540,  0.39637947, -0.27752686]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0791 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 17, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.55547142, -21.29835701, -26.80152893, -27.28372574, -26.67305183,
         -28.70449638, -26.93589401, -28.94626617, -24.43898201, -23.37986755]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [525]; unstable size 525; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 254, 1, 525] with unstable size 253 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 525] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 525] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [253]; unstable size 253; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 253] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 253] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.71861172, 3.84952354, 4.56171417, 3.84017420, 5.90634966, 4.26612377,
         6.14898014, 1.99088383, 1.41389060]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0420 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 18, vnnlib ID: 18 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.96761131, -23.51111603, -16.18240738, -18.45089149, -16.26456261,
         -17.94385719, -14.73691177, -18.44084930, -24.07545662, -22.63823509]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [463]; unstable size 463; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 311, 1, 463] with unstable size 310 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 463] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 463] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [310]; unstable size 310; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 310] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 310] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.97309542,  6.70187235, -0.02662706,  2.50170493, -0.07382154,
          1.85107946,  1.77262044,  7.00046825,  5.85668802]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.96761131, -23.51111603, -16.18240738, -18.45089149, -16.26456261,
         -17.94385719, -14.73691177, -18.44084930, -24.07545662, -22.63823509]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.31it/s]100%|██████████| 1/1 [00:00<00:00,  8.31it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.13876343, -24.08310127, -16.37594223, -18.98218155, -16.69490623,
          -18.46617508, -15.56402779, -18.87380600, -24.34334183, -23.19640350],
         [-21.13876343, -24.08310127, -16.37594223, -18.98218155, -16.69490623,
          -18.46617508, -15.56402779, -18.87380600, -24.34334183, -23.19640350]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.81191444, 1.13087845]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1233 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 8th iter
best_l after optimization: 30.210880279541016
alpha/beta optimization time: 0.1169729232788086
initial alpha-crown bounds: tensor([[4.06331778e+00, 6.77928352e+00, 3.31621170e-02, 2.54543519e+00,
         2.59399414e-03, 1.90330637e+00, 1.86108577e+00, 7.08985567e+00,
         5.93283844e+00]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 0 ; Worst class: (+ rhs) 0.002593994140625
verified with init bound!
Result: safe-incomplete in 0.2742 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 19, vnnlib ID: 19 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.95204353, -23.01272583, -16.49953651, -14.64277744, -15.90678215,
         -15.11271095, -15.73008537, -18.56428909, -21.39385223, -22.75593376]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [624]; unstable size 624; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 333, 1, 624] with unstable size 332 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 624] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 624] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [332]; unstable size 332; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 332] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 332] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.85007000,  6.56638002,  0.72854531,  0.16635108,  0.09236518,
         -0.16829324,  2.54186058,  4.97395658,  6.48725319]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.95204353, -23.01272583, -16.49953651, -14.64277744, -15.90678215,
         -15.11271095, -15.73008537, -18.56428909, -21.39385223, -22.75593376]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.67it/s]100%|██████████| 1/1 [00:00<00:00,  8.66it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.02144432, -22.99676323, -16.43036079, -14.81798553, -15.77610588,
          -15.32225418, -15.29498672, -18.67889786, -21.40403748, -22.81297874]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.47700119]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1181 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 25.7570858001709
alpha/beta optimization time: 1.2444000244140625
initial alpha-crown bounds: tensor([[ 3.92190409,  6.63770294,  0.78050494,  0.20929813,  0.10922220,
         -0.07384872,  2.59734631,  5.03754282,  6.53741217]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.07384872436523438
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.57110786437988
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.57106709480286
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.57103991508484
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.57101845741272
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.5709993839264
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.5709798336029
Verifying property 5 with 1 instances.
##### Instance 19 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.07384872]], device='cuda:0') need to verify.
Model prediction is: tensor([-19.95204353, -23.01272583, -16.49953651, -14.64277744, -15.90678215,
        -15.11271095, -15.73008537, -18.56428909, -21.39385223, -22.75593376],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.07384872]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 624
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 330
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 975
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010728836059570312
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07384920120239258
10 lb beta sum: 0.0, worst -0.0738525390625
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0536    transfer 0.0001    finalize 0.0001    func 0.0540    
Accumulated time: func 0.0540    prepare 0.0002    bound 0.0536    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 0] 
split level 1: [/input-12, 64] 
split level 2: [/input-12, 83] 
split level 3: [/input-12, 78] 
split level 4: [/input-12, 85] 
split level 5: [/input-12, 61] 
split level 6: [/input-8, 220] 
split level 7: [/input-8, 227] 
split level 8: [/input-12, 72] 
split level 9: [/input-8, 219] 
split level 10: [/input-8, 1947] 
split level 11: [/input-8, 229] 
split level 12: [/input-8, 221] 
split level 13: [/input-8, 612] 
split level 14: [/input-12, 43] 
split level 15: [/input-8, 1948] 
split level 16: [/input-8, 214] 
split level 17: [/input-8, 1697] 
split level 18: [/input-8, 206] 
split level 19: [/input-8, 1372] 
split level 20: [/input-8, 578] 
split level 21: [/input-8, 605] 
split level 22: [/input, 3153] 
split level 23: [/input-8, 238] 
split level 24: [/input-8, 1380] 
split level 25: [/input-8, 1954] 
split level 26: [/input-8, 1381] 
split level 27: [/input-8, 245] 
split level 28: [/input-8, 593] 
split level 29: [/input-8, 946] 
split level 30: [/input-8, 213] 
split level 31: [/input-8, 1709] 
split level 32: [/input-8, 239] 
split level 33: [/input-8, 577] 
split level 34: [/input-8, 218] 
split level 35: [/input-8, 235] 
split level 36: [/input-8, 223] 
split level 37: [/input, 2657] 
split level 38: [/input-8, 211] 
split level 39: [/input-8, 222] 
split level 40: [/input, 1403] 
split level 41: [/input, 3475] 
split level 42: [/input-8, 1373] 
split level 43: [/input-8, 1379] 
split level 44: [/input-8, 1374] 
split level 45: [/input-8, 1710] 
split level 46: [/input, 3427] 
split level 47: [/input-8, 224] 
split level 48: [/input, 929] 
split level 49: [/input-8, 254] 
split level 50: [/input, 710] 
split level 51: [/input, 922] 
split level 52: [/input, 3139] 
split level 53: [/input, 3235] 
split level 54: [/input, 900] 
split level 55: [/input, 1002] 
split level 56: [/input-8, 203] 
split level 57: [/input, 3138] 
split level 58: [/input-8, 1763] 
split level 59: [/input, 3973] 
split level 60: [/input, 2441] 
split level 61: [/input, 2993] 
split level 62: [/input-8, 240] 
split level 63: [/input, 1351] 
split level 64: [/input-8, 231] 
split level 65: [/input-8, 345] 
split level 66: [/input-8, 988] 
split level 67: [/input, 2423] 
split level 68: [/input-8, 1931] 
split level 69: [/input-8, 196] 
split level 70: [/input-8, 1169] 
split level 71: [/input-8, 1774] 
split level 72: [/input-8, 242] 
split level 73: [/input, 2679] 
split level 74: [/input-8, 204] 
split level 75: [/input-8, 1365] 
split level 76: [/input, 1400] 
split level 77: [/input-8, 2005] 
split level 78: [/input-8, 1946] 
split level 79: [/input, 2673] 
split level 80: [/input, 3219] 
split level 81: [/input, 930] 
split level 82: [/input-8, 241] 
split level 83: [/input, 193] 
split level 84: [/input, 1385] 
split level 85: [/input, 2184] 
split level 86: [/input, 2263] 
split level 87: [/input, 2721] 
split level 88: [/input, 2977] 
split level 89: [/input, 172] 
split level 90: [/input, 2994] 
split level 91: [/input-8, 247] 
split level 92: [/input, 2165] 
split level 93: [/input, 1640] 
split level 94: [/input, 2197] 
split level 95: [/input-8, 197] 
split level 96: [/input-8, 1366] 
split level 97: [/input, 3429] 
split level 98: [/input-8, 255] 
split level 99: [/input-8, 1981] 
split level 100: [/input, 2708] 
split level 101: [/input-8, 1382] 
split level 102: [/input, 2470] 
split level 103: [/input, 120] 
split level 104: [/input, 2425] 
split level 105: [/input-8, 1994] 
split level 106: [/input-8, 201] 
split level 107: [/input-8, 1305] 
split level 108: [/input, 1356] 
split level 109: [/input, 156] 
split level 110: [/input, 401] 
split level 111: [/input, 2697] 
split level 112: [/input, 984] 
split level 113: [/input, 990] 
split level 114: [/input, 985] 
split level 115: [/input, 836] 
split level 116: [/input-8, 1737] 
split level 117: [/input-8, 934] 
split level 118: [/input, 2504] 
split level 119: [/input, 2540] 
split level 120: [/input, 2166] 
split level 121: [/input, 2279] 
split level 122: [/input, 155] 
split level 123: [/input, 2476] 
split level 124: [/input, 2473] 
split level 125: [/input, 3444] 
split level 126: [/input, 2698] 
split level 127: [/input, 149] 
split level 128: [/input, 3530] 
split level 129: [/input, 2426] 
split level 130: [/input, 2274] 
split level 131: [/input, 121] 
split level 132: [/input, 1006] 
split level 133: [/input-8, 1758] 
split level 134: [/input, 163] 
split level 135: [/input, 742] 
split level 136: [/input, 994] 
split level 137: [/input, 2971] 
split level 138: [/input, 177] 
split level 139: [/input, 2716] 
split level 140: [/input, 2979] 
split level 141: [/input-8, 1733] 
split level 142: [/input, 419] 
split level 143: [/input-8, 1244] 
split level 144: [/input, 932] 
split level 145: [/input, 2179] 
split level 146: [/input, 171] 
split level 147: [/input-8, 216] 
split level 148: [/input, 2537] 
split level 149: [/input, 2121] 
split level 150: [/input, 3140] 
split level 151: [/input, 2724] 
split level 152: [/input-8, 1746] 
split level 153: [/input, 91] 
split level 154: [/input-8, 1999] 
split level 155: [/input-8, 843] 
split level 156: [/input, 1863] 
split level 157: [/input, 3411] 
split level 158: [/input, 1494] 
split level 159: [/input, 129] 
split level 160: [/input, 2465] 
split level 161: [/input, 2467] 
split level 162: [/input, 3173] 
split level 163: [/input, 2661] 
split level 164: [/input, 2190] 
split level 165: [/input, 157] 
split level 166: [/input, 3497] 
split level 167: [/input-8, 1389] 
split level 168: [/input, 147] 
split level 169: [/input-8, 1226] 
split level 170: [/input, 180] 
split level 171: [/input, 3390] 
split level 172: [/input, 2460] 
split level 173: [/input, 3227] 
split level 174: [/input, 2103] 
split level 175: [/input, 2395] 
split level 176: [/input, 60] 
split level 177: [/input, 2360] 
split level 178: [/input, 1617] 
split level 179: [/input, 597] 
split level 180: [/input, 2257] 
split level 181: [/input, 2156] 
split level 182: [/input, 2844] 
split level 183: [/input, 137] 
split level 184: [/input, 2409] 
split level 185: [/input, 1469] 
split level 186: [/input, 1454] 
split level 187: [/input, 2148] 
split level 188: [/input, 2690] 
split level 189: [/input, 59] 
split level 190: [/input, 2119] 
split level 191: [/input, 2088] 
split level 192: [/input, 54] 
split level 193: [/input, 2406] 
split level 194: [/input, 2089] 
split level 195: [/input-8, 1752] 
split level 196: [/input, 1022] 
split level 197: [/input, 820] 
split level 198: [/input, 2498] 
split level 199: [/input, 2542] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07372879981994629
10 lb beta sum: 0.0, worst -0.07373356819152832
Time: prepare 0.0113    bound 0.0999    transfer 0.0008    finalize 0.0027    func 0.1174    
Accumulated time: func 0.1715    prepare 0.0219    bound 0.1535    transfer 0.0009    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.28509283) min lb tensor(-0.07372880)
Number of Verified Splits: 8 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010782718658447266 
BICCOS Cumulative time: 0.010782718658447266
Preprocessing time: 0.00983738899230957 Inference time: 0.0003299713134765625 Add cuts time: 0.0001239776611328125 Cut analysis time: 0.0004913806915283203
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5268    set_bounds 0.0092    solve 0.1175    add 0.0097    
Accumulated time: pickout 0.0003    decision 0.5268    set_bounds 0.0092    solve 0.1175    add 0.0097    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([0]), tensor([-1.]), tensor([0]), tensor([2.59552102e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([0]), tensor([1.]), tensor([0]), tensor([2.59552102e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026604890823364258

all verified at 1th iter
Time: prepare 0.0003    bound 0.0159    transfer 0.0001    finalize 0.0001    func 0.0165    
Accumulated time: func 0.1880    prepare 0.0222    bound 0.1694    transfer 0.0011    finalize 0.0030    
After pruning, left:  0

Back to Regular BaB


Properties batch 6, size 1
Remaining timeout: 197.5555398464203
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.5554769039154
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.55545496940613
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4446 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 20, vnnlib ID: 20 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.15224266, -25.34284210, -20.68698883, -21.11905098, -21.28755379,
         -21.18818092, -18.96833420, -23.86169434, -24.43035507, -25.58597183]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [838]; unstable size 838; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 334, 1, 838] with unstable size 333 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 838] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 838] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [333]; unstable size 333; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 333] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 333] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.44667196, 4.02514362, 0.65229511, 0.96642137, 0.94116783, 0.84790790,
         2.93652272, 3.08846760, 4.46393108]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0693 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 21, vnnlib ID: 21 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.31029320, -25.64724922, -21.19924164, -21.00788879, -21.44479942,
         -20.21812248, -22.40578079, -20.59401131, -24.67918396, -24.01255989]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [523]; unstable size 523; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 523] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 523] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 523] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 180] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.59975958,  3.72134495, -0.09878159,  0.47413665,  0.20959377,
          1.12203455, -0.49487063,  3.08997488,  2.65038443]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.31029320, -25.64724922, -21.19924164, -21.00788879, -21.44479942,
         -20.21812248, -22.40578079, -20.59401131, -24.67918396, -24.01255989]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.13118744, -26.43610382, -22.10371780, -21.97385406, -22.15757751,
          -21.20539856, -23.31969070, -21.12502861, -25.59633255, -24.98401833],
         [-26.13118744, -26.43610382, -22.10371780, -21.97385406, -22.15757751,
          -21.20539856, -23.31969070, -21.12502861, -25.59633255, -24.98401833]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.89831924, -0.08036995]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0061 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0577 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 22, vnnlib ID: 22 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.87531281, -15.75632095, -14.57347012, -15.76169777, -14.07984734,
         -16.31337166, -16.52824211, -16.65783691,  -8.99959373, -15.31440544]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [604]; unstable size 604; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 244, 1, 604] with unstable size 243 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 604] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 604] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [243]; unstable size 243; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 243] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 243] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.74084175, 5.52800369, 4.11085033, 5.41803789, 3.71402359, 5.74122143,
         6.21470261, 6.00886154, 4.98770428]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0719 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 23, vnnlib ID: 23 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.64936256, -23.01173401, -19.97909546, -17.49272156, -20.01158905,
         -17.02442741, -21.03547668, -19.50024414, -20.38127136, -20.46527672]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [447]; unstable size 447; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 447] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 447] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 447] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 188] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.30454564, 4.15309906, 1.79540026, 0.15248433, 1.72279477, 3.02521491,
         1.09999502, 1.62638271, 1.86410761]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0663 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 24, vnnlib ID: 24 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.53723717, -20.17998314, -24.00674057, -26.48255730, -24.71885872,
         -27.20367241, -25.54711533, -26.09858704, -22.80258942, -21.74352837]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1052]; unstable size 1052; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 366, 1, 1052] with unstable size 365 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 1052] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1052] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [365]; unstable size 365; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 365] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 365] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.67349195,  0.95226860,  3.60676527,  1.65505981,  4.16815948,
          2.46865177,  3.16671228,  0.41265249,  0.44317579]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.53723717, -20.17998314, -24.00674057, -26.48255730, -24.71885872,
         -27.20367241, -25.54711533, -26.09858704, -22.80258942, -21.74352837]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.50it/s]100%|██████████| 1/1 [00:00<00:00,  7.50it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.87743950, -19.35758781, -22.15427971, -24.89256096, -22.97465324,
          -25.62451553, -23.85381317, -24.51388931, -21.46959877, -20.74610329]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.51985168]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1364 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 17.485837936401367
alpha/beta optimization time: 1.2844445705413818
initial alpha-crown bounds: tensor([[-0.55390978,  1.12264156,  3.76586723,  1.80786324,  4.34684420,
          2.61715698,  3.32345533,  0.54351759,  0.51240146]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.5539097785949707
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.51159620285034
Verifying property 0 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.55390978]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.53723717, -20.17998314, -24.00674057, -26.48255730, -24.71885872,
        -27.20367241, -25.54711533, -26.09858704, -22.80258942, -21.74352837],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.55390978]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1052
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 355
Node /15 input 0: size torch.Size([100]) unstable 29
-----------------
# of unstable neurons: 1436
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010800361633300781
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5539073944091797
10 lb beta sum: 0.0, worst -0.553919792175293
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0542    transfer 0.0001    finalize 0.0001    func 0.0547    
Accumulated time: func 0.0547    prepare 0.0002    bound 0.0542    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 69] 
split level 3: [/input-12, 38] 
split level 4: [/input-12, 46] 
split level 5: [/input-12, 8] 
split level 6: [/input-12, 53] 
split level 7: [/input-12, 67] 
split level 8: [/input-12, 2] 
split level 9: [/input-12, 89] 
split level 10: [/input-12, 64] 
split level 11: [/input-12, 24] 
split level 12: [/input-12, 14] 
split level 13: [/input-12, 42] 
split level 14: [/input-8, 1957] 
split level 15: [/input-8, 157] 
split level 16: [/input-8, 1964] 
split level 17: [/input-12, 71] 
split level 18: [/input-12, 90] 
split level 19: [/input-12, 57] 
split level 20: [/input-8, 421] 
split level 21: [/input-8, 749] 
split level 22: [/input-8, 914] 
split level 23: [/input-8, 1627] 
split level 24: [/input-8, 1965] 
split level 25: [/input-8, 1691] 
split level 26: [/input-8, 1386] 
split level 27: [/input-8, 414] 
split level 28: [/input-8, 150] 
split level 29: [/input-8, 371] 
split level 30: [/input-8, 1951] 
split level 31: [/input-8, 1710] 
split level 32: [/input-8, 1635] 
split level 33: [/input-8, 605] 
split level 34: [/input-8, 604] 
split level 35: [/input-8, 433] 
split level 36: [/input-8, 1689] 
split level 37: [/input-8, 1392] 
split level 38: [/input-8, 416] 
split level 39: [/input-8, 1688] 
split level 40: [/input-12, 13] 
split level 41: [/input-8, 1394] 
split level 42: [/input-8, 1675] 
split level 43: [/input-8, 1658] 
split level 44: [/input-8, 1657] 
split level 45: [/input-8, 1650] 
split level 46: [/input-8, 411] 
split level 47: [/input-8, 1483] 
split level 48: [/input-8, 1577] 
split level 49: [/input-8, 1393] 
split level 50: [/input-8, 1194] 
split level 51: [/input-8, 1179] 
split level 52: [/input-8, 748] 
split level 53: [/input-8, 1385] 
split level 54: [/input-8, 1619] 
split level 55: [/input-8, 821] 
split level 56: [/input-8, 1397] 
split level 57: [/input, 3546] 
split level 58: [/input, 1678] 
split level 59: [/input-8, 1620] 
split level 60: [/input-8, 1649] 
split level 61: [/input, 3547] 
split level 62: [/input, 2186] 
split level 63: [/input, 3545] 
split level 64: [/input-8, 406] 
split level 65: [/input-8, 958] 
split level 66: [/input-8, 1715] 
split level 67: [/input-8, 843] 
split level 68: [/input, 3450] 
split level 69: [/input-8, 1396] 
split level 70: [/input-8, 1395] 
split level 71: [/input-8, 293] 
split level 72: [/input-8, 1754] 
split level 73: [/input-8, 1067] 
split level 74: [/input-8, 1702] 
split level 75: [/input, 3537] 
split level 76: [/input, 131] 
split level 77: [/input-8, 307] 
split level 78: [/input-8, 1317] 
split level 79: [/input-8, 403] 
split level 80: [/input-8, 1230] 
split level 81: [/input-8, 1484] 
split level 82: [/input, 2714] 
split level 83: [/input-8, 820] 
split level 84: [/input, 3770] 
split level 85: [/input-8, 1399] 
split level 86: [/input-8, 889] 
split level 87: [/input-8, 1226] 
split level 88: [/input, 999] 
split level 89: [/input-8, 245] 
split level 90: [/input-8, 145] 
split level 91: [/input, 3525] 
split level 92: [/input-8, 242] 
split level 93: [/input-8, 1598] 
split level 94: [/input, 2283] 
split level 95: [/input-8, 1388] 
split level 96: [/input, 985] 
split level 97: [/input-8, 1593] 
split level 98: [/input, 1000] 
split level 99: [/input-8, 890] 
split level 100: [/input, 982] 
split level 101: [/input, 3542] 
split level 102: [/input-8, 497] 
split level 103: [/input, 962] 
split level 104: [/input-8, 1610] 
split level 105: [/input, 978] 
split level 106: [/input, 3526] 
split level 107: [/input-8, 308] 
split level 108: [/input-8, 373] 
split level 109: [/input-8, 826] 
split level 110: [/input, 1413] 
split level 111: [/input, 713] 
split level 112: [/input, 998] 
split level 113: [/input, 712] 
split level 114: [/input-8, 284] 
split level 115: [/input, 694] 
split level 116: [/input-8, 402] 
split level 117: [/input, 983] 
split level 118: [/input, 1003] 
split level 119: [/input-8, 891] 
split level 120: [/input, 2785] 
split level 121: [/input, 997] 
split level 122: [/input, 1001] 
split level 123: [/input, 715] 
split level 124: [/input, 2770] 
split level 125: [/input-8, 292] 
split level 126: [/input-8, 241] 
split level 127: [/input, 2539] 
split level 128: [/input, 2945] 
split level 129: [/input-8, 1318] 
split level 130: [/input-8, 306] 
split level 131: [/input, 1012] 
split level 132: [/input, 1020] 
split level 133: [/input-8, 825] 
split level 134: [/input, 977] 
split level 135: [/input, 2786] 
split level 136: [/input, 907] 
split level 137: [/input-8, 1323] 
split level 138: [/input-8, 244] 
split level 139: [/input, 2769] 
split level 140: [/input, 1011] 
split level 141: [/input-8, 1594] 
split level 142: [/input-8, 1398] 
split level 143: [/input, 2266] 
split level 144: [/input-8, 827] 
split level 145: [/input-8, 1609] 
split level 146: [/input, 2407] 
split level 147: [/input, 1006] 
split level 148: [/input, 3528] 
split level 149: [/input, 961] 
split level 150: [/input, 1896] 
split level 151: [/input, 2555] 
split level 152: [/input-8, 246] 
split level 153: [/input, 2716] 
split level 154: [/input, 714] 
split level 155: [/input, 3508] 
split level 156: [/input-8, 250] 
split level 157: [/input, 2537] 
split level 158: [/input-8, 254] 
split level 159: [/input-8, 1376] 
split level 160: [/input-8, 255] 
split level 161: [/input, 2267] 
split level 162: [/input-8, 819] 
split level 163: [/input, 2279] 
split level 164: [/input-8, 840] 
split level 165: [/input, 2284] 
split level 166: [/input, 2282] 
split level 167: [/input, 2753] 
split level 168: [/input-8, 393] 
split level 169: [/input, 2538] 
split level 170: [/input, 675] 
split level 171: [/input-8, 253] 
split level 172: [/input, 1013] 
split level 173: [/input, 1019] 
split level 174: [/input-8, 243] 
split level 175: [/input-8, 842] 
split level 176: [/input-8, 1175] 
split level 177: [/input-8, 2033] 
split level 178: [/input, 2265] 
split level 179: [/input, 2549] 
split level 180: [/input, 2285] 
split level 181: [/input-8, 833] 
split level 182: [/input-8, 203] 
split level 183: [/input, 2550] 
split level 184: [/input-12, 36] 
split level 185: [/input, 2536] 
split level 186: [/input, 2535] 
split level 187: [/input, 2903] 
split level 188: [/input, 2551] 
split level 189: [/input, 1912] 
split level 190: [/input, 2552] 
split level 191: [/input, 2787] 
split level 192: [/input, 2280] 
split level 193: [/input, 2261] 
split level 194: [/input, 2557] 
split level 195: [/input, 2553] 
split level 196: [/input, 2541] 
split level 197: [/input, 2548] 
split level 198: [/input, 2547] 
split level 199: [/input, 2281] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5538902282714844
10 lb beta sum: 0.0, worst -0.553886890411377
Time: prepare 0.0117    bound 0.1016    transfer 0.0012    finalize 0.0031    func 0.1204    
Accumulated time: func 0.1751    prepare 0.0220    bound 0.1558    transfer 0.0013    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.25172234) min lb tensor(-0.55387926)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010322093963623047 
BICCOS Cumulative time: 0.010322093963623047
Preprocessing time: 0.009941577911376953 Inference time: 0.00011873245239257812 Add cuts time: 4.744529724121094e-05 Cut analysis time: 0.0002143383026123047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.53513 (1), -0.53304 (1), -0.53184 (1), -0.53179 (1), -0.53135 (1), -0.53029 (1), -0.52977 (1), -0.52829 (1), -0.52829 (1), -0.52762 (1), -0.52753 (1), -0.52681 (1), -0.52651 (1), -0.52603 (1), -0.52467 (1), -0.52371 (1), -0.52368 (1), -0.52164 (1), -0.52129 (1), -0.52091 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5247    set_bounds 0.0119    solve 0.1205    add 0.1433    
Accumulated time: pickout 0.0003    decision 0.5247    set_bounds 0.0119    solve 0.1205    add 0.1433    
Current (lb-rhs): -0.5351314544677734
50 domains visited
Cumulative time: 0.8916480541229248

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 61] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 61] [/input-12, 31] [/input-12, 61] 
split level 1: [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 31] [/input-12, 69] [/input-12, 31] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 69] 
split level 3: [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.49222373962402344
10 lb beta sum: 0.41372716426849365, worst -0.4795812666416168
Time: prepare 0.0072    bound 0.1442    transfer 0.0014    finalize 0.0030    func 0.1584    
Accumulated time: func 0.3334    prepare 0.0297    bound 0.3000    transfer 0.0026    finalize 0.0063    
all_split False
======================Cut inference begins======================
max lb tensor(0.31830209) min lb tensor(-0.47951132)
Number of Verified Splits: 80 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.018560171127319336 
BICCOS Cumulative time: 0.028882265090942383
Preprocessing time: 0.012676000595092773 Inference time: 0.003761768341064453 Add cuts time: 0.001627206802368164 Cut analysis time: 0.0004951953887939453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24998 (2), -0.24938 (2), -0.24670 (2), -0.24512 (2), -0.24502 (2), -0.24322 (2), -0.24095 (2), -0.23993 (2), -0.23682 (2), -0.23601 (2), -0.23483 (2), -0.23272 (2), -0.23188 (2), -0.23043 (2), -0.22852 (2), -0.22772 (2), -0.22688 (2), -0.22620 (2), -0.22558 (2), -0.22239 (2), 
Length of domains: 50
Time: pickout 0.0022    decision 0.0243    set_bounds 0.0156    solve 0.1585    add 0.1325    
Accumulated time: pickout 0.0026    decision 0.5489    set_bounds 0.0275    solve 0.2790    add 0.2758    
Current (lb-rhs): -0.2499758005142212
100 domains visited
Cumulative time: 1.2438979148864746

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 2: [/input-12, 69] [/input-12, 46] [/input-12, 69] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 38] [/input-12, 38] [/input-12, 69] 
split level 3: [/input-12, 67] [/input-12, 67] [/input-12, 46] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.25121212005615234
10 lb beta sum: 1.2178547382354736, worst -0.15147286653518677
Time: prepare 0.0064    bound 0.1355    transfer 0.0013    finalize 0.0028    func 0.1506    
Accumulated time: func 0.4841    prepare 0.0364    bound 0.4355    transfer 0.0040    finalize 0.0091    
all_split False
======================Cut inference begins======================
max lb tensor(0.67256188) min lb tensor(-0.14962983)
Number of Verified Splits: 286 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.037383079528808594 
BICCOS Cumulative time: 0.06626534461975098
Preprocessing time: 0.0170133113861084 Inference time: 0.014006614685058594 Add cuts time: 0.005834341049194336 Cut analysis time: 0.0005288124084472656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14963 (3), -0.14961 (3), -0.09265 (3), -0.05456 (3), -0.05450 (3), -0.05446 (3), -0.05425 (3), -0.05423 (3), -0.05409 (3), -0.04081 (3), -0.00303 (3), -0.00267 (3), 
Length of domains: 12
Time: pickout 0.0017    decision 0.0227    set_bounds 0.0160    solve 0.1508    add 0.1235    
Accumulated time: pickout 0.0042    decision 0.5716    set_bounds 0.0434    solve 0.4298    add 0.3993    
Current (lb-rhs): -0.14962983131408691
112 domains visited
Cumulative time: 1.5962014198303223

Shallow-BaB round 4
batch: 12
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 31] [/input-12, 61] [/input-12, 61] [/input-12, 31] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 38] [/input-12, 38] [/input-12, 31] [/input-12, 38] [/input-12, 38] [/input-12, 31] 
split level 2: [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 38] 
split level 3: [/input-12, 89] [/input-12, 89] [/input-12, 2] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 46] 
split level 4: [/input-12, 2] [/input-12, 2] [/input-12, 67] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 53] 
split level 5: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 2] 
split level 6: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 8] 
split level 7: [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 64] 
split level 8: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 14] 
split level 9: [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-12, 42] 
split level 10: [/input-12, 90] [/input-12, 90] [/input-12, 71] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-8, 1964] 
split level 11: [/input-12, 71] [/input-12, 71] [/input-12, 90] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] 
split level 12: [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 90] 
split level 13: [/input-8, 914] [/input-8, 914] [/input-8, 1951] [/input-8, 914] [/input-8, 914] [/input-8, 914] [/input-8, 914] [/input-8, 914] [/input-8, 914] [/input-12, 57] 
split level 14: [/input-8, 1951] [/input-8, 1951] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1951] 
split level 15: [/input-8, 1710] [/input-8, 1710] [/input-8, 1689] [/input-8, 1951] [/input-8, 1951] [/input-8, 1951] [/input-8, 1951] [/input-8, 1951] [/input-8, 1951] [/input-8, 1710] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22480392456054688
10 lb beta sum: 1.8370301723480225, worst -0.04542821645736694
Time: prepare 0.0061    bound 0.1529    transfer 0.0066    finalize 0.0033    func 0.1714    
Accumulated time: func 0.6555    prepare 0.0434    bound 0.5884    transfer 0.0105    finalize 0.0125    
all_split False
======================Cut inference begins======================
max lb tensor(0.65292907) min lb tensor(-0.04146987)
Number of Verified Splits: 350 of 384
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 17
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.3027200698852539 
BICCOS Cumulative time: 0.3689854145050049
Preprocessing time: 0.010871410369873047 Inference time: 0.28522300720214844 Add cuts time: 0.005696296691894531 Cut analysis time: 0.0009293556213378906
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0014    decision 0.0590    set_bounds 0.0138    solve 0.1715    add 0.0257    
Accumulated time: pickout 0.0056    decision 0.6306    set_bounds 0.0572    solve 0.6013    add 0.4250    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
112 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 2.28399441e-01, 4.01762426e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61, 31]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 2.28399441e-01, 1.50063261e-01, 7.92771429e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61, 31]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 2.28399441e-01, 1.50063261e-01, 9.30015892e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46]), tensor([-1.,  1.]), tensor([0, 0]), tensor([5.75662906e-20, 1.51293084e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 2.31368110e-01, 4.39490378e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 2.31368110e-01, 1.45007804e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 1.50102720e-01, 4.59823608e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 1.50102720e-01, 1.44909009e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.31609058380126953
10 lb beta sum: 1.1069293022155762, worst -0.08423840999603271
Time: prepare 0.0008    bound 0.1550    transfer 0.0002    finalize 0.0002    func 0.1563    
Accumulated time: func 0.8118    prepare 0.0441    bound 0.7434    transfer 0.0107    finalize 0.0127    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 38] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 67] 
split level 5: [/input-12, 89] 
split level 6: [/input-12, 71] 
split level 7: [/input-12, 90] 
cut re-enabled after branching node selection
0 lb beta sum: 2.9545745849609375, worst 0.02366018295288086

all verified at 0th iter
Time: prepare 0.0102    bound 0.0057    transfer 0.0038    finalize 0.0019    func 0.0234    
Accumulated time: func 0.8352    prepare 0.0548    bound 0.7491    transfer 0.0145    finalize 0.0146    
all_split False
======================Cut inference begins======================
max lb tensor(2.00362968) min lb tensor(0.02366018)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 26.
#cuts 1-3: 17
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.006464481353759766 
BICCOS Cumulative time: 0.37544989585876465
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0005    decision 0.0248    set_bounds 0.0206    solve 0.0234    add 0.0002    
Accumulated time: pickout 0.0061    decision 0.6554    set_bounds 0.0778    solve 0.6247    add 0.4252    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
112 domains visited
Cumulative time: 2.4672975540161133


Properties batch 1, size 1
Remaining timeout: 195.78649973869324
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 195.78641390800476
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 195.78638792037964
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 195.78636622428894
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 195.78598952293396
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 195.78595089912415
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 195.7859284877777
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 195.78590726852417
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 4.2141 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 25, vnnlib ID: 25 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.01604462, -16.60401917, -13.75974274, -13.62233925, -13.08835316,
         -14.19851303, -12.87796688, -14.01632118, -16.99109268, -15.74184418]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 311, 1, 659] with unstable size 310 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 659] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [310]; unstable size 310; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 310] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 310] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.06798172, -2.58394957, -2.91112757, -3.35464382, -2.51877713,
         -3.61694932, -2.86971092,  0.43352544, -1.25155258]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.01604462, -16.60401917, -13.75974274, -13.62233925, -13.08835316,
         -14.19851303, -12.87796688, -14.01632118, -16.99109268, -15.74184418]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.01604366, -16.60401917, -13.75974369, -13.62234020, -13.08835220,
          -14.19851398, -12.87796688, -14.01632118, -16.99109459, -15.74184608],
         [-15.01604366, -16.60401917, -13.75974369, -13.62234020, -13.08835220,
          -14.19851398, -12.87796688, -14.01632118, -16.99109459, -15.74184608]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.58797550, -1.25629997, -1.39370346, -1.92769146, -0.81752968,
          -2.13807678, -0.99972248,  0.72580242]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         ...,


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0704 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 26, vnnlib ID: 26 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.90988064, -12.45664406, -15.21899319, -13.88694572, -14.48770905,
         -14.28946209, -14.69633865, -13.84464264, -14.34021282, -11.62079906]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [500]; unstable size 500; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 173, 1, 500] with unstable size 172 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 500] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 500] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [172]; unstable size 172; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 172] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.81550598, 0.12776923, 1.67829561, 0.58634591, 0.90821362, 0.83706665,
         1.15809035, 0.31059182, 1.68028712]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0423 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 27, vnnlib ID: 27 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.65237999, -26.28784180, -22.21496773, -22.94103813, -19.88295174,
         -23.10355949, -23.92632675, -16.94944000, -25.83104324, -24.10295296]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [632]; unstable size 632; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 242, 1, 632] with unstable size 241 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 632] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 632] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [241]; unstable size 241; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 241] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 241] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.00603724, 7.31206322, 3.91715956, 4.58261108, 2.16801405, 4.73693991,
         5.37613678, 6.48344851, 5.24407530]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0692 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 28, vnnlib ID: 28 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.01066399, -28.57836723, -25.32221985, -26.57108498, -26.69775391,
         -27.17006111, -27.16849136, -29.60597229, -25.49334908, -28.60743141]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [602]; unstable size 602; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 134, 1, 602] with unstable size 133 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 602] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 602] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [133]; unstable size 133; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 133] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 133] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.69067621, 1.75672936, 2.90525079, 3.03809547, 3.37360620, 3.51928520,
         5.64078951, 1.68218994, 4.79778767]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0674 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 29, vnnlib ID: 29 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.58022118, -31.81094170, -26.44467354, -24.52676773, -24.55172729,
         -24.79080772, -24.80268097, -25.39589882, -30.52891159, -30.66180420]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [824]; unstable size 824; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 824] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 824] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 824] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 256] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.94624901,  4.85114574, -0.16955948, -1.79679918, -1.73069429,
         -1.51086354, -1.98932123,  3.64661908,  4.09455395]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-29.58022118, -31.81094170, -26.44467354, -24.52676773, -24.55172729,
         -24.79080772, -24.80268097, -25.39589882, -30.52891159, -30.66180420]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.58021927, -31.81093979, -26.44467163, -24.52676773, -24.55172729,
          -24.79080582, -24.80267715, -25.39589882, -30.52891159, -30.66180420],
         [-29.58021927, -31.81093979, -26.44467163, -24.52676773, -24.55172729,
          -24.79080582, -24.80267715, -25.39589882, -30.52891159, -30.66180420]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.04877281, -0.86913109, -0.84417152, -0.60509300, -0.59322166]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0934 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 30, vnnlib ID: 30 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-31.97128105, -37.96307373, -34.52404785, -37.46557999, -35.63014603,
         -38.36451340, -36.77544022, -40.04882431, -35.94057846, -38.51336288]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [763]; unstable size 763; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 176, 1, 763] with unstable size 175 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 763] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 763] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [175]; unstable size 175; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 175] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 175] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.93386269, 1.84800148, 4.37804604, 2.56460905, 5.05402184, 3.82877207,
         6.62601900, 3.10796714, 5.56228828]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0740 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 31, vnnlib ID: 31 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.48475838, -29.65727234, -23.60843277, -25.59186363, -21.86170197,
         -25.18845367, -25.36190605, -23.12098694, -27.66559601, -28.33211899]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [618]; unstable size 618; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 618] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 618] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 618] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 272] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.15050697, 5.57539082, 0.71036434, 2.73630524, 2.29937840, 2.30952454,
         0.40072036, 4.11238194, 4.36770535]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0651 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 32, vnnlib ID: 32 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.43476677, -21.89505386, -17.38277435, -18.91377258, -16.89746284,
         -19.49347115, -18.77677345, -17.15766907, -19.06263733, -20.67627907]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1008]; unstable size 1008; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 331, 1, 1008] with unstable size 330 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 32, 1, 1008] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1008] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [330]; unstable size 330; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 32, 1, 330] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 330] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [31]; unstable size 31; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.17812443,  2.10233808, -1.56133389, -0.11888361, -1.70705867,
          0.52253628, -0.66222930, -0.72439504,  1.23998928]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.43476677, -21.89505386, -17.38277435, -18.91377258, -16.89746284,
         -19.49347115, -18.77677345, -17.15766907, -19.06263733, -20.67627907]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.43476868, -21.89505196, -17.38277435, -18.91377449, -16.89746284,
          -19.49347115, -18.77677155, -17.15766907, -19.06263924, -20.67627907],
         [-19.43476868, -21.89505196, -17.38277435, -18.91377449, -16.89746284,
          -19.49347115, -18.77677155, -17.15766907, -19.06263924, -20.67627907]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.22510529,  1.75610542, -0.26020622,  1.61910248,  1.90497017]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0985 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 33, vnnlib ID: 33 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.35557175, -32.47544098, -30.43883324, -33.30394363, -32.17427444,
         -34.25338364, -33.63493729, -35.26922607, -29.93074799, -32.68428421]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [840]; unstable size 840; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 174, 1, 840] with unstable size 173 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 840] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 840] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [173]; unstable size 173; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 173] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 173] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.16921902, 2.31352901, 4.99022341, 3.81911182, 5.78720474, 5.29893875,
         6.80568743, 1.75992775, 4.51705360]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0708 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 34, vnnlib ID: 34 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.44459343, -15.51812744, -11.64377499, -10.47452068, -10.72119522,
         -11.05707169, -11.06166363, -11.43825245, -16.58495712, -14.37756157]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [649]; unstable size 649; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 316, 1, 649] with unstable size 315 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 649] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 649] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [315]; unstable size 315; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 315] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 315] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.31691790,  2.24976492,  0.04557943, -0.85450912,  0.30286217,
         -0.63437927, -0.21570829,  3.64171362,  1.40587473]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.44459343, -15.51812744, -11.64377499, -10.47452068, -10.72119522,
         -11.05707169, -11.06166363, -11.43825245, -16.58495712, -14.37756157]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.56100559, -15.55041409, -11.83961582, -10.86203289, -10.65551853,
          -11.47358513, -11.20098400, -11.55763531, -16.66084862, -14.52304459],
         [-15.56100559, -15.55041409, -11.83961582, -10.86203289, -10.65551853,
          -11.47358513, -11.20098400, -11.55763531, -16.66084862, -14.52304459]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20651436,  0.33895111,  0.69560242]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0067 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0853 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 35, vnnlib ID: 35 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.64219093, -17.43132782, -12.73828030, -10.98612118, -13.95148468,
         -12.17405128, -10.92382336, -13.20341492, -16.59213638, -15.28749561]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [539]; unstable size 539; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 283, 1, 539] with unstable size 282 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 539] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 539] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [282]; unstable size 282; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 282] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 282] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.73897886,  3.94992757,  0.45281982,  1.56286335,  0.87203968,
         -1.16177845,  0.85932624,  3.68842530,  2.19751215]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.64219093, -17.43132782, -12.73828030, -10.98612118, -13.95148468,
         -12.17405128, -10.92382336, -13.20341492, -16.59213638, -15.28749561]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.64219093, -17.43132782, -12.73828030, -10.98612118, -13.95148468,
          -12.17405128, -10.92382336, -13.20341492, -16.59213638, -15.28749561]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.06229782]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0842 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 36, vnnlib ID: 36 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.07254219, -23.32916451, -18.11545181, -16.03979683, -17.97344971,
         -17.07232475, -18.43986130, -16.48874283, -21.96584511, -20.95975685]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [563]; unstable size 563; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 156, 1, 563] with unstable size 155 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 563] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 563] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [155]; unstable size 155; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 155] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 155] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.52441847,  5.39360428,  0.73585320, -1.15312338,  0.82712770,
         -0.08107734,  1.07491684,  4.02794266,  3.11614585]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.07254219, -23.32916451, -18.11545181, -16.03979683, -17.97344971,
         -17.07232475, -18.43986130, -16.48874283, -21.96584511, -20.95975685]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.07254028, -23.32916641, -18.11545372, -16.03979683, -17.97345161,
          -17.07232285, -18.43986130, -16.48874283, -21.96584702, -20.95975685],
         [-19.07254028, -23.32916641, -18.11545372, -16.03979683, -17.97345161,
          -17.07232285, -18.43986130, -16.48874283, -21.96584702, -20.95975685]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44894600,  0.58358002]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0769 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 37, vnnlib ID: 37 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.70158577, -22.21768379, -23.95887756, -27.52854156, -24.44779968,
         -28.61229897, -28.66467094, -26.43075180, -22.27626801, -22.80558968]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [756]; unstable size 756; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 197, 1, 756] with unstable size 196 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 756] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 756] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [196]; unstable size 196; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 196] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 196] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.58621788, 2.47436023, 5.86044216, 2.89928818, 6.82225561, 6.78166151,
         4.58398390, 0.69966269, 1.06527972]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0475 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 38, vnnlib ID: 38 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.42754364, -14.80943012, -10.45694256, -11.06365776, -10.51977921,
         -11.33867931,  -9.27479267, -12.10030270, -16.64357758, -13.39722061]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [453]; unstable size 453; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 302, 1, 453] with unstable size 301 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 453] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 453] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [301]; unstable size 301; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 301] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 301] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.36418629e+00,  3.88016152e+00, -1.22690201e-03,  5.18171310e-01,
         -7.83939362e-02,  5.22855043e-01,  8.93965125e-01,  5.49661064e+00,
          2.41142797e+00]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.42754364, -14.80943012, -10.45694256, -11.06365776, -10.51977921,
         -11.33867931,  -9.27479267, -12.10030270, -16.64357758, -13.39722061]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.26it/s]100%|██████████| 1/1 [00:00<00:00,  8.25it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.12287807, -14.69568729, -10.06177521, -10.78610325, -10.26407623,
          -10.99050617,  -9.46359158, -11.73374748, -16.38097382, -13.27322674],
         [-15.12287807, -14.69568729, -10.06177521, -10.78610325, -10.26407623,
          -10.99050617,  -9.46359158, -11.73374748, -16.38097382, -13.27322674]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.59818363, 0.80048466]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1241 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 18.593082427978516
alpha/beta optimization time: 1.2782230377197266
initial alpha-crown bounds: tensor([[ 4.42038965,  3.93954635,  0.04252648,  0.59053856, -0.04266882,
          0.61050278,  0.96340466,  5.55710554,  2.51173639]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.042668819427490234
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.53025770187378
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.53021264076233
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.53018522262573
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.53016304969788
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.53014469146729
Verifying property 4 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04266882]], device='cuda:0') need to verify.
Model prediction is: tensor([-15.42754364, -14.80943012, -10.45694256, -11.06365776, -10.51977921,
        -11.33867931,  -9.27479267, -12.10030270, -16.64357758, -13.39722061],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04266882]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 453
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 299
Node /15 input 0: size torch.Size([100]) unstable 20
-----------------
# of unstable neurons: 772
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00014638900756835938
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04266810417175293
10 lb beta sum: 0.0, worst -0.04267621040344238
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0571    transfer 0.0001    finalize 0.0001    func 0.0576    
Accumulated time: func 0.0576    prepare 0.0002    bound 0.0571    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 85] 
split level 3: [/input-12, 14] 
split level 4: [/input-12, 90] 
split level 5: [/input-12, 97] 
split level 6: [/input-12, 10] 
split level 7: [/input-12, 61] 
split level 8: [/input-12, 17] 
split level 9: [/input-12, 4] 
split level 10: [/input-12, 71] 
split level 11: [/input-8, 163] 
split level 12: [/input-8, 154] 
split level 13: [/input-8, 132] 
split level 14: [/input-8, 142] 
split level 15: [/input-8, 172] 
split level 16: [/input, 2887] 
split level 17: [/input-8, 1635] 
split level 18: [/input-8, 1249] 
split level 19: [/input-12, 55] 
split level 20: [/input-8, 298] 
split level 21: [/input-8, 309] 
split level 22: [/input-8, 155] 
split level 23: [/input-8, 1362] 
split level 24: [/input-8, 1386] 
split level 25: [/input-8, 914] 
split level 26: [/input-8, 147] 
split level 27: [/input-8, 1242] 
split level 28: [/input-8, 1203] 
split level 29: [/input-8, 178] 
split level 30: [/input, 3300] 
split level 31: [/input-8, 290] 
split level 32: [/input-12, 8] 
split level 33: [/input-8, 315] 
split level 34: [/input-8, 492] 
split level 35: [/input, 2919] 
split level 36: [/input-8, 307] 
split level 37: [/input-8, 1627] 
split level 38: [/input-8, 282] 
split level 39: [/input-8, 1389] 
split level 40: [/input-8, 146] 
split level 41: [/input-8, 1271] 
split level 42: [/input-8, 162] 
split level 43: [/input-8, 252] 
split level 44: [/input, 2934] 
split level 45: [/input-8, 1390] 
split level 46: [/input-8, 1395] 
split level 47: [/input-8, 1674] 
split level 48: [/input-8, 171] 
split level 49: [/input, 840] 
split level 50: [/input-8, 1382] 
split level 51: [/input, 3556] 
split level 52: [/input-8, 445] 
split level 53: [/input-8, 438] 
split level 54: [/input-8, 1240] 
split level 55: [/input-8, 99] 
split level 56: [/input-8, 1363] 
split level 57: [/input-8, 957] 
split level 58: [/input-8, 1066] 
split level 59: [/input-8, 2029] 
split level 60: [/input, 345] 
split level 61: [/input-8, 348] 
split level 62: [/input-8, 1675] 
split level 63: [/input, 856] 
split level 64: [/input-8, 1628] 
split level 65: [/input, 824] 
split level 66: [/input-8, 777] 
split level 67: [/input-8, 1644] 
split level 68: [/input-8, 257] 
split level 69: [/input-8, 430] 
split level 70: [/input-8, 1587] 
split level 71: [/input-8, 1673] 
split level 72: [/input-8, 250] 
split level 73: [/input-8, 342] 
split level 74: [/input-8, 499] 
split level 75: [/input-8, 341] 
split level 76: [/input, 854] 
split level 77: [/input-12, 72] 
split level 78: [/input-8, 46] 
split level 79: [/input-8, 1689] 
split level 80: [/input, 2788] 
split level 81: [/input-8, 1181] 
split level 82: [/input, 341] 
split level 83: [/input-8, 1354] 
split level 84: [/input, 2933] 
split level 85: [/input-8, 98] 
split level 86: [/input-8, 238] 
split level 87: [/input-8, 1676] 
split level 88: [/input, 821] 
split level 89: [/input, 2901] 
split level 90: [/input-8, 424] 
split level 91: [/input, 2922] 
split level 92: [/input-8, 55] 
split level 93: [/input-8, 1383] 
split level 94: [/input, 2949] 
split level 95: [/input-8, 1005] 
split level 96: [/input, 873] 
split level 97: [/input, 487] 
split level 98: [/input, 3381] 
split level 99: [/input, 859] 
split level 100: [/input-8, 1680] 
split level 101: [/input-8, 1399] 
split level 102: [/input-8, 922] 
split level 103: [/input-8, 1355] 
split level 104: [/input-8, 275] 
split level 105: [/input-8, 1660] 
split level 106: [/input-8, 878] 
split level 107: [/input-8, 253] 
split level 108: [/input-8, 1361] 
split level 109: [/input, 1655] 
split level 110: [/input-8, 446] 
split level 111: [/input-8, 1375] 
split level 112: [/input, 362] 
split level 113: [/input-8, 1044] 
split level 114: [/input-8, 249] 
split level 115: [/input-8, 230] 
split level 116: [/input-8, 493] 
split level 117: [/input-8, 1602] 
split level 118: [/input, 409] 
split level 119: [/input-8, 447] 
split level 120: [/input-8, 1540] 
split level 121: [/input, 329] 
split level 122: [/input-8, 151] 
split level 123: [/input, 3572] 
split level 124: [/input, 2952] 
split level 125: [/input, 456] 
split level 126: [/input, 969] 
split level 127: [/input, 146] 
split level 128: [/input, 2872] 
split level 129: [/input-8, 2021] 
split level 130: [/input-8, 1512] 
split level 131: [/input-8, 485] 
split level 132: [/input, 3215] 
split level 133: [/input, 885] 
split level 134: [/input-8, 103] 
split level 135: [/input-8, 441] 
split level 136: [/input, 841] 
split level 137: [/input-8, 231] 
split level 138: [/input, 791] 
split level 139: [/input-8, 1665] 
split level 140: [/input, 844] 
split level 141: [/input, 795] 
split level 142: [/input-8, 786] 
split level 143: [/input-8, 107] 
split level 144: [/input-8, 1652] 
split level 145: [/input, 3557] 
split level 146: [/input-8, 137] 
split level 147: [/input-8, 18] 
split level 148: [/input, 440] 
split level 149: [/input, 283] 
split level 150: [/input, 2907] 
split level 151: [/input-8, 458] 
split level 152: [/input, 3214] 
split level 153: [/input-8, 369] 
split level 154: [/input, 3497] 
split level 155: [/input, 2966] 
split level 156: [/input, 789] 
split level 157: [/input-8, 350] 
split level 158: [/input, 981] 
split level 159: [/input-8, 1535] 
split level 160: [/input-8, 191] 
split level 161: [/input-8, 1527] 
split level 162: [/input-8, 1353] 
split level 163: [/input, 2836] 
split level 164: [/input, 339] 
split level 165: [/input, 2910] 
split level 166: [/input, 3286] 
split level 167: [/input-8, 143] 
split level 168: [/input, 4013] 
split level 169: [/input, 3181] 
split level 170: [/input-8, 1729] 
split level 171: [/input-8, 1333] 
split level 172: [/input, 3293] 
split level 173: [/input, 3419] 
split level 174: [/input, 2838] 
split level 175: [/input, 867] 
split level 176: [/input-8, 1081] 
split level 177: [/input-8, 97] 
split level 178: [/input, 3268] 
split level 179: [/input, 90] 
split level 180: [/input, 2894] 
split level 181: [/input, 793] 
split level 182: [/input-8, 1217] 
split level 183: [/input-8, 1653] 
split level 184: [/input, 2719] 
split level 185: [/input, 1013] 
split level 186: [/input-8, 439] 
split level 187: [/input-8, 963] 
split level 188: [/input, 1187] 
split level 189: [/input-8, 1356] 
split level 190: [/input-8, 339] 
split level 191: [/input, 2852] 
split level 192: [/input, 2893] 
split level 193: [/input-8, 204] 
split level 194: [/input-8, 1225] 
split level 195: [/input, 3099] 
split level 196: [/input, 21] 
split level 197: [/input, 861] 
split level 198: [/input, 403] 
split level 199: [/input, 104] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.042655229568481445
10 lb beta sum: 0.0, worst -0.04264426231384277
Time: prepare 0.0115    bound 0.1009    transfer 0.0028    finalize 0.0032    func 0.1210    
Accumulated time: func 0.1786    prepare 0.0219    bound 0.1580    transfer 0.0029    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(0.44494545) min lb tensor(-0.04263687)
Number of Verified Splits: 19 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011748313903808594 
BICCOS Cumulative time: 0.011748313903808594
Preprocessing time: 0.010198593139648438 Inference time: 0.00075531005859375 Add cuts time: 0.0002472400665283203 Cut analysis time: 0.0005471706390380859
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5353    set_bounds 0.0108    solve 0.1211    add 0.0101    
Accumulated time: pickout 0.0003    decision 0.5353    set_bounds 0.0108    solve 0.1211    add 0.0101    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59]), tensor([-1.]), tensor([0]), tensor([4.88880603e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59]), tensor([1.]), tensor([0]), tensor([5.75662906e-20]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03064727783203125

all verified at 1th iter
Time: prepare 0.0003    bound 0.0099    transfer 0.0001    finalize 0.0001    func 0.0106    
Accumulated time: func 0.1892    prepare 0.0223    bound 0.1679    transfer 0.0030    finalize 0.0035    
After pruning, left:  0

Back to Regular BaB


Properties batch 5, size 1
Remaining timeout: 197.5388216972351
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.5387578010559
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.53873562812805
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.5387156009674
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4614 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 39, vnnlib ID: 39 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.25883293, -16.40706444, -12.91650105, -13.33503723, -12.76172256,
         -14.05701828, -10.42017269, -14.10208035, -18.75581741, -16.93133926]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 259, 1, 403] with unstable size 258 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 403] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [258]; unstable size 258; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 258] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 258] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.00860643, 4.23702145, 1.09872389, 1.64570820, 0.89420319, 2.14901757,
         1.57642543, 6.09760046, 4.54596281]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0666 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 40, vnnlib ID: 40 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.57652092, -32.23639679, -28.36616898, -29.83554840, -30.16464424,
         -30.64960480, -32.17686844, -29.80444527, -29.91892624, -32.09518433]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [483]; unstable size 483; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 195, 1, 483] with unstable size 194 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 483] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 483] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [194]; unstable size 194; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 194] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 194] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.07906675, 1.77047968, 3.19271326, 3.46971631, 3.86029029, 5.23355198,
         2.96001387, 3.10798526, 5.22355986]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0654 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 41, vnnlib ID: 41 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.71967888, -24.49569893, -23.46326828, -21.31615639, -22.26188850,
         -21.78440475, -22.43858719, -23.19987106, -16.18318367, -22.82086182]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [644]; unstable size 644; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 215, 1, 644] with unstable size 214 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 644] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 644] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [214]; unstable size 214; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 214] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 214] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.49413395, 6.51567507, 5.72104549, 3.75618243, 4.40788603, 4.05219269,
         4.77330208, 5.20548964, 5.05213833]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0725 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 42, vnnlib ID: 42 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.19749069, -20.07060051, -15.00829124, -14.86962318, -16.28983498,
         -15.46364594, -13.24634743, -17.95564651, -17.94532013, -19.32559013]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [570]; unstable size 570; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 265, 1, 570] with unstable size 264 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 570] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 570] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [264]; unstable size 264; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 264] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 264] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.89140344, 4.24306488, 0.43238330, 0.61651587, 1.44491482, 0.98225856,
         2.89481425, 2.46429300, 3.67898202]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0451 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 43, vnnlib ID: 43 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.52461720, -17.35180283, -12.05615902, -12.63583565, -11.58507633,
         -12.59487724, -10.57591057, -13.41824055, -16.97095490, -15.37764359]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [591]; unstable size 591; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 292, 1, 591] with unstable size 291 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 591] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 591] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [291]; unstable size 291; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 291] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 291] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.08203375,  2.15383005, -1.83007765, -0.33773935, -2.24676943,
         -3.21968818, -0.57630789,  2.02706265,  0.67616463]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.52461720, -17.35180283, -12.05615902, -12.63583565, -11.58507633,
         -12.59487724, -10.57591057, -13.41824055, -16.97095490, -15.37764359]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.52461624, -17.35180092, -12.05615902, -12.63583660, -11.58507729,
          -12.59487820, -10.57591152, -13.41824245, -16.97095490, -15.37764454],
         [-15.52461624, -17.35180092, -12.05615902, -12.63583660, -11.58507729,
          -12.59487820, -10.57591152, -13.41824245, -16.97095490, -15.37764454]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.53871918,  0.04095840, -1.00980091, -2.01896667,  0.82336426]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0732 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 44, vnnlib ID: 44 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.45021820, -27.45919800, -20.82433891, -22.54921150, -21.01146507,
         -23.11272240, -21.28590775, -22.88107681, -25.70099831, -27.22681618]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [929]; unstable size 929; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 450, 1, 929] with unstable size 449 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 929] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 929] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [449]; unstable size 449; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 449] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 449] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.88848370,  3.70000076,  0.24056017, -1.21744084,  0.64094079,
         -1.06626356, -0.11656237,  2.34579206,  3.68335915]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.45021820, -27.45919800, -20.82433891, -22.54921150, -21.01146507,
         -23.11272240, -21.28590775, -22.88107681, -25.70099831, -27.22681618]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.65473557, -27.69364357, -21.07613373, -22.60361481, -20.87356758,
          -23.11100769, -21.44839478, -22.64229012, -25.88486099, -27.33996201],
         [-23.65473557, -27.69364357, -21.07613373, -22.60361481, -20.87356758,
          -23.11100769, -21.44839478, -22.64229012, -25.88486099, -27.33996201]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20256615,  0.37226105,  1.56615639]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0714 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 45, vnnlib ID: 45 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.70279121, -25.07186508, -24.43242264, -24.38763809, -24.00282478,
         -24.77808571, -24.40219879, -25.75534058, -24.67971420, -24.98260498]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [670]; unstable size 670; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 245, 1, 670] with unstable size 244 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 670] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 670] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [244]; unstable size 244; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 244] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 244] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.87631416, -2.55956364, -2.18438005, -2.77099705, -1.83020782,
         -2.16091776, -1.01760435, -2.05305576, -0.77688050]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.70279121, -25.07186508, -24.43242264, -24.38763809, -24.00282478,
         -24.77808571, -24.40219879, -25.75534058, -24.67971420, -24.98260498]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-24.70278931, -25.07186699, -24.43242264, -24.38763809, -24.00282288,
          -24.77808380, -24.40219879, -25.75533867, -24.67971420, -24.98260689],
         [-24.70278931, -25.07186699, -24.43242264, -24.38763809, -24.00282288,
          -24.77808380, -24.40219879, -25.75533867, -24.67971420, -24.98260689]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.36907768, -0.63944435, -0.68422890, -1.06904411, -0.29378319,
          -0.66966820,  0.68347168, -0.39215279, -0.08926010]]],
       device='cuda:0')
number of violation:  8
clean attack image tensor([[[[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         ...,


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0948 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 46, vnnlib ID: 46 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.77937126, -24.38296890, -19.26746750, -18.82821846, -19.50073814,
         -19.05830956, -19.41297340, -21.65519333, -24.81905746, -23.99803734]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [889]; unstable size 889; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 324, 1, 889] with unstable size 323 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 889] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 889] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [323]; unstable size 323; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 323] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 323] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.86873078,  3.27330303, -1.23502350, -0.61113095, -0.78136921,
         -0.75137854,  0.93968046,  3.48995113,  3.24112701]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.77937126, -24.38296890, -19.26746750, -18.82821846, -19.50073814,
         -19.05830956, -19.41297340, -21.65519333, -24.81905746, -23.99803734]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.77937126, -24.38297081, -19.26746559, -18.82821846, -19.50073814,
          -19.05830956, -19.41297150, -21.65519333, -24.81905556, -23.99803925],
         [-21.77937126, -24.38297081, -19.26746559, -18.82821846, -19.50073814,
          -19.05830956, -19.41297150, -21.65519333, -24.81905556, -23.99803925]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.20915604, -0.23009109,  0.44242859,  0.35466194]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0811 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 47, vnnlib ID: 47 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.53012466, -29.66223907, -26.90876389, -28.07838631, -26.04151726,
         -29.22808647, -27.47805023, -29.35506439, -20.28993988, -29.09470940]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [586]; unstable size 586; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 174, 1, 586] with unstable size 173 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 586] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 586] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [173]; unstable size 173; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 173] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 173] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.51274920, 8.23108101, 5.60526562, 6.71247005, 4.74748850, 7.73364449,
         6.02225161, 7.97453165, 7.67071819]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0697 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 48, vnnlib ID: 48 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.52310753, -22.21076012, -18.13401031, -16.74857521, -17.94910240,
         -16.36793709, -17.47036171, -17.69790268, -22.73849869, -20.87914658]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [688]; unstable size 688; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 688] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 688] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 688] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 260] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.49447179,  3.06922174,  0.62996531, -0.02265927,  0.38052917,
         -0.22107923,  0.10723680,  4.39991188,  2.21292210]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.52310753, -22.21076012, -18.13401031, -16.74857521, -17.94910240,
         -16.36793709, -17.47036171, -17.69790268, -22.73849869, -20.87914658]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.41it/s]100%|██████████| 1/1 [00:00<00:00,  8.40it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.18397522, -21.81373215, -17.85622978, -16.59555244, -17.68647575,
          -16.41921616, -17.14182472, -17.56402969, -22.39430809, -20.54507637],
         [-20.18397522, -21.81373215, -17.85622978, -16.59555244, -17.68647575,
          -16.41921616, -17.14182472, -17.56402969, -22.39430809, -20.54507637]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.17633629, 0.72260857]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1223 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.641362190246582
alpha/beta optimization time: 1.2551443576812744
initial alpha-crown bounds: tensor([[ 2.55440640,  3.16163611,  0.69625616,  0.01558441,  0.45437169,
         -0.16967702,  0.16310698,  4.47692680,  2.28875065]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.1696770191192627
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.55000162124634
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.54995775222778
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.54992270469666
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.54989981651306
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.549880027771
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.5498561859131
Verifying property 5 with 1 instances.
##### Instance 48 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.16967702]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.52310753, -22.21076012, -18.13401031, -16.74857521, -17.94910240,
        -16.36793709, -17.47036171, -17.69790268, -22.73849869, -20.87914658],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.16967702]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 688
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 258
Node /15 input 0: size torch.Size([100]) unstable 22
-----------------
# of unstable neurons: 968
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010609626770019531
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16967642307281494
10 lb beta sum: 0.0, worst -0.169683575630188
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    func 0.0539    
Accumulated time: func 0.0539    prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 0] 
split level 1: [/input-12, 64] 
split level 2: [/input-12, 42] 
split level 3: [/input-12, 17] 
split level 4: [/input-12, 72] 
split level 5: [/input-12, 35] 
split level 6: [/input-8, 944] 
split level 7: [/input-12, 29] 
split level 8: [/input-12, 89] 
split level 9: [/input-8, 593] 
split level 10: [/input-12, 36] 
split level 11: [/input-8, 421] 
split level 12: [/input-8, 1948] 
split level 13: [/input-8, 1949] 
split level 14: [/input-12, 18] 
split level 15: [/input-8, 953] 
split level 16: [/input-8, 1946] 
split level 17: [/input-8, 853] 
split level 18: [/input-8, 418] 
split level 19: [/input-8, 1709] 
split level 20: [/input-8, 1938] 
split level 21: [/input-8, 427] 
split level 22: [/input-8, 601] 
split level 23: [/input-8, 1973] 
split level 24: [/input-8, 938] 
split level 25: [/input-8, 585] 
split level 26: [/input, 1431] 
split level 27: [/input-8, 979] 
split level 28: [/input-8, 604] 
split level 29: [/input-8, 594] 
split level 30: [/input, 3209] 
split level 31: [/input-8, 980] 
split level 32: [/input-8, 1684] 
split level 33: [/input-12, 71] 
split level 34: [/input-8, 1170] 
split level 35: [/input, 1377] 
split level 36: [/input-8, 844] 
split level 37: [/input-8, 1693] 
split level 38: [/input, 3124] 
split level 39: [/input-8, 1675] 
split level 40: [/input-8, 1954] 
split level 41: [/input-8, 587] 
split level 42: [/input-8, 1742] 
split level 43: [/input, 2710] 
split level 44: [/input-8, 403] 
split level 45: [/input, 1443] 
split level 46: [/input, 2676] 
split level 47: [/input, 276] 
split level 48: [/input, 1444] 
split level 49: [/input, 2679] 
split level 50: [/input, 3171] 
split level 51: [/input-8, 404] 
split level 52: [/input, 1394] 
split level 53: [/input, 3238] 
split level 54: [/input, 2485] 
split level 55: [/input-8, 1331] 
split level 56: [/input-8, 1599] 
split level 57: [/input, 147] 
split level 58: [/input, 131] 
split level 59: [/input, 2451] 
split level 60: [/input-12, 43] 
split level 61: [/input-8, 1177] 
split level 62: [/input, 1346] 
split level 63: [/input-8, 1341] 
split level 64: [/input, 2197] 
split level 65: [/input-8, 1676] 
split level 66: [/input, 1361] 
split level 67: [/input, 2180] 
split level 68: [/input, 2198] 
split level 69: [/input-8, 1752] 
split level 70: [/input, 3285] 
split level 71: [/input-8, 580] 
split level 72: [/input, 209] 
split level 73: [/input, 132] 
split level 74: [/input, 2586] 
split level 75: [/input, 1441] 
split level 76: [/input, 3287] 
split level 77: [/input, 3102] 
split level 78: [/input, 3118] 
split level 79: [/input, 803] 
split level 80: [/input, 1719] 
split level 81: [/input, 787] 
split level 82: [/input, 3363] 
split level 83: [/input, 2603] 
split level 84: [/input, 2434] 
split level 85: [/input, 820] 
split level 86: [/input, 2099] 
split level 87: [/input-8, 1782] 
split level 88: [/input-8, 60] 
split level 89: [/input, 2257] 
split level 90: [/input, 1387] 
split level 91: [/input-8, 1315] 
split level 92: [/input, 3379] 
split level 93: [/input, 1410] 
split level 94: [/input, 146] 
split level 95: [/input, 788] 
split level 96: [/input, 804] 
split level 97: [/input, 2587] 
split level 98: [/input, 3142] 
split level 99: [/input, 2258] 
split level 100: [/input, 2707] 
split level 101: [/input, 1994] 
split level 102: [/input, 2792] 
split level 103: [/input, 2437] 
split level 104: [/input, 2145] 
split level 105: [/input, 819] 
split level 106: [/input, 156] 
split level 107: [/input, 1426] 
split level 108: [/input, 851] 
split level 109: [/input, 3154] 
split level 110: [/input, 1449] 
split level 111: [/input, 2512] 
split level 112: [/input, 2266] 
split level 113: [/input, 177] 
split level 114: [/input, 2387] 
split level 115: [/input, 2433] 
split level 116: [/input, 1468] 
split level 117: [/input, 2116] 
split level 118: [/input, 2741] 
split level 119: [/input, 2758] 
split level 120: [/input, 166] 
split level 121: [/input-8, 836] 
split level 122: [/input, 2658] 
split level 123: [/input-8, 1765] 
split level 124: [/input, 2529] 
split level 125: [/input, 1480] 
split level 126: [/input, 2620] 
split level 127: [/input, 214] 
split level 128: [/input, 2211] 
split level 129: [/input, 2530] 
split level 130: [/input, 835] 
split level 131: [/input, 999] 
split level 132: [/input, 2757] 
split level 133: [/input, 3301] 
split level 134: [/input, 2148] 
split level 135: [/input, 2791] 
split level 136: [/input-8, 396] 
split level 137: [/input, 2242] 
split level 138: [/input, 182] 
split level 139: [/input-8, 1265] 
split level 140: [/input, 113] 
split level 141: [/input, 2161] 
split level 142: [/input, 2774] 
split level 143: [/input, 995] 
split level 144: [/input, 193] 
split level 145: [/input, 3288] 
split level 146: [/input, 2773] 
split level 147: [/input-8, 1784] 
split level 148: [/input-8, 402] 
split level 149: [/input, 2657] 
split level 150: [/input, 3525] 
split level 151: [/input, 837] 
split level 152: [/input, 2977] 
split level 153: [/input, 996] 
split level 154: [/input, 2689] 
split level 155: [/input-8, 977] 
split level 156: [/input, 2686] 
split level 157: [/input, 2507] 
split level 158: [/input, 3358] 
split level 159: [/input, 2777] 
split level 160: [/input, 162] 
split level 161: [/input, 195] 
split level 162: [/input, 145] 
split level 163: [/input, 2699] 
split level 164: [/input, 2450] 
split level 165: [/input, 2355] 
split level 166: [/input, 227] 
split level 167: [/input, 2204] 
split level 168: [/input, 3381] 
split level 169: [/input, 114] 
split level 170: [/input, 199] 
split level 171: [/input, 3014] 
split level 172: [/input, 789] 
split level 173: [/input, 2654] 
split level 174: [/input, 2488] 
split level 175: [/input, 3284] 
split level 176: [/input, 2193] 
split level 177: [/input, 2273] 
split level 178: [/input, 2226] 
split level 179: [/input, 3303] 
split level 180: [/input-8, 1743] 
split level 181: [/input, 2705] 
split level 182: [/input, 173] 
split level 183: [/input, 2210] 
split level 184: [/input, 2611] 
split level 185: [/input-8, 835] 
split level 186: [/input, 2776] 
split level 187: [/input, 183] 
split level 188: [/input, 3555] 
split level 189: [/input, 2466] 
split level 190: [/input, 2515] 
split level 191: [/input, 1978] 
split level 192: [/input, 2214] 
split level 193: [/input, 2489] 
split level 194: [/input, 2248] 
split level 195: [/input, 2209] 
split level 196: [/input, 482] 
split level 197: [/input, 2517] 
split level 198: [/input, 2521] 
split level 199: [/input, 167] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16962754726409912
10 lb beta sum: 0.0, worst -0.16961932182312012
Time: prepare 0.0113    bound 0.1014    transfer 0.0010    finalize 0.0028    func 0.1192    
Accumulated time: func 0.1731    prepare 0.0216    bound 0.1548    transfer 0.0011    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.26176727) min lb tensor(-0.16961622)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.01064157485961914 
BICCOS Cumulative time: 0.01064157485961914
Preprocessing time: 0.010070562362670898 Inference time: 0.000240325927734375 Add cuts time: 7.724761962890625e-05 Cut analysis time: 0.00025343894958496094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16202 (1), -0.16197 (1), -0.16190 (1), -0.16179 (1), -0.16160 (1), -0.16152 (1), -0.16142 (1), -0.16132 (1), -0.16131 (1), -0.16122 (1), -0.16121 (1), -0.16060 (1), -0.16054 (1), -0.15996 (1), -0.15977 (1), -0.15970 (1), -0.15870 (1), -0.15799 (1), -0.15793 (1), -0.15643 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5326    set_bounds 0.0094    solve 0.1193    add 0.0792    
Accumulated time: pickout 0.0003    decision 0.5326    set_bounds 0.0094    solve 0.1193    add 0.0792    
Current (lb-rhs): -0.16202211380004883
50 domains visited
Cumulative time: 0.8216419219970703

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 64] [/input-12, 0] 
split level 1: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 42] [/input-12, 64] 
split level 2: [/input-12, 42] [/input-12, 17] [/input-12, 42] [/input-12, 42] [/input-12, 17] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 17] [/input-12, 42] 
split level 3: [/input-12, 17] [/input-12, 35] [/input-12, 17] [/input-12, 17] [/input-12, 35] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 35] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13135898113250732
10 lb beta sum: 0.6887269616127014, worst -0.06046968698501587
Time: prepare 0.0077    bound 0.1215    transfer 0.0007    finalize 0.0025    func 0.1350    
Accumulated time: func 0.3081    prepare 0.0296    bound 0.2764    transfer 0.0018    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.38830912) min lb tensor(-0.06029528)
Number of Verified Splits: 268 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.026822566986083984 
BICCOS Cumulative time: 0.037464141845703125
Preprocessing time: 0.011907577514648438 Inference time: 0.009944915771484375 Add cuts time: 0.004784822463989258 Cut analysis time: 0.00018525123596191406
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0216    set_bounds 0.0136    solve 0.1351    add 0.0155    
Accumulated time: pickout 0.0014    decision 0.5542    set_bounds 0.0229    solve 0.2543    add 0.0948    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([42,  0]), tensor([-1., -1.]), tensor([0, 0]), tensor([3.57185747e-16, 4.32517529e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([42,  0]), tensor([-1.,  1.]), tensor([0, 0]), tensor([3.57185747e-16, 1.08543560e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([42,  0]), tensor([ 1., -1.]), tensor([0, 0]), tensor([4.43883263e-11, 4.34406936e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([42,  0]), tensor([1., 1.]), tensor([0, 0]), tensor([4.43883263e-11, 1.11121401e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03160750865936279

all verified at 1th iter
Time: prepare 0.0003    bound 0.0136    transfer 0.0001    finalize 0.0002    func 0.0143    
Accumulated time: func 0.3224    prepare 0.0299    bound 0.2900    transfer 0.0019    finalize 0.0056    
After pruning, left:  0

Back to Regular BaB


Properties batch 6, size 1
Remaining timeout: 197.20281720161438
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.20274233818054
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.2027189731598
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.7974 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 49, vnnlib ID: 49 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-31.84988976, -27.04168510, -32.56347275, -33.70067215, -33.15383530,
         -34.10073471, -32.55872345, -32.39547729, -30.81136703, -29.74110985]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [597]; unstable size 597; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 253, 1, 597] with unstable size 252 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 597] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 597] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [252]; unstable size 252; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 252] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 252] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.47295165, 3.67134237, 4.79961014, 4.17743587, 5.03716660, 3.67930984,
         3.29446173, 2.28837848, 1.78437114]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0655 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 50, vnnlib ID: 50 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.95876122, -24.06052399, -22.79921150, -22.37466049, -21.66536903,
         -22.27144814, -23.11923218, -24.92821121, -24.52709389, -24.95055580]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1300]; unstable size 1300; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 386, 1, 1300] with unstable size 385 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 1300] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1300] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [385]; unstable size 385; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 385] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 385] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.83590508, -0.36369705, -0.81580937, -0.21350294, -1.76645565,
         -0.45421177,  1.06313896,  0.19591522,  0.91548586]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.95876122, -24.06052399, -22.79921150, -22.37466049, -21.66536903,
         -22.27144814, -23.11923218, -24.92821121, -24.52709389, -24.95055580]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.95876312, -24.06052208, -22.79921341, -22.37466049, -21.66536713,
          -22.27144814, -23.11923218, -24.92821121, -24.52709579, -24.95055199],
         [-21.95876312, -24.06052208, -22.79921341, -22.37466049, -21.66536713,
          -22.27144814, -23.11923218, -24.92821121, -24.52709579, -24.95055199]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.31268501,  1.78907394,  0.52776527,  0.10321236, -0.60608101,
           0.84778404]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1149 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 51, vnnlib ID: 51 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.02009583, -25.62828255, -18.56137657, -22.16949654, -20.18937492,
         -22.90802956, -21.61422729, -24.61019516, -20.71578217, -25.30768013]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [637]; unstable size 637; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 152, 1, 637] with unstable size 151 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 637] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 637] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [151]; unstable size 151; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 151] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 151] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[7.60369205, 1.05985808, 4.44430304, 2.54081869, 5.11138248, 3.84395003,
         6.83230734, 2.69353652, 7.41863537]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0668 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 52, vnnlib ID: 52 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.94017601, -28.86633301, -23.06001091, -21.31272125, -22.19619942,
         -20.90770912, -22.69350815, -22.96586227, -29.16728783, -27.83672142]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [615]; unstable size 615; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 323, 1, 615] with unstable size 322 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 615] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 615] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [322]; unstable size 322; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 322] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 322] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.51382399, 5.73519135, 0.91068578, 0.11511427, 0.03012848, 0.51855636,
         1.05246687, 6.62892151, 5.18492413]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0714 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 53, vnnlib ID: 53 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.12831688, -24.87204933, -21.52433014, -21.45733643, -22.17998314,
         -21.62087250, -21.34234619, -22.34700012, -24.97188950, -22.55655289]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [580]; unstable size 580; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 184, 1, 580] with unstable size 183 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 580] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 580] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [183]; unstable size 183; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 183] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 183] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.55080438,  1.90782392, -1.05542898, -0.76249862, -0.39093399,
         -0.77109867, -0.48512790,  2.12622046, -0.21663618]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.12831688, -24.87204933, -21.52433014, -21.45733643, -22.17998314,
         -21.62087250, -21.34234619, -22.34700012, -24.97188950, -22.55655289]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.98245811, -25.14087677, -21.26465225, -21.48969841, -22.09676743,
          -21.62775993, -21.63244629, -22.23480034, -24.92131615, -22.71515083],
         [-21.98245811, -25.14087677, -21.26465225, -21.48969841, -22.09676743,
          -21.62775993, -21.63244629, -22.23480034, -24.92131615, -22.71515083]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.35001183, -0.36779404, -0.14274788,  0.46432114, -0.00468636,
           0.60235405,  1.08270454]]], device='cuda:0')
number of violation:  3
Attack finished in 0.0167 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0830 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 54, vnnlib ID: 54 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.02576256, -26.03837204, -23.14089203, -23.39199638, -24.21075249,
         -24.33787727, -24.11221695, -23.78001785, -21.66454697, -25.57447433]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [631]; unstable size 631; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 277, 1, 631] with unstable size 276 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 631] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 631] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [276]; unstable size 276; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 276] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 276] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.26207829,  2.67205715, -0.09352827,  0.10025704,  0.83907461,
          0.73086977,  0.70621490,  0.08608747,  2.33385897]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.02576256, -26.03837204, -23.14089203, -23.39199638, -24.21075249,
         -24.33787727, -24.11221695, -23.78001785, -21.66454697, -25.57447433]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.68it/s]100%|██████████| 1/1 [00:00<00:00,  8.68it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-24.58753777, -25.74412537, -22.30705833, -22.74228668, -23.48993874,
          -23.62050629, -23.39388275, -23.13651657, -21.69568634, -25.29735374]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.61137199]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1178 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.14977741241455
alpha/beta optimization time: 1.2471210956573486
initial alpha-crown bounds: tensor([[ 2.29125190,  2.73074341, -0.03381777,  0.15643978,  0.90439510,
          0.79678798,  0.77209926,  0.15606034,  2.37581730]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.03381776809692383
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.56203651428223
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5619957447052
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.5619695186615
Verifying property 2 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03381777]], device='cuda:0') need to verify.
Model prediction is: tensor([-25.02576256, -26.03837204, -23.14089203, -23.39199638, -24.21075249,
        -24.33787727, -24.11221695, -23.78001785, -21.66454697, -25.57447433],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03381777]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 631
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 271
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 917
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010919570922851562
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.033815622329711914
10 lb beta sum: 0.0, worst -0.03382468223571777
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0537    transfer 0.0001    finalize 0.0001    func 0.0541    
Accumulated time: func 0.0541    prepare 0.0002    bound 0.0537    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] 
split level 1: [/input-12, 61] 
split level 2: [/input-12, 24] 
split level 3: [/input-12, 59] 
split level 4: [/input-12, 12] 
split level 5: [/input-12, 50] 
split level 6: [/input-8, 1963] 
split level 7: [/input-8, 1947] 
split level 8: [/input-12, 68] 
split level 9: [/input-8, 1718] 
split level 10: [/input-8, 1693] 
split level 11: [/input-8, 370] 
split level 12: [/input-8, 923] 
split level 13: [/input-8, 371] 
split level 14: [/input-8, 1956] 
split level 15: [/input-8, 1948] 
split level 16: [/input-8, 938] 
split level 17: [/input-8, 299] 
split level 18: [/input-8, 454] 
split level 19: [/input-8, 365] 
split level 20: [/input-8, 362] 
split level 21: [/input-8, 1710] 
split level 22: [/input-8, 1656] 
split level 23: [/input-8, 909] 
split level 24: [/input-8, 1970] 
split level 25: [/input-8, 291] 
split level 26: [/input-8, 795] 
split level 27: [/input-8, 1644] 
split level 28: [/input-8, 1700] 
split level 29: [/input-8, 1636] 
split level 30: [/input-8, 617] 
split level 31: [/input-8, 908] 
split level 32: [/input-8, 1840] 
split level 33: [/input-8, 587] 
split level 34: [/input-8, 186] 
split level 35: [/input-8, 586] 
split level 36: [/input-8, 1640] 
split level 37: [/input-8, 785] 
split level 38: [/input-8, 604] 
split level 39: [/input-8, 778] 
split level 40: [/input, 3544] 
split level 41: [/input-8, 1684] 
split level 42: [/input-8, 905] 
split level 43: [/input, 2423] 
split level 44: [/input-8, 354] 
split level 45: [/input-8, 1969] 
split level 46: [/input-8, 1648] 
split level 47: [/input, 2231] 
split level 48: [/input-8, 781] 
split level 49: [/input-8, 1971] 
split level 50: [/input-8, 1631] 
split level 51: [/input-8, 918] 
split level 52: [/input-8, 178] 
split level 53: [/input-8, 1639] 
split level 54: [/input-8, 1651] 
split level 55: [/input-8, 1295] 
split level 56: [/input, 2023] 
split level 57: [/input-8, 1698] 
split level 58: [/input-8, 218] 
split level 59: [/input, 3541] 
split level 60: [/input-8, 580] 
split level 61: [/input-8, 1627] 
split level 62: [/input, 469] 
split level 63: [/input-8, 346] 
split level 64: [/input-8, 1284] 
split level 65: [/input, 2153] 
split level 66: [/input, 2472] 
split level 67: [/input, 3542] 
split level 68: [/input-8, 1043] 
split level 69: [/input, 2442] 
split level 70: [/input-8, 172] 
split level 71: [/input-8, 1781] 
split level 72: [/input, 2201] 
split level 73: [/input, 2457] 
split level 74: [/input, 2370] 
split level 75: [/input, 2024] 
split level 76: [/input, 2421] 
split level 77: [/input, 488] 
split level 78: [/input-8, 222] 
split level 79: [/input-8, 337] 
split level 80: [/input, 2022] 
split level 81: [/input, 754] 
split level 82: [/input, 2021] 
split level 83: [/input, 2181] 
split level 84: [/input, 3545] 
split level 85: [/input-8, 1150] 
split level 86: [/input-8, 1706] 
split level 87: [/input, 1415] 
split level 88: [/input-8, 910] 
split level 89: [/input, 2488] 
split level 90: [/input, 981] 
split level 91: [/input, 487] 
split level 92: [/input, 2246] 
split level 93: [/input-8, 907] 
split level 94: [/input-8, 1824] 
split level 95: [/input, 2518] 
split level 96: [/input-8, 1617] 
split level 97: [/input, 696] 
split level 98: [/input, 2154] 
split level 99: [/input, 2473] 
split level 100: [/input-8, 48] 
split level 101: [/input-8, 997] 
split level 102: [/input, 2282] 
split level 103: [/input-8, 1974] 
split level 104: [/input, 3540] 
split level 105: [/input, 998] 
split level 106: [/input-8, 1587] 
split level 107: [/input-8, 42] 
split level 108: [/input, 2026] 
split level 109: [/input, 2538] 
split level 110: [/input-8, 209] 
split level 111: [/input-8, 1773] 
split level 112: [/input, 2489] 
split level 113: [/input, 2114] 
split level 114: [/input-8, 213] 
split level 115: [/input-8, 1607] 
split level 116: [/input-8, 776] 
split level 117: [/input, 2121] 
split level 118: [/input-8, 233] 
split level 119: [/input, 985] 
split level 120: [/input, 3557] 
split level 121: [/input, 4066] 
split level 122: [/input-8, 211] 
split level 123: [/input-8, 1034] 
split level 124: [/input, 2263] 
split level 125: [/input-8, 330] 
split level 126: [/input, 2264] 
split level 127: [/input, 486] 
split level 128: [/input, 2075] 
split level 129: [/input, 3558] 
split level 130: [/input-8, 219] 
split level 131: [/input, 2265] 
split level 132: [/input, 2533] 
split level 133: [/input, 2325] 
split level 134: [/input, 2451] 
split level 135: [/input-8, 1736] 
split level 136: [/input, 707] 
split level 137: [/input, 2435] 
split level 138: [/input, 738] 
split level 139: [/input, 2525] 
split level 140: [/input, 3973] 
split level 141: [/input, 2261] 
split level 142: [/input, 3371] 
split level 143: [/input-8, 1816] 
split level 144: [/input, 2248] 
split level 145: [/input, 4006] 
split level 146: [/input, 2347] 
split level 147: [/input-8, 217] 
split level 148: [/input, 812] 
split level 149: [/input-8, 215] 
split level 150: [/input, 2025] 
split level 151: [/input, 2163] 
split level 152: [/input-8, 339] 
split level 153: [/input, 2369] 
split level 154: [/input, 485] 
split level 155: [/input, 2280] 
split level 156: [/input, 2113] 
split level 157: [/input, 299] 
split level 158: [/input-8, 238] 
split level 159: [/input, 2382] 
split level 160: [/input-8, 253] 
split level 161: [/input, 2353] 
split level 162: [/input, 3422] 
split level 163: [/input, 1000] 
split level 164: [/input, 3361] 
split level 165: [/input-8, 290] 
split level 166: [/input, 952] 
split level 167: [/input-8, 197] 
split level 168: [/input, 489] 
split level 169: [/input, 2536] 
split level 170: [/input, 3395] 
split level 171: [/input, 986] 
split level 172: [/input, 2505] 
split level 173: [/input, 2552] 
split level 174: [/input, 2281] 
split level 175: [/input, 4082] 
split level 176: [/input, 1977] 
split level 177: [/input, 1976] 
split level 178: [/input, 3882] 
split level 179: [/input, 3559] 
split level 180: [/input-8, 225] 
split level 181: [/input-8, 1254] 
split level 182: [/input, 3942] 
split level 183: [/input, 2554] 
split level 184: [/input, 3372] 
split level 185: [/input, 2278] 
split level 186: [/input, 2125] 
split level 187: [/input, 2092] 
split level 188: [/input, 2515] 
split level 189: [/input, 2551] 
split level 190: [/input-8, 1848] 
split level 191: [/input, 3344] 
split level 192: [/input, 2788] 
split level 193: [/input, 2126] 
split level 194: [/input, 2277] 
split level 195: [/input, 2499] 
split level 196: [/input, 2279] 
split level 197: [/input, 2549] 
split level 198: [/input-8, 410] 
split level 199: [/input, 2227] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.033611297607421875
10 lb beta sum: 0.0, worst -0.03360772132873535
Time: prepare 0.0114    bound 0.1011    transfer 0.0008    finalize 0.0029    func 0.1189    
Accumulated time: func 0.1730    prepare 0.0217    bound 0.1548    transfer 0.0009    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.16243601) min lb tensor(-0.03360081)
Number of Verified Splits: 24 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011670589447021484 
BICCOS Cumulative time: 0.011670589447021484
Preprocessing time: 0.009929180145263672 Inference time: 0.0009362697601318359 Add cuts time: 0.00027942657470703125 Cut analysis time: 0.0005257129669189453
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5309    set_bounds 0.0095    solve 0.1189    add 0.0098    
Accumulated time: pickout 0.0003    decision 0.5309    set_bounds 0.0095    solve 0.1189    add 0.0098    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78]), tensor([-1.]), tensor([0]), tensor([8.69331733e-14]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78]), tensor([1.]), tensor([0]), tensor([2.90570068e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.004782915115356445

all verified at 0th iter
Time: prepare 0.0003    bound 0.0040    transfer 0.0001    finalize 0.0001    func 0.0046    
Accumulated time: func 0.1776    prepare 0.0220    bound 0.1589    transfer 0.0010    finalize 0.0031    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.58377170562744
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.58370804786682
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.58368635177612
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.5836524963379
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.5836329460144
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.58361411094666
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4164 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 55, vnnlib ID: 55 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.79308891, -23.41397476, -18.82098770, -19.48437309, -18.56243706,
         -19.91847992, -17.07889175, -20.97890472, -23.56008720, -23.37459755]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [606]; unstable size 606; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 336, 1, 606] with unstable size 335 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 606] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 606] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [335]; unstable size 335; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 335] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 335] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.91788816, 3.99140882, 0.67279959, 1.37791419, 0.25162339, 1.69752836,
         2.11260509, 4.47059727, 4.00945616]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0634 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 56, vnnlib ID: 56 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-33.65884781, -39.15306854, -38.09638214, -41.44153214, -38.26478195,
         -42.46372604, -41.47655106, -40.54250336, -32.64043427, -38.01860428]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [675]; unstable size 675; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 675] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 675] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 675] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 216] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.57993078,  3.15776825,  6.31814766,  3.25631595,  7.08248043,
          6.16690826,  5.13876057, -1.86000657,  3.30038857]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-33.65884781, -39.15306854, -38.09638214, -41.44153214, -38.26478195,
         -42.46372604, -41.47655106, -40.54250336, -32.64043427, -38.01860428]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-33.65884781, -39.15306854, -38.09638214, -41.44153214, -38.26478195,
          -42.46372604, -41.47655106, -40.54250336, -32.64043427, -38.01860428]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.01841354]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.24920666e+00,  1.67777801e+00,  1.32857168e+00,  ...,
             2.80952454e-01,  1.06349289e-01, -5.23808524e-02],
           [ 9.79365110e-01,  1.39206374e+00,  1.24920666e+00,  ...,
            -1.95237994e-01, -1.79364979e-01, -1.31745934e-01],
           [ 1.28095269e+00,  1.39206374e+00,  9.15873051e-01,  ...,
            -2.06348225e-02,  1.11112073e-02,  2.17460394e-01],
           ...,
           [-4.96825397e-01, -4.80952382e-01, -4.33333218e-01,  ...,
            -4.80952382e-01, -4.96825397e-01, -4.96825397e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.80952382e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.96825397e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01]],

          [[ 1.91626441e+00,  2.06119204e+00,  1.70692456e+00,  ...,
             1.27214205e+00,  1.15942061e+00,  1.06280196e+00],
           [ 1.72302771e+00,  1.88405824e+00,  1.83574903e+00,  ...,
             1.07890511e+00,  1.06280196e+00,  1.04669893e+00],
           [ 1.94847047e+00,  1.91626441e+00,  1.69082153e+00,  ...,
             1.19162667e+00,  1.20772982e+00,  1.30434811e+00],
           ...,
           [-3.22059989e-02, -4.83090580e-02, -3.22059989e-02,  ...,
            -6.44121096e-02, -8.05151686e-02, -8.05151686e-02],
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -3.22059989e-02],
           [-6.44121096e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -1.61029361e-02]],

          [[ 2.10045004e+00,  2.08545780e+00,  1.81559265e+00,  ...,
             1.84557760e+00,  1.80060017e+00,  1.74063015e+00],
           [ 1.96551764e+00,  1.92054021e+00,  1.96551764e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.81559265e+00],
           [ 2.08545780e+00,  1.96551764e+00,  1.96551764e+00,  ...,
             1.95052516e+00,  1.95052516e+00,  1.96551764e+00],
           ...,
           [ 2.11394474e-01,  1.21439442e-01,  1.81409463e-01,  ...,
             2.11394474e-01,  2.11394474e-01,  2.11394474e-01],
           [ 2.26386964e-01,  1.51424453e-01,  1.81409463e-01,  ...,
             2.26386964e-01,  2.26386964e-01,  2.41379470e-01],
           [ 1.81409463e-01,  1.66416958e-01,  1.96401969e-01,  ...,
             1.96401969e-01,  2.11394474e-01,  2.26386964e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0517 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 57, vnnlib ID: 57 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
         -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [645]; unstable size 645; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 263, 1, 645] with unstable size 262 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 645] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 645] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [262]; unstable size 262; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 262] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 262] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.42895651,  4.10993195, -0.60754919, -0.13815880, -0.32017195,
          1.23225951, -0.67439401,  4.97595978,  2.89095974]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
         -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.12it/s]100%|██████████| 1/1 [00:00<00:00,  8.11it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.49737930, -22.43238258, -17.16550827, -16.42162704, -17.18960381,
          -16.38314819, -18.64624214, -17.14737320, -23.54323959, -21.05616760],
         [-21.49737930, -22.43238258, -17.16550827, -16.42162704, -17.18960381,
          -16.38314819, -18.64624214, -17.14737320, -23.54323959, -21.05616760]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.78236008, 0.03847885, 0.80645561, 0.76422501]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1262 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 15.55583381652832
alpha/beta optimization time: 1.233628749847412
initial alpha-crown bounds: tensor([[ 3.51031208,  4.22539663, -0.55175006, -0.12316954, -0.26672769,
          1.27698314, -0.59470487,  5.09363079,  2.98586178]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 4 ; Worst class: (+ rhs) -0.5947048664093018
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5746293067932
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.57458925247192
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.57456636428833
Verifying property 2 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.55175006]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
        -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.55175006]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 645
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 256
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 924
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.989738464355469e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5517464876174927
10 lb beta sum: 0.0, worst -0.5517451763153076
Time: prepare 0.0002    bound 0.0901    transfer 0.0001    finalize 0.0001    func 0.0905    
Accumulated time: func 0.0905    prepare 0.0002    bound 0.0901    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] 
split level 1: [/input-12, 24] 
split level 2: [/input-12, 53] 
split level 3: [/input-12, 85] 
split level 4: [/input-12, 34] 
split level 5: [/input-12, 72] 
split level 6: [/input-12, 83] 
split level 7: [/input-12, 17] 
split level 8: [/input-12, 7] 
split level 9: [/input-12, 4] 
split level 10: [/input-12, 92] 
split level 11: [/input-8, 1683] 
split level 12: [/input-8, 1651] 
split level 13: [/input-8, 1635] 
split level 14: [/input-8, 1963] 
split level 15: [/input-8, 1643] 
split level 16: [/input-8, 1627] 
split level 17: [/input-8, 1652] 
split level 18: [/input-8, 1636] 
split level 19: [/input-8, 227] 
split level 20: [/input-8, 219] 
split level 21: [/input-8, 416] 
split level 22: [/input-8, 1691] 
split level 23: [/input-8, 1628] 
split level 24: [/input-12, 71] 
split level 25: [/input-8, 1692] 
split level 26: [/input-8, 844] 
split level 27: [/input-8, 212] 
split level 28: [/input-8, 1644] 
split level 29: [/input-8, 1637] 
split level 30: [/input-8, 218] 
split level 31: [/input-8, 1363] 
split level 32: [/input-8, 394] 
split level 33: [/input-8, 1946] 
split level 34: [/input-8, 1645] 
split level 35: [/input-8, 419] 
split level 36: [/input-8, 211] 
split level 37: [/input-8, 417] 
split level 38: [/input-8, 1650] 
split level 39: [/input-8, 48] 
split level 40: [/input-8, 828] 
split level 41: [/input-8, 1658] 
split level 42: [/input-8, 1716] 
split level 43: [/input-8, 1661] 
split level 44: [/input-8, 1619] 
split level 45: [/input-8, 1708] 
split level 46: [/input-8, 469] 
split level 47: [/input-8, 57] 
split level 48: [/input-8, 1620] 
split level 49: [/input-8, 1387] 
split level 50: [/input-8, 1953] 
split level 51: [/input-8, 1653] 
split level 52: [/input-12, 6] 
split level 53: [/input-8, 201] 
split level 54: [/input-8, 205] 
split level 55: [/input-8, 395] 
split level 56: [/input-8, 1669] 
split level 57: [/input-8, 921] 
split level 58: [/input-8, 229] 
split level 59: [/input-8, 1970] 
split level 60: [/input-8, 425] 
split level 61: [/input-8, 206] 
split level 62: [/input-8, 434] 
split level 63: [/input-8, 222] 
split level 64: [/input-8, 246] 
split level 65: [/input-8, 186] 
split level 66: [/input-8, 204] 
split level 67: [/input-8, 194] 
split level 68: [/input-8, 253] 
split level 69: [/input-8, 499] 
split level 70: [/input, 2985] 
split level 71: [/input, 89] 
split level 72: [/input-8, 1323] 
split level 73: [/input-8, 1576] 
split level 74: [/input, 2986] 
split level 75: [/input-8, 164] 
split level 76: [/input-8, 214] 
split level 77: [/input-8, 51] 
split level 78: [/input, 2906] 
split level 79: [/input-8, 1673] 
split level 80: [/input-8, 238] 
split level 81: [/input-8, 1662] 
split level 82: [/input-8, 254] 
split level 83: [/input-8, 200] 
split level 84: [/input-8, 23] 
split level 85: [/input-8, 349] 
split level 86: [/input-8, 1521] 
split level 87: [/input-12, 56] 
split level 88: [/input-8, 407] 
split level 89: [/input-8, 393] 
split level 90: [/input-8, 424] 
split level 91: [/input-8, 1378] 
split level 92: [/input, 75] 
split level 93: [/input-8, 187] 
split level 94: [/input, 2378] 
split level 95: [/input-8, 41] 
split level 96: [/input-8, 255] 
split level 97: [/input, 1320] 
split level 98: [/input, 2871] 
split level 99: [/input-8, 342] 
split level 100: [/input-8, 129] 
split level 101: [/input-8, 723] 
split level 102: [/input-8, 161] 
split level 103: [/input-8, 1979] 
split level 104: [/input, 138] 
split level 105: [/input, 391] 
split level 106: [/input, 130] 
split level 107: [/input, 2380] 
split level 108: [/input-8, 1370] 
split level 109: [/input-8, 1759] 
split level 110: [/input-8, 714] 
split level 111: [/input-8, 1250] 
split level 112: [/input-8, 223] 
split level 113: [/input-8, 188] 
split level 114: [/input, 1845] 
split level 115: [/input, 3018] 
split level 116: [/input, 104] 
split level 117: [/input-8, 1579] 
split level 118: [/input, 1942] 
split level 119: [/input-8, 171] 
split level 120: [/input-8, 209] 
split level 121: [/input, 1410] 
split level 122: [/input-8, 1362] 
split level 123: [/input-8, 930] 
split level 124: [/input-8, 207] 
split level 125: [/input-8, 61] 
split level 126: [/input-8, 1566] 
split level 127: [/input, 140] 
split level 128: [/input, 41] 
split level 129: [/input-8, 1666] 
split level 130: [/input, 1669] 
split level 131: [/input, 2952] 
split level 132: [/input, 2477] 
split level 133: [/input-8, 1322] 
split level 134: [/input-8, 216] 
split level 135: [/input, 74] 
split level 136: [/input, 2203] 
split level 137: [/input-8, 1159] 
split level 138: [/input-8, 195] 
split level 139: [/input, 2958] 
split level 140: [/input, 2953] 
split level 141: [/input-8, 730] 
split level 142: [/input, 1864] 
split level 143: [/input-8, 1343] 
split level 144: [/input, 732] 
split level 145: [/input, 45] 
split level 146: [/input-8, 245] 
split level 147: [/input, 71] 
split level 148: [/input-8, 196] 
split level 149: [/input, 3541] 
split level 150: [/input, 1305] 
split level 151: [/input, 1879] 
split level 152: [/input, 177] 
split level 153: [/input, 470] 
split level 154: [/input, 2689] 
split level 155: [/input-8, 1665] 
split level 156: [/input-8, 1717] 
split level 157: [/input-8, 198] 
split level 158: [/input, 2156] 
split level 159: [/input, 1483] 
split level 160: [/input, 1827] 
split level 161: [/input, 1953] 
split level 162: [/input, 1022] 
split level 163: [/input, 2397] 
split level 164: [/input, 1878] 
split level 165: [/input, 1910] 
split level 166: [/input, 1925] 
split level 167: [/input, 1338] 
split level 168: [/input, 37] 
split level 169: [/input, 3527] 
split level 170: [/input, 2823] 
split level 171: [/input-8, 199] 
split level 172: [/input-8, 1944] 
split level 173: [/input, 188] 
split level 174: [/input, 1898] 
split level 175: [/input, 1416] 
split level 176: [/input, 360] 
split level 177: [/input, 1064] 
split level 178: [/input, 1146] 
split level 179: [/input, 204] 
split level 180: [/input, 2493] 
split level 181: [/input, 136] 
split level 182: [/input, 1894] 
split level 183: [/input, 2758] 
split level 184: [/input, 203] 
split level 185: [/input, 1882] 
split level 186: [/input, 3019] 
split level 187: [/input, 2824] 
split level 188: [/input, 1922] 
split level 189: [/input, 2674] 
split level 190: [/input, 1952] 
split level 191: [/input, 748] 
split level 192: [/input, 1032] 
split level 193: [/input, 1905] 
split level 194: [/input, 1400] 
split level 195: [/input, 1080] 
split level 196: [/input, 216] 
split level 197: [/input, 2215] 
split level 198: [/input, 1130] 
split level 199: [/input, 1846] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5515990257263184
10 lb beta sum: 0.0, worst -0.5515975952148438
Time: prepare 0.0127    bound 0.1015    transfer 0.0007    finalize 0.0027    func 0.1202    
Accumulated time: func 0.2108    prepare 0.0231    bound 0.1916    transfer 0.0008    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.19856393) min lb tensor(-0.55159593)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010269880294799805 
BICCOS Cumulative time: 0.010269880294799805
Preprocessing time: 0.009914636611938477 Inference time: 8.177757263183594e-05 Add cuts time: 5.602836608886719e-05 Cut analysis time: 0.000217437744140625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.53793 (1), -0.53784 (1), -0.53750 (1), -0.53739 (1), -0.53730 (1), -0.53662 (1), -0.53626 (1), -0.53594 (1), -0.53518 (1), -0.53446 (1), -0.53445 (1), -0.53430 (1), -0.53380 (1), -0.53343 (1), -0.53274 (1), -0.53200 (1), -0.53140 (1), -0.53086 (1), -0.53082 (1), -0.53069 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5282    set_bounds 0.0102    solve 0.1203    add 0.0695    
Accumulated time: pickout 0.0003    decision 0.5282    set_bounds 0.0102    solve 0.1203    add 0.0695    
Current (lb-rhs): -0.5379338264465332
50 domains visited
Cumulative time: 0.8345081806182861

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 85] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 53] [/input-12, 85] [/input-12, 85] [/input-12, 53] [/input-12, 85] [/input-12, 53] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 53] 
split level 3: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 85] [/input-12, 34] [/input-12, 34] [/input-12, 72] [/input-12, 53] [/input-12, 53] [/input-12, 34] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5343009233474731
10 lb beta sum: 0.1711643934249878, worst -0.5342142581939697
Time: prepare 0.0068    bound 0.1177    transfer 0.0007    finalize 0.0022    func 0.1301    
Accumulated time: func 0.3408    prepare 0.0301    bound 0.3093    transfer 0.0015    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.35153145) min lb tensor(-0.53419948)
Number of Verified Splits: 50 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.014707565307617188 
BICCOS Cumulative time: 0.024977445602416992
Preprocessing time: 0.01159358024597168 Inference time: 0.001779794692993164 Add cuts time: 0.0011098384857177734 Cut analysis time: 0.0002243518829345703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26690 (2), -0.26645 (2), -0.26525 (2), -0.26480 (2), -0.26423 (2), -0.26118 (2), -0.25832 (2), -0.25823 (2), -0.25799 (2), -0.25591 (2), -0.25322 (2), -0.25117 (2), -0.25049 (2), -0.24999 (2), -0.24934 (2), -0.24767 (2), -0.24743 (2), -0.24732 (2), -0.24730 (2), -0.24688 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0125    solve 0.1301    add 0.0766    
Accumulated time: pickout 0.0013    decision 0.5478    set_bounds 0.0227    solve 0.2505    add 0.1461    
Current (lb-rhs): -0.26690250635147095
100 domains visited
Cumulative time: 1.0892536640167236

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 53] 
split level 2: [/input-12, 53] [/input-12, 53] [/input-12, 85] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 53] [/input-12, 34] [/input-12, 34] 
split level 3: [/input-12, 72] [/input-12, 83] [/input-12, 72] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 72] [/input-12, 72] [/input-12, 83] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23404885828495026, worst -0.26690250635147095
10 lb beta sum: 0.23404885828495026, worst -0.26766735315322876
Time: prepare 0.0157    bound 0.1179    transfer 0.0007    finalize 0.0020    func 0.1395    
Accumulated time: func 0.4803    prepare 0.0461    bound 0.4272    transfer 0.0021    finalize 0.0070    
all_split False
======================Cut inference begins======================
max lb tensor(0.31539056) min lb tensor(-0.26521415)
Number of Verified Splits: 65 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 2
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.015769243240356445 
BICCOS Cumulative time: 0.04074668884277344
Preprocessing time: 0.011385679244995117 Inference time: 0.0027649402618408203 Add cuts time: 0.0013136863708496094 Cut analysis time: 0.00030493736267089844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05868 (3), -0.05855 (3), -0.05511 (3), -0.05445 (3), -0.05428 (3), -0.05282 (3), -0.04822 (3), -0.04574 (3), -0.04488 (3), -0.04480 (3), -0.04467 (3), -0.04462 (3), -0.04462 (3), -0.04439 (3), -0.04361 (3), -0.04348 (3), -0.04320 (3), -0.04108 (3), -0.04091 (3), -0.04060 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0192    set_bounds 0.0151    solve 0.1395    add 0.0835    
Accumulated time: pickout 0.0022    decision 0.5670    set_bounds 0.0378    solve 0.3900    add 0.2296    
Current (lb-rhs): -0.05867989361286163
150 domains visited
Cumulative time: 1.3634669780731201

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 53] [/input-12, 53] [/input-12, 85] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 85] 
split level 2: [/input-12, 83] [/input-12, 83] [/input-12, 72] [/input-12, 72] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 34] 
split level 3: [/input-12, 7] [/input-12, 7] [/input-12, 83] [/input-12, 83] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.058680057525634766
10 lb beta sum: 0.08367695659399033, worst -0.3056793808937073
Time: prepare 0.0055    bound 0.1203    transfer 0.0007    finalize 0.0017    func 0.1308    
Accumulated time: func 0.6111    prepare 0.0518    bound 0.5475    transfer 0.0028    finalize 0.0087    
all_split False
======================Cut inference begins======================
max lb tensor(0.40255547) min lb tensor(-0.04527807)
Number of Verified Splits: 368 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 7
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.03585958480834961 
BICCOS Cumulative time: 0.07660627365112305
Preprocessing time: 0.01140904426574707 Inference time: 0.018793821334838867 Add cuts time: 0.005220651626586914 Cut analysis time: 0.0004360675811767578
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0008    decision 0.0194    set_bounds 0.0153    solve 0.1309    add 0.0224    
Accumulated time: pickout 0.0030    decision 0.5863    set_bounds 0.0531    solve 0.5209    add 0.2519    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 85, 31]), tensor([-1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([1.88685601e-14, 1.36684433e-01, 1.09171137e-01, 4.10109252e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 85, 31]), tensor([-1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.88685601e-14, 1.36684433e-01, 1.09171137e-01, 1.42713357e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 85, 31]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.88685601e-14, 1.36684433e-01, 1.41220018e-01, 4.13966984e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 85, 31]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.88685601e-14, 1.36684433e-01, 1.41220018e-01, 5.55964112e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 34]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.88685601e-14, 9.18587148e-02, 5.18120974e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 34, 31]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.88685601e-14, 9.18587148e-02, 1.55005977e-01, 3.99892688e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 34, 31]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.88685601e-14, 9.18587148e-02, 1.55005977e-01, 7.82046616e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 31]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.49912269e-20, 6.91630840e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 31]), tensor([1., 1.]), tensor([0, 0]), tensor([1.49912269e-20, 4.25247988e-03]), tensor([0, 1]))}
Shallow branching resets to n domains:  9
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4491654634475708
10 lb beta sum: 0.17614884674549103, worst -0.44851231575012207
Time: prepare 0.0004    bound 0.1188    transfer 0.0002    finalize 0.0002    func 0.1198    
Accumulated time: func 0.7309    prepare 0.0522    bound 0.6664    transfer 0.0030    finalize 0.0089    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 53] 
split level 1: [/input-12, 85] [/input-12, 85] 
split level 2: [/input-12, 83] [/input-12, 34] 
split level 3: [/input-12, 17] [/input-12, 72] 
split level 4: [/input-12, 7] [/input-12, 83] 
split level 5: [/input-12, 4] [/input-12, 7] 
split level 6: [/input-12, 92] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.20507590472698212, worst -0.14001119136810303
10 lb beta sum: 0.20540618896484375, worst -0.11077630519866943
Time: prepare 0.0096    bound 0.1157    transfer 0.0006    finalize 0.0013    func 0.1288    
Accumulated time: func 0.8597    prepare 0.0622    bound 0.7820    transfer 0.0036    finalize 0.0102    
all_split False
======================Cut inference begins======================
max lb tensor(0.64062911) min lb tensor(-0.11028743)
Number of Verified Splits: 249 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.21004866063594818, worst -0.34988725185394287
10 lb beta sum: 0.3313376009464264, worst -0.38983023166656494
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 7
#cuts 4-6: 16
#cuts 7-9: 18
#cuts >= 20: 0
BICCOS time: 0.4151918888092041 
BICCOS Cumulative time: 0.49179816246032715
Preprocessing time: 0.006271839141845703 Inference time: 0.3997325897216797 Add cuts time: 0.0073223114013671875 Cut analysis time: 0.0018651485443115234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11029 (7), -0.09266 (7), -0.05665 (7), -0.05055 (7), -0.02001 (7), -0.01260 (7), -0.01230 (7), 
Length of domains: 7
Time: pickout 0.0006    decision 0.0210    set_bounds 0.0186    solve 0.1289    add 0.0009    
Accumulated time: pickout 0.0036    decision 0.6073    set_bounds 0.0717    solve 0.6498    add 0.2528    
Current (lb-rhs): -0.11028742790222168
157 domains visited
Cumulative time: 2.3149993419647217

BaB round 2
batch: 7
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
split level 1: [/input-12, 92] [/input-8, 1683] [/input-12, 92] [/input-8, 1683] [/input-8, 1963] [/input-12, 92] [/input-12, 92] 
split level 2: [/input-12, 71] [/input-8, 1636] [/input-8, 1963] [/input-12, 92] [/input-12, 92] [/input-8, 1636] [/input-8, 1691] 
split level 3: [/input-8, 1627] [/input-8, 1627] [/input-8, 1691] [/input-8, 1627] [/input-8, 1691] [/input-8, 1627] [/input-8, 1692] 
split level 4: [/input-8, 419] [/input-8, 1644] [/input-8, 1946] [/input-8, 1636] [/input-8, 1946] [/input-8, 1644] [/input-8, 1946] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0644267201423645
10 lb beta sum: 0.0, worst -0.0637054443359375
Time: prepare 0.0046    bound 0.1244    transfer 0.0005    finalize 0.0014    func 0.1323    
Accumulated time: func 0.9920    prepare 0.0671    bound 0.9064    transfer 0.0041    finalize 0.0115    
all_split False
======================Cut inference begins======================
max lb tensor(0.17694712) min lb tensor(-0.06337970)
Number of Verified Splits: 185 of 224
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 7
#cuts 4-6: 3
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.026917219161987305 
BICCOS Cumulative time: 0.5187153816223145
Preprocessing time: 0.006662845611572266 Inference time: 0.017333507537841797 Add cuts time: 0.002229452133178711 Cut analysis time: 0.0006914138793945312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06338 (12), -0.06072 (12), -0.05043 (12), -0.04874 (12), -0.04794 (12), -0.04782 (12), -0.04764 (12), -0.04705 (12), -0.04337 (12), -0.03805 (12), -0.03760 (12), -0.03622 (12), -0.03605 (12), -0.03557 (12), -0.03482 (12), -0.03452 (12), -0.03417 (12), -0.03018 (12), -0.03004 (12), -0.02945 (12), 
Length of domains: 39
Time: pickout 0.0010    decision 0.0189    set_bounds 0.0183    solve 0.1324    add 0.0010    
Accumulated time: pickout 0.0046    decision 0.6262    set_bounds 0.0900    solve 0.7822    add 0.2539    
Current (lb-rhs): -0.06337970495223999
196 domains visited
Cumulative time: 2.514761447906494

BaB round 3
batch: 39
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1692] [/input-8, 1692] [/input-8, 1635] [/input-8, 1683] [/input-8, 1692] [/input-8, 1692] [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] [/input-8, 1692] 
split level 1: [/input-8, 1627] [/input-12, 71] [/input-12, 92] [/input-12, 71] [/input-12, 71] [/input-8, 1627] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-8, 1627] 
split level 2: [/input-12, 71] [/input-8, 930] [/input-8, 1963] [/input-8, 1636] [/input-8, 930] [/input-12, 71] [/input-8, 930] [/input-8, 1636] [/input-8, 930] [/input-12, 71] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04306018352508545
10 lb beta sum: 0.0, worst -0.042645037174224854
Time: prepare 0.0061    bound 0.1229    transfer 0.0009    finalize 0.0016    func 0.1342    
Accumulated time: func 1.1262    prepare 0.0734    bound 1.0293    transfer 0.0050    finalize 0.0132    
all_split False
======================Cut inference begins======================
max lb tensor(0.06342158) min lb tensor(-0.04242408)
Number of Verified Splits: 219 of 312
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 12
#cuts 4-6: 3
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.03595709800720215 
BICCOS Cumulative time: 0.5546724796295166
Preprocessing time: 0.008978128433227539 Inference time: 0.02454662322998047 Add cuts time: 0.0017976760864257812 Cut analysis time: 0.0006346702575683594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04242 (15), -0.03924 (15), -0.03607 (15), -0.03477 (15), -0.03304 (15), -0.03164 (15), -0.02956 (15), -0.02863 (15), -0.02706 (15), -0.02667 (15), -0.02663 (15), -0.02621 (15), -0.02600 (15), -0.02347 (15), -0.02299 (15), -0.02241 (15), -0.02235 (15), -0.02167 (15), -0.02086 (15), -0.02066 (15), 
Length of domains: 93
Time: pickout 0.0013    decision 0.0157    set_bounds 0.0243    solve 0.1343    add 0.0025    
Accumulated time: pickout 0.0060    decision 0.6420    set_bounds 0.1143    solve 0.9165    add 0.2564    
Current (lb-rhs): -0.04242408275604248
289 domains visited
Cumulative time: 2.7301337718963623

BaB round 4
batch: 93
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] [/input-8, 1627] [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] 
split level 1: [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 417] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03144979476928711
10 lb beta sum: 0.06473013013601303, worst -0.031212210655212402
Time: prepare 0.0073    bound 0.1428    transfer 0.0021    finalize 0.0016    func 0.1563    
Accumulated time: func 1.2826    prepare 0.0809    bound 1.1721    transfer 0.0072    finalize 0.0148    
all_split False
======================Cut inference begins======================
max lb tensor(0.28980267) min lb tensor(-0.03108788)
Number of Verified Splits: 313 of 372
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 16
#cuts 4-6: 3
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.05249190330505371 
BICCOS Cumulative time: 0.6071643829345703
Preprocessing time: 0.010591506958007812 Inference time: 0.038702964782714844 Add cuts time: 0.0024983882904052734 Cut analysis time: 0.0006990432739257812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03109 (17), -0.02748 (17), -0.02718 (17), -0.02408 (17), -0.02353 (17), -0.02277 (17), -0.01799 (17), -0.01794 (17), -0.01666 (17), -0.01479 (17), -0.01457 (17), -0.01432 (17), -0.01427 (17), -0.01400 (17), -0.01258 (17), -0.01208 (17), -0.01181 (17), -0.01137 (17), -0.01122 (17), -0.01112 (17), 
Length of domains: 59
Time: pickout 0.0020    decision 0.0201    set_bounds 0.0176    solve 0.1564    add 0.0012    
Accumulated time: pickout 0.0080    decision 0.6621    set_bounds 0.1319    solve 1.0729    add 0.2576    
Current (lb-rhs): -0.031087875366210938
348 domains visited
Cumulative time: 2.981581687927246

BaB round 5
batch: 59
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 921] [/input-8, 1708] 
split level 1: [/input-8, 1619] [/input-8, 1619] [/input-8, 1619] [/input-8, 1619] [/input-8, 1619] [/input-8, 419] [/input-8, 1619] [/input-8, 1619] [/input-8, 1708] [/input-8, 1619] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018964409828186035
10 lb beta sum: 0.09447358548641205, worst -0.015920013189315796
Time: prepare 0.0046    bound 0.1359    transfer 0.0005    finalize 0.0011    func 0.1436    
Accumulated time: func 1.4262    prepare 0.0857    bound 1.3080    transfer 0.0076    finalize 0.0159    
all_split False
======================Cut inference begins======================
max lb tensor(0.47309518) min lb tensor(-0.01584134)
Number of Verified Splits: 225 of 236
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 17
#cuts 4-6: 3
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.03804898262023926 
BICCOS Cumulative time: 0.6452133655548096
Preprocessing time: 0.006973981857299805 Inference time: 0.02889227867126465 Add cuts time: 0.0014977455139160156 Cut analysis time: 0.0006849765777587891
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01584 (19), -0.01510 (19), -0.01408 (19), -0.01335 (19), -0.01218 (19), -0.01130 (19), -0.00997 (19), -0.00908 (19), -0.00251 (19), -0.00176 (19), -0.00059 (19), 
Length of domains: 11
Time: pickout 0.0017    decision 0.0167    set_bounds 0.0108    solve 0.1437    add 0.0008    
Accumulated time: pickout 0.0096    decision 0.6788    set_bounds 0.1427    solve 1.2166    add 0.2583    
Current (lb-rhs): -0.01584133505821228
359 domains visited
Cumulative time: 3.194406747817993

BaB round 6
batch: 11
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] 
split level 1: [/input-8, 1644] [/input-8, 1953] [/input-8, 419] [/input-8, 1644] [/input-8, 419] [/input-8, 1953] [/input-8, 1953] [/input-8, 419] [/input-8, 1644] [/input-8, 419] 
split level 2: [/input-8, 1953] [/input-8, 1644] [/input-8, 1628] [/input-8, 419] [/input-8, 1953] [/input-8, 1628] [/input-8, 1644] [/input-8, 1953] [/input-8, 419] [/input-8, 1953] 
split level 3: [/input-8, 419] [/input-8, 419] [/input-8, 417] [/input-8, 1953] [/input-8, 1644] [/input-8, 417] [/input-8, 419] [/input-8, 417] [/input-8, 1953] [/input-8, 1644] 
split level 4: [/input-8, 417] [/input-8, 417] [/input-8, 1644] [/input-8, 417] [/input-8, 417] [/input-8, 1644] [/input-8, 417] [/input-8, 1644] [/input-8, 417] [/input-8, 417] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.0024725794792175293

all verified at 0th iter
Time: prepare 0.0066    bound 0.0052    transfer 0.0010    finalize 0.0015    func 0.0165    
Accumulated time: func 1.4427    prepare 0.0926    bound 1.3132    transfer 0.0086    finalize 0.0174    
all_split False
======================Cut inference begins======================
max lb tensor(0.05130345) min lb tensor(0.00247258)
Number of Verified Splits: 352 of 352
No cut inferred: All or none verified.
Total number of valid cuts: 23.
#cuts 1-3: 17
#cuts 4-6: 3
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.00992727279663086 
BICCOS Cumulative time: 0.6551406383514404
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0034    decision 0.0196    set_bounds 0.0228    solve 0.0166    add 0.0001    
Accumulated time: pickout 0.0130    decision 0.6984    set_bounds 0.1655    solve 1.2333    add 0.2584    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
359 domains visited
Cumulative time: 3.2680163383483887


Properties batch 3, size 1
Remaining timeout: 195.15705919265747
Verifying property 3 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.12316954]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
        -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.12316954]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 645
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 256
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 924
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.822845458984375e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12316912412643433
10 lb beta sum: 0.0, worst -0.12317252159118652
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0536    transfer 0.0001    finalize 0.0001    func 0.0541    
Accumulated time: func 0.0541    prepare 0.0002    bound 0.0536    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] 
split level 1: [/input-12, 83] 
split level 2: [/input-12, 34] 
split level 3: [/input-12, 18] 
split level 4: [/input-12, 85] 
split level 5: [/input-12, 6] 
split level 6: [/input-12, 7] 
split level 7: [/input-12, 72] 
split level 8: [/input-12, 31] 
split level 9: [/input-12, 49] 
split level 10: [/input-12, 4] 
split level 11: [/input-12, 57] 
split level 12: [/input-8, 1098] 
split level 13: [/input-12, 92] 
split level 14: [/input-12, 53] 
split level 15: [/input-12, 71] 
split level 16: [/input-8, 1683] 
split level 17: [/input-8, 395] 
split level 18: [/input-8, 1691] 
split level 19: [/input-8, 416] 
split level 20: [/input-8, 219] 
split level 21: [/input-8, 212] 
split level 22: [/input-8, 1698] 
split level 23: [/input-8, 227] 
split level 24: [/input-8, 394] 
split level 25: [/input-8, 406] 
split level 26: [/input-8, 132] 
split level 27: [/input-8, 417] 
split level 28: [/input-8, 714] 
split level 29: [/input-8, 723] 
split level 30: [/input-8, 211] 
split level 31: [/input-8, 629] 
split level 32: [/input-8, 425] 
split level 33: [/input-8, 393] 
split level 34: [/input-8, 1673] 
split level 35: [/input, 3099] 
split level 36: [/input-8, 419] 
split level 37: [/input-8, 1665] 
split level 38: [/input-8, 1323] 
split level 39: [/input-8, 1692] 
split level 40: [/input-12, 20] 
split level 41: [/input-8, 78] 
split level 42: [/input-8, 1666] 
split level 43: [/input-8, 61] 
split level 44: [/input-8, 1276] 
split level 45: [/input-8, 716] 
split level 46: [/input-8, 613] 
split level 47: [/input-8, 627] 
split level 48: [/input-8, 1697] 
split level 49: [/input-8, 1946] 
split level 50: [/input-8, 142] 
split level 51: [/input-8, 1576] 
split level 52: [/input, 1416] 
split level 53: [/input-8, 2034] 
split level 54: [/input, 1374] 
split level 55: [/input-8, 2028] 
split level 56: [/input, 1448] 
split level 57: [/input-8, 1730] 
split level 58: [/input-8, 1982] 
split level 59: [/input-8, 434] 
split level 60: [/input-8, 48] 
split level 61: [/input-8, 129] 
split level 62: [/input-8, 1084] 
split level 63: [/input-8, 1736] 
split level 64: [/input, 1879] 
split level 65: [/input-8, 844] 
split level 66: [/input-8, 1273] 
split level 67: [/input-8, 57] 
split level 68: [/input, 1400] 
split level 69: [/input-8, 1322] 
split level 70: [/input, 130] 
split level 71: [/input-8, 218] 
split level 72: [/input-8, 407] 
split level 73: [/input, 2269] 
split level 74: [/input, 1410] 
split level 75: [/input, 2622] 
split level 76: [/input-8, 1987] 
split level 77: [/input, 2796] 
split level 78: [/input-8, 1708] 
split level 79: [/input-8, 1157] 
split level 80: [/input-8, 456] 
split level 81: [/input-8, 1082] 
split level 82: [/input, 1864] 
split level 83: [/input-8, 1088] 
split level 84: [/input-8, 1159] 
split level 85: [/input-8, 398] 
split level 86: [/input, 812] 
split level 87: [/input, 2674] 
split level 88: [/input, 2670] 
split level 89: [/input, 421] 
split level 90: [/input, 2587] 
split level 91: [/input, 2952] 
split level 92: [/input, 1878] 
split level 93: [/input, 34] 
split level 94: [/input, 1563] 
split level 95: [/input-8, 1081] 
split level 96: [/input, 2638] 
split level 97: [/input, 1942] 
split level 98: [/input, 2779] 
split level 99: [/input, 1898] 
split level 100: [/input-8, 1275] 
split level 101: [/input, 2689] 
split level 102: [/input, 2218] 
split level 103: [/input, 2184] 
split level 104: [/input, 136] 
split level 105: [/input-8, 1759] 
split level 106: [/input, 788] 
split level 107: [/input, 1438] 
split level 108: [/input, 813] 
split level 109: [/input, 2750] 
split level 110: [/input, 119] 
split level 111: [/input, 3230] 
split level 112: [/input, 2685] 
split level 113: [/input, 1508] 
split level 114: [/input-8, 267] 
split level 115: [/input, 2697] 
split level 116: [/input-8, 229] 
split level 117: [/input-8, 424] 
split level 118: [/input, 152] 
split level 119: [/input, 221] 
split level 120: [/input, 2778] 
split level 121: [/input-8, 2038] 
split level 122: [/input, 1507] 
split level 123: [/input, 2871] 
split level 124: [/input, 1422] 
split level 125: [/input, 1450] 
split level 126: [/input, 2777] 
split level 127: [/input, 619] 
split level 128: [/input, 1064] 
split level 129: [/input, 2906] 
split level 130: [/input, 2797] 
split level 131: [/input, 2540] 
split level 132: [/input, 2932] 
split level 133: [/input, 228] 
split level 134: [/input-8, 808] 
split level 135: [/input, 1164] 
split level 136: [/input-8, 204] 
split level 137: [/input, 134] 
split level 138: [/input, 2794] 
split level 139: [/input, 786] 
split level 140: [/input, 220] 
split level 141: [/input, 2746] 
split level 142: [/input, 790] 
split level 143: [/input, 3527] 
split level 144: [/input, 2232] 
split level 145: [/input, 153] 
split level 146: [/input, 2980] 
split level 147: [/input-8, 1716] 
split level 148: [/input, 2732] 
split level 149: [/input, 1130] 
split level 150: [/input, 1894] 
split level 151: [/input, 2765] 
split level 152: [/input, 1925] 
split level 153: [/input, 1469] 
split level 154: [/input, 1882] 
split level 155: [/input, 216] 
split level 156: [/input, 1483] 
split level 157: [/input, 1862] 
split level 158: [/input, 2456] 
split level 159: [/input, 987] 
split level 160: [/input, 2747] 
split level 161: [/input, 2763] 
split level 162: [/input, 237] 
split level 163: [/input, 3149] 
split level 164: [/input-8, 481] 
split level 165: [/input, 2264] 
split level 166: [/input, 3973] 
split level 167: [/input-8, 143] 
split level 168: [/input, 2715] 
split level 169: [/input-8, 612] 
split level 170: [/input, 2251] 
split level 171: [/input, 893] 
split level 172: [/input, 305] 
split level 173: [/input, 2760] 
split level 174: [/input, 203] 
split level 175: [/input, 2705] 
split level 176: [/input, 2798] 
split level 177: [/input, 1146] 
split level 178: [/input, 177] 
split level 179: [/input, 1899] 
split level 180: [/input, 238] 
split level 181: [/input, 148] 
split level 182: [/input, 2698] 
split level 183: [/input, 2776] 
split level 184: [/input, 179] 
split level 185: [/input, 2234] 
split level 186: [/input, 2781] 
split level 187: [/input-8, 1953] 
split level 188: [/input-8, 368] 
split level 189: [/input, 1846] 
split level 190: [/input, 37] 
split level 191: [/input, 3013] 
split level 192: [/input, 2266] 
split level 193: [/input, 142] 
split level 194: [/input-8, 1662] 
split level 195: [/input, 49] 
split level 196: [/input, 1470] 
split level 197: [/input, 1490] 
split level 198: [/input-8, 1344] 
split level 199: [/input, 1148] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12313812971115112
10 lb beta sum: 0.0, worst -0.123135507106781
Time: prepare 0.0113    bound 0.0994    transfer 0.0008    finalize 0.0026    func 0.1167    
Accumulated time: func 0.1708    prepare 0.0216    bound 0.1530    transfer 0.0009    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(-0.03540331) min lb tensor(-0.12313426)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.009768962860107422 
BICCOS Cumulative time: 0.009768962860107422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11944 (1), -0.11921 (1), -0.11918 (1), -0.11910 (1), -0.11884 (1), -0.11875 (1), -0.11855 (1), -0.11833 (1), -0.11830 (1), -0.11821 (1), -0.11819 (1), -0.11776 (1), -0.11733 (1), -0.11667 (1), -0.11663 (1), -0.11643 (1), -0.11610 (1), -0.11566 (1), -0.11554 (1), -0.11544 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5310    set_bounds 0.0086    solve 0.1168    add 0.0666    
Accumulated time: pickout 0.0003    decision 0.5310    set_bounds 0.0086    solve 0.1168    add 0.0666    
Current (lb-rhs): -0.11944353580474854
50 domains visited
Cumulative time: 0.7919356822967529

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 83] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] 
split level 1: [/input-12, 83] [/input-12, 83] [/input-12, 85] [/input-12, 85] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] 
split level 2: [/input-12, 6] [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
split level 3: [/input-8, 1698] [/input-12, 6] [/input-12, 72] [/input-12, 72] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1115453839302063
10 lb beta sum: 0.0, worst -0.11152881383895874
Time: prepare 0.0119    bound 0.0984    transfer 0.0007    finalize 0.0022    func 0.1158    
Accumulated time: func 0.2866    prepare 0.0337    bound 0.2514    transfer 0.0016    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.09722221) min lb tensor(-0.11147040)
Number of Verified Splits: 8 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.012789249420166016 
BICCOS Cumulative time: 0.022558212280273438
Preprocessing time: 0.01147007942199707 Inference time: 0.0003643035888671875 Add cuts time: 0.00012731552124023438 Cut analysis time: 0.0008275508880615234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05446 (2), -0.05433 (2), -0.05411 (2), -0.05385 (2), -0.05308 (2), -0.05264 (2), -0.05237 (2), -0.05200 (2), -0.05193 (2), -0.05190 (2), -0.05183 (2), -0.05165 (2), -0.05139 (2), -0.05124 (2), -0.05101 (2), -0.05075 (2), -0.05074 (2), -0.05032 (2), -0.05031 (2), -0.05023 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0197    set_bounds 0.0133    solve 0.1159    add 0.0743    
Accumulated time: pickout 0.0013    decision 0.5507    set_bounds 0.0220    solve 0.2327    add 0.1410    
Current (lb-rhs): -0.054458677768707275
100 domains visited
Cumulative time: 1.0291664600372314

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 83] [/input-12, 36] [/input-12, 36] [/input-12, 83] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 83] [/input-12, 83] [/input-12, 85] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 85] 
split level 2: [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 85] [/input-12, 6] [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 6] 
split level 3: [/input-12, 72] [/input-8, 1698] [/input-12, 72] [/input-8, 1698] [/input-12, 72] [/input-8, 1698] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-8, 1698] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04602634906768799
10 lb beta sum: 0.038134001195430756, worst -0.06466815620660782
Time: prepare 0.0063    bound 0.1353    transfer 0.0007    finalize 0.0019    func 0.1474    
Accumulated time: func 0.4340    prepare 0.0403    bound 0.3868    transfer 0.0022    finalize 0.0069    
all_split False
======================Cut inference begins======================
max lb tensor(0.03650284) min lb tensor(-0.04320806)
Number of Verified Splits: 125 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.019884586334228516 
BICCOS Cumulative time: 0.04244279861450195
Preprocessing time: 0.01141667366027832 Inference time: 0.006012678146362305 Add cuts time: 0.002073526382446289 Cut analysis time: 0.00038170814514160156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01939 (3), -0.01938 (3), -0.01880 (3), -0.01871 (3), -0.01853 (3), -0.01845 (3), -0.01765 (3), -0.01665 (3), -0.01606 (3), -0.01591 (3), -0.01501 (3), -0.01430 (3), -0.01414 (3), -0.01338 (3), -0.01204 (3), -0.01199 (3), -0.01196 (3), -0.01149 (3), -0.01089 (3), -0.01007 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0194    set_bounds 0.0150    solve 0.1475    add 0.0917    
Accumulated time: pickout 0.0022    decision 0.5701    set_bounds 0.0370    solve 0.3802    add 0.2326    
Current (lb-rhs): -0.01939026080071926
150 domains visited
Cumulative time: 1.3237979412078857

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 36] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 34] [/input-12, 34] [/input-12, 6] [/input-12, 34] [/input-12, 34] [/input-12, 83] 
split level 2: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 85] [/input-12, 85] [/input-12, 72] [/input-12, 85] [/input-12, 6] [/input-12, 72] 
split level 3: [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-12, 6] [/input-12, 72] [/input-8, 1698] [/input-12, 72] [/input-12, 72] [/input-8, 1698] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01950693130493164
10 lb beta sum: 0.11802701652050018, worst -0.04228390380740166
Time: prepare 0.0065    bound 0.1389    transfer 0.0007    finalize 0.0020    func 0.1507    
Accumulated time: func 0.5847    prepare 0.0471    bound 0.5256    transfer 0.0029    finalize 0.0090    
all_split False
======================Cut inference begins======================
max lb tensor(0.03649759) min lb tensor(-0.01602653)
Number of Verified Splits: 322 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 8
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.03630518913269043 
BICCOS Cumulative time: 0.07874798774719238
Preprocessing time: 0.011585474014282227 Inference time: 0.018047571182250977 Add cuts time: 0.006127119064331055 Cut analysis time: 0.0005450248718261719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01124 (4), -0.01013 (4), -0.00988 (4), -0.00973 (4), -0.00938 (4), -0.00913 (4), -0.00859 (4), -0.00826 (4), -0.00795 (4), -0.00787 (4), -0.00764 (4), -0.00712 (4), -0.00694 (4), -0.00690 (4), -0.00658 (4), -0.00651 (4), -0.00647 (4), -0.00643 (4), -0.00641 (4), -0.00610 (4), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0209    set_bounds 0.0151    solve 0.1508    add 0.2298    
Accumulated time: pickout 0.0031    decision 0.5910    set_bounds 0.0520    solve 0.5309    add 0.4624    
Current (lb-rhs): -0.011243759654462337
200 domains visited
Cumulative time: 1.7778842449188232

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 83] [/input-12, 36] [/input-12, 34] [/input-12, 36] [/input-12, 36] [/input-12, 34] [/input-12, 36] 
split level 1: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 18] [/input-12, 34] [/input-12, 18] [/input-12, 34] [/input-12, 34] [/input-12, 18] [/input-12, 34] 
split level 2: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 85] [/input-12, 18] [/input-12, 85] [/input-12, 18] [/input-12, 18] [/input-12, 85] [/input-12, 18] 
split level 3: [/input-12, 6] [/input-12, 72] [/input-12, 85] [/input-12, 57] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 85] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.012191057205200195
10 lb beta sum: 0.2413647472858429, worst -0.0363474041223526
Time: prepare 0.0067    bound 0.1196    transfer 0.0017    finalize 0.0020    func 0.1327    
Accumulated time: func 0.7174    prepare 0.0540    bound 0.6452    transfer 0.0046    finalize 0.0110    
all_split False
======================Cut inference begins======================
max lb tensor(0.03790975) min lb tensor(-0.00584552)
Number of Verified Splits: 384 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 9
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.04104733467102051 
BICCOS Cumulative time: 0.11979532241821289
Preprocessing time: 0.011360645294189453 Inference time: 0.019436120986938477 Add cuts time: 0.009207487106323242 Cut analysis time: 0.001043081283569336
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0160    solve 0.1328    add 0.0283    
Accumulated time: pickout 0.0041    decision 0.6105    set_bounds 0.0681    solve 0.6637    add 0.4907    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  6, 36]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 1.85127128e-02, 4.00033444e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  6, 36, 83]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 1.85127128e-02, 1.67136658e-02, 3.56987566e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  6, 36, 83]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 1.85127128e-02, 1.67136658e-02, 8.47087987e-03]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  6, 36]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 1.87052358e-02, 4.04282063e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  6, 36, 83]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 1.87052358e-02, 1.66086424e-02, 3.61138433e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  6, 36, 83]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 1.87052358e-02, 1.66086424e-02, 8.48095305e-03]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31]), tensor([1.]), tensor([0]), tensor([5.75662906e-20]), tensor([0]))}
Shallow branching resets to n domains:  7
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12286466360092163
10 lb beta sum: 0.36642852425575256, worst -0.12248128652572632
Time: prepare 0.0004    bound 0.1368    transfer 0.0002    finalize 0.0002    func 0.1376    
Accumulated time: func 0.8550    prepare 0.0544    bound 0.7820    transfer 0.0048    finalize 0.0112    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] 
split level 1: [/input-12, 83] 
split level 2: [/input-12, 34] 
split level 3: [/input-12, 18] 
split level 4: [/input-12, 85] 
split level 5: [/input-12, 6] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 57] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23172038793563843, worst -0.04968523979187012
10 lb beta sum: 0.2543511986732483, worst -0.049499690532684326
Time: prepare 0.0097    bound 0.1310    transfer 0.0007    finalize 0.0013    func 0.1444    
Accumulated time: func 0.9994    prepare 0.0646    bound 0.9129    transfer 0.0055    finalize 0.0124    
all_split False
======================Cut inference begins======================
max lb tensor(0.05327232) min lb tensor(-0.04941165)
Number of Verified Splits: 197 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.23172038793563843, worst -0.08272027969360352
10 lb beta sum: 0.44010499119758606, worst -0.08259260654449463
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 50.
#cuts 1-3: 9
#cuts 4-6: 27
#cuts 7-9: 14
#cuts >= 20: 0
BICCOS time: 0.25547170639038086 
BICCOS Cumulative time: 0.37526702880859375
Preprocessing time: 0.006376743316650391 Inference time: 0.24111509323120117 Add cuts time: 0.00587916374206543 Cut analysis time: 0.002100706100463867
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04941 (8), -0.04920 (8), -0.04826 (8), -0.04781 (8), -0.04768 (8), -0.04704 (8), -0.04645 (8), -0.04562 (8), -0.04154 (8), -0.04144 (8), -0.03979 (8), -0.03887 (8), -0.03850 (8), -0.03827 (8), -0.03819 (8), -0.03662 (8), -0.02767 (8), -0.02649 (8), -0.02478 (8), -0.02403 (8), 
Length of domains: 59
Time: pickout 0.0005    decision 0.0225    set_bounds 0.0207    solve 0.1445    add 0.0011    
Accumulated time: pickout 0.0046    decision 0.6329    set_bounds 0.0888    solve 0.8082    add 0.4919    
Current (lb-rhs): -0.049411654472351074
259 domains visited
Cumulative time: 2.6177115440368652

BaB round 2
batch: 59
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
split level 1: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 71] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.041043996810913086
10 lb beta sum: 0.10630500316619873, worst -0.04054069519042969
Time: prepare 0.0034    bound 0.1314    transfer 0.0005    finalize 0.0011    func 0.1380    
Accumulated time: func 1.1374    prepare 0.0682    bound 1.0443    transfer 0.0060    finalize 0.0135    
all_split False
======================Cut inference begins======================
max lb tensor(0.02214420) min lb tensor(-0.04050660)
Number of Verified Splits: 139 of 236
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.055839717388153076
10 lb beta sum: 0.41665124893188477, worst -0.06228362023830414
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 78.
#cuts 1-3: 9
#cuts 4-6: 27
#cuts 7-9: 42
#cuts >= 20: 0
BICCOS time: 0.23201322555541992 
BICCOS Cumulative time: 0.6072802543640137
Preprocessing time: 0.006862640380859375 Inference time: 0.2095947265625 Add cuts time: 0.01188802719116211 Cut analysis time: 0.0036678314208984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04051 (10), -0.04038 (10), -0.03934 (10), -0.03890 (10), -0.03858 (10), -0.03788 (10), -0.03748 (10), -0.03735 (10), -0.03697 (10), -0.03663 (10), -0.03633 (10), -0.03608 (10), -0.03566 (10), -0.03562 (10), -0.03493 (10), -0.03434 (10), -0.03246 (10), -0.03236 (10), -0.03076 (10), -0.02993 (10), 
Length of domains: 97
Time: pickout 0.0015    decision 0.0139    set_bounds 0.0108    solve 0.1380    add 0.0013    
Accumulated time: pickout 0.0061    decision 0.6468    set_bounds 0.0995    solve 0.9463    add 0.4931    
Current (lb-rhs): -0.040506601333618164
356 domains visited
Cumulative time: 3.0164010524749756

BaB round 3
batch: 97
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 1: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03394508361816406
10 lb beta sum: 0.10831579566001892, worst -0.03351140022277832
Time: prepare 0.0057    bound 0.1406    transfer 0.0052    finalize 0.0021    func 0.1561    
Accumulated time: func 1.2935    prepare 0.0741    bound 1.1848    transfer 0.0112    finalize 0.0157    
all_split False
======================Cut inference begins======================
max lb tensor(0.03238595) min lb tensor(-0.03349221)
Number of Verified Splits: 266 of 388
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 20
#cuts 4-6: 18
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.04789900779724121 
BICCOS Cumulative time: 0.6551792621612549
Preprocessing time: 0.01105189323425293 Inference time: 0.02922797203063965 Add cuts time: 0.006262779235839844 Cut analysis time: 0.001356363296508789
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03349 (12), -0.03337 (12), -0.03238 (12), -0.03197 (12), -0.03156 (12), -0.03090 (12), -0.03058 (12), -0.03026 (12), -0.02998 (12), -0.02974 (12), -0.02941 (12), -0.02914 (12), -0.02875 (12), -0.02869 (12), -0.02807 (12), -0.02759 (12), -0.02572 (12), -0.02533 (12), -0.02530 (12), -0.02529 (12), 
Length of domains: 122
Time: pickout 0.0016    decision 0.0190    set_bounds 0.0176    solve 0.1563    add 0.0013    
Accumulated time: pickout 0.0077    decision 0.6658    set_bounds 0.1171    solve 1.1025    add 0.4944    
Current (lb-rhs): -0.033492207527160645
478 domains visited
Cumulative time: 3.2614543437957764

BaB round 4
batch: 122
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029082417488098145
10 lb beta sum: 0.1418052464723587, worst -0.033685922622680664
Time: prepare 0.0036    bound 0.1378    transfer 0.0005    finalize 0.0012    func 0.1447    
Accumulated time: func 1.4382    prepare 0.0779    bound 1.3226    transfer 0.0117    finalize 0.0168    
all_split False
======================Cut inference begins======================
max lb tensor(0.00674438) min lb tensor(-0.02864319)
Number of Verified Splits: 73 of 244
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 45.
#cuts 1-3: 23
#cuts 4-6: 18
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.018981218338012695 
BICCOS Cumulative time: 0.6741604804992676
Preprocessing time: 0.007091045379638672 Inference time: 0.007746458053588867 Add cuts time: 0.0026917457580566406 Cut analysis time: 0.0014519691467285156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02864 (13), -0.02841 (13), -0.02753 (13), -0.02737 (13), -0.02729 (13), -0.02705 (13), -0.02681 (13), -0.02619 (13), -0.02611 (13), -0.02588 (13), -0.02584 (13), -0.02532 (13), -0.02502 (13), -0.02498 (13), -0.02495 (13), -0.02451 (13), -0.02444 (13), -0.02430 (13), -0.02418 (13), -0.02405 (13), 
Length of domains: 171
Time: pickout 0.0021    decision 0.0180    set_bounds 0.0101    solve 0.1447    add 0.0016    
Accumulated time: pickout 0.0098    decision 0.6838    set_bounds 0.1272    solve 1.2472    add 0.4960    
Current (lb-rhs): -0.02864319086074829
649 domains visited
Cumulative time: 3.4576668739318848

BaB round 5
batch: 171
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027341485023498535
10 lb beta sum: 0.17313624918460846, worst -0.02691274881362915
Time: prepare 0.0066    bound 0.1394    transfer 0.0010    finalize 0.0017    func 0.1509    
Accumulated time: func 1.5891    prepare 0.0847    bound 1.4621    transfer 0.0127    finalize 0.0185    
all_split False
======================Cut inference begins======================
max lb tensor(0.31488079) min lb tensor(-0.02690220)
Number of Verified Splits: 65 of 342
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 9
#cuts 4-6: 9
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.019722461700439453 
BICCOS Cumulative time: 0.693882942199707
Preprocessing time: 0.009877443313598633 Inference time: 0.0067348480224609375 Add cuts time: 0.0022509098052978516 Cut analysis time: 0.0008592605590820312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02690 (14), -0.02649 (14), -0.02584 (14), -0.02560 (14), -0.02541 (14), -0.02523 (14), -0.02509 (14), -0.02453 (14), -0.02445 (14), -0.02424 (14), -0.02405 (14), -0.02390 (14), -0.02364 (14), -0.02337 (14), -0.02332 (14), -0.02323 (14), -0.02320 (14), -0.02316 (14), -0.02307 (14), -0.02307 (14), 
Length of domains: 277
Time: pickout 0.0021    decision 0.0201    set_bounds 0.0085    solve 0.1510    add 0.0016    
Accumulated time: pickout 0.0120    decision 0.7039    set_bounds 0.1357    solve 1.3983    add 0.4976    
Current (lb-rhs): -0.026902198791503906
926 domains visited
Cumulative time: 3.661405563354492

BaB round 6
batch: 277
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026022374629974365
10 lb beta sum: 0.18538618087768555, worst -0.03728785365819931
Time: prepare 0.0104    bound 0.1402    transfer 0.0013    finalize 0.0023    func 0.1579    
Accumulated time: func 1.7470    prepare 0.0953    bound 1.6023    transfer 0.0140    finalize 0.0208    
all_split False
======================Cut inference begins======================
max lb tensor(0.31752372) min lb tensor(-0.02550530)
Number of Verified Splits: 92 of 554
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 9
#cuts 4-6: 8
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.02919316291809082 
BICCOS Cumulative time: 0.7230761051177979
Preprocessing time: 0.015707015991210938 Inference time: 0.010036706924438477 Add cuts time: 0.0026242733001708984 Cut analysis time: 0.0008251667022705078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02551 (15), -0.02505 (15), -0.02457 (15), -0.02417 (15), -0.02390 (15), -0.02387 (15), -0.02376 (15), -0.02326 (15), -0.02323 (15), -0.02318 (15), -0.02289 (15), -0.02261 (15), -0.02251 (15), -0.02244 (15), -0.02240 (15), -0.02229 (15), -0.02209 (15), -0.02204 (15), -0.02203 (15), -0.02191 (15), 
Length of domains: 462
Time: pickout 0.0037    decision 0.0260    set_bounds 0.0240    solve 0.1580    add 0.0027    
Accumulated time: pickout 0.0157    decision 0.7298    set_bounds 0.1597    solve 1.5563    add 0.5003    
Current (lb-rhs): -0.02550530433654785
1388 domains visited
Cumulative time: 3.906156539916992

BaB round 7
batch: 462
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 419] [/input-8, 723] [/input-8, 723] [/input-8, 419] [/input-8, 1692] [/input-8, 723] [/input-8, 723] [/input-8, 723] [/input-8, 1698] [/input-8, 723] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.024671316146850586
10 lb beta sum: 0.19352145493030548, worst -0.024249911308288574
Time: prepare 0.0172    bound 0.1414    transfer 0.0046    finalize 0.0042    func 0.1736    
Accumulated time: func 1.9206    prepare 0.1127    bound 1.7437    transfer 0.0186    finalize 0.0250    
all_split False
======================Cut inference begins======================
max lb tensor(0.37782925) min lb tensor(-0.02423954)
Number of Verified Splits: 103 of 924
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 10
#cuts 4-6: 6
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.04436612129211426 
BICCOS Cumulative time: 0.7674422264099121
Preprocessing time: 0.02933526039123535 Inference time: 0.012101411819458008 Add cuts time: 0.002122640609741211 Cut analysis time: 0.0008068084716796875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02424 (16), -0.02366 (16), -0.02331 (16), -0.02297 (16), -0.02279 (16), -0.02243 (16), -0.02237 (16), -0.02234 (16), -0.02231 (16), -0.02204 (16), -0.02180 (16), -0.02179 (16), -0.02158 (16), -0.02158 (16), -0.02127 (16), -0.02113 (16), -0.02111 (16), -0.02110 (16), -0.02108 (16), -0.02106 (16), 
Length of domains: 821
Time: pickout 0.0077    decision 0.0364    set_bounds 0.0386    solve 0.1738    add 0.0038    
Accumulated time: pickout 0.0235    decision 0.7662    set_bounds 0.1984    solve 1.7301    add 0.5041    
Current (lb-rhs): -0.024239540100097656
2209 domains visited
Cumulative time: 4.2128283977508545

BaB round 8
batch: 821
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 723] [/input-8, 419] [/input-8, 723] [/input-8, 419] [/input-8, 419] [/input-8, 419] [/input-8, 1673] [/input-8, 723] [/input-8, 1692] [/input-8, 419] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.022931694984436035
10 lb beta sum: 0.2820590138435364, worst -0.022520601749420166
Time: prepare 0.0310    bound 0.1598    transfer 0.0048    finalize 0.0074    func 0.2144    
Accumulated time: func 2.1350    prepare 0.1439    bound 1.9035    transfer 0.0234    finalize 0.0324    
all_split False
======================Cut inference begins======================
max lb tensor(0.39061469) min lb tensor(-0.02250898)
Number of Verified Splits: 659 of 1642
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.14054155349731445 
BICCOS Cumulative time: 0.9079837799072266
Preprocessing time: 0.0493621826171875 Inference time: 0.08192825317382812 Add cuts time: 0.008734464645385742 Cut analysis time: 0.0005166530609130859
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02251 (17), -0.02180 (17), -0.02164 (17), -0.02160 (17), -0.02130 (17), -0.02110 (17), -0.02097 (17), -0.02095 (17), -0.02089 (17), -0.02064 (17), -0.02064 (17), -0.02058 (17), -0.02057 (17), -0.02034 (17), -0.02028 (17), -0.02019 (17), -0.02002 (17), -0.02001 (17), -0.01998 (17), -0.01989 (17), 
Length of domains: 983
Time: pickout 0.0135    decision 0.0570    set_bounds 0.2250    solve 0.2147    add 0.0048    
Accumulated time: pickout 0.0370    decision 0.8233    set_bounds 0.4233    solve 1.9449    add 0.5089    
Current (lb-rhs): -0.022508978843688965
3192 domains visited
Cumulative time: 4.873224258422852

BaB round 9
batch: 983
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 419] [/input-8, 1698] [/input-8, 723] [/input-8, 723] [/input-8, 723] [/input-8, 1692] [/input-8, 419] [/input-8, 1692] [/input-8, 1673] [/input-8, 1673] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2290029674768448, worst -0.022055447101593018
10 lb beta sum: 1.4985833168029785, worst -0.01991581916809082
Time: prepare 0.0832    bound 0.1681    transfer 0.0086    finalize 0.0084    func 0.2813    
Accumulated time: func 2.4163    prepare 0.2274    bound 2.0716    transfer 0.0319    finalize 0.0409    
all_split False
======================Cut inference begins======================
max lb tensor(0.98136032) min lb tensor(-0.01990634)
Number of Verified Splits: 1710 of 1966
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.2974100112915039 
BICCOS Cumulative time: 1.2053937911987305
Preprocessing time: 0.05924105644226074 Inference time: 0.21840548515319824 Add cuts time: 0.019486665725708008 Cut analysis time: 0.00027680397033691406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01991 (18), -0.01909 (18), -0.01907 (18), -0.01846 (18), -0.01795 (18), -0.01765 (18), -0.01732 (18), -0.01717 (18), -0.01706 (18), -0.01692 (18), -0.01681 (18), -0.01677 (18), -0.01668 (18), -0.01662 (18), -0.01658 (18), -0.01652 (18), -0.01644 (18), -0.01630 (18), -0.01622 (18), -0.01621 (18), 
Length of domains: 256
Time: pickout 0.0176    decision 0.0631    set_bounds 0.0830    solve 0.2816    add 0.0018    
Accumulated time: pickout 0.0545    decision 0.8864    set_bounds 0.5063    solve 2.2265    add 0.5107    
Current (lb-rhs): -0.019906342029571533
3448 domains visited
Cumulative time: 5.63047981262207

BaB round 10
batch: 256
splitting decisions: 
split level 0: [/input-8, 212] [/input-8, 1673] [/input-8, 212] [/input-8, 212] [/input-8, 419] [/input-8, 425] [/input-8, 419] [/input-8, 425] [/input-8, 212] [/input-8, 1692] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02110755443572998

all verified at 2th iter
Time: prepare 0.0101    bound 0.0228    transfer 0.0022    finalize 0.1237    func 0.1621    
Accumulated time: func 2.5785    prepare 0.2377    bound 2.0944    transfer 0.0341    finalize 0.1645    
all_split False
======================Cut inference begins======================
max lb tensor(0.09441721) min lb tensor(0.05796124)
Number of Verified Splits: 512 of 512
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.015436410903930664 
BICCOS Cumulative time: 1.2208302021026611
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0046    decision 0.0253    set_bounds 0.0216    solve 0.1623    add 0.0009    
Accumulated time: pickout 0.0592    decision 0.9117    set_bounds 0.5279    solve 2.3888    add 0.5116    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
3448 domains visited
Cumulative time: 5.863319158554077


Properties batch 4, size 1
Remaining timeout: 189.1191921234131
Verifying property 4 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.26672769]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
        -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.26672769]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 645
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 256
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 924
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00013518333435058594
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2667273283004761
10 lb beta sum: 0.0, worst -0.26673030853271484
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0538    transfer 0.0001    finalize 0.0001    func 0.0543    
Accumulated time: func 0.0543    prepare 0.0002    bound 0.0538    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 85] 
split level 1: [/input-12, 4] 
split level 2: [/input-12, 17] 
split level 3: [/input-12, 34] 
split level 4: [/input-12, 83] 
split level 5: [/input-12, 56] 
split level 6: [/input-12, 97] 
split level 7: [/input-12, 31] 
split level 8: [/input-12, 7] 
split level 9: [/input-8, 1683] 
split level 10: [/input-12, 2] 
split level 11: [/input-12, 72] 
split level 12: [/input-12, 24] 
split level 13: [/input-12, 92] 
split level 14: [/input-8, 219] 
split level 15: [/input-8, 1249] 
split level 16: [/input-12, 71] 
split level 17: [/input-8, 164] 
split level 18: [/input-8, 227] 
split level 19: [/input-8, 218] 
split level 20: [/input-8, 1691] 
split level 21: [/input-8, 212] 
split level 22: [/input-8, 211] 
split level 23: [/input-8, 349] 
split level 24: [/input-8, 1378] 
split level 25: [/input-8, 1576] 
split level 26: [/input-8, 41] 
split level 27: [/input-8, 172] 
split level 28: [/input-8, 48] 
split level 29: [/input-8, 204] 
split level 30: [/input-8, 1692] 
split level 31: [/input-8, 1666] 
split level 32: [/input-8, 1579] 
split level 33: [/input, 3099] 
split level 34: [/input-8, 246] 
split level 35: [/input-8, 1370] 
split level 36: [/input-8, 201] 
split level 37: [/input-8, 180] 
split level 38: [/input-8, 205] 
split level 39: [/input-8, 343] 
split level 40: [/input-8, 342] 
split level 41: [/input-8, 1250] 
split level 42: [/input-8, 1673] 
split level 43: [/input-8, 194] 
split level 44: [/input-8, 417] 
split level 45: [/input-8, 1369] 
split level 46: [/input-8, 238] 
split level 47: [/input-8, 2038] 
split level 48: [/input-8, 222] 
split level 49: [/input-8, 171] 
split level 50: [/input-8, 188] 
split level 51: [/input, 1942] 
split level 52: [/input, 2636] 
split level 53: [/input-8, 132] 
split level 54: [/input, 2871] 
split level 55: [/input-8, 395] 
split level 56: [/input-8, 1665] 
split level 57: [/input-8, 254] 
split level 58: [/input-12, 53] 
split level 59: [/input-8, 1363] 
split level 60: [/input-8, 1946] 
split level 61: [/input-8, 51] 
split level 62: [/input-8, 416] 
split level 63: [/input-8, 57] 
split level 64: [/input, 2985] 
split level 65: [/input, 1374] 
split level 66: [/input-8, 1323] 
split level 67: [/input-8, 723] 
split level 68: [/input-8, 206] 
split level 69: [/input-8, 2034] 
split level 70: [/input-8, 207] 
split level 71: [/input-8, 255] 
split level 72: [/input-8, 1387] 
split level 73: [/input, 2670] 
split level 74: [/input-8, 223] 
split level 75: [/input, 2986] 
split level 76: [/input, 3149] 
split level 77: [/input, 829] 
split level 78: [/input-8, 39] 
split level 79: [/input, 130] 
split level 80: [/input, 3267] 
split level 81: [/input-8, 214] 
split level 82: [/input-8, 200] 
split level 83: [/input, 1926] 
split level 84: [/input, 954] 
split level 85: [/input-8, 253] 
split level 86: [/input-8, 1362] 
split level 87: [/input, 2739] 
split level 88: [/input, 1410] 
split level 89: [/input-8, 196] 
split level 90: [/input, 2653] 
split level 91: [/input-8, 2014] 
split level 92: [/input, 947] 
split level 93: [/input-8, 195] 
split level 94: [/input-8, 209] 
split level 95: [/input, 987] 
split level 96: [/input-8, 216] 
split level 97: [/input, 1910] 
split level 98: [/input, 812] 
split level 99: [/input-8, 245] 
split level 100: [/input-8, 198] 
split level 101: [/input-8, 1273] 
split level 102: [/input-8, 1736] 
split level 103: [/input, 1864] 
split level 104: [/input, 619] 
split level 105: [/input, 1064] 
split level 106: [/input, 2906] 
split level 107: [/input-8, 1996] 
split level 108: [/input, 1879] 
split level 109: [/input, 2638] 
split level 110: [/input, 179] 
split level 111: [/input, 1878] 
split level 112: [/input-8, 186] 
split level 113: [/input, 1438] 
split level 114: [/input-8, 1635] 
split level 115: [/input, 2587] 
split level 116: [/input, 177] 
split level 117: [/input, 786] 
split level 118: [/input, 1845] 
split level 119: [/input-8, 199] 
split level 120: [/input, 2622] 
split level 121: [/input, 1894] 
split level 122: [/input-8, 1383] 
split level 123: [/input, 1150] 
split level 124: [/input, 138] 
split level 125: [/input, 2750] 
split level 126: [/input, 813] 
split level 127: [/input-8, 129] 
split level 128: [/input, 1400] 
split level 129: [/input, 305] 
split level 130: [/input, 180] 
split level 131: [/input, 1416] 
split level 132: [/input-8, 419] 
split level 133: [/input, 973] 
split level 134: [/input, 193] 
split level 135: [/input, 3019] 
split level 136: [/input, 3230] 
split level 137: [/input-8, 1157] 
split level 138: [/input-8, 187] 
split level 139: [/input, 1898] 
split level 140: [/input, 3265] 
split level 141: [/input, 1925] 
split level 142: [/input-8, 229] 
split level 143: [/input, 2755] 
split level 144: [/input, 1080] 
split level 145: [/input, 953] 
split level 146: [/input, 651] 
split level 147: [/input, 885] 
split level 148: [/input, 2651] 
split level 149: [/input, 2685] 
split level 150: [/input-8, 61] 
split level 151: [/input, 2698] 
split level 152: [/input, 204] 
split level 153: [/input, 49] 
split level 154: [/input, 225] 
split level 155: [/input, 74] 
split level 156: [/input, 3220] 
split level 157: [/input-8, 161] 
split level 158: [/input, 790] 
split level 159: [/input, 2810] 
split level 160: [/input, 1618] 
split level 161: [/input, 2397] 
split level 162: [/input, 937] 
split level 163: [/input, 667] 
split level 164: [/input, 635] 
split level 165: [/input-8, 1343] 
split level 166: [/input, 2753] 
split level 167: [/input, 2754] 
split level 168: [/input, 2953] 
split level 169: [/input, 194] 
split level 170: [/input, 1899] 
split level 171: [/input-8, 1987] 
split level 172: [/input, 2732] 
split level 173: [/input, 2069] 
split level 174: [/input-8, 1159] 
split level 175: [/input, 1470] 
split level 176: [/input, 71] 
split level 177: [/input, 84] 
split level 178: [/input, 1359] 
split level 179: [/input, 1134] 
split level 180: [/input, 1166] 
split level 181: [/input, 1882] 
split level 182: [/input, 1862] 
split level 183: [/input, 2156] 
split level 184: [/input-8, 185] 
split level 185: [/input, 203] 
split level 186: [/input, 2747] 
split level 187: [/input, 1472] 
split level 188: [/input, 2752] 
split level 189: [/input, 37] 
split level 190: [/input, 3978] 
split level 191: [/input, 220] 
split level 192: [/input, 238] 
split level 193: [/input, 2120] 
split level 194: [/input, 1490] 
split level 195: [/input, 2980] 
split level 196: [/input, 683] 
split level 197: [/input, 2794] 
split level 198: [/input, 142] 
split level 199: [/input, 3018] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2666269540786743
10 lb beta sum: 0.0, worst -0.2666306495666504
Time: prepare 0.0115    bound 0.1023    transfer 0.0008    finalize 0.0027    func 0.1199    
Accumulated time: func 0.1741    prepare 0.0220    bound 0.1561    transfer 0.0009    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.15740258) min lb tensor(-0.26662481)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010452032089233398 
BICCOS Cumulative time: 0.010452032089233398
Preprocessing time: 0.01001119613647461 Inference time: 0.00012755393981933594 Add cuts time: 7.319450378417969e-05 Cut analysis time: 0.00024008750915527344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25663 (1), -0.25648 (1), -0.25646 (1), -0.25497 (1), -0.25493 (1), -0.25414 (1), -0.25394 (1), -0.25367 (1), -0.25363 (1), -0.25359 (1), -0.25283 (1), -0.25204 (1), -0.24867 (1), -0.24860 (1), -0.24857 (1), -0.24803 (1), -0.24706 (1), -0.24699 (1), -0.24614 (1), -0.24516 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5305    set_bounds 0.0090    solve 0.1200    add 0.0819    
Accumulated time: pickout 0.0003    decision 0.5305    set_bounds 0.0090    solve 0.1200    add 0.0819    
Current (lb-rhs): -0.25663042068481445
50 domains visited
Cumulative time: 0.8219678401947021

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 85] [/input-12, 4] [/input-12, 85] [/input-12, 4] [/input-12, 4] [/input-12, 85] [/input-12, 4] [/input-12, 85] [/input-12, 4] [/input-12, 85] 
split level 1: [/input-12, 4] [/input-12, 85] [/input-12, 4] [/input-12, 17] [/input-12, 17] [/input-12, 4] [/input-12, 85] [/input-12, 4] [/input-12, 85] [/input-12, 4] 
split level 2: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 17] [/input-12, 34] [/input-12, 17] [/input-12, 34] [/input-12, 34] 
split level 3: [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 34] [/input-12, 97] [/input-12, 97] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2213127613067627
10 lb beta sum: 0.42028987407684326, worst -0.2186238169670105
Time: prepare 0.0066    bound 0.1197    transfer 0.0007    finalize 0.0022    func 0.1318    
Accumulated time: func 0.3059    prepare 0.0289    bound 0.2757    transfer 0.0015    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.14893430) min lb tensor(-0.21850975)
Number of Verified Splits: 87 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.016936302185058594 
BICCOS Cumulative time: 0.027388334274291992
Preprocessing time: 0.01150369644165039 Inference time: 0.0032205581665039062 Add cuts time: 0.0018658638000488281 Cut analysis time: 0.00034618377685546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05051 (2), -0.05034 (2), -0.04965 (2), -0.04954 (2), -0.04838 (2), -0.04781 (2), -0.04781 (2), -0.04747 (2), -0.04717 (2), -0.04715 (2), -0.04368 (2), -0.04332 (2), -0.04304 (2), -0.04192 (2), -0.04176 (2), -0.04032 (2), -0.04032 (2), -0.04008 (2), -0.03955 (2), -0.03751 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0130    solve 0.1318    add 0.0808    
Accumulated time: pickout 0.0014    decision 0.5501    set_bounds 0.0220    solve 0.2518    add 0.1628    
Current (lb-rhs): -0.05051296949386597
100 domains visited
Cumulative time: 1.0855052471160889

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 1: [/input-12, 34] [/input-12, 34] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
split level 2: [/input-12, 17] [/input-12, 17] [/input-12, 83] [/input-12, 83] [/input-12, 34] [/input-12, 83] [/input-12, 83] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 3: [/input-12, 97] [/input-12, 97] [/input-12, 34] [/input-12, 34] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 83] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.057717323303222656

all verified at 1th iter
Time: prepare 0.0067    bound 0.0133    transfer 0.0007    finalize 0.0024    func 0.0257    
Accumulated time: func 0.3316    prepare 0.0359    bound 0.2891    transfer 0.0022    finalize 0.0074    
all_split False
======================Cut inference begins======================
max lb tensor(0.18795842) min lb tensor(0.00105667)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.037276268005371094 
BICCOS Cumulative time: 0.06466460227966309
Preprocessing time: 0.011343717575073242 Inference time: 0.016477346420288086 Add cuts time: 0.009260416030883789 Cut analysis time: 0.00019478797912597656
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0193    set_bounds 0.0152    solve 0.0257    add 0.0184    
Accumulated time: pickout 0.0023    decision 0.5694    set_bounds 0.0373    solve 0.2775    add 0.1811    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([85, 34,  4]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([4.20559143e-11, 9.56908911e-02, 1.23926267e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([85, 34,  4]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([4.20559143e-11, 9.56908911e-02, 7.15939850e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([85, 34]), tensor([-1.,  1.]), tensor([0, 0]), tensor([4.20559143e-11, 1.61903307e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([85, 17,  4]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([4.33441616e-11, 6.88595027e-02, 1.30882904e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([85, 17,  4]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([4.33441616e-11, 6.88595027e-02, 9.54335332e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([85, 17]), tensor([1., 1.]), tensor([0, 0]), tensor([4.33441616e-11, 1.27024695e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  6
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03865158557891846

all verified at 1th iter
Time: prepare 0.0004    bound 0.0109    transfer 0.0001    finalize 0.0002    func 0.0117    
Accumulated time: func 0.3433    prepare 0.0363    bound 0.3000    transfer 0.0024    finalize 0.0075    
After pruning, left:  0

Back to Regular BaB


Properties batch 5, size 1
Remaining timeout: 187.71948552131653
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 187.7194082736969
Verifying property 6 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.59470487]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
        -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.59470487]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 645
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 256
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 924
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00013303756713867188
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5947021245956421
10 lb beta sum: 0.0, worst -0.5947017073631287
Time: prepare 0.0002    bound 0.0909    transfer 0.0001    finalize 0.0001    func 0.0914    
Accumulated time: func 0.0914    prepare 0.0002    bound 0.0909    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] 
split level 1: [/input-12, 89] 
split level 2: [/input-12, 97] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 34] 
split level 5: [/input-12, 85] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 7] 
split level 8: [/input-12, 24] 
split level 9: [/input-12, 31] 
split level 10: [/input-8, 416] 
split level 11: [/input-8, 1683] 
split level 12: [/input-8, 1249] 
split level 13: [/input-8, 164] 
split level 14: [/input-8, 172] 
split level 15: [/input-8, 180] 
split level 16: [/input-8, 48] 
split level 17: [/input-8, 39] 
split level 18: [/input-8, 1576] 
split level 19: [/input-8, 1996] 
split level 20: [/input-8, 23] 
split level 21: [/input-8, 41] 
split level 22: [/input-8, 1579] 
split level 23: [/input-8, 188] 
split level 24: [/input-8, 844] 
split level 25: [/input-8, 51] 
split level 26: [/input-8, 349] 
split level 27: [/input-8, 227] 
split level 28: [/input-8, 417] 
split level 29: [/input-8, 156] 
split level 30: [/input-8, 361] 
split level 31: [/input-8, 1363] 
split level 32: [/input-8, 370] 
split level 33: [/input-8, 425] 
split level 34: [/input-8, 1691] 
split level 35: [/input-8, 1987] 
split level 36: [/input-8, 57] 
split level 37: [/input, 460] 
split level 38: [/input-8, 267] 
split level 39: [/input, 908] 
split level 40: [/input-8, 1692] 
split level 41: [/input-8, 1946] 
split level 42: [/input-8, 1369] 
split level 43: [/input-8, 1708] 
split level 44: [/input-8, 205] 
split level 45: [/input-8, 171] 
split level 46: [/input-8, 1566] 
split level 47: [/input-8, 201] 
split level 48: [/input, 2985] 
split level 49: [/input, 130] 
split level 50: [/input-8, 424] 
split level 51: [/input-8, 207] 
split level 52: [/input, 1942] 
split level 53: [/input, 2739] 
split level 54: [/input-8, 723] 
split level 55: [/input-8, 2014] 
split level 56: [/input, 2986] 
split level 57: [/input-8, 1273] 
split level 58: [/input-8, 1367] 
split level 59: [/input, 954] 
split level 60: [/input-8, 218] 
split level 61: [/input-8, 206] 
split level 62: [/input-8, 434] 
split level 63: [/input, 89] 
split level 64: [/input, 3267] 
split level 65: [/input-8, 1378] 
split level 66: [/input-8, 1370] 
split level 67: [/input-8, 1627] 
split level 68: [/input, 1374] 
split level 69: [/input-8, 253] 
split level 70: [/input, 1479] 
split level 71: [/input-8, 1666] 
split level 72: [/input, 2723] 
split level 73: [/input-8, 352] 
split level 74: [/input-8, 343] 
split level 75: [/input, 1410] 
split level 76: [/input-8, 1716] 
split level 77: [/input-8, 714] 
split level 78: [/input-8, 2038] 
split level 79: [/input-8, 185] 
split level 80: [/input-8, 268] 
split level 81: [/input, 885] 
split level 82: [/input-8, 194] 
split level 83: [/input-8, 369] 
split level 84: [/input, 2906] 
split level 85: [/input, 2689] 
split level 86: [/input-8, 254] 
split level 87: [/input, 126] 
split level 88: [/input-8, 342] 
split level 89: [/input, 987] 
split level 90: [/input-8, 161] 
split level 91: [/input, 179] 
split level 92: [/input-8, 204] 
split level 93: [/input-8, 1374] 
split level 94: [/input-8, 214] 
split level 95: [/input, 177] 
split level 96: [/input-8, 456] 
split level 97: [/input, 883] 
split level 98: [/input-8, 238] 
split level 99: [/input, 2871] 
split level 100: [/input, 428] 
split level 101: [/input, 973] 
split level 102: [/input-8, 129] 
split level 103: [/input, 165] 
split level 104: [/input, 947] 
split level 105: [/input, 3467] 
split level 106: [/input-8, 200] 
split level 107: [/input-8, 503] 
split level 108: [/input-8, 1387] 
split level 109: [/input-8, 255] 
split level 110: [/input-8, 223] 
split level 111: [/input-8, 61] 
split level 112: [/input, 41] 
split level 113: [/input-8, 407] 
split level 114: [/input, 2674] 
split level 115: [/input, 2622] 
split level 116: [/input, 3099] 
split level 117: [/input-8, 1159] 
split level 118: [/input-8, 198] 
split level 119: [/input, 786] 
split level 120: [/input, 22] 
split level 121: [/input, 180] 
split level 122: [/input, 103] 
split level 123: [/input, 1448] 
split level 124: [/input, 3187] 
split level 125: [/input-8, 1619] 
split level 126: [/input-8, 209] 
split level 127: [/input-8, 1368] 
split level 128: [/input, 45] 
split level 129: [/input-8, 419] 
split level 130: [/input, 71] 
split level 131: [/input, 104] 
split level 132: [/input, 2926] 
split level 133: [/input-8, 195] 
split level 134: [/input, 195] 
split level 135: [/input-8, 1362] 
split level 136: [/input, 193] 
split level 137: [/input, 1416] 
split level 138: [/input, 37] 
split level 139: [/input-8, 1635] 
split level 140: [/input-8, 186] 
split level 141: [/input-8, 845] 
split level 142: [/input, 2072] 
split level 143: [/input-8, 187] 
split level 144: [/input, 1400] 
split level 145: [/input-8, 1250] 
split level 146: [/input-8, 1736] 
split level 147: [/input-8, 216] 
split level 148: [/input, 3018] 
split level 149: [/input-8, 246] 
split level 150: [/input, 183] 
split level 151: [/input-8, 295] 
split level 152: [/input, 3230] 
split level 153: [/input, 667] 
split level 154: [/input, 2587] 
split level 155: [/input-8, 1248] 
split level 156: [/input, 843] 
split level 157: [/input, 3019] 
split level 158: [/input, 2705] 
split level 159: [/input, 144] 
split level 160: [/input-8, 1344] 
split level 161: [/input, 74] 
split level 162: [/input-8, 196] 
split level 163: [/input-8, 199] 
split level 164: [/input, 199] 
split level 165: [/input-8, 1759] 
split level 166: [/input, 1299] 
split level 167: [/input, 900] 
split level 168: [/input-8, 245] 
split level 169: [/input-8, 1323] 
split level 170: [/input, 194] 
split level 171: [/input, 2584] 
split level 172: [/input, 216] 
split level 173: [/input, 1287] 
split level 174: [/input, 953] 
split level 175: [/input, 2755] 
split level 176: [/input, 3220] 
split level 177: [/input, 635] 
split level 178: [/input-8, 1730] 
split level 179: [/input, 1064] 
split level 180: [/input, 142] 
split level 181: [/input, 683] 
split level 182: [/input, 2980] 
split level 183: [/input, 152] 
split level 184: [/input, 2380] 
split level 185: [/input, 203] 
split level 186: [/input, 651] 
split level 187: [/input, 619] 
split level 188: [/input, 3149] 
split level 189: [/input, 1305] 
split level 190: [/input, 3523] 
split level 191: [/input, 3265] 
split level 192: [/input, 204] 
split level 193: [/input, 169] 
split level 194: [/input, 1166] 
split level 195: [/input, 1182] 
split level 196: [/input, 2397] 
split level 197: [/input, 937] 
split level 198: [/input-8, 1383] 
split level 199: [/input, 1359] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.594636857509613
10 lb beta sum: 0.0, worst -0.5946435332298279
Time: prepare 0.0113    bound 0.1013    transfer 0.0008    finalize 0.0027    func 0.1186    
Accumulated time: func 0.2100    prepare 0.0215    bound 0.1922    transfer 0.0009    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01198196) min lb tensor(-0.59463686)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.00993800163269043 
BICCOS Cumulative time: 0.00993800163269043
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.58241 (1), -0.58194 (1), -0.58128 (1), -0.58082 (1), -0.58079 (1), -0.58076 (1), -0.58022 (1), -0.57980 (1), -0.57952 (1), -0.57945 (1), -0.57901 (1), -0.57885 (1), -0.57820 (1), -0.57734 (1), -0.57701 (1), -0.57680 (1), -0.57642 (1), -0.57504 (1), -0.57374 (1), -0.57345 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5272    set_bounds 0.0090    solve 0.1187    add 0.0675    
Accumulated time: pickout 0.0003    decision 0.5272    set_bounds 0.0090    solve 0.1187    add 0.0675    
Current (lb-rhs): -0.5824123024940491
50 domains visited
Cumulative time: 0.8389980792999268

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 97] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 97] 
split level 1: [/input-12, 97] [/input-12, 2] [/input-12, 97] [/input-12, 2] [/input-12, 97] [/input-12, 2] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 2] 
split level 2: [/input-12, 2] [/input-12, 34] [/input-12, 2] [/input-12, 34] [/input-12, 2] [/input-12, 34] [/input-12, 34] [/input-12, 2] [/input-12, 34] [/input-12, 34] 
split level 3: [/input-12, 34] [/input-12, 85] [/input-12, 34] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 34] [/input-12, 85] [/input-12, 85] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5514717102050781
10 lb beta sum: 0.0, worst -0.5509370565414429
Time: prepare 0.0125    bound 0.0999    transfer 0.0007    finalize 0.0023    func 0.1180    
Accumulated time: func 0.3280    prepare 0.0343    bound 0.2921    transfer 0.0016    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.37215257) min lb tensor(-0.55071259)
Number of Verified Splits: 21 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.013123750686645508 
BICCOS Cumulative time: 0.023061752319335938
Preprocessing time: 0.011707544326782227 Inference time: 0.0008971691131591797 Add cuts time: 0.0002899169921875 Cut analysis time: 0.00022912025451660156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.35435 (2), -0.35273 (2), -0.35114 (2), -0.35065 (2), -0.35048 (2), -0.34917 (2), -0.34906 (2), -0.34857 (2), -0.34576 (2), -0.34434 (2), -0.34188 (2), -0.34060 (2), -0.33729 (2), -0.33696 (2), -0.33655 (2), -0.33640 (2), -0.32991 (2), -0.32985 (2), -0.32864 (2), -0.32827 (2), 
Length of domains: 50
Time: pickout 0.0014    decision 0.0195    set_bounds 0.0124    solve 0.1181    add 0.1538    
Accumulated time: pickout 0.0017    decision 0.5467    set_bounds 0.0214    solve 0.2368    add 0.2213    
Current (lb-rhs): -0.35435211658477783
100 domains visited
Cumulative time: 1.1576287746429443

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 2] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 34] [/input-12, 34] [/input-12, 89] [/input-12, 89] [/input-12, 2] [/input-12, 34] 
split level 3: [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3312641382217407
10 lb beta sum: 0.6411822438240051, worst -0.3082275092601776
Time: prepare 0.0064    bound 0.1211    transfer 0.0007    finalize 0.0020    func 0.1334    
Accumulated time: func 0.4615    prepare 0.0411    bound 0.4132    transfer 0.0023    finalize 0.0071    
all_split False
======================Cut inference begins======================
max lb tensor(0.53749114) min lb tensor(-0.30798629)
Number of Verified Splits: 107 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 5
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.018668413162231445 
BICCOS Cumulative time: 0.04173016548156738
Preprocessing time: 0.011559486389160156 Inference time: 0.0045871734619140625 Add cuts time: 0.0021262168884277344 Cut analysis time: 0.0003955364227294922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09276 (3), -0.09272 (3), -0.09217 (3), -0.09210 (3), -0.09058 (3), -0.08979 (3), -0.08808 (3), -0.08589 (3), -0.08345 (3), -0.07705 (3), -0.07657 (3), -0.07620 (3), -0.07584 (3), -0.07549 (3), -0.07517 (3), -0.07454 (3), -0.06824 (3), -0.06735 (3), -0.06686 (3), -0.06666 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0204    set_bounds 0.0151    solve 0.1335    add 0.0865    
Accumulated time: pickout 0.0029    decision 0.5671    set_bounds 0.0366    solve 0.3703    add 0.3078    
Current (lb-rhs): -0.09276223182678223
150 domains visited
Cumulative time: 1.4332196712493896

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] 
split level 2: [/input-12, 34] [/input-12, 34] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 2] [/input-12, 2] 
split level 3: [/input-12, 85] [/input-12, 85] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16461604833602905
10 lb beta sum: 0.7054463624954224, worst -0.06042471528053284
Time: prepare 0.0066    bound 0.1202    transfer 0.0007    finalize 0.0020    func 0.1321    
Accumulated time: func 0.5935    prepare 0.0479    bound 0.5334    transfer 0.0030    finalize 0.0091    
all_split False
======================Cut inference begins======================
max lb tensor(0.68233150) min lb tensor(-0.05898465)
Number of Verified Splits: 327 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 6
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.03428077697753906 
BICCOS Cumulative time: 0.07601094245910645
Preprocessing time: 0.011335372924804688 Inference time: 0.015186309814453125 Add cuts time: 0.007241249084472656 Cut analysis time: 0.0005178451538085938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05898 (4), -0.05896 (4), -0.05895 (4), -0.05894 (4), -0.05891 (4), -0.05887 (4), -0.05801 (4), -0.05801 (4), -0.05799 (4), -0.05758 (4), -0.05758 (4), -0.05755 (4), -0.05085 (4), -0.05083 (4), -0.05081 (4), -0.05043 (4), -0.05043 (4), -0.05041 (4), -0.03074 (4), -0.03066 (4), 
Length of domains: 28
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0154    solve 0.1321    add 0.2502    
Accumulated time: pickout 0.0039    decision 0.5864    set_bounds 0.0520    solve 0.5024    add 0.5580    
Current (lb-rhs): -0.058984652161598206
178 domains visited
Cumulative time: 1.8857569694519043

Shallow-BaB round 5
batch: 28
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] 
split level 2: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 3: [/input-12, 72] [/input-12, 7] [/input-12, 72] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
split level 4: [/input-12, 7] [/input-12, 24] [/input-12, 7] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 5: [/input-8, 417] [/input-8, 425] [/input-12, 24] [/input-8, 425] [/input-8, 425] [/input-8, 425] [/input-8, 417] [/input-8, 417] [/input-8, 417] [/input-8, 417] 
split level 6: [/input-8, 171] [/input-8, 417] [/input-8, 171] [/input-8, 417] [/input-8, 417] [/input-8, 417] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14892548322677612
10 lb beta sum: 2.0023066997528076, worst -0.06466573476791382
Time: prepare 0.0064    bound 0.1431    transfer 0.0019    finalize 0.0022    func 0.1568    
Accumulated time: func 0.7503    prepare 0.0547    bound 0.6765    transfer 0.0049    finalize 0.0112    
all_split False
======================Cut inference begins======================
max lb tensor(0.43184280) min lb tensor(-0.02970839)
Number of Verified Splits: 258 of 392
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 6
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.030531883239746094 
BICCOS Cumulative time: 0.10654282569885254
Preprocessing time: 0.011204719543457031 Inference time: 0.013563394546508789 Add cuts time: 0.005242824554443359 Cut analysis time: 0.0005209445953369141
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0008    decision 0.0310    set_bounds 0.0138    solve 0.1569    add 0.0266    
Accumulated time: pickout 0.0047    decision 0.6174    set_bounds 0.0658    solve 0.6593    add 0.5846    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
178 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 34]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.09808251e-01, 1.19300053e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 34, 56]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([5.75661872e-20, 1.09808251e-01, 2.94172049e-01, 2.90474176e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 34, 56]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.75661872e-20, 1.09808251e-01, 2.94172049e-01, 1.18619520e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 56]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.51700303e-01, 4.11806285e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 56]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.51700303e-01, 8.58814716e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 56]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.04195699e-01, 3.95490408e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 56]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.04195699e-01, 8.57226253e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 85]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.61860093e-01, 1.24302730e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 85, 72, 56]), tensor([ 1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([5.75661872e-20, 1.61860093e-01, 1.39447138e-01, 6.10233396e-02,
        3.07567865e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 85, 72, 56]), tensor([ 1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([5.75661872e-20, 1.61860093e-01, 1.39447138e-01, 6.10233396e-02,
        2.96889413e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 85, 72, 56]), tensor([ 1.,  1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([5.75661872e-20, 1.61860093e-01, 1.39447138e-01, 7.84921795e-02,
        2.85090506e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 85, 72, 56]), tensor([1., 1., 1., 1., 1.]), tensor([0, 0, 0, 0, 0]), tensor([5.75661872e-20, 1.61860093e-01, 1.39447138e-01, 7.84921795e-02,
        2.61081029e-02]), tensor([0, 1, 2, 3, 4]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2806905508041382
10 lb beta sum: 0.9275964498519897, worst -0.19262754917144775
Time: prepare 0.0005    bound 0.1303    transfer 0.0002    finalize 0.0002    func 0.1313    
Accumulated time: func 0.8816    prepare 0.0553    bound 0.8068    transfer 0.0051    finalize 0.0114    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 89] [/input-12, 89] [/input-12, 56] 
split level 1: [/input-12, 89] [/input-12, 34] [/input-12, 34] [/input-12, 89] 
split level 2: [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 34] 
split level 3: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 4: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
split level 5: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7142257690429688, worst -0.09737741947174072
10 lb beta sum: 1.7142257690429688, worst -0.09674727916717529
Time: prepare 0.0095    bound 0.1313    transfer 0.0007    finalize 0.0012    func 0.1445    
Accumulated time: func 1.0261    prepare 0.0651    bound 0.9381    transfer 0.0058    finalize 0.0126    
all_split False
======================Cut inference begins======================
max lb tensor(1.29539979) min lb tensor(-0.09644485)
Number of Verified Splits: 234 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.7569881677627563, worst -3.117821216583252
10 lb beta sum: 1.4473013877868652, worst -0.4159165620803833
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 6
#cuts 4-6: 10
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.26900362968444824 
BICCOS Cumulative time: 0.3755464553833008
Preprocessing time: 0.0063266754150390625 Inference time: 0.25791478157043457 Add cuts time: 0.00409388542175293 Cut analysis time: 0.0006682872772216797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09644 (6), -0.09144 (6), -0.08323 (6), -0.07825 (6), -0.07643 (6), -0.06706 (6), -0.06134 (6), -0.06102 (6), -0.05656 (6), -0.05387 (6), -0.04929 (6), -0.04778 (6), -0.04730 (6), -0.04673 (6), -0.04252 (6), -0.03544 (6), -0.03193 (6), -0.02784 (6), -0.02237 (6), -0.01707 (6), 
Length of domains: 22
Time: pickout 0.0005    decision 0.0181    set_bounds 0.0177    solve 0.1446    add 0.0009    
Accumulated time: pickout 0.0052    decision 0.6355    set_bounds 0.0835    solve 0.8039    add 0.5856    
Current (lb-rhs): -0.09644484519958496
200 domains visited
Cumulative time: 2.755976438522339

BaB round 2
batch: 22
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 180] [/input-8, 164] [/input-8, 180] [/input-8, 164] [/input-8, 180] [/input-8, 164] [/input-8, 180] [/input-8, 180] [/input-8, 180] [/input-8, 180] 
split level 1: [/input-8, 41] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 349] [/input-8, 1579] [/input-8, 349] [/input-8, 1579] [/input-8, 41] 
split level 2: [/input-8, 417] [/input-8, 171] [/input-8, 41] [/input-8, 171] [/input-8, 41] [/input-8, 1579] [/input-8, 41] [/input-8, 1579] [/input-8, 349] [/input-8, 417] 
split level 3: [/input-8, 1579] [/input-8, 723] [/input-8, 1250] [/input-8, 723] [/input-8, 1250] [/input-8, 723] [/input-8, 349] [/input-8, 723] [/input-8, 41] [/input-8, 1579] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07867670059204102
10 lb beta sum: 0.16255462169647217, worst -0.07784299552440643
Time: prepare 0.0066    bound 0.1330    transfer 0.0010    finalize 0.0017    func 0.1445    
Accumulated time: func 1.1706    prepare 0.0719    bound 1.0711    transfer 0.0068    finalize 0.0143    
all_split False
======================Cut inference begins======================
max lb tensor(0.04340100) min lb tensor(-0.07757288)
Number of Verified Splits: 173 of 352
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.39826107025146484
10 lb beta sum: 0.5916743874549866, worst -0.30095526576042175
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 6
#cuts 4-6: 10
#cuts 7-9: 2
#cuts 10-12: 4
#cuts >= 20: 0
BICCOS time: 0.2587916851043701 
BICCOS Cumulative time: 0.6343381404876709
Preprocessing time: 0.010046005249023438 Inference time: 0.246567964553833 Add cuts time: 0.0011250972747802734 Cut analysis time: 0.0010526180267333984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07757 (10), -0.07616 (10), -0.07184 (10), -0.07105 (10), -0.07042 (10), -0.06936 (10), -0.06876 (10), -0.06798 (10), -0.06718 (10), -0.06659 (10), -0.06630 (10), -0.06497 (10), -0.06272 (10), -0.06241 (10), -0.06095 (10), -0.06080 (10), -0.05890 (10), -0.05889 (10), -0.05746 (10), -0.05687 (10), 
Length of domains: 179
Time: pickout 0.0010    decision 0.0177    set_bounds 0.0163    solve 0.1446    add 0.0014    
Accumulated time: pickout 0.0062    decision 0.6532    set_bounds 0.0997    solve 0.9485    add 0.5869    
Current (lb-rhs): -0.07757288217544556
379 domains visited
Cumulative time: 3.1986985206604004

BaB round 3
batch: 179
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 172] [/input-8, 1576] [/input-8, 349] [/input-8, 1576] [/input-8, 1576] [/input-8, 1576] [/input-8, 172] [/input-8, 417] [/input-8, 425] [/input-8, 349] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07489681243896484
10 lb beta sum: 0.1934496909379959, worst -0.07425275444984436
Time: prepare 0.0070    bound 0.1346    transfer 0.0007    finalize 0.0016    func 0.1461    
Accumulated time: func 1.3167    prepare 0.0792    bound 1.2056    transfer 0.0075    finalize 0.0159    
all_split False
======================Cut inference begins======================
max lb tensor(0.02628681) min lb tensor(-0.07411747)
Number of Verified Splits: 122 of 358
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 12
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.026353120803833008 
BICCOS Cumulative time: 0.6606912612915039
Preprocessing time: 0.010343790054321289 Inference time: 0.012804031372070312 Add cuts time: 0.002519369125366211 Cut analysis time: 0.0006859302520751953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07412 (11), -0.07271 (11), -0.07091 (11), -0.06954 (11), -0.06904 (11), -0.06834 (11), -0.06758 (11), -0.06654 (11), -0.06608 (11), -0.06513 (11), -0.06442 (11), -0.06378 (11), -0.06345 (11), -0.06269 (11), -0.06223 (11), -0.06118 (11), -0.06008 (11), -0.05908 (11), -0.05813 (11), -0.05767 (11), 
Length of domains: 236
Time: pickout 0.0031    decision 0.0210    set_bounds 0.0154    solve 0.1467    add 0.0014    
Accumulated time: pickout 0.0093    decision 0.6742    set_bounds 0.1151    solve 1.0952    add 0.5883    
Current (lb-rhs): -0.07411746680736542
615 domains visited
Cumulative time: 3.4136312007904053

BaB round 4
batch: 236
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 417] [/input-8, 1576] [/input-8, 369] [/input-8, 1946] [/input-8, 425] [/input-8, 39] [/input-8, 349] [/input-8, 180] [/input-8, 349] [/input-8, 41] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07325100898742676
10 lb beta sum: 0.6274771094322205, worst -0.07045453786849976
Time: prepare 0.0091    bound 0.1417    transfer 0.0020    finalize 0.0026    func 0.1584    
Accumulated time: func 1.4752    prepare 0.0885    bound 1.3473    transfer 0.0095    finalize 0.0185    
all_split False
======================Cut inference begins======================
max lb tensor(0.48455530) min lb tensor(-0.07036598)
Number of Verified Splits: 238 of 472
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 18
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.042546987533569336 
BICCOS Cumulative time: 0.7032382488250732
Preprocessing time: 0.013315439224243164 Inference time: 0.025478601455688477 Add cuts time: 0.0032062530517578125 Cut analysis time: 0.0005466938018798828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07037 (12), -0.06909 (12), -0.06708 (12), -0.06584 (12), -0.06371 (12), -0.06237 (12), -0.06213 (12), -0.06048 (12), -0.05993 (12), -0.05897 (12), -0.05841 (12), -0.05765 (12), -0.05723 (12), -0.05710 (12), -0.05605 (12), -0.05569 (12), -0.05535 (12), -0.05493 (12), -0.05461 (12), -0.05407 (12), 
Length of domains: 234
Time: pickout 0.0044    decision 0.0239    set_bounds 0.0198    solve 0.1586    add 0.0016    
Accumulated time: pickout 0.0136    decision 0.6981    set_bounds 0.1349    solve 1.2537    add 0.5899    
Current (lb-rhs): -0.07036598026752472
849 domains visited
Cumulative time: 3.6657729148864746

BaB round 5
batch: 234
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 349] [/input-8, 417] [/input-8, 1946] [/input-8, 171] [/input-8, 1691] [/input-8, 185] [/input-8, 39] [/input-8, 349] [/input-8, 417] [/input-8, 1946] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06921958923339844
10 lb beta sum: 1.6616188287734985, worst -0.054729461669921875
Time: prepare 0.0090    bound 0.1420    transfer 0.0010    finalize 0.0022    func 0.1573    
Accumulated time: func 1.6325    prepare 0.0977    bound 1.4893    transfer 0.0104    finalize 0.0207    
all_split False
======================Cut inference begins======================
max lb tensor(0.49642599) min lb tensor(-0.05461717)
Number of Verified Splits: 332 of 468
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 26
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.0554194450378418 
BICCOS Cumulative time: 0.758657693862915
Preprocessing time: 0.013290882110595703 Inference time: 0.03703141212463379 Add cuts time: 0.00446629524230957 Cut analysis time: 0.0006308555603027344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05462 (13), -0.05332 (13), -0.05256 (13), -0.05125 (13), -0.05119 (13), -0.05112 (13), -0.04994 (13), -0.04965 (13), -0.04919 (13), -0.04912 (13), -0.04853 (13), -0.04773 (13), -0.04761 (13), -0.04698 (13), -0.04667 (13), -0.04540 (13), -0.03962 (13), -0.03833 (13), -0.03757 (13), -0.03628 (13), 
Length of domains: 136
Time: pickout 0.0035    decision 0.0233    set_bounds 0.0203    solve 0.1574    add 0.0013    
Accumulated time: pickout 0.0171    decision 0.7213    set_bounds 0.1552    solve 1.4112    add 0.5912    
Current (lb-rhs): -0.05461716651916504
985 domains visited
Cumulative time: 3.9286956787109375

BaB round 6
batch: 136
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 164] [/input-8, 349] [/input-8, 39] [/input-8, 349] [/input-8, 2014] [/input-8, 349] [/input-8, 349] [/input-8, 164] [/input-8, 164] [/input-8, 2014] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06640028953552246
10 lb beta sum: 2.7754855155944824, worst -0.04297161102294922
Time: prepare 0.0053    bound 0.1390    transfer 0.0007    finalize 0.0013    func 0.1481    
Accumulated time: func 1.7806    prepare 0.1032    bound 1.6283    transfer 0.0111    finalize 0.0220    
all_split False
======================Cut inference begins======================
max lb tensor(0.47332251) min lb tensor(-0.04289925)
Number of Verified Splits: 199 of 272
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03275585174560547 
BICCOS Cumulative time: 0.7914135456085205
Preprocessing time: 0.007961034774780273 Inference time: 0.02276468276977539 Add cuts time: 0.0018486976623535156 Cut analysis time: 0.00018143653869628906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04290 (14), -0.04078 (14), -0.03926 (14), -0.03814 (14), -0.03695 (14), -0.03620 (14), -0.03569 (14), -0.03520 (14), -0.03401 (14), -0.03331 (14), -0.03205 (14), -0.03127 (14), -0.02949 (14), -0.02899 (14), -0.02799 (14), -0.02774 (14), -0.02669 (14), -0.02559 (14), -0.02376 (14), -0.02225 (14), 
Length of domains: 73
Time: pickout 0.0026    decision 0.0186    set_bounds 0.0119    solve 0.1482    add 0.0014    
Accumulated time: pickout 0.0197    decision 0.7399    set_bounds 0.1671    solve 1.5594    add 0.5926    
Current (lb-rhs): -0.042899250984191895
1058 domains visited
Cumulative time: 4.145358324050903

BaB round 7
batch: 73
splitting decisions: 
split level 0: [/input-8, 185] [/input-8, 185] [/input-8, 185] [/input-8, 185] [/input-8, 185] [/input-8, 1946] [/input-8, 185] [/input-8, 1946] [/input-8, 1946] [/input-8, 1946] 
split level 1: [/input-8, 1692] [/input-8, 1692] [/input-8, 1692] [/input-8, 1692] [/input-8, 1692] [/input-8, 417] [/input-8, 1692] [/input-8, 417] [/input-8, 417] [/input-8, 417] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05877947807312012

all verified at 9th iter
Time: prepare 0.0056    bound 0.0544    transfer 0.0006    finalize 0.0017    func 0.0641    
Accumulated time: func 1.8446    prepare 0.1090    bound 1.6827    transfer 0.0117    finalize 0.0237    
all_split False
======================Cut inference begins======================
max lb tensor(0.23053643) min lb tensor(0.04948075)
Number of Verified Splits: 292 of 292
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.008304119110107422 
BICCOS Cumulative time: 0.7997176647186279
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0022    decision 0.0186    set_bounds 0.0134    solve 0.0642    add 0.0003    
Accumulated time: pickout 0.0219    decision 0.7585    set_bounds 0.1805    solve 1.6235    add 0.5929    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1058 domains visited
Cumulative time: 4.253264665603638


Properties batch 7, size 1
Remaining timeout: 183.252671957016
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 183.25257992744446
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 16.7475 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 58, vnnlib ID: 58 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.54733276, -21.78987122, -22.60601997, -21.30351830, -24.20145226,
         -22.29459190, -22.23107147, -25.10035706, -22.73666000, -22.06024361]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [482]; unstable size 482; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 216, 1, 482] with unstable size 215 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 482] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 482] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [215]; unstable size 215; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 215] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.04004717, -1.07115698,  0.35848117,  1.95242715,  0.74911088,
          0.26205647,  2.80084348, -0.02647543, -0.53875589]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.54733276, -21.78987122, -22.60601997, -21.30351830, -24.20145226,
         -22.29459190, -22.23107147, -25.10035706, -22.73666000, -22.06024361]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.02569389, -21.82901001, -23.36814117, -22.22129059, -25.05405426,
          -23.25062561, -22.97693062, -25.95488548, -23.13699722, -22.30997849],
         [-23.02569389, -21.82901001, -23.36814117, -22.22129059, -25.05405426,
          -23.25062561, -22.97693062, -25.95488548, -23.13699722, -22.30997849]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.80440331, -0.39228058,  0.91570663,  0.08868790]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0066 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0765 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 59, vnnlib ID: 59 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.79305267, -15.05270672, -11.01360893, -11.14069176, -10.53976250,
         -12.22748184, -10.10639000, -13.34503460, -13.81023407, -15.20878029]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1050]; unstable size 1050; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 330, 1, 1050] with unstable size 329 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 1050] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1050] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [329]; unstable size 329; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 329] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 329] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.91365707,  2.97547674, -0.38596082, -0.14092690, -0.68310428,
          0.74673319,  1.63518667,  1.76536191,  3.08691549]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.79305267, -15.05270672, -11.01360893, -11.14069176, -10.53976250,
         -12.22748184, -10.10639000, -13.34503460, -13.81023407, -15.20878029]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.43it/s]100%|██████████| 1/1 [00:00<00:00,  8.42it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.73095417, -15.17011356, -10.95801258, -11.12242126, -10.36753273,
          -12.15822506, -10.36675453, -13.20997334, -13.88632774, -15.23771191],
         [-13.73095417, -15.17011356, -10.95801258, -11.12242126, -10.36753273,
          -12.15822506, -10.36675453, -13.20997334, -13.88632774, -15.23771191]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.59125805, 0.75566673, 0.00077820]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1215 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 12.672635078430176
alpha/beta optimization time: 1.256669044494629
initial alpha-crown bounds: tensor([[ 2.17554379,  3.15856051, -0.19436073,  0.02832681, -0.55010962,
          0.92495173,  1.83316255,  2.01714468,  3.27941513]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.5501096248626709
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5531928539276
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.55314755439758
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.55312061309814
Verifying property 2 with 1 instances.
##### Instance 59 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.19436073]], device='cuda:0') need to verify.
Model prediction is: tensor([-13.79305267, -15.05270672, -11.01360893, -11.14069176, -10.53976250,
        -12.22748184, -10.10639000, -13.34503460, -13.81023407, -15.20878029],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.19436073]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1050
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 27
-----------------
# of unstable neurons: 1392
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011229515075683594
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19435715675354004
10 lb beta sum: 0.0, worst -0.19436430931091309
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0544    transfer 0.0001    finalize 0.0001    func 0.0549    
Accumulated time: func 0.0549    prepare 0.0002    bound 0.0544    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] 
split level 1: [/input-12, 8] 
split level 2: [/input-12, 24] 
split level 3: [/input-12, 31] 
split level 4: [/input-12, 32] 
split level 5: [/input-12, 53] 
split level 6: [/input-12, 59] 
split level 7: [/input-12, 61] 
split level 8: [/input-12, 72] 
split level 9: [/input-12, 14] 
split level 10: [/input-12, 6] 
split level 11: [/input-8, 1955] 
split level 12: [/input-12, 12] 
split level 13: [/input-12, 68] 
split level 14: [/input-12, 92] 
split level 15: [/input-8, 738] 
split level 16: [/input-8, 347] 
split level 17: [/input-12, 79] 
split level 18: [/input-8, 804] 
split level 19: [/input-8, 1635] 
split level 20: [/input-8, 1701] 
split level 21: [/input-8, 466] 
split level 22: [/input-8, 788] 
split level 23: [/input-8, 490] 
split level 24: [/input-12, 97] 
split level 25: [/input-8, 577] 
split level 26: [/input-8, 154] 
split level 27: [/input-8, 475] 
split level 28: [/input-8, 1372] 
split level 29: [/input-8, 1257] 
split level 30: [/input-8, 162] 
split level 31: [/input-12, 71] 
split level 32: [/input-8, 755] 
split level 33: [/input-8, 357] 
split level 34: [/input-8, 1379] 
split level 35: [/input-8, 434] 
split level 36: [/input-8, 158] 
split level 37: [/input-12, 20] 
split level 38: [/input-8, 148] 
split level 39: [/input-8, 915] 
split level 40: [/input-8, 165] 
split level 41: [/input-8, 91] 
split level 42: [/input-8, 1693] 
split level 43: [/input-8, 1643] 
split level 44: [/input-8, 436] 
split level 45: [/input-8, 779] 
split level 46: [/input-8, 829] 
split level 47: [/input-8, 294] 
split level 48: [/input-8, 460] 
split level 49: [/input-8, 427] 
split level 50: [/input-8, 1388] 
split level 51: [/input-8, 37] 
split level 52: [/input-8, 1254] 
split level 53: [/input-8, 1748] 
split level 54: [/input-8, 1261] 
split level 55: [/input-8, 163] 
split level 56: [/input-8, 156] 
split level 57: [/input-8, 1509] 
split level 58: [/input-8, 1574] 
split level 59: [/input-8, 1556] 
split level 60: [/input-8, 149] 
split level 61: [/input-8, 785] 
split level 62: [/input-8, 1363] 
split level 63: [/input-8, 30] 
split level 64: [/input-8, 26] 
split level 65: [/input-8, 492] 
split level 66: [/input-8, 159] 
split level 67: [/input-8, 777] 
split level 68: [/input-8, 958] 
split level 69: [/input-8, 1659] 
split level 70: [/input-8, 1634] 
split level 71: [/input-8, 1618] 
split level 72: [/input-8, 411] 
split level 73: [/input-8, 1972] 
split level 74: [/input-8, 1292] 
split level 75: [/input-8, 1214] 
split level 76: [/input-8, 507] 
split level 77: [/input-8, 454] 
split level 78: [/input-8, 1029] 
split level 79: [/input-8, 1028] 
split level 80: [/input-8, 412] 
split level 81: [/input-8, 1340] 
split level 82: [/input-8, 151] 
split level 83: [/input-8, 1229] 
split level 84: [/input-8, 1652] 
split level 85: [/input-8, 1626] 
split level 86: [/input-8, 1030] 
split level 87: [/input-8, 1301] 
split level 88: [/input-8, 1700] 
split level 89: [/input-8, 1241] 
split level 90: [/input-8, 225] 
split level 91: [/input-8, 92] 
split level 92: [/input-8, 1945] 
split level 93: [/input-8, 782] 
split level 94: [/input-8, 223] 
split level 95: [/input-8, 166] 
split level 96: [/input-8, 1757] 
split level 97: [/input-8, 183] 
split level 98: [/input-8, 1238] 
split level 99: [/input-8, 231] 
split level 100: [/input-8, 1181] 
split level 101: [/input, 2789] 
split level 102: [/input-8, 1246] 
split level 103: [/input-8, 226] 
split level 104: [/input-8, 449] 
split level 105: [/input-8, 1265] 
split level 106: [/input-8, 582] 
split level 107: [/input-8, 1294] 
split level 108: [/input-8, 90] 
split level 109: [/input, 3035] 
split level 110: [/input-8, 233] 
split level 111: [/input-8, 217] 
split level 112: [/input-8, 1329] 
split level 113: [/input-8, 1364] 
split level 114: [/input-8, 178] 
split level 115: [/input-8, 481] 
split level 116: [/input-8, 241] 
split level 117: [/input, 70] 
split level 118: [/input-8, 1228] 
split level 119: [/input-8, 450] 
split level 120: [/input-8, 944] 
split level 121: [/input-8, 1341] 
split level 122: [/input-8, 773] 
split level 123: [/input-8, 170] 
split level 124: [/input-8, 1707] 
split level 125: [/input, 227] 
split level 126: [/input-8, 141] 
split level 127: [/input-8, 624] 
split level 128: [/input-8, 452] 
split level 129: [/input-8, 312] 
split level 130: [/input-8, 182] 
split level 131: [/input, 3433] 
split level 132: [/input-8, 147] 
split level 133: [/input-8, 146] 
split level 134: [/input-8, 1337] 
split level 135: [/input-8, 1598] 
split level 136: [/input-8, 143] 
split level 137: [/input-8, 364] 
split level 138: [/input, 873] 
split level 139: [/input, 2787] 
split level 140: [/input-8, 242] 
split level 141: [/input, 2887] 
split level 142: [/input-8, 941] 
split level 143: [/input-8, 169] 
split level 144: [/input-8, 215] 
split level 145: [/input-8, 205] 
split level 146: [/input, 1516] 
split level 147: [/input-8, 209] 
split level 148: [/input-8, 239] 
split level 149: [/input-8, 207] 
split level 150: [/input-8, 253] 
split level 151: [/input-8, 1297] 
split level 152: [/input, 3288] 
split level 153: [/input-8, 234] 
split level 154: [/input, 1205] 
split level 155: [/input, 1891] 
split level 156: [/input, 71] 
split level 157: [/input, 1207] 
split level 158: [/input, 72] 
split level 159: [/input-8, 1227] 
split level 160: [/input, 942] 
split level 161: [/input-8, 230] 
split level 162: [/input-8, 255] 
split level 163: [/input, 137] 
split level 164: [/input, 2790] 
split level 165: [/input-8, 1786] 
split level 166: [/input, 226] 
split level 167: [/input, 3717] 
split level 168: [/input, 1999] 
split level 169: [/input-8, 1741] 
split level 170: [/input-8, 1302] 
split level 171: [/input, 1490] 
split level 172: [/input, 1843] 
split level 173: [/input-8, 1799] 
split level 174: [/input-8, 1279] 
split level 175: [/input, 2649] 
split level 176: [/input-8, 206] 
split level 177: [/input, 3497] 
split level 178: [/input, 2724] 
split level 179: [/input-8, 1233] 
split level 180: [/input, 906] 
split level 181: [/input, 2786] 
split level 182: [/input, 833] 
split level 183: [/input-8, 103] 
split level 184: [/input, 1320] 
split level 185: [/input, 2792] 
split level 186: [/input, 1180] 
split level 187: [/input, 1829] 
split level 188: [/input, 2870] 
split level 189: [/input, 1158] 
split level 190: [/input-8, 179] 
split level 191: [/input, 1918] 
split level 192: [/input, 1937] 
split level 193: [/input, 2632] 
split level 194: [/input, 1886] 
split level 195: [/input, 533] 
split level 196: [/input, 1812] 
split level 197: [/input, 329] 
split level 198: [/input, 2014] 
split level 199: [/input, 1012] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19431638717651367
10 lb beta sum: 0.0, worst -0.19431400299072266
Time: prepare 0.0114    bound 0.1003    transfer 0.0008    finalize 0.0036    func 0.1187    
Accumulated time: func 0.1736    prepare 0.0217    bound 0.1548    transfer 0.0009    finalize 0.0037    
all_split False
======================Cut inference begins======================
max lb tensor(0.25903308) min lb tensor(-0.19429827)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.011089086532592773 
BICCOS Cumulative time: 0.011089086532592773
Preprocessing time: 0.009913206100463867 Inference time: 0.00037550926208496094 Add cuts time: 0.00013375282287597656 Cut analysis time: 0.0006666183471679688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18179 (1), -0.18149 (1), -0.18013 (1), -0.17981 (1), -0.17885 (1), -0.17875 (1), -0.17840 (1), -0.17832 (1), -0.17800 (1), -0.17738 (1), -0.17729 (1), -0.17621 (1), -0.17578 (1), -0.17547 (1), -0.17532 (1), -0.17458 (1), -0.17446 (1), -0.17431 (1), -0.17360 (1), -0.17353 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5277    set_bounds 0.0089    solve 0.1187    add 0.0924    
Accumulated time: pickout 0.0003    decision 0.5277    set_bounds 0.0089    solve 0.1187    add 0.0924    
Current (lb-rhs): -0.18178772926330566
50 domains visited
Cumulative time: 0.8297052383422852

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 1: [/input-12, 31] [/input-12, 8] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 8] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 24] [/input-12, 24] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 59] [/input-12, 59] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17230606079101562

all verified at 8th iter
Time: prepare 0.0068    bound 0.0533    transfer 0.0007    finalize 0.0021    func 0.0655    
Accumulated time: func 0.2390    prepare 0.0288    bound 0.2080    transfer 0.0016    finalize 0.0058    
all_split False
======================Cut inference begins======================
max lb tensor(0.15611601) min lb tensor(0.00399429)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.0348210334777832 
BICCOS Cumulative time: 0.04591012001037598
Preprocessing time: 0.011652231216430664 Inference time: 0.015038490295410156 Add cuts time: 0.007946491241455078 Cut analysis time: 0.0001838207244873047
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0194    set_bounds 0.0125    solve 0.0655    add 0.0150    
Accumulated time: pickout 0.0013    decision 0.5471    set_bounds 0.0213    solve 0.1843    add 0.1074    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 46]), tensor([-1., -1.]), tensor([0, 0]), tensor([6.44905240e-11, 1.93176851e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 46]), tensor([-1.,  1.]), tensor([0, 0]), tensor([6.44905240e-11, 2.36134097e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 46]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.75662906e-20, 1.62723467e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 46]), tensor([1., 1.]), tensor([0, 0]), tensor([5.75662906e-20, 2.43334338e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15021228790283203

all verified at 4th iter
Time: prepare 0.0003    bound 0.0248    transfer 0.0001    finalize 0.0001    func 0.0255    
Accumulated time: func 0.2645    prepare 0.0291    bound 0.2329    transfer 0.0017    finalize 0.0060    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.34111380577087
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.34104132652283
Verifying property 4 with 1 instances.
##### Instance 59 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.55010962]], device='cuda:0') need to verify.
Model prediction is: tensor([-13.79305267, -15.05270672, -11.01360893, -11.14069176, -10.53976250,
        -12.22748184, -10.10639000, -13.34503460, -13.81023407, -15.20878029],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.55010962]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1050
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 27
-----------------
# of unstable neurons: 1392
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010418891906738281
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5501065254211426
10 lb beta sum: 0.0, worst -0.5501232147216797
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0543    transfer 0.0001    finalize 0.0001    func 0.0548    
Accumulated time: func 0.0548    prepare 0.0002    bound 0.0543    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 97] 
split level 3: [/input-12, 90] 
split level 4: [/input-12, 61] 
split level 5: [/input-12, 14] 
split level 6: [/input-12, 32] 
split level 7: [/input-12, 4] 
split level 8: [/input-12, 31] 
split level 9: [/input-12, 68] 
split level 10: [/input-12, 79] 
split level 11: [/input-8, 1380] 
split level 12: [/input-12, 92] 
split level 13: [/input-8, 141] 
split level 14: [/input-8, 163] 
split level 15: [/input-8, 1261] 
split level 16: [/input-8, 165] 
split level 17: [/input-8, 1257] 
split level 18: [/input-12, 55] 
split level 19: [/input-8, 1388] 
split level 20: [/input-8, 738] 
split level 21: [/input-8, 1262] 
split level 22: [/input-8, 1241] 
split level 23: [/input-8, 1574] 
split level 24: [/input-8, 1389] 
split level 25: [/input-8, 30] 
split level 26: [/input-8, 37] 
split level 27: [/input-12, 71] 
split level 28: [/input-8, 1246] 
split level 29: [/input-8, 1254] 
split level 30: [/input-8, 148] 
split level 31: [/input-8, 158] 
split level 32: [/input-8, 156] 
split level 33: [/input-8, 1748] 
split level 34: [/input-8, 173] 
split level 35: [/input-8, 1757] 
split level 36: [/input-8, 1181] 
split level 37: [/input-8, 1643] 
split level 38: [/input-8, 1379] 
split level 39: [/input-12, 8] 
split level 40: [/input-8, 1372] 
split level 41: [/input-8, 91] 
split level 42: [/input, 3207] 
split level 43: [/input-8, 1214] 
split level 44: [/input-8, 147] 
split level 45: [/input-8, 149] 
split level 46: [/input-8, 252] 
split level 47: [/input-8, 162] 
split level 48: [/input-8, 294] 
split level 49: [/input-8, 182] 
split level 50: [/input-8, 788] 
split level 51: [/input-8, 154] 
split level 52: [/input-8, 92] 
split level 53: [/input-8, 166] 
split level 54: [/input-8, 755] 
split level 55: [/input-8, 941] 
split level 56: [/input-8, 779] 
split level 57: [/input-8, 1950] 
split level 58: [/input-8, 1738] 
split level 59: [/input-8, 139] 
split level 60: [/input-8, 312] 
split level 61: [/input-8, 2017] 
split level 62: [/input-8, 1265] 
split level 63: [/input-8, 1635] 
split level 64: [/input-8, 944] 
split level 65: [/input-8, 1238] 
split level 66: [/input, 3035] 
split level 67: [/input-8, 1741] 
split level 68: [/input-8, 225] 
split level 69: [/input-8, 492] 
split level 70: [/input-8, 1666] 
split level 71: [/input-8, 1266] 
split level 72: [/input-8, 1390] 
split level 73: [/input-8, 2031] 
split level 74: [/input-8, 146] 
split level 75: [/input-8, 1652] 
split level 76: [/input-8, 223] 
split level 77: [/input-8, 151] 
split level 78: [/input-8, 26] 
split level 79: [/input-8, 218] 
split level 80: [/input-8, 217] 
split level 81: [/input-8, 183] 
split level 82: [/input-8, 253] 
split level 83: [/input-8, 1739] 
split level 84: [/input-8, 221] 
split level 85: [/input-8, 782] 
split level 86: [/input-8, 159] 
split level 87: [/input-12, 72] 
split level 88: [/input-8, 1173] 
split level 89: [/input, 2881] 
split level 90: [/input-8, 181] 
split level 91: [/input, 3257] 
split level 92: [/input-8, 2029] 
split level 93: [/input-8, 25] 
split level 94: [/input-8, 507] 
split level 95: [/input-8, 179] 
split level 96: [/input-8, 231] 
split level 97: [/input-8, 233] 
split level 98: [/input-8, 773] 
split level 99: [/input-8, 958] 
split level 100: [/input-8, 582] 
split level 101: [/input, 474] 
split level 102: [/input, 873] 
split level 103: [/input-8, 460] 
split level 104: [/input-8, 357] 
split level 105: [/input-8, 1758] 
split level 106: [/input-8, 170] 
split level 107: [/input-8, 1382] 
split level 108: [/input, 3190] 
split level 109: [/input-8, 213] 
split level 110: [/input-8, 1229] 
split level 111: [/input-8, 209] 
split level 112: [/input, 3208] 
split level 113: [/input-8, 1233] 
split level 114: [/input-8, 241] 
split level 115: [/input, 918] 
split level 116: [/input-8, 1029] 
split level 117: [/input, 98] 
split level 118: [/input, 2887] 
split level 119: [/input, 809] 
split level 120: [/input-8, 230] 
split level 121: [/input-8, 454] 
split level 122: [/input-8, 466] 
split level 123: [/input, 3497] 
split level 124: [/input, 3252] 
split level 125: [/input-8, 777] 
split level 126: [/input, 934] 
split level 127: [/input-8, 205] 
split level 128: [/input, 156] 
split level 129: [/input, 2724] 
split level 130: [/input-8, 143] 
split level 131: [/input-8, 1786] 
split level 132: [/input-8, 1765] 
split level 133: [/input-8, 364] 
split level 134: [/input, 838] 
split level 135: [/input, 137] 
split level 136: [/input-8, 239] 
split level 137: [/input, 1426] 
split level 138: [/input-8, 242] 
split level 139: [/input-8, 215] 
split level 140: [/input, 854] 
split level 141: [/input, 888] 
split level 142: [/input-8, 624] 
split level 143: [/input, 970] 
split level 144: [/input-8, 207] 
split level 145: [/input-8, 1730] 
split level 146: [/input-8, 226] 
split level 147: [/input-8, 255] 
split level 148: [/input-8, 1030] 
split level 149: [/input, 1180] 
split level 150: [/input-8, 1028] 
split level 151: [/input-8, 1279] 
split level 152: [/input-8, 138] 
split level 153: [/input, 2040] 
split level 154: [/input, 942] 
split level 155: [/input, 2871] 
split level 156: [/input, 2328] 
split level 157: [/input-8, 1378] 
split level 158: [/input-8, 206] 
split level 159: [/input, 1207] 
split level 160: [/input, 793] 
split level 161: [/input, 1516] 
split level 162: [/input, 2971] 
split level 163: [/input, 3433] 
split level 164: [/input-8, 1598] 
split level 165: [/input, 794] 
split level 166: [/input, 457] 
split level 167: [/input, 2664] 
split level 168: [/input, 60] 
split level 169: [/input, 2870] 
split level 170: [/input, 329] 
split level 171: [/input, 1891] 
split level 172: [/input, 684] 
split level 173: [/input-8, 1799] 
split level 174: [/input, 2859] 
split level 175: [/input, 2876] 
split level 176: [/input, 1129] 
split level 177: [/input, 3143] 
split level 178: [/input, 407] 
split level 179: [/input-8, 1244] 
split level 180: [/input, 162] 
split level 181: [/input, 833] 
split level 182: [/input-8, 103] 
split level 183: [/input, 3127] 
split level 184: [/input, 313] 
split level 185: [/input, 97] 
split level 186: [/input, 2883] 
split level 187: [/input, 2330] 
split level 188: [/input, 50] 
split level 189: [/input, 2700] 
split level 190: [/input, 2039] 
split level 191: [/input, 2055] 
split level 192: [/input, 2596] 
split level 193: [/input, 51] 
split level 194: [/input-8, 1602] 
split level 195: [/input, 172] 
split level 196: [/input, 827] 
split level 197: [/input, 2877] 
split level 198: [/input, 3828] 
split level 199: [/input, 3352] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5500566959381104
10 lb beta sum: 0.0, worst -0.5500576496124268
Time: prepare 0.0114    bound 0.1006    transfer 0.0007    finalize 0.0026    func 0.1179    
Accumulated time: func 0.1726    prepare 0.0217    bound 0.1549    transfer 0.0008    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(-0.16440487) min lb tensor(-0.55004573)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.009891033172607422 
BICCOS Cumulative time: 0.009891033172607422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.53656 (1), -0.53651 (1), -0.53634 (1), -0.53551 (1), -0.53542 (1), -0.53465 (1), -0.53456 (1), -0.53437 (1), -0.53436 (1), -0.53424 (1), -0.53371 (1), -0.53365 (1), -0.53343 (1), -0.53300 (1), -0.53288 (1), -0.53159 (1), -0.53143 (1), -0.53109 (1), -0.53057 (1), -0.52915 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5334    set_bounds 0.0088    solve 0.1180    add 0.0689    
Accumulated time: pickout 0.0004    decision 0.5334    set_bounds 0.0088    solve 0.1180    add 0.0689    
Current (lb-rhs): -0.536562442779541
50 domains visited
Cumulative time: 0.8105695247650146

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
split level 1: [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 90] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5109308958053589
10 lb beta sum: 0.0, worst -0.5103298425674438
Time: prepare 0.0120    bound 0.0980    transfer 0.0007    finalize 0.0021    func 0.1153    
Accumulated time: func 0.2880    prepare 0.0339    bound 0.2529    transfer 0.0015    finalize 0.0048    
all_split False
======================Cut inference begins======================
max lb tensor(0.05249071) min lb tensor(-0.51019359)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.011993408203125 
BICCOS Cumulative time: 0.021884441375732422
Preprocessing time: 0.01146697998046875 Inference time: 0.00017952919006347656 Add cuts time: 9.822845458984375e-05 Cut analysis time: 0.0002486705780029297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30642 (2), -0.30527 (2), -0.30372 (2), -0.30329 (2), -0.30320 (2), -0.30294 (2), -0.29986 (2), -0.29929 (2), -0.29749 (2), -0.29468 (2), -0.29336 (2), -0.28579 (2), -0.28231 (2), -0.28138 (2), -0.27799 (2), -0.27723 (2), -0.27559 (2), -0.27372 (2), -0.27271 (2), -0.27095 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0197    set_bounds 0.0129    solve 0.1154    add 0.0736    
Accumulated time: pickout 0.0013    decision 0.5531    set_bounds 0.0217    solve 0.2334    add 0.1425    
Current (lb-rhs): -0.30642008781433105
100 domains visited
Cumulative time: 1.0454061031341553

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 90] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 46] 
split level 1: [/input-12, 14] [/input-12, 14] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 14] [/input-12, 14] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 31] [/input-12, 79] [/input-12, 31] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2981381416320801
10 lb beta sum: 0.17158500850200653, worst -0.29860758781433105
Time: prepare 0.0058    bound 0.1191    transfer 0.0007    finalize 0.0021    func 0.1308    
Accumulated time: func 0.4188    prepare 0.0400    bound 0.3720    transfer 0.0021    finalize 0.0069    
all_split False
======================Cut inference begins======================
max lb tensor(0.46860343) min lb tensor(-0.29551458)
Number of Verified Splits: 91 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.018253564834594727 
BICCOS Cumulative time: 0.04013800621032715
Preprocessing time: 0.01129770278930664 Inference time: 0.004092216491699219 Add cuts time: 0.0025124549865722656 Cut analysis time: 0.00035119056701660156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10055 (3), -0.10049 (3), -0.09880 (3), -0.09790 (3), -0.09494 (3), -0.09432 (3), -0.09154 (3), -0.09118 (3), -0.08955 (3), -0.08781 (3), -0.08568 (3), -0.08453 (3), -0.08451 (3), -0.08448 (3), -0.08421 (3), -0.08407 (3), -0.08314 (3), -0.08261 (3), -0.08254 (3), -0.08252 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0192    set_bounds 0.0152    solve 0.1309    add 0.0861    
Accumulated time: pickout 0.0022    decision 0.5723    set_bounds 0.0368    solve 0.3643    add 0.2286    
Current (lb-rhs): -0.10055184364318848
150 domains visited
Cumulative time: 1.3160827159881592

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 46] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 1: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 14] [/input-12, 31] [/input-12, 14] [/input-12, 31] [/input-12, 14] [/input-12, 31] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 31] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1009531021118164
10 lb beta sum: 0.43348586559295654, worst -0.10163140296936035
Time: prepare 0.0055    bound 0.1183    transfer 0.0007    finalize 0.0017    func 0.1288    
Accumulated time: func 0.5476    prepare 0.0458    bound 0.4902    transfer 0.0028    finalize 0.0086    
all_split False
======================Cut inference begins======================
max lb tensor(0.30373755) min lb tensor(-0.09462214)
Number of Verified Splits: 197 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 5
#cuts 4-6: 13
#cuts >= 20: 0
BICCOS time: 0.02887749671936035 
BICCOS Cumulative time: 0.0690155029296875
Preprocessing time: 0.012389421463012695 Inference time: 0.011039972305297852 Add cuts time: 0.004743099212646484 Cut analysis time: 0.0007050037384033203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02988 (4), -0.02975 (4), -0.02927 (4), -0.02889 (4), -0.02852 (4), -0.02767 (4), -0.02744 (4), -0.02742 (4), -0.02739 (4), -0.02736 (4), -0.02728 (4), -0.02721 (4), -0.02717 (4), -0.02696 (4), -0.02630 (4), -0.02520 (4), -0.02516 (4), -0.02487 (4), -0.02481 (4), -0.02170 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0199    set_bounds 0.0153    solve 0.1289    add 0.2540    
Accumulated time: pickout 0.0032    decision 0.5922    set_bounds 0.0521    solve 0.4932    add 0.4826    
Current (lb-rhs): -0.029883243143558502
200 domains visited
Cumulative time: 1.764277696609497

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 1: [/input-12, 61] [/input-12, 61] [/input-12, 97] [/input-12, 61] [/input-12, 61] [/input-12, 97] [/input-12, 97] [/input-12, 61] [/input-12, 61] [/input-12, 97] 
split level 2: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 14] [/input-12, 14] [/input-12, 68] [/input-12, 61] [/input-12, 31] [/input-12, 14] [/input-12, 61] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 68] [/input-12, 68] [/input-12, 79] [/input-12, 31] [/input-8, 1266] [/input-12, 68] [/input-12, 31] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0469663143157959
10 lb beta sum: 0.5813518762588501, worst -0.11463230848312378
Time: prepare 0.0058    bound 0.1199    transfer 0.0007    finalize 0.0027    func 0.1323    
Accumulated time: func 0.6799    prepare 0.0519    bound 0.6101    transfer 0.0036    finalize 0.0113    
all_split False
======================Cut inference begins======================
max lb tensor(0.11806852) min lb tensor(-0.00235158)
Number of Verified Splits: 396 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.04194068908691406 
BICCOS Cumulative time: 0.11095619201660156
Preprocessing time: 0.01120758056640625 Inference time: 0.021616458892822266 Add cuts time: 0.008400678634643555 Cut analysis time: 0.0007159709930419922
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0194    set_bounds 0.0154    solve 0.1324    add 0.0265    
Accumulated time: pickout 0.0041    decision 0.6116    set_bounds 0.0675    solve 0.6256    add 0.5091    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59]), tensor([-1., -1.]), tensor([0, 0]), tensor([5.75662906e-20, 8.35965127e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59]), tensor([-1.,  1.]), tensor([0, 0]), tensor([5.75662906e-20, 2.07258031e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 46]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 9.33262557e-02, 1.40700806e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 46]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 9.33262557e-02, 3.75827134e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([5.75662906e-20, 2.11528942e-01, 6.83819205e-02, 5.87742925e-02,
        7.07611442e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([5.75662906e-20, 2.11528942e-01, 6.83819205e-02, 5.87742925e-02,
        1.00703418e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([5.75662906e-20, 2.11528942e-01, 6.83819205e-02, 6.51409030e-02,
        8.22218060e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([5.75662906e-20, 2.11528942e-01, 6.83819205e-02, 6.51409030e-02,
        1.04737103e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([5.75662906e-20, 2.11528942e-01, 5.33467531e-02, 6.22946322e-02,
        6.24506325e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([5.75662906e-20, 2.11528942e-01, 5.33467531e-02, 6.22946322e-02,
        1.01052865e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([5.75662906e-20, 2.11528942e-01, 5.33467531e-02, 6.37890249e-02,
        7.19098449e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([1., 1., 1., 1., 1.]), tensor([0, 0, 0, 0, 0]), tensor([5.75662906e-20, 2.11528942e-01, 5.33467531e-02, 6.37890249e-02,
        1.01782918e-01]), tensor([0, 1, 2, 3, 4]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4494357109069824
10 lb beta sum: 1.168454647064209, worst -0.4401816129684448
Time: prepare 0.0005    bound 0.1137    transfer 0.0002    finalize 0.0002    func 0.1147    
Accumulated time: func 0.7946    prepare 0.0523    bound 0.7239    transfer 0.0038    finalize 0.0115    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 46] [/input-12, 97] 
split level 1: [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 2: [/input-12, 14] [/input-12, 14] [/input-12, 14] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 32] 
split level 4: [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 5: [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 6: [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.480282723903656, worst -0.30063319206237793
10 lb beta sum: 0.519014835357666, worst -0.29946255683898926
Time: prepare 0.0141    bound 0.1158    transfer 0.0018    finalize 0.0019    func 0.1361    
Accumulated time: func 0.9308    prepare 0.0669    bound 0.8397    transfer 0.0056    finalize 0.0133    
all_split False
======================Cut inference begins======================
max lb tensor(0.75790679) min lb tensor(-0.29922223)
Number of Verified Splits: 309 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.5045565962791443, worst -0.7888669967651367
10 lb beta sum: 0.7567229270935059, worst -0.14807988703250885
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 6
#cuts 4-6: 26
#cuts 7-9: 15
#cuts >= 20: 0
BICCOS time: 0.30622029304504395 
BICCOS Cumulative time: 0.4171764850616455
Preprocessing time: 0.009268760681152344 Inference time: 0.28221774101257324 Add cuts time: 0.012737751007080078 Cut analysis time: 0.0019960403442382812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.29922 (7), -0.29586 (7), -0.26282 (7), -0.25467 (7), -0.23688 (7), -0.23490 (7), -0.22072 (7), -0.21977 (7), -0.21650 (7), -0.21232 (7), -0.18208 (7), -0.17942 (7), -0.17478 (7), -0.16699 (7), -0.15671 (7), -0.15523 (7), -0.15028 (7), -0.14739 (7), -0.12216 (7), -0.11255 (7), 
Length of domains: 75
Time: pickout 0.0005    decision 0.0204    set_bounds 0.0280    solve 0.1362    add 0.0012    
Accumulated time: pickout 0.0046    decision 0.6320    set_bounds 0.0955    solve 0.7618    add 0.5103    
Current (lb-rhs): -0.2992222309112549
275 domains visited
Cumulative time: 2.63738751411438

BaB round 2
batch: 75
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 97] [/input-12, 97] [/input-12, 4] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 4] [/input-12, 97] [/input-12, 97] [/input-12, 97] 
split level 1: [/input-12, 4] [/input-12, 4] [/input-12, 92] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 92] [/input-12, 4] [/input-8, 1261] [/input-8, 1261] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2738337516784668
10 lb beta sum: 0.04755253717303276, worst -0.27350401878356934
Time: prepare 0.0048    bound 0.1223    transfer 0.0009    finalize 0.0018    func 0.1324    
Accumulated time: func 1.0631    prepare 0.0719    bound 0.9620    transfer 0.0065    finalize 0.0151    
all_split False
======================Cut inference begins======================
max lb tensor(0.54532391) min lb tensor(-0.27340114)
Number of Verified Splits: 216 of 300
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 16
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.034447669982910156 
BICCOS Cumulative time: 0.45162415504455566
Preprocessing time: 0.008659124374389648 Inference time: 0.02110886573791504 Add cuts time: 0.004151821136474609 Cut analysis time: 0.0005278587341308594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27340 (9), -0.26974 (9), -0.23788 (9), -0.23007 (9), -0.21185 (9), -0.20970 (9), -0.19724 (9), -0.19329 (9), -0.19056 (9), -0.18334 (9), -0.15431 (9), -0.15402 (9), -0.14857 (9), -0.14382 (9), -0.13858 (9), -0.13834 (9), -0.13005 (9), -0.11941 (9), -0.10128 (9), -0.09867 (9), 
Length of domains: 84
Time: pickout 0.0017    decision 0.0177    set_bounds 0.0145    solve 0.1324    add 0.0015    
Accumulated time: pickout 0.0063    decision 0.6497    set_bounds 0.1101    solve 0.8942    add 0.5118    
Current (lb-rhs): -0.273401141166687
359 domains visited
Cumulative time: 2.8411331176757812

BaB round 3
batch: 84
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-8, 1254] [/input-12, 92] [/input-12, 92] [/input-8, 1241] [/input-8, 1246] [/input-12, 92] [/input-12, 4] [/input-12, 4] 
split level 1: [/input-8, 1261] [/input-8, 1241] [/input-8, 37] [/input-8, 37] [/input-8, 1261] [/input-12, 92] [/input-8, 1254] [/input-8, 37] [/input-12, 92] [/input-12, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2525019645690918
10 lb beta sum: 0.1325235366821289, worst -0.2523014545440674
Time: prepare 0.0065    bound 0.1210    transfer 0.0013    finalize 0.0018    func 0.1329    
Accumulated time: func 1.1961    prepare 0.0787    bound 1.0830    transfer 0.0079    finalize 0.0169    
all_split False
======================Cut inference begins======================
max lb tensor(0.49929380) min lb tensor(-0.25224519)
Number of Verified Splits: 238 of 336
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 12
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.03633379936218262 
BICCOS Cumulative time: 0.4879579544067383
Preprocessing time: 0.009727239608764648 Inference time: 0.02353668212890625 Add cuts time: 0.0026366710662841797 Cut analysis time: 0.00043320655822753906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25225 (11), -0.25060 (11), -0.24908 (11), -0.24729 (11), -0.24068 (11), -0.23920 (11), -0.23784 (11), -0.23619 (11), -0.21775 (11), -0.21121 (11), -0.20911 (11), -0.20818 (11), -0.20418 (11), -0.19843 (11), -0.19671 (11), -0.19173 (11), -0.19001 (11), -0.18957 (11), -0.18468 (11), -0.18453 (11), 
Length of domains: 98
Time: pickout 0.0065    decision 0.0193    set_bounds 0.0182    solve 0.1330    add 0.0012    
Accumulated time: pickout 0.0128    decision 0.6690    set_bounds 0.1283    solve 1.0272    add 0.5129    
Current (lb-rhs): -0.2522451877593994
457 domains visited
Cumulative time: 3.0568950176239014

BaB round 4
batch: 98
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 37] [/input-8, 1257] [/input-8, 1261] [/input-8, 37] [/input-8, 1257] [/input-8, 1233] [/input-8, 1246] [/input-8, 1261] [/input-8, 1261] [/input-8, 37] 
split level 1: [/input-8, 1254] [/input-8, 156] [/input-8, 156] [/input-8, 1254] [/input-8, 1254] [/input-8, 357] [/input-8, 37] [/input-8, 1254] [/input-8, 156] [/input-8, 1254] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2443230152130127
10 lb beta sum: 0.3032846450805664, worst -0.2441498041152954
Time: prepare 0.0076    bound 0.1348    transfer 0.0007    finalize 0.0022    func 0.1479    
Accumulated time: func 1.3440    prepare 0.0865    bound 1.2178    transfer 0.0086    finalize 0.0191    
all_split False
======================Cut inference begins======================
max lb tensor(0.53441298) min lb tensor(-0.24409747)
Number of Verified Splits: 259 of 392
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 18
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.04141426086425781 
BICCOS Cumulative time: 0.5293722152709961
Preprocessing time: 0.011061668395996094 Inference time: 0.027322769165039062 Add cuts time: 0.0025649070739746094 Cut analysis time: 0.0004649162292480469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24410 (13), -0.24316 (13), -0.24191 (13), -0.24096 (13), -0.23930 (13), -0.23909 (13), -0.23815 (13), -0.23607 (13), -0.22626 (13), -0.22596 (13), -0.22407 (13), -0.22225 (13), -0.22219 (13), -0.22040 (13), -0.21977 (13), -0.21774 (13), -0.20835 (13), -0.20553 (13), -0.20223 (13), -0.20002 (13), 
Length of domains: 133
Time: pickout 0.0020    decision 0.0175    set_bounds 0.0177    solve 0.1480    add 0.0018    
Accumulated time: pickout 0.0148    decision 0.6865    set_bounds 0.1460    solve 1.1753    add 0.5147    
Current (lb-rhs): -0.24409747123718262
590 domains visited
Cumulative time: 3.286510467529297

BaB round 5
batch: 133
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1574] [/input-8, 37] [/input-8, 1254] [/input-8, 1574] [/input-8, 1262] [/input-8, 26] [/input-8, 1257] [/input-8, 37] [/input-8, 141] [/input-8, 1257] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24388647079467773
10 lb beta sum: 1.2544116973876953, worst -0.23488807678222656
Time: prepare 0.0053    bound 0.1319    transfer 0.0008    finalize 0.0014    func 0.1412    
Accumulated time: func 1.4851    prepare 0.0920    bound 1.3497    transfer 0.0094    finalize 0.0205    
all_split False
======================Cut inference begins======================
max lb tensor(0.61611807) min lb tensor(-0.23478842)
Number of Verified Splits: 163 of 266
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 18
#cuts >= 20: 0
BICCOS time: 0.028340578079223633 
BICCOS Cumulative time: 0.5577127933502197
Preprocessing time: 0.007700681686401367 Inference time: 0.017940998077392578 Add cuts time: 0.0022933483123779297 Cut analysis time: 0.0004055500030517578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23479 (14), -0.23222 (14), -0.23176 (14), -0.22196 (14), -0.22016 (14), -0.20337 (14), -0.20278 (14), -0.19816 (14), -0.18936 (14), -0.18870 (14), -0.17577 (14), -0.17489 (14), -0.17335 (14), -0.17276 (14), -0.16669 (14), -0.16599 (14), -0.15537 (14), -0.15491 (14), -0.15316 (14), -0.15287 (14), 
Length of domains: 103
Time: pickout 0.0024    decision 0.0161    set_bounds 0.0111    solve 0.1413    add 0.0011    
Accumulated time: pickout 0.0172    decision 0.7026    set_bounds 0.1571    solve 1.3165    add 0.5159    
Current (lb-rhs): -0.2347884178161621
693 domains visited
Cumulative time: 3.48783278465271

BaB round 6
batch: 103
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 156] [/input-8, 1246] [/input-12, 71] [/input-8, 37] [/input-8, 1261] [/input-8, 1254] [/input-8, 1262] [/input-8, 37] [/input-8, 1254] [/input-8, 1574] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2370774745941162
10 lb beta sum: 1.4592676162719727, worst -0.22461891174316406
Time: prepare 0.0042    bound 0.1382    transfer 0.0005    finalize 0.0012    func 0.1454    
Accumulated time: func 1.6306    prepare 0.0964    bound 1.4879    transfer 0.0099    finalize 0.0217    
all_split False
======================Cut inference begins======================
max lb tensor(0.65713483) min lb tensor(-0.22454596)
Number of Verified Splits: 143 of 206
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.025037527084350586 
BICCOS Cumulative time: 0.5827503204345703
Preprocessing time: 0.006158590316772461 Inference time: 0.016280412673950195 Add cuts time: 0.0021767616271972656 Cut analysis time: 0.00042176246643066406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22455 (15), -0.22297 (15), -0.22246 (15), -0.22168 (15), -0.22132 (15), -0.21922 (15), -0.21641 (15), -0.21468 (15), -0.20472 (15), -0.20290 (15), -0.16946 (15), -0.16354 (15), -0.16066 (15), -0.16031 (15), -0.15587 (15), -0.15316 (15), -0.15316 (15), -0.15235 (15), -0.15041 (15), -0.15028 (15), 
Length of domains: 63
Time: pickout 0.0018    decision 0.0173    set_bounds 0.0090    solve 0.1455    add 0.0048    
Accumulated time: pickout 0.0190    decision 0.7199    set_bounds 0.1661    solve 1.4620    add 0.5206    
Current (lb-rhs): -0.22454595565795898
756 domains visited
Cumulative time: 3.692148208618164

BaB round 7
batch: 63
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-8, 165] [/input-8, 1254] [/input-8, 165] [/input-8, 165] [/input-8, 156] [/input-12, 71] [/input-12, 71] [/input-8, 788] [/input-8, 1246] 
split level 1: [/input-8, 944] [/input-8, 788] [/input-12, 71] [/input-8, 1254] [/input-12, 71] [/input-8, 944] [/input-8, 788] [/input-8, 944] [/input-12, 71] [/input-8, 156] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22597622871398926
10 lb beta sum: 1.5423498153686523, worst -0.216108500957489
Time: prepare 0.0051    bound 0.1374    transfer 0.0005    finalize 0.0014    func 0.1460    
Accumulated time: func 1.7766    prepare 0.1016    bound 1.6253    transfer 0.0104    finalize 0.0231    
all_split False
======================Cut inference begins======================
max lb tensor(0.59155262) min lb tensor(-0.21602958)
Number of Verified Splits: 130 of 252
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 24
#cuts >= 20: 0
BICCOS time: 0.02604222297668457 
BICCOS Cumulative time: 0.6087925434112549
Preprocessing time: 0.007653713226318359 Inference time: 0.01624464988708496 Add cuts time: 0.00167083740234375 Cut analysis time: 0.0004730224609375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21603 (17), -0.21492 (17), -0.21454 (17), -0.21454 (17), -0.21370 (17), -0.21336 (17), -0.21012 (17), -0.20971 (17), -0.19999 (17), -0.19904 (17), -0.19509 (17), -0.19410 (17), -0.16024 (17), -0.15864 (17), -0.15491 (17), -0.15309 (17), -0.15173 (17), -0.15028 (17), -0.14712 (17), -0.14463 (17), 
Length of domains: 122
Time: pickout 0.0016    decision 0.0166    set_bounds 0.0162    solve 0.1461    add 0.0021    
Accumulated time: pickout 0.0206    decision 0.7365    set_bounds 0.1823    solve 1.6081    add 0.5227    
Current (lb-rhs): -0.2160295844078064
878 domains visited
Cumulative time: 3.9016480445861816

BaB round 8
batch: 122
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 141] [/input-8, 1246] [/input-8, 141] [/input-8, 1262] [/input-8, 141] [/input-8, 1262] [/input-8, 165] [/input-8, 141] [/input-8, 1262] [/input-8, 156] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22164857387542725
10 lb beta sum: 2.0052053928375244, worst -0.2074904441833496
Time: prepare 0.0048    bound 0.1323    transfer 0.0005    finalize 0.0014    func 0.1407    
Accumulated time: func 1.9173    prepare 0.1067    bound 1.7576    transfer 0.0109    finalize 0.0245    
all_split False
======================Cut inference begins======================
max lb tensor(0.51783299) min lb tensor(-0.20744610)
Number of Verified Splits: 144 of 244
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 0.027663707733154297 
BICCOS Cumulative time: 0.6364562511444092
Preprocessing time: 0.007080793380737305 Inference time: 0.018273353576660156 Add cuts time: 0.0018172264099121094 Cut analysis time: 0.0004923343658447266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20745 (18), -0.20180 (18), -0.20112 (18), -0.19880 (18), -0.19745 (18), -0.19644 (18), -0.18984 (18), -0.18883 (18), -0.18346 (18), -0.18333 (18), -0.17864 (18), -0.17854 (18), -0.15629 (18), -0.15028 (18), -0.14414 (18), -0.14102 (18), -0.13772 (18), -0.13654 (18), -0.13608 (18), -0.13500 (18), 
Length of domains: 100
Time: pickout 0.0022    decision 0.0161    set_bounds 0.0103    solve 0.1408    add 0.0013    
Accumulated time: pickout 0.0229    decision 0.7526    set_bounds 0.1926    solve 1.7488    add 0.5241    
Current (lb-rhs): -0.20744609832763672
978 domains visited
Cumulative time: 4.100858926773071

BaB round 9
batch: 100
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 165] [/input-8, 165] [/input-8, 1262] [/input-8, 165] [/input-8, 165] [/input-8, 165] [/input-8, 173] [/input-8, 165] [/input-8, 165] [/input-8, 156] 
split level 1: [/input-8, 1246] [/input-8, 1246] [/input-8, 944] [/input-8, 1246] [/input-8, 1246] [/input-8, 1574] [/input-12, 71] [/input-8, 1246] [/input-8, 941] [/input-8, 1652] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21165919303894043
10 lb beta sum: 2.1634504795074463, worst -0.19992172718048096
Time: prepare 0.0076    bound 0.1346    transfer 0.0008    finalize 0.0017    func 0.1474    
Accumulated time: func 2.0647    prepare 0.1145    bound 1.8923    transfer 0.0117    finalize 0.0263    
all_split False
======================Cut inference begins======================
max lb tensor(0.55045605) min lb tensor(-0.19989681)
Number of Verified Splits: 253 of 400
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 29
#cuts >= 20: 0
BICCOS time: 0.050827741622924805 
BICCOS Cumulative time: 0.687283992767334
Preprocessing time: 0.011224508285522461 Inference time: 0.035466909408569336 Add cuts time: 0.0035674571990966797 Cut analysis time: 0.0005688667297363281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19990 (20), -0.19939 (20), -0.19710 (20), -0.19119 (20), -0.19043 (20), -0.19025 (20), -0.18696 (20), -0.18649 (20), -0.18098 (20), -0.18085 (20), -0.17992 (20), -0.17957 (20), -0.17738 (20), -0.17623 (20), -0.17607 (20), -0.17536 (20), -0.13708 (20), -0.13650 (20), -0.13218 (20), -0.13195 (20), 
Length of domains: 147
Time: pickout 0.0020    decision 0.0172    set_bounds 0.0189    solve 0.1475    add 0.0016    
Accumulated time: pickout 0.0249    decision 0.7698    set_bounds 0.2114    solve 1.8963    add 0.5257    
Current (lb-rhs): -0.19989681243896484
1125 domains visited
Cumulative time: 4.340070724487305

BaB round 10
batch: 147
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 165] [/input-8, 779] [/input-8, 1262] [/input-8, 1181] [/input-8, 1262] [/input-8, 1262] [/input-8, 1246] [/input-8, 1246] [/input-8, 141] [/input-8, 165] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20806026458740234
10 lb beta sum: 2.2891032695770264, worst -0.19318926334381104
Time: prepare 0.0057    bound 0.1382    transfer 0.0006    finalize 0.0019    func 0.1483    
Accumulated time: func 2.2130    prepare 0.1204    bound 2.0305    transfer 0.0123    finalize 0.0281    
all_split False
======================Cut inference begins======================
max lb tensor(0.30742896) min lb tensor(-0.19313276)
Number of Verified Splits: 122 of 294
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 29
#cuts >= 20: 0
BICCOS time: 0.02909374237060547 
BICCOS Cumulative time: 0.7163777351379395
Preprocessing time: 0.008572816848754883 Inference time: 0.017925500869750977 Add cuts time: 0.002079486846923828 Cut analysis time: 0.0005159378051757812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19313 (21), -0.19295 (21), -0.19061 (21), -0.18937 (21), -0.18418 (21), -0.18360 (21), -0.18060 (21), -0.18054 (21), -0.17449 (21), -0.17390 (21), -0.17343 (21), -0.17273 (21), -0.17071 (21), -0.17021 (21), -0.16947 (21), -0.16929 (21), -0.13708 (21), -0.13650 (21), -0.13164 (21), -0.13140 (21), 
Length of domains: 172
Time: pickout 0.0033    decision 0.0196    set_bounds 0.0129    solve 0.1484    add 0.0034    
Accumulated time: pickout 0.0282    decision 0.7894    set_bounds 0.2244    solve 2.0447    add 0.5291    
Current (lb-rhs): -0.19313275814056396
1297 domains visited
Cumulative time: 4.557658672332764

BaB round 11
batch: 172
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1246] [/input-8, 147] [/input-8, 147] [/input-8, 1246] [/input-12, 55] [/input-8, 788] [/input-8, 788] [/input-8, 147] [/input-8, 147] [/input-8, 779] 
cut re-enabled after branching node selection
0 lb beta sum: 2.5742783546447754, worst -0.19313287734985352
10 lb beta sum: 2.5742783546447754, worst -0.19310617446899414
Time: prepare 0.0148    bound 0.1383    transfer 0.0007    finalize 0.0027    func 0.1587    
Accumulated time: func 2.3718    prepare 0.1354    bound 2.1687    transfer 0.0130    finalize 0.0308    
all_split False
======================Cut inference begins======================
max lb tensor(0.14490080) min lb tensor(-0.19308662)
Number of Verified Splits: 72 of 344
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 29
#cuts >= 20: 0
BICCOS time: 0.024755239486694336 
BICCOS Cumulative time: 0.7411329746246338
Preprocessing time: 0.010971784591674805 Inference time: 0.010926246643066406 Add cuts time: 0.002288341522216797 Cut analysis time: 0.0005688667297363281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19309 (22), -0.19289 (22), -0.18767 (22), -0.18674 (22), -0.18662 (22), -0.18621 (22), -0.18408 (22), -0.18349 (22), -0.18226 (22), -0.18117 (22), -0.17859 (22), -0.17773 (22), -0.17764 (22), -0.17738 (22), -0.17425 (22), -0.17348 (22), -0.17307 (22), -0.17285 (22), -0.17256 (22), -0.17226 (22), 
Length of domains: 272
Time: pickout 0.0030    decision 0.0201    set_bounds 0.0143    solve 0.1589    add 0.0017    
Accumulated time: pickout 0.0312    decision 0.8095    set_bounds 0.2387    solve 2.2036    add 0.5307    
Current (lb-rhs): -0.1930866241455078
1569 domains visited
Cumulative time: 4.7813720703125

BaB round 12
batch: 272
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1181] [/input-12, 55] [/input-8, 141] [/input-8, 149] [/input-8, 779] [/input-8, 141] [/input-8, 156] [/input-8, 779] [/input-8, 141] [/input-8, 779] 
cut re-enabled after branching node selection
0 lb beta sum: 2.5463128089904785, worst -0.19289016723632812
10 lb beta sum: 2.5463128089904785, worst -0.19286954402923584
Time: prepare 0.0240    bound 0.1405    transfer 0.0023    finalize 0.0027    func 0.1730    
Accumulated time: func 2.5448    prepare 0.1597    bound 2.3092    transfer 0.0152    finalize 0.0335    
all_split False
======================Cut inference begins======================
max lb tensor(0.22868013) min lb tensor(-0.19285190)
Number of Verified Splits: 63 of 544
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 29
#cuts >= 20: 0
BICCOS time: 0.028878450393676758 
BICCOS Cumulative time: 0.7700114250183105
Preprocessing time: 0.015849590301513672 Inference time: 0.009943723678588867 Add cuts time: 0.0025510787963867188 Cut analysis time: 0.0005340576171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19285 (23), -0.19024 (23), -0.18759 (23), -0.18669 (23), -0.18649 (23), -0.18491 (23), -0.18352 (23), -0.18327 (23), -0.18200 (23), -0.18151 (23), -0.18105 (23), -0.18058 (23), -0.17767 (23), -0.17764 (23), -0.17755 (23), -0.17686 (23), -0.17662 (23), -0.17592 (23), -0.17587 (23), -0.17436 (23), 
Length of domains: 481
Time: pickout 0.0048    decision 0.0259    set_bounds 0.1781    solve 0.1732    add 0.0066    
Accumulated time: pickout 0.0360    decision 0.8354    set_bounds 0.4168    solve 2.3768    add 0.5373    
Current (lb-rhs): -0.19285190105438232
2050 domains visited
Cumulative time: 5.200186252593994

BaB round 13
batch: 481
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1262] [/input-8, 1181] [/input-8, 1181] [/input-8, 1181] [/input-8, 1181] [/input-8, 1181] [/input-8, 788] [/input-8, 1181] [/input-12, 55] [/input-8, 147] 
cut re-enabled after branching node selection
0 lb beta sum: 2.53580904006958, worst -0.19035756587982178
10 lb beta sum: 2.53591251373291, worst -0.1903529167175293
Time: prepare 0.0407    bound 0.1413    transfer 0.0047    finalize 0.0045    func 0.1983    
Accumulated time: func 2.7431    prepare 0.2006    bound 2.4506    transfer 0.0200    finalize 0.0380    
all_split False
======================Cut inference begins======================
max lb tensor(0.24474931) min lb tensor(-0.19034052)
Number of Verified Splits: 204 of 962
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 29
#cuts >= 20: 0
BICCOS time: 0.06705570220947266 
BICCOS Cumulative time: 0.8370671272277832
Preprocessing time: 0.028780460357666016 Inference time: 0.033956050872802734 Add cuts time: 0.0037474632263183594 Cut analysis time: 0.0005717277526855469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19034 (24), -0.19022 (24), -0.18669 (24), -0.18584 (24), -0.18582 (24), -0.18481 (24), -0.18477 (24), -0.18391 (24), -0.18319 (24), -0.18187 (24), -0.18160 (24), -0.18148 (24), -0.18103 (24), -0.18015 (24), -0.17996 (24), -0.17864 (24), -0.17815 (24), -0.17760 (24), -0.17753 (24), -0.17750 (24), 
Length of domains: 758
Time: pickout 0.0099    decision 0.0385    set_bounds 0.0406    solve 0.1986    add 0.0090    
Accumulated time: pickout 0.0459    decision 0.8739    set_bounds 0.4574    solve 2.5754    add 0.5463    
Current (lb-rhs): -0.19034051895141602
2808 domains visited
Cumulative time: 5.565585613250732

BaB round 14
batch: 758
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1241] [/input-8, 1262] [/input-12, 55] [/input-12, 55] [/input-8, 1181] [/input-12, 55] [/input-8, 1748] [/input-8, 149] [/input-8, 1748] [/input-8, 149] 
cut re-enabled after branching node selection
0 lb beta sum: 2.492772102355957, worst -0.19034099578857422
10 lb beta sum: 2.4934451580047607, worst -0.19034183025360107
Time: prepare 0.0641    bound 0.1550    transfer 0.0040    finalize 0.0081    func 0.2419    
Accumulated time: func 2.9850    prepare 0.2650    bound 2.6056    transfer 0.0240    finalize 0.0461    
all_split False
======================Cut inference begins======================
max lb tensor(0.24488854) min lb tensor(-0.19032764)
Number of Verified Splits: 349 of 1516
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 29
#cuts >= 20: 0
BICCOS time: 0.1142737865447998 
BICCOS Cumulative time: 0.951340913772583
Preprocessing time: 0.04579758644104004 Inference time: 0.06027626991271973 Add cuts time: 0.007634162902832031 Cut analysis time: 0.0005657672882080078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19033 (25), -0.18888 (25), -0.18831 (25), -0.18669 (25), -0.18584 (25), -0.18471 (25), -0.18388 (25), -0.18352 (25), -0.18315 (25), -0.18285 (25), -0.18254 (25), -0.18241 (25), -0.18102 (25), -0.18077 (25), -0.18013 (25), -0.17969 (25), -0.17961 (25), -0.17957 (25), -0.17949 (25), -0.17862 (25), 
Length of domains: 1167
Time: pickout 0.0124    decision 0.0524    set_bounds 0.0627    solve 0.2422    add 0.0134    
Accumulated time: pickout 0.0583    decision 0.9263    set_bounds 0.5200    solve 2.8176    add 0.5597    
Current (lb-rhs): -0.19032764434814453
3975 domains visited
Cumulative time: 6.066194295883179

BaB round 15
batch: 1167
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 347] [/input-8, 1262] [/input-8, 788] [/input-12, 55] [/input-8, 1241] [/input-8, 147] [/input-8, 147] [/input-8, 1748] [/input-8, 788] [/input-8, 1748] 
cut re-enabled after branching node selection
0 lb beta sum: 2.456404447555542, worst -0.18846583366394043
10 lb beta sum: 2.4568593502044678, worst -0.18845605850219727
Time: prepare 0.1003    bound 0.1937    transfer 0.0064    finalize 0.0143    func 0.4639    
Accumulated time: func 3.4489    prepare 0.3656    bound 2.7993    transfer 0.0303    finalize 0.0604    
all_split False
======================Cut inference begins======================
max lb tensor(0.23682523) min lb tensor(-0.18844128)
Number of Verified Splits: 493 of 2334
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 29
#cuts >= 20: 0
BICCOS time: 0.17487692832946777 
BICCOS Cumulative time: 1.1262178421020508
Preprocessing time: 0.07149600982666016 Inference time: 0.09256434440612793 Add cuts time: 0.01019597053527832 Cut analysis time: 0.0006206035614013672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18844 (26), -0.18830 (26), -0.18696 (26), -0.18580 (26), -0.18450 (26), -0.18350 (26), -0.18311 (26), -0.18283 (26), -0.18211 (26), -0.18199 (26), -0.18128 (26), -0.18102 (26), -0.18066 (26), -0.18040 (26), -0.18013 (26), -0.18005 (26), -0.17986 (26), -0.17971 (26), -0.17957 (26), -0.17951 (26), 
Length of domains: 1841
Time: pickout 0.0203    decision 0.0750    set_bounds 0.0973    solve 0.4644    add 0.0116    
Accumulated time: pickout 0.0786    decision 1.0013    set_bounds 0.6173    solve 3.2820    add 0.5713    
Current (lb-rhs): -0.18844127655029297
5816 domains visited
Cumulative time: 6.916485786437988

BaB round 16
batch: 1841
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 941] [/input-12, 55] [/input-8, 162] [/input-8, 162] [/input-12, 55] [/input-8, 162] [/input-12, 55] [/input-8, 162] [/input-12, 55] [/input-8, 162] 
cut re-enabled after branching node selection
0 lb beta sum: 2.4244282245635986, worst -0.18829727172851562
10 lb beta sum: 2.4247591495513916, worst -0.18830084800720215
Time: prepare 0.1586    bound 0.2682    transfer 0.0107    finalize 0.0187    func 0.4810    
Accumulated time: func 3.9299    prepare 0.5245    bound 3.0676    transfer 0.0410    finalize 0.0791    
all_split False
======================Cut inference begins======================
max lb tensor(0.22517014) min lb tensor(-0.18829334)
Number of Verified Splits: 701 of 3682
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 30
#cuts >= 20: 0
BICCOS time: 0.26326680183410645 
BICCOS Cumulative time: 1.3894846439361572
Preprocessing time: 0.11354780197143555 Inference time: 0.13347339630126953 Add cuts time: 0.015587806701660156 Cut analysis time: 0.0006577968597412109
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18829 (27), -0.18670 (27), -0.18579 (27), -0.18450 (27), -0.18428 (27), -0.18395 (27), -0.18289 (27), -0.18283 (27), -0.18138 (27), -0.18137 (27), -0.18107 (27), -0.18060 (27), -0.17992 (27), -0.17944 (27), -0.17939 (27), -0.17909 (27), -0.17883 (27), -0.17859 (27), -0.17799 (27), -0.17778 (27), 
Length of domains: 2981
Time: pickout 0.0420    decision 0.1093    set_bounds 0.1564    solve 0.4823    add 0.0273    
Accumulated time: pickout 0.1206    decision 1.1105    set_bounds 0.7737    solve 3.7642    add 0.5986    
Current (lb-rhs): -0.18829333782196045
8797 domains visited
Cumulative time: 8.006351947784424

BaB round 17
batch: 2981
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-12, 55] [/input-8, 1265] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-8, 1574] [/input-12, 55] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19036102294921875
10 lb beta sum: 1.7116804122924805, worst -0.18830883502960205
Time: prepare 0.1289    bound 0.3942    transfer 0.0236    finalize 0.0348    func 0.6211    
Accumulated time: func 4.5510    prepare 0.6536    bound 3.4618    transfer 0.0646    finalize 0.1139    
all_split False
======================Cut inference begins======================
max lb tensor(0.33272171) min lb tensor(-0.18829334)
Number of Verified Splits: 3097 of 5962
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 32
#cuts >= 20: 0
BICCOS time: 0.8679876327514648 
BICCOS Cumulative time: 2.257472276687622
Preprocessing time: 0.18535566329956055 Inference time: 0.6219289302825928 Add cuts time: 0.0599362850189209 Cut analysis time: 0.000766754150390625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18829 (28), -0.18579 (28), -0.18402 (28), -0.18283 (28), -0.18210 (28), -0.18155 (28), -0.18131 (28), -0.18098 (28), -0.18058 (28), -0.17990 (28), -0.17988 (28), -0.17945 (28), -0.17921 (28), -0.17859 (28), -0.17855 (28), -0.17834 (28), -0.17751 (28), -0.17722 (28), -0.17679 (28), -0.17663 (28), 
Length of domains: 2865
Time: pickout 0.0496    decision 0.3434    set_bounds 0.2589    solve 0.7804    add 0.0292    
Accumulated time: pickout 0.1702    decision 1.4539    set_bounds 1.0326    solve 4.5446    add 0.6278    
Current (lb-rhs): -0.18829333782196045
11662 domains visited
Cumulative time: 10.376396417617798

BaB round 18
batch: 2865
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 141] [/input-8, 147] [/input-8, 141] [/input-8, 141] [/input-8, 788] [/input-12, 55] [/input-12, 55] [/input-8, 141] [/input-12, 55] [/input-8, 141] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18828773498535156
10 lb beta sum: 1.7117466926574707, worst -0.1833500862121582
Time: prepare 0.1233    bound 0.3825    transfer 0.0232    finalize 0.0357    func 0.6028    
Accumulated time: func 5.1538    prepare 0.7772    bound 3.8443    transfer 0.0879    finalize 0.1497    
all_split False
======================Cut inference begins======================
max lb tensor(0.52577007) min lb tensor(-0.18333286)
Number of Verified Splits: 1830 of 5730
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 33
#cuts >= 20: 0
BICCOS time: 0.5893640518188477 
BICCOS Cumulative time: 2.8468363285064697
Preprocessing time: 0.18448686599731445 Inference time: 0.36867380142211914 Add cuts time: 0.0353243350982666 Cut analysis time: 0.0008790493011474609
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18333 (29), -0.18043 (29), -0.17905 (29), -0.17887 (29), -0.17774 (29), -0.17763 (29), -0.17759 (29), -0.17740 (29), -0.17661 (29), -0.17594 (29), -0.17587 (29), -0.17549 (29), -0.17493 (29), -0.17479 (29), -0.17450 (29), -0.17447 (29), -0.17398 (29), -0.17367 (29), -0.17327 (29), -0.17259 (29), 
Length of domains: 3900
Time: pickout 0.0674    decision 0.1642    set_bounds 0.4105    solve 0.6048    add 0.0145    
Accumulated time: pickout 0.2376    decision 1.6181    set_bounds 1.4431    solve 5.1494    add 0.6424    
Current (lb-rhs): -0.18333286046981812
15562 domains visited
Cumulative time: 12.25091814994812

BaB round 19
batch: 3900
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-8, 1741] [/input-8, 1741] [/input-8, 1738] [/input, 2150] [/input-8, 1738] [/input-8, 1738] [/input-8, 1372] [/input-8, 1738] [/input-8, 1372] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18504929542541504
10 lb beta sum: 1.857762098312378, worst -0.18072479963302612
Time: prepare 0.1666    bound 0.4949    transfer 0.0308    finalize 0.0468    func 0.7905    
Accumulated time: func 5.9443    prepare 0.9442    bound 4.3392    transfer 0.1186    finalize 0.1965    
all_split False
======================Cut inference begins======================
max lb tensor(0.53883016) min lb tensor(-0.18071136)
Number of Verified Splits: 2277 of 7800
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 35
#cuts >= 20: 0
BICCOS time: 0.9561419486999512 
BICCOS Cumulative time: 3.802978277206421
Preprocessing time: 0.2446448802947998 Inference time: 0.6653299331665039 Add cuts time: 0.04533267021179199 Cut analysis time: 0.0008344650268554688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18071 (30), -0.17904 (30), -0.17886 (30), -0.17631 (30), -0.17601 (30), -0.17570 (30), -0.17509 (30), -0.17478 (30), -0.17409 (30), -0.17402 (30), -0.17398 (30), -0.17351 (30), -0.17287 (30), -0.17258 (30), -0.17227 (30), -0.17202 (30), -0.17101 (30), -0.17077 (30), -0.16988 (30), -0.16979 (30), 
Length of domains: 5523
Time: pickout 0.0880    decision 0.2204    set_bounds 0.5282    solve 0.7927    add 0.0234    
Accumulated time: pickout 0.3256    decision 1.8385    set_bounds 1.9713    solve 5.9421    add 0.6657    
Current (lb-rhs): -0.18071135878562927
21085 domains visited
Cumulative time: 14.89605164527893

BaB round 20
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1372] [/input-8, 1372] [/input-8, 1741] [/input, 3190] [/input-8, 162] [/input-8, 162] [/input-8, 146] [/input-8, 1372] [/input-8, 146] [/input-8, 1372] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18146169185638428
10 lb beta sum: 2.162311315536499, worst -0.1736377477645874
Time: prepare 0.1773    bound 0.5136    transfer 0.0296    finalize 0.2279    func 1.0039    
Accumulated time: func 6.9482    prepare 1.1218    bound 4.8527    transfer 0.1482    finalize 0.4244    
all_split False
======================Cut inference begins======================
max lb tensor(0.30786920) min lb tensor(-0.17281914)
Number of Verified Splits: 1202 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 36
#cuts >= 20: 0
BICCOS time: 0.5564796924591064 
BICCOS Cumulative time: 4.359457969665527
Preprocessing time: 0.26068782806396484 Inference time: 0.2693347930908203 Add cuts time: 0.02572464942932129 Cut analysis time: 0.000732421875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18071 (30), -0.17904 (30), -0.17886 (30), -0.17409 (30), -0.17398 (30), -0.17282 (31), -0.17258 (30), -0.17239 (31), -0.17227 (30), -0.17212 (31), -0.17117 (31), -0.17101 (30), -0.17081 (31), -0.16979 (30), -0.16972 (31), -0.16929 (30), -0.16920 (31), -0.16919 (30), -0.16888 (30), -0.16844 (31), 
Length of domains: 8417
Time: pickout 0.0748    decision 0.2300    set_bounds 0.3706    solve 1.0063    add 0.0349    
Accumulated time: pickout 0.4005    decision 2.0685    set_bounds 2.3419    solve 6.9484    add 0.7006    
Current (lb-rhs): -0.18071135878562927
28075 domains visited
current_vram/total_varm: 12.7GB/99.9GB, batch_size increase to 8192
Cumulative time: 17.19432830810547

BaB round 21
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-8, 162] [/input-12, 55] [/input-8, 1741] [/input-8, 941] [/input-8, 507] [/input-8, 149] [/input-8, 162] [/input-8, 1738] [/input-8, 149] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18346941471099854
10 lb beta sum: 2.310933828353882, worst -0.17476868629455566
Time: prepare 0.3562    bound 0.9599    transfer 0.0769    finalize 0.1001    func 1.6034    
Accumulated time: func 8.5516    prepare 1.4783    bound 5.8127    transfer 0.2251    finalize 0.5245    
all_split False
======================Cut inference begins======================
max lb tensor(0.60365868) min lb tensor(-0.17473406)
Number of Verified Splits: 4861 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 36
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 2.0135982036590576 
BICCOS Cumulative time: 6.373056173324585
Preprocessing time: 0.5232148170471191 Inference time: 1.3804872035980225 Add cuts time: 0.10899019241333008 Cut analysis time: 0.0009059906005859375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17473 (31), -0.17282 (31), -0.17140 (31), -0.16978 (31), -0.16798 (32), -0.16777 (31), -0.16774 (32), -0.16736 (31), -0.16720 (32), -0.16645 (31), -0.16640 (32), -0.16611 (31), -0.16608 (32), -0.16592 (32), -0.16477 (32), -0.16465 (32), -0.16435 (31), -0.16389 (31), -0.16355 (31), -0.16316 (32), 
Length of domains: 11748
Time: pickout 0.1514    decision 0.6519    set_bounds 0.9576    solve 1.6068    add 0.0478    
Accumulated time: pickout 0.5519    decision 2.7204    set_bounds 3.2995    solve 8.5552    add 0.7484    
Current (lb-rhs): -0.17473405599594116
39598 domains visited
current_vram/total_varm: 19.9GB/99.9GB, batch_size increase to 16384
Cumulative time: 22.695037603378296

BaB round 22
batch: 11748
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 858] [/input-8, 1574] [/input-8, 162] [/input-8, 1574] [/input-8, 162] [/input-8, 1652] [/input-8, 162] [/input-8, 162] [/input, 858] [/input-8, 162] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18012523651123047
10 lb beta sum: 2.2416999340057373, worst -0.1713809370994568
Time: prepare 0.5147    bound 1.8618    transfer 0.1160    finalize 0.1531    func 2.8003    
Accumulated time: func 11.3519    prepare 1.9934    bound 7.6744    transfer 0.3411    finalize 0.6775    
all_split False
======================Cut inference begins======================
max lb tensor(0.54143834) min lb tensor(-0.17136508)
Number of Verified Splits: 3505 of 23496
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 39.
#cuts 1-3: 39
#cuts >= 20: 0
BICCOS time: 2.033759593963623 
BICCOS Cumulative time: 8.406815767288208
Preprocessing time: 1.052734136581421 Inference time: 0.827631950378418 Add cuts time: 0.1525580883026123 Cut analysis time: 0.000835418701171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17137 (32), -0.17070 (32), -0.17029 (32), -0.17019 (32), -0.16797 (33), -0.16772 (33), -0.16563 (32), -0.16560 (32), -0.16475 (33), -0.16462 (33), -0.16453 (32), -0.16435 (32), -0.16419 (32), -0.16409 (32), -0.16374 (33), -0.16343 (33), -0.16308 (33), -0.16283 (32), -0.16262 (32), -0.16239 (33), 
Length of domains: 19991
Time: pickout 0.2697    decision 0.6508    set_bounds 1.5811    solve 2.8054    add 0.0779    
Accumulated time: pickout 0.8216    decision 3.3712    set_bounds 4.8806    solve 11.3605    add 0.8263    
Current (lb-rhs): -0.17136508226394653
59589 domains visited
Cumulative time: 30.178624629974365

BaB round 23
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 857] [/input-8, 1652] [/input-8, 1652] [/input-8, 1574] [/input, 857] [/input-8, 1741] [/input, 857] [/input-8, 162] [/input-8, 162] [/input-8, 294] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17712342739105225
10 lb beta sum: 2.5711796283721924, worst -0.16701418161392212
Time: prepare 0.7308    bound 1.8334    transfer 0.1559    finalize 0.5668    func 3.5084    
Accumulated time: func 14.8602    prepare 2.7246    bound 9.5078    transfer 0.4970    finalize 1.2443    
all_split False
======================Cut inference begins======================
max lb tensor(0.87267458) min lb tensor(-0.16698480)
Number of Verified Splits: 21005 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 40
#cuts >= 20: 0
BICCOS time: 7.014429092407227 
BICCOS Cumulative time: 15.421244859695435
Preprocessing time: 1.0431842803955078 Inference time: 5.482010126113892 Add cuts time: 0.48823976516723633 Cut analysis time: 0.0009949207305908203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16797 (33), -0.16772 (33), -0.16698 (33), -0.16688 (33), -0.16616 (33), -0.16538 (33), -0.16489 (33), -0.16475 (33), -0.16435 (33), -0.16237 (34), -0.16231 (33), -0.16223 (34), -0.16216 (34), -0.16192 (33), -0.16176 (33), -0.16164 (33), -0.16135 (33), -0.16127 (34), -0.16125 (33), -0.16117 (34), 
Length of domains: 15370
Time: pickout 0.3192    decision 1.7287    set_bounds 1.8270    solve 3.5144    add 0.0488    
Accumulated time: pickout 1.1407    decision 5.0999    set_bounds 6.7077    solve 14.8749    add 0.8751    
Current (lb-rhs): -0.16796982288360596
71352 domains visited
current_vram/total_varm: 32.1GB/99.9GB, batch_size increase to 32768
Cumulative time: 44.90607762336731

BaB round 24
batch: 15370
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1372] [/input-8, 1372] [/input, 857] [/input-8, 149] [/input-8, 941] [/input-8, 1372] [/input-8, 1741] [/input, 2150] [/input-8, 944] [/input-8, 1738] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17454540729522705
10 lb beta sum: 2.665428876876831, worst -0.16579508781433105
Time: prepare 0.7075    bound 1.7267    transfer 0.1556    finalize 0.5489    func 3.3448    
Accumulated time: func 18.2050    prepare 3.4325    bound 11.2346    transfer 0.6527    finalize 1.7932    
all_split False
======================Cut inference begins======================
max lb tensor(0.63896680) min lb tensor(-0.16577560)
Number of Verified Splits: 13034 of 30740
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 40
#cuts >= 20: 0
BICCOS time: 4.895450115203857 
BICCOS Cumulative time: 20.316694974899292
Preprocessing time: 1.0434813499450684 Inference time: 3.5637218952178955 Add cuts time: 0.2871549129486084 Cut analysis time: 0.0010919570922851562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16578 (34), -0.16568 (34), -0.16495 (34), -0.16467 (34), -0.16441 (34), -0.16421 (34), -0.16368 (34), -0.16316 (34), -0.16018 (34), -0.15937 (35), -0.15925 (35), -0.15923 (35), -0.15917 (35), -0.15891 (34), -0.15887 (34), -0.15883 (35), -0.15866 (35), -0.15861 (34), -0.15848 (35), -0.15828 (35), 
Length of domains: 17706
Time: pickout 0.3175    decision 1.1911    set_bounds 1.7776    solve 3.3519    add 0.1193    
Accumulated time: pickout 1.4582    decision 6.2910    set_bounds 8.4853    solve 18.2269    add 0.9945    
Current (lb-rhs): -0.1657755970954895
89058 domains visited
Cumulative time: 56.735846757888794

BaB round 25
batch: 17706
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 346] [/input-8, 182] [/input-8, 162] [/input, 858] [/input, 858] [/input, 873] [/input, 858] [/input, 857] [/input-8, 1388] [/input-8, 1266] 
cut re-enabled after branching node selection
0 lb beta sum: 3.0624899864196777, worst -0.16466635465621948
10 lb beta sum: 3.0627670288085938, worst -0.1646605134010315
Time: prepare 1.6681    bound 1.9838    transfer 0.1797    finalize 0.6478    func 4.7131    
Accumulated time: func 22.9182    prepare 5.1010    bound 13.2184    transfer 0.8324    finalize 2.4410    
all_split False
======================Cut inference begins======================
max lb tensor(0.23558402) min lb tensor(-0.16464871)
Number of Verified Splits: 7544 of 35412
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 40
#cuts >= 20: 0
BICCOS time: 3.879762649536133 
BICCOS Cumulative time: 24.196457624435425
Preprocessing time: 1.2098324298858643 Inference time: 2.5204503536224365 Add cuts time: 0.14856410026550293 Cut analysis time: 0.0009157657623291016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16465 (35), -0.16439 (35), -0.16367 (35), -0.16315 (35), -0.16310 (35), -0.16310 (35), -0.16251 (35), -0.16165 (35), -0.16156 (35), -0.16094 (35), -0.16006 (35), -0.15989 (35), -0.15932 (36), -0.15921 (36), -0.15920 (36), -0.15889 (35), -0.15881 (35), -0.15860 (35), -0.15816 (35), -0.15809 (36), 
Length of domains: 27868
Time: pickout 0.4391    decision 1.9241    set_bounds 2.0513    solve 4.7205    add 0.1119    
Accumulated time: pickout 1.8972    decision 8.2151    set_bounds 10.5366    solve 22.9474    add 1.1064    
Current (lb-rhs): -0.16464871168136597
116926 domains visited
Cumulative time: 69.98864221572876

BaB round 26
batch: 27868
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1372] [/input-8, 166] [/input, 857] [/input, 346] [/input, 857] [/input, 346] [/input, 3433] [/input-8, 1741] [/input, 857] [/input, 857] 
cut re-enabled after branching node selection
0 lb beta sum: 3.049535036087036, worst -0.16310256719589233
10 lb beta sum: 3.0496788024902344, worst -0.16311496496200562
Time: prepare 2.6343    bound 3.0864    transfer 0.2882    finalize 0.3884    func 6.7678    
Accumulated time: func 29.6860    prepare 7.7358    bound 16.3048    transfer 1.1206    finalize 2.8295    
all_split False
======================Cut inference begins======================
max lb tensor(0.24036670) min lb tensor(-0.16309613)
Number of Verified Splits: 13320 of 55736
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 41
#cuts >= 20: 0
BICCOS time: 7.0986716747283936 
BICCOS Cumulative time: 31.29512929916382
Preprocessing time: 2.456761598587036 Inference time: 4.081069469451904 Add cuts time: 0.559772253036499 Cut analysis time: 0.0010683536529541016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16310 (36), -0.16305 (36), -0.16260 (36), -0.16200 (36), -0.16149 (36), -0.16141 (36), -0.16112 (36), -0.16086 (36), -0.16045 (36), -0.15994 (36), -0.15987 (36), -0.15985 (36), -0.15915 (36), -0.15914 (36), -0.15904 (36), -0.15895 (36), -0.15880 (36), -0.15836 (36), -0.15745 (36), -0.15737 (37), 
Length of domains: 42416
Time: pickout 0.6844    decision 2.9385    set_bounds 3.7501    solve 6.7829    add 0.1568    
Accumulated time: pickout 2.5816    decision 11.1536    set_bounds 14.2867    solve 29.7303    add 1.2632    
Current (lb-rhs): -0.1630961298942566
159342 domains visited
Cumulative time: 91.61125636100769

BaB round 27
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1757] [/input, 346] [/input, 857] [/input, 857] [/input-8, 1265] [/input, 346] [/input, 346] [/input, 857] [/input, 873] [/input-8, 166] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1687849760055542
10 lb beta sum: 2.5534396171569824, worst -0.16198110580444336
Time: prepare 1.6292    bound 8.8134    transfer 0.3119    finalize 0.4746    func 12.4176    
Accumulated time: func 42.1036    prepare 9.3654    bound 25.1182    transfer 1.4325    finalize 3.3041    
all_split False
======================Cut inference begins======================
max lb tensor(0.35420847) min lb tensor(-0.16195148)
Number of Verified Splits: 18692 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 42
#cuts >= 20: 0
BICCOS time: 8.81315016746521 
BICCOS Cumulative time: 40.10827946662903
Preprocessing time: 2.2258358001708984 Inference time: 6.0502402782440186 Add cuts time: 0.5359582901000977 Cut analysis time: 0.0011157989501953125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16195 (37), -0.16149 (36), -0.16140 (37), -0.16086 (36), -0.16053 (37), -0.16048 (37), -0.16045 (36), -0.16021 (37), -0.15994 (36), -0.15985 (36), -0.15984 (37), -0.15983 (37), -0.15981 (37), -0.15915 (36), -0.15911 (37), -0.15902 (37), -0.15895 (36), -0.15881 (37), -0.15832 (37), -0.15780 (37), 
Length of domains: 56492
Time: pickout 0.7066    decision 3.3079    set_bounds 4.5208    solve 12.4323    add 0.1834    
Accumulated time: pickout 3.2883    decision 14.4615    set_bounds 18.8075    solve 42.1627    add 1.4466    
Current (lb-rhs): -0.16195148229599
206186 domains visited
Cumulative time: 121.87414240837097

BaB round 28
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2029] [/input-8, 182] [/input, 346] [/input-8, 1388] [/input-8, 162] [/input-8, 146] [/input-8, 347] [/input-8, 1372] [/input-8, 146] [/input, 857] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16656196117401123
10 lb beta sum: 2.6954426765441895, worst -0.1590973138809204
Time: prepare 1.6118    bound 8.8147    transfer 0.3128    finalize 0.4954    func 12.6075    
Accumulated time: func 54.7112    prepare 10.9776    bound 33.9329    transfer 1.7453    finalize 3.7995    
all_split False
======================Cut inference begins======================
max lb tensor(0.35362625) min lb tensor(-0.15906423)
Number of Verified Splits: 15849 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 43
#cuts >= 20: 0
BICCOS time: 8.130357265472412 
BICCOS Cumulative time: 48.23863673210144
Preprocessing time: 2.338350296020508 Inference time: 5.389248609542847 Add cuts time: 0.4018363952636719 Cut analysis time: 0.0009219646453857422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16195 (37), -0.16140 (37), -0.16021 (37), -0.15984 (37), -0.15981 (37), -0.15911 (37), -0.15906 (38), -0.15903 (38), -0.15902 (37), -0.15881 (37), -0.15839 (38), -0.15832 (37), -0.15806 (37), -0.15790 (37), -0.15708 (38), -0.15705 (37), -0.15704 (37), -0.15689 (37), -0.15685 (37), -0.15663 (37), 
Length of domains: 73411
Time: pickout 0.7224    decision 3.6687    set_bounds 4.0494    solve 12.6217    add 13.0635    
Accumulated time: pickout 4.0107    decision 18.1302    set_bounds 22.8569    solve 54.7844    add 14.5101    
Current (lb-rhs): -0.16195148229599
255873 domains visited
Cumulative time: 164.38904213905334

BaB round 29
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 225] [/input-8, 1372] [/input, 156] [/input-8, 1738] [/input, 857] [/input-8, 782] [/input-8, 347] [/input, 329] [/input-8, 492] [/input, 3433] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16606855392456055
10 lb beta sum: 2.800671339035034, worst -0.15803194046020508
Time: prepare 1.6002    bound 8.8147    transfer 0.3052    finalize 0.6060    func 11.7672    
Accumulated time: func 66.4784    prepare 12.5783    bound 42.7475    transfer 2.0505    finalize 4.4055    
all_split False
======================Cut inference begins======================
max lb tensor(0.35841322) min lb tensor(-0.15801144)
Number of Verified Splits: 16065 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 43
#cuts >= 20: 0
BICCOS time: 8.156396865844727 
BICCOS Cumulative time: 56.39503359794617
Preprocessing time: 2.2767958641052246 Inference time: 5.472137212753296 Add cuts time: 0.4061145782470703 Cut analysis time: 0.0013492107391357422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15906 (38), -0.15903 (38), -0.15839 (38), -0.15806 (37), -0.15801 (38), -0.15790 (37), -0.15748 (38), -0.15704 (37), -0.15692 (38), -0.15685 (37), -0.15663 (37), -0.15644 (38), -0.15641 (38), -0.15621 (37), -0.15587 (38), -0.15583 (38), -0.15574 (38), -0.15534 (37), -0.15532 (38), -0.15527 (37), 
Length of domains: 90114
Time: pickout 0.7310    decision 3.3343    set_bounds 5.3554    solve 11.7846    add 0.4096    
Accumulated time: pickout 4.7416    decision 21.4646    set_bounds 28.2124    solve 66.5689    add 14.9198    
Current (lb-rhs): -0.15906423330307007
305344 domains visited
Cumulative time: 194.74556851387024

BaB round 30
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3356] [/input, 3162] [/input, 857] [/input, 857] [/input, 857] [/input, 346] [/input, 3433] [/input, 3433] [/input, 873] [/input, 857] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16412603855133057
10 lb beta sum: 2.7942841053009033, worst -0.15606582164764404
Time: prepare 1.7305    bound 8.8284    transfer 0.3219    finalize 1.8477    func 13.1581    
Accumulated time: func 79.6365    prepare 14.3093    bound 51.5759    transfer 2.3723    finalize 6.2532    
all_split False
======================Cut inference begins======================
max lb tensor(0.36076093) min lb tensor(-0.15597045)
Number of Verified Splits: 15018 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 43
#cuts >= 20: 0
BICCOS time: 8.06483793258667 
BICCOS Cumulative time: 64.45987153053284
Preprocessing time: 2.1183042526245117 Inference time: 5.550643682479858 Add cuts time: 0.3945760726928711 Cut analysis time: 0.001313924789428711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15906 (38), -0.15903 (38), -0.15839 (38), -0.15801 (38), -0.15748 (38), -0.15692 (38), -0.15644 (38), -0.15641 (38), -0.15597 (38), -0.15587 (38), -0.15583 (38), -0.15574 (38), -0.15532 (38), -0.15522 (38), -0.15519 (39), -0.15511 (38), -0.15508 (38), -0.15505 (38), -0.15497 (38), -0.15481 (38), 
Length of domains: 107864
Time: pickout 0.7924    decision 3.3964    set_bounds 5.3714    solve 13.1728    add 0.4038    
Accumulated time: pickout 5.5341    decision 24.8609    set_bounds 33.5838    solve 79.7418    add 15.3235    
Current (lb-rhs): -0.15906423330307007
355862 domains visited
Time out!!!!!!!!
Result: unknown in 230.0976 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 60, vnnlib ID: 60 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.67420197, -25.24380302, -28.67889023, -28.16714287, -31.08404350,
         -29.38106728, -30.15142441, -31.47988510, -26.39269066, -27.12945747]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [576]; unstable size 576; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 131, 1, 576] with unstable size 130 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 576] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 576] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [130]; unstable size 130; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 130] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 130] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.58424449, 2.27789783, 1.83070707, 4.66640186, 2.88375139, 3.73132420,
         4.99384785, 0.22025681, 1.28892267]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0690 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 61, vnnlib ID: 61 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.82417488, -22.89990807, -24.55294609, -25.83590508, -23.99347115,
         -26.13236237, -25.80495453, -25.02459717, -21.89008331, -22.53929710]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [969]; unstable size 969; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 342, 1, 969] with unstable size 341 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 969] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 969] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [341]; unstable size 341; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 341] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 341] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.74619722,  0.19975376,  1.29172421, -0.31224155,  1.47659206,
          0.91263294,  0.33260223, -2.13532114, -1.77720261]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.82417488, -22.89990807, -24.55294609, -25.83590508, -23.99347115,
         -26.13236237, -25.80495453, -25.02459717, -21.89008331, -22.53929710]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.82417488, -22.89990807, -24.55294800, -25.83590889, -23.99347305,
          -26.13236427, -25.80495453, -25.02459717, -21.89008522, -22.53930092],
         [-22.82417488, -22.89990807, -24.55294800, -25.83590889, -23.99347305,
          -26.13236427, -25.80495453, -25.02459717, -21.89008522, -22.53930092]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.07573318,  1.16929817, -0.93408966, -0.28487396]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0782 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 62, vnnlib ID: 62 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.59115791, -34.97940826, -33.80213165, -37.62691879, -34.83726883,
         -38.96181488, -38.03176880, -36.83436584, -27.23085785, -35.44748306]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [675]; unstable size 675; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 675] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 675] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 675] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 186] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.53111219,  6.68231106,  5.40997362,  9.09447956,  6.24459028,
         10.17940712,  9.45173359,  8.14738560,  7.13950682]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0739 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 63, vnnlib ID: 63 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.97131920, -28.80028915, -23.13581467, -25.54052544, -23.92788124,
         -24.59213448, -25.03964615, -26.08118820, -27.66898346, -29.01627922]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [591]; unstable size 591; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 127, 1, 591] with unstable size 126 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 591] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 591] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [126]; unstable size 126; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 126] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 126] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.02588868,  2.80756664, -2.69469142, -0.18732244, -1.80930674,
         -1.25439477,  0.15932608,  1.76952910,  3.03217888]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.97131920, -28.80028915, -23.13581467, -25.54052544, -23.92788124,
         -24.59213448, -25.03964615, -26.08118820, -27.66898346, -29.01627922]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.97132111, -28.80028915, -23.13581467, -25.54052544, -23.92788315,
          -24.59213638, -25.03964615, -26.08118629, -27.66898155, -29.01628113],
         [-26.97132111, -28.80028915, -23.13581467, -25.54052544, -23.92788315,
          -24.59213638, -25.03964615, -26.08118629, -27.66898155, -29.01628113]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.90383148,  0.50087929, -1.11176300, -0.44750977]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0839 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 64, vnnlib ID: 64 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.24694061, -22.01322937, -12.40090942, -15.54353809, -13.43921661,
         -15.79218292, -15.07034302, -17.14505386, -19.37706184, -21.17110634]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1119]; unstable size 1119; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 287, 1, 1119] with unstable size 286 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 1119] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1119] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [286]; unstable size 286; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 286] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 286] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.60318422,  7.55680847,  1.79625535, -0.18556568,  1.88933921,
          1.24666595,  2.70504022,  5.15829420,  6.78245878]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.24694061, -22.01322937, -12.40090942, -15.54353809, -13.43921661,
         -15.79218292, -15.07034302, -17.14505386, -19.37706184, -21.17110634]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.76it/s]100%|██████████| 1/1 [00:00<00:00,  8.75it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.81661415, -22.46876526, -13.03005505, -15.94738007, -13.62407589,
          -16.17176628, -15.44046783, -17.37049484, -19.77799225, -21.58205223]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.59402084]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1172 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 31.2331485748291
alpha/beta optimization time: 1.245577335357666
initial alpha-crown bounds: tensor([[ 3.65191174,  7.65019798,  1.84882736, -0.11801690,  1.94617486,
          1.30992162,  2.79970980,  5.27360153,  6.87082100]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.11801689863204956
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.56537008285522
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5653305053711
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.56530356407166
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.56528162956238
Verifying property 3 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.11801690]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.24694061, -22.01322937, -12.40090942, -15.54353809, -13.43921661,
        -15.79218292, -15.07034302, -17.14505386, -19.37706184, -21.17110634],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.11801690]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1119
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 284
Node /15 input 0: size torch.Size([100]) unstable 28
-----------------
# of unstable neurons: 1431
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010752677917480469
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11801749467849731
10 lb beta sum: 0.0, worst -0.11801871657371521
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0537    transfer 0.0001    finalize 0.0001    func 0.0541    
Accumulated time: func 0.0541    prepare 0.0002    bound 0.0537    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 2] 
split level 2: [/input-12, 67] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 97] 
split level 5: [/input-12, 10] 
split level 6: [/input-12, 56] 
split level 7: [/input-12, 68] 
split level 8: [/input-12, 79] 
split level 9: [/input-12, 55] 
split level 10: [/input-12, 83] 
split level 11: [/input-12, 42] 
split level 12: [/input-8, 2013] 
split level 13: [/input-12, 86] 
split level 14: [/input-8, 1069] 
split level 15: [/input-8, 1381] 
split level 16: [/input-8, 181] 
split level 17: [/input-8, 182] 
split level 18: [/input-8, 156] 
split level 19: [/input-8, 2009] 
split level 20: [/input-8, 1076] 
split level 21: [/input-8, 1389] 
split level 22: [/input-8, 1186] 
split level 23: [/input-8, 1372] 
split level 24: [/input-8, 1244] 
split level 25: [/input-8, 2005] 
split level 26: [/input-8, 1181] 
split level 27: [/input-8, 1390] 
split level 28: [/input-8, 171] 
split level 29: [/input-8, 1366] 
split level 30: [/input-12, 35] 
split level 31: [/input-8, 1373] 
split level 32: [/input, 3258] 
split level 33: [/input-8, 1365] 
split level 34: [/input-8, 2012] 
split level 35: [/input-8, 2010] 
split level 36: [/input-8, 101] 
split level 37: [/input, 3206] 
split level 38: [/input-8, 93] 
split level 39: [/input, 968] 
split level 40: [/input-8, 1356] 
split level 41: [/input-8, 354] 
split level 42: [/input, 3273] 
split level 43: [/input-8, 251] 
split level 44: [/input-8, 1367] 
split level 45: [/input, 920] 
split level 46: [/input, 3241] 
split level 47: [/input-8, 252] 
split level 48: [/input-8, 1358] 
split level 49: [/input, 629] 
split level 50: [/input-8, 907] 
split level 51: [/input, 819] 
split level 52: [/input-8, 1369] 
split level 53: [/input-8, 1378] 
split level 54: [/input-8, 102] 
split level 55: [/input-8, 1359] 
split level 56: [/input, 3188] 
split level 57: [/input, 2762] 
split level 58: [/input-8, 1174] 
split level 59: [/input-8, 2008] 
split level 60: [/input-8, 2031] 
split level 61: [/input-8, 1211] 
split level 62: [/input-8, 817] 
split level 63: [/input-8, 203] 
split level 64: [/input-8, 250] 
split level 65: [/input-8, 1385] 
split level 66: [/input-8, 16] 
split level 67: [/input-8, 1377] 
split level 68: [/input-8, 189] 
split level 69: [/input, 804] 
split level 70: [/input-8, 1361] 
split level 71: [/input, 3226] 
split level 72: [/input-8, 1147] 
split level 73: [/input, 2694] 
split level 74: [/input-8, 147] 
split level 75: [/input, 820] 
split level 76: [/input, 3222] 
split level 77: [/input-8, 188] 
split level 78: [/input, 3221] 
split level 79: [/input-8, 1146] 
split level 80: [/input-8, 1185] 
split level 81: [/input, 2867] 
split level 82: [/input, 3171] 
split level 83: [/input-8, 2003] 
split level 84: [/input-8, 23] 
split level 85: [/input-8, 24] 
split level 86: [/input-8, 774] 
split level 87: [/input, 2835] 
split level 88: [/input, 3532] 
split level 89: [/input-8, 337] 
split level 90: [/input, 836] 
split level 91: [/input-8, 1061] 
split level 92: [/input, 3209] 
split level 93: [/input, 835] 
split level 94: [/input, 2678] 
split level 95: [/input-8, 479] 
split level 96: [/input-8, 190] 
split level 97: [/input, 803] 
split level 98: [/input-8, 17] 
split level 99: [/input-8, 1386] 
split level 100: [/input, 81] 
split level 101: [/input, 936] 
split level 102: [/input, 3464] 
split level 103: [/input, 2883] 
split level 104: [/input, 825] 
split level 105: [/input, 2865] 
split level 106: [/input, 2697] 
split level 107: [/input, 2851] 
split level 108: [/input, 2866] 
split level 109: [/input-8, 1398] 
split level 110: [/input, 3238] 
split level 111: [/input, 940] 
split level 112: [/input-8, 249] 
split level 113: [/input, 2696] 
split level 114: [/input, 3187] 
split level 115: [/input-8, 1399] 
split level 116: [/input-8, 32] 
split level 117: [/input-8, 607] 
split level 118: [/input, 2882] 
split level 119: [/input-8, 809] 
split level 120: [/input-8, 336] 
split level 121: [/input, 3146] 
split level 122: [/input, 2881] 
split level 123: [/input, 2849] 
split level 124: [/input, 2748] 
split level 125: [/input, 3155] 
split level 126: [/input, 2764] 
split level 127: [/input, 3500] 
split level 128: [/input, 3484] 
split level 129: [/input-8, 773] 
split level 130: [/input, 909] 
split level 131: [/input-8, 992] 
split level 132: [/input, 49] 
split level 133: [/input, 50] 
split level 134: [/input, 808] 
split level 135: [/input, 78] 
split level 136: [/input, 1401] 
split level 137: [/input, 2852] 
split level 138: [/input, 841] 
split level 139: [/input, 97] 
split level 140: [/input, 2913] 
split level 141: [/input, 115] 
split level 142: [/input, 3303] 
split level 143: [/input, 293] 
split level 144: [/input, 3562] 
split level 145: [/input, 98] 
split level 146: [/input, 110] 
split level 147: [/input, 82] 
split level 148: [/input, 65] 
split level 149: [/input, 3530] 
split level 150: [/input, 142] 
split level 151: [/input, 910] 
split level 152: [/input, 934] 
split level 153: [/input-8, 323] 
split level 154: [/input, 957] 
split level 155: [/input-8, 1199] 
split level 156: [/input-8, 1603] 
split level 157: [/input-8, 1387] 
split level 158: [/input, 62] 
split level 159: [/input, 93] 
split level 160: [/input, 2897] 
split level 161: [/input, 2731] 
split level 162: [/input, 2510] 
split level 163: [/input, 126] 
split level 164: [/input-8, 97] 
split level 165: [/input-8, 255] 
split level 166: [/input, 3028] 
split level 167: [/input, 51] 
split level 168: [/input, 33] 
split level 169: [/input, 113] 
split level 170: [/input, 3006] 
split level 171: [/input, 990] 
split level 172: [/input-8, 85] 
split level 173: [/input, 77] 
split level 174: [/input, 3147] 
split level 175: [/input, 888] 
split level 176: [/input, 2158] 
split level 177: [/input, 2359] 
split level 178: [/input, 99] 
split level 179: [/input-8, 1198] 
split level 180: [/input, 66] 
split level 181: [/input, 2142] 
split level 182: [/input-8, 1355] 
split level 183: [/input, 114] 
split level 184: [/input-8, 771] 
split level 185: [/input, 61] 
split level 186: [/input, 2914] 
split level 187: [/input, 124] 
split level 188: [/input, 2869] 
split level 189: [/input, 2750] 
split level 190: [/input, 2686] 
split level 191: [/input, 3483] 
split level 192: [/input, 3469] 
split level 193: [/input, 3113] 
split level 194: [/input, 3517] 
split level 195: [/input, 3132] 
split level 196: [/input, 3114] 
split level 197: [/input, 60] 
split level 198: [/input, 3130] 
split level 199: [/input, 2858] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11799028515815735
10 lb beta sum: 0.0, worst -0.11799213290214539
Time: prepare 0.0115    bound 0.1039    transfer 0.0013    finalize 0.0029    func 0.1223    
Accumulated time: func 0.1764    prepare 0.0218    bound 0.1576    transfer 0.0014    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.26626432) min lb tensor(-0.11798847)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.01051950454711914 
BICCOS Cumulative time: 0.01051950454711914
Preprocessing time: 0.009906530380249023 Inference time: 0.0002651214599609375 Add cuts time: 9.1552734375e-05 Cut analysis time: 0.0002562999725341797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10950 (1), -0.10950 (1), -0.10938 (1), -0.10927 (1), -0.10901 (1), -0.10894 (1), -0.10859 (1), -0.10842 (1), -0.10824 (1), -0.10817 (1), -0.10782 (1), -0.10661 (1), -0.10605 (1), -0.10541 (1), -0.10505 (1), -0.10492 (1), -0.10476 (1), -0.10476 (1), -0.10374 (1), -0.10358 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5240    set_bounds 0.0089    solve 0.1224    add 0.0728    
Accumulated time: pickout 0.0003    decision 0.5240    set_bounds 0.0089    solve 0.1224    add 0.0728    
Current (lb-rhs): -0.1095045804977417
50 domains visited
Cumulative time: 0.8082089424133301

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 2] 
split level 2: [/input-12, 97] [/input-12, 4] [/input-12, 4] [/input-12, 97] [/input-12, 4] [/input-12, 97] [/input-12, 4] [/input-12, 4] [/input-12, 97] [/input-12, 4] 
split level 3: [/input-12, 10] [/input-12, 10] [/input-12, 97] [/input-12, 10] [/input-12, 97] [/input-12, 10] [/input-12, 97] [/input-12, 97] [/input-12, 10] [/input-12, 97] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07104867696762085

all verified at 9th iter
Time: prepare 0.0072    bound 0.0598    transfer 0.0007    finalize 0.0024    func 0.0727    
Accumulated time: func 0.2492    prepare 0.0292    bound 0.2174    transfer 0.0021    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.15373367) min lb tensor(0.00017387)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.034453630447387695 
BICCOS Cumulative time: 0.044973134994506836
Preprocessing time: 0.011667013168334961 Inference time: 0.015262365341186523 Add cuts time: 0.007334470748901367 Cut analysis time: 0.00018978118896484375
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0201    set_bounds 0.0127    solve 0.0728    add 0.0150    
Accumulated time: pickout 0.0014    decision 0.5441    set_bounds 0.0216    solve 0.1952    add 0.0877    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 58]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.68718426e-14, 1.45126477e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 58]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.68718426e-14, 9.77164954e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 58]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.75662906e-20, 1.44814983e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 58]), tensor([1., 1.]), tensor([0, 0]), tensor([5.75662906e-20, 1.02074340e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.033243656158447266

all verified at 0th iter
Time: prepare 0.0003    bound 0.0042    transfer 0.0001    finalize 0.0001    func 0.0049    
Accumulated time: func 0.2540    prepare 0.0295    bound 0.2217    transfer 0.0022    finalize 0.0056    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 197.32421231269836
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.32413983345032
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.32411670684814
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.32409572601318
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.32383513450623
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.6762 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 65, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.54049110, -19.17367935, -17.10903168, -14.96515083, -17.66605568,
         -15.88734627, -15.45722198, -17.64301682, -16.20054626, -17.64737320]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [578]; unstable size 578; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 153, 1, 578] with unstable size 152 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 578] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 578] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [152]; unstable size 152; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 152] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 152] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.58451444,  2.26354122,  0.51416564, -1.32597995,  0.81974989,
         -0.53718388,  0.88996953, -0.70218801,  0.60620308]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.54049110, -19.17367935, -17.10903168, -14.96515083, -17.66605568,
         -15.88734627, -15.45722198, -17.64301682, -16.20054626, -17.64737320]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.54049110, -19.17367935, -17.10903168, -14.96515179, -17.66605568,
          -15.88734627, -15.45722198, -17.64301872, -16.20054626, -17.64737320],
         [-17.54049110, -19.17367935, -17.10903168, -14.96515179, -17.66605568,
          -15.88734627, -15.45722198, -17.64301872, -16.20054626, -17.64737320]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.49207020,  0.43012428,  0.74332428]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0735 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 66, vnnlib ID: 66 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.25728035, -20.79345703, -15.69333935, -17.69227600, -15.08468628,
         -17.27866936, -15.87126160, -17.97873497, -18.71574402, -20.41540718]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [550]; unstable size 550; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 296, 1, 550] with unstable size 295 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 550] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 550] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [295]; unstable size 295; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 295] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 295] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.52899957,  3.35346889, -0.60972571,  1.57595992,  1.06331658,
         -0.42583489,  1.62264943,  1.54576683,  3.27385807]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.25728035, -20.79345703, -15.69333935, -17.69227600, -15.08468628,
         -17.27866936, -15.87126160, -17.97873497, -18.71574402, -20.41540718]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.36it/s]100%|██████████| 1/1 [00:00<00:00,  8.34it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.79688454, -20.48247719, -15.16759300, -17.41525078, -15.03807354,
          -17.04138947, -15.56449890, -17.84644318, -18.37698746, -20.11083412],
         [-16.79688454, -20.48247719, -15.16759300, -17.41525078, -15.03807354,
          -17.04138947, -15.56449890, -17.84644318, -18.37698746, -20.11083412]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.12951946, 0.52642536]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1228 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 12.636510848999023
alpha/beta optimization time: 1.2609302997589111
initial alpha-crown bounds: tensor([[ 0.60815597,  3.47484732, -0.55310136,  1.62192667,  1.11317492,
         -0.37937450,  1.72037292,  1.66001809,  3.37049103]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.5531013607978821
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5517852306366
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.55174279212952
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.55171608924866
Verifying property 2 with 1 instances.
##### Instance 66 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.55310136]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.25728035, -20.79345703, -15.69333935, -17.69227600, -15.08468628,
        -17.27866936, -15.87126160, -17.97873497, -18.71574402, -20.41540718],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.55310136]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 550
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 867
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010132789611816406
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5530992746353149
10 lb beta sum: 0.0, worst -0.5531022548675537
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0540    transfer 0.0001    finalize 0.0001    func 0.0545    
Accumulated time: func 0.0545    prepare 0.0002    bound 0.0540    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] 
split level 1: [/input-12, 53] 
split level 2: [/input-12, 8] 
split level 3: [/input-12, 6] 
split level 4: [/input-12, 69] 
split level 5: [/input-12, 72] 
split level 6: [/input-12, 46] 
split level 7: [/input-12, 12] 
split level 8: [/input-12, 49] 
split level 9: [/input-12, 18] 
split level 10: [/input-8, 1726] 
split level 11: [/input-8, 1626] 
split level 12: [/input-12, 7] 
split level 13: [/input-8, 1692] 
split level 14: [/input-8, 1964] 
split level 15: [/input-8, 1693] 
split level 16: [/input-8, 1635] 
split level 17: [/input-12, 20] 
split level 18: [/input-8, 1708] 
split level 19: [/input-8, 420] 
split level 20: [/input-8, 1700] 
split level 21: [/input-8, 1044] 
split level 22: [/input-8, 1630] 
split level 23: [/input-8, 1636] 
split level 24: [/input-8, 1969] 
split level 25: [/input-8, 1622] 
split level 26: [/input-8, 1658] 
split level 27: [/input-8, 468] 
split level 28: [/input-8, 459] 
split level 29: [/input-8, 490] 
split level 30: [/input-8, 1716] 
split level 31: [/input-8, 633] 
split level 32: [/input-8, 1717] 
split level 33: [/input-8, 1650] 
split level 34: [/input-8, 473] 
split level 35: [/input-8, 593] 
split level 36: [/input-8, 1035] 
split level 37: [/input-8, 1403] 
split level 38: [/input-8, 425] 
split level 39: [/input-8, 795] 
split level 40: [/input-8, 466] 
split level 41: [/input-8, 1298] 
split level 42: [/input-8, 1686] 
split level 43: [/input-8, 497] 
split level 44: [/input-8, 458] 
split level 45: [/input-8, 505] 
split level 46: [/input-8, 1703] 
split level 47: [/input-8, 1633] 
split level 48: [/input-8, 1695] 
split level 49: [/input-8, 462] 
split level 50: [/input-8, 1659] 
split level 51: [/input-8, 1268] 
split level 52: [/input-8, 1660] 
split level 53: [/input-8, 1651] 
split level 54: [/input-8, 1972] 
split level 55: [/input-8, 1714] 
split level 56: [/input-8, 1929] 
split level 57: [/input-8, 498] 
split level 58: [/input-8, 433] 
split level 59: [/input-8, 1612] 
split level 60: [/input-8, 92] 
split level 61: [/input-8, 1339] 
split level 62: [/input-8, 1294] 
split level 63: [/input-8, 635] 
split level 64: [/input-8, 506] 
split level 65: [/input-8, 1226] 
split level 66: [/input-8, 939] 
split level 67: [/input, 394] 
split level 68: [/input-8, 1572] 
split level 69: [/input-8, 432] 
split level 70: [/input-8, 438] 
split level 71: [/input-8, 1310] 
split level 72: [/input-8, 1522] 
split level 73: [/input-8, 434] 
split level 74: [/input-8, 1713] 
split level 75: [/input, 2953] 
split level 76: [/input-8, 1252] 
split level 77: [/input-8, 626] 
split level 78: [/input-8, 1789] 
split level 79: [/input-8, 1683] 
split level 80: [/input-8, 1588] 
split level 81: [/input-8, 1306] 
split level 82: [/input, 2938] 
split level 83: [/input, 616] 
split level 84: [/input-8, 900] 
split level 85: [/input-8, 1244] 
split level 86: [/input-8, 1657] 
split level 87: [/input-8, 1314] 
split level 88: [/input-8, 1320] 
split level 89: [/input, 1418] 
split level 90: [/input-8, 439] 
split level 91: [/input-8, 931] 
split level 92: [/input-8, 636] 
split level 93: [/input, 385] 
split level 94: [/input, 2982] 
split level 95: [/input-8, 392] 
split level 96: [/input-8, 413] 
split level 97: [/input, 2931] 
split level 98: [/input-8, 1580] 
split level 99: [/input-8, 1676] 
split level 100: [/input-8, 1978] 
split level 101: [/input-8, 1973] 
split level 102: [/input-8, 76] 
split level 103: [/input-8, 1967] 
split level 104: [/input-8, 1704] 
split level 105: [/input-8, 1790] 
split level 106: [/input-8, 1267] 
split level 107: [/input-8, 329] 
split level 108: [/input, 2906] 
split level 109: [/input-8, 1563] 
split level 110: [/input-8, 918] 
split level 111: [/input-8, 803] 
split level 112: [/input, 1649] 
split level 113: [/input-8, 1649] 
split level 114: [/input-8, 75] 
split level 115: [/input, 1500] 
split level 116: [/input-8, 1531] 
split level 117: [/input, 151] 
split level 118: [/input-8, 1337] 
split level 119: [/input-8, 1331] 
split level 120: [/input-8, 486] 
split level 121: [/input-8, 1604] 
split level 122: [/input-8, 410] 
split level 123: [/input-8, 453] 
split level 124: [/input-8, 629] 
split level 125: [/input-8, 442] 
split level 126: [/input-8, 83] 
split level 127: [/input-8, 416] 
split level 128: [/input-8, 53] 
split level 129: [/input, 2173] 
split level 130: [/input-8, 229] 
split level 131: [/input, 2547] 
split level 132: [/input-8, 445] 
split level 133: [/input-8, 785] 
split level 134: [/input, 4005] 
split level 135: [/input-8, 407] 
split level 136: [/input-8, 74] 
split level 137: [/input-8, 1668] 
split level 138: [/input, 4035] 
split level 139: [/input-8, 73] 
split level 140: [/input, 2186] 
split level 141: [/input, 342] 
split level 142: [/input, 2454] 
split level 143: [/input, 1126] 
split level 144: [/input, 2555] 
split level 145: [/input-8, 15] 
split level 146: [/input, 328] 
split level 147: [/input-8, 319] 
split level 148: [/input-8, 400] 
split level 149: [/input, 2263] 
split level 150: [/input-8, 153] 
split level 151: [/input-8, 1269] 
split level 152: [/input, 169] 
split level 153: [/input, 2538] 
split level 154: [/input, 2961] 
split level 155: [/input-8, 805] 
split level 156: [/input, 2189] 
split level 157: [/input, 2157] 
split level 158: [/input-8, 1775] 
split level 159: [/input-8, 1517] 
split level 160: [/input-8, 1336] 
split level 161: [/input, 2460] 
split level 162: [/input-8, 899] 
split level 163: [/input-8, 311] 
split level 164: [/input-8, 1653] 
split level 165: [/input-8, 1773] 
split level 166: [/input, 3070] 
split level 167: [/input-8, 1289] 
split level 168: [/input-8, 1259] 
split level 169: [/input-8, 78] 
split level 170: [/input, 1512] 
split level 171: [/input, 311] 
split level 172: [/input-8, 1765] 
split level 173: [/input, 344] 
split level 174: [/input-8, 1761] 
split level 175: [/input, 2181] 
split level 176: [/input-8, 1921] 
split level 177: [/input, 2838] 
split level 178: [/input, 3922] 
split level 179: [/input, 3573] 
split level 180: [/input-8, 1776] 
split level 181: [/input, 3557] 
split level 182: [/input, 2165] 
split level 183: [/input, 2519] 
split level 184: [/input-8, 1770] 
split level 185: [/input, 2789] 
split level 186: [/input, 1788] 
split level 187: [/input, 2550] 
split level 188: [/input, 4078] 
split level 189: [/input, 1478] 
split level 190: [/input, 2252] 
split level 191: [/input, 1961] 
split level 192: [/input, 2506] 
split level 193: [/input, 3427] 
split level 194: [/input, 4021] 
split level 195: [/input, 2412] 
split level 196: [/input, 2261] 
split level 197: [/input, 2754] 
split level 198: [/input, 2977] 
split level 199: [/input, 2927] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5530390739440918
10 lb beta sum: 0.0, worst -0.553036093711853
Time: prepare 0.0113    bound 0.1045    transfer 0.0021    finalize 0.0025    func 0.1232    
Accumulated time: func 0.1776    prepare 0.0216    bound 0.1585    transfer 0.0022    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02364194) min lb tensor(-0.55303562)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.00975942611694336 
BICCOS Cumulative time: 0.00975942611694336
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.53740 (1), -0.53731 (1), -0.53722 (1), -0.53664 (1), -0.53655 (1), -0.53620 (1), -0.53602 (1), -0.53593 (1), -0.53591 (1), -0.53562 (1), -0.53561 (1), -0.53534 (1), -0.53448 (1), -0.53391 (1), -0.53284 (1), -0.53260 (1), -0.53131 (1), -0.53113 (1), -0.53052 (1), -0.53031 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5261    set_bounds 0.0087    solve 0.1232    add 0.0665    
Accumulated time: pickout 0.0003    decision 0.5261    set_bounds 0.0087    solve 0.1232    add 0.0665    
Current (lb-rhs): -0.5374037027359009
50 domains visited
Cumulative time: 0.8025422096252441

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 53] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 1: [/input-12, 53] [/input-12, 8] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 8] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 8] 
split level 2: [/input-12, 8] [/input-12, 69] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 8] [/input-12, 69] 
split level 3: [/input-12, 69] [/input-12, 46] [/input-12, 69] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.507929801940918
10 lb beta sum: 0.0, worst -0.5074080228805542
Time: prepare 0.0121    bound 0.0989    transfer 0.0007    finalize 0.0023    func 0.1166    
Accumulated time: func 0.2942    prepare 0.0340    bound 0.2574    transfer 0.0029    finalize 0.0049    
all_split False
======================Cut inference begins======================
max lb tensor(0.18786669) min lb tensor(-0.50735497)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012594223022460938 
BICCOS Cumulative time: 0.022353649139404297
Preprocessing time: 0.01174616813659668 Inference time: 0.0004372596740722656 Add cuts time: 0.00017333030700683594 Cut analysis time: 0.00023746490478515625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26148 (2), -0.26059 (2), -0.25961 (2), -0.25957 (2), -0.25947 (2), -0.25940 (2), -0.25897 (2), -0.25845 (2), -0.25821 (2), -0.25724 (2), -0.25682 (2), -0.25669 (2), -0.25668 (2), -0.25579 (2), -0.25551 (2), -0.25463 (2), -0.25428 (2), -0.25319 (2), -0.24828 (2), -0.24447 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0126    solve 0.1167    add 0.0745    
Accumulated time: pickout 0.0013    decision 0.5457    set_bounds 0.0213    solve 0.2399    add 0.1410    
Current (lb-rhs): -0.2614770829677582
100 domains visited
Cumulative time: 1.0402500629425049

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 8] [/input-12, 8] [/input-12, 24] 
split level 1: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 8] 
split level 2: [/input-12, 69] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 69] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-12, 12] [/input-12, 12] [/input-12, 46] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23587128520011902
10 lb beta sum: 0.233213871717453, worst -0.23884598910808563
Time: prepare 0.0063    bound 0.1228    transfer 0.0007    finalize 0.0020    func 0.1349    
Accumulated time: func 0.4292    prepare 0.0405    bound 0.3802    transfer 0.0036    finalize 0.0070    
all_split False
======================Cut inference begins======================
max lb tensor(0.42348170) min lb tensor(-0.23285238)
Number of Verified Splits: 60 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 6
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.015760183334350586 
BICCOS Cumulative time: 0.03811383247375488
Preprocessing time: 0.011656761169433594 Inference time: 0.0026967525482177734 Add cuts time: 0.0009248256683349609 Cut analysis time: 0.0004818439483642578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06648 (3), -0.06645 (3), -0.06585 (3), -0.06578 (3), -0.06577 (3), -0.06481 (3), -0.06412 (3), -0.06218 (3), -0.05906 (3), -0.05663 (3), -0.05654 (3), -0.05622 (3), -0.05617 (3), -0.05568 (3), -0.05556 (3), -0.05457 (3), -0.05207 (3), -0.05170 (3), -0.05156 (3), -0.05067 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0195    set_bounds 0.0152    solve 0.1351    add 0.0846    
Accumulated time: pickout 0.0022    decision 0.5652    set_bounds 0.0365    solve 0.3750    add 0.2256    
Current (lb-rhs): -0.06647714972496033
150 domains visited
Cumulative time: 1.311537742614746

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 53] [/input-12, 24] [/input-12, 24] [/input-12, 8] [/input-12, 8] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 24] [/input-12, 24] 
split level 1: [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-8, 1972] [/input-8, 1716] [/input-12, 12] [/input-12, 12] [/input-8, 1692] [/input-8, 1692] [/input-12, 12] [/input-12, 12] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06905698776245117
10 lb beta sum: 0.2153046429157257, worst -0.06374862790107727
Time: prepare 0.0059    bound 0.1213    transfer 0.0007    finalize 0.0019    func 0.1324    
Accumulated time: func 0.5616    prepare 0.0467    bound 0.5015    transfer 0.0044    finalize 0.0089    
all_split False
======================Cut inference begins======================
max lb tensor(0.23131439) min lb tensor(-0.02562729)
Number of Verified Splits: 375 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.037467002868652344 
BICCOS Cumulative time: 0.07558083534240723
Preprocessing time: 0.011272907257080078 Inference time: 0.019787311553955078 Add cuts time: 0.005967378616333008 Cut analysis time: 0.0004394054412841797
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0194    set_bounds 0.0153    solve 0.1325    add 0.0229    
Accumulated time: pickout 0.0031    decision 0.5846    set_bounds 0.0517    solve 0.5075    add 0.2485    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([3.90281696e-11, 1.38339475e-01, 1.48935184e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8, 69]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.90281696e-11, 1.38339475e-01, 9.97982770e-02, 4.32796478e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8, 69]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.90281696e-11, 1.38339475e-01, 9.97982770e-02, 1.09022215e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8, 69]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.90281696e-11, 7.75270611e-02, 1.39868453e-01, 4.06315476e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8, 69]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.90281696e-11, 7.75270611e-02, 1.39868453e-01, 1.02004632e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([3.90281696e-11, 7.75270611e-02, 1.07671902e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53]), tensor([ 1., -1.]), tensor([0, 0]), tensor([3.90281696e-11, 1.40990868e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53]), tensor([1., 1.]), tensor([0, 0]), tensor([3.90281696e-11, 7.94035643e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3992927670478821
10 lb beta sum: 0.4127468466758728, worst -0.3889933228492737
Time: prepare 0.0004    bound 0.1153    transfer 0.0001    finalize 0.0002    func 0.1161    
Accumulated time: func 0.6777    prepare 0.0471    bound 0.6168    transfer 0.0045    finalize 0.0090    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 69] [/input-12, 8] [/input-12, 8] 
split level 1: [/input-12, 72] [/input-12, 69] [/input-12, 69] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 4: [/input-12, 18] [/input-12, 49] [/input-12, 18] 
split level 5: [/input-12, 49] [/input-12, 18] [/input-12, 49] 
split level 6: [/input-8, 1969] [/input-8, 1626] [/input-8, 1626] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5447229743003845, worst -0.15157128870487213
10 lb beta sum: 0.5897290110588074, worst -0.15076272189617157
Time: prepare 0.0162    bound 0.1201    transfer 0.0012    finalize 0.1499    func 0.2901    
Accumulated time: func 0.9678    prepare 0.0637    bound 0.7369    transfer 0.0057    finalize 0.1590    
all_split False
======================Cut inference begins======================
max lb tensor(0.66887414) min lb tensor(-0.15040417)
Number of Verified Splits: 330 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.5563274621963501, worst -0.40989944338798523
10 lb beta sum: 0.794130265712738, worst -0.3757922351360321
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 91.
#cuts 1-3: 9
#cuts 4-6: 34
#cuts 7-9: 48
#cuts >= 20: 0
BICCOS time: 0.34919285774230957 
BICCOS Cumulative time: 0.4247736930847168
Preprocessing time: 0.011079549789428711 Inference time: 0.3149287700653076 Add cuts time: 0.01895737648010254 Cut analysis time: 0.004227161407470703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15040 (7), -0.14099 (7), -0.14012 (7), -0.12993 (7), -0.12028 (7), -0.11570 (7), -0.11368 (7), -0.11198 (7), -0.10527 (7), -0.10037 (7), -0.09965 (7), -0.09281 (7), -0.09037 (7), -0.08130 (7), -0.07651 (7), -0.07502 (7), -0.06870 (7), -0.06859 (7), -0.06761 (7), -0.06586 (7), 
Length of domains: 54
Time: pickout 0.0005    decision 0.0204    set_bounds 0.0335    solve 0.2902    add 0.0012    
Accumulated time: pickout 0.0037    decision 0.6050    set_bounds 0.0853    solve 0.7977    add 0.2497    
Current (lb-rhs): -0.1504041701555252
204 domains visited
Cumulative time: 2.3728573322296143

BaB round 2
batch: 54
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-8, 1692] [/input-8, 1692] [/input-8, 1635] [/input-8, 1692] [/input-8, 1692] [/input-8, 1635] [/input-8, 1700] [/input-8, 1692] [/input-8, 1692] [/input-8, 1635] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14691412448883057
10 lb beta sum: 0.1466977298259735, worst -0.14481224119663239
Time: prepare 0.0045    bound 0.1360    transfer 0.0006    finalize 0.0011    func 0.1441    
Accumulated time: func 1.1119    prepare 0.0684    bound 0.8729    transfer 0.0063    finalize 0.1600    
all_split False
======================Cut inference begins======================
max lb tensor(0.56180376) min lb tensor(-0.14464638)
Number of Verified Splits: 130 of 216
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 10
#cuts 4-6: 4
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.022324800491333008 
BICCOS Cumulative time: 0.4470984935760498
Preprocessing time: 0.006423234939575195 Inference time: 0.011238574981689453 Add cuts time: 0.0040225982666015625 Cut analysis time: 0.0006403923034667969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14465 (9), -0.13477 (9), -0.13414 (9), -0.12364 (9), -0.12303 (9), -0.11311 (9), -0.11276 (9), -0.10869 (9), -0.10793 (9), -0.10625 (9), -0.10437 (9), -0.09754 (9), -0.09690 (9), -0.09295 (9), -0.09207 (9), -0.09111 (9), -0.08824 (9), -0.08555 (9), -0.08448 (9), -0.08234 (9), 
Length of domains: 86
Time: pickout 0.0018    decision 0.0138    set_bounds 0.0164    solve 0.1442    add 0.0022    
Accumulated time: pickout 0.0054    decision 0.6188    set_bounds 0.1017    solve 0.9419    add 0.2519    
Current (lb-rhs): -0.14464637637138367
290 domains visited
Cumulative time: 2.5759904384613037

BaB round 3
batch: 86
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 7] [/input-8, 1700] [/input-8, 1964] [/input-8, 1964] [/input-8, 1700] [/input-8, 1692] [/input-12, 7] [/input-8, 1700] [/input-12, 7] [/input-12, 7] 
split level 1: [/input-8, 1716] [/input-8, 1716] [/input-8, 1700] [/input-8, 1700] [/input-8, 1630] [/input-12, 7] [/input-8, 1716] [/input-8, 1716] [/input-8, 1700] [/input-8, 1700] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1335148811340332
10 lb beta sum: 0.27390146255493164, worst -0.16345256567001343
Time: prepare 0.0070    bound 0.1328    transfer 0.0018    finalize 0.0020    func 0.1460    
Accumulated time: func 1.2579    prepare 0.0756    bound 1.0058    transfer 0.0081    finalize 0.1620    
all_split False
======================Cut inference begins======================
max lb tensor(0.32197228) min lb tensor(-0.13121641)
Number of Verified Splits: 276 of 344
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 14
#cuts 4-6: 3
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.04102277755737305 
BICCOS Cumulative time: 0.48812127113342285
Preprocessing time: 0.009930849075317383 Inference time: 0.02733612060546875 Add cuts time: 0.003099679946899414 Cut analysis time: 0.0006561279296875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13122 (11), -0.12110 (11), -0.11870 (11), -0.11801 (11), -0.11257 (11), -0.11054 (11), -0.10831 (11), -0.10781 (11), -0.10583 (11), -0.10413 (11), -0.10167 (11), -0.10089 (11), -0.10016 (11), -0.09979 (11), -0.09570 (11), -0.09430 (11), -0.09333 (11), -0.09023 (11), -0.08975 (11), -0.08824 (11), 
Length of domains: 68
Time: pickout 0.0054    decision 0.0183    set_bounds 0.0243    solve 0.1461    add 0.0377    
Accumulated time: pickout 0.0108    decision 0.6371    set_bounds 0.1260    solve 1.0880    add 0.2896    
Current (lb-rhs): -0.1312164068222046
358 domains visited
Cumulative time: 2.853114604949951

BaB round 4
batch: 68
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-8, 1716] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-8, 468] [/input-12, 7] [/input-12, 7] 
split level 1: [/input-8, 1969] [/input-8, 1716] [/input-8, 468] [/input-8, 468] [/input-8, 1969] [/input-8, 1716] [/input-8, 468] [/input-8, 1716] [/input-8, 1969] [/input-8, 1716] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11630970239639282
10 lb beta sum: 0.6075945496559143, worst -0.11433318257331848
Time: prepare 0.0056    bound 0.1527    transfer 0.0032    finalize 0.0015    func 0.1650    
Accumulated time: func 1.4229    prepare 0.0815    bound 1.1585    transfer 0.0113    finalize 0.1636    
all_split False
======================Cut inference begins======================
max lb tensor(0.29135615) min lb tensor(-0.11425306)
Number of Verified Splits: 160 of 272
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 14
#cuts 4-6: 3
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.02895641326904297 
BICCOS Cumulative time: 0.5170776844024658
Preprocessing time: 0.008207082748413086 Inference time: 0.017853498458862305 Add cuts time: 0.002135038375854492 Cut analysis time: 0.0007607936859130859
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11425 (13), -0.11348 (13), -0.11293 (13), -0.11216 (13), -0.10112 (13), -0.10091 (13), -0.10019 (13), -0.09990 (13), -0.09954 (13), -0.09864 (13), -0.09510 (13), -0.09409 (13), -0.09293 (13), -0.09183 (13), -0.08934 (13), -0.08830 (13), -0.08800 (13), -0.08696 (13), -0.08680 (13), -0.08570 (13), 
Length of domains: 112
Time: pickout 0.0034    decision 0.0168    set_bounds 0.0197    solve 0.1651    add 0.0038    
Accumulated time: pickout 0.0142    decision 0.6539    set_bounds 0.1457    solve 1.2530    add 0.2934    
Current (lb-rhs): -0.11425305902957916
470 domains visited
Cumulative time: 3.093226671218872

BaB round 5
batch: 112
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 468] [/input-8, 1717] [/input-8, 1726] [/input-8, 1964] [/input-8, 468] [/input-8, 1708] [/input-8, 1726] [/input-8, 1964] [/input-8, 468] [/input-8, 1717] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5466304421424866, worst -0.1111946552991867
10 lb beta sum: 0.5466304421424866, worst -0.11110799014568329
Time: prepare 0.0104    bound 0.1511    transfer 0.0013    finalize 0.0013    func 0.1656    
Accumulated time: func 1.5885    prepare 0.0921    bound 1.3096    transfer 0.0126    finalize 0.1649    
all_split False
======================Cut inference begins======================
max lb tensor(0.02841347) min lb tensor(-0.11104862)
Number of Verified Splits: 28 of 224
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 14
#cuts 4-6: 3
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.012868642807006836 
BICCOS Cumulative time: 0.5299463272094727
Preprocessing time: 0.007323741912841797 Inference time: 0.003461599349975586 Add cuts time: 0.0009713172912597656 Cut analysis time: 0.0011119842529296875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11105 (14), -0.11027 (14), -0.10943 (14), -0.10865 (14), -0.09968 (14), -0.09866 (14), -0.09759 (14), -0.09665 (14), -0.09573 (14), -0.09480 (14), -0.09392 (14), -0.09289 (14), -0.09156 (14), -0.09046 (14), -0.08610 (14), -0.08551 (14), -0.08537 (14), -0.08515 (14), -0.08460 (14), -0.08445 (14), 
Length of domains: 196
Time: pickout 0.0021    decision 0.0197    set_bounds 0.0096    solve 0.1657    add 0.0030    
Accumulated time: pickout 0.0163    decision 0.6737    set_bounds 0.1553    solve 1.4187    add 0.2964    
Current (lb-rhs): -0.111048623919487
666 domains visited
Cumulative time: 3.3072452545166016

BaB round 6
batch: 196
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1964] [/input-8, 468] [/input-8, 1708] [/input-8, 1708] [/input-8, 1964] [/input-8, 1717] [/input-8, 1708] [/input-8, 1708] [/input-8, 1964] [/input-8, 1969] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5382534861564636, worst -0.10826782882213593
10 lb beta sum: 0.5382534861564636, worst -0.10822765529155731
Time: prepare 0.0179    bound 0.1545    transfer 0.0028    finalize 0.0021    func 0.1800    
Accumulated time: func 1.7684    prepare 0.1102    bound 1.4641    transfer 0.0154    finalize 0.1670    
all_split False
======================Cut inference begins======================
max lb tensor(0.02432895) min lb tensor(-0.10821606)
Number of Verified Splits: 60 of 392
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 14
#cuts 4-6: 5
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.02099776268005371 
BICCOS Cumulative time: 0.5509440898895264
Preprocessing time: 0.011245012283325195 Inference time: 0.007012367248535156 Add cuts time: 0.0012500286102294922 Cut analysis time: 0.0014903545379638672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10822 (15), -0.10741 (15), -0.10657 (15), -0.10576 (15), -0.09542 (15), -0.09451 (15), -0.09430 (15), -0.09353 (15), -0.09329 (15), -0.09264 (15), -0.08879 (15), -0.08777 (15), -0.08668 (15), -0.08620 (15), -0.08555 (15), -0.08519 (15), -0.08322 (15), -0.08228 (15), -0.08157 (15), -0.08099 (15), 
Length of domains: 332
Time: pickout 0.0040    decision 0.0226    set_bounds 0.0176    solve 0.1801    add 0.0050    
Accumulated time: pickout 0.0203    decision 0.6963    set_bounds 0.1730    solve 1.5988    add 0.3015    
Current (lb-rhs): -0.1082160621881485
998 domains visited
Cumulative time: 3.5584371089935303

BaB round 7
batch: 332
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1708] [/input-8, 1630] [/input-8, 1717] [/input-8, 1969] [/input-8, 1630] [/input-8, 1726] [/input-8, 1708] [/input-8, 1630] [/input-8, 1717] [/input-8, 1708] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10898762941360474
10 lb beta sum: 0.3886723220348358, worst -0.10712423920631409
Time: prepare 0.0146    bound 0.1467    transfer 0.0031    finalize 0.0030    func 0.1731    
Accumulated time: func 1.9416    prepare 0.1250    bound 1.6108    transfer 0.0185    finalize 0.1700    
all_split False
======================Cut inference begins======================
max lb tensor(0.02504236) min lb tensor(-0.10710572)
Number of Verified Splits: 115 of 664
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 15
#cuts 4-6: 4
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.03788566589355469 
BICCOS Cumulative time: 0.588829755783081
Preprocessing time: 0.01977252960205078 Inference time: 0.015463829040527344 Add cuts time: 0.0019145011901855469 Cut analysis time: 0.0007348060607910156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10711 (16), -0.10629 (16), -0.10541 (16), -0.10460 (16), -0.09432 (16), -0.09340 (16), -0.09239 (16), -0.09148 (16), -0.09138 (16), -0.09036 (16), -0.08588 (16), -0.08487 (16), -0.08379 (16), -0.08277 (16), -0.08265 (16), -0.08211 (16), -0.08175 (16), -0.08126 (16), -0.08116 (16), -0.08038 (16), 
Length of domains: 549
Time: pickout 0.0063    decision 0.0299    set_bounds 0.0347    solve 0.1734    add 0.0931    
Accumulated time: pickout 0.0266    decision 0.7262    set_bounds 0.2076    solve 1.7722    add 0.3945    
Current (lb-rhs): -0.10710571706295013
1547 domains visited
Cumulative time: 3.9415647983551025

BaB round 8
batch: 549
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1726] [/input-8, 1969] [/input-8, 1630] [/input-8, 1726] [/input-8, 1969] [/input-8, 1969] [/input-8, 1630] [/input-8, 1969] [/input-8, 1726] [/input-8, 1969] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5112902522087097, worst -0.10068671405315399
10 lb beta sum: 0.5572453141212463, worst -0.10061125457286835
Time: prepare 0.0469    bound 0.1451    transfer 0.0045    finalize 0.0047    func 0.2092    
Accumulated time: func 2.1508    prepare 0.1721    bound 1.7559    transfer 0.0230    finalize 0.1747    
all_split False
======================Cut inference begins======================
max lb tensor(0.29503164) min lb tensor(-0.10057507)
Number of Verified Splits: 237 of 1098
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 16
#cuts 4-6: 4
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.06766724586486816 
BICCOS Cumulative time: 0.6564970016479492
Preprocessing time: 0.03302884101867676 Inference time: 0.030872106552124023 Add cuts time: 0.0029163360595703125 Cut analysis time: 0.0008499622344970703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10058 (17), -0.09976 (17), -0.09933 (17), -0.09851 (17), -0.09368 (17), -0.09287 (17), -0.08878 (17), -0.08784 (17), -0.08739 (17), -0.08645 (17), -0.08618 (17), -0.08550 (17), -0.08536 (17), -0.08448 (17), -0.08074 (17), -0.08000 (17), -0.07972 (17), -0.07898 (17), -0.07790 (17), -0.07675 (17), 
Length of domains: 861
Time: pickout 0.0478    decision 0.0410    set_bounds 0.0498    solve 0.2096    add 0.0136    
Accumulated time: pickout 0.0743    decision 0.7672    set_bounds 0.2575    solve 1.9817    add 0.4081    
Current (lb-rhs): -0.10057507455348969
2408 domains visited
Cumulative time: 4.3732593059539795

BaB round 9
batch: 861
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1969] [/input-8, 420] [/input-8, 468] [/input-8, 420] [/input-8, 420] [/input-8, 420] [/input-8, 1969] [/input-8, 420] [/input-8, 1969] [/input-8, 420] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09548577666282654
10 lb beta sum: 0.4048672318458557, worst -0.09350451827049255
Time: prepare 0.1945    bound 0.1636    transfer 0.0051    finalize 0.0077    func 0.3831    
Accumulated time: func 2.5339    prepare 0.3668    bound 1.9195    transfer 0.0280    finalize 0.1825    
all_split False
======================Cut inference begins======================
max lb tensor(0.02488720) min lb tensor(-0.09344773)
Number of Verified Splits: 468 of 1722
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 17
#cuts 4-6: 7
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.12425065040588379 
BICCOS Cumulative time: 0.780747652053833
Preprocessing time: 0.052834510803222656 Inference time: 0.06517434120178223 Add cuts time: 0.005323171615600586 Cut analysis time: 0.0009186267852783203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09345 (18), -0.09263 (18), -0.09219 (18), -0.09137 (18), -0.09117 (18), -0.09035 (18), -0.08991 (18), -0.08909 (18), -0.08617 (18), -0.08535 (18), -0.08388 (18), -0.08306 (18), -0.08193 (18), -0.08163 (18), -0.08095 (18), -0.08070 (18), -0.08027 (18), -0.07936 (18), -0.07935 (18), -0.07865 (18), 
Length of domains: 1254
Time: pickout 0.0151    decision 0.0581    set_bounds 0.0754    solve 0.3836    add 0.0106    
Accumulated time: pickout 0.0895    decision 0.8253    set_bounds 0.3329    solve 2.3654    add 0.4187    
Current (lb-rhs): -0.0934477299451828
3662 domains visited
Cumulative time: 5.045402526855469

BaB round 10
batch: 1254
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 466] [/input-8, 1717] [/input-8, 466] [/input-8, 1717] [/input-8, 1717] [/input-8, 1717] [/input-8, 466] [/input-8, 466] [/input-8, 466] [/input-8, 466] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09069710969924927
10 lb beta sum: 0.40041831135749817, worst -0.08868512511253357
Time: prepare 0.0487    bound 0.2023    transfer 0.0067    finalize 0.0118    func 0.2867    
Accumulated time: func 2.8206    prepare 0.4157    bound 2.1218    transfer 0.0347    finalize 0.1943    
all_split False
======================Cut inference begins======================
max lb tensor(0.02245206) min lb tensor(-0.08864367)
Number of Verified Splits: 536 of 2508
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 17
#cuts 4-6: 11
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.16491198539733887 
BICCOS Cumulative time: 0.9456596374511719
Preprocessing time: 0.07710576057434082 Inference time: 0.0813295841217041 Add cuts time: 0.00532221794128418 Cut analysis time: 0.0011544227600097656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08864 (19), -0.08806 (19), -0.08782 (19), -0.08724 (19), -0.08636 (19), -0.08578 (19), -0.08555 (19), -0.08496 (19), -0.08336 (19), -0.08255 (19), -0.08108 (19), -0.08038 (19), -0.08027 (19), -0.07929 (19), -0.07810 (19), -0.07712 (19), -0.07701 (19), -0.07691 (19), -0.07688 (19), -0.07686 (19), 
Length of domains: 1972
Time: pickout 0.0201    decision 0.0776    set_bounds 0.1068    solve 0.2874    add 0.0119    
Accumulated time: pickout 0.1095    decision 0.9029    set_bounds 0.4397    solve 2.6527    add 0.4306    
Current (lb-rhs): -0.08864367008209229
5634 domains visited
Cumulative time: 5.721255540847778

BaB round 11
batch: 1972
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 459] [/input-8, 438] [/input-8, 459] [/input-8, 459] [/input-8, 459] [/input-8, 438] [/input-8, 459] [/input-8, 438] [/input-8, 459] [/input-8, 459] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08517634868621826
10 lb beta sum: 0.38993632793426514, worst -0.0831671804189682
Time: prepare 0.0796    bound 0.2787    transfer 0.0200    finalize 0.0176    func 0.4224    
Accumulated time: func 3.2430    prepare 0.4956    bound 2.4005    transfer 0.0547    finalize 0.2119    
all_split False
======================Cut inference begins======================
max lb tensor(0.01466393) min lb tensor(-0.08310550)
Number of Verified Splits: 856 of 3944
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 39.
#cuts 1-3: 18
#cuts 4-6: 19
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.26479220390319824 
BICCOS Cumulative time: 1.2104518413543701
Preprocessing time: 0.12149286270141602 Inference time: 0.13248276710510254 Add cuts time: 0.00940847396850586 Cut analysis time: 0.0014081001281738281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08311 (20), -0.08252 (20), -0.08202 (20), -0.08144 (20), -0.08085 (20), -0.08027 (20), -0.07977 (20), -0.07960 (20), -0.07959 (20), -0.07919 (20), -0.07902 (20), -0.07901 (20), -0.07779 (20), -0.07735 (20), -0.07734 (20), -0.07677 (20), -0.07676 (20), -0.07671 (20), -0.07554 (20), -0.07446 (20), 
Length of domains: 3088
Time: pickout 0.0358    decision 0.1156    set_bounds 0.3233    solve 0.4238    add 0.0164    
Accumulated time: pickout 0.1453    decision 1.0186    set_bounds 0.7630    solve 3.0765    add 0.4471    
Current (lb-rhs): -0.08310550451278687
8722 domains visited
Cumulative time: 6.913154125213623

BaB round 12
batch: 3088
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07883304357528687
10 lb beta sum: 0.34975579380989075, worst -0.07688374817371368
Time: prepare 0.1247    bound 0.3986    transfer 0.0266    finalize 0.0304    func 0.6204    
Accumulated time: func 3.8635    prepare 0.6205    bound 2.7991    transfer 0.0814    finalize 0.2423    
all_split False
======================Cut inference begins======================
max lb tensor(0.02476367) min lb tensor(-0.07684597)
Number of Verified Splits: 2302 of 6176
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 45.
#cuts 1-3: 22
#cuts 4-6: 21
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.7423920631408691 
BICCOS Cumulative time: 1.9528439044952393
Preprocessing time: 0.19166851043701172 Inference time: 0.5211315155029297 Add cuts time: 0.02811121940612793 Cut analysis time: 0.0014808177947998047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07685 (21), -0.07626 (21), -0.07576 (21), -0.07570 (21), -0.07518 (21), -0.07510 (21), -0.07461 (21), -0.07401 (21), -0.07393 (21), -0.07369 (21), -0.07335 (21), -0.07325 (21), -0.07324 (21), -0.07309 (21), -0.07285 (21), -0.07267 (21), -0.07266 (21), -0.07260 (21), -0.07226 (21), -0.07210 (21), 
Length of domains: 3874
Time: pickout 0.0486    decision 0.1777    set_bounds 0.4271    solve 0.6225    add 0.0246    
Accumulated time: pickout 0.1939    decision 1.1963    set_bounds 1.1901    solve 3.6990    add 0.4717    
Current (lb-rhs): -0.07684597373008728
12596 domains visited
Cumulative time: 8.984836339950562

BaB round 13
batch: 3874
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 466] [/input-8, 1630] [/input-8, 466] [/input-8, 466] [/input-8, 466] [/input-8, 1695] [/input-8, 1630] [/input-8, 1695] [/input-8, 1695] [/input-8, 1695] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07611550390720367
10 lb beta sum: 0.46063679456710815, worst -0.07264569401741028
Time: prepare 0.1660    bound 0.4825    transfer 0.0289    finalize 0.0351    func 0.7636    
Accumulated time: func 4.6271    prepare 0.7868    bound 3.2816    transfer 0.1102    finalize 0.2775    
all_split False
======================Cut inference begins======================
max lb tensor(0.02779281) min lb tensor(-0.07262564)
Number of Verified Splits: 2327 of 7748
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 18
#cuts 4-6: 23
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.6602201461791992 
BICCOS Cumulative time: 2.6130640506744385
Preprocessing time: 0.24521422386169434 Inference time: 0.38628387451171875 Add cuts time: 0.027191638946533203 Cut analysis time: 0.0015304088592529297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07263 (22), -0.07205 (22), -0.07156 (22), -0.07149 (22), -0.07098 (22), -0.07088 (22), -0.07042 (22), -0.06982 (22), -0.06971 (22), -0.06946 (22), -0.06913 (22), -0.06897 (22), -0.06893 (22), -0.06885 (22), -0.06864 (22), -0.06839 (22), -0.06839 (22), -0.06835 (22), -0.06806 (22), -0.06783 (22), 
Length of domains: 5421
Time: pickout 0.0760    decision 0.2223    set_bounds 0.5433    solve 0.7658    add 0.0222    
Accumulated time: pickout 0.2699    decision 1.4186    set_bounds 1.7334    solve 4.4649    add 0.4939    
Current (lb-rhs): -0.07262563705444336
18017 domains visited
Cumulative time: 11.307222843170166

BaB round 14
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 1635] [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 459] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07301367819309235
10 lb beta sum: 0.45985090732574463, worst -0.06950518488883972
Time: prepare 0.1661    bound 0.5036    transfer 0.0304    finalize 0.0424    func 0.7966    
Accumulated time: func 5.4237    prepare 0.9531    bound 3.7852    transfer 0.1407    finalize 0.3199    
all_split False
======================Cut inference begins======================
max lb tensor(0.32180148) min lb tensor(-0.06947416)
Number of Verified Splits: 3149 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 31
#cuts 4-6: 4
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 1.0283594131469727 
BICCOS Cumulative time: 3.641423463821411
Preprocessing time: 0.2597947120666504 Inference time: 0.7261321544647217 Add cuts time: 0.04136347770690918 Cut analysis time: 0.0010690689086914062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06947 (23), -0.06898 (23), -0.06845 (23), -0.06835 (23), -0.06795 (23), -0.06782 (23), -0.06732 (23), -0.06679 (23), -0.06655 (23), -0.06630 (23), -0.06605 (23), -0.06583 (23), -0.06578 (23), -0.06573 (23), -0.06552 (23), -0.06542 (22), -0.06532 (23), -0.06528 (23), -0.06523 (23), -0.06502 (23), 
Length of domains: 6368
Time: pickout 0.0601    decision 0.2240    set_bounds 0.5432    solve 0.7983    add 0.0208    
Accumulated time: pickout 0.3301    decision 1.6426    set_bounds 2.2767    solve 5.2632    add 0.5146    
Current (lb-rhs): -0.06947416067123413
23060 domains visited
current_vram/total_varm: 11.0GB/99.9GB, batch_size increase to 8192
Cumulative time: 14.025726795196533

BaB round 15
batch: 6368
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 420] [/input-8, 420] [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 420] [/input-8, 420] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06890416145324707
10 lb beta sum: 1.6584205627441406, worst -0.05247378349304199
Time: prepare 0.2619    bound 0.7488    transfer 0.0621    finalize 0.0609    func 1.2183    
Accumulated time: func 6.6420    prepare 1.2153    bound 4.5340    transfer 0.2028    finalize 0.3807    
all_split False
======================Cut inference begins======================
max lb tensor(0.94599044) min lb tensor(-0.05238748)
Number of Verified Splits: 11805 of 12736
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 2.794658660888672 
BICCOS Cumulative time: 6.436082124710083
Preprocessing time: 0.6491396427154541 Inference time: 2.054150342941284 Add cuts time: 0.09093570709228516 Cut analysis time: 0.0004329681396484375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05239 (24), -0.05227 (24), -0.05179 (24), -0.05163 (24), -0.05131 (24), -0.05119 (24), -0.05072 (24), -0.05056 (24), -0.05054 (24), -0.05038 (24), -0.04947 (24), -0.04938 (23), -0.04931 (24), -0.04923 (23), -0.04875 (23), -0.04864 (23), -0.04841 (23), -0.04826 (23), -0.04812 (24), -0.04800 (24), 
Length of domains: 931
Time: pickout 0.1240    decision 0.3538    set_bounds 0.7680    solve 1.2219    add 0.0070    
Accumulated time: pickout 0.4541    decision 1.9964    set_bounds 3.0446    solve 6.4850    add 0.5217    
Current (lb-rhs): -0.05238747596740723
23991 domains visited
Cumulative time: 19.426017999649048

BaB round 16
batch: 931
splitting decisions: 
split level 0: [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.061210066080093384

all verified at 2th iter
Time: prepare 0.0379    bound 0.0260    transfer 0.0054    finalize 0.0088    func 0.0899    
Accumulated time: func 6.7319    prepare 1.2535    bound 4.5599    transfer 0.2082    finalize 0.3896    
all_split False
======================Cut inference begins======================
max lb tensor(0.07846274) min lb tensor(0.02044312)
Number of Verified Splits: 1862 of 1862
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.057466745376586914 
BICCOS Cumulative time: 6.49354887008667
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0188    decision 0.0617    set_bounds 0.2244    solve 0.0902    add 0.0005    
Accumulated time: pickout 0.4729    decision 2.0581    set_bounds 3.2690    solve 6.5752    add 0.5221    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
23991 domains visited
Cumulative time: 19.888947248458862


Properties batch 3, size 1
Remaining timeout: 178.40702605247498
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 178.40692973136902
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 178.40690517425537
Verifying property 5 with 1 instances.
##### Instance 66 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.37937450]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.25728035, -20.79345703, -15.69333935, -17.69227600, -15.08468628,
        -17.27866936, -15.87126160, -17.97873497, -18.71574402, -20.41540718],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.37937450]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 550
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 867
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.751319885253906e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.37937235832214355
10 lb beta sum: 0.0, worst -0.3793785572052002
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0540    transfer 0.0001    finalize 0.0001    func 0.0545    
Accumulated time: func 0.0545    prepare 0.0002    bound 0.0540    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 3] 
split level 1: [/input-12, 49] 
split level 2: [/input-12, 83] 
split level 3: [/input-12, 43] 
split level 4: [/input-12, 18] 
split level 5: [/input-12, 53] 
split level 6: [/input-12, 6] 
split level 7: [/input-12, 57] 
split level 8: [/input-8, 1693] 
split level 9: [/input-8, 927] 
split level 10: [/input-12, 24] 
split level 11: [/input-8, 1044] 
split level 12: [/input-8, 1692] 
split level 13: [/input-12, 12] 
split level 14: [/input-8, 1057] 
split level 15: [/input-8, 619] 
split level 16: [/input-8, 1630] 
split level 17: [/input-8, 1068] 
split level 18: [/input-8, 1695] 
split level 19: [/input-12, 86] 
split level 20: [/input-8, 382] 
split level 21: [/input-8, 1622] 
split level 22: [/input-8, 1964] 
split level 23: [/input-8, 498] 
split level 24: [/input-8, 1972] 
split level 25: [/input-8, 1967] 
split level 26: [/input-8, 1069] 
split level 27: [/input-8, 626] 
split level 28: [/input-8, 1700] 
split level 29: [/input-8, 1974] 
split level 30: [/input-8, 1268] 
split level 31: [/input-8, 1686] 
split level 32: [/input-8, 593] 
split level 33: [/input-8, 227] 
split level 34: [/input-8, 629] 
split level 35: [/input-8, 1973] 
split level 36: [/input, 1649] 
split level 37: [/input-8, 1683] 
split level 38: [/input-8, 1314] 
split level 39: [/input-8, 635] 
split level 40: [/input-8, 490] 
split level 41: [/input, 2923] 
split level 42: [/input-8, 371] 
split level 43: [/input-8, 1306] 
split level 44: [/input-8, 1762] 
split level 45: [/input-8, 1765] 
split level 46: [/input-8, 1267] 
split level 47: [/input-8, 1403] 
split level 48: [/input-8, 367] 
split level 49: [/input-8, 505] 
split level 50: [/input-8, 633] 
split level 51: [/input-8, 506] 
split level 52: [/input-8, 1773] 
split level 53: [/input-8, 1035] 
split level 54: [/input-8, 934] 
split level 55: [/input-8, 1703] 
split level 56: [/input-8, 468] 
split level 57: [/input-8, 618] 
split level 58: [/input, 385] 
split level 59: [/input-8, 1076] 
split level 60: [/input-8, 1789] 
split level 61: [/input-8, 459] 
split level 62: [/input-8, 1714] 
split level 63: [/input-8, 1650] 
split level 64: [/input-8, 1626] 
split level 65: [/input-8, 462] 
split level 66: [/input-8, 1929] 
split level 67: [/input, 2906] 
split level 68: [/input-8, 636] 
split level 69: [/input-8, 918] 
split level 70: [/input, 1512] 
split level 71: [/input-8, 1659] 
split level 72: [/input-8, 1790] 
split level 73: [/input-8, 1298] 
split level 74: [/input-8, 1294] 
split level 75: [/input-12, 20] 
split level 76: [/input-8, 497] 
split level 77: [/input-8, 466] 
split level 78: [/input-8, 1726] 
split level 79: [/input-8, 380] 
split level 80: [/input-8, 1651] 
split level 81: [/input-8, 1713] 
split level 82: [/input, 2157] 
split level 83: [/input-8, 1997] 
split level 84: [/input-8, 1244] 
split level 85: [/input-8, 1704] 
split level 86: [/input, 1418] 
split level 87: [/input, 2506] 
split level 88: [/input-8, 1681] 
split level 89: [/input-8, 1252] 
split level 90: [/input-8, 1649] 
split level 91: [/input-8, 900] 
split level 92: [/input-8, 1633] 
split level 93: [/input, 2181] 
split level 94: [/input, 2953] 
split level 95: [/input-8, 1708] 
split level 96: [/input-8, 1653] 
split level 97: [/input-8, 1660] 
split level 98: [/input-8, 1746] 
split level 99: [/input-8, 1676] 
split level 100: [/input-8, 1310] 
split level 101: [/input, 110] 
split level 102: [/input-8, 1750] 
split level 103: [/input-8, 1716] 
split level 104: [/input-8, 1064] 
split level 105: [/input-8, 1522] 
split level 106: [/input-8, 1969] 
split level 107: [/input-8, 1612] 
split level 108: [/input-8, 1774] 
split level 109: [/input, 2460] 
split level 110: [/input-8, 898] 
split level 111: [/input, 4005] 
split level 112: [/input, 2412] 
split level 113: [/input-8, 329] 
split level 114: [/input, 2470] 
split level 115: [/input, 867] 
split level 116: [/input-8, 1766] 
split level 117: [/input, 2186] 
split level 118: [/input-8, 473] 
split level 119: [/input, 4023] 
split level 120: [/input-8, 1978] 
split level 121: [/input, 1500] 
split level 122: [/input-8, 1668] 
split level 123: [/input, 2931] 
split level 124: [/input, 2173] 
split level 125: [/input, 151] 
split level 126: [/input, 4021] 
split level 127: [/input, 2555] 
split level 128: [/input, 2440] 
split level 129: [/input-8, 1320] 
split level 130: [/input, 3517] 
split level 131: [/input, 2454] 
split level 132: [/input-8, 1331] 
split level 133: [/input-8, 1770] 
split level 134: [/input, 2982] 
split level 135: [/input, 1365] 
split level 136: [/input-8, 75] 
split level 137: [/input-8, 2028] 
split level 138: [/input, 169] 
split level 139: [/input-8, 1269] 
split level 140: [/input, 1526] 
split level 141: [/input, 881] 
split level 142: [/input-8, 420] 
split level 143: [/input, 89] 
split level 144: [/input, 2538] 
split level 145: [/input-8, 486] 
split level 146: [/input, 2165] 
split level 147: [/input, 2189] 
split level 148: [/input, 3427] 
split level 149: [/input, 2774] 
split level 150: [/input, 2263] 
split level 151: [/input, 3549] 
split level 152: [/input-8, 899] 
split level 153: [/input-8, 1161] 
split level 154: [/input, 2927] 
split level 155: [/input-8, 2029] 
split level 156: [/input, 1478] 
split level 157: [/input, 328] 
split level 158: [/input, 2776] 
split level 159: [/input-8, 1337] 
split level 160: [/input-8, 73] 
split level 161: [/input, 2252] 
split level 162: [/input, 3526] 
split level 163: [/input, 2231] 
split level 164: [/input-8, 410] 
split level 165: [/input-8, 1531] 
split level 166: [/input, 667] 
split level 167: [/input-8, 805] 
split level 168: [/input-8, 74] 
split level 169: [/input, 2519] 
split level 170: [/input-8, 908] 
split level 171: [/input, 2761] 
split level 172: [/input, 408] 
split level 173: [/input, 2374] 
split level 174: [/input, 2404] 
split level 175: [/input, 954] 
split level 176: [/input-8, 1761] 
split level 177: [/input, 1392] 
split level 178: [/input, 2550] 
split level 179: [/input, 1493] 
split level 180: [/input, 3279] 
split level 181: [/input, 3546] 
split level 182: [/input, 2838] 
split level 183: [/input, 2133] 
split level 184: [/input, 344] 
split level 185: [/input, 852] 
split level 186: [/input, 2961] 
split level 187: [/input, 4009] 
split level 188: [/input, 1391] 
split level 189: [/input, 278] 
split level 190: [/input, 3271] 
split level 191: [/input-8, 78] 
split level 192: [/input-8, 1743] 
split level 193: [/input, 141] 
split level 194: [/input, 215] 
split level 195: [/input, 2118] 
split level 196: [/input, 94] 
split level 197: [/input, 2542] 
split level 198: [/input, 2484] 
split level 199: [/input, 3579] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3792424201965332
10 lb beta sum: 0.0, worst -0.37924814224243164
Time: prepare 0.0113    bound 0.0996    transfer 0.0015    finalize 0.0025    func 0.1176    
Accumulated time: func 0.1721    prepare 0.0215    bound 0.1537    transfer 0.0016    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.24518418) min lb tensor(-0.37924242)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010289430618286133 
BICCOS Cumulative time: 0.010289430618286133
Preprocessing time: 0.009857654571533203 Inference time: 0.0001475811004638672 Add cuts time: 5.841255187988281e-05 Cut analysis time: 0.0002257823944091797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.36536 (1), -0.36534 (1), -0.36514 (1), -0.36460 (1), -0.36438 (1), -0.36371 (1), -0.36366 (1), -0.36343 (1), -0.36308 (1), -0.36247 (1), -0.36222 (1), -0.36154 (1), -0.36136 (1), -0.36056 (1), -0.35983 (1), -0.35897 (1), -0.35869 (1), -0.35734 (1), -0.35660 (1), -0.35591 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5217    set_bounds 0.0086    solve 0.1176    add 0.1439    
Accumulated time: pickout 0.0003    decision 0.5217    set_bounds 0.0086    solve 0.1176    add 0.1439    
Current (lb-rhs): -0.3653564453125
50 domains visited
Cumulative time: 0.8728716373443604

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 3] [/input-12, 49] [/input-12, 3] [/input-12, 49] [/input-12, 49] [/input-12, 3] [/input-12, 49] [/input-12, 3] [/input-12, 49] [/input-12, 49] 
split level 1: [/input-12, 83] [/input-12, 83] [/input-12, 49] [/input-12, 83] [/input-12, 83] [/input-12, 49] [/input-12, 83] [/input-12, 49] [/input-12, 83] [/input-12, 83] 
split level 2: [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 83] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] 
split level 3: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3282201290130615
10 lb beta sum: 0.5766316652297974, worst -0.3254567086696625
Time: prepare 0.0074    bound 0.1210    transfer 0.0007    finalize 0.0025    func 0.1343    
Accumulated time: func 0.3064    prepare 0.0292    bound 0.2747    transfer 0.0023    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.27090347) min lb tensor(-0.32541382)
Number of Verified Splits: 14 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.013617992401123047 
BICCOS Cumulative time: 0.02390742301940918
Preprocessing time: 0.011774539947509766 Inference time: 0.0006456375122070312 Add cuts time: 0.0003159046173095703 Cut analysis time: 0.0008819103240966797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10103 (2), -0.10096 (2), -0.10023 (2), -0.10005 (2), -0.09792 (2), -0.09732 (2), -0.09688 (2), -0.09667 (2), -0.09573 (2), -0.09552 (2), -0.09515 (2), -0.09497 (2), -0.09456 (2), -0.09159 (2), -0.09032 (2), -0.08948 (2), -0.08909 (2), -0.08859 (2), -0.08516 (2), -0.08476 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0196    set_bounds 0.0127    solve 0.1344    add 0.0823    
Accumulated time: pickout 0.0014    decision 0.5413    set_bounds 0.0214    solve 0.2520    add 0.2262    
Current (lb-rhs): -0.10102689266204834
100 domains visited
Cumulative time: 1.13690185546875

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] 
split level 1: [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 43] [/input-12, 43] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] 
split level 2: [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 43] [/input-12, 43] 
split level 3: [/input-12, 53] [/input-12, 18] [/input-12, 18] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10227584838867188
10 lb beta sum: 0.9057183861732483, worst -0.02858816087245941
Time: prepare 0.0072    bound 0.1221    transfer 0.0008    finalize 0.0023    func 0.1355    
Accumulated time: func 0.4418    prepare 0.0366    bound 0.3967    transfer 0.0031    finalize 0.0074    
all_split False
======================Cut inference begins======================
max lb tensor(0.25396347) min lb tensor(-0.02376954)
Number of Verified Splits: 366 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.035233497619628906 
BICCOS Cumulative time: 0.059140920639038086
Preprocessing time: 0.011582374572753906 Inference time: 0.015057086944580078 Add cuts time: 0.008265495300292969 Cut analysis time: 0.0003285408020019531
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0155    solve 0.1356    add 0.0192    
Accumulated time: pickout 0.0024    decision 0.5609    set_bounds 0.0369    solve 0.3876    add 0.2454    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49,  3]), tensor([-1., -1.]), tensor([0, 0]), tensor([4.95975705e-10, 5.69440484e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49,  3]), tensor([-1.,  1.]), tensor([0, 0]), tensor([4.95975705e-10, 1.60693396e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 43,  3]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([4.95975705e-10, 6.28514439e-02, 2.77626574e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 43,  3]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([4.95975705e-10, 6.28514439e-02, 8.80782753e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 43,  3]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([4.95975705e-10, 9.00533944e-02, 2.80449748e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 43,  3]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([4.95975705e-10, 9.00533944e-02, 7.95310289e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3137373924255371
10 lb beta sum: 0.5503321886062622, worst -0.3114350438117981
Time: prepare 0.0004    bound 0.1136    transfer 0.0001    finalize 0.0002    func 0.1144    
Accumulated time: func 0.5562    prepare 0.0370    bound 0.5103    transfer 0.0032    finalize 0.0076    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] 
split level 1: [/input-12, 43] 
split level 2: [/input-12, 18] 
split level 3: [/input-12, 53] 
split level 4: [/input-12, 24] 
split level 5: [/input-8, 1692] 
split level 6: [/input-12, 12] 
split level 7: [/input-8, 1695] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119797468185425, worst -0.10818684101104736
10 lb beta sum: 0.732018768787384, worst -0.10746419429779053
Time: prepare 0.0109    bound 0.1160    transfer 0.0005    finalize 0.0011    func 0.1303    
Accumulated time: func 0.6865    prepare 0.0483    bound 0.6264    transfer 0.0037    finalize 0.0087    
all_split False
======================Cut inference begins======================
max lb tensor(0.26083863) min lb tensor(-0.10730636)
Number of Verified Splits: 215 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796276092529, worst -0.20102369785308838
10 lb beta sum: 1.3032463788986206, worst -0.09217637777328491
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 71.
#cuts 1-3: 7
#cuts 4-6: 18
#cuts 7-9: 45
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.27524471282958984 
BICCOS Cumulative time: 0.33438563346862793
Preprocessing time: 0.008044719696044922 Inference time: 0.2500133514404297 Add cuts time: 0.013497352600097656 Cut analysis time: 0.003689289093017578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10731 (8), -0.09904 (8), -0.09220 (8), -0.09118 (8), -0.08302 (8), -0.08294 (8), -0.07752 (8), -0.06833 (8), -0.06462 (8), -0.05878 (8), -0.05773 (8), -0.05765 (8), -0.05036 (8), -0.05030 (8), -0.04897 (8), -0.04718 (8), -0.04641 (8), -0.04517 (8), -0.04352 (8), -0.04342 (8), 
Length of domains: 41
Time: pickout 0.0005    decision 0.0222    set_bounds 0.0246    solve 0.1304    add 0.0121    
Accumulated time: pickout 0.0029    decision 0.5831    set_bounds 0.0615    solve 0.5180    add 0.2575    
Current (lb-rhs): -0.10730636119842529
141 domains visited
Cumulative time: 1.9589240550994873

BaB round 2
batch: 41
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1972] [/input-8, 1972] [/input-8, 1972] [/input-8, 1972] [/input-8, 1972] [/input-8, 1630] [/input-8, 1630] [/input-8, 1972] [/input-8, 1630] [/input-8, 1630] 
split level 1: [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1967] [/input-8, 1972] [/input-8, 1973] [/input-8, 1314] [/input-8, 1972] 
split level 2: [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-8, 1967] [/input-8, 1651] [/input-8, 1973] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09146976470947266
10 lb beta sum: 0.3952169120311737, worst -0.08945494890213013
Time: prepare 0.0062    bound 0.1404    transfer 0.0012    finalize 0.0016    func 0.1517    
Accumulated time: func 0.8382    prepare 0.0547    bound 0.7668    transfer 0.0050    finalize 0.0104    
all_split False
======================Cut inference begins======================
max lb tensor(0.05261970) min lb tensor(-0.08937368)
Number of Verified Splits: 132 of 328
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 11
#cuts 4-6: 8
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.02725815773010254 
BICCOS Cumulative time: 0.36164379119873047
Preprocessing time: 0.009674787521362305 Inference time: 0.01314997673034668 Add cuts time: 0.0036351680755615234 Cut analysis time: 0.0007982254028320312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08937 (11), -0.08744 (11), -0.08177 (11), -0.07984 (11), -0.07974 (11), -0.07781 (11), -0.07518 (11), -0.07455 (11), -0.07394 (11), -0.07336 (11), -0.07254 (11), -0.07142 (11), -0.07136 (11), -0.06942 (11), -0.06758 (11), -0.06641 (11), -0.06583 (11), -0.06567 (11), -0.06560 (11), -0.06496 (11), 
Length of domains: 196
Time: pickout 0.0017    decision 0.0171    set_bounds 0.0171    solve 0.1517    add 0.0023    
Accumulated time: pickout 0.0046    decision 0.6002    set_bounds 0.0786    solve 0.6697    add 0.2598    
Current (lb-rhs): -0.08937367796897888
337 domains visited
Cumulative time: 2.176828384399414

BaB round 3
batch: 196
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1693] [/input-8, 1967] [/input-8, 1967] [/input-8, 1068] [/input-8, 1967] [/input-8, 1068] [/input-8, 1967] [/input-8, 1967] [/input-8, 1068] [/input-8, 1693] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0874478816986084
10 lb beta sum: 0.5051541328430176, worst -0.08667188882827759
Time: prepare 0.0075    bound 0.1358    transfer 0.0007    finalize 0.0017    func 0.1484    
Accumulated time: func 0.9866    prepare 0.0624    bound 0.9026    transfer 0.0057    finalize 0.0120    
all_split False
======================Cut inference begins======================
max lb tensor(0.02980161) min lb tensor(-0.08546954)
Number of Verified Splits: 115 of 392
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 15
#cuts 4-6: 19
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.02954697608947754 
BICCOS Cumulative time: 0.391190767288208
Preprocessing time: 0.011191844940185547 Inference time: 0.014316558837890625 Add cuts time: 0.002759218215942383 Cut analysis time: 0.0012793540954589844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08547 (12), -0.08369 (12), -0.07810 (12), -0.07779 (12), -0.07600 (12), -0.07596 (12), -0.07574 (12), -0.07395 (12), -0.07140 (12), -0.07032 (12), -0.07016 (12), -0.06987 (12), -0.06944 (12), -0.06844 (12), -0.06834 (12), -0.06801 (12), -0.06766 (12), -0.06728 (12), -0.06631 (12), -0.06549 (12), 
Length of domains: 277
Time: pickout 0.0034    decision 0.0197    set_bounds 0.0164    solve 0.1485    add 0.0042    
Accumulated time: pickout 0.0080    decision 0.6199    set_bounds 0.0950    solve 0.8182    add 0.2640    
Current (lb-rhs): -0.08546954393386841
614 domains visited
Cumulative time: 2.399871349334717

BaB round 4
batch: 277
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1630] [/input-8, 1314] [/input-8, 1700] [/input-8, 629] [/input-8, 1314] [/input-8, 629] [/input-8, 1700] [/input-8, 1268] [/input-8, 629] [/input-8, 1630] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08278059959411621
10 lb beta sum: 0.5164451003074646, worst -0.08081251382827759
Time: prepare 0.0105    bound 0.1370    transfer 0.0054    finalize 0.0023    func 0.1589    
Accumulated time: func 1.1454    prepare 0.0732    bound 1.0397    transfer 0.0111    finalize 0.0143    
all_split False
======================Cut inference begins======================
max lb tensor(0.02192712) min lb tensor(-0.08075532)
Number of Verified Splits: 140 of 554
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 48.
#cuts 1-3: 15
#cuts 4-6: 27
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 0.038607120513916016 
BICCOS Cumulative time: 0.429797887802124
Preprocessing time: 0.016187667846679688 Inference time: 0.01711583137512207 Add cuts time: 0.003714323043823242 Cut analysis time: 0.0015892982482910156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08076 (13), -0.07899 (13), -0.07415 (13), -0.07335 (13), -0.07304 (13), -0.07237 (13), -0.07127 (13), -0.07124 (13), -0.07090 (13), -0.06913 (13), -0.06676 (13), -0.06675 (13), -0.06641 (13), -0.06541 (13), -0.06521 (13), -0.06468 (13), -0.06463 (13), -0.06439 (13), -0.06426 (13), -0.06354 (13), 
Length of domains: 414
Time: pickout 0.0039    decision 0.0241    set_bounds 0.0231    solve 0.1590    add 0.0045    
Accumulated time: pickout 0.0120    decision 0.6440    set_bounds 0.1180    solve 0.9772    add 0.2685    
Current (lb-rhs): -0.0807553231716156
1028 domains visited
Cumulative time: 2.6543381214141846

BaB round 5
batch: 414
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1964] [/input-8, 1314] [/input-8, 1964] [/input-8, 1314] [/input-8, 1314] [/input-8, 1314] [/input-8, 1314] [/input-8, 1967] [/input-8, 1964] [/input-8, 1268] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07593321800231934
10 lb beta sum: 0.5206365585327148, worst -0.0739956796169281
Time: prepare 0.0166    bound 0.1441    transfer 0.0023    finalize 0.0036    func 0.1721    
Accumulated time: func 1.3175    prepare 0.0900    bound 1.1838    transfer 0.0135    finalize 0.0179    
all_split False
======================Cut inference begins======================
max lb tensor(0.01459315) min lb tensor(-0.07395422)
Number of Verified Splits: 186 of 828
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 59.
#cuts 1-3: 17
#cuts 4-6: 33
#cuts 7-9: 9
#cuts >= 20: 0
BICCOS time: 0.056945085525512695 
BICCOS Cumulative time: 0.4867429733276367
Preprocessing time: 0.023819446563720703 Inference time: 0.024023771286010742 Add cuts time: 0.007130622863769531 Cut analysis time: 0.0019712448120117188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07395 (14), -0.07297 (14), -0.07220 (14), -0.07121 (14), -0.06750 (14), -0.06654 (14), -0.06620 (14), -0.06617 (14), -0.06573 (14), -0.06555 (14), -0.06522 (14), -0.06445 (14), -0.06444 (14), -0.06441 (14), -0.06416 (14), -0.06347 (14), -0.06346 (14), -0.06318 (14), -0.06240 (14), -0.06142 (14), 
Length of domains: 642
Time: pickout 0.0073    decision 0.0340    set_bounds 0.2064    solve 0.1723    add 0.0050    
Accumulated time: pickout 0.0192    decision 0.6780    set_bounds 0.3244    solve 1.1495    add 0.2735    
Current (lb-rhs): -0.07395422458648682
1670 domains visited
Cumulative time: 3.138110399246216

BaB round 6
batch: 642
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1964] [/input-8, 1700] [/input-8, 1964] [/input-8, 1964] [/input-8, 506] [/input-8, 1700] [/input-8, 1964] [/input-8, 1789] [/input-8, 1700] [/input-8, 1964] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07149243354797363
10 lb beta sum: 0.5322604179382324, worst -0.06961160898208618
Time: prepare 0.0247    bound 0.1515    transfer 0.0059    finalize 0.0060    func 0.1966    
Accumulated time: func 1.5141    prepare 0.1149    bound 1.3353    transfer 0.0194    finalize 0.0239    
all_split False
======================Cut inference begins======================
max lb tensor(0.01907787) min lb tensor(-0.06960496)
Number of Verified Splits: 291 of 1284
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 76.
#cuts 1-3: 20
#cuts 4-6: 42
#cuts 7-9: 14
#cuts >= 20: 0
BICCOS time: 0.08712577819824219 
BICCOS Cumulative time: 0.5738687515258789
Preprocessing time: 0.03855633735656738 Inference time: 0.036742210388183594 Add cuts time: 0.00927734375 Cut analysis time: 0.002549886703491211
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06960 (15), -0.06867 (15), -0.06776 (15), -0.06683 (15), -0.06300 (15), -0.06216 (15), -0.06182 (15), -0.06168 (15), -0.06123 (15), -0.06114 (15), -0.06089 (15), -0.05998 (15), -0.05997 (15), -0.05983 (15), -0.05983 (15), -0.05904 (15), -0.05904 (15), -0.05890 (15), -0.05798 (15), -0.05705 (15), 
Length of domains: 993
Time: pickout 0.0088    decision 0.0448    set_bounds 0.0536    solve 0.1969    add 0.0071    
Accumulated time: pickout 0.0280    decision 0.7227    set_bounds 0.3781    solve 1.3464    add 0.2806    
Current (lb-rhs): -0.06960496306419373
2663 domains visited
Cumulative time: 3.5391414165496826

BaB round 7
batch: 993
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1306] [/input-8, 1306] [/input-8, 1268] [/input-8, 1306] [/input-8, 1967] [/input-8, 1306] [/input-8, 1714] [/input-8, 1306] [/input-8, 1973] [/input-8, 1306] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06561565399169922
10 lb beta sum: 0.5392604470252991, worst -0.06348404288291931
Time: prepare 0.0382    bound 0.1727    transfer 0.0080    finalize 0.0086    func 0.2414    
Accumulated time: func 1.7554    prepare 0.1534    bound 1.5080    transfer 0.0274    finalize 0.0325    
all_split False
======================Cut inference begins======================
max lb tensor(0.01359680) min lb tensor(-0.06338751)
Number of Verified Splits: 346 of 1986
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 94.
#cuts 1-3: 25
#cuts 4-6: 47
#cuts 7-9: 22
#cuts >= 20: 0
BICCOS time: 0.12274885177612305 
BICCOS Cumulative time: 0.696617603302002
Preprocessing time: 0.060842037200927734 Inference time: 0.04548454284667969 Add cuts time: 0.012839078903198242 Cut analysis time: 0.003583192825317383
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06339 (16), -0.06228 (16), -0.06175 (16), -0.06154 (16), -0.06106 (16), -0.06043 (16), -0.05990 (16), -0.05922 (16), -0.05677 (16), -0.05594 (16), -0.05560 (16), -0.05528 (16), -0.05505 (16), -0.05489 (16), -0.05483 (16), -0.05448 (16), -0.05430 (16), -0.05402 (16), -0.05397 (16), -0.05375 (16), 
Length of domains: 1640
Time: pickout 0.0200    decision 0.0648    set_bounds 0.0829    solve 0.2417    add 0.0120    
Accumulated time: pickout 0.0480    decision 0.7875    set_bounds 0.4610    solve 1.5880    add 0.2926    
Current (lb-rhs): -0.06338751316070557
4303 domains visited
Cumulative time: 4.087323427200317

BaB round 8
batch: 1640
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1057] [/input-8, 1057] [/input-8, 1268] [/input-8, 1057] [/input-8, 1268] [/input-8, 1314] [/input-8, 1057] [/input-8, 1268] [/input-8, 1057] [/input-8, 1789] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06180620193481445
10 lb beta sum: 0.5176615715026855, worst -0.05991297960281372
Time: prepare 0.0634    bound 0.2522    transfer 0.0121    finalize 0.0163    func 0.3662    
Accumulated time: func 2.1216    prepare 0.2170    bound 1.7602    transfer 0.0395    finalize 0.0488    
all_split False
======================Cut inference begins======================
max lb tensor(0.03769788) min lb tensor(-0.05990347)
Number of Verified Splits: 767 of 3280
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 104.
#cuts 1-3: 21
#cuts 4-6: 69
#cuts 7-9: 14
#cuts >= 20: 0
BICCOS time: 0.24026870727539062 
BICCOS Cumulative time: 0.9368863105773926
Preprocessing time: 0.10036706924438477 Inference time: 0.10753870010375977 Add cuts time: 0.028509855270385742 Cut analysis time: 0.0038530826568603516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05990 (17), -0.05890 (17), -0.05823 (17), -0.05806 (17), -0.05766 (17), -0.05705 (17), -0.05639 (17), -0.05582 (17), -0.05326 (17), -0.05244 (17), -0.05210 (17), -0.05188 (17), -0.05146 (17), -0.05142 (17), -0.05139 (17), -0.05109 (17), -0.05077 (17), -0.05056 (17), -0.05043 (17), -0.05026 (17), 
Length of domains: 2513
Time: pickout 0.0228    decision 0.0997    set_bounds 0.2826    solve 0.3669    add 0.0149    
Accumulated time: pickout 0.0709    decision 0.8872    set_bounds 0.7436    solve 1.9549    add 0.3075    
Current (lb-rhs): -0.059903472661972046
6816 domains visited
Cumulative time: 5.125808238983154

BaB round 9
batch: 2513
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1057] [/input-8, 506] [/input-8, 1268] [/input-8, 506] [/input-8, 1306] [/input-8, 506] [/input-8, 1306] [/input-8, 506] [/input-8, 1268] [/input-8, 1714] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05744338035583496
10 lb beta sum: 0.5111322402954102, worst -0.06310218572616577
Time: prepare 0.1004    bound 0.3483    transfer 0.0117    finalize 0.0219    func 0.5165    
Accumulated time: func 2.6381    prepare 0.3177    bound 2.1085    transfer 0.0512    finalize 0.0707    
all_split False
======================Cut inference begins======================
max lb tensor(0.01657021) min lb tensor(-0.05549109)
Number of Verified Splits: 1343 of 5026
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 137.
#cuts 1-3: 26
#cuts 4-6: 85
#cuts 7-9: 26
#cuts >= 20: 0
BICCOS time: 0.4007248878479004 
BICCOS Cumulative time: 1.337611198425293
Preprocessing time: 0.15576553344726562 Inference time: 0.20147132873535156 Add cuts time: 0.03824472427368164 Cut analysis time: 0.0052433013916015625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05549 (18), -0.05448 (18), -0.05379 (18), -0.05364 (18), -0.05325 (18), -0.05277 (18), -0.05263 (18), -0.05195 (18), -0.05177 (18), -0.05140 (18), -0.05107 (18), -0.05092 (18), -0.05053 (18), -0.04992 (18), -0.04923 (18), -0.04883 (18), -0.04869 (18), -0.04801 (18), -0.04771 (18), -0.04741 (18), 
Length of domains: 3683
Time: pickout 0.0369    decision 0.1436    set_bounds 0.3632    solve 0.5175    add 0.0181    
Accumulated time: pickout 0.1078    decision 1.0309    set_bounds 1.1068    solve 2.4724    add 0.3257    
Current (lb-rhs): -0.055491089820861816
10499 domains visited
Cumulative time: 6.62256646156311

BaB round 10
batch: 3683
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1068] [/input-8, 1068] [/input-8, 629] [/input-8, 1068] [/input-8, 629] [/input-8, 1068] [/input-8, 1068] [/input-8, 629] [/input-8, 1068] [/input-8, 1068] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05504012107849121
10 lb beta sum: 0.5017976760864258, worst -0.053179383277893066
Time: prepare 0.1491    bound 0.4844    transfer 0.0377    finalize 0.0346    func 0.7548    
Accumulated time: func 3.3930    prepare 0.4671    bound 2.5929    transfer 0.0890    finalize 0.1053    
all_split False
======================Cut inference begins======================
max lb tensor(0.02009284) min lb tensor(-0.05316842)
Number of Verified Splits: 3063 of 7366
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 197.
#cuts 1-3: 27
#cuts 4-6: 142
#cuts 7-9: 28
#cuts >= 20: 0
BICCOS time: 0.9962084293365479 
BICCOS Cumulative time: 2.333819627761841
Preprocessing time: 0.41280531883239746 Inference time: 0.4841752052307129 Add cuts time: 0.0914297103881836 Cut analysis time: 0.007798194885253906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05317 (19), -0.05214 (19), -0.05147 (19), -0.05138 (19), -0.05091 (19), -0.05045 (19), -0.05035 (19), -0.04968 (19), -0.04944 (19), -0.04912 (19), -0.04876 (19), -0.04866 (19), -0.04821 (19), -0.04765 (19), -0.04697 (19), -0.04653 (19), -0.04642 (19), -0.04568 (19), -0.04537 (19), -0.04505 (19), 
Length of domains: 4303
Time: pickout 0.0716    decision 0.3480    set_bounds 0.3284    solve 0.7564    add 0.0194    
Accumulated time: pickout 0.1795    decision 1.3789    set_bounds 1.4351    solve 3.2288    add 0.3451    
Current (lb-rhs): -0.053168416023254395
14802 domains visited
Cumulative time: 9.175004720687866

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1068] [/input-8, 1622] [/input-8, 1622] [/input-8, 1068] [/input-8, 1622] [/input-8, 1068] [/input-8, 1622] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05257916450500488
10 lb beta sum: 0.4960259795188904, worst -0.05071151256561279
Time: prepare 0.1723    bound 0.5430    transfer 0.0296    finalize 0.0448    func 0.8450    
Accumulated time: func 4.2380    prepare 0.6396    bound 3.1359    transfer 0.1186    finalize 0.1501    
all_split False
======================Cut inference begins======================
max lb tensor(0.31080949) min lb tensor(-0.05069390)
Number of Verified Splits: 4216 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 177.
#cuts 1-3: 21
#cuts 4-6: 148
#cuts 7-9: 8
#cuts >= 20: 0
BICCOS time: 1.2462408542633057 
BICCOS Cumulative time: 3.5800604820251465
Preprocessing time: 0.26062703132629395 Inference time: 0.8618369102478027 Add cuts time: 0.11759018898010254 Cut analysis time: 0.006186723709106445
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05069 (20), -0.04967 (20), -0.04899 (20), -0.04890 (20), -0.04844 (20), -0.04798 (20), -0.04788 (20), -0.04721 (20), -0.04697 (20), -0.04666 (20), -0.04627 (20), -0.04619 (20), -0.04573 (20), -0.04518 (20), -0.04448 (20), -0.04405 (20), -0.04394 (20), -0.04321 (20), -0.04300 (20), -0.04254 (20), 
Length of domains: 4183
Time: pickout 0.0639    decision 0.2258    set_bounds 0.5308    solve 0.8474    add 0.0218    
Accumulated time: pickout 0.2433    decision 1.6046    set_bounds 1.9660    solve 4.0762    add 0.3669    
Current (lb-rhs): -0.050693899393081665
18778 domains visited
current_vram/total_varm: 10.9GB/99.9GB, batch_size increase to 8192
Cumulative time: 12.163470029830933

BaB round 12
batch: 4183
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1068] [/input-8, 1622] [/input-8, 1622] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0511021614074707
10 lb beta sum: 0.45219507813453674, worst -0.059244245290756226
Time: prepare 0.1773    bound 0.5498    transfer 0.0411    finalize 0.0492    func 0.8730    
Accumulated time: func 5.1110    prepare 0.8172    bound 3.6857    transfer 0.1597    finalize 0.1993    
all_split False
======================Cut inference begins======================
max lb tensor(0.21152341) min lb tensor(-0.04923049)
Number of Verified Splits: 4988 of 8366
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 185.
#cuts 1-3: 32
#cuts 4-6: 137
#cuts 7-9: 16
#cuts >= 20: 0
BICCOS time: 1.42372465133667 
BICCOS Cumulative time: 5.003785133361816
Preprocessing time: 0.26759958267211914 Inference time: 1.0251696109771729 Add cuts time: 0.12468576431274414 Cut analysis time: 0.006269693374633789
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04923 (21), -0.04820 (21), -0.04754 (21), -0.04744 (21), -0.04698 (21), -0.04651 (21), -0.04642 (21), -0.04575 (21), -0.04550 (21), -0.04519 (21), -0.04482 (21), -0.04472 (21), -0.04427 (21), -0.04372 (21), -0.04303 (21), -0.04268 (21), -0.04248 (21), -0.04175 (21), -0.04158 (21), -0.04116 (21), 
Length of domains: 3378
Time: pickout 0.0839    decision 0.2340    set_bounds 0.5499    solve 0.8762    add 0.0166    
Accumulated time: pickout 0.3272    decision 1.8386    set_bounds 2.5158    solve 4.9525    add 0.3834    
Current (lb-rhs): -0.049230486154556274
22156 domains visited
Cumulative time: 15.40740966796875

BaB round 13
batch: 3378
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04803109169006348
10 lb beta sum: 0.5917550921440125, worst -0.09735050797462463
Time: prepare 0.1448    bound 0.4581    transfer 0.0259    finalize 0.0377    func 0.8916    
Accumulated time: func 6.0026    prepare 0.9622    bound 4.1438    transfer 0.1856    finalize 0.2370    
all_split False
======================Cut inference begins======================
max lb tensor(0.33745238) min lb tensor(-0.04616112)
Number of Verified Splits: 4637 of 6756
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 167.
#cuts 1-3: 41
#cuts 4-6: 125
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 1.1213469505310059 
BICCOS Cumulative time: 6.125132083892822
Preprocessing time: 0.21940016746520996 Inference time: 0.7712428569793701 Add cuts time: 0.1256871223449707 Cut analysis time: 0.005016803741455078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04616 (22), -0.04512 (22), -0.04446 (22), -0.04436 (22), -0.04388 (22), -0.04340 (22), -0.04332 (22), -0.04266 (22), -0.04239 (22), -0.04207 (22), -0.04169 (22), -0.04160 (22), -0.04114 (22), -0.04058 (22), -0.03989 (22), -0.03959 (22), -0.03933 (22), -0.03864 (22), -0.03851 (22), -0.03806 (22), 
Length of domains: 2119
Time: pickout 0.0508    decision 0.1899    set_bounds 0.2955    solve 0.8936    add 0.0124    
Accumulated time: pickout 0.3780    decision 2.0285    set_bounds 2.8114    solve 5.8461    add 0.3959    
Current (lb-rhs): -0.046161115169525146
24275 domains visited
Cumulative time: 18.028316974639893

BaB round 14
batch: 2119
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-8, 1057] [/input-12, 86] [/input-12, 86] [/input-8, 1057] [/input-8, 1057] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04458785057067871
10 lb beta sum: 0.7160975337028503, worst -0.053288161754608154
Time: prepare 0.0888    bound 0.3131    transfer 0.0062    finalize 0.0238    func 0.4603    
Accumulated time: func 6.4630    prepare 1.0513    bound 4.4569    transfer 0.1919    finalize 0.2609    
all_split False
======================Cut inference begins======================
max lb tensor(0.32163358) min lb tensor(-0.04273188)
Number of Verified Splits: 2227 of 4238
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 110.
#cuts 1-3: 47
#cuts 4-6: 63
#cuts >= 20: 0
BICCOS time: 0.5645382404327393 
BICCOS Cumulative time: 6.6896703243255615
Preprocessing time: 0.13680386543273926 Inference time: 0.373492956161499 Add cuts time: 0.051271915435791016 Cut analysis time: 0.002969503402709961
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04273 (23), -0.04169 (23), -0.04102 (23), -0.04091 (23), -0.04045 (23), -0.03987 (23), -0.03920 (23), -0.03863 (23), -0.03838 (23), -0.03737 (23), -0.03667 (23), -0.03658 (23), -0.03655 (23), -0.03651 (23), -0.03613 (23), -0.03597 (23), -0.03556 (23), -0.03551 (23), -0.03551 (23), -0.03528 (23), 
Length of domains: 2011
Time: pickout 0.0354    decision 0.1250    set_bounds 0.3386    solve 0.4612    add 0.0143    
Accumulated time: pickout 0.4133    decision 2.1536    set_bounds 3.1499    solve 6.3073    add 0.4101    
Current (lb-rhs): -0.0427318811416626
26286 domains visited
Cumulative time: 19.595752716064453

BaB round 15
batch: 2011
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 506] [/input-8, 506] [/input-8, 1626] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04192686080932617
10 lb beta sum: 0.7288100719451904, worst -0.09753119945526123
Time: prepare 0.0825    bound 0.2928    transfer 0.0055    finalize 0.0220    func 0.4297    
Accumulated time: func 6.8927    prepare 1.1341    bound 4.7497    transfer 0.1974    finalize 0.2829    
all_split False
======================Cut inference begins======================
max lb tensor(0.42605740) min lb tensor(-0.04007113)
Number of Verified Splits: 2363 of 4022
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 84.
#cuts 1-3: 50
#cuts 4-6: 34
#cuts >= 20: 0
BICCOS time: 0.5729286670684814 
BICCOS Cumulative time: 7.262598991394043
Preprocessing time: 0.12656593322753906 Inference time: 0.40598511695861816 Add cuts time: 0.038279056549072266 Cut analysis time: 0.002098560333251953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04007 (24), -0.03903 (24), -0.03836 (24), -0.03806 (24), -0.03778 (24), -0.03702 (24), -0.03634 (24), -0.03577 (24), -0.03570 (24), -0.03470 (24), -0.03400 (24), -0.03389 (24), -0.03385 (24), -0.03368 (24), -0.03346 (24), -0.03331 (24), -0.03285 (24), -0.03284 (24), -0.03273 (24), -0.03268 (24), 
Length of domains: 1659
Time: pickout 0.0335    decision 0.1167    set_bounds 0.3186    solve 0.4306    add 0.0115    
Accumulated time: pickout 0.4469    decision 2.2703    set_bounds 3.4685    solve 6.7379    add 0.4217    
Current (lb-rhs): -0.04007112979888916
27945 domains visited
Cumulative time: 21.10721230506897

BaB round 16
batch: 1659
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.038652896881103516
10 lb beta sum: 0.6814796328544617, worst -0.09433948993682861
Time: prepare 0.1987    bound 0.2518    transfer 0.0110    finalize 0.0180    func 0.5022    
Accumulated time: func 7.3949    prepare 1.3330    bound 5.0016    transfer 0.2084    finalize 0.3009    
all_split False
======================Cut inference begins======================
max lb tensor(0.41865033) min lb tensor(-0.03678310)
Number of Verified Splits: 1456 of 3318
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 88.
#cuts 1-3: 45
#cuts 4-6: 43
#cuts >= 20: 0
BICCOS time: 0.3945906162261963 
BICCOS Cumulative time: 7.657189607620239
Preprocessing time: 0.10570549964904785 Inference time: 0.25785112380981445 Add cuts time: 0.028794050216674805 Cut analysis time: 0.0022399425506591797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03678 (25), -0.03574 (25), -0.03507 (25), -0.03491 (25), -0.03450 (25), -0.03387 (25), -0.03320 (25), -0.03263 (25), -0.03253 (25), -0.03153 (25), -0.03083 (25), -0.03071 (25), -0.03068 (25), -0.03068 (25), -0.03030 (25), -0.03029 (25), -0.03004 (25), -0.02967 (25), -0.02967 (25), -0.02967 (25), 
Length of domains: 1862
Time: pickout 0.0370    decision 0.0995    set_bounds 0.1465    solve 0.5031    add 0.0106    
Accumulated time: pickout 0.4839    decision 2.3698    set_bounds 3.6150    solve 7.2409    add 0.4323    
Current (lb-rhs): -0.03678309917449951
29807 domains visited
Cumulative time: 22.316837787628174

BaB round 17
batch: 1862
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-8, 1714] [/input-8, 1714] [/input-8, 1714] [/input-8, 1714] [/input-8, 1714] [/input-8, 1714] [/input-8, 1714] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.033383846282958984
10 lb beta sum: 0.5896289944648743, worst -0.08916893601417542
Time: prepare 0.0750    bound 0.2749    transfer 0.0064    finalize 0.0207    func 0.5403    
Accumulated time: func 7.9352    prepare 1.4083    bound 5.2765    transfer 0.2148    finalize 0.3215    
all_split False
======================Cut inference begins======================
max lb tensor(0.34298140) min lb tensor(-0.03146878)
Number of Verified Splits: 1620 of 3724
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 36
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.42705798149108887 
BICCOS Cumulative time: 8.084247589111328
Preprocessing time: 0.11480832099914551 Inference time: 0.29062438011169434 Add cuts time: 0.020423412322998047 Cut analysis time: 0.0012018680572509766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03147 (26), -0.03048 (26), -0.03046 (26), -0.02976 (26), -0.02959 (26), -0.02949 (26), -0.02921 (26), -0.02910 (26), -0.02877 (26), -0.02861 (26), -0.02859 (26), -0.02825 (26), -0.02810 (26), -0.02789 (26), -0.02761 (26), -0.02740 (26), -0.02734 (26), -0.02725 (26), -0.02722 (26), -0.02690 (26), 
Length of domains: 2104
Time: pickout 0.0322    decision 0.1099    set_bounds 0.1630    solve 0.5416    add 0.0138    
Accumulated time: pickout 0.5160    decision 2.4797    set_bounds 3.7780    solve 7.7825    add 0.4461    
Current (lb-rhs): -0.03146877884864807
31911 domains visited
Cumulative time: 23.62523078918457

BaB round 18
batch: 2104
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 505] [/input-8, 505] [/input-8, 505] [/input-8, 505] [/input-8, 505] [/input-8, 505] [/input-8, 505] [/input-8, 505] [/input-8, 505] [/input-8, 505] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03119826316833496
10 lb beta sum: 0.6367257833480835, worst -0.03862401843070984
Time: prepare 0.0832    bound 0.2945    transfer 0.0083    finalize 0.0236    func 0.4380    
Accumulated time: func 8.3732    prepare 1.4917    bound 5.5710    transfer 0.2231    finalize 0.3451    
all_split False
======================Cut inference begins======================
max lb tensor(0.04791401) min lb tensor(-0.02933320)
Number of Verified Splits: 1956 of 4208
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 61.
#cuts 1-3: 43
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.5192766189575195 
BICCOS Cumulative time: 8.603524208068848
Preprocessing time: 0.1300489902496338 Inference time: 0.3670806884765625 Add cuts time: 0.020584821701049805 Cut analysis time: 0.0015621185302734375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02933 (27), -0.02832 (27), -0.02800 (27), -0.02762 (27), -0.02746 (27), -0.02708 (27), -0.02705 (27), -0.02699 (27), -0.02645 (27), -0.02630 (27), -0.02613 (27), -0.02604 (27), -0.02575 (27), -0.02574 (27), -0.02534 (27), -0.02521 (27), -0.02518 (27), -0.02511 (27), -0.02501 (27), -0.02480 (27), 
Length of domains: 2252
Time: pickout 0.0371    decision 0.1235    set_bounds 0.1838    solve 0.5984    add 0.0105    
Accumulated time: pickout 0.5532    decision 2.6033    set_bounds 3.9618    solve 8.3810    add 0.4565    
Current (lb-rhs): -0.0293332040309906
34163 domains visited
Cumulative time: 25.122339963912964

BaB round 19
batch: 2252
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 468] [/input-8, 468] [/input-8, 468] [/input-8, 468] [/input-8, 468] [/input-8, 468] [/input-8, 468] [/input-8, 468] [/input-8, 468] [/input-8, 468] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025968551635742188
10 lb beta sum: 0.5665159821510315, worst -0.02397066354751587
Time: prepare 0.1001    bound 0.3136    transfer 0.0061    finalize 0.0224    func 0.6225    
Accumulated time: func 8.9957    prepare 1.5921    bound 5.8845    transfer 0.2292    finalize 0.3675    
all_split False
======================Cut inference begins======================
max lb tensor(0.01289535) min lb tensor(-0.02390009)
Number of Verified Splits: 2238 of 4504
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 55.
#cuts 1-3: 43
#cuts 4-6: 12
#cuts >= 20: 0
BICCOS time: 0.5858278274536133 
BICCOS Cumulative time: 9.189352035522461
Preprocessing time: 0.1405346393585205 Inference time: 0.4210548400878906 Add cuts time: 0.022816896438598633 Cut analysis time: 0.0014214515686035156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02390 (28), -0.02318 (28), -0.02294 (28), -0.02257 (28), -0.02216 (28), -0.02210 (28), -0.02203 (28), -0.02185 (28), -0.02162 (28), -0.02160 (28), -0.02153 (28), -0.02148 (28), -0.02131 (28), -0.02106 (28), -0.02101 (28), -0.02090 (28), -0.02083 (28), -0.02077 (28), -0.02069 (28), -0.02066 (28), 
Length of domains: 2266
Time: pickout 0.0542    decision 0.1306    set_bounds 0.1984    solve 0.6234    add 0.1431    
Accumulated time: pickout 0.6073    decision 2.7339    set_bounds 4.1601    solve 9.0043    add 0.5997    
Current (lb-rhs): -0.023900091648101807
36429 domains visited
Cumulative time: 26.892815351486206

BaB round 20
batch: 2266
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023208141326904297
10 lb beta sum: 0.48432791233062744, worst -0.02225831151008606
Time: prepare 0.0952    bound 0.3149    transfer 0.0062    finalize 0.1789    func 0.6255    
Accumulated time: func 9.6212    prepare 1.6876    bound 6.1995    transfer 0.2353    finalize 0.5464    
all_split False
======================Cut inference begins======================
max lb tensor(0.01356274) min lb tensor(-0.02127939)
Number of Verified Splits: 2998 of 4532
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 34
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.746570348739624 
BICCOS Cumulative time: 9.935922384262085
Preprocessing time: 0.14365553855895996 Inference time: 0.5776464939117432 Add cuts time: 0.024424314498901367 Cut analysis time: 0.0008440017700195312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02128 (29), -0.02062 (29), -0.02030 (29), -0.01995 (29), -0.01960 (29), -0.01953 (29), -0.01941 (29), -0.01929 (29), -0.01900 (29), -0.01899 (29), -0.01896 (29), -0.01890 (29), -0.01874 (29), -0.01845 (29), -0.01843 (29), -0.01833 (29), -0.01825 (29), -0.01820 (29), -0.01807 (29), -0.01803 (29), 
Length of domains: 1534
Time: pickout 0.1204    decision 0.1322    set_bounds 0.2007    solve 0.6265    add 0.0056    
Accumulated time: pickout 0.7277    decision 2.8661    set_bounds 4.3609    solve 9.6308    add 0.6053    
Current (lb-rhs): -0.02127939462661743
37963 domains visited
Cumulative time: 28.757667779922485

BaB round 21
batch: 1534
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1773] [/input-8, 1773] [/input-8, 1773] [/input-8, 1773] [/input-8, 1773] [/input-8, 1773] [/input-8, 1773] [/input-8, 1773] [/input-8, 1773] [/input-8, 1773] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.021297454833984375
10 lb beta sum: 0.5862823128700256, worst -0.037905216217041016
Time: prepare 0.0597    bound 0.2334    transfer 0.0041    finalize 0.0147    func 0.3319    
Accumulated time: func 9.9531    prepare 1.7475    bound 6.4329    transfer 0.2394    finalize 0.5611    
all_split False
======================Cut inference begins======================
max lb tensor(0.23623449) min lb tensor(-0.01942432)
Number of Verified Splits: 1960 of 3068
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 35
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.4876248836517334 
BICCOS Cumulative time: 10.423547267913818
Preprocessing time: 0.09547734260559082 Inference time: 0.37599706649780273 Add cuts time: 0.015249252319335938 Cut analysis time: 0.0009012222290039062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01942 (30), -0.01877 (30), -0.01844 (30), -0.01809 (30), -0.01775 (30), -0.01768 (30), -0.01748 (30), -0.01744 (30), -0.01716 (30), -0.01714 (30), -0.01709 (30), -0.01706 (30), -0.01683 (30), -0.01661 (30), -0.01649 (30), -0.01649 (30), -0.01641 (30), -0.01634 (30), -0.01616 (30), -0.01615 (30), 
Length of domains: 1108
Time: pickout 0.0280    decision 0.0925    set_bounds 0.1361    solve 0.4674    add 0.0039    
Accumulated time: pickout 0.7557    decision 2.9586    set_bounds 4.4970    solve 10.0982    add 0.6091    
Current (lb-rhs): -0.01942431926727295
39071 domains visited
Cumulative time: 29.99447989463806

BaB round 22
batch: 1108
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 626] [/input-8, 626] [/input-8, 626] [/input-8, 626] [/input-8, 626] [/input-8, 626] [/input-8, 626] [/input-8, 626] [/input-8, 626] [/input-8, 626] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018257856369018555
10 lb beta sum: 0.4279020130634308, worst -0.016357481479644775
Time: prepare 0.0430    bound 0.1851    transfer 0.0035    finalize 0.0099    func 0.2570    
Accumulated time: func 10.2101    prepare 1.7909    bound 6.6179    transfer 0.2429    finalize 0.5710    
all_split False
======================Cut inference begins======================
max lb tensor(0.01105404) min lb tensor(-0.01634416)
Number of Verified Splits: 1488 of 2216
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 31
#cuts >= 20: 0
BICCOS time: 0.3759176731109619 
BICCOS Cumulative time: 10.79946494102478
Preprocessing time: 0.07366752624511719 Inference time: 0.29004764556884766 Add cuts time: 0.011528491973876953 Cut analysis time: 0.0006740093231201172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01634 (31), -0.01569 (31), -0.01564 (31), -0.01532 (31), -0.01499 (31), -0.01464 (31), -0.01464 (31), -0.01460 (31), -0.01440 (31), -0.01408 (31), -0.01397 (31), -0.01394 (31), -0.01393 (31), -0.01389 (31), -0.01375 (31), -0.01370 (31), -0.01350 (31), -0.01338 (31), -0.01337 (31), -0.01329 (31), 
Length of domains: 728
Time: pickout 0.0207    decision 0.0752    set_bounds 0.0971    solve 0.2575    add 0.0043    
Accumulated time: pickout 0.7764    decision 3.0338    set_bounds 4.5942    solve 10.3557    add 0.6134    
Current (lb-rhs): -0.016344159841537476
39799 domains visited
Cumulative time: 30.838945150375366

BaB round 23
batch: 728
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 618] [/input-8, 618] [/input-8, 618] [/input-8, 618] [/input-8, 618] [/input-8, 618] [/input-8, 618] [/input-8, 618] [/input-8, 618] [/input-8, 618] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014645814895629883
10 lb beta sum: 0.5205073952674866, worst -0.012765228748321533
Time: prepare 0.0288    bound 0.1549    transfer 0.0021    finalize 0.0067    func 0.2020    
Accumulated time: func 10.4121    prepare 1.8199    bound 6.7728    transfer 0.2450    finalize 0.5778    
all_split False
======================Cut inference begins======================
max lb tensor(0.23862547) min lb tensor(-0.01275527)
Number of Verified Splits: 988 of 1456
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 34
#cuts >= 20: 0
BICCOS time: 0.36850976943969727 
BICCOS Cumulative time: 11.167974710464478
Preprocessing time: 0.046181678771972656 Inference time: 0.3144698143005371 Add cuts time: 0.007152557373046875 Cut analysis time: 0.000705718994140625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01276 (32), -0.01210 (32), -0.01201 (32), -0.01185 (32), -0.01137 (32), -0.01120 (32), -0.01108 (32), -0.01098 (32), -0.01081 (32), -0.01066 (32), -0.01063 (32), -0.01046 (32), -0.01044 (32), -0.01036 (32), -0.01018 (32), -0.01017 (32), -0.01016 (32), -0.01008 (32), -0.01007 (32), -0.00999 (32), 
Length of domains: 468
Time: pickout 0.0168    decision 0.0504    set_bounds 0.0628    solve 0.2023    add 0.0493    
Accumulated time: pickout 0.7933    decision 3.0841    set_bounds 4.6570    solve 10.5581    add 0.6627    
Current (lb-rhs): -0.012755274772644043
40267 domains visited
Cumulative time: 31.597500801086426

BaB round 24
batch: 468
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1713] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.010898113250732422
10 lb beta sum: 0.5099222660064697, worst -0.009016096591949463
Time: prepare 0.0183    bound 0.1406    transfer 0.0016    finalize 0.0039    func 0.1712    
Accumulated time: func 10.5834    prepare 1.8385    bound 6.9134    transfer 0.2465    finalize 0.5817    
all_split False
======================Cut inference begins======================
max lb tensor(0.00492214) min lb tensor(-0.00900853)
Number of Verified Splits: 655 of 936
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 34
#cuts >= 20: 0
BICCOS time: 0.16423654556274414 
BICCOS Cumulative time: 11.332211256027222
Preprocessing time: 0.028426170349121094 Inference time: 0.13055205345153809 Add cuts time: 0.004645586013793945 Cut analysis time: 0.0006127357482910156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00901 (33), -0.00843 (33), -0.00836 (33), -0.00831 (33), -0.00778 (33), -0.00776 (33), -0.00767 (33), -0.00764 (33), -0.00725 (33), -0.00724 (33), -0.00711 (33), -0.00707 (33), -0.00697 (33), -0.00692 (33), -0.00687 (33), -0.00682 (33), -0.00672 (33), -0.00669 (33), -0.00667 (33), -0.00664 (33), 
Length of domains: 281
Time: pickout 0.0129    decision 0.0369    set_bounds 0.0407    solve 0.1714    add 0.0038    
Accumulated time: pickout 0.8061    decision 3.1210    set_bounds 4.6976    solve 10.7295    add 0.6664    
Current (lb-rhs): -0.009008526802062988
40548 domains visited
Cumulative time: 32.03115677833557

BaB round 25
batch: 281
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1651] [/input-8, 1651] [/input-8, 1651] [/input-8, 1651] [/input-8, 1651] [/input-8, 1651] [/input-8, 1651] [/input-8, 1651] [/input-8, 1651] [/input-8, 1626] 
cut re-enabled after branching node selection
0 lb beta sum: 1.0894358158111572, worst -0.006444811820983887
10 lb beta sum: 1.0894358158111572, worst -0.006385922431945801
Time: prepare 0.0242    bound 0.1418    transfer 0.0033    finalize 0.0027    func 0.1756    
Accumulated time: func 10.7590    prepare 1.8629    bound 7.0552    transfer 0.2499    finalize 0.5843    
all_split False
======================Cut inference begins======================
max lb tensor(0.00578916) min lb tensor(-0.00637329)
Number of Verified Splits: 385 of 562
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 34
#cuts >= 20: 0
BICCOS time: 0.09922599792480469 
BICCOS Cumulative time: 11.431437253952026
Preprocessing time: 0.016206026077270508 Inference time: 0.07970571517944336 Add cuts time: 0.002718210220336914 Cut analysis time: 0.0005960464477539062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00637 (34), -0.00572 (34), -0.00572 (34), -0.00507 (34), -0.00502 (34), -0.00459 (34), -0.00443 (34), -0.00437 (34), -0.00433 (34), -0.00430 (34), -0.00426 (34), -0.00408 (34), -0.00395 (34), -0.00388 (34), -0.00385 (34), -0.00383 (34), -0.00378 (34), -0.00377 (34), -0.00363 (34), -0.00361 (34), 
Length of domains: 177
Time: pickout 0.0072    decision 0.0264    set_bounds 0.0243    solve 0.1758    add 0.0015    
Accumulated time: pickout 0.8133    decision 3.1474    set_bounds 4.7219    solve 10.9053    add 0.6680    
Current (lb-rhs): -0.006373286247253418
40725 domains visited
Cumulative time: 32.36778259277344

BaB round 26
batch: 177
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1713] [/input-8, 1713] [/input-8, 1626] [/input-8, 1626] [/input-8, 1713] [/input-8, 1626] [/input-8, 1651] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9617252945899963, worst -0.0030115842819213867
10 lb beta sum: 0.9617252945899963, worst -0.002953171730041504
Time: prepare 0.0152    bound 0.1398    transfer 0.0020    finalize 0.0017    func 0.1611    
Accumulated time: func 10.9200    prepare 1.8784    bound 7.1951    transfer 0.2518    finalize 0.5860    
all_split False
======================Cut inference begins======================
max lb tensor(0.00443435) min lb tensor(-0.00294054)
Number of Verified Splits: 328 of 354
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 37
#cuts >= 20: 0
BICCOS time: 0.08323788642883301 
BICCOS Cumulative time: 11.51467514038086
Preprocessing time: 0.010426998138427734 Inference time: 0.06978440284729004 Add cuts time: 0.002414226531982422 Cut analysis time: 0.0006122589111328125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00294 (35), -0.00230 (35), -0.00227 (35), -0.00176 (35), -0.00163 (35), -0.00118 (35), -0.00115 (35), -0.00110 (35), -0.00099 (35), -0.00091 (35), -0.00089 (35), -0.00084 (35), -0.00081 (35), -0.00066 (35), -0.00061 (35), -0.00052 (35), -0.00051 (35), -0.00044 (35), -0.00043 (35), -0.00041 (35), 
Length of domains: 26
Time: pickout 0.0046    decision 0.0207    set_bounds 0.0149    solve 0.1612    add 0.0010    
Accumulated time: pickout 0.8179    decision 3.1681    set_bounds 4.7368    solve 11.0664    add 0.6690    
Current (lb-rhs): -0.002940535545349121
40751 domains visited
Cumulative time: 32.65509510040283

BaB round 27
batch: 26
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 635] [/input-8, 635] [/input-8, 635] [/input-8, 635] [/input-8, 635] [/input-8, 635] [/input-8, 635] [/input-8, 635] [/input-8, 635] [/input-8, 635] 
split level 1: [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1064] [/input-8, 1651] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] 
split level 2: [/input-8, 1064] [/input-8, 1064] [/input-8, 1064] [/input-8, 1064] [/input-8, 1064] [/input-8, 1969] [/input-8, 1064] [/input-8, 1064] [/input-8, 1064] [/input-8, 1064] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.004120826721191406

all verified at 0th iter
Time: prepare 0.0047    bound 0.0061    transfer 0.0005    finalize 0.0011    func 0.0140    
Accumulated time: func 10.9340    prepare 1.8833    bound 7.2011    transfer 0.2524    finalize 0.5872    
all_split False
======================Cut inference begins======================
max lb tensor(0.01409984) min lb tensor(0.00412083)
Number of Verified Splits: 208 of 208
No cut inferred: All or none verified.
Total number of valid cuts: 37.
#cuts 1-3: 37
#cuts >= 20: 0
BICCOS time: 0.006494045257568359 
BICCOS Cumulative time: 11.521169185638428
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0018    decision 0.0140    set_bounds 0.0118    solve 0.0140    add 0.0001    
Accumulated time: pickout 0.8198    decision 3.1821    set_bounds 4.7486    solve 11.0805    add 0.6691    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
40751 domains visited
Cumulative time: 32.704177379608154


Properties batch 6, size 1
Remaining timeout: 145.51602244377136
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 145.515939950943
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 145.5159137248993
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 54.4841 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 67, vnnlib ID: 67 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.84048271, -25.05973816, -15.11311626, -18.68352318, -15.81582832,
         -18.42252541, -17.63798523, -19.13154984, -21.87983513, -23.72045708]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1165]; unstable size 1165; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 251, 1, 1165] with unstable size 250 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 1165] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1165] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [250]; unstable size 250; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 250] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 250] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.62490296,  8.33701706,  2.59462070, -0.24409157,  2.26730227,
          1.36074960,  2.49958372,  5.18873596,  7.07310295]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.84048271, -25.05973816, -15.11311626, -18.68352318, -15.81582832,
         -18.42252541, -17.63798523, -19.13154984, -21.87983513, -23.72045708]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.57it/s]100%|██████████| 1/1 [00:00<00:00,  8.56it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.16810417, -25.43053436, -15.60754871, -19.06594658, -15.93624115,
          -18.74472427, -17.98241234, -19.17751884, -22.21742058, -24.08210182]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.32869244]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1196 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 33.29866027832031
alpha/beta optimization time: 1.2435007095336914
initial alpha-crown bounds: tensor([[ 3.68976188,  8.44124222,  2.63029671, -0.18903556,  2.30742621,
          1.40437722,  2.56473923,  5.28525162,  7.16460085]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.189035564661026
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.59556245803833
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.59552145004272
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.59549713134766
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.59547662734985
Verifying property 3 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.18903556]], device='cuda:0') need to verify.
Model prediction is: tensor([-19.84048271, -25.05973816, -15.11311626, -18.68352318, -15.81582832,
        -18.42252541, -17.63798523, -19.13154984, -21.87983513, -23.72045708],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.18903556]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1165
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 246
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 1435
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001010894775390625
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18903422355651855
10 lb beta sum: 0.0, worst -0.18903353810310364
Time: prepare 0.0002    bound 0.0901    transfer 0.0001    finalize 0.0001    func 0.0906    
Accumulated time: func 0.0906    prepare 0.0002    bound 0.0901    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 59] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 10] 
split level 5: [/input-12, 90] 
split level 6: [/input-12, 56] 
split level 7: [/input-12, 68] 
split level 8: [/input-12, 83] 
split level 9: [/input-12, 55] 
split level 10: [/input-8, 165] 
split level 11: [/input-12, 86] 
split level 12: [/input-8, 907] 
split level 13: [/input-8, 2010] 
split level 14: [/input-8, 877] 
split level 15: [/input-8, 182] 
split level 16: [/input-8, 1186] 
split level 17: [/input-12, 35] 
split level 18: [/input-8, 2017] 
split level 19: [/input-8, 173] 
split level 20: [/input-8, 2018] 
split level 21: [/input-8, 1178] 
split level 22: [/input-8, 1363] 
split level 23: [/input-8, 1193] 
split level 24: [/input-8, 2003] 
split level 25: [/input-8, 1354] 
split level 26: [/input-8, 1185] 
split level 27: [/input-8, 2026] 
split level 28: [/input-8, 140] 
split level 29: [/input-8, 2000] 
split level 30: [/input-8, 2002] 
split level 31: [/input-8, 1993] 
split level 32: [/input-8, 817] 
split level 33: [/input-8, 801] 
split level 34: [/input-8, 2014] 
split level 35: [/input-8, 1203] 
split level 36: [/input-8, 809] 
split level 37: [/input-8, 1356] 
split level 38: [/input-8, 1992] 
split level 39: [/input-8, 2027] 
split level 40: [/input-8, 175] 
split level 41: [/input-8, 1078] 
split level 42: [/input-8, 2033] 
split level 43: [/input-8, 149] 
split level 44: [/input-8, 810] 
split level 45: [/input, 3147] 
split level 46: [/input-8, 1372] 
split level 47: [/input, 955] 
split level 48: [/input-8, 1382] 
split level 49: [/input, 939] 
split level 50: [/input-8, 39] 
split level 51: [/input, 3131] 
split level 52: [/input-8, 1201] 
split level 53: [/input-8, 1204] 
split level 54: [/input-8, 2008] 
split level 55: [/input, 3548] 
split level 56: [/input, 891] 
split level 57: [/input, 3026] 
split level 58: [/input-8, 150] 
split level 59: [/input-8, 30] 
split level 60: [/input-8, 793] 
split level 61: [/input-8, 1172] 
split level 62: [/input, 947] 
split level 63: [/input, 963] 
split level 64: [/input, 923] 
split level 65: [/input-8, 47] 
split level 66: [/input-8, 591] 
split level 67: [/input-8, 1383] 
split level 68: [/input, 793] 
split level 69: [/input, 3515] 
split level 70: [/input-8, 19] 
split level 71: [/input, 901] 
split level 72: [/input-8, 1081] 
split level 73: [/input, 3522] 
split level 74: [/input, 3507] 
split level 75: [/input, 3097] 
split level 76: [/input, 1592] 
split level 77: [/input-8, 811] 
split level 78: [/input-8, 1177] 
split level 79: [/input, 917] 
split level 80: [/input, 3221] 
split level 81: [/input-8, 1567] 
split level 82: [/input-8, 167] 
split level 83: [/input, 3538] 
split level 84: [/input, 468] 
split level 85: [/input, 2584] 
split level 86: [/input, 907] 
split level 87: [/input, 3141] 
split level 88: [/input, 481] 
split level 89: [/input, 809] 
split level 90: [/input, 922] 
split level 91: [/input-8, 1357] 
split level 92: [/input, 3190] 
split level 93: [/input, 3491] 
split level 94: [/input-8, 2023] 
split level 95: [/input, 938] 
split level 96: [/input, 3523] 
split level 97: [/input, 3206] 
split level 98: [/input, 3539] 
split level 99: [/input, 3238] 
split level 100: [/input-8, 1381] 
split level 101: [/input, 3158] 
split level 102: [/input, 1340] 
split level 103: [/input, 3499] 
split level 104: [/input, 906] 
split level 105: [/input-8, 802] 
split level 106: [/input, 1357] 
split level 107: [/input, 1358] 
split level 108: [/input, 2637] 
split level 109: [/input, 937] 
split level 110: [/input-8, 623] 
split level 111: [/input, 2850] 
split level 112: [/input-8, 24] 
split level 113: [/input-8, 583] 
split level 114: [/input, 948] 
split level 115: [/input, 3386] 
split level 116: [/input, 846] 
split level 117: [/input, 54] 
split level 118: [/input, 3252] 
split level 119: [/input, 670] 
split level 120: [/input, 142] 
split level 121: [/input, 465] 
split level 122: [/input, 2914] 
split level 123: [/input, 2638] 
split level 124: [/input-8, 1347] 
split level 125: [/input, 158] 
split level 126: [/input, 3506] 
split level 127: [/input, 2913] 
split level 128: [/input, 885] 
split level 129: [/input, 3174] 
split level 130: [/input, 2853] 
split level 131: [/input, 1341] 
split level 132: [/input, 97] 
split level 133: [/input, 3483] 
split level 134: [/input, 2583] 
split level 135: [/input, 2427] 
split level 136: [/input, 2846] 
split level 137: [/input, 3157] 
split level 138: [/input, 65] 
split level 139: [/input, 979] 
split level 140: [/input, 2654] 
split level 141: [/input, 876] 
split level 142: [/input, 869] 
split level 143: [/input, 3459] 
split level 144: [/input, 3058] 
split level 145: [/input, 2851] 
split level 146: [/input, 2087] 
split level 147: [/input, 964] 
split level 148: [/input, 2670] 
split level 149: [/input, 2837] 
split level 150: [/input, 334] 
split level 151: [/input, 78] 
split level 152: [/input, 33] 
split level 153: [/input, 21] 
split level 154: [/input, 3948] 
split level 155: [/input, 3259] 
split level 156: [/input, 791] 
split level 157: [/input-8, 1197] 
split level 158: [/input, 3027] 
split level 159: [/input, 2577] 
split level 160: [/input, 46] 
split level 161: [/input-8, 324] 
split level 162: [/input, 341] 
split level 163: [/input, 2881] 
split level 164: [/input-8, 1268] 
split level 165: [/input, 2882] 
split level 166: [/input, 38] 
split level 167: [/input, 34] 
split level 168: [/input, 53] 
split level 169: [/input, 62] 
split level 170: [/input, 2606] 
split level 171: [/input, 980] 
split level 172: [/input, 836] 
split level 173: [/input, 20] 
split level 174: [/input, 3124] 
split level 175: [/input, 2836] 
split level 176: [/input, 113] 
split level 177: [/input, 3269] 
split level 178: [/input, 2897] 
split level 179: [/input, 87] 
split level 180: [/input, 3140] 
split level 181: [/input, 342] 
split level 182: [/input, 3243] 
split level 183: [/input, 114] 
split level 184: [/input, 36] 
split level 185: [/input, 2578] 
split level 186: [/input, 2661] 
split level 187: [/input, 2898] 
split level 188: [/input, 2110] 
split level 189: [/input, 1486] 
split level 190: [/input, 3475] 
split level 191: [/input, 17] 
split level 192: [/input, 3125] 
split level 193: [/input, 2845] 
split level 194: [/input, 30] 
split level 195: [/input, 1470] 
split level 196: [/input, 951] 
split level 197: [/input, 29] 
split level 198: [/input, 2134] 
split level 199: [/input, 2835] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1889439821243286
10 lb beta sum: 0.0, worst -0.18894490599632263
Time: prepare 0.0119    bound 0.1015    transfer 0.0021    finalize 0.0027    func 0.1208    
Accumulated time: func 0.2114    prepare 0.0223    bound 0.1916    transfer 0.0022    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.23750907) min lb tensor(-0.18894240)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.01079702377319336 
BICCOS Cumulative time: 0.01079702377319336
Preprocessing time: 0.009834766387939453 Inference time: 0.00026726722717285156 Add cuts time: 0.000102996826171875 Cut analysis time: 0.0005919933319091797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18312 (1), -0.18308 (1), -0.18300 (1), -0.18289 (1), -0.18271 (1), -0.18260 (1), -0.18215 (1), -0.18210 (1), -0.18173 (1), -0.18166 (1), -0.18164 (1), -0.18145 (1), -0.18105 (1), -0.18101 (1), -0.18095 (1), -0.18090 (1), -0.18089 (1), -0.18062 (1), -0.18051 (1), -0.18028 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5321    set_bounds 0.0088    solve 0.1209    add 0.0903    
Accumulated time: pickout 0.0003    decision 0.5321    set_bounds 0.0088    solve 0.1209    add 0.0903    
Current (lb-rhs): -0.1831238567829132
50 domains visited
Cumulative time: 0.858536958694458

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 4] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 2] [/input-12, 2] [/input-12, 10] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 10] [/input-12, 10] [/input-12, 2] [/input-12, 2] 
split level 2: [/input-12, 10] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 10] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 3: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 90] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1610656976699829
10 lb beta sum: 1.034751057624817, worst -0.11165699362754822
Time: prepare 0.0072    bound 0.1207    transfer 0.0007    finalize 0.0021    func 0.1333    
Accumulated time: func 0.3447    prepare 0.0298    bound 0.3123    transfer 0.0029    finalize 0.0049    
all_split False
======================Cut inference begins======================
max lb tensor(0.39298052) min lb tensor(-0.11151600)
Number of Verified Splits: 139 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.019652843475341797 
BICCOS Cumulative time: 0.030449867248535156
Preprocessing time: 0.011586189270019531 Inference time: 0.005634307861328125 Add cuts time: 0.0020940303802490234 Cut analysis time: 0.0003383159637451172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05646 (2), -0.05448 (2), -0.05428 (2), -0.05422 (2), -0.05421 (2), -0.05405 (2), -0.05404 (2), -0.05103 (2), -0.05026 (2), -0.04870 (2), -0.04842 (2), -0.04812 (2), -0.04794 (2), -0.04779 (2), -0.04761 (2), -0.04740 (2), -0.04719 (2), -0.04648 (2), -0.04641 (2), -0.04612 (2), 
Length of domains: 50
Time: pickout 0.0013    decision 0.0202    set_bounds 0.0134    solve 0.1334    add 0.0853    
Accumulated time: pickout 0.0016    decision 0.5523    set_bounds 0.0221    solve 0.2542    add 0.1755    
Current (lb-rhs): -0.05646070837974548
100 domains visited
Cumulative time: 1.1319153308868408

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 10] [/input-12, 90] [/input-12, 90] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 10] [/input-12, 10] [/input-12, 90] 
split level 2: [/input-12, 90] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 90] [/input-12, 90] [/input-12, 10] 
split level 3: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 90] [/input-12, 90] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12349522113800049

all verified at 2th iter
Time: prepare 0.0071    bound 0.0180    transfer 0.0007    finalize 0.0020    func 0.0304    
Accumulated time: func 0.3751    prepare 0.0371    bound 0.3303    transfer 0.0036    finalize 0.0069    
all_split False
======================Cut inference begins======================
max lb tensor(0.35967657) min lb tensor(0.01185951)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 56
#cuts >= 20: 0
BICCOS time: 0.03818249702453613 
BICCOS Cumulative time: 0.06863236427307129
Preprocessing time: 0.011409282684326172 Inference time: 0.01560068130493164 Add cuts time: 0.010027170181274414 Cut analysis time: 0.0011453628540039062
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0191    set_bounds 0.0157    solve 0.0305    add 0.0220    
Accumulated time: pickout 0.0026    decision 0.5714    set_bounds 0.0379    solve 0.2847    add 0.1975    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58]), tensor([-1., -1.]), tensor([0, 0]), tensor([4.86436669e-10, 7.82691985e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58]), tensor([-1.,  1.]), tensor([0, 0]), tensor([4.86436669e-10, 2.10171536e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58, 59]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([4.86436669e-10, 7.87719339e-02, 1.19696334e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58, 59]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([4.86436669e-10, 7.87719339e-02, 6.61117584e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58]), tensor([1., 1.]), tensor([0, 0]), tensor([4.86436669e-10, 2.22896948e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  5
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08071884512901306

all verified at 1th iter
Time: prepare 0.0004    bound 0.0199    transfer 0.0001    finalize 0.0002    func 0.0206    
Accumulated time: func 0.3957    prepare 0.0375    bound 0.3502    transfer 0.0037    finalize 0.0070    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 197.16982173919678
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.16974425315857
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.16972041130066
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.16969966888428
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.16912078857422
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.8310 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 68, vnnlib ID: 68 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.55639648, -33.09785080, -28.00553131, -27.40239906, -25.07222748,
         -27.10820198, -28.42906952, -22.25778961, -33.87366104, -32.03707886]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [701]; unstable size 701; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 701] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 701] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 701] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 288] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.60428238, 8.63137245, 4.23884344, 3.83983803, 1.92058921, 3.60424948,
         4.34731674, 9.57411480, 7.57268572]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0772 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 69, vnnlib ID: 69 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.15664101, -31.39657593, -29.82341003, -30.75438118, -29.41454315,
         -31.94305992, -31.96259689, -30.53670311, -26.03734589, -29.66164589]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 659] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 659] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 197] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.00890589, 3.93031955, 2.37446594, 3.40709329, 1.97647166, 4.41568375,
         4.39016819, 2.74542427, 2.46872425]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0704 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 70, vnnlib ID: 70 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.57001877, -21.33278465, -16.48242188, -17.88305855, -15.84688187,
         -18.45724487, -14.43099213, -19.91347122, -21.41075134, -23.09995651]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [825]; unstable size 825; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 238, 1, 825] with unstable size 237 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 825] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 825] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [237]; unstable size 237; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 237] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 237] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.65802574, 4.90856361, 1.05104423, 2.50940728, 0.27425575, 2.85676765,
         3.60879087, 4.98581076, 6.49914980]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0686 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 71, vnnlib ID: 71 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.83767509, -29.44007301, -28.61532784, -29.34156609, -28.70956039,
         -30.31670189, -29.03779984, -30.47285080, -29.20039749, -29.62815285]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [642]; unstable size 642; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 642] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 642] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 642] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 206] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.54947019, 1.96131396, 2.40498400, 1.83005619, 3.13335943, 2.10148072,
         3.19824457, 2.43338394, 2.73391485]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0634 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 72, vnnlib ID: 72 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.50596523, -18.77488327, -14.69626808, -14.34110641, -15.01922321,
         -14.73676872, -15.22504807, -16.18593597, -16.79512215, -17.35581017]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [654]; unstable size 654; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 216, 1, 654] with unstable size 215 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 654] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 654] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [215]; unstable size 215; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 215] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.30025935,  2.79075503, -0.64696014, -0.28283554, -0.00568263,
          0.09187210,  0.48905241,  0.94048762,  1.32147741]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.50596523, -18.77488327, -14.69626808, -14.34110641, -15.01922321,
         -14.73676872, -15.22504807, -16.18593597, -16.79512215, -17.35581017]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.16070747, -18.60272026, -14.32037830, -14.41568756, -14.80318546,
          -14.87370014, -15.22083282, -16.08508301, -16.55334473, -17.22670746],
         [-15.16070747, -18.60272026, -14.32037830, -14.41568756, -14.80318546,
          -14.87370014, -15.22083282, -16.08508301, -16.55334473, -17.22670746]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.74501991, -0.09530926,  0.38749790,  0.45801258]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0712 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 73, vnnlib ID: 73 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.66821480, -25.16157913, -20.16737556, -19.99334526, -19.84637260,
         -20.53302574, -17.62543488, -22.75561523, -24.62155914, -24.01429939]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [562]; unstable size 562; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 329, 1, 562] with unstable size 328 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 562] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 562] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [328]; unstable size 328; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 328] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 328] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.44212151, 5.09512997, 1.39435530, 1.28885651, 0.93852150, 1.63264441,
         3.03026342, 4.88076496, 3.91813183]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0346 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 74, vnnlib ID: 74 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.91881180, -32.59530640, -30.29003906, -30.00774956, -29.24390221,
         -30.22264290, -30.82009125, -25.47676849, -32.91277695, -30.89614296]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [668]; unstable size 668; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 227, 1, 668] with unstable size 226 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 668] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 668] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [226]; unstable size 226; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 226] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 226] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.83449841, 5.22893524, 3.33997393, 3.20848751, 2.84958267, 3.43617392,
         3.74271965, 5.64434624, 3.49464035]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0634 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 75, vnnlib ID: 75 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-31.62759590, -34.41730499, -33.84094238, -35.56791306, -34.24832153,
         -36.28593826, -34.87154770, -35.38038635, -33.02691269, -33.01538467]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [642]; unstable size 642; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 642] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 642] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 642] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 208] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.30125928, 1.11236954, 2.63641644, 1.30713081, 3.22894764, 1.90847707,
         2.05579567, 0.40490261, 0.05632448]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0627 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 76, vnnlib ID: 76 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.32204628, -22.13885498, -16.85369110, -16.62333870, -17.79144096,
         -16.11716270, -17.99398041, -18.48896027, -23.38971329, -20.77302933]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [579]; unstable size 579; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 232, 1, 579] with unstable size 231 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 579] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 579] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [231]; unstable size 231; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 231] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 231] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.71136618,  4.01701736, -0.51415730,  0.11190546,  0.39652181,
          0.75778335,  1.25336599,  4.93491983,  2.87650156]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.32204628, -22.13885498, -16.85369110, -16.62333870, -17.79144096,
         -16.11716270, -17.99398041, -18.48896027, -23.38971329, -20.77302933]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.78it/s]100%|██████████| 1/1 [00:00<00:00,  8.77it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.90902328, -21.90532684, -16.25102234, -16.58778763, -17.33627510,
          -16.20533562, -17.73783112, -18.40386963, -22.94217110, -20.61736488]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04568672]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1166 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 17.178882598876953
alpha/beta optimization time: 1.2358181476593018
initial alpha-crown bounds: tensor([[ 2.79542446,  4.10366631, -0.45930886,  0.13562959,  0.45598078,
          0.80009288,  1.31134248,  5.06682491,  2.96922874]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.4593088626861572
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5736002922058
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.573561668396
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.57353520393372
Verifying property 2 with 1 instances.
##### Instance 76 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.45930886]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.32204628, -22.13885498, -16.85369110, -16.62333870, -17.79144096,
        -16.11716270, -17.99398041, -18.48896027, -23.38971329, -20.77302933],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.45930886]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 579
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 226
Node /15 input 0: size torch.Size([100]) unstable 20
-----------------
# of unstable neurons: 825
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00019097328186035156
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4593076705932617
10 lb beta sum: 0.0, worst -0.45931482315063477
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0544    transfer 0.0001    finalize 0.0001    func 0.0549    
Accumulated time: func 0.0549    prepare 0.0002    bound 0.0544    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] 
split level 1: [/input-12, 24] 
split level 2: [/input-12, 72] 
split level 3: [/input-12, 59] 
split level 4: [/input-12, 7] 
split level 5: [/input-12, 17] 
split level 6: [/input-12, 4] 
split level 7: [/input-12, 64] 
split level 8: [/input-8, 1699] 
split level 9: [/input-8, 1949] 
split level 10: [/input-12, 71] 
split level 11: [/input-8, 226] 
split level 12: [/input-8, 1684] 
split level 13: [/input-8, 217] 
split level 14: [/input-8, 1946] 
split level 15: [/input-8, 437] 
split level 16: [/input-8, 1579] 
split level 17: [/input-8, 219] 
split level 18: [/input-8, 1637] 
split level 19: [/input-8, 254] 
split level 20: [/input-8, 427] 
split level 21: [/input-8, 428] 
split level 22: [/input-8, 253] 
split level 23: [/input-8, 209] 
split level 24: [/input-8, 212] 
split level 25: [/input-8, 434] 
split level 26: [/input-8, 410] 
split level 27: [/input-8, 733] 
split level 28: [/input-8, 47] 
split level 29: [/input-8, 249] 
split level 30: [/input-8, 250] 
split level 31: [/input-8, 55] 
split level 32: [/input-8, 1711] 
split level 33: [/input, 3543] 
split level 34: [/input-8, 423] 
split level 35: [/input-8, 435] 
split level 36: [/input-8, 1107] 
split level 37: [/input-8, 415] 
split level 38: [/input-8, 1686] 
split level 39: [/input-8, 1583] 
split level 40: [/input-8, 438] 
split level 41: [/input-8, 366] 
split level 42: [/input-8, 1316] 
split level 43: [/input-8, 227] 
split level 44: [/input, 985] 
split level 45: [/input, 3285] 
split level 46: [/input-8, 237] 
split level 47: [/input-8, 224] 
split level 48: [/input-8, 402] 
split level 49: [/input-8, 218] 
split level 50: [/input-8, 213] 
split level 51: [/input-8, 216] 
split level 52: [/input-8, 929] 
split level 53: [/input-8, 1338] 
split level 54: [/input-8, 281] 
split level 55: [/input-8, 229] 
split level 56: [/input, 1691] 
split level 57: [/input-8, 204] 
split level 58: [/input-8, 222] 
split level 59: [/input, 2789] 
split level 60: [/input, 473] 
split level 61: [/input-8, 198] 
split level 62: [/input-8, 1938] 
split level 63: [/input-8, 407] 
split level 64: [/input-8, 228] 
split level 65: [/input, 3130] 
split level 66: [/input-8, 195] 
split level 67: [/input, 1001] 
split level 68: [/input-8, 412] 
split level 69: [/input-8, 44] 
split level 70: [/input-8, 1389] 
split level 71: [/input-8, 248] 
split level 72: [/input, 2794] 
split level 73: [/input-8, 232] 
split level 74: [/input, 3305] 
split level 75: [/input-8, 578] 
split level 76: [/input, 2865] 
split level 77: [/input, 3233] 
split level 78: [/input-8, 1669] 
split level 79: [/input, 2793] 
split level 80: [/input, 2755] 
split level 81: [/input-8, 923] 
split level 82: [/input-8, 371] 
split level 83: [/input-8, 61] 
split level 84: [/input, 2713] 
split level 85: [/input, 2714] 
split level 86: [/input-8, 252] 
split level 87: [/input-8, 146] 
split level 88: [/input-8, 262] 
split level 89: [/input, 1996] 
split level 90: [/input-8, 240] 
split level 91: [/input-8, 255] 
split level 92: [/input, 2762] 
split level 93: [/input-8, 295] 
split level 94: [/input-8, 251] 
split level 95: [/input, 3302] 
split level 96: [/input-8, 401] 
split level 97: [/input, 2792] 
split level 98: [/input, 3198] 
split level 99: [/input-8, 1743] 
split level 100: [/input, 984] 
split level 101: [/input, 1948] 
split level 102: [/input-8, 1759] 
split level 103: [/input-8, 1517] 
split level 104: [/input, 987] 
split level 105: [/input-8, 1337] 
split level 106: [/input, 2759] 
split level 107: [/input, 3544] 
split level 108: [/input, 2739] 
split level 109: [/input, 167] 
split level 110: [/input, 2805] 
split level 111: [/input, 3268] 
split level 112: [/input, 2265] 
split level 113: [/input, 2722] 
split level 114: [/input, 471] 
split level 115: [/input, 2760] 
split level 116: [/input, 1507] 
split level 117: [/input, 2738] 
split level 118: [/input-8, 193] 
split level 119: [/input, 2249] 
split level 120: [/input-8, 239] 
split level 121: [/input, 3269] 
split level 122: [/input, 1964] 
split level 123: [/input, 3218] 
split level 124: [/input, 3235] 
split level 125: [/input, 2867] 
split level 126: [/input, 1411] 
split level 127: [/input-8, 207] 
split level 128: [/input, 2779] 
split level 129: [/input-8, 0] 
split level 130: [/input, 3306] 
split level 131: [/input, 2774] 
split level 132: [/input, 2806] 
split level 133: [/input, 3307] 
split level 134: [/input, 1675] 
split level 135: [/input, 2741] 
split level 136: [/input, 1978] 
split level 137: [/input, 824] 
split level 138: [/input, 974] 
split level 139: [/input, 147] 
split level 140: [/input-8, 1762] 
split level 141: [/input-8, 142] 
split level 142: [/input-8, 981] 
split level 143: [/input, 3989] 
split level 144: [/input, 2537] 
split level 145: [/input-8, 1272] 
split level 146: [/input, 2233] 
split level 147: [/input, 2723] 
split level 148: [/input, 2522] 
split level 149: [/input-8, 1786] 
split level 150: [/input, 1003] 
split level 151: [/input, 1398] 
split level 152: [/input, 18] 
split level 153: [/input, 1382] 
split level 154: [/input, 2490] 
split level 155: [/input, 3131] 
split level 156: [/input, 684] 
split level 157: [/input, 1997] 
split level 158: [/input, 152] 
split level 159: [/input, 1474] 
split level 160: [/input, 1316] 
split level 161: [/input, 235] 
split level 162: [/input, 3103] 
split level 163: [/input, 2473] 
split level 164: [/input, 811] 
split level 165: [/input, 291] 
split level 166: [/input, 2436] 
split level 167: [/input, 2179] 
split level 168: [/input, 97] 
split level 169: [/input, 277] 
split level 170: [/input, 17] 
split level 171: [/input, 3371] 
split level 172: [/input, 2780] 
split level 173: [/input, 2488] 
split level 174: [/input, 2692] 
split level 175: [/input, 1177] 
split level 176: [/input, 1162] 
split level 177: [/input, 278] 
split level 178: [/input, 2733] 
split level 179: [/input, 215] 
split level 180: [/input, 2781] 
split level 181: [/input, 1980] 
split level 182: [/input, 2217] 
split level 183: [/input, 478] 
split level 184: [/input, 236] 
split level 185: [/input, 2854] 
split level 186: [/input, 2523] 
split level 187: [/input, 4050] 
split level 188: [/input-8, 335] 
split level 189: [/input, 2770] 
split level 190: [/input, 1178] 
split level 191: [/input, 1194] 
split level 192: [/input, 2195] 
split level 193: [/input, 2539] 
split level 194: [/input, 3368] 
split level 195: [/input, 210] 
split level 196: [/input, 3549] 
split level 197: [/input, 2450] 
split level 198: [/input, 2635] 
split level 199: [/input, 793] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4592759609222412
10 lb beta sum: 0.0, worst -0.4592719078063965
Time: prepare 0.0113    bound 0.1028    transfer 0.0012    finalize 0.0028    func 0.1208    
Accumulated time: func 0.1756    prepare 0.0217    bound 0.1572    transfer 0.0013    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.08570814) min lb tensor(-0.45926976)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01051640510559082 
BICCOS Cumulative time: 0.01051640510559082
Preprocessing time: 0.009846925735473633 Inference time: 7.796287536621094e-05 Add cuts time: 3.886222839355469e-05 Cut analysis time: 0.0005526542663574219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.44584 (1), -0.44482 (1), -0.44480 (1), -0.44427 (1), -0.44414 (1), -0.44397 (1), -0.44395 (1), -0.44354 (1), -0.44226 (1), -0.44224 (1), -0.44213 (1), -0.44194 (1), -0.44129 (1), -0.44062 (1), -0.43977 (1), -0.43804 (1), -0.43702 (1), -0.43640 (1), -0.43586 (1), -0.43536 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5306    set_bounds 0.0090    solve 0.1209    add 0.0751    
Accumulated time: pickout 0.0004    decision 0.5306    set_bounds 0.0090    solve 0.1209    add 0.0751    
Current (lb-rhs): -0.4458427429199219
50 domains visited
Cumulative time: 0.8193650245666504

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 72] [/input-12, 24] [/input-12, 72] [/input-12, 24] [/input-12, 24] [/input-12, 72] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 17] [/input-12, 7] [/input-12, 7] [/input-12, 72] [/input-12, 72] [/input-12, 7] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 3: [/input-8, 929] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4309566020965576
10 lb beta sum: 0.16623170673847198, worst -0.43084144592285156
Time: prepare 0.0073    bound 0.1193    transfer 0.0007    finalize 0.0024    func 0.1323    
Accumulated time: func 0.3080    prepare 0.0292    bound 0.2765    transfer 0.0021    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.20927072) min lb tensor(-0.43080664)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.015455007553100586 
BICCOS Cumulative time: 0.025971412658691406
Preprocessing time: 0.011810302734375 Inference time: 0.0020856857299804688 Add cuts time: 0.001280069351196289 Cut analysis time: 0.0002789497375488281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17821 (2), -0.17758 (2), -0.17653 (2), -0.17641 (2), -0.17577 (2), -0.17472 (2), -0.17469 (2), -0.17469 (2), -0.17371 (2), -0.17168 (2), -0.17102 (2), -0.17069 (2), -0.16902 (2), -0.16892 (2), -0.16854 (2), -0.16708 (2), -0.16685 (2), -0.16655 (2), -0.16366 (2), -0.16280 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0198    set_bounds 0.0121    solve 0.1324    add 0.0787    
Accumulated time: pickout 0.0014    decision 0.5504    set_bounds 0.0211    solve 0.2533    add 0.1538    
Current (lb-rhs): -0.17821460962295532
100 domains visited
Cumulative time: 1.0790143013000488

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 72] [/input-12, 24] [/input-12, 24] [/input-12, 7] [/input-12, 7] [/input-12, 24] [/input-12, 24] [/input-12, 72] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 7] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 17] 
split level 3: [/input-12, 17] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-8, 1699] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18099546432495117
10 lb beta sum: 0.5780906677246094, worst -0.141567662358284
Time: prepare 0.0074    bound 0.1211    transfer 0.0007    finalize 0.0024    func 0.1347    
Accumulated time: func 0.4427    prepare 0.0369    bound 0.3976    transfer 0.0028    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.38402754) min lb tensor(-0.13914199)
Number of Verified Splits: 280 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.028861284255981445 
BICCOS Cumulative time: 0.05483269691467285
Preprocessing time: 0.011476993560791016 Inference time: 0.011486053466796875 Add cuts time: 0.0055980682373046875 Cut analysis time: 0.0003001689910888672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11753 (3), -0.11741 (3), -0.11677 (3), -0.11400 (3), -0.11396 (3), -0.10943 (3), -0.10941 (3), -0.10867 (3), -0.10776 (3), -0.10685 (3), -0.10636 (3), -0.10585 (3), -0.10466 (3), -0.10407 (3), -0.10355 (3), -0.10346 (3), -0.09834 (3), -0.09826 (3), -0.09814 (3), -0.09809 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0150    solve 0.1348    add 0.0978    
Accumulated time: pickout 0.0024    decision 0.5697    set_bounds 0.0361    solve 0.3881    add 0.2516    
Current (lb-rhs): -0.11753161251544952
150 domains visited
Cumulative time: 1.376147985458374

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 2: [/input-12, 7] [/input-12, 17] [/input-12, 17] [/input-12, 7] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-8, 1699] [/input-12, 4] [/input-8, 1699] [/input-8, 1699] [/input-12, 4] [/input-8, 1699] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15090179443359375
10 lb beta sum: 0.5790979862213135, worst -0.11263608932495117
Time: prepare 0.0067    bound 0.1207    transfer 0.0007    finalize 0.0021    func 0.1333    
Accumulated time: func 0.5760    prepare 0.0438    bound 0.5183    transfer 0.0035    finalize 0.0098    
all_split False
======================Cut inference begins======================
max lb tensor(0.40078586) min lb tensor(-0.11168250)
Number of Verified Splits: 133 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 4
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.021612882614135742 
BICCOS Cumulative time: 0.0764455795288086
Preprocessing time: 0.011403799057006836 Inference time: 0.006907939910888672 Add cuts time: 0.002814054489135742 Cut analysis time: 0.0004870891571044922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04099 (4), -0.04065 (4), -0.04064 (4), -0.03918 (4), -0.03734 (4), -0.03694 (4), -0.03667 (4), -0.03485 (4), -0.03482 (4), -0.03473 (4), -0.03271 (4), -0.03258 (4), -0.03222 (4), -0.03214 (4), -0.03146 (4), -0.03141 (4), -0.03036 (4), -0.02789 (4), -0.02764 (4), -0.02757 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0198    set_bounds 0.0147    solve 0.1334    add 0.2156    
Accumulated time: pickout 0.0034    decision 0.5895    set_bounds 0.0508    solve 0.5215    add 0.4672    
Current (lb-rhs): -0.04098875820636749
200 domains visited
Cumulative time: 1.7824485301971436

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 2: [/input-8, 1699] [/input-8, 1699] [/input-12, 17] [/input-8, 1699] [/input-8, 1699] [/input-12, 7] [/input-12, 17] [/input-12, 7] [/input-12, 64] [/input-12, 64] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-12, 64] [/input-12, 4] [/input-12, 4] [/input-8, 1699] [/input-12, 64] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08557796478271484
10 lb beta sum: 0.7021201252937317, worst -0.0473877489566803
Time: prepare 0.0073    bound 0.1378    transfer 0.0008    finalize 0.0022    func 0.1506    
Accumulated time: func 0.7267    prepare 0.0513    bound 0.6561    transfer 0.0043    finalize 0.0119    
all_split False
======================Cut inference begins======================
max lb tensor(0.28848320) min lb tensor(-0.04037569)
Number of Verified Splits: 289 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.03438735008239746 
BICCOS Cumulative time: 0.11083292961120605
Preprocessing time: 0.011496305465698242 Inference time: 0.014578104019165039 Add cuts time: 0.007434368133544922 Cut analysis time: 0.0008785724639892578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02274 (5), -0.02273 (5), -0.02271 (5), -0.02270 (5), -0.02268 (5), -0.02268 (5), -0.02260 (5), -0.02253 (5), -0.02233 (5), -0.02072 (5), -0.02069 (5), -0.01956 (5), -0.01946 (5), -0.01922 (5), -0.01785 (5), -0.01771 (5), -0.01745 (5), -0.01706 (5), -0.01614 (5), -0.01552 (5), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0153    solve 0.1507    add 0.1050    
Accumulated time: pickout 0.0045    decision 0.6090    set_bounds 0.0661    solve 0.6722    add 0.5722    
Current (lb-rhs): -0.022738561034202576
250 domains visited
Cumulative time: 2.108811140060425

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 72]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.66014392e-14, 4.23910469e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 72, 29]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.66014392e-14, 2.63914108e-01, 4.06037211e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 72, 29]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([1.66014392e-14, 2.63914108e-01, 1.51977167e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 17, 29]), tensor([ 1., -1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.72051548e-11, 1.79858223e-01, 6.71883970e-02, 6.74547553e-02,
        2.74402380e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 17, 29]), tensor([ 1., -1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.72051548e-11, 1.79858223e-01, 6.71883970e-02, 6.74547553e-02,
        3.23371729e-04]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 17, 29]), tensor([ 1., -1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.72051548e-11, 1.79858223e-01, 6.71883970e-02, 6.09929115e-02,
        2.73803324e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 17, 29]), tensor([ 1., -1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.72051548e-11, 1.79858223e-01, 6.71883970e-02, 6.09929115e-02,
        1.32036372e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 29]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.72051548e-11, 1.79858223e-01, 2.26639677e-02, 2.91938782e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 29]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.72051548e-11, 1.79858223e-01, 2.26639677e-02, 3.20129395e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24, 17,  4]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([2.72051548e-11, 1.87033623e-01, 7.55202770e-02, 6.78550154e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24, 17,  4, 29]), tensor([ 1.,  1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.72051548e-11, 1.87033623e-01, 7.55202770e-02, 2.20109541e-02,
        2.47440010e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24, 17,  4, 29]), tensor([ 1.,  1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.72051548e-11, 1.87033623e-01, 7.55202770e-02, 2.20109541e-02,
        1.20181162e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1699], [-1.0], [0], [4.314277823880275e-10], [3]), '/input-12': (tensor([ 7, 24, 17, 29]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.72051548e-11, 1.87033623e-01, 6.10300601e-02, 2.39407197e-01]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1699], [-1.0], [0], [4.314277823880275e-10], [3]), '/input-12': (tensor([ 7, 24, 17, 29]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([2.72051548e-11, 1.87033623e-01, 6.10300601e-02, 2.82213259e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1699]), tensor([1.]), tensor([0]), tensor([0.01297470]), tensor([3])), '/input-12': ([7, 24, 17], [1.0, 1.0, 1.0], [0, 0, 0], [2.7205154795595377e-11, 0.18703362345695496, 0.061030060052871704], [0, 1, 2])}
Shallow branching resets to n domains:  15
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.41503381729125977
10 lb beta sum: 0.6853753328323364, worst -0.39097481966018677
Time: prepare 0.0006    bound 0.1322    transfer 0.0002    finalize 0.0002    func 0.1334    
Accumulated time: func 0.8600    prepare 0.0519    bound 0.7883    transfer 0.0045    finalize 0.0122    
After pruning, left:  5

Back to Regular BaB

BaB round 1
batch: 5
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 29] 
split level 1: [/input-12, 24] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 72] 
split level 2: [/input-12, 17] [/input-12, 64] [/input-12, 17] [/input-8, 1699] [/input-12, 59] 
split level 3: [/input-12, 4] [/input-8, 1699] [/input-12, 64] [/input-12, 64] [/input-12, 4] 
split level 4: [/input-12, 64] [/input-8, 438] [/input-8, 1699] [/input-8, 1686] [/input-12, 64] 
split level 5: [/input-8, 1699] [/input-8, 1686] [/input-8, 1316] [/input-8, 1724] [/input-8, 1686] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1736793518066406, worst -0.20631039142608643
10 lb beta sum: 1.176857352256775, worst -0.20586025714874268
Time: prepare 0.0138    bound 0.1338    transfer 0.0022    finalize 0.0015    func 0.1535    
Accumulated time: func 1.0136    prepare 0.0661    bound 0.9221    transfer 0.0067    finalize 0.0137    
all_split False
======================Cut inference begins======================
max lb tensor(0.87606400) min lb tensor(-0.20566404)
Number of Verified Splits: 282 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.211937665939331, worst -1.3141002655029297
10 lb beta sum: 1.3023953437805176, worst -0.1994532346725464
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 0.32422661781311035 
BICCOS Cumulative time: 0.4350595474243164
Preprocessing time: 0.008769989013671875 Inference time: 0.3047952651977539 Add cuts time: 0.009160518646240234 Cut analysis time: 0.001500844955444336
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20566 (6), -0.19992 (6), -0.19510 (6), -0.18650 (6), -0.18255 (6), -0.17750 (6), -0.17466 (6), -0.16690 (6), -0.10568 (6), -0.10436 (6), -0.10172 (6), -0.09660 (6), -0.09071 (6), -0.07916 (6), -0.07652 (6), -0.07327 (6), -0.06854 (6), -0.06819 (6), -0.06385 (6), -0.06045 (6), 
Length of domains: 38
Time: pickout 0.0006    decision 0.0185    set_bounds 0.0299    solve 0.1536    add 0.0012    
Accumulated time: pickout 0.0050    decision 0.6274    set_bounds 0.0960    solve 0.8258    add 0.5734    
Current (lb-rhs): -0.2056640386581421
288 domains visited
Cumulative time: 2.804661512374878

BaB round 2
batch: 38
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 71] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-8, 227] [/input-12, 59] 
split level 1: [/input-8, 1949] [/input-8, 435] [/input-8, 1949] [/input-8, 929] [/input-8, 410] [/input-8, 1949] [/input-8, 410] [/input-8, 410] [/input-8, 929] [/input-8, 410] 
split level 2: [/input-8, 435] [/input-8, 1686] [/input-8, 435] [/input-8, 923] [/input-8, 435] [/input-8, 410] [/input-8, 435] [/input-8, 1316] [/input-8, 1316] [/input-8, 435] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1987156867980957
10 lb beta sum: 0.23283693194389343, worst -0.19460535049438477
Time: prepare 0.0060    bound 0.1394    transfer 0.0007    finalize 0.0019    func 0.1500    
Accumulated time: func 1.1635    prepare 0.0724    bound 1.0615    transfer 0.0073    finalize 0.0156    
all_split False
======================Cut inference begins======================
max lb tensor(0.31321567) min lb tensor(-0.19455099)
Number of Verified Splits: 173 of 304
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 7
#cuts 4-6: 9
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.028405427932739258 
BICCOS Cumulative time: 0.46346497535705566
Preprocessing time: 0.008880138397216797 Inference time: 0.016219139099121094 Add cuts time: 0.002595186233520508 Cut analysis time: 0.0007109642028808594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19455 (9), -0.19188 (9), -0.18860 (9), -0.18547 (9), -0.18379 (9), -0.18105 (9), -0.17607 (9), -0.17390 (9), -0.17340 (9), -0.17111 (9), -0.17035 (9), -0.16977 (9), -0.16893 (9), -0.16668 (9), -0.16635 (9), -0.16632 (9), -0.16600 (9), -0.16536 (9), -0.16355 (9), -0.16327 (9), 
Length of domains: 131
Time: pickout 0.0019    decision 0.0163    set_bounds 0.0235    solve 0.1500    add 0.0015    
Accumulated time: pickout 0.0069    decision 0.6437    set_bounds 0.1195    solve 0.9759    add 0.5749    
Current (lb-rhs): -0.1945509910583496
419 domains visited
Cumulative time: 3.0272490978240967

BaB round 3
batch: 131
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 71] [/input-8, 1949] [/input-12, 71] [/input-8, 1949] [/input-12, 71] [/input-8, 1949] [/input-8, 1949] [/input-8, 1949] [/input-12, 71] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1945514678955078
10 lb beta sum: 0.2173663079738617, worst -0.1944897174835205
Time: prepare 0.0053    bound 0.1387    transfer 0.0023    finalize 0.0014    func 0.1499    
Accumulated time: func 1.3135    prepare 0.0778    bound 1.2002    transfer 0.0097    finalize 0.0171    
all_split False
======================Cut inference begins======================
max lb tensor(0.61057639) min lb tensor(-0.19446397)
Number of Verified Splits: 157 of 262
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 9
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.025367259979248047 
BICCOS Cumulative time: 0.4888322353363037
Preprocessing time: 0.0076808929443359375 Inference time: 0.01506948471069336 Add cuts time: 0.0022661685943603516 Cut analysis time: 0.00035071372985839844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19446 (10), -0.19177 (10), -0.18850 (10), -0.18527 (10), -0.18367 (10), -0.18091 (10), -0.17539 (10), -0.17269 (10), -0.17084 (10), -0.16906 (10), -0.16873 (10), -0.16609 (10), -0.16600 (10), -0.16550 (10), -0.16536 (10), -0.16506 (10), -0.16441 (10), -0.16329 (10), -0.16226 (10), -0.16098 (10), 
Length of domains: 105
Time: pickout 0.0023    decision 0.0184    set_bounds 0.0111    solve 0.1500    add 0.0040    
Accumulated time: pickout 0.0092    decision 0.6621    set_bounds 0.1306    solve 1.1259    add 0.5789    
Current (lb-rhs): -0.19446396827697754
524 domains visited
Cumulative time: 3.2393836975097656

BaB round 4
batch: 105
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-8, 410] [/input-8, 410] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19096827507019043
10 lb beta sum: 0.4402422308921814, worst -0.17952361702919006
Time: prepare 0.0043    bound 0.1400    transfer 0.0005    finalize 0.0011    func 0.1474    
Accumulated time: func 1.4608    prepare 0.0824    bound 1.3403    transfer 0.0101    finalize 0.0182    
all_split False
======================Cut inference begins======================
max lb tensor(0.53968179) min lb tensor(-0.17949253)
Number of Verified Splits: 91 of 210
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 11
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.01755690574645996 
BICCOS Cumulative time: 0.5063891410827637
Preprocessing time: 0.0063326358795166016 Inference time: 0.009039640426635742 Add cuts time: 0.0017747879028320312 Cut analysis time: 0.00040984153747558594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17949 (11), -0.17677 (11), -0.17255 (11), -0.16916 (11), -0.16745 (11), -0.16472 (11), -0.16182 (11), -0.16023 (11), -0.15939 (11), -0.15881 (11), -0.15710 (11), -0.15667 (11), -0.15573 (11), -0.15518 (11), -0.15509 (11), -0.15417 (11), -0.15347 (11), -0.15268 (11), -0.15237 (11), -0.15191 (11), 
Length of domains: 119
Time: pickout 0.0021    decision 0.0174    set_bounds 0.0090    solve 0.1474    add 0.0014    
Accumulated time: pickout 0.0113    decision 0.6795    set_bounds 0.1396    solve 1.2733    add 0.5803    
Current (lb-rhs): -0.1794925332069397
643 domains visited
Cumulative time: 3.434924840927124

BaB round 5
batch: 119
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-8, 1579] [/input-8, 1107] [/input-8, 435] [/input-8, 1107] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18512892723083496
10 lb beta sum: 0.7748956084251404, worst -0.17258000373840332
Time: prepare 0.0047    bound 0.1385    transfer 0.0005    finalize 0.0011    func 0.1465    
Accumulated time: func 1.6073    prepare 0.0873    bound 1.4788    transfer 0.0107    finalize 0.0193    
all_split False
======================Cut inference begins======================
max lb tensor(0.51170272) min lb tensor(-0.17253923)
Number of Verified Splits: 56 of 238
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 14
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.014746427536010742 
BICCOS Cumulative time: 0.5211355686187744
Preprocessing time: 0.007073640823364258 Inference time: 0.005785226821899414 Add cuts time: 0.0014407634735107422 Cut analysis time: 0.0004467964172363281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17254 (12), -0.17210 (12), -0.16979 (12), -0.16935 (12), -0.16534 (12), -0.16190 (12), -0.15996 (12), -0.15935 (12), -0.15715 (12), -0.15653 (12), -0.15227 (12), -0.15183 (12), -0.14980 (12), -0.14951 (12), -0.14907 (12), -0.14834 (12), -0.14799 (12), -0.14792 (12), -0.14707 (12), -0.14635 (12), 
Length of domains: 182
Time: pickout 0.0019    decision 0.0176    set_bounds 0.0106    solve 0.1465    add 0.0016    
Accumulated time: pickout 0.0132    decision 0.6971    set_bounds 0.1501    solve 1.4199    add 0.5820    
Current (lb-rhs): -0.17253923416137695
825 domains visited
Cumulative time: 3.6306376457214355

BaB round 6
batch: 182
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1107] [/input-8, 1316] [/input-8, 1316] [/input-8, 438] [/input-8, 438] [/input-8, 218] [/input-8, 1107] [/input-8, 1316] [/input-8, 438] [/input-8, 438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18061614036560059
10 lb beta sum: 1.0234160423278809, worst -0.16802597045898438
Time: prepare 0.0073    bound 0.1408    transfer 0.0036    finalize 0.0017    func 0.1564    
Accumulated time: func 1.7637    prepare 0.0948    bound 1.6196    transfer 0.0143    finalize 0.0210    
all_split False
======================Cut inference begins======================
max lb tensor(0.53898728) min lb tensor(-0.16800189)
Number of Verified Splits: 216 of 364
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 15
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.03832292556762695 
BICCOS Cumulative time: 0.5594584941864014
Preprocessing time: 0.010877370834350586 Inference time: 0.023859262466430664 Add cuts time: 0.0031197071075439453 Cut analysis time: 0.0004665851593017578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16800 (13), -0.16757 (13), -0.16616 (13), -0.16572 (13), -0.16528 (13), -0.16524 (13), -0.16480 (13), -0.16436 (13), -0.16356 (13), -0.16312 (13), -0.16180 (13), -0.16081 (13), -0.15935 (13), -0.15876 (13), -0.15651 (13), -0.15589 (13), -0.14896 (13), -0.14788 (13), -0.14746 (13), -0.14695 (13), 
Length of domains: 148
Time: pickout 0.0033    decision 0.0218    set_bounds 0.0156    solve 0.1565    add 0.0015    
Accumulated time: pickout 0.0165    decision 0.7189    set_bounds 0.1657    solve 1.5764    add 0.5835    
Current (lb-rhs): -0.16800189018249512
973 domains visited
Cumulative time: 3.8693816661834717

BaB round 7
batch: 148
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1686] [/input-8, 237] [/input-8, 1686] [/input-8, 227] [/input-8, 237] [/input-8, 1686] [/input-8, 929] [/input-8, 412] [/input-8, 1686] [/input-8, 227] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1776750087738037
10 lb beta sum: 0.8426773548126221, worst -0.1649763584136963
Time: prepare 0.0059    bound 0.1390    transfer 0.0006    finalize 0.0014    func 0.1488    
Accumulated time: func 1.9126    prepare 0.1008    bound 1.7586    transfer 0.0150    finalize 0.0223    
all_split False
======================Cut inference begins======================
max lb tensor(0.31301707) min lb tensor(-0.16496134)
Number of Verified Splits: 68 of 296
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.01816701889038086 
BICCOS Cumulative time: 0.5776255130767822
Preprocessing time: 0.008671998977661133 Inference time: 0.007433891296386719 Add cuts time: 0.001623392105102539 Cut analysis time: 0.00043773651123046875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16496 (14), -0.16453 (14), -0.16310 (14), -0.16266 (14), -0.16216 (14), -0.16173 (14), -0.16147 (14), -0.16050 (14), -0.16048 (14), -0.16021 (14), -0.16007 (14), -0.15977 (14), -0.15864 (14), -0.15829 (14), -0.15789 (14), -0.15785 (14), -0.15777 (14), -0.15739 (14), -0.15696 (14), -0.15679 (14), 
Length of domains: 228
Time: pickout 0.0024    decision 0.0193    set_bounds 0.0124    solve 0.1489    add 0.0023    
Accumulated time: pickout 0.0189    decision 0.7382    set_bounds 0.1781    solve 1.7253    add 0.5858    
Current (lb-rhs): -0.1649613380432129
1201 domains visited
Cumulative time: 4.073743581771851

BaB round 8
batch: 228
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 438] [/input-8, 209] [/input-8, 438] [/input-8, 209] [/input-8, 438] [/input-8, 227] [/input-8, 415] [/input-8, 438] [/input-8, 415] [/input-8, 438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.948530375957489, worst -0.3694010376930237
10 lb beta sum: 1.0530850887298584, worst -0.16344571113586426
Time: prepare 0.0193    bound 0.1428    transfer 0.0033    finalize 0.0019    func 0.1703    
Accumulated time: func 2.0829    prepare 0.1203    bound 1.9014    transfer 0.0183    finalize 0.0243    
all_split False
======================Cut inference begins======================
max lb tensor(0.67359513) min lb tensor(-0.16344047)
Number of Verified Splits: 244 of 456
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.046437740325927734 
BICCOS Cumulative time: 0.62406325340271
Preprocessing time: 0.01301884651184082 Inference time: 0.029369592666625977 Add cuts time: 0.003542661666870117 Cut analysis time: 0.0005066394805908203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16344 (15), -0.16301 (15), -0.16163 (15), -0.16120 (15), -0.16068 (15), -0.16025 (15), -0.15904 (15), -0.15861 (15), -0.15843 (15), -0.15801 (15), -0.15660 (15), -0.15616 (15), -0.15565 (15), -0.15522 (15), -0.15458 (15), -0.15401 (15), -0.15399 (15), -0.15356 (15), -0.15178 (15), -0.15119 (15), 
Length of domains: 212
Time: pickout 0.0041    decision 0.0236    set_bounds 0.0193    solve 0.1711    add 0.0018    
Accumulated time: pickout 0.0230    decision 0.7618    set_bounds 0.1974    solve 1.8964    add 0.5876    
Current (lb-rhs): -0.16344046592712402
1413 domains visited
Cumulative time: 4.341620922088623

BaB round 9
batch: 212
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 415] [/input-8, 415] [/input-8, 415] [/input-8, 438] [/input-8, 415] [/input-8, 415] [/input-8, 227] [/input-8, 438] [/input-8, 415] [/input-8, 415] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17369747161865234
10 lb beta sum: 1.6417524814605713, worst -0.15349650382995605
Time: prepare 0.0081    bound 0.1422    transfer 0.0007    finalize 0.0026    func 0.1564    
Accumulated time: func 2.2393    prepare 0.1286    bound 2.0436    transfer 0.0190    finalize 0.0269    
all_split False
======================Cut inference begins======================
max lb tensor(0.70478213) min lb tensor(-0.15348244)
Number of Verified Splits: 270 of 424
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 24
#cuts >= 20: 0
BICCOS time: 0.050359249114990234 
BICCOS Cumulative time: 0.6744225025177002
Preprocessing time: 0.012061357498168945 Inference time: 0.03341937065124512 Add cuts time: 0.004372358322143555 Cut analysis time: 0.0005061626434326172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15348 (16), -0.15306 (16), -0.15167 (16), -0.15125 (16), -0.15072 (16), -0.15030 (16), -0.14909 (16), -0.14866 (16), -0.14834 (16), -0.14793 (16), -0.14650 (16), -0.14609 (16), -0.14558 (16), -0.14516 (16), -0.14456 (16), -0.14400 (16), -0.14389 (16), -0.14347 (16), -0.14174 (16), -0.14113 (16), 
Length of domains: 154
Time: pickout 0.0035    decision 0.0224    set_bounds 0.0178    solve 0.1565    add 0.0021    
Accumulated time: pickout 0.0265    decision 0.7842    set_bounds 0.2153    solve 2.0529    add 0.5898    
Current (lb-rhs): -0.15348243713378906
1567 domains visited
Cumulative time: 4.595878601074219

BaB round 10
batch: 154
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 438] [/input-8, 237] [/input-8, 237] [/input-8, 237] [/input-8, 237] [/input-8, 237] [/input-8, 237] [/input-8, 437] [/input-8, 237] [/input-8, 237] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1703031063079834
10 lb beta sum: 1.767988681793213, worst -0.15108722448349
Time: prepare 0.0060    bound 0.1396    transfer 0.0030    finalize 0.0014    func 0.1521    
Accumulated time: func 2.3914    prepare 0.1348    bound 2.1832    transfer 0.0220    finalize 0.0283    
all_split False
======================Cut inference begins======================
max lb tensor(0.30422980) min lb tensor(-0.15107091)
Number of Verified Splits: 56 of 308
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 26
#cuts >= 20: 0
BICCOS time: 0.01809406280517578 
BICCOS Cumulative time: 0.692516565322876
Preprocessing time: 0.008993148803710938 Inference time: 0.006878376007080078 Add cuts time: 0.0017168521881103516 Cut analysis time: 0.0005056858062744141
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15107 (17), -0.15065 (17), -0.14896 (17), -0.14853 (17), -0.14795 (17), -0.14771 (17), -0.14636 (17), -0.14594 (17), -0.14582 (17), -0.14539 (17), -0.14370 (17), -0.14326 (17), -0.14312 (17), -0.14270 (17), -0.14109 (17), -0.14065 (17), -0.13856 (17), -0.13794 (17), -0.13765 (17), -0.13709 (17), 
Length of domains: 252
Time: pickout 0.0027    decision 0.0194    set_bounds 0.0130    solve 0.1521    add 0.0015    
Accumulated time: pickout 0.0292    decision 0.8036    set_bounds 0.2283    solve 2.2050    add 0.5913    
Current (lb-rhs): -0.15107090771198273
1819 domains visited
Cumulative time: 4.803371429443359

BaB round 11
batch: 252
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 733] [/input-8, 733] [/input-8, 437] [/input-8, 437] [/input-8, 437] [/input-8, 437] [/input-8, 237] [/input-8, 437] [/input-8, 437] [/input-8, 437] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16747260093688965
10 lb beta sum: 2.0597007274627686, worst -0.15036097168922424
Time: prepare 0.0100    bound 0.1437    transfer 0.0012    finalize 0.0026    func 0.1608    
Accumulated time: func 2.5521    prepare 0.1451    bound 2.3268    transfer 0.0232    finalize 0.0310    
all_split False
======================Cut inference begins======================
max lb tensor(0.55048037) min lb tensor(-0.15035443)
Number of Verified Splits: 276 of 504
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 26
#cuts >= 20: 0
BICCOS time: 0.05744147300720215 
BICCOS Cumulative time: 0.7499580383300781
Preprocessing time: 0.014419794082641602 Inference time: 0.03802800178527832 Add cuts time: 0.004475116729736328 Cut analysis time: 0.0005185604095458984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15035 (18), -0.14993 (18), -0.14770 (18), -0.14728 (18), -0.14505 (18), -0.14460 (18), -0.14239 (18), -0.14197 (18), -0.13691 (18), -0.13634 (18), -0.13406 (18), -0.13345 (18), -0.13200 (18), -0.13150 (18), -0.12911 (18), -0.12864 (18), -0.12840 (18), -0.12798 (18), -0.12626 (18), -0.12585 (18), 
Length of domains: 228
Time: pickout 0.0037    decision 0.1804    set_bounds 0.0222    solve 0.1609    add 0.0017    
Accumulated time: pickout 0.0329    decision 0.9840    set_bounds 0.2504    solve 2.3659    add 0.5930    
Current (lb-rhs): -0.15035443007946014
2047 domains visited
Cumulative time: 5.23198390007019

BaB round 12
batch: 228
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1579] [/input-8, 1579] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2401304244995117, worst -0.1529332399368286
10 lb beta sum: 2.6442646980285645, worst -0.148686945438385
Time: prepare 0.0193    bound 0.1372    transfer 0.0008    finalize 0.0020    func 0.1623    
Accumulated time: func 2.7144    prepare 0.1646    bound 2.4641    transfer 0.0240    finalize 0.0329    
all_split False
======================Cut inference begins======================
max lb tensor(0.17015678) min lb tensor(-0.14868063)
Number of Verified Splits: 109 of 456
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 0.03061652183532715 
BICCOS Cumulative time: 0.7805745601654053
Preprocessing time: 0.0129547119140625 Inference time: 0.014627218246459961 Add cuts time: 0.002529144287109375 Cut analysis time: 0.0005054473876953125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14868 (19), -0.14826 (19), -0.14602 (19), -0.14560 (19), -0.14343 (19), -0.14302 (19), -0.14075 (19), -0.14031 (19), -0.13528 (19), -0.13471 (19), -0.13239 (19), -0.13181 (19), -0.13047 (19), -0.12996 (19), -0.12759 (19), -0.12708 (19), -0.12672 (19), -0.12629 (19), -0.12422 (19), -0.12393 (19), 
Length of domains: 347
Time: pickout 0.0048    decision 0.0210    set_bounds 0.0198    solve 0.1624    add 0.0020    
Accumulated time: pickout 0.0378    decision 1.0051    set_bounds 0.2702    solve 2.5283    add 0.5950    
Current (lb-rhs): -0.14868062734603882
2394 domains visited
Cumulative time: 5.47355055809021

BaB round 13
batch: 347
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 209] [/input-8, 209] [/input-8, 209] [/input-8, 209] [/input-8, 209] [/input-8, 209] [/input-8, 209] [/input-8, 209] [/input-8, 209] [/input-8, 209] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1617124080657959
10 lb beta sum: 2.094172716140747, worst -0.14868122339248657
Time: prepare 0.0131    bound 0.1443    transfer 0.0017    finalize 0.0028    func 0.1664    
Accumulated time: func 2.8808    prepare 0.1779    bound 2.6084    transfer 0.0257    finalize 0.0357    
all_split False
======================Cut inference begins======================
max lb tensor(0.29337531) min lb tensor(-0.14867958)
Number of Verified Splits: 175 of 694
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 0.050963640213012695 
BICCOS Cumulative time: 0.831538200378418
Preprocessing time: 0.019629240036010742 Inference time: 0.027608394622802734 Add cuts time: 0.003204822540283203 Cut analysis time: 0.0005211830139160156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14868 (20), -0.14826 (20), -0.14602 (20), -0.14560 (20), -0.14340 (20), -0.14295 (20), -0.14073 (20), -0.14031 (20), -0.13526 (20), -0.13466 (20), -0.13239 (20), -0.13181 (20), -0.13047 (20), -0.12996 (20), -0.12759 (20), -0.12708 (20), -0.12671 (20), -0.12628 (20), -0.12392 (20), -0.12389 (20), 
Length of domains: 519
Time: pickout 0.0062    decision 0.0304    set_bounds 0.0288    solve 0.1666    add 0.0024    
Accumulated time: pickout 0.0440    decision 1.0355    set_bounds 0.2990    solve 2.6949    add 0.5974    
Current (lb-rhs): -0.14867958426475525
2913 domains visited
Cumulative time: 5.76057243347168

BaB round 14
batch: 519
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 213] [/input-8, 434] [/input-8, 213] [/input-8, 434] [/input-8, 213] [/input-8, 434] [/input-8, 227] 
cut re-enabled after branching node selection
0 lb beta sum: 2.4277801513671875, worst -0.14867958426475525
10 lb beta sum: 2.4277801513671875, worst -0.14868101477622986
Time: prepare 0.0435    bound 0.1436    transfer 0.0093    finalize 0.0048    func 0.2080    
Accumulated time: func 3.0888    prepare 0.2217    bound 2.7520    transfer 0.0350    finalize 0.0405    
all_split False
======================Cut inference begins======================
max lb tensor(0.24008155) min lb tensor(-0.14867815)
Number of Verified Splits: 296 of 1038
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 0.08153080940246582 
BICCOS Cumulative time: 0.9130690097808838
Preprocessing time: 0.03049445152282715 Inference time: 0.045800209045410156 Add cuts time: 0.004697561264038086 Cut analysis time: 0.0005385875701904297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14868 (21), -0.14825 (21), -0.14602 (21), -0.14560 (21), -0.14338 (21), -0.14295 (21), -0.14073 (21), -0.14030 (21), -0.13526 (21), -0.13466 (21), -0.13239 (21), -0.13179 (21), -0.13047 (21), -0.12996 (21), -0.12759 (21), -0.12708 (21), -0.12670 (21), -0.12628 (21), -0.12390 (21), -0.12389 (21), 
Length of domains: 742
Time: pickout 0.0079    decision 0.0401    set_bounds 0.0437    solve 0.2083    add 0.0055    
Accumulated time: pickout 0.0519    decision 1.0756    set_bounds 0.3427    solve 2.9032    add 0.6029    
Current (lb-rhs): -0.14867815375328064
3655 domains visited
Cumulative time: 6.150048494338989

BaB round 15
batch: 742
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1686] [/input-8, 1686] [/input-8, 227] [/input-8, 1686] [/input-8, 227] [/input-8, 227] [/input-8, 227] [/input-8, 1686] [/input-8, 227] [/input-8, 227] 
cut re-enabled after branching node selection
0 lb beta sum: 2.365618944168091, worst -0.14867839217185974
10 lb beta sum: 2.365618944168091, worst -0.14868173003196716
Time: prepare 0.0638    bound 0.1686    transfer 0.0066    finalize 0.0069    func 0.2565    
Accumulated time: func 3.3454    prepare 0.2858    bound 2.9206    transfer 0.0416    finalize 0.0474    
all_split False
======================Cut inference begins======================
max lb tensor(0.23932230) min lb tensor(-0.14867815)
Number of Verified Splits: 640 of 1484
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 0.15868902206420898 
BICCOS Cumulative time: 1.0717580318450928
Preprocessing time: 0.04491090774536133 Inference time: 0.10241508483886719 Add cuts time: 0.010620832443237305 Cut analysis time: 0.0007421970367431641
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14868 (22), -0.14825 (22), -0.14602 (22), -0.14560 (22), -0.14338 (22), -0.14295 (22), -0.14073 (22), -0.14030 (22), -0.13525 (22), -0.13466 (22), -0.13238 (22), -0.13179 (22), -0.13047 (22), -0.12996 (22), -0.12759 (22), -0.12708 (22), -0.12670 (22), -0.12628 (22), -0.12389 (22), -0.12389 (22), 
Length of domains: 844
Time: pickout 0.0138    decision 0.0534    set_bounds 0.0628    solve 0.2570    add 0.0053    
Accumulated time: pickout 0.0657    decision 1.1290    set_bounds 0.4055    solve 3.1602    add 0.6081    
Current (lb-rhs): -0.14867815375328064
4499 domains visited
Cumulative time: 6.706037282943726

BaB round 16
batch: 844
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 227] [/input-8, 434] [/input-8, 1938] [/input-8, 213] [/input-8, 1938] [/input-8, 213] [/input-8, 434] [/input-8, 1938] [/input-8, 1938] [/input-8, 434] 
cut re-enabled after branching node selection
0 lb beta sum: 2.367194890975952, worst -0.14867815375328064
10 lb beta sum: 2.367194890975952, worst -0.14868173003196716
Time: prepare 0.0728    bound 0.1620    transfer 0.0035    finalize 0.0086    func 0.2579    
Accumulated time: func 3.6033    prepare 0.3589    bound 3.0826    transfer 0.0451    finalize 0.0560    
all_split False
======================Cut inference begins======================
max lb tensor(0.23798192) min lb tensor(-0.14867815)
Number of Verified Splits: 576 of 1688
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 0.15483880043029785 
BICCOS Cumulative time: 1.2265968322753906
Preprocessing time: 0.05180048942565918 Inference time: 0.09456443786621094 Add cuts time: 0.007886886596679688 Cut analysis time: 0.0005869865417480469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14868 (23), -0.14825 (23), -0.14602 (23), -0.14560 (23), -0.14338 (23), -0.14295 (23), -0.14073 (23), -0.14030 (23), -0.13525 (23), -0.13466 (23), -0.13238 (23), -0.13179 (23), -0.13047 (23), -0.12996 (23), -0.12759 (23), -0.12708 (23), -0.12669 (23), -0.12627 (23), -0.12388 (23), -0.12346 (23), 
Length of domains: 1112
Time: pickout 0.0170    decision 0.0572    set_bounds 0.2218    solve 0.2583    add 0.0070    
Accumulated time: pickout 0.0827    decision 1.1862    set_bounds 0.6273    solve 3.4185    add 0.6151    
Current (lb-rhs): -0.14867815375328064
5611 domains visited
Cumulative time: 7.427262783050537

BaB round 17
batch: 1112
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2759] [/input, 2741] [/input-8, 578] [/input-8, 578] [/input, 2759] [/input, 2759] [/input, 2759] [/input, 2741] [/input, 2759] [/input, 2759] 
cut re-enabled after branching node selection
0 lb beta sum: 2.3593103885650635, worst -0.14867839217185974
10 lb beta sum: 2.3593103885650635, worst -0.14868173003196716
Time: prepare 0.1024    bound 0.1862    transfer 0.0048    finalize 0.0129    func 0.3208    
Accumulated time: func 3.9240    prepare 0.4616    bound 3.2688    transfer 0.0499    finalize 0.0689    
all_split False
======================Cut inference begins======================
max lb tensor(0.23951745) min lb tensor(-0.14867815)
Number of Verified Splits: 661 of 2224
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 0.18920397758483887 
BICCOS Cumulative time: 1.4158008098602295
Preprocessing time: 0.06889915466308594 Inference time: 0.1099388599395752 Add cuts time: 0.009774208068847656 Cut analysis time: 0.0005917549133300781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14868 (24), -0.14825 (24), -0.14602 (24), -0.14560 (24), -0.14338 (24), -0.14295 (24), -0.14073 (24), -0.14030 (24), -0.13525 (24), -0.13466 (24), -0.13238 (24), -0.13179 (24), -0.13047 (24), -0.12996 (24), -0.12759 (24), -0.12708 (24), -0.12669 (24), -0.12627 (24), -0.12388 (24), -0.12346 (24), 
Length of domains: 1563
Time: pickout 0.0182    decision 0.0721    set_bounds 0.0843    solve 0.3212    add 0.0062    
Accumulated time: pickout 0.1009    decision 1.2584    set_bounds 0.7116    solve 3.7397    add 0.6213    
Current (lb-rhs): -0.14867815375328064
7174 domains visited
Cumulative time: 8.128040313720703

BaB round 18
batch: 1563
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3268] [/input-8, 578] [/input-12, 57] [/input-12, 57] [/input, 2741] [/input, 3268] [/input, 3268] [/input, 3268] [/input, 2741] [/input, 3268] 
cut re-enabled after branching node selection
0 lb beta sum: 2.3907957077026367, worst -0.14632806181907654
10 lb beta sum: 2.3907957077026367, worst -0.14633092284202576
Time: prepare 0.1457    bound 0.2372    transfer 0.0098    finalize 0.0190    func 0.4331    
Accumulated time: func 4.3572    prepare 0.6076    bound 3.5060    transfer 0.0597    finalize 0.0879    
all_split False
======================Cut inference begins======================
max lb tensor(0.24018419) min lb tensor(-0.14632806)
Number of Verified Splits: 493 of 3126
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 0.1929764747619629 
BICCOS Cumulative time: 1.6087772846221924
Preprocessing time: 0.09727859497070312 Inference time: 0.08610033988952637 Add cuts time: 0.008981466293334961 Cut analysis time: 0.0006160736083984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14633 (25), -0.14590 (25), -0.14476 (25), -0.14434 (25), -0.14367 (25), -0.14325 (25), -0.14211 (25), -0.14169 (25), -0.14103 (25), -0.14060 (25), -0.13950 (25), -0.13905 (25), -0.13838 (25), -0.13795 (25), -0.13683 (25), -0.13640 (25), -0.13290 (25), -0.13231 (25), -0.13136 (25), -0.13075 (25), 
Length of domains: 2633
Time: pickout 0.0323    decision 0.0959    set_bounds 0.2776    solve 0.4337    add 0.0185    
Accumulated time: pickout 0.1332    decision 1.3543    set_bounds 0.9891    solve 4.1734    add 0.6398    
Current (lb-rhs): -0.14632806181907654
9807 domains visited
Cumulative time: 9.187018156051636

BaB round 19
batch: 2633
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 578] [/input-12, 57] [/input, 2759] [/input, 2759] [/input-8, 578] [/input-8, 578] [/input-8, 578] [/input-8, 578] [/input-8, 578] [/input-8, 578] 
cut re-enabled after branching node selection
0 lb beta sum: 2.379855155944824, worst -0.14513906836509705
10 lb beta sum: 2.379855155944824, worst -0.14514359831809998
Time: prepare 0.2505    bound 0.3495    transfer 0.0247    finalize 0.1819    func 0.8410    
Accumulated time: func 5.1981    prepare 0.8584    bound 3.8555    transfer 0.0844    finalize 0.2697    
all_split False
======================Cut inference begins======================
max lb tensor(0.23988354) min lb tensor(-0.14513907)
Number of Verified Splits: 594 of 5266
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 0.28815770149230957 
BICCOS Cumulative time: 1.896934986114502
Preprocessing time: 0.16433978080749512 Inference time: 0.11365032196044922 Add cuts time: 0.00952911376953125 Cut analysis time: 0.0006384849548339844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14514 (26), -0.14472 (26), -0.14357 (26), -0.14315 (26), -0.14248 (26), -0.14206 (26), -0.14092 (26), -0.14049 (26), -0.13984 (26), -0.13941 (26), -0.13827 (26), -0.13784 (26), -0.13719 (26), -0.13676 (26), -0.13563 (26), -0.13520 (26), -0.13159 (26), -0.13100 (26), -0.13002 (26), -0.12944 (26), 
Length of domains: 4672
Time: pickout 0.0450    decision 0.1540    set_bounds 0.2234    solve 0.8424    add 0.0228    
Accumulated time: pickout 0.1782    decision 1.5083    set_bounds 1.2126    solve 5.0158    add 0.6626    
Current (lb-rhs): -0.14513906836509705
14479 domains visited
Cumulative time: 10.774628162384033

BaB round 20
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 213] [/input, 3268] [/input, 3268] [/input, 3268] [/input, 3268] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 2.362061023712158, worst -0.1420818269252777
10 lb beta sum: 2.362061023712158, worst -0.14208588004112244
Time: prepare 0.3907    bound 0.4983    transfer 0.0295    finalize 0.0496    func 1.0224    
Accumulated time: func 6.2206    prepare 1.2493    bound 4.3538    transfer 0.1139    finalize 0.3193    
all_split False
======================Cut inference begins======================
max lb tensor(0.23955667) min lb tensor(-0.14208183)
Number of Verified Splits: 1547 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 0.6001570224761963 
BICCOS Cumulative time: 2.4970920085906982
Preprocessing time: 0.25858497619628906 Inference time: 0.3023107051849365 Add cuts time: 0.03851151466369629 Cut analysis time: 0.0007498264312744141
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14208 (27), -0.14166 (27), -0.14131 (27), -0.14089 (27), -0.14051 (27), -0.14009 (27), -0.13974 (27), -0.13937 (27), -0.13932 (27), -0.13895 (27), -0.13883 (27), -0.13840 (27), -0.13780 (27), -0.13738 (27), -0.13726 (27), -0.13683 (27), -0.13679 (27), -0.13635 (27), -0.13605 (27), -0.13562 (27), 
Length of domains: 7221
Time: pickout 0.0721    decision 0.2313    set_bounds 0.5494    solve 1.0247    add 0.0244    
Accumulated time: pickout 0.2503    decision 1.7396    set_bounds 1.7620    solve 6.0405    add 0.6870    
Current (lb-rhs): -0.1420818269252777
21124 domains visited
current_vram/total_varm: 9.9GB/99.9GB, batch_size increase to 8192
Cumulative time: 13.30066728591919

BaB round 21
batch: 7221
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3269] [/input, 2739] [/input, 2755] [/input, 2755] [/input, 2755] [/input-8, 578] [/input-8, 578] [/input, 2755] [/input, 2739] [/input-8, 578] 
cut re-enabled after branching node selection
0 lb beta sum: 2.3288931846618652, worst -0.14049586653709412
10 lb beta sum: 2.3288931846618652, worst -0.14049872756004333
Time: prepare 0.7013    bound 0.8278    transfer 0.0752    finalize 0.2888    func 1.9900    
Accumulated time: func 8.2106    prepare 1.9509    bound 5.1816    transfer 0.1891    finalize 0.6082    
all_split False
======================Cut inference begins======================
max lb tensor(0.24009812) min lb tensor(-0.14049539)
Number of Verified Splits: 2591 of 14442
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 1.2738761901855469 
BICCOS Cumulative time: 3.770968198776245
Preprocessing time: 0.4634432792663574 Inference time: 0.7594020366668701 Add cuts time: 0.05034375190734863 Cut analysis time: 0.0006871223449707031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14050 (28), -0.14007 (28), -0.13970 (28), -0.13928 (28), -0.13893 (28), -0.13850 (28), -0.13813 (28), -0.13779 (28), -0.13771 (28), -0.13736 (28), -0.13724 (28), -0.13682 (28), -0.13622 (28), -0.13579 (28), -0.13567 (28), -0.13525 (28), -0.13520 (28), -0.13477 (28), -0.13440 (28), -0.13410 (28), 
Length of domains: 11851
Time: pickout 0.1589    decision 0.5974    set_bounds 0.6425    solve 1.9929    add 0.0571    
Accumulated time: pickout 0.4091    decision 2.3370    set_bounds 2.4045    solve 8.0334    add 0.7442    
Current (lb-rhs): -0.1404953896999359
32975 domains visited
Cumulative time: 18.068154096603394

BaB round 22
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 578] [/input, 2739] [/input, 2739] [/input, 2739] [/input-8, 213] [/input-8, 213] [/input, 2739] [/input, 2792] [/input-8, 213] [/input-8, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 2.296311378479004, worst -0.13831719756126404
10 lb beta sum: 2.296311378479004, worst -0.13831838965415955
Time: prepare 0.8048    bound 0.9281    transfer 0.0789    finalize 0.1038    func 2.0244    
Accumulated time: func 10.2350    prepare 2.7561    bound 6.1097    transfer 0.2681    finalize 0.7120    
all_split False
======================Cut inference begins======================
max lb tensor(0.24015331) min lb tensor(-0.13831553)
Number of Verified Splits: 2792 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 1.4966437816619873 
BICCOS Cumulative time: 5.267611980438232
Preprocessing time: 0.5256938934326172 Inference time: 0.907952070236206 Add cuts time: 0.062300920486450195 Cut analysis time: 0.0006968975067138672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13832 (29), -0.13789 (29), -0.13752 (29), -0.13709 (29), -0.13696 (29), -0.13675 (29), -0.13654 (29), -0.13632 (29), -0.13616 (29), -0.13595 (29), -0.13574 (29), -0.13560 (29), -0.13552 (29), -0.13539 (29), -0.13518 (29), -0.13507 (29), -0.13497 (29), -0.13464 (29), -0.13459 (29), -0.13425 (29), 
Length of domains: 17251
Time: pickout 0.1521    decision 0.4501    set_bounds 0.9792    solve 2.0280    add 0.0614    
Accumulated time: pickout 0.5613    decision 2.7870    set_bounds 3.3837    solve 10.0614    add 0.8056    
Current (lb-rhs): -0.13831552863121033
46567 domains visited
current_vram/total_varm: 27.4GB/99.9GB, batch_size increase to 16384
Cumulative time: 23.28271174430847

BaB round 23
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 213] [/input-8, 232] [/input, 2865] [/input-8, 44] [/input-8, 578] [/input-8, 578] [/input, 2865] [/input, 2865] [/input-8, 213] [/input-8, 578] 
cut re-enabled after branching node selection
0 lb beta sum: 2.268786907196045, worst -0.13831552863121033
10 lb beta sum: 2.268786907196045, worst -0.13831886649131775
Time: prepare 1.6543    bound 1.7783    transfer 0.1541    finalize 0.2291    func 4.0329    
Accumulated time: func 14.2679    prepare 4.4108    bound 7.8880    transfer 0.4222    finalize 0.9410    
all_split False
======================Cut inference begins======================
max lb tensor(0.24004579) min lb tensor(-0.13831553)
Number of Verified Splits: 4156 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 2.442951202392578 
BICCOS Cumulative time: 7.7105631828308105
Preprocessing time: 1.430802583694458 Inference time: 0.9216837882995605 Add cuts time: 0.08962464332580566 Cut analysis time: 0.0008401870727539062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13832 (30), -0.13789 (30), -0.13751 (30), -0.13709 (30), -0.13696 (30), -0.13675 (30), -0.13654 (30), -0.13632 (30), -0.13616 (30), -0.13595 (30), -0.13584 (30), -0.13573 (30), -0.13560 (30), -0.13552 (30), -0.13541 (30), -0.13539 (30), -0.13518 (30), -0.13507 (30), -0.13503 (30), -0.13497 (30), 
Length of domains: 29479
Time: pickout 0.3086    decision 1.6453    set_bounds 1.9877    solve 4.0406    add 0.1094    
Accumulated time: pickout 0.8698    decision 4.4323    set_bounds 5.3714    solve 14.1020    add 0.9150    
Current (lb-rhs): -0.13831552863121033
75179 domains visited
current_vram/total_varm: 33.0GB/99.9GB, batch_size increase to 32768
Cumulative time: 33.888427734375

BaB round 24
batch: 29479
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 232] [/input, 3233] [/input, 3233] [/input, 3233] [/input, 3233] [/input, 3233] [/input-8, 1316] [/input, 3233] [/input, 3233] [/input, 3233] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2428507804870605, worst -0.1366036832332611
10 lb beta sum: 2.2428507804870605, worst -0.13660535216331482
Time: prepare 3.0291    bound 3.1656    transfer 0.2984    finalize 0.4195    func 7.8281    
Accumulated time: func 22.0960    prepare 7.4403    bound 11.0536    transfer 0.7206    finalize 1.3605    
all_split False
======================Cut inference begins======================
max lb tensor(0.24025607) min lb tensor(-0.13660368)
Number of Verified Splits: 7471 of 58958
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 4.464916944503784 
BICCOS Cumulative time: 12.175480127334595
Preprocessing time: 1.9737389087677002 Inference time: 2.329082727432251 Add cuts time: 0.16115689277648926 Cut analysis time: 0.00093841552734375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13660 (31), -0.13641 (31), -0.13580 (31), -0.13561 (31), -0.13525 (31), -0.13506 (31), -0.13504 (31), -0.13484 (31), -0.13444 (31), -0.13426 (31), -0.13423 (31), -0.13404 (31), -0.13389 (31), -0.13371 (31), -0.13368 (31), -0.13349 (31), -0.13335 (31), -0.13325 (31), -0.13316 (31), -0.13288 (31), 
Length of domains: 51487
Time: pickout 0.6713    decision 3.3896    set_bounds 3.5522    solve 7.8390    add 0.1644    
Accumulated time: pickout 1.5412    decision 7.8219    set_bounds 8.9236    solve 21.9410    add 1.0794    
Current (lb-rhs): -0.1366036832332611
126666 domains visited
Cumulative time: 54.10451316833496

BaB round 25
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2865] [/input-8, 412] [/input-8, 402] [/input-8, 402] [/input, 2865] [/input-8, 402] [/input-8, 1316] [/input-8, 1316] [/input-8, 412] [/input-8, 402] 
cut re-enabled after branching node selection
0 lb beta sum: 2.1981468200683594, worst -0.13511070609092712
10 lb beta sum: 2.1981468200683594, worst -0.13509759306907654
Time: prepare 3.3681    bound 8.6908    transfer 0.3360    finalize 0.5596    func 13.3939    
Accumulated time: func 35.4899    prepare 10.8088    bound 19.7445    transfer 1.0566    finalize 1.9201    
all_split False
======================Cut inference begins======================
max lb tensor(0.24076045) min lb tensor(-0.13509259)
Number of Verified Splits: 8252 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 5.383983135223389 
BICCOS Cumulative time: 17.559463262557983
Preprocessing time: 2.979560136795044 Inference time: 1.9996411800384521 Add cuts time: 0.4039316177368164 Cut analysis time: 0.0008502006530761719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13525 (31), -0.13509 (32), -0.13506 (31), -0.13490 (32), -0.13444 (31), -0.13429 (32), -0.13426 (31), -0.13410 (32), -0.13368 (31), -0.13352 (32), -0.13349 (31), -0.13333 (32), -0.13288 (31), -0.13272 (32), -0.13268 (31), -0.13254 (31), -0.13253 (32), -0.13238 (32), -0.13235 (31), -0.13219 (32), 
Length of domains: 76003
Time: pickout 0.6622    decision 3.9398    set_bounds 3.8499    solve 13.4100    add 0.2799    
Accumulated time: pickout 2.2034    decision 11.7617    set_bounds 12.7735    solve 35.3510    add 1.3593    
Current (lb-rhs): -0.13524708151817322
183950 domains visited
Cumulative time: 81.80434966087341

BaB round 26
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2722] [/input, 2722] [/input, 2722] [/input, 2722] [/input-8, 929] [/input, 2759] [/input, 2722] [/input, 2722] [/input, 2722] [/input, 2722] 
cut re-enabled after branching node selection
0 lb beta sum: 2.1937167644500732, worst -0.13375529646873474
10 lb beta sum: 2.1937167644500732, worst -0.13374075293540955
Time: prepare 3.3859    bound 8.6936    transfer 0.6841    finalize 0.6037    func 13.8125    
Accumulated time: func 49.3024    prepare 14.1951    bound 28.4381    transfer 1.7408    finalize 2.5239    
all_split False
======================Cut inference begins======================
max lb tensor(0.24155450) min lb tensor(-0.13373622)
Number of Verified Splits: 9237 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 6.14092493057251 
BICCOS Cumulative time: 23.700388193130493
Preprocessing time: 3.495098352432251 Inference time: 2.4008400440216064 Add cuts time: 0.24378657341003418 Cut analysis time: 0.001199960708618164
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13509 (32), -0.13490 (32), -0.13429 (32), -0.13410 (32), -0.13374 (32), -0.13355 (32), -0.13352 (32), -0.13333 (32), -0.13293 (32), -0.13274 (32), -0.13272 (32), -0.13253 (32), -0.13238 (32), -0.13219 (32), -0.13217 (32), -0.13198 (32), -0.13185 (32), -0.13165 (32), -0.13136 (32), -0.13117 (32), 
Length of domains: 99534
Time: pickout 0.6759    decision 3.6989    set_bounds 4.1317    solve 13.8285    add 0.5060    
Accumulated time: pickout 2.8793    decision 15.4606    set_bounds 16.9052    solve 49.1795    add 1.8653    
Current (lb-rhs): -0.1350925862789154
240249 domains visited
Cumulative time: 111.02078652381897

BaB round 27
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 434] [/input, 2865] [/input-8, 1316] [/input, 3268] [/input, 2865] [/input, 2865] [/input-8, 402] [/input-8, 412] [/input, 3233] [/input, 3233] 
cut re-enabled after branching node selection
0 lb beta sum: 2.1666061878204346, worst -0.12797865271568298
10 lb beta sum: 2.1666061878204346, worst -0.12798461318016052
Time: prepare 3.4289    bound 8.6932    transfer 0.7017    finalize 1.7136    func 14.9611    
Accumulated time: func 64.2635    prepare 17.6245    bound 37.1313    transfer 2.4424    finalize 4.2375    
all_split False
======================Cut inference begins======================
max lb tensor(0.24171078) min lb tensor(-0.12795958)
Number of Verified Splits: 8327 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 5.364991903305054 
BICCOS Cumulative time: 29.065380096435547
Preprocessing time: 2.0614564418792725 Inference time: 3.126842498779297 Add cuts time: 0.175797700881958 Cut analysis time: 0.0008952617645263672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13509 (32), -0.13490 (32), -0.13429 (32), -0.13410 (32), -0.13374 (32), -0.13355 (32), -0.13352 (32), -0.13333 (32), -0.13293 (32), -0.13274 (32), -0.13272 (32), -0.13253 (32), -0.13238 (32), -0.13219 (32), -0.13217 (32), -0.13198 (32), -0.13185 (32), -0.13165 (32), -0.13136 (32), -0.13117 (32), 
Length of domains: 123975
Time: pickout 0.6960    decision 4.0473    set_bounds 3.3340    solve 14.9746    add 0.4398    
Accumulated time: pickout 3.5753    decision 19.5079    set_bounds 20.2391    solve 64.1540    add 2.3050    
Current (lb-rhs): -0.1350925862789154
297458 domains visited
Cumulative time: 140.12401604652405

BaB round 28
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 366] [/input, 3268] [/input-8, 366] [/input-8, 923] [/input-8, 923] [/input-8, 923] [/input, 3268] [/input-8, 923] [/input-8, 366] [/input, 3544] 
cut re-enabled after branching node selection
0 lb beta sum: 2.159478187561035, worst -0.13363680243492126
10 lb beta sum: 2.159478187561035, worst -0.13359197974205017
Time: prepare 3.3841    bound 8.7058    transfer 0.7151    finalize 0.5964    func 13.8311    
Accumulated time: func 78.0945    prepare 21.0092    bound 45.8371    transfer 3.1575    finalize 4.8338    
all_split False
======================Cut inference begins======================
max lb tensor(0.24175942) min lb tensor(-0.13356504)
Number of Verified Splits: 8480 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 5.699791669845581 
BICCOS Cumulative time: 34.76517176628113
Preprocessing time: 2.1036393642425537 Inference time: 3.4163525104522705 Add cuts time: 0.17892813682556152 Cut analysis time: 0.0008716583251953125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13374 (32), -0.13357 (33), -0.13355 (32), -0.13337 (33), -0.13293 (32), -0.13276 (33), -0.13274 (32), -0.13257 (33), -0.13217 (32), -0.13200 (33), -0.13198 (32), -0.13180 (33), -0.13136 (32), -0.13119 (33), -0.13117 (32), -0.13103 (32), -0.13100 (33), -0.13086 (33), -0.13084 (32), -0.13067 (33), 
Length of domains: 148263
Time: pickout 0.6958    decision 3.3221    set_bounds 4.6408    solve 13.8484    add 0.4410    
Accumulated time: pickout 4.2711    decision 22.8300    set_bounds 24.8800    solve 78.0025    add 2.7461    
Current (lb-rhs): -0.13373622298240662
354514 domains visited
Cumulative time: 169.02179718017578

BaB round 29
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3269] [/input-8, 1316] [/input, 2760] [/input, 2792] [/input-8, 412] [/input-8, 412] [/input, 3268] [/input, 3268] [/input, 3268] [/input, 3268] 
cut re-enabled after branching node selection
0 lb beta sum: 2.16556453704834, worst -0.13227805495262146
10 lb beta sum: 2.16556453704834, worst -0.13223347067832947
Time: prepare 3.4330    bound 8.7029    transfer 0.7077    finalize 0.6201    func 13.8886    
Accumulated time: func 91.9832    prepare 24.4427    bound 54.5401    transfer 3.8653    finalize 5.4539    
all_split False
======================Cut inference begins======================
max lb tensor(0.24186444) min lb tensor(-0.13220486)
Number of Verified Splits: 8846 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 4.338032960891724 
BICCOS Cumulative time: 39.10320472717285
Preprocessing time: 2.1676833629608154 Inference time: 1.9912047386169434 Add cuts time: 0.1781933307647705 Cut analysis time: 0.0009515285491943359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13357 (33), -0.13337 (33), -0.13276 (33), -0.13257 (33), -0.13220 (33), -0.13201 (33), -0.13200 (33), -0.13180 (33), -0.13140 (33), -0.13122 (33), -0.13119 (33), -0.13100 (33), -0.13086 (33), -0.13067 (33), -0.13064 (33), -0.13045 (33), -0.13031 (33), -0.13013 (33), -0.12984 (33), -0.12964 (33), 
Length of domains: 172185
Time: pickout 0.7064    decision 3.3418    set_bounds 5.0283    solve 13.9069    add 0.4388    
Accumulated time: pickout 4.9775    decision 26.1718    set_bounds 29.9083    solve 91.9094    add 3.1848    
Current (lb-rhs): -0.1335650384426117
411204 domains visited
Cumulative time: 197.06559228897095

BaB round 30
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 366] [/input-8, 366] [/input-8, 434] [/input-8, 434] [/input-8, 1583] [/input-8, 1583] [/input-8, 415] [/input, 3233] [/input-8, 217] [/input, 2792] 
cut re-enabled after branching node selection
0 lb beta sum: 2.11598539352417, worst -0.12516865134239197
10 lb beta sum: 2.115992784500122, worst -0.12514004111289978
Time: prepare 3.4812    bound 8.7060    transfer 0.7188    finalize 2.4940    func 15.8262    
Accumulated time: func 107.8094    prepare 27.9244    bound 63.2460    transfer 4.5841    finalize 7.9479    
all_split False
======================Cut inference begins======================
max lb tensor(0.24171889) min lb tensor(-0.12510166)
Number of Verified Splits: 7930 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 4.074800729751587 
BICCOS Cumulative time: 43.17800545692444
Preprocessing time: 2.080920696258545 Inference time: 1.8316667079925537 Add cuts time: 0.16128063201904297 Cut analysis time: 0.0009326934814453125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13357 (33), -0.13337 (33), -0.13276 (33), -0.13257 (33), -0.13220 (33), -0.13201 (33), -0.13200 (33), -0.13180 (33), -0.13140 (33), -0.13122 (33), -0.13119 (33), -0.13100 (33), -0.13086 (33), -0.13067 (33), -0.13064 (33), -0.13045 (33), -0.13031 (33), -0.13013 (33), -0.12984 (33), -0.12964 (33), 
Length of domains: 197023
Time: pickout 0.7169    decision 5.0302    set_bounds 3.3900    solve 15.8393    add 0.4459    
Accumulated time: pickout 5.6944    decision 31.2020    set_bounds 33.2983    solve 107.7487    add 3.6307    
Current (lb-rhs): -0.1335650384426117
468810 domains visited
Time out!!!!!!!!
Result: unknown in 230.3641 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 77, vnnlib ID: 77 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.36557198, -25.52762604, -29.49477196, -28.19241905, -29.34058571,
         -28.33413696, -29.46609688, -30.40150452, -24.56089783, -23.80018806]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [679]; unstable size 679; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 679] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 679] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 679] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 185] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.08787775,  0.95483589,  4.05660439,  3.03147173,  3.64727974,
          3.09590125,  4.17433357,  4.76398897, -0.51713562]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.36557198, -25.52762604, -29.49477196, -28.19241905, -29.34058571,
         -28.33413696, -29.46609688, -30.40150452, -24.56089783, -23.80018806]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.48it/s]100%|██████████| 1/1 [00:00<00:00,  8.47it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.81932449, -25.24547768, -28.96639633, -27.77052689, -28.75254059,
          -27.98299408, -28.93449783, -30.10167694, -23.77865982, -23.70247650]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.07618332]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1213 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 25.717321395874023
alpha/beta optimization time: 1.24172043800354
initial alpha-crown bounds: tensor([[ 2.13842010,  0.97674775,  4.10324097,  3.07848167,  3.70226908,
          3.14509606,  4.22430420,  4.82284451, -0.47408342]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.47408342361450195
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5618371963501
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.56179547309875
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.561767578125
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.56174659729004
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.56172728538513
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.56170868873596
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.5616900920868
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.56167030334473
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.56165170669556
Verifying property 8 with 1 instances.
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.47408342]], device='cuda:0') need to verify.
Model prediction is: tensor([-27.36557198, -25.52762604, -29.49477196, -28.19241905, -29.34058571,
        -28.33413696, -29.46609688, -30.40150452, -24.56089783, -23.80018806],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.47408342]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 679
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 180
Node /15 input 0: size torch.Size([100]) unstable 16
-----------------
# of unstable neurons: 875
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.000102996826171875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.47408294677734375
10 lb beta sum: 0.0, worst -0.4740915298461914
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0542    transfer 0.0001    finalize 0.0001    func 0.0546    
Accumulated time: func 0.0546    prepare 0.0002    bound 0.0542    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 6] 
split level 1: [/input-12, 85] 
split level 2: [/input-12, 24] 
split level 3: [/input-8, 1973] 
split level 4: [/input-12, 92] 
split level 5: [/input-12, 56] 
split level 6: [/input-12, 38] 
split level 7: [/input-12, 46] 
split level 8: [/input-8, 1971] 
split level 9: [/input-12, 34] 
split level 10: [/input-8, 940] 
split level 11: [/input-8, 1706] 
split level 12: [/input-8, 1965] 
split level 13: [/input-12, 2] 
split level 14: [/input-8, 1967] 
split level 15: [/input-8, 1950] 
split level 16: [/input-8, 1379] 
split level 17: [/input-8, 1647] 
split level 18: [/input-12, 90] 
split level 19: [/input-8, 766] 
split level 20: [/input-8, 1655] 
split level 21: [/input-8, 354] 
split level 22: [/input, 4071] 
split level 23: [/input-8, 891] 
split level 24: [/input-8, 1388] 
split level 25: [/input-8, 1391] 
split level 26: [/input-8, 1399] 
split level 27: [/input-8, 253] 
split level 28: [/input, 3315] 
split level 29: [/input-8, 1502] 
split level 30: [/input-8, 363] 
split level 31: [/input-8, 158] 
split level 32: [/input-8, 255] 
split level 33: [/input-8, 247] 
split level 34: [/input, 3571] 
split level 35: [/input, 1463] 
split level 36: [/input-8, 733] 
split level 37: [/input-8, 1595] 
split level 38: [/input-8, 1510] 
split level 39: [/input-8, 510] 
split level 40: [/input-8, 1812] 
split level 41: [/input-8, 1981] 
split level 42: [/input, 2744] 
split level 43: [/input-8, 243] 
split level 44: [/input, 1012] 
split level 45: [/input-8, 1704] 
split level 46: [/input-8, 254] 
split level 47: [/input, 1250] 
split level 48: [/input, 646] 
split level 49: [/input, 1251] 
split level 50: [/input-8, 752] 
split level 51: [/input, 1445] 
split level 52: [/input-8, 1955] 
split level 53: [/input-8, 764] 
split level 54: [/input-8, 285] 
split level 55: [/input, 1491] 
split level 56: [/input-8, 246] 
split level 57: [/input, 1252] 
split level 58: [/input, 2637] 
split level 59: [/input-8, 149] 
split level 60: [/input-8, 429] 
split level 61: [/input, 3165] 
split level 62: [/input, 1271] 
split level 63: [/input-8, 598] 
split level 64: [/input, 2195] 
split level 65: [/input-8, 142] 
split level 66: [/input, 2467] 
split level 67: [/input-8, 313] 
split level 68: [/input, 1234] 
split level 69: [/input, 2708] 
split level 70: [/input, 2005] 
split level 71: [/input-8, 1551] 
split level 72: [/input, 3272] 
split level 73: [/input, 1021] 
split level 74: [/input-8, 1527] 
split level 75: [/input, 1490] 
split level 76: [/input, 166] 
split level 77: [/input-8, 1633] 
split level 78: [/input, 4089] 
split level 79: [/input, 2451] 
split level 80: [/input, 2787] 
split level 81: [/input, 386] 
split level 82: [/input, 2026] 
split level 83: [/input-8, 1662] 
split level 84: [/input, 2021] 
split level 85: [/input, 1480] 
split level 86: [/input, 2006] 
split level 87: [/input, 3416] 
split level 88: [/input-8, 1598] 
split level 89: [/input-8, 1154] 
split level 90: [/input, 2020] 
split level 91: [/input, 385] 
split level 92: [/input, 2470] 
split level 93: [/input, 195] 
split level 94: [/input, 2785] 
split level 95: [/input, 2214] 
split level 96: [/input, 645] 
split level 97: [/input, 1398] 
split level 98: [/input, 1272] 
split level 99: [/input, 152] 
split level 100: [/input, 2022] 
split level 101: [/input, 2458] 
split level 102: [/input, 387] 
split level 103: [/input-8, 605] 
split level 104: [/input, 356] 
split level 105: [/input-12, 79] 
split level 106: [/input, 2212] 
split level 107: [/input, 1233] 
split level 108: [/input-8, 591] 
split level 109: [/input, 168] 
split level 110: [/input, 2422] 
split level 111: [/input, 1263] 
split level 112: [/input, 2004] 
split level 113: [/input, 193] 
split level 114: [/input, 2670] 
split level 115: [/input, 2452] 
split level 116: [/input, 843] 
split level 117: [/input, 1691] 
split level 118: [/input, 2211] 
split level 119: [/input, 3256] 
split level 120: [/input, 723] 
split level 121: [/input-8, 240] 
split level 122: [/input, 194] 
split level 123: [/input, 2438] 
split level 124: [/input, 2023] 
split level 125: [/input, 2024] 
split level 126: [/input, 3151] 
split level 127: [/input, 2216] 
split level 128: [/input, 2760] 
split level 129: [/input, 2450] 
split level 130: [/input, 185] 
split level 131: [/input, 899] 
split level 132: [/input-8, 379] 
split level 133: [/input-8, 1155] 
split level 134: [/input, 1275] 
split level 135: [/input, 401] 
split level 136: [/input, 2025] 
split level 137: [/input, 2724] 
split level 138: [/input, 897] 
split level 139: [/input-8, 1529] 
split level 140: [/input, 884] 
split level 141: [/input, 2392] 
split level 142: [/input, 2484] 
split level 143: [/input-8, 1631] 
split level 144: [/input, 148] 
split level 145: [/input, 915] 
split level 146: [/input-8, 248] 
split level 147: [/input, 2930] 
split level 148: [/input, 827] 
split level 149: [/input, 1274] 
split level 150: [/input, 2639] 
split level 151: [/input, 2455] 
split level 152: [/input, 828] 
split level 153: [/input, 388] 
split level 154: [/input-8, 1211] 
split level 155: [/input, 436] 
split level 156: [/input, 1789] 
split level 157: [/input, 2437] 
split level 158: [/input-8, 1770] 
split level 159: [/input-8, 1156] 
split level 160: [/input, 2914] 
split level 161: [/input, 1986] 
split level 162: [/input-8, 893] 
split level 163: [/input, 3491] 
split level 164: [/input-8, 1934] 
split level 165: [/input, 1273] 
split level 166: [/input-8, 1530] 
split level 167: [/input, 857] 
split level 168: [/input, 1023] 
split level 169: [/input, 165] 
split level 170: [/input, 3417] 
split level 171: [/input, 3441] 
split level 172: [/input, 3220] 
split level 173: [/input, 2029] 
split level 174: [/input-8, 1172] 
split level 175: [/input-8, 1702] 
split level 176: [/input, 420] 
split level 177: [/input, 694] 
split level 178: [/input, 2393] 
split level 179: [/input, 856] 
split level 180: [/input, 913] 
split level 181: [/input-8, 263] 
split level 182: [/input, 1900] 
split level 183: [/input, 2742] 
split level 184: [/input, 2408] 
split level 185: [/input, 435] 
split level 186: [/input, 1990] 
split level 187: [/input, 1989] 
split level 188: [/input, 662] 
split level 189: [/input, 3028] 
split level 190: [/input, 2846] 
split level 191: [/input-8, 1158] 
split level 192: [/input, 1020] 
split level 193: [/input, 3402] 
split level 194: [/input, 3135] 
split level 195: [/input, 2913] 
split level 196: [/input, 2232] 
split level 197: [/input, 2465] 
split level 198: [/input, 2420] 
split level 199: [/input, 2623] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.47403573989868164
10 lb beta sum: 0.0, worst -0.47403669357299805
Time: prepare 0.0116    bound 0.0994    transfer 0.0021    finalize 0.0027    func 0.1184    
Accumulated time: func 0.1731    prepare 0.0224    bound 0.1535    transfer 0.0022    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(-0.11545992) min lb tensor(-0.47403097)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.009825706481933594 
BICCOS Cumulative time: 0.009825706481933594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.46135 (1), -0.46118 (1), -0.46104 (1), -0.46091 (1), -0.46057 (1), -0.46044 (1), -0.46034 (1), -0.46029 (1), -0.46026 (1), -0.45984 (1), -0.45950 (1), -0.45946 (1), -0.45903 (1), -0.45902 (1), -0.45819 (1), -0.45792 (1), -0.45764 (1), -0.45639 (1), -0.45627 (1), -0.45387 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5300    set_bounds 0.0087    solve 0.1185    add 0.2012    
Accumulated time: pickout 0.0003    decision 0.5300    set_bounds 0.0087    solve 0.1185    add 0.2012    
Current (lb-rhs): -0.4613528251647949
50 domains visited
Cumulative time: 0.9349863529205322

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 24] [/input-12, 24] [/input-12, 85] [/input-12, 24] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
split level 2: [/input-12, 24] [/input-12, 24] [/input-12, 46] [/input-12, 92] [/input-12, 92] [/input-8, 1973] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-8, 1971] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.43883442878723145
10 lb beta sum: 0.0, worst -0.438279390335083
Time: prepare 0.0126    bound 0.0987    transfer 0.0014    finalize 0.0023    func 0.1176    
Accumulated time: func 0.2907    prepare 0.0352    bound 0.2523    transfer 0.0036    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.17791653) min lb tensor(-0.43820381)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012231826782226562 
BICCOS Cumulative time: 0.022057533264160156
Preprocessing time: 0.011609792709350586 Inference time: 0.0002548694610595703 Add cuts time: 0.00013899803161621094 Cut analysis time: 0.0002281665802001953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24607 (2), -0.24073 (2), -0.24063 (2), -0.23994 (2), -0.23973 (2), -0.23747 (2), -0.23514 (2), -0.23449 (2), -0.22776 (2), -0.22638 (2), -0.22429 (2), -0.22262 (2), -0.21653 (2), -0.20660 (2), -0.20591 (2), -0.20347 (2), -0.20304 (2), -0.20269 (2), -0.20179 (2), -0.20130 (2), 
Length of domains: 50
Time: pickout 0.0079    decision 0.0230    set_bounds 0.0125    solve 0.1177    add 0.0815    
Accumulated time: pickout 0.0082    decision 0.5530    set_bounds 0.0211    solve 0.2362    add 0.2827    
Current (lb-rhs): -0.24606800079345703
100 domains visited
Cumulative time: 1.1899757385253906

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 6] [/input-12, 6] 
split level 1: [/input-12, 24] [/input-12, 85] [/input-12, 24] [/input-12, 85] [/input-12, 85] [/input-12, 24] [/input-12, 92] [/input-12, 92] [/input-12, 85] [/input-12, 24] 
split level 2: [/input-12, 92] [/input-12, 46] [/input-12, 92] [/input-12, 46] [/input-12, 46] [/input-12, 92] [/input-12, 46] [/input-12, 46] [/input-12, 92] [/input-12, 46] 
split level 3: [/input-12, 46] [/input-8, 1971] [/input-12, 46] [/input-8, 1706] [/input-8, 1706] [/input-12, 46] [/input-8, 1971] [/input-8, 1971] [/input-12, 46] [/input-8, 1971] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2273421287536621
10 lb beta sum: 0.2894097566604614, worst -0.22358322143554688
Time: prepare 0.0070    bound 0.1196    transfer 0.0008    finalize 0.0022    func 0.1322    
Accumulated time: func 0.4229    prepare 0.0425    bound 0.3719    transfer 0.0044    finalize 0.0073    
all_split False
======================Cut inference begins======================
max lb tensor(0.20239300) min lb tensor(-0.22195959)
Number of Verified Splits: 107 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 6
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.019891023635864258 
BICCOS Cumulative time: 0.041948556900024414
Preprocessing time: 0.011497259140014648 Inference time: 0.004638671875 Add cuts time: 0.003240823745727539 Cut analysis time: 0.0005142688751220703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06650 (3), -0.06628 (3), -0.06619 (3), -0.06568 (3), -0.06546 (3), -0.06466 (3), -0.06374 (3), -0.06302 (3), -0.06120 (3), -0.06057 (3), -0.06021 (3), -0.06014 (3), -0.05993 (3), -0.05713 (3), -0.05643 (3), -0.05548 (3), -0.05541 (3), -0.05389 (3), -0.05353 (3), -0.05294 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0150    solve 0.1323    add 0.0891    
Accumulated time: pickout 0.0092    decision 0.5724    set_bounds 0.0362    solve 0.3684    add 0.3718    
Current (lb-rhs): -0.06649678945541382
150 domains visited
Cumulative time: 1.4668333530426025

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 85] [/input-12, 85] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 6] [/input-12, 24] [/input-12, 24] 
split level 1: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 24] [/input-12, 92] [/input-12, 92] 
split level 2: [/input-12, 38] [/input-12, 46] [/input-12, 46] [/input-8, 1971] [/input-8, 1971] [/input-8, 1971] [/input-8, 1971] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 46] [/input-8, 1971] [/input-8, 1971] [/input-8, 1706] [/input-8, 1706] [/input-8, 1706] [/input-8, 1706] [/input-8, 1965] [/input-8, 1971] [/input-8, 1971] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06521129608154297
10 lb beta sum: 0.7315433621406555, worst -0.05067817121744156
Time: prepare 0.0069    bound 0.1347    transfer 0.0008    finalize 0.0021    func 0.1472    
Accumulated time: func 0.5700    prepare 0.0497    bound 0.5066    transfer 0.0051    finalize 0.0094    
all_split False
======================Cut inference begins======================
max lb tensor(0.47147632) min lb tensor(-0.04471088)
Number of Verified Splits: 370 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 13
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.037847042083740234 
BICCOS Cumulative time: 0.07979559898376465
Preprocessing time: 0.011358976364135742 Inference time: 0.016966581344604492 Add cuts time: 0.008783340454101562 Cut analysis time: 0.0007381439208984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02456 (4), -0.01060 (4), -0.00437 (4), -0.00206 (4), 
Length of domains: 4
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0146    solve 0.1473    add 0.1135    
Accumulated time: pickout 0.0102    decision 0.5916    set_bounds 0.0508    solve 0.5157    add 0.4853    
Current (lb-rhs): -0.024557113647460938
154 domains visited
Cumulative time: 1.8005366325378418

Shallow-BaB round 5
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-8, 1973] 
split level 1: [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-12, 92] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 56] [/input-12, 56] 
split level 3: [/input-12, 56] [/input-12, 56] [/input-12, 46] [/input-8, 1971] 
split level 4: [/input-8, 1971] [/input-12, 46] [/input-8, 1971] [/input-12, 46] 
split level 5: [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] 
split level 6: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 7: [/input-8, 1706] [/input-8, 1706] [/input-8, 1706] [/input-8, 1706] 
split level 8: [/input-8, 1965] [/input-8, 1965] [/input-8, 1965] [/input-8, 1965] 
split level 9: [/input-8, 1950] [/input-8, 1950] [/input-8, 1950] [/input-8, 1950] 
split level 10: [/input-8, 766] [/input-8, 766] [/input-8, 766] [/input-8, 766] 
split level 11: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 12: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 13: [/input-8, 1647] [/input-8, 1647] [/input-8, 1647] [/input-8, 1647] 
split level 14: [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] 
split level 15: [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] 
split level 16: [/input-8, 1655] [/input-8, 1655] [/input-8, 1655] [/input-8, 1655] 
split level 17: [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] 
split level 18: [/input-8, 764] [/input-8, 764] [/input-8, 764] [/input-8, 764] 
split level 19: [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] 
split level 20: [/input-8, 752] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] 
split level 21: [/input-8, 1981] [/input-8, 752] [/input-8, 752] [/input-8, 1981] 
split level 22: [/input-8, 1388] [/input-8, 1981] [/input-8, 1981] [/input-8, 752] 
split level 23: [/input-8, 1510] [/input-8, 1510] [/input-8, 1399] [/input-8, 1510] 
split level 24: [/input-8, 1399] [/input-8, 1399] [/input-8, 1510] [/input-8, 1399] 
split level 25: [/input-8, 1502] [/input-8, 1704] [/input-8, 1704] [/input-8, 1502] 
split level 26: [/input-8, 1704] [/input-8, 1502] [/input-8, 1502] [/input, 3571] 
split level 27: [/input, 3571] [/input, 3571] [/input, 3571] [/input-8, 1704] 
split level 28: [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] 
split level 29: [/input-8, 1633] [/input-8, 1633] [/input-8, 149] [/input-8, 510] 
split level 30: [/input-8, 1700] [/input-8, 1700] [/input-8, 1700] [/input-8, 149] 
split level 31: [/input-8, 285] [/input-8, 1691] [/input-8, 1633] [/input-8, 1633] 
split level 32: [/input-8, 510] [/input-8, 285] [/input-8, 285] [/input-8, 285] 
split level 33: [/input-8, 149] [/input-8, 149] [/input-8, 1691] [/input-8, 1691] 
split level 34: [/input-8, 1691] [/input-8, 510] [/input-8, 510] [/input-8, 1700] 
split level 35: [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] 
split level 36: [/input, 3165] [/input, 3165] [/input, 3165] [/input, 3417] 
split level 37: [/input-8, 1527] [/input-8, 1527] [/input, 3417] [/input, 3165] 
split level 38: [/input, 3417] [/input, 3417] [/input-8, 1527] [/input-8, 341] 
split level 39: [/input-8, 313] [/input-8, 341] [/input-8, 313] [/input-8, 1527] 
split level 40: [/input, 359] [/input-8, 313] [/input, 2438] [/input-8, 313] 
split level 41: [/input-8, 341] [/input, 2438] [/input-8, 341] [/input, 2438] 
split level 42: [/input-8, 1631] [/input, 359] [/input, 359] [/input-8, 1629] 
split level 43: [/input-8, 1629] [/input-8, 1631] [/input-8, 1631] [/input-8, 1631] 
split level 44: [/input-8, 1211] [/input-8, 1629] [/input-8, 1629] [/input, 359] 
split level 45: [/input, 4066] [/input-8, 1211] [/input-8, 1211] [/input-8, 1211] 
split level 46: [/input-8, 1934] [/input-8, 1934] [/input-8, 1934] [/input-8, 1934] 
split level 47: [/input-8, 1702] [/input-8, 1702] [/input-8, 1702] [/input-8, 1702] 
split level 48: [/input-8, 605] [/input-8, 605] [/input-8, 379] [/input-8, 605] 
split level 49: [/input-8, 379] [/input-8, 379] [/input-8, 605] [/input-8, 379] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05692863464355469

all verified at 1th iter
Time: prepare 0.0079    bound 0.0140    transfer 0.0019    finalize 0.0028    func 0.1966    
Accumulated time: func 0.7666    prepare 0.0602    bound 0.5206    transfer 0.0071    finalize 0.0122    
all_split False
======================Cut inference begins======================
max lb tensor(0.21477643) min lb tensor(0.00326747)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.046981096267700195 
BICCOS Cumulative time: 0.12677669525146484
Preprocessing time: 0.012294530868530273 Inference time: 0.01971912384033203 Add cuts time: 0.014221668243408203 Cut analysis time: 0.0007457733154296875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0006    decision 0.1395    set_bounds 0.0121    solve 0.1967    add 0.0348    
Accumulated time: pickout 0.0108    decision 0.7311    set_bounds 0.0629    solve 0.7124    add 0.5201    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
154 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38]), tensor([-1.]), tensor([0]), tensor([4.82319185e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85, 24]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([2.35122798e-07, 1.41759440e-01, 2.05405042e-01, 4.27118391e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85, 24]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.35122798e-07, 1.41759440e-01, 2.05405042e-01, 1.08482167e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.35122798e-07, 1.41759440e-01, 6.84872121e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.35122798e-07, 2.40684554e-01, 1.56238124e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1973]), tensor([-1.]), tensor([0]), tensor([1.73683645e-09]), tensor([4])), '/input-12': ([38, 6, 85, 24], [1.0, 1.0, 1.0, -1.0], [0, 0, 0, 0], [2.3512279767601285e-07, 0.24068455398082733, 0.07531128823757172, 0.04194067418575287], [0, 1, 2, 3])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1973]), tensor([1.]), tensor([0]), tensor([1.57899475]), tensor([4])), '/input-12': ([38, 6, 85, 24], [1.0, 1.0, 1.0, -1.0], [0, 0, 0, 0], [2.3512279767601285e-07, 0.24068455398082733, 0.07531128823757172, 0.04194067418575287], [0, 1, 2, 3])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85, 24]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([2.35122798e-07, 2.40684554e-01, 7.53112882e-02, 9.92555469e-02]), tensor([0, 1, 2, 3]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4625129699707031
10 lb beta sum: 1.036932110786438, worst -0.4538382887840271
Time: prepare 0.0005    bound 0.1316    transfer 0.0001    finalize 0.0002    func 0.1325    
Accumulated time: func 0.8991    prepare 0.0607    bound 0.6522    transfer 0.0072    finalize 0.0124    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 6] [/input-12, 24] 
split level 1: [/input-12, 85] [/input-8, 1973] 
split level 2: [/input-12, 24] [/input-12, 46] 
split level 3: [/input-8, 1973] [/input-8, 1971] 
split level 4: [/input-12, 46] [/input-8, 1965] 
split level 5: [/input-8, 1971] [/input-12, 2] 
split level 6: [/input-8, 1965] [/input-8, 1706] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5044400691986084, worst -0.24105891585350037
10 lb beta sum: 0.5735693573951721, worst -0.1468353271484375
Time: prepare 0.0119    bound 0.1343    transfer 0.0009    finalize 0.0013    func 0.1501    
Accumulated time: func 1.0493    prepare 0.0730    bound 0.7864    transfer 0.0081    finalize 0.0137    
all_split False
======================Cut inference begins======================
max lb tensor(0.25615799) min lb tensor(-0.14645672)
Number of Verified Splits: 185 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.5020337104797363, worst -0.3440241813659668
10 lb beta sum: 1.2223920822143555, worst -0.1966409683227539
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 13
#cuts 4-6: 27
#cuts 7-9: 16
#cuts >= 20: 0
BICCOS time: 0.26749372482299805 
BICCOS Cumulative time: 0.3942704200744629
Preprocessing time: 0.007105350494384766 Inference time: 0.24867939949035645 Add cuts time: 0.009466171264648438 Cut analysis time: 0.0022428035736083984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14646 (7), -0.14345 (7), -0.13694 (7), -0.13475 (7), -0.13370 (7), -0.13001 (7), -0.12778 (7), -0.12320 (7), -0.07313 (7), -0.07266 (7), -0.07036 (7), -0.07010 (7), -0.06374 (7), -0.06341 (7), -0.06320 (7), -0.06277 (7), -0.06189 (7), -0.06183 (7), -0.06118 (7), -0.06014 (7), 
Length of domains: 71
Time: pickout 0.0006    decision 0.0203    set_bounds 0.0242    solve 0.1502    add 0.0086    
Accumulated time: pickout 0.0114    decision 0.7515    set_bounds 0.0871    solve 0.8626    add 0.5286    
Current (lb-rhs): -0.14645671844482422
225 domains visited
Cumulative time: 2.905810594558716

BaB round 2
batch: 71
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 2] [/input-8, 1950] [/input-8, 1655] [/input-12, 2] [/input-12, 2] [/input-8, 1950] [/input-8, 1706] [/input-8, 1706] [/input-8, 1655] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12909269332885742
10 lb beta sum: 0.3391742408275604, worst -0.1221323013305664
Time: prepare 0.0057    bound 0.1358    transfer 0.0014    finalize 0.0016    func 0.1463    
Accumulated time: func 1.1956    prepare 0.0789    bound 0.9222    transfer 0.0095    finalize 0.0153    
all_split False
======================Cut inference begins======================
max lb tensor(0.31641182) min lb tensor(-0.12186527)
Number of Verified Splits: 162 of 284
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 11
#cuts 4-6: 7
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.027529478073120117 
BICCOS Cumulative time: 0.421799898147583
Preprocessing time: 0.008372068405151367 Inference time: 0.014944076538085938 Add cuts time: 0.0035619735717773438 Cut analysis time: 0.0006513595581054688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12187 (9), -0.11828 (9), -0.11249 (9), -0.11226 (9), -0.11045 (9), -0.11027 (9), -0.10848 (9), -0.10540 (9), -0.10430 (9), -0.10329 (9), -0.10178 (9), -0.10132 (9), -0.09839 (9), -0.09751 (9), -0.09514 (9), -0.09152 (9), -0.06412 (9), -0.06365 (9), -0.06136 (9), -0.06098 (9), 
Length of domains: 122
Time: pickout 0.0018    decision 0.0173    set_bounds 0.0187    solve 0.1464    add 0.0014    
Accumulated time: pickout 0.0132    decision 0.7687    set_bounds 0.1058    solve 1.0090    add 0.5300    
Current (lb-rhs): -0.12186527252197266
347 domains visited
Cumulative time: 3.1200668811798096

BaB round 3
batch: 122
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1655] [/input-8, 1950] [/input-12, 56] [/input-8, 1706] [/input-8, 1655] [/input-8, 1950] [/input-8, 1950] [/input-8, 1655] [/input-12, 56] [/input-8, 1706] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12185525894165039
10 lb beta sum: 0.46073198318481445, worst -0.11507987976074219
Time: prepare 0.0050    bound 0.1328    transfer 0.0025    finalize 0.0014    func 0.1436    
Accumulated time: func 1.3392    prepare 0.0841    bound 1.0550    transfer 0.0120    finalize 0.0167    
all_split False
======================Cut inference begins======================
max lb tensor(0.41485763) min lb tensor(-0.11493874)
Number of Verified Splits: 116 of 244
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 13
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.023206233978271484 
BICCOS Cumulative time: 0.4450061321258545
Preprocessing time: 0.008663415908813477 Inference time: 0.011108636856079102 Add cuts time: 0.0027654170989990234 Cut analysis time: 0.0006687641143798828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11494 (10), -0.11138 (10), -0.11027 (10), -0.10674 (10), -0.10620 (10), -0.10523 (10), -0.10441 (10), -0.10376 (10), -0.10152 (10), -0.10019 (10), -0.09939 (10), -0.09925 (10), -0.09871 (10), -0.09785 (10), -0.09704 (10), -0.09651 (10), -0.09631 (10), -0.09551 (10), -0.09536 (10), -0.09428 (10), 
Length of domains: 128
Time: pickout 0.0020    decision 0.0154    set_bounds 0.0103    solve 0.1436    add 0.0014    
Accumulated time: pickout 0.0152    decision 0.7842    set_bounds 0.1161    solve 1.1526    add 0.5315    
Current (lb-rhs): -0.11493873596191406
475 domains visited
Cumulative time: 3.3169565200805664

BaB round 4
batch: 128
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1399] [/input-12, 56] [/input-8, 1399] [/input-12, 56] [/input-8, 1399] [/input-12, 56] [/input-8, 1399] [/input-12, 2] [/input-8, 1399] [/input-12, 56] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5245174765586853, worst -0.1566900759935379
10 lb beta sum: 1.3320550918579102, worst -0.10442835092544556
Time: prepare 0.0113    bound 0.1319    transfer 0.0005    finalize 0.0014    func 0.1472    
Accumulated time: func 1.4863    prepare 0.0956    bound 1.1869    transfer 0.0125    finalize 0.0181    
all_split False
======================Cut inference begins======================
max lb tensor(0.66784334) min lb tensor(-0.10409182)
Number of Verified Splits: 220 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 15
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.030609846115112305 
BICCOS Cumulative time: 0.4756159782409668
Preprocessing time: 0.007436513900756836 Inference time: 0.020651578903198242 Add cuts time: 0.0019443035125732422 Cut analysis time: 0.0005774497985839844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10409 (11), -0.10107 (11), -0.10046 (11), -0.09936 (11), -0.09859 (11), -0.09578 (11), -0.09440 (11), -0.09355 (11), -0.09290 (11), -0.09102 (11), -0.09062 (11), -0.09034 (11), -0.08929 (11), -0.08552 (11), -0.08537 (11), -0.08272 (11), -0.04974 (11), -0.04918 (11), -0.03965 (11), -0.03929 (11), 
Length of domains: 36
Time: pickout 0.0024    decision 0.0180    set_bounds 0.0118    solve 0.1472    add 0.0012    
Accumulated time: pickout 0.0176    decision 0.8022    set_bounds 0.1279    solve 1.2999    add 0.5326    
Current (lb-rhs): -0.1040918231010437
511 domains visited
Cumulative time: 3.5292646884918213

BaB round 5
batch: 36
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1950] [/input-8, 1950] [/input-8, 1950] [/input-12, 2] [/input-8, 1950] [/input-12, 2] [/input-8, 1950] [/input-12, 2] [/input-8, 1950] [/input-12, 2] 
split level 1: [/input-8, 1399] [/input-8, 1399] [/input-8, 1655] [/input-8, 1955] [/input-8, 1655] [/input-8, 1955] [/input-8, 1655] [/input-8, 1955] [/input-8, 1655] [/input-8, 1955] 
split level 2: [/input-8, 1704] [/input-8, 1704] [/input-8, 1399] [/input-8, 1655] [/input-8, 1399] [/input-8, 1655] [/input-8, 1399] [/input-8, 1655] [/input-8, 1399] [/input-8, 1655] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10178947448730469
10 lb beta sum: 0.9083746671676636, worst -0.09877443313598633
Time: prepare 0.0056    bound 0.1377    transfer 0.0006    finalize 0.0013    func 0.1471    
Accumulated time: func 1.6334    prepare 0.1014    bound 1.3245    transfer 0.0131    finalize 0.0195    
all_split False
======================Cut inference begins======================
max lb tensor(0.26610923) min lb tensor(-0.09869528)
Number of Verified Splits: 176 of 288
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.029803991317749023 
BICCOS Cumulative time: 0.5054199695587158
Preprocessing time: 0.008331537246704102 Inference time: 0.019183874130249023 Add cuts time: 0.001897573471069336 Cut analysis time: 0.0003910064697265625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09870 (14), -0.09722 (14), -0.09512 (14), -0.09397 (14), -0.09359 (14), -0.09250 (14), -0.09248 (14), -0.09229 (14), -0.09091 (14), -0.09081 (14), -0.09043 (14), -0.08917 (14), -0.08900 (14), -0.08889 (14), -0.08859 (14), -0.08773 (14), -0.08761 (14), -0.08758 (14), -0.08751 (14), -0.08703 (14), 
Length of domains: 112
Time: pickout 0.0014    decision 0.0164    set_bounds 0.0187    solve 0.1472    add 0.0016    
Accumulated time: pickout 0.0190    decision 0.8186    set_bounds 0.1466    solve 1.4470    add 0.5342    
Current (lb-rhs): -0.09869527816772461
623 domains visited
Cumulative time: 3.745201826095581

BaB round 6
batch: 112
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] [/input-12, 34] [/input-8, 1967] [/input-12, 34] [/input-12, 34] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0986948013305664
10 lb beta sum: 0.7407845854759216, worst -0.09479236602783203
Time: prepare 0.0046    bound 0.1315    transfer 0.0015    finalize 0.0012    func 0.1403    
Accumulated time: func 1.7738    prepare 0.1062    bound 1.4560    transfer 0.0146    finalize 0.0207    
all_split False
======================Cut inference begins======================
max lb tensor(0.40423989) min lb tensor(-0.09470177)
Number of Verified Splits: 128 of 224
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 18
#cuts >= 20: 0
BICCOS time: 0.02229475975036621 
BICCOS Cumulative time: 0.527714729309082
Preprocessing time: 0.006521701812744141 Inference time: 0.014070749282836914 Add cuts time: 0.0012607574462890625 Cut analysis time: 0.00044155120849609375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09470 (15), -0.09325 (15), -0.09165 (15), -0.09011 (15), -0.08997 (15), -0.08850 (15), -0.08843 (15), -0.08823 (15), -0.08693 (15), -0.08692 (15), -0.08677 (15), -0.08561 (15), -0.08541 (15), -0.08499 (15), -0.08479 (15), -0.08404 (15), -0.08365 (15), -0.08346 (15), -0.08342 (15), -0.08332 (15), 
Length of domains: 96
Time: pickout 0.0021    decision 0.0150    set_bounds 0.0097    solve 0.1404    add 0.0014    
Accumulated time: pickout 0.0212    decision 0.8336    set_bounds 0.1563    solve 1.5874    add 0.5356    
Current (lb-rhs): -0.09470176696777344
719 domains visited
Cumulative time: 3.936906099319458

BaB round 7
batch: 96
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] 
split level 1: [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09132528305053711
10 lb beta sum: 1.0438439846038818, worst -0.08830052614212036
Time: prepare 0.0075    bound 0.1331    transfer 0.0026    finalize 0.0021    func 0.1479    
Accumulated time: func 1.9216    prepare 0.1140    bound 1.5891    transfer 0.0172    finalize 0.0228    
all_split False
======================Cut inference begins======================
max lb tensor(0.27435136) min lb tensor(-0.08827510)
Number of Verified Splits: 275 of 384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.047884464263916016 
BICCOS Cumulative time: 0.575599193572998
Preprocessing time: 0.010894060134887695 Inference time: 0.033586740493774414 Add cuts time: 0.002973794937133789 Cut analysis time: 0.0004298686981201172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08828 (17), -0.08692 (17), -0.08527 (17), -0.08379 (17), -0.08354 (17), -0.08255 (17), -0.08218 (17), -0.08175 (17), -0.08097 (17), -0.08055 (17), -0.08037 (17), -0.07967 (17), -0.07911 (17), -0.07856 (17), -0.07829 (17), -0.07807 (17), -0.07780 (17), -0.07704 (17), -0.07700 (17), -0.07691 (17), 
Length of domains: 109
Time: pickout 0.0018    decision 0.0168    set_bounds 0.0248    solve 0.1480    add 0.0015    
Accumulated time: pickout 0.0230    decision 0.8504    set_bounds 0.1811    solve 1.7354    add 0.5371    
Current (lb-rhs): -0.08827510476112366
828 domains visited
Cumulative time: 4.179095029830933

BaB round 8
batch: 109
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-8, 1647] [/input-8, 1647] [/input-8, 1647] [/input-8, 1647] [/input-8, 1647] [/input-8, 1647] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09010076522827148
10 lb beta sum: 0.8534913659095764, worst -0.08634018898010254
Time: prepare 0.0043    bound 0.1389    transfer 0.0012    finalize 0.0016    func 0.1476    
Accumulated time: func 2.0692    prepare 0.1185    bound 1.7281    transfer 0.0184    finalize 0.0244    
all_split False
======================Cut inference begins======================
max lb tensor(0.47488916) min lb tensor(-0.08633250)
Number of Verified Splits: 45 of 218
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.013500690460205078 
BICCOS Cumulative time: 0.5890998840332031
Preprocessing time: 0.0065441131591796875 Inference time: 0.005524873733520508 Add cuts time: 0.0004980564117431641 Cut analysis time: 0.0009336471557617188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08633 (18), -0.08502 (18), -0.08290 (18), -0.08159 (18), -0.08149 (18), -0.08029 (18), -0.07982 (18), -0.07975 (18), -0.07844 (18), -0.07823 (18), -0.07807 (18), -0.07684 (18), -0.07673 (18), -0.07628 (18), -0.07616 (18), -0.07507 (18), -0.07501 (18), -0.07493 (18), -0.07488 (18), -0.07470 (18), 
Length of domains: 173
Time: pickout 0.0026    decision 0.0170    set_bounds 0.0092    solve 0.1476    add 0.0015    
Accumulated time: pickout 0.0256    decision 0.8674    set_bounds 0.1904    solve 1.8830    add 0.5385    
Current (lb-rhs): -0.08633249998092651
1001 domains visited
Cumulative time: 4.371203660964966

BaB round 9
batch: 173
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1686958074569702, worst -0.08404368162155151
10 lb beta sum: 1.1686958074569702, worst -0.0840107798576355
Time: prepare 0.0148    bound 0.1377    transfer 0.0013    finalize 0.0018    func 0.1578    
Accumulated time: func 2.2270    prepare 0.1335    bound 1.8657    transfer 0.0198    finalize 0.0261    
all_split False
======================Cut inference begins======================
max lb tensor(0.24031818) min lb tensor(-0.08400172)
Number of Verified Splits: 45 of 346
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.016802310943603516 
BICCOS Cumulative time: 0.6059021949768066
Preprocessing time: 0.010057687759399414 Inference time: 0.005376577377319336 Add cuts time: 0.00040531158447265625 Cut analysis time: 0.0009627342224121094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08400 (19), -0.08269 (19), -0.08059 (19), -0.07925 (19), -0.07919 (19), -0.07796 (19), -0.07762 (19), -0.07748 (19), -0.07630 (19), -0.07593 (19), -0.07574 (19), -0.07454 (19), -0.07442 (19), -0.07402 (19), -0.07396 (19), -0.07289 (19), -0.07276 (19), -0.07262 (19), -0.07258 (19), -0.07257 (19), 
Length of domains: 301
Time: pickout 0.0035    decision 0.0219    set_bounds 0.0154    solve 0.1579    add 0.0024    
Accumulated time: pickout 0.0290    decision 0.8893    set_bounds 0.2057    solve 2.0409    add 0.5410    
Current (lb-rhs): -0.08400171995162964
1302 domains visited
Cumulative time: 4.589691400527954

BaB round 10
batch: 301
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1936144828796387, worst -0.07982748746871948
10 lb beta sum: 1.1936144828796387, worst -0.07979553937911987
Time: prepare 0.0258    bound 0.1410    transfer 0.0016    finalize 0.0024    func 0.1748    
Accumulated time: func 2.4018    prepare 0.1594    bound 2.0068    transfer 0.0214    finalize 0.0286    
all_split False
======================Cut inference begins======================
max lb tensor(0.24470747) min lb tensor(-0.07978410)
Number of Verified Splits: 47 of 602
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.024927377700805664 
BICCOS Cumulative time: 0.6308295726776123
Preprocessing time: 0.017101764678955078 Inference time: 0.0059316158294677734 Add cuts time: 0.00045371055603027344 Cut analysis time: 0.001440286636352539
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07978 (20), -0.07849 (20), -0.07662 (20), -0.07646 (20), -0.07531 (20), -0.07507 (20), -0.07504 (20), -0.07374 (20), -0.07327 (20), -0.07327 (20), -0.07306 (20), -0.07195 (20), -0.07188 (20), -0.07179 (20), -0.07165 (20), -0.07156 (20), -0.07057 (20), -0.07041 (20), -0.07029 (20), -0.07015 (20), 
Length of domains: 555
Time: pickout 0.0060    decision 0.0269    set_bounds 0.0254    solve 0.1750    add 0.0030    
Accumulated time: pickout 0.0351    decision 0.9162    set_bounds 0.2311    solve 2.2159    add 0.5440    
Current (lb-rhs): -0.079784095287323
1857 domains visited
Cumulative time: 4.851670742034912

BaB round 11
batch: 555
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] 
cut re-enabled after branching node selection
0 lb beta sum: 1.2082345485687256, worst -0.07596129179000854
10 lb beta sum: 1.2082345485687256, worst -0.07594460248947144
Time: prepare 0.0477    bound 0.1448    transfer 0.0021    finalize 0.0058    func 0.2076    
Accumulated time: func 2.6094    prepare 0.2074    bound 2.1516    transfer 0.0235    finalize 0.0344    
all_split False
======================Cut inference begins======================
max lb tensor(0.00714296) min lb tensor(-0.07592648)
Number of Verified Splits: 62 of 1110
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.042304039001464844 
BICCOS Cumulative time: 0.6731336116790771
Preprocessing time: 0.03299450874328613 Inference time: 0.007938623428344727 Add cuts time: 0.0007245540618896484 Cut analysis time: 0.0006463527679443359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07593 (21), -0.07462 (21), -0.07455 (21), -0.07322 (21), -0.07267 (21), -0.07255 (21), -0.07135 (21), -0.07129 (21), -0.07119 (21), -0.07114 (21), -0.07110 (21), -0.06995 (21), -0.06988 (21), -0.06983 (21), -0.06967 (21), -0.06942 (21), -0.06937 (21), -0.06903 (21), -0.06852 (21), -0.06805 (21), 
Length of domains: 1048
Time: pickout 0.0080    decision 0.0415    set_bounds 0.0452    solve 0.2079    add 0.0049    
Accumulated time: pickout 0.0431    decision 0.9577    set_bounds 0.2763    solve 2.4238    add 0.5489    
Current (lb-rhs): -0.07592648267745972
2905 domains visited
Cumulative time: 5.20283579826355

BaB round 12
batch: 1048
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07860851287841797
10 lb beta sum: 1.2182995080947876, worst -0.07404303550720215
Time: prepare 0.0502    bound 0.2305    transfer 0.0046    finalize 0.0099    func 0.3097    
Accumulated time: func 2.9191    prepare 0.2579    bound 2.3821    transfer 0.0281    finalize 0.0443    
all_split False
======================Cut inference begins======================
max lb tensor(0.24235338) min lb tensor(-0.07401389)
Number of Verified Splits: 227 of 2096
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 21
#cuts 4-6: 1
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.10268902778625488 
BICCOS Cumulative time: 0.775822639465332
Preprocessing time: 0.06451249122619629 Inference time: 0.03434300422668457 Add cuts time: 0.0031096935272216797 Cut analysis time: 0.0007238388061523438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07401 (22), -0.07271 (22), -0.07209 (22), -0.07076 (22), -0.07072 (22), -0.07071 (22), -0.06941 (22), -0.06930 (22), -0.06927 (22), -0.06879 (22), -0.06870 (22), -0.06799 (22), -0.06751 (22), -0.06747 (22), -0.06746 (22), -0.06735 (22), -0.06729 (22), -0.06715 (22), -0.06615 (22), -0.06605 (22), 
Length of domains: 1869
Time: pickout 0.0153    decision 0.0672    set_bounds 0.2174    solve 0.3100    add 0.0076    
Accumulated time: pickout 0.0584    decision 1.0249    set_bounds 0.4937    solve 2.7338    add 0.5564    
Current (lb-rhs): -0.07401388883590698
4774 domains visited
Cumulative time: 5.9259033203125

BaB round 13
batch: 1869
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07554817199707031
10 lb beta sum: 1.4320999383926392, worst -0.07002371549606323
Time: prepare 0.0924    bound 0.3537    transfer 0.0161    finalize 0.0183    func 0.5057    
Accumulated time: func 3.4248    prepare 0.3506    bound 2.7358    transfer 0.0441    finalize 0.0626    
all_split False
======================Cut inference begins======================
max lb tensor(0.00878173) min lb tensor(-0.07000244)
Number of Verified Splits: 441 of 3738
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 21
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.19482803344726562 
BICCOS Cumulative time: 0.9706506729125977
Preprocessing time: 0.11458468437194824 Inference time: 0.07190108299255371 Add cuts time: 0.0075893402099609375 Cut analysis time: 0.0007529258728027344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07000 (23), -0.06868 (23), -0.06865 (23), -0.06863 (23), -0.06734 (23), -0.06731 (23), -0.06668 (23), -0.06665 (23), -0.06538 (23), -0.06536 (23), -0.06535 (23), -0.06529 (23), -0.06528 (23), -0.06523 (23), -0.06519 (23), -0.06406 (23), -0.06398 (23), -0.06396 (23), -0.06390 (23), -0.06389 (23), 
Length of domains: 3297
Time: pickout 0.0394    decision 0.1098    set_bounds 0.1604    solve 0.5067    add 0.0132    
Accumulated time: pickout 0.0978    decision 1.1347    set_bounds 0.6541    solve 3.2405    add 0.5697    
Current (lb-rhs): -0.07000243663787842
8071 domains visited
Cumulative time: 6.957132577896118

BaB round 14
batch: 3297
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07281637191772461
10 lb beta sum: 1.437778115272522, worst -0.06725037097930908
Time: prepare 0.1694    bound 0.5668    transfer 0.0367    finalize 0.0366    func 0.8532    
Accumulated time: func 4.2781    prepare 0.5202    bound 3.3027    transfer 0.0809    finalize 0.0993    
all_split False
======================Cut inference begins======================
max lb tensor(0.01383109) min lb tensor(-0.06724000)
Number of Verified Splits: 951 of 6594
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 22
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.5546047687530518 
BICCOS Cumulative time: 1.5252554416656494
Preprocessing time: 0.20673036575317383 Inference time: 0.3262825012207031 Add cuts time: 0.02088165283203125 Cut analysis time: 0.0007102489471435547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06724 (24), -0.06724 (24), -0.06594 (24), -0.06591 (24), -0.06552 (24), -0.06548 (24), -0.06420 (24), -0.06414 (24), -0.06395 (24), -0.06395 (24), -0.06389 (24), -0.06354 (24), -0.06354 (24), -0.06263 (24), -0.06254 (24), -0.06250 (24), -0.06249 (24), -0.06248 (24), -0.06245 (24), -0.06224 (24), 
Length of domains: 5643
Time: pickout 0.0532    decision 0.3359    set_bounds 0.2804    solve 0.8546    add 0.0218    
Accumulated time: pickout 0.1510    decision 1.4706    set_bounds 0.9345    solve 4.0951    add 0.5914    
Current (lb-rhs): -0.06723999977111816
13714 domains visited
Cumulative time: 9.071088552474976

BaB round 15
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input, 1012] [/input-8, 1704] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0691843032836914
10 lb beta sum: 1.497926950454712, worst -0.06394743919372559
Time: prepare 0.2109    bound 0.6824    transfer 0.0523    finalize 0.0447    func 1.0441    
Accumulated time: func 5.3222    prepare 0.7314    bound 3.9851    transfer 0.1332    finalize 0.1439    
all_split False
======================Cut inference begins======================
max lb tensor(0.01106715) min lb tensor(-0.06392056)
Number of Verified Splits: 1077 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 22
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.6676077842712402 
BICCOS Cumulative time: 2.1928632259368896
Preprocessing time: 0.45294976234436035 Inference time: 0.1959240436553955 Add cuts time: 0.01786971092224121 Cut analysis time: 0.0008642673492431641
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06392 (25), -0.06354 (24), -0.06349 (25), -0.06348 (25), -0.06284 (25), -0.06284 (25), -0.06224 (24), -0.06220 (25), -0.06219 (25), -0.06176 (25), -0.06176 (25), -0.06153 (25), -0.06150 (25), -0.06140 (24), -0.06110 (25), -0.06107 (25), -0.06046 (25), -0.06046 (25), -0.06028 (24), -0.06025 (25), 
Length of domains: 8662
Time: pickout 0.0717    decision 0.2244    set_bounds 0.3608    solve 1.0459    add 0.1148    
Accumulated time: pickout 0.2227    decision 1.6950    set_bounds 1.2954    solve 5.1411    add 0.7062    
Current (lb-rhs): -0.06392055749893188
20829 domains visited
current_vram/total_varm: 35.5GB/99.9GB, batch_size increase to 8192
Cumulative time: 11.58005952835083

BaB round 16
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1967] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 1967] [/input-8, 510] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0673823356628418
10 lb beta sum: 1.4345829486846924, worst -0.06344056129455566
Time: prepare 0.4255    bound 1.2879    transfer 0.1717    finalize 0.1042    func 2.0976    
Accumulated time: func 7.4198    prepare 1.1572    bound 5.2730    transfer 0.3049    finalize 0.2481    
all_split False
======================Cut inference begins======================
max lb tensor(0.01237762) min lb tensor(-0.06342685)
Number of Verified Splits: 2857 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 23
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 1.084380865097046 
BICCOS Cumulative time: 3.2772440910339355
Preprocessing time: 0.5233266353607178 Inference time: 0.5142924785614014 Add cuts time: 0.04591965675354004 Cut analysis time: 0.0008420944213867188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06343 (26), -0.06342 (26), -0.06280 (26), -0.06279 (26), -0.06213 (26), -0.06213 (26), -0.06169 (26), -0.06168 (26), -0.06149 (26), -0.06105 (26), -0.06102 (26), -0.06039 (26), -0.06038 (26), -0.06018 (26), -0.05995 (25), -0.05977 (25), -0.05976 (25), -0.05973 (26), -0.05951 (26), -0.05925 (26), 
Length of domains: 13997
Time: pickout 0.1373    decision 0.4425    set_bounds 0.9174    solve 2.3264    add 0.0450    
Accumulated time: pickout 0.3600    decision 2.1375    set_bounds 2.2128    solve 7.4675    add 0.7512    
Current (lb-rhs): -0.06342685222625732
34356 domains visited
current_vram/total_varm: 35.5GB/99.9GB, batch_size increase to 16384
Cumulative time: 16.581714391708374

BaB round 17
batch: 13997
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1704] [/input-8, 1704] [/input-8, 1967] [/input-8, 1967] [/input-8, 1704] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0650181770324707
10 lb beta sum: 1.4496212005615234, worst -0.061116933822631836
Time: prepare 0.7357    bound 2.1495    transfer 0.3026    finalize 0.1538    func 3.5249    
Accumulated time: func 10.9448    prepare 1.8933    bound 7.4225    transfer 0.6075    finalize 0.4019    
all_split False
======================Cut inference begins======================
max lb tensor(0.46787548) min lb tensor(-0.06110942)
Number of Verified Splits: 15562 of 27994
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 28
#cuts >= 20: 0
BICCOS time: 4.169462203979492 
BICCOS Cumulative time: 7.446706295013428
Preprocessing time: 0.906996488571167 Inference time: 3.1062169075012207 Add cuts time: 0.15546321868896484 Cut analysis time: 0.0007855892181396484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06111 (27), -0.06111 (27), -0.06044 (27), -0.06043 (27), -0.05973 (27), -0.05973 (27), -0.05972 (26), -0.05971 (26), -0.05937 (27), -0.05937 (27), -0.05909 (26), -0.05905 (27), -0.05899 (27), -0.05870 (27), -0.05867 (27), -0.05842 (26), -0.05841 (26), -0.05799 (27), -0.05798 (27), -0.05784 (27), 
Length of domains: 12432
Time: pickout 0.3028    decision 1.0073    set_bounds 1.5512    solve 3.8012    add 0.0983    
Accumulated time: pickout 0.6627    decision 3.1448    set_bounds 3.7640    solve 11.2687    add 0.8495    
Current (lb-rhs): -0.06110942363739014
46788 domains visited
Cumulative time: 27.694486618041992

BaB round 18
batch: 12432
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1704] [/input-8, 1704] [/input-8, 1967] [/input-8, 1704] [/input-8, 1704] [/input-8, 1704] [/input-8, 1704] [/input-8, 1704] [/input-8, 1967] [/input-8, 510] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06422615051269531
10 lb beta sum: 1.7346930503845215, worst -0.061110734939575195
Time: prepare 0.6532    bound 1.9196    transfer 0.2655    finalize 0.1417    func 3.1424    
Accumulated time: func 14.0871    prepare 2.5469    bound 9.3421    transfer 0.8730    finalize 0.5436    
all_split False
======================Cut inference begins======================
max lb tensor(0.70828509) min lb tensor(-0.06110448)
Number of Verified Splits: 19327 of 24864
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 30
#cuts >= 20: 0
BICCOS time: 4.8837549686431885 
BICCOS Cumulative time: 12.330461263656616
Preprocessing time: 1.1416866779327393 Inference time: 3.5273735523223877 Add cuts time: 0.21386194229125977 Cut analysis time: 0.0008327960968017578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06110 (28), -0.06110 (28), -0.06043 (28), -0.05972 (28), -0.05971 (28), -0.05842 (28), -0.05740 (27), -0.05739 (27), -0.05696 (28), -0.05695 (28), -0.05674 (27), -0.05672 (28), -0.05621 (28), -0.05603 (27), -0.05602 (27), -0.05579 (28), -0.05577 (28), -0.05574 (28), -0.05573 (28), -0.05543 (28), 
Length of domains: 5537
Time: pickout 0.2744    decision 0.6848    set_bounds 1.4289    solve 3.1474    add 0.0225    
Accumulated time: pickout 0.9371    decision 3.8296    set_bounds 5.1929    solve 14.4161    add 0.8720    
Current (lb-rhs): -0.06110447645187378
52325 domains visited
Cumulative time: 38.336982011795044

BaB round 19
batch: 5537
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1812] [/input, 1463] [/input-8, 1812] [/input, 1463] [/input-8, 1812] [/input, 1463] [/input-8, 1812] [/input, 1463] [/input-8, 1812] [/input-8, 1812] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.062247276306152344
10 lb beta sum: 1.6731959581375122, worst -0.05914044380187988
Time: prepare 0.2918    bound 0.8987    transfer 0.0881    finalize 0.0636    func 1.4147    
Accumulated time: func 15.5019    prepare 2.8390    bound 10.2408    transfer 0.9611    finalize 0.6072    
all_split False
======================Cut inference begins======================
max lb tensor(0.47696137) min lb tensor(-0.05913037)
Number of Verified Splits: 6787 of 11074
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 32
#cuts >= 20: 0
BICCOS time: 1.8634145259857178 
BICCOS Cumulative time: 14.193875789642334
Preprocessing time: 0.5987753868103027 Inference time: 1.2088141441345215 Add cuts time: 0.054959774017333984 Cut analysis time: 0.0008652210235595703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05913 (29), -0.05906 (29), -0.05841 (29), -0.05837 (29), -0.05772 (29), -0.05766 (29), -0.05695 (29), -0.05694 (29), -0.05578 (29), -0.05577 (29), -0.05543 (28), -0.05534 (28), -0.05499 (29), -0.05493 (29), -0.05473 (29), -0.05467 (28), -0.05426 (29), -0.05424 (29), -0.05423 (29), -0.05415 (29), 
Length of domains: 4287
Time: pickout 0.1083    decision 0.4977    set_bounds 0.4990    solve 1.4177    add 0.0229    
Accumulated time: pickout 1.0454    decision 4.3274    set_bounds 5.6919    solve 15.8338    add 0.8949    
Current (lb-rhs): -0.05913037061691284
56612 domains visited
Cumulative time: 42.81506013870239

BaB round 20
batch: 4287
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06024646759033203
10 lb beta sum: 1.8356010913848877, worst -0.05470871925354004
Time: prepare 0.2274    bound 0.7218    transfer 0.0523    finalize 0.0501    func 1.3139    
Accumulated time: func 16.8158    prepare 3.0668    bound 10.9626    transfer 1.0134    finalize 0.6574    
all_split False
======================Cut inference begins======================
max lb tensor(0.47757971) min lb tensor(-0.05466425)
Number of Verified Splits: 3775 of 8574
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 32
#cuts >= 20: 0
BICCOS time: 1.0087742805480957 
BICCOS Cumulative time: 15.20265007019043
Preprocessing time: 0.2797508239746094 Inference time: 0.6930925846099854 Add cuts time: 0.0352020263671875 Cut analysis time: 0.0007288455963134766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05466 (30), -0.05455 (30), -0.05393 (30), -0.05385 (30), -0.05331 (30), -0.05321 (30), -0.05254 (30), -0.05249 (30), -0.05130 (30), -0.05125 (30), -0.05096 (29), -0.05087 (29), -0.05045 (30), -0.05042 (30), -0.05024 (30), -0.05016 (29), -0.04985 (30), -0.04981 (30), -0.04977 (30), -0.04965 (30), 
Length of domains: 4799
Time: pickout 0.0827    decision 0.2394    set_bounds 0.3827    solve 1.3168    add 0.0265    
Accumulated time: pickout 1.1281    decision 4.5668    set_bounds 6.0746    solve 17.1506    add 0.9214    
Current (lb-rhs): -0.0546642541885376
61411 domains visited
Cumulative time: 45.914315700531006

BaB round 21
batch: 4799
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1812] [/input, 1463] [/input, 1463] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] 
cut re-enabled after branching node selection
0 lb beta sum: 2.0921740531921387, worst -0.05354607105255127
10 lb beta sum: 2.0921740531921387, worst -0.053510308265686035
Time: prepare 0.4749    bound 0.7897    transfer 0.0619    finalize 0.0544    func 1.4450    
Accumulated time: func 18.2607    prepare 3.5419    bound 11.7523    transfer 1.0753    finalize 0.7118    
all_split False
======================Cut inference begins======================
max lb tensor(0.24077988) min lb tensor(-0.05348504)
Number of Verified Splits: 1969 of 9598
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 32
#cuts >= 20: 0
BICCOS time: 0.9156839847564697 
BICCOS Cumulative time: 16.1183340549469
Preprocessing time: 0.314730167388916 Inference time: 0.5791308879852295 Add cuts time: 0.02104330062866211 Cut analysis time: 0.0007796287536621094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05349 (31), -0.05336 (31), -0.05275 (31), -0.05266 (31), -0.05213 (31), -0.05203 (31), -0.05135 (31), -0.05130 (31), -0.05091 (30), -0.05077 (30), -0.05011 (31), -0.05011 (30), -0.05007 (31), -0.04954 (30), -0.04944 (30), -0.04927 (31), -0.04924 (31), -0.04874 (30), -0.04865 (31), -0.04863 (31), 
Length of domains: 7629
Time: pickout 0.1110    decision 0.2664    set_bounds 0.5983    solve 1.4472    add 0.0230    
Accumulated time: pickout 1.2391    decision 4.8332    set_bounds 6.6729    solve 18.5978    add 0.9444    
Current (lb-rhs): -0.05348503589630127
69040 domains visited
Cumulative time: 49.307905435562134

BaB round 22
batch: 7629
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 857] [/input, 857] [/input-8, 149] [/input-8, 149] [/input, 4089] [/input-8, 149] [/input, 4089] [/input-8, 149] [/input, 4089] [/input-8, 149] 
cut re-enabled after branching node selection
0 lb beta sum: 2.0443673133850098, worst -0.052746474742889404
10 lb beta sum: 2.0443673133850098, worst -0.052728354930877686
Time: prepare 0.7568    bound 1.2094    transfer 0.1081    finalize 0.0876    func 2.2632    
Accumulated time: func 20.5240    prepare 4.2990    bound 12.9618    transfer 1.1834    finalize 0.7994    
all_split False
======================Cut inference begins======================
max lb tensor(0.23829412) min lb tensor(-0.05271262)
Number of Verified Splits: 3677 of 15258
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 33
#cuts >= 20: 0
BICCOS time: 1.5399367809295654 
BICCOS Cumulative time: 17.658270835876465
Preprocessing time: 0.4955275058746338 Inference time: 1.0051844120025635 Add cuts time: 0.03846335411071777 Cut analysis time: 0.0007615089416503906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05271 (32), -0.05211 (32), -0.05193 (32), -0.05180 (32), -0.05109 (32), -0.05048 (32), -0.04936 (32), -0.04935 (32), -0.04920 (32), -0.04909 (31), -0.04897 (31), -0.04862 (32), -0.04837 (32), -0.04829 (31), -0.04812 (32), -0.04811 (32), -0.04775 (31), -0.04771 (32), -0.04765 (31), -0.04748 (32), 
Length of domains: 11581
Time: pickout 0.1454    decision 0.4203    set_bounds 0.8947    solve 2.2667    add 0.0413    
Accumulated time: pickout 1.3845    decision 5.2535    set_bounds 7.5675    solve 20.8646    add 0.9857    
Current (lb-rhs): -0.05271261930465698
80621 domains visited
Cumulative time: 54.6694757938385

BaB round 23
batch: 11581
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3402] [/input, 3402] [/input, 857] [/input, 857] [/input, 4089] [/input, 4089] [/input, 857] [/input, 4089] [/input, 857] [/input, 4089] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05571603775024414
10 lb beta sum: 1.6975514888763428, worst -0.05116915702819824
Time: prepare 0.6430    bound 1.8151    transfer 0.2428    finalize 0.1529    func 3.2675    
Accumulated time: func 23.7915    prepare 4.9424    bound 14.7769    transfer 1.4262    finalize 0.9523    
all_split False
======================Cut inference begins======================
max lb tensor(0.47174573) min lb tensor(-0.05115718)
Number of Verified Splits: 13903 of 23162
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 37
#cuts >= 20: 0
BICCOS time: 4.0730881690979 
BICCOS Cumulative time: 21.731359004974365
Preprocessing time: 0.7479233741760254 Inference time: 3.188112735748291 Add cuts time: 0.13616061210632324 Cut analysis time: 0.0008914470672607422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05116 (33), -0.05055 (33), -0.04994 (33), -0.04985 (33), -0.04915 (33), -0.04853 (33), -0.04800 (33), -0.04781 (33), -0.04778 (33), -0.04765 (33), -0.04765 (33), -0.04756 (32), -0.04742 (32), -0.04707 (33), -0.04693 (33), -0.04682 (33), -0.04673 (32), -0.04657 (33), -0.04654 (33), -0.04632 (33), 
Length of domains: 9259
Time: pickout 0.2773    decision 0.6379    set_bounds 1.2743    solve 3.2724    add 0.0388    
Accumulated time: pickout 1.6618    decision 5.8914    set_bounds 8.8418    solve 24.1369    add 1.0245    
Current (lb-rhs): -0.05115717649459839
89880 domains visited
Cumulative time: 64.39787292480469

BaB round 24
batch: 9259
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3417] [/input, 857] [/input, 857] [/input, 857] [/input, 3402] [/input, 857] [/input, 857] [/input, 857] [/input, 3402] [/input, 857] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05373191833496094
10 lb beta sum: 2.0654547214508057, worst -0.047133684158325195
Time: prepare 0.5000    bound 1.4684    transfer 0.1908    finalize 0.1105    func 2.3925    
Accumulated time: func 26.1840    prepare 5.4427    bound 16.2452    transfer 1.6169    finalize 1.0628    
all_split False
======================Cut inference begins======================
max lb tensor(0.48839629) min lb tensor(-0.04712075)
Number of Verified Splits: 14667 of 18518
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 37
#cuts >= 20: 0
BICCOS time: 4.171257972717285 
BICCOS Cumulative time: 25.90261697769165
Preprocessing time: 0.6291320323944092 Inference time: 3.346792459487915 Add cuts time: 0.19451069831848145 Cut analysis time: 0.0008227825164794922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04712 (34), -0.04702 (34), -0.04639 (34), -0.04633 (34), -0.04578 (34), -0.04571 (34), -0.04499 (34), -0.04497 (34), -0.04379 (34), -0.04375 (34), -0.04297 (34), -0.04295 (34), -0.04276 (33), -0.04265 (33), -0.04238 (34), -0.04231 (34), -0.04224 (34), -0.04214 (34), -0.04204 (34), -0.04197 (33), 
Length of domains: 3851
Time: pickout 0.1903    decision 0.5066    set_bounds 1.0983    solve 2.3971    add 0.0123    
Accumulated time: pickout 1.8522    decision 6.3979    set_bounds 9.9401    solve 26.5340    add 1.0369    
Current (lb-rhs): -0.047120749950408936
93731 domains visited
Cumulative time: 72.92281198501587

BaB round 25
batch: 3851
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 254] [/input-8, 254] [/input-8, 254] [/input-8, 254] [/input-8, 254] [/input-8, 254] [/input-8, 254] [/input-8, 254] [/input-8, 142] [/input-8, 142] 
cut re-enabled after branching node selection
0 lb beta sum: 2.239246368408203, worst -0.04711979627609253
10 lb beta sum: 2.239246368408203, worst -0.047125041484832764
Time: prepare 0.3791    bound 0.6539    transfer 0.0354    finalize 0.0426    func 1.1610    
Accumulated time: func 27.3450    prepare 5.8221    bound 16.8991    transfer 1.6524    finalize 1.1054    
all_split False
======================Cut inference begins======================
max lb tensor(0.24745321) min lb tensor(-0.04711360)
Number of Verified Splits: 3352 of 7702
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 37
#cuts >= 20: 0
BICCOS time: 1.175328254699707 
BICCOS Cumulative time: 27.077945232391357
Preprocessing time: 0.44295263290405273 Inference time: 0.7023749351501465 Add cuts time: 0.0292661190032959 Cut analysis time: 0.0007345676422119141
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04711 (35), -0.04702 (35), -0.04637 (35), -0.04632 (35), -0.04577 (35), -0.04571 (35), -0.04499 (35), -0.04496 (35), -0.04379 (35), -0.04375 (35), -0.04296 (35), -0.04294 (35), -0.04275 (34), -0.04264 (34), -0.04237 (35), -0.04231 (35), -0.04223 (35), -0.04214 (35), -0.04203 (35), -0.04196 (34), 
Length of domains: 4350
Time: pickout 0.0866    decision 0.2152    set_bounds 0.3445    solve 1.1633    add 0.0173    
Accumulated time: pickout 1.9388    decision 6.6131    set_bounds 10.2846    solve 27.6974    add 1.0542    
Current (lb-rhs): -0.04711359739303589
98081 domains visited
Cumulative time: 75.95886754989624

BaB round 26
batch: 4350
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1981] [/input-8, 1981] [/input-8, 1981] [/input-8, 1981] [/input-8, 1981] [/input-8, 1981] [/input-8, 1981] [/input-8, 1981] [/input-8, 1981] [/input-8, 1981] 
cut re-enabled after branching node selection
0 lb beta sum: 2.211299419403076, worst -0.04550713300704956
10 lb beta sum: 2.211299419403076, worst -0.04550713300704956
Time: prepare 0.4280    bound 0.7283    transfer 0.0701    finalize 0.2166    func 1.5008    
Accumulated time: func 28.8458    prepare 6.2503    bound 17.6274    transfer 1.7225    finalize 1.3219    
all_split False
======================Cut inference begins======================
max lb tensor(0.24749482) min lb tensor(-0.04549617)
Number of Verified Splits: 3273 of 8700
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 37
#cuts >= 20: 0
BICCOS time: 1.0151710510253906 
BICCOS Cumulative time: 28.093116283416748
Preprocessing time: 0.28280115127563477 Inference time: 0.6989173889160156 Add cuts time: 0.032679080963134766 Cut analysis time: 0.0007734298706054688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04550 (36), -0.04508 (36), -0.04476 (36), -0.04470 (36), -0.04416 (36), -0.04379 (36), -0.04337 (36), -0.04334 (36), -0.04275 (35), -0.04264 (35), -0.04218 (36), -0.04212 (36), -0.04195 (35), -0.04141 (35), -0.04136 (36), -0.04133 (35), -0.04130 (36), -0.04078 (36), -0.04071 (36), -0.04062 (35), 
Length of domains: 5427
Time: pickout 0.1048    decision 0.2426    set_bounds 0.3964    solve 1.5038    add 0.0212    
Accumulated time: pickout 2.0435    decision 6.8558    set_bounds 10.6810    solve 29.2011    add 1.0754    
Current (lb-rhs): -0.04549616575241089
103508 domains visited
Cumulative time: 79.28179335594177

BaB round 27
batch: 5427
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 255] [/input-8, 255] [/input-8, 255] [/input-8, 255] [/input-8, 255] [/input-8, 255] [/input-8, 255] [/input-8, 255] [/input-8, 255] [/input-8, 255] 
cut re-enabled after branching node selection
0 lb beta sum: 2.160950183868408, worst -0.043600261211395264
10 lb beta sum: 2.160950183868408, worst -0.04358738660812378
Time: prepare 0.5350    bound 0.8856    transfer 0.0692    finalize 0.0604    func 1.6215    
Accumulated time: func 30.4673    prepare 6.7857    bound 18.5130    transfer 1.7918    finalize 1.3823    
all_split False
======================Cut inference begins======================
max lb tensor(0.24714577) min lb tensor(-0.04357547)
Number of Verified Splits: 4200 of 10854
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 38
#cuts >= 20: 0
BICCOS time: 1.5522453784942627 
BICCOS Cumulative time: 29.64536166191101
Preprocessing time: 0.5742924213409424 Inference time: 0.930588960647583 Add cuts time: 0.04637575149536133 Cut analysis time: 0.0009882450103759766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04358 (37), -0.04346 (37), -0.04283 (37), -0.04277 (37), -0.04225 (37), -0.04217 (37), -0.04147 (37), -0.04144 (37), -0.04114 (36), -0.04070 (36), -0.04033 (36), -0.04030 (37), -0.04023 (37), -0.03979 (36), -0.03949 (37), -0.03942 (37), -0.03941 (36), -0.03900 (36), -0.03892 (37), -0.03884 (37), 
Length of domains: 6654
Time: pickout 0.1102    decision 0.4861    set_bounds 0.4975    solve 1.6252    add 0.0229    
Accumulated time: pickout 2.1538    decision 7.3419    set_bounds 11.1785    solve 30.8263    add 1.0983    
Current (lb-rhs): -0.0435754656791687
110162 domains visited
Cumulative time: 83.62531113624573

BaB round 28
batch: 6654
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 247] [/input-8, 247] [/input-8, 247] [/input-8, 247] [/input-8, 247] [/input-8, 247] [/input-8, 247] [/input-8, 247] [/input-8, 247] [/input-8, 247] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.048035621643066406
10 lb beta sum: 1.6567586660385132, worst -0.042311906814575195
Time: prepare 0.3493    bound 1.0787    transfer 0.0889    finalize 0.0749    func 1.6794    
Accumulated time: func 32.1467    prepare 7.1354    bound 19.5917    transfer 1.8806    finalize 1.4573    
all_split False
======================Cut inference begins======================
max lb tensor(0.47878766) min lb tensor(-0.04230213)
Number of Verified Splits: 7162 of 13308
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 40
#cuts >= 20: 0
BICCOS time: 2.3810322284698486 
BICCOS Cumulative time: 32.02639389038086
Preprocessing time: 0.6712746620178223 Inference time: 1.621938943862915 Add cuts time: 0.0868840217590332 Cut analysis time: 0.000934600830078125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04230 (38), -0.04219 (38), -0.04157 (38), -0.04149 (38), -0.04112 (38), -0.04104 (38), -0.04035 (38), -0.04032 (38), -0.03921 (37), -0.03909 (37), -0.03905 (38), -0.03897 (38), -0.03839 (37), -0.03824 (38), -0.03816 (38), -0.03788 (37), -0.03781 (38), -0.03780 (37), -0.03772 (38), -0.03742 (38), 
Length of domains: 6146
Time: pickout 0.1393    decision 0.3665    set_bounds 0.8183    solve 1.6832    add 0.0218    
Accumulated time: pickout 2.2931    decision 7.7084    set_bounds 11.9968    solve 32.5095    add 1.1201    
Current (lb-rhs): -0.04230213165283203
116308 domains visited
Cumulative time: 89.11204051971436

BaB round 29
batch: 6146
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04677009582519531
10 lb beta sum: 1.7986105680465698, worst -0.039888620376586914
Time: prepare 0.3353    bound 1.0093    transfer 0.0795    finalize 0.0693    func 1.5741    
Accumulated time: func 33.7208    prepare 7.4710    bound 20.6010    transfer 1.9601    finalize 1.5266    
all_split False
======================Cut inference begins======================
max lb tensor(0.24921703) min lb tensor(-0.03984940)
Number of Verified Splits: 5887 of 12292
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 40
#cuts >= 20: 0
BICCOS time: 2.0498361587524414 
BICCOS Cumulative time: 34.0762300491333
Preprocessing time: 0.41277074813842773 Inference time: 1.5610880851745605 Add cuts time: 0.07510781288146973 Cut analysis time: 0.0008695125579833984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03985 (39), -0.03973 (39), -0.03913 (39), -0.03904 (39), -0.03886 (39), -0.03878 (39), -0.03809 (39), -0.03805 (39), -0.03671 (38), -0.03663 (39), -0.03658 (38), -0.03654 (39), -0.03589 (38), -0.03582 (39), -0.03574 (39), -0.03555 (39), -0.03553 (38), -0.03547 (39), -0.03544 (38), -0.03496 (39), 
Length of domains: 6405
Time: pickout 0.1537    decision 0.3414    set_bounds 0.7655    solve 1.5768    add 0.0211    
Accumulated time: pickout 2.4468    decision 8.0498    set_bounds 12.7623    solve 34.0863    add 1.1412    
Current (lb-rhs): -0.03984940052032471
122713 domains visited
Cumulative time: 94.08675599098206

BaB round 30
batch: 6405
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] 
cut re-enabled after branching node selection
0 lb beta sum: 2.000002145767212, worst -0.03984987735748291
10 lb beta sum: 2.000002145767212, worst -0.039846062660217285
Time: prepare 0.6327    bound 1.0409    transfer 0.0831    finalize 0.0751    func 1.9170    
Accumulated time: func 35.6379    prepare 8.1040    bound 21.6419    transfer 2.0432    finalize 1.6017    
all_split False
======================Cut inference begins======================
max lb tensor(0.24333930) min lb tensor(-0.03982937)
Number of Verified Splits: 6037 of 12810
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 42
#cuts >= 20: 0
BICCOS time: 2.15956449508667 
BICCOS Cumulative time: 36.23579454421997
Preprocessing time: 0.4270627498626709 Inference time: 1.6748411655426025 Add cuts time: 0.0567934513092041 Cut analysis time: 0.0008671283721923828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03983 (40), -0.03972 (40), -0.03911 (40), -0.03902 (40), -0.03885 (40), -0.03877 (40), -0.03809 (40), -0.03805 (40), -0.03661 (40), -0.03652 (40), -0.03580 (40), -0.03572 (40), -0.03554 (40), -0.03547 (39), -0.03546 (40), -0.03534 (39), -0.03494 (40), -0.03482 (40), -0.03476 (40), -0.03467 (40), 
Length of domains: 6773
Time: pickout 0.1362    decision 0.3535    set_bounds 0.8012    solve 1.9201    add 0.0357    
Accumulated time: pickout 2.5830    decision 8.4033    set_bounds 13.5636    solve 36.0064    add 1.1769    
Current (lb-rhs): -0.039829373359680176
129486 domains visited
Cumulative time: 99.56224751472473

BaB round 31
batch: 6773
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04295206069946289
10 lb beta sum: 1.5967121124267578, worst -0.03983330726623535
Time: prepare 0.3628    bound 1.1050    transfer 0.0909    finalize 0.2794    func 1.9294    
Accumulated time: func 37.5672    prepare 8.4671    bound 22.7470    transfer 2.1341    finalize 1.8810    
all_split False
======================Cut inference begins======================
max lb tensor(0.48531175) min lb tensor(-0.03982270)
Number of Verified Splits: 8263 of 13546
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 42
#cuts >= 20: 0
BICCOS time: 2.774998426437378 
BICCOS Cumulative time: 39.01079297065735
Preprocessing time: 0.44927120208740234 Inference time: 2.225562810897827 Add cuts time: 0.09914278984069824 Cut analysis time: 0.0010216236114501953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03982 (41), -0.03971 (41), -0.03910 (41), -0.03902 (41), -0.03885 (41), -0.03877 (41), -0.03809 (41), -0.03805 (41), -0.03660 (41), -0.03652 (41), -0.03579 (41), -0.03572 (41), -0.03554 (41), -0.03546 (41), -0.03546 (40), -0.03533 (40), -0.03494 (41), -0.03481 (41), -0.03474 (41), -0.03467 (41), 
Length of domains: 5283
Time: pickout 0.1793    decision 0.3720    set_bounds 0.6219    solve 1.9324    add 0.0240    
Accumulated time: pickout 2.7623    decision 8.7753    set_bounds 14.1855    solve 37.9388    add 1.2008    
Current (lb-rhs): -0.03982269763946533
134769 domains visited
Cumulative time: 105.55228018760681

BaB round 32
batch: 5283
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7541617155075073, worst -0.03785097599029541
10 lb beta sum: 1.7541617155075073, worst -0.03784143924713135
Time: prepare 0.5261    bound 0.8712    transfer 0.0642    finalize 0.2777    func 1.8098    
Accumulated time: func 39.3771    prepare 8.9935    bound 23.6182    transfer 2.1983    finalize 2.1587    
all_split False
======================Cut inference begins======================
max lb tensor(0.24193025) min lb tensor(-0.03783524)
Number of Verified Splits: 2963 of 10566
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 42
#cuts >= 20: 0
BICCOS time: 1.1176667213439941 
BICCOS Cumulative time: 40.12845969200134
Preprocessing time: 0.35186028480529785 Inference time: 0.734276294708252 Add cuts time: 0.030669450759887695 Cut analysis time: 0.0008606910705566406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03784 (42), -0.03773 (42), -0.03711 (42), -0.03703 (42), -0.03686 (42), -0.03683 (42), -0.03678 (42), -0.03673 (42), -0.03610 (42), -0.03610 (42), -0.03606 (42), -0.03603 (42), -0.03585 (42), -0.03578 (42), -0.03578 (42), -0.03545 (41), -0.03533 (41), -0.03508 (42), -0.03505 (42), -0.03469 (42), 
Length of domains: 7603
Time: pickout 0.1220    decision 0.2931    set_bounds 0.4786    solve 1.8124    add 0.0250    
Accumulated time: pickout 2.8844    decision 9.0683    set_bounds 14.6641    solve 39.7512    add 1.2258    
Current (lb-rhs): -0.03783524036407471
142372 domains visited
Cumulative time: 109.44116568565369

BaB round 33
batch: 7603
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 386] [/input, 3165] [/input, 385] [/input, 385] [/input, 386] [/input, 386] [/input, 386] [/input, 3165] [/input, 385] [/input, 385] 
cut re-enabled after branching node selection
0 lb beta sum: 1.704991102218628, worst -0.036174893379211426
10 lb beta sum: 1.704991102218628, worst -0.03617823123931885
Time: prepare 0.7573    bound 1.2233    transfer 0.1032    finalize 0.3080    func 2.4937    
Accumulated time: func 41.8708    prepare 9.7511    bound 24.8415    transfer 2.3015    finalize 2.4667    
all_split False
======================Cut inference begins======================
max lb tensor(0.23842585) min lb tensor(-0.03617442)
Number of Verified Splits: 3528 of 15206
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 42
#cuts >= 20: 0
BICCOS time: 1.4787585735321045 
BICCOS Cumulative time: 41.60721826553345
Preprocessing time: 0.5056741237640381 Inference time: 0.927236795425415 Add cuts time: 0.044968366622924805 Cut analysis time: 0.0008792877197265625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03617 (43), -0.03610 (43), -0.03607 (43), -0.03546 (43), -0.03510 (43), -0.03508 (43), -0.03501 (43), -0.03500 (43), -0.03498 (43), -0.03497 (43), -0.03491 (43), -0.03475 (43), -0.03469 (43), -0.03468 (43), -0.03459 (43), -0.03438 (43), -0.03415 (43), -0.03413 (43), -0.03404 (43), -0.03403 (43), 
Length of domains: 11678
Time: pickout 0.1676    decision 0.6184    set_bounds 0.6998    solve 2.4971    add 0.0405    
Accumulated time: pickout 3.0519    decision 9.6868    set_bounds 15.3639    solve 42.2483    add 1.2663    
Current (lb-rhs): -0.03617441654205322
154050 domains visited
Cumulative time: 114.9985122680664

BaB round 34
batch: 11678
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3165] [/input, 3165] [/input, 1480] [/input, 385] [/input, 386] [/input, 385] [/input, 3165] [/input, 3165] [/input, 3165] [/input, 3165] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6641662120819092, worst -0.033992886543273926
10 lb beta sum: 1.6641662120819092, worst -0.03399670124053955
Time: prepare 1.1689    bound 1.8374    transfer 0.2407    finalize 0.1477    func 3.5489    
Accumulated time: func 45.4197    prepare 10.9204    bound 26.6789    transfer 2.5423    finalize 2.6144    
all_split False
======================Cut inference begins======================
max lb tensor(0.23840618) min lb tensor(-0.03398860)
Number of Verified Splits: 5463 of 23356
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 42
#cuts >= 20: 0
BICCOS time: 2.2964537143707275 
BICCOS Cumulative time: 43.903671979904175
Preprocessing time: 0.7699916362762451 Inference time: 1.4547748565673828 Add cuts time: 0.07081151008605957 Cut analysis time: 0.0008757114410400391
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03399 (44), -0.03398 (44), -0.03389 (44), -0.03364 (44), -0.03353 (44), -0.03337 (44), -0.03335 (44), -0.03327 (44), -0.03308 (44), -0.03302 (44), -0.03302 (44), -0.03301 (44), -0.03295 (44), -0.03292 (44), -0.03290 (44), -0.03287 (44), -0.03285 (44), -0.03284 (44), -0.03282 (44), -0.03280 (44), 
Length of domains: 17893
Time: pickout 0.3171    decision 0.8728    set_bounds 1.3273    solve 3.8351    add 0.0620    
Accumulated time: pickout 3.3690    decision 10.5596    set_bounds 16.6912    solve 46.0834    add 1.3284    
Current (lb-rhs): -0.0339885950088501
171943 domains visited
Cumulative time: 123.79778528213501

BaB round 35
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3165] [/input-8, 1955] [/input, 3165] [/input, 3165] [/input-8, 1955] [/input, 3165] [/input, 386] [/input, 3165] [/input, 3165] [/input, 1012] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6211183071136475, worst -0.033988118171691895
10 lb beta sum: 1.6211183071136475, worst -0.03399336338043213
Time: prepare 1.6399    bound 2.5248    transfer 0.3443    finalize 0.5316    func 5.2573    
Accumulated time: func 50.6771    prepare 12.5607    bound 29.2037    transfer 2.8866    finalize 3.1460    
all_split False
======================Cut inference begins======================
max lb tensor(0.23842001) min lb tensor(-0.03398430)
Number of Verified Splits: 8480 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 42
#cuts >= 20: 0
BICCOS time: 3.920400381088257 
BICCOS Cumulative time: 47.82407236099243
Preprocessing time: 1.0776219367980957 Inference time: 2.7202868461608887 Add cuts time: 0.12164688110351562 Cut analysis time: 0.0008447170257568359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03398 (45), -0.03389 (45), -0.03364 (45), -0.03352 (45), -0.03334 (45), -0.03327 (45), -0.03308 (45), -0.03302 (45), -0.03301 (45), -0.03292 (45), -0.03290 (45), -0.03287 (45), -0.03284 (44), -0.03280 (45), -0.03276 (44), -0.03255 (45), -0.03247 (45), -0.03245 (45), -0.03243 (45), -0.03242 (45), 
Length of domains: 25797
Time: pickout 0.3808    decision 1.9470    set_bounds 1.8364    solve 5.2637    add 0.0821    
Accumulated time: pickout 3.7499    decision 12.5066    set_bounds 18.5276    solve 51.3472    add 1.4105    
Current (lb-rhs): -0.03398430347442627
196231 domains visited
Cumulative time: 137.36120438575745

BaB round 36
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1631] [/input, 386] [/input-8, 1631] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] 
cut re-enabled after branching node selection
0 lb beta sum: 1.5863970518112183, worst -0.03284275531768799
10 lb beta sum: 1.5863970518112183, worst -0.032845139503479004
Time: prepare 1.6504    bound 2.5233    transfer 0.3457    finalize 0.6612    func 5.3984    
Accumulated time: func 56.0755    prepare 14.2115    bound 31.7269    transfer 3.2323    finalize 3.8072    
all_split False
======================Cut inference begins======================
max lb tensor(0.23848784) min lb tensor(-0.03280556)
Number of Verified Splits: 9787 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 42
#cuts >= 20: 0
BICCOS time: 4.599683523178101 
BICCOS Cumulative time: 52.42375588417053
Preprocessing time: 1.095170497894287 Inference time: 3.24837327003479 Add cuts time: 0.2551133632659912 Cut analysis time: 0.0010263919830322266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03281 (45), -0.03271 (45), -0.03260 (46), -0.03250 (46), -0.03243 (45), -0.03225 (46), -0.03213 (46), -0.03196 (46), -0.03190 (45), -0.03189 (46), -0.03184 (45), -0.03170 (46), -0.03163 (46), -0.03162 (46), -0.03153 (46), -0.03152 (46), -0.03148 (46), -0.03141 (46), -0.03125 (45), -0.03122 (45), 
Length of domains: 32394
Time: pickout 0.3878    decision 1.6405    set_bounds 1.9425    solve 5.4057    add 0.0797    
Accumulated time: pickout 4.1377    decision 14.1472    set_bounds 20.4701    solve 56.7529    add 1.4902    
Current (lb-rhs): -0.032805562019348145
219212 domains visited
Cumulative time: 151.572815656662

BaB round 37
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1012] [/input, 1012] [/input, 1012] [/input, 1012] [/input, 1012] [/input, 1012] [/input, 1012] [/input, 1012] [/input, 1012] [/input, 1012] 
cut re-enabled after branching node selection
0 lb beta sum: 1.568755030632019, worst -0.03142225742340088
10 lb beta sum: 1.568755030632019, worst -0.031491875648498535
Time: prepare 1.6599    bound 2.5270    transfer 0.3413    finalize 0.2237    func 4.9692    
Accumulated time: func 61.0446    prepare 15.8717    bound 34.2539    transfer 3.5737    finalize 4.0309    
all_split False
======================Cut inference begins======================
max lb tensor(0.23848176) min lb tensor(-0.03140700)
Number of Verified Splits: 11261 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 44
#cuts >= 20: 0
BICCOS time: 5.068670749664307 
BICCOS Cumulative time: 57.49242663383484
Preprocessing time: 1.6648175716400146 Inference time: 3.22432017326355 Add cuts time: 0.17857813835144043 Cut analysis time: 0.0009548664093017578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03260 (46), -0.03250 (46), -0.03225 (46), -0.03213 (46), -0.03196 (46), -0.03189 (46), -0.03170 (46), -0.03163 (46), -0.03162 (46), -0.03153 (46), -0.03152 (46), -0.03148 (46), -0.03141 (46), -0.03141 (46), -0.03130 (46), -0.03116 (46), -0.03107 (46), -0.03105 (46), -0.03104 (46), -0.03103 (46), 
Length of domains: 37517
Time: pickout 0.3909    decision 1.6423    set_bounds 2.0836    solve 4.9765    add 0.1122    
Accumulated time: pickout 4.5286    decision 15.7895    set_bounds 22.5537    solve 61.7294    add 1.6024    
Current (lb-rhs): -0.03259909152984619
240719 domains visited
Cumulative time: 166.02377438545227

BaB round 38
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1391] [/input, 1012] [/input, 1012] [/input-8, 1391] [/input-8, 1391] [/input-8, 1391] [/input, 1012] [/input, 1012] [/input-8, 1391] [/input-8, 1391] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03328752517700195
10 lb beta sum: 1.0692232847213745, worst -0.031482994556427
Time: prepare 0.9061    bound 2.5242    transfer 0.3401    finalize 0.7876    func 4.7755    
Accumulated time: func 65.8202    prepare 16.7782    bound 36.7781    transfer 3.9138    finalize 4.8185    
all_split False
======================Cut inference begins======================
max lb tensor(0.48015869) min lb tensor(-0.03147516)
Number of Verified Splits: 14522 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 43
#cuts >= 20: 0
BICCOS time: 6.2981367111206055 
BICCOS Cumulative time: 63.790563344955444
Preprocessing time: 1.1265878677368164 Inference time: 4.914120197296143 Add cuts time: 0.25629472732543945 Cut analysis time: 0.0011339187622070312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03148 (47), -0.03141 (46), -0.03138 (47), -0.03130 (46), -0.03111 (47), -0.03104 (46), -0.03099 (47), -0.03083 (47), -0.03076 (47), -0.03056 (47), -0.03050 (46), -0.03050 (47), -0.03048 (47), -0.03043 (46), -0.03039 (47), -0.03039 (47), -0.03035 (47), -0.03028 (47), -0.03002 (47), -0.02994 (47), 
Length of domains: 39379
Time: pickout 0.4114    decision 1.9454    set_bounds 1.6677    solve 4.7829    add 0.0612    
Accumulated time: pickout 4.9400    decision 17.7349    set_bounds 24.2214    solve 66.5123    add 1.6636    
Current (lb-rhs): -0.03147515654563904
258965 domains visited
Cumulative time: 181.41409993171692

BaB round 39
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1012] [/input, 1012] [/input-8, 1955] [/input, 1012] [/input, 1012] [/input, 1012] [/input, 1012] [/input, 1012] [/input, 1012] [/input, 1012] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03208208084106445
10 lb beta sum: 1.1165573596954346, worst -0.030385822057724
Time: prepare 0.9184    bound 2.5252    transfer 0.3396    finalize 0.2428    func 4.2512    
Accumulated time: func 70.0714    prepare 17.6970    bound 39.3033    transfer 4.2534    finalize 5.0613    
all_split False
======================Cut inference begins======================
max lb tensor(0.24523628) min lb tensor(-0.03025877)
Number of Verified Splits: 15827 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 44
#cuts >= 20: 0
BICCOS time: 6.73019814491272 
BICCOS Cumulative time: 70.52076148986816
Preprocessing time: 1.1691210269927979 Inference time: 5.325060606002808 Add cuts time: 0.23492074012756348 Cut analysis time: 0.0010957717895507812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03148 (47), -0.03138 (47), -0.03111 (47), -0.03099 (47), -0.03083 (47), -0.03076 (47), -0.03056 (47), -0.03050 (47), -0.03048 (47), -0.03039 (47), -0.03039 (47), -0.03035 (47), -0.03028 (47), -0.03026 (47), -0.03016 (47), -0.03002 (47), -0.02994 (47), -0.02991 (47), -0.02989 (47), -0.02988 (47), 
Length of domains: 39936
Time: pickout 0.4099    decision 1.6523    set_bounds 2.2241    solve 4.2603    add 0.0639    
Accumulated time: pickout 5.3499    decision 19.3872    set_bounds 26.4455    solve 70.7726    add 1.7275    
Current (lb-rhs): -0.03147515654563904
275906 domains visited
Cumulative time: 196.99547028541565

BaB round 40
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1391] [/input, 385] [/input-8, 1154] [/input-8, 1391] [/input-8, 1391] [/input-8, 1391] [/input-8, 1391] [/input, 385] [/input, 385] [/input, 385] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9926447868347168, worst -0.03189045190811157
10 lb beta sum: 2.016232490539551, worst -0.030146002769470215
Time: prepare 1.4408    bound 2.5281    transfer 0.3401    finalize 0.2203    func 4.7494    
Accumulated time: func 74.8208    prepare 19.1381    bound 41.8313    transfer 4.5935    finalize 5.2816    
all_split False
======================Cut inference begins======================
max lb tensor(0.48084736) min lb tensor(-0.03013247)
Number of Verified Splits: 21634 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 53.
#cuts 1-3: 53
#cuts >= 20: 0
BICCOS time: 8.630987644195557 
BICCOS Cumulative time: 79.15174913406372
Preprocessing time: 1.8526411056518555 Inference time: 6.410596609115601 Add cuts time: 0.3666832447052002 Cut analysis time: 0.0010666847229003906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03148 (47), -0.03138 (47), -0.03083 (47), -0.03076 (47), -0.03056 (47), -0.03050 (47), -0.03048 (47), -0.03039 (47), -0.03035 (47), -0.03028 (47), -0.03026 (47), -0.03016 (47), -0.03013 (48), -0.03001 (48), -0.02994 (47), -0.02991 (47), -0.02988 (47), -0.02987 (47), -0.02985 (47), -0.02979 (47), 
Length of domains: 34686
Time: pickout 0.4220    decision 1.6468    set_bounds 2.2449    solve 4.7576    add 0.0887    
Accumulated time: pickout 5.7719    decision 21.0340    set_bounds 28.6904    solve 75.5302    add 1.8162    
Current (lb-rhs): -0.03147515654563904
287040 domains visited
Time out!!!!!!!!
Result: unknown in 217.1651 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 78, vnnlib ID: 78 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.75459862, -19.03087234, -15.81020927, -15.02808094, -15.45583725,
         -15.58429432, -14.96899986, -17.89657974, -19.61580658, -19.36780739]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [632]; unstable size 632; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 329, 1, 632] with unstable size 328 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 632] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 632] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [328]; unstable size 328; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 328] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 328] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.01773715,  1.41905260, -0.42905235, -0.71989679,  0.09239091,
         -1.24160266,  0.88482046,  2.33327007,  1.89770031]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.75459862, -19.03087234, -15.81020927, -15.02808094, -15.45583725,
         -15.58429432, -14.96899986, -17.89657974, -19.61580658, -19.36780739]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.75459862, -19.03087234, -15.81020832, -15.02808094, -15.45583725,
          -15.58429337, -14.96900177, -17.89657784, -19.61580658, -19.36780930],
         [-17.75459862, -19.03087234, -15.81020832, -15.02808094, -15.45583725,
          -15.58429337, -14.96900177, -17.89657784, -19.61580658, -19.36780930]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.78212738,  0.42775631, -0.05907917]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0804 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 79, vnnlib ID: 79 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.35046577, -23.71506119, -23.35945511, -21.45649910, -20.70935822,
         -20.53724480, -22.38616753, -16.30188179, -26.53351212, -22.39307404]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [460]; unstable size 460; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 248, 1, 460] with unstable size 247 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 460] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 460] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [247]; unstable size 247; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 247] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 247] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.23471117, 4.94442511, 5.38546610, 3.64118886, 3.33296251, 2.72332478,
         4.26009846, 8.15480995, 3.82787871]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0661 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 80, vnnlib ID: 80 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.09100723, -29.06959343, -25.09518623, -27.86755753, -24.83033943,
         -28.04232597, -26.05955124, -26.36453247, -25.66234589, -27.72757912]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [899]; unstable size 899; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 311, 1, 899] with unstable size 310 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 899] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 899] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [310]; unstable size 310; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 310] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 310] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.97617102, -1.48784208,  0.95436382, -1.87956357,  0.93106604,
         -1.03131652, -0.85329711, -0.83899194,  0.88107014]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.09100723, -29.06959343, -25.09518623, -27.86755753, -24.83033943,
         -28.04232597, -26.05955124, -26.36453247, -25.66234589, -27.72757912]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.09101105, -29.06959724, -25.09518623, -27.86755753, -24.83034134,
          -28.04232597, -26.05955315, -26.36453438, -25.66234589, -27.72757912],
         [-25.09101105, -29.06959724, -25.09518623, -27.86755753, -24.83034134,
          -28.04232597, -26.05955315, -26.36453438, -25.66234589, -27.72757912]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.00417519, -0.26066971,  0.96854210,  1.27352333,  0.57133484]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0445 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 81, vnnlib ID: 81 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.78340530, -27.09945488, -17.72372437, -21.88307762, -18.28152275,
         -20.99545860, -20.59827042, -22.34070778, -24.70541382, -26.47000694]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [950]; unstable size 950; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 950] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 950] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 950] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 208] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.15953612, 7.92398405, 3.57421255, 0.07925247, 2.58815289, 1.97291231,
         3.73509598, 5.73443413, 7.39504910]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0633 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 82, vnnlib ID: 82 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.82749367, -26.77242661, -22.68888855, -21.92727852, -23.00431252,
         -21.88382530, -22.72205544, -24.54189873, -26.69390106, -25.28289032]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [743]; unstable size 743; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 306, 1, 743] with unstable size 305 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 743] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 743] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [305]; unstable size 305; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 305] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 305] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.55621195,  2.72794223, -0.34306383, -0.31645530, -0.10541511,
         -0.28819263,  1.26013124,  2.92124987,  1.60254717]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.82749367, -26.77242661, -22.68888855, -21.92727852, -23.00431252,
         -21.88382530, -22.72205544, -24.54189873, -26.69390106, -25.28289032]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.17584038, -27.13981628, -23.11540031, -22.38797569, -23.44976807,
          -22.53939438, -23.10030365, -25.11281586, -26.95533371, -25.84247017],
         [-25.17584038, -27.13981628, -23.11540031, -22.38797569, -23.44976807,
          -22.53939438, -23.10030365, -25.11281586, -26.95533371, -25.84247017]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.57600594, -0.15141869,  0.91037369,  0.56090927]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0068 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0717 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 83, vnnlib ID: 83 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.01862907, -24.96064758, -28.10244751, -27.03785515, -27.65390778,
         -27.54524422, -28.22773170, -27.61219788, -25.01158905, -23.89872360]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [573]; unstable size 573; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 573] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 573] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 573] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 256] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.53955317,  0.16099834,  2.22247696,  1.41359711,  1.53142738,
          1.82895088,  2.34312248,  1.67316484, -0.55014038]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.01862907, -24.96064758, -28.10244751, -27.03785515, -27.65390778,
         -27.54524422, -28.22773170, -27.61219788, -25.01158905, -23.89872360]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.78it/s]100%|██████████| 1/1 [00:00<00:00,  8.77it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.72954750, -25.00329971, -27.98002243, -26.96814156, -27.40962029,
          -27.52673721, -28.15061378, -27.60468102, -24.36431122, -24.20353508]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.16077614]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1165 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 11.869611740112305
alpha/beta optimization time: 1.2396092414855957
initial alpha-crown bounds: tensor([[ 0.62231922,  0.20233995,  2.31166697,  1.48120975,  1.62453079,
          1.90319872,  2.41159105,  1.76273203, -0.44997740]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.44997739791870117
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.57794404029846
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.57790517807007
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.57787775993347
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.57785654067993
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.5778374671936
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.57781887054443
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.57780003547668
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.57778143882751
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.57776284217834
Verifying property 8 with 1 instances.
##### Instance 83 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.44997740]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.01862907, -24.96064758, -28.10244751, -27.03785515, -27.65390778,
        -27.54524422, -28.22773170, -27.61219788, -25.01158905, -23.89872360],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.44997740]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 573
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 251
Node /15 input 0: size torch.Size([100]) unstable 19
-----------------
# of unstable neurons: 843
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.775161743164062e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4499788284301758
10 lb beta sum: 0.0, worst -0.4499831199645996
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0552    transfer 0.0001    finalize 0.0001    func 0.0557    
Accumulated time: func 0.0557    prepare 0.0002    bound 0.0552    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] 
split level 1: [/input-12, 85] 
split level 2: [/input-12, 49] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 69] 
split level 5: [/input-12, 29] 
split level 6: [/input-12, 38] 
split level 7: [/input-12, 34] 
split level 8: [/input-12, 56] 
split level 9: [/input-8, 715] 
split level 10: [/input-8, 883] 
split level 11: [/input-8, 1392] 
split level 12: [/input-8, 885] 
split level 13: [/input-8, 884] 
split level 14: [/input-8, 1649] 
split level 15: [/input-12, 50] 
split level 16: [/input-8, 117] 
split level 17: [/input-8, 1240] 
split level 18: [/input-8, 493] 
split level 19: [/input-8, 1402] 
split level 20: [/input-8, 1389] 
split level 21: [/input-8, 500] 
split level 22: [/input-8, 1395] 
split level 23: [/input-8, 1388] 
split level 24: [/input-8, 886] 
split level 25: [/input-8, 1965] 
split level 26: [/input-8, 1384] 
split level 27: [/input-8, 116] 
split level 28: [/input-8, 819] 
split level 29: [/input-8, 424] 
split level 30: [/input-8, 1396] 
split level 31: [/input-12, 42] 
split level 32: [/input-8, 881] 
split level 33: [/input-8, 1393] 
split level 34: [/input-8, 1398] 
split level 35: [/input-8, 430] 
split level 36: [/input-8, 1397] 
split level 37: [/input-8, 742] 
split level 38: [/input-8, 1185] 
split level 39: [/input-8, 433] 
split level 40: [/input-8, 1955] 
split level 41: [/input-8, 1394] 
split level 42: [/input-8, 417] 
split level 43: [/input-8, 1958] 
split level 44: [/input-8, 246] 
split level 45: [/input-8, 638] 
split level 46: [/input, 2422] 
split level 47: [/input-8, 1097] 
split level 48: [/input, 509] 
split level 49: [/input-8, 1390] 
split level 50: [/input-8, 931] 
split level 51: [/input-8, 1705] 
split level 52: [/input, 1430] 
split level 53: [/input-8, 1403] 
split level 54: [/input-8, 891] 
split level 55: [/input-8, 139] 
split level 56: [/input-8, 1654] 
split level 57: [/input-8, 1376] 
split level 58: [/input-8, 1325] 
split level 59: [/input, 1006] 
split level 60: [/input-8, 420] 
split level 61: [/input-8, 1713] 
split level 62: [/input-8, 1650] 
split level 63: [/input-8, 1698] 
split level 64: [/input, 1018] 
split level 65: [/input-8, 1383] 
split level 66: [/input-8, 893] 
split level 67: [/input-8, 401] 
split level 68: [/input, 167] 
split level 69: [/input, 697] 
split level 70: [/input, 1479] 
split level 71: [/input-8, 1380] 
split level 72: [/input-8, 1168] 
split level 73: [/input, 699] 
split level 74: [/input, 1021] 
split level 75: [/input-8, 1385] 
split level 76: [/input, 505] 
split level 77: [/input, 491] 
split level 78: [/input, 1005] 
split level 79: [/input-8, 1697] 
split level 80: [/input-8, 1372] 
split level 81: [/input, 990] 
split level 82: [/input, 1004] 
split level 83: [/input-8, 1641] 
split level 84: [/input, 1384] 
split level 85: [/input-8, 1938] 
split level 86: [/input, 1015] 
split level 87: [/input-8, 251] 
split level 88: [/input-8, 1663] 
split level 89: [/input, 1013] 
split level 90: [/input, 507] 
split level 91: [/input, 1020] 
split level 92: [/input-8, 488] 
split level 93: [/input, 494] 
split level 94: [/input-8, 1377] 
split level 95: [/input, 1768] 
split level 96: [/input-8, 241] 
split level 97: [/input-8, 242] 
split level 98: [/input-8, 485] 
split level 99: [/input, 493] 
split level 100: [/input-8, 1597] 
split level 101: [/input-8, 1940] 
split level 102: [/input, 1707] 
split level 103: [/input, 1476] 
split level 104: [/input, 3194] 
split level 105: [/input-8, 1583] 
split level 106: [/input, 1003] 
split level 107: [/input-8, 823] 
split level 108: [/input-8, 815] 
split level 109: [/input, 1016] 
split level 110: [/input-8, 1379] 
split level 111: [/input-8, 409] 
split level 112: [/input, 120] 
split level 113: [/input, 1366] 
split level 114: [/input-8, 361] 
split level 115: [/input, 1466] 
split level 116: [/input, 2678] 
split level 117: [/input, 1002] 
split level 118: [/input-8, 1184] 
split level 119: [/input, 3571] 
split level 120: [/input-8, 890] 
split level 121: [/input-8, 1528] 
split level 122: [/input, 1478] 
split level 123: [/input, 681] 
split level 124: [/input, 183] 
split level 125: [/input, 103] 
split level 126: [/input-8, 1378] 
split level 127: [/input-8, 250] 
split level 128: [/input-8, 364] 
split level 129: [/input-8, 1760] 
split level 130: [/input-8, 1925] 
split level 131: [/input-8, 876] 
split level 132: [/input-8, 191] 
split level 133: [/input, 806] 
split level 134: [/input, 682] 
split level 135: [/input, 2181] 
split level 136: [/input, 121] 
split level 137: [/input-8, 295] 
split level 138: [/input, 989] 
split level 139: [/input-8, 1368] 
split level 140: [/input, 3366] 
split level 141: [/input, 2426] 
split level 142: [/input, 3113] 
split level 143: [/input-8, 399] 
split level 144: [/input-8, 1505] 
split level 145: [/input, 822] 
split level 146: [/input, 2442] 
split level 147: [/input, 135] 
split level 148: [/input, 2728] 
split level 149: [/input-8, 1783] 
split level 150: [/input, 988] 
split level 151: [/input, 1755] 
split level 152: [/input-8, 431] 
split level 153: [/input, 3129] 
split level 154: [/input, 185] 
split level 155: [/input, 891] 
split level 156: [/input-8, 2044] 
split level 157: [/input, 3521] 
split level 158: [/input, 2438] 
split level 159: [/input, 700] 
split level 160: [/input, 2557] 
split level 161: [/input, 117] 
split level 162: [/input-8, 2033] 
split level 163: [/input-8, 1371] 
split level 164: [/input, 3552] 
split level 165: [/input, 890] 
split level 166: [/input-8, 504] 
split level 167: [/input, 3054] 
split level 168: [/input, 489] 
split level 169: [/input, 1367] 
split level 170: [/input, 3053] 
split level 171: [/input, 1477] 
split level 172: [/input-8, 877] 
split level 173: [/input, 2865] 
split level 174: [/input, 995] 
split level 175: [/input-8, 238] 
split level 176: [/input, 2428] 
split level 177: [/input, 2027] 
split level 178: [/input, 892] 
split level 179: [/input, 236] 
split level 180: [/input-8, 38] 
split level 181: [/input-8, 402] 
split level 182: [/input, 2545] 
split level 183: [/input, 2554] 
split level 184: [/input, 213] 
split level 185: [/input-8, 1369] 
split level 186: [/input, 196] 
split level 187: [/input, 663] 
split level 188: [/input, 3195] 
split level 189: [/input, 3446] 
split level 190: [/input, 809] 
split level 191: [/input, 2435] 
split level 192: [/input, 2300] 
split level 193: [/input, 2555] 
split level 194: [/input, 1183] 
split level 195: [/input, 3299] 
split level 196: [/input, 2179] 
split level 197: [/input, 2797] 
split level 198: [/input, 2635] 
split level 199: [/input, 2782] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.44990062713623047
10 lb beta sum: 0.0, worst -0.44991350173950195
Time: prepare 0.0119    bound 0.0988    transfer 0.0007    finalize 0.0026    func 0.1167    
Accumulated time: func 0.1724    prepare 0.0223    bound 0.1541    transfer 0.0008    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.26759434) min lb tensor(-0.44989538)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01054072380065918 
BICCOS Cumulative time: 0.01054072380065918
Preprocessing time: 0.009761571884155273 Inference time: 0.000148773193359375 Add cuts time: 5.555152893066406e-05 Cut analysis time: 0.0005748271942138672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.43546 (1), -0.43522 (1), -0.43457 (1), -0.43381 (1), -0.43299 (1), -0.43273 (1), -0.43244 (1), -0.43082 (1), -0.42962 (1), -0.42943 (1), -0.42920 (1), -0.42846 (1), -0.42767 (1), -0.42724 (1), -0.42715 (1), -0.42673 (1), -0.42620 (1), -0.42587 (1), -0.42536 (1), -0.42436 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5302    set_bounds 0.0088    solve 0.1168    add 0.0679    
Accumulated time: pickout 0.0004    decision 0.5302    set_bounds 0.0088    solve 0.1168    add 0.0679    
Current (lb-rhs): -0.43546199798583984
50 domains visited
Cumulative time: 0.7951376438140869

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
split level 2: [/input-12, 49] [/input-12, 49] [/input-12, 4] [/input-12, 49] [/input-12, 49] [/input-12, 4] [/input-12, 49] [/input-12, 49] [/input-12, 49] [/input-12, 49] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-12, 29] [/input-12, 4] [/input-12, 29] [/input-12, 29] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.40697622299194336
10 lb beta sum: 0.6506432890892029, worst -0.3830975890159607
Time: prepare 0.0073    bound 0.1199    transfer 0.0007    finalize 0.0024    func 0.1329    
Accumulated time: func 0.3053    prepare 0.0298    bound 0.2740    transfer 0.0015    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.39270869) min lb tensor(-0.38295275)
Number of Verified Splits: 109 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.017842531204223633 
BICCOS Cumulative time: 0.028383255004882812
Preprocessing time: 0.011635303497314453 Inference time: 0.0045430660247802734 Add cuts time: 0.0013308525085449219 Cut analysis time: 0.0003333091735839844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08634 (2), -0.08626 (2), -0.08361 (2), -0.08350 (2), -0.07784 (2), -0.07510 (2), -0.07143 (2), -0.06906 (2), -0.06894 (2), -0.06718 (2), -0.06686 (2), -0.06517 (2), -0.06469 (2), -0.06141 (2), -0.06092 (2), -0.06043 (2), -0.06037 (2), -0.06016 (2), -0.05990 (2), -0.05894 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0215    set_bounds 0.0122    solve 0.1330    add 0.1285    
Accumulated time: pickout 0.0014    decision 0.5517    set_bounds 0.0210    solve 0.2498    add 0.1964    
Current (lb-rhs): -0.08633744716644287
100 domains visited
Cumulative time: 1.109452486038208

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
split level 2: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 49] [/input-12, 4] [/input-12, 4] [/input-12, 69] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-12, 69] [/input-12, 69] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12290382385253906
10 lb beta sum: 0.7748356461524963, worst -0.020462453365325928
Time: prepare 0.0074    bound 0.1195    transfer 0.0007    finalize 0.0022    func 0.1329    
Accumulated time: func 0.4382    prepare 0.0374    bound 0.3935    transfer 0.0022    finalize 0.0073    
all_split False
======================Cut inference begins======================
max lb tensor(0.37289882) min lb tensor(-0.00628841)
Number of Verified Splits: 398 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.035004615783691406 
BICCOS Cumulative time: 0.06338787078857422
Preprocessing time: 0.011530637741088867 Inference time: 0.015843629837036133 Add cuts time: 0.007333993911743164 Cut analysis time: 0.0002963542938232422
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0190    set_bounds 0.0153    solve 0.1330    add 0.0192    
Accumulated time: pickout 0.0024    decision 0.5707    set_bounds 0.0364    solve 0.3827    add 0.2155    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 29, 55]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.46460816e-01, 2.81087220e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 29, 55]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.46460816e-01, 7.72599429e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 29, 55]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.09985396e-01, 2.56578505e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 29, 55]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.09985396e-01, 8.18293542e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 55]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.75661872e-20, 3.44402850e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 55]), tensor([1., 1.]), tensor([0, 0]), tensor([5.75661872e-20, 6.59516901e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.30565738677978516
10 lb beta sum: 0.6098570227622986, worst -0.23229968547821045
Time: prepare 0.0004    bound 0.1135    transfer 0.0001    finalize 0.0002    func 0.1143    
Accumulated time: func 0.5525    prepare 0.0378    bound 0.5070    transfer 0.0023    finalize 0.0075    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 85] 
split level 1: [/input-12, 4] 
split level 2: [/input-12, 69] 
split level 3: [/input-12, 29] 
split level 4: [/input-12, 38] 
split level 5: [/input-12, 56] 
split level 6: [/input-8, 1392] 
split level 7: [/input-8, 1397] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001860618591309, worst -0.1269364356994629
10 lb beta sum: 1.4001860618591309, worst -0.12613439559936523
Time: prepare 0.0109    bound 0.1161    transfer 0.0006    finalize 0.0011    func 0.1304    
Accumulated time: func 0.6828    prepare 0.0491    bound 0.6230    transfer 0.0029    finalize 0.0086    
all_split False
======================Cut inference begins======================
max lb tensor(0.57592535) min lb tensor(-0.12584352)
Number of Verified Splits: 246 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.4001860618591309, worst -0.3356337547302246
10 lb beta sum: 1.6576210260391235, worst -0.1861858367919922
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.28095507621765137 
BICCOS Cumulative time: 0.3443429470062256
Preprocessing time: 0.006985902786254883 Inference time: 0.26692676544189453 Add cuts time: 0.006445646286010742 Cut analysis time: 0.0005967617034912109
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12584 (8), -0.12468 (8), -0.11732 (8), -0.11679 (8), -0.11319 (8), -0.11203 (8), -0.10508 (8), -0.10454 (8), -0.00354 (8), -0.00138 (8), 
Length of domains: 10
Time: pickout 0.0005    decision 0.0221    set_bounds 0.0245    solve 0.1304    add 0.0008    
Accumulated time: pickout 0.0028    decision 0.5928    set_bounds 0.0609    solve 0.5132    add 0.2163    
Current (lb-rhs): -0.12584352493286133
110 domains visited
Cumulative time: 1.9216337203979492

BaB round 2
batch: 10
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1388] [/input-8, 1395] [/input-8, 1388] [/input-8, 1388] [/input-8, 1395] [/input-8, 1388] [/input-8, 1395] [/input-8, 1388] [/input-8, 1388] [/input-8, 1395] 
split level 1: [/input-8, 1389] [/input-8, 1388] [/input-8, 1389] [/input-8, 1395] [/input-8, 1388] [/input-8, 1384] [/input-8, 1388] [/input-8, 1389] [/input-8, 1395] [/input-8, 1388] 
split level 2: [/input-8, 1396] [/input-8, 1389] [/input-8, 1396] [/input-8, 1396] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1396] [/input-8, 1396] [/input-8, 1389] 
split level 3: [/input-8, 1384] [/input-8, 1396] [/input-8, 1384] [/input-8, 116] [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1384] [/input-8, 116] [/input-8, 1396] 
split level 4: [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 1398] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 1398] [/input-8, 116] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0941762924194336
10 lb beta sum: 0.157846137881279, worst -0.09271521866321564
Time: prepare 0.0060    bound 0.1331    transfer 0.0035    finalize 0.0019    func 0.1465    
Accumulated time: func 0.8294    prepare 0.0555    bound 0.7561    transfer 0.0064    finalize 0.0105    
all_split False
======================Cut inference begins======================
max lb tensor(0.05354595) min lb tensor(-0.09246930)
Number of Verified Splits: 64 of 320
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.016692399978637695 
BICCOS Cumulative time: 0.3610353469848633
Preprocessing time: 0.00919651985168457 Inference time: 0.006624460220336914 Add cuts time: 0.0005800724029541016 Cut analysis time: 0.0002913475036621094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09247 (13), -0.09085 (13), -0.08670 (13), -0.08563 (13), -0.08361 (13), -0.08187 (13), -0.08163 (13), -0.08082 (13), -0.07963 (13), -0.07944 (13), -0.07883 (13), -0.07840 (13), -0.07838 (13), -0.07834 (13), -0.07820 (13), -0.07806 (13), -0.07805 (13), -0.07802 (13), -0.07752 (13), -0.07749 (13), 
Length of domains: 256
Time: pickout 0.0013    decision 0.0181    set_bounds 0.0220    solve 0.1466    add 0.0021    
Accumulated time: pickout 0.0041    decision 0.6109    set_bounds 0.0828    solve 0.6597    add 0.2184    
Current (lb-rhs): -0.09246930480003357
366 domains visited
Cumulative time: 2.128882646560669

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1395] [/input-12, 50] [/input-8, 1395] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-8, 1395] [/input-12, 50] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08740615844726562
10 lb beta sum: 0.19730767607688904, worst -0.08666889369487762
Time: prepare 0.0101    bound 0.1197    transfer 0.0012    finalize 0.0025    func 0.1368    
Accumulated time: func 0.9662    prepare 0.0658    bound 0.8758    transfer 0.0076    finalize 0.0130    
all_split False
======================Cut inference begins======================
max lb tensor(0.05910201) min lb tensor(-0.08659178)
Number of Verified Splits: 154 of 512
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.037400245666503906 
BICCOS Cumulative time: 0.3984355926513672
Preprocessing time: 0.01487588882446289 Inference time: 0.01924419403076172 Add cuts time: 0.0029680728912353516 Cut analysis time: 0.0003120899200439453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08659 (14), -0.08496 (14), -0.08066 (14), -0.07931 (14), -0.07876 (14), -0.07673 (14), -0.07597 (14), -0.07455 (14), -0.07374 (14), -0.07368 (14), -0.07315 (14), -0.07259 (14), -0.07235 (14), -0.07210 (14), -0.07206 (14), -0.07195 (14), -0.07192 (14), -0.07180 (14), -0.07171 (14), -0.07149 (14), 
Length of domains: 358
Time: pickout 0.0036    decision 0.0230    set_bounds 0.0221    solve 0.1370    add 0.0017    
Accumulated time: pickout 0.0078    decision 0.6339    set_bounds 0.1050    solve 0.7967    add 0.2201    
Current (lb-rhs): -0.08659178018569946
724 domains visited
Cumulative time: 2.3548734188079834

BaB round 4
batch: 358
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08180046081542969
10 lb beta sum: 0.2535238265991211, worst -0.08108703792095184
Time: prepare 0.0135    bound 0.1233    transfer 0.0025    finalize 0.0031    func 0.1470    
Accumulated time: func 1.1133    prepare 0.0795    bound 0.9991    transfer 0.0101    finalize 0.0161    
all_split False
======================Cut inference begins======================
max lb tensor(0.28979012) min lb tensor(-0.08103281)
Number of Verified Splits: 204 of 716
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.050673723220825195 
BICCOS Cumulative time: 0.4491093158721924
Preprocessing time: 0.020357131958007812 Inference time: 0.026604652404785156 Add cuts time: 0.003400087356567383 Cut analysis time: 0.00031185150146484375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08103 (15), -0.07940 (15), -0.07508 (15), -0.07378 (15), -0.07293 (15), -0.07089 (15), -0.07036 (15), -0.06983 (15), -0.06897 (15), -0.06838 (15), -0.06820 (15), -0.06775 (15), -0.06755 (15), -0.06687 (15), -0.06675 (15), -0.06661 (15), -0.06640 (15), -0.06636 (15), -0.06607 (15), -0.06603 (15), 
Length of domains: 512
Time: pickout 0.0050    decision 0.0305    set_bounds 0.0300    solve 0.1472    add 0.0037    
Accumulated time: pickout 0.0127    decision 0.6644    set_bounds 0.1349    solve 0.9439    add 0.2238    
Current (lb-rhs): -0.08103281259536743
1236 domains visited
Cumulative time: 2.6244924068450928

BaB round 5
batch: 512
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1393] [/input-8, 1384] [/input-8, 1393] [/input-8, 1393] [/input-8, 1393] [/input-8, 1384] [/input-8, 1393] [/input-8, 1384] [/input-8, 1393] [/input-8, 1384] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23557472229003906, worst -0.07407480478286743
10 lb beta sum: 0.23557472229003906, worst -0.0739622712135315
Time: prepare 0.0435    bound 0.1254    transfer 0.0050    finalize 0.1730    func 0.3535    
Accumulated time: func 1.4668    prepare 0.1232    bound 1.1245    transfer 0.0151    finalize 0.1891    
all_split False
======================Cut inference begins======================
max lb tensor(0.00070757) min lb tensor(-0.07390314)
Number of Verified Splits: 1 of 1024
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 9
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.0331273078918457 
BICCOS Cumulative time: 0.4822366237640381
Preprocessing time: 0.032015323638916016 Inference time: 0.00035858154296875 Add cuts time: 0.0002665519714355469 Cut analysis time: 0.0004868507385253906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07390 (16), -0.07228 (16), -0.06940 (16), -0.06796 (16), -0.06778 (16), -0.06724 (16), -0.06659 (16), -0.06515 (16), -0.06348 (16), -0.06326 (16), -0.06284 (16), -0.06209 (16), -0.06196 (16), -0.06185 (16), -0.06124 (16), -0.06121 (16), -0.06113 (16), -0.06035 (16), -0.06034 (16), -0.05995 (16), 
Length of domains: 1023
Time: pickout 0.0104    decision 0.0382    set_bounds 0.0430    solve 0.3538    add 0.0046    
Accumulated time: pickout 0.0231    decision 0.7026    set_bounds 0.1779    solve 1.2977    add 0.2284    
Current (lb-rhs): -0.0739031434059143
2259 domains visited
Cumulative time: 3.1086175441741943

BaB round 6
batch: 1023
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 742] [/input-8, 742] [/input-8, 1398] [/input-8, 1398] [/input-8, 1398] [/input-8, 1398] [/input-8, 742] [/input-8, 742] [/input-8, 1398] [/input-8, 1398] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06979179382324219
10 lb beta sum: 0.19441460072994232, worst -0.06915372610092163
Time: prepare 0.0394    bound 0.1721    transfer 0.0063    finalize 0.0089    func 0.2405    
Accumulated time: func 1.7072    prepare 0.1629    bound 1.2966    transfer 0.0213    finalize 0.1980    
all_split False
======================Cut inference begins======================
max lb tensor(0.00855160) min lb tensor(-0.06911094)
Number of Verified Splits: 48 of 2046
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 9
#cuts 7-9: 14
#cuts 10-12: 6
#cuts >= 20: 0
BICCOS time: 0.07601189613342285 
BICCOS Cumulative time: 0.5582485198974609
Preprocessing time: 0.06352066993713379 Inference time: 0.00814509391784668 Add cuts time: 0.002663850784301758 Cut analysis time: 0.001682281494140625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06911 (17), -0.06575 (17), -0.06440 (17), -0.06382 (17), -0.06221 (17), -0.06191 (17), -0.06172 (17), -0.06105 (17), -0.06012 (17), -0.05910 (17), -0.05871 (17), -0.05824 (17), -0.05758 (17), -0.05751 (17), -0.05747 (17), -0.05720 (17), -0.05704 (17), -0.05702 (17), -0.05662 (17), -0.05644 (17), 
Length of domains: 1998
Time: pickout 0.0173    decision 0.0673    set_bounds 0.0867    solve 0.2408    add 0.0109    
Accumulated time: pickout 0.0404    decision 0.7698    set_bounds 0.2646    solve 1.5385    add 0.2393    
Current (lb-rhs): -0.0691109448671341
4257 domains visited
Cumulative time: 3.6103579998016357

BaB round 7
batch: 1998
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1398] [/input-8, 1398] [/input-12, 42] [/input-8, 742] [/input-12, 42] [/input-8, 742] [/input-8, 1398] [/input-8, 1398] [/input-8, 742] [/input-8, 742] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06249523162841797
10 lb beta sum: 0.18506233394145966, worst -0.06187906861305237
Time: prepare 0.0829    bound 0.2789    transfer 0.0224    finalize 0.0195    func 0.4302    
Accumulated time: func 2.1374    prepare 0.2460    bound 1.5755    transfer 0.0437    finalize 0.2175    
all_split False
======================Cut inference begins======================
max lb tensor(0.01016153) min lb tensor(-0.06184867)
Number of Verified Splits: 456 of 3996
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 136.
#cuts 1-3: 9
#cuts 4-6: 5
#cuts 7-9: 109
#cuts 10-12: 13
#cuts >= 20: 0
BICCOS time: 0.2371516227722168 
BICCOS Cumulative time: 0.7954001426696777
Preprocessing time: 0.1217646598815918 Inference time: 0.07448124885559082 Add cuts time: 0.033150672912597656 Cut analysis time: 0.0077550411224365234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06185 (18), -0.06094 (18), -0.06016 (18), -0.05742 (18), -0.05699 (18), -0.05688 (18), -0.05641 (18), -0.05607 (18), -0.05580 (18), -0.05530 (18), -0.05484 (18), -0.05459 (18), -0.05361 (18), -0.05270 (18), -0.05270 (18), -0.05269 (18), -0.05256 (18), -0.05217 (18), -0.05216 (18), -0.05205 (18), 
Length of domains: 3540
Time: pickout 0.0270    decision 0.1170    set_bounds 0.2989    solve 0.4309    add 0.0120    
Accumulated time: pickout 0.0674    decision 0.8868    set_bounds 0.5636    solve 1.9693    add 0.2513    
Current (lb-rhs): -0.06184867024421692
7797 domains visited
Cumulative time: 4.7426910400390625

BaB round 8
batch: 3540
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1394] [/input-12, 42] [/input-8, 1394] [/input-8, 819] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-8, 1394] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.055876731872558594
10 lb beta sum: 0.15516133606433868, worst -0.05527585744857788
Time: prepare 0.1478    bound 0.4653    transfer 0.0427    finalize 0.0353    func 0.7379    
Accumulated time: func 2.8753    prepare 0.3941    bound 2.0408    transfer 0.0864    finalize 0.2528    
all_split False
======================Cut inference begins======================
max lb tensor(0.02658112) min lb tensor(-0.05524643)
Number of Verified Splits: 2547 of 7080
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 338.
#cuts 1-3: 10
#cuts 4-6: 99
#cuts 7-9: 227
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 1.0259644985198975 
BICCOS Cumulative time: 1.8213646411895752
Preprocessing time: 0.22156906127929688 Inference time: 0.5936393737792969 Add cuts time: 0.19418597221374512 Cut analysis time: 0.016570091247558594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05525 (19), -0.05434 (19), -0.05355 (19), -0.05083 (19), -0.05053 (19), -0.05027 (19), -0.05022 (19), -0.04980 (19), -0.04936 (19), -0.04898 (19), -0.04882 (19), -0.04857 (19), -0.04848 (19), -0.04833 (19), -0.04795 (19), -0.04757 (19), -0.04628 (19), -0.04627 (19), -0.04587 (19), -0.04571 (19), 
Length of domains: 4533
Time: pickout 0.0493    decision 0.1974    set_bounds 0.4439    solve 0.7396    add 0.0153    
Accumulated time: pickout 0.1168    decision 1.0842    set_bounds 1.0075    solve 2.7089    add 0.2666    
Current (lb-rhs): -0.05524642765522003
12330 domains visited
Cumulative time: 7.247604608535767

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04999065399169922
10 lb beta sum: 0.17480698227882385, worst -0.07604283094406128
Time: prepare 0.1729    bound 0.5870    transfer 0.0138    finalize 0.2080    func 1.0363    
Accumulated time: func 3.9116    prepare 0.5673    bound 2.6278    transfer 0.1002    finalize 0.4608    
all_split False
======================Cut inference begins======================
max lb tensor(0.04241642) min lb tensor(-0.04931960)
Number of Verified Splits: 4267 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 424.
#cuts 1-3: 12
#cuts 4-6: 184
#cuts 7-9: 228
#cuts >= 20: 0
BICCOS time: 1.3199644088745117 
BICCOS Cumulative time: 3.141329050064087
Preprocessing time: 0.25835323333740234 Inference time: 0.7160778045654297 Add cuts time: 0.32613515853881836 Cut analysis time: 0.019398212432861328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04932 (20), -0.04839 (20), -0.04795 (19), -0.04763 (20), -0.04522 (19), -0.04486 (20), -0.04449 (20), -0.04441 (20), -0.04429 (20), -0.04387 (20), -0.04336 (20), -0.04303 (20), -0.04299 (20), -0.04298 (19), -0.04260 (20), -0.04258 (20), -0.04240 (20), -0.04194 (20), -0.04173 (20), -0.04107 (20), 
Length of domains: 4362
Time: pickout 0.0595    decision 0.2268    set_bounds 0.3684    solve 1.0389    add 0.0138    
Accumulated time: pickout 0.1762    decision 1.3110    set_bounds 1.3758    solve 3.7479    add 0.2805    
Current (lb-rhs): -0.04931959509849548
16255 domains visited
current_vram/total_varm: 30.9GB/99.9GB, batch_size increase to 8192
Cumulative time: 10.330273389816284

BaB round 10
batch: 4362
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04665565490722656
10 lb beta sum: 0.17179912328720093, worst -0.06945079565048218
Time: prepare 0.1841    bound 0.6571    transfer 0.0453    finalize 0.2267    func 1.1704    
Accumulated time: func 5.0820    prepare 0.7517    bound 3.2849    transfer 0.1455    finalize 0.6875    
all_split False
======================Cut inference begins======================
max lb tensor(0.21692950) min lb tensor(-0.04601510)
Number of Verified Splits: 4919 of 8724
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 298.
#cuts 1-3: 14
#cuts 4-6: 234
#cuts 7-9: 50
#cuts >= 20: 0
BICCOS time: 1.6252028942108154 
BICCOS Cumulative time: 4.766531944274902
Preprocessing time: 0.2826106548309326 Inference time: 0.8323800563812256 Add cuts time: 0.4983632564544678 Cut analysis time: 0.011848926544189453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04602 (21), -0.04509 (21), -0.04431 (21), -0.04204 (20), -0.04157 (21), -0.04119 (21), -0.04092 (21), -0.04058 (21), -0.03999 (21), -0.03997 (21), -0.03968 (21), -0.03923 (21), -0.03916 (20), -0.03909 (21), -0.03851 (21), -0.03831 (21), -0.03814 (21), -0.03798 (21), -0.03720 (21), -0.03701 (20), 
Length of domains: 3805
Time: pickout 0.0848    decision 0.4256    set_bounds 0.3968    solve 1.1731    add 0.0147    
Accumulated time: pickout 0.2610    decision 1.7366    set_bounds 1.7727    solve 4.9209    add 0.2952    
Current (lb-rhs): -0.04601509869098663
20060 domains visited
Cumulative time: 14.113736391067505

BaB round 11
batch: 3805
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.042621612548828125
10 lb beta sum: 0.1792285442352295, worst -0.08507515490055084
Time: prepare 0.1593    bound 0.5396    transfer 0.0319    finalize 0.0416    func 0.8226    
Accumulated time: func 5.9046    prepare 0.9113    bound 3.8245    transfer 0.1774    finalize 0.7291    
all_split False
======================Cut inference begins======================
max lb tensor(0.38715053) min lb tensor(-0.04201798)
Number of Verified Splits: 5332 of 7610
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 329.
#cuts 1-3: 21
#cuts 4-6: 269
#cuts 7-9: 39
#cuts >= 20: 0
BICCOS time: 1.6117417812347412 
BICCOS Cumulative time: 6.3782737255096436
Preprocessing time: 0.4255073070526123 Inference time: 0.8995091915130615 Add cuts time: 0.27422070503234863 Cut analysis time: 0.01250457763671875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04202 (22), -0.04112 (22), -0.04034 (22), -0.03873 (21), -0.03758 (22), -0.03690 (22), -0.03683 (22), -0.03657 (22), -0.03626 (22), -0.03601 (22), -0.03584 (21), -0.03571 (22), -0.03521 (22), -0.03467 (22), -0.03446 (22), -0.03397 (22), -0.03387 (22), -0.03364 (21), -0.03313 (22), -0.03261 (22), 
Length of domains: 2278
Time: pickout 0.0593    decision 0.2121    set_bounds 0.3489    solve 0.8249    add 0.0094    
Accumulated time: pickout 0.3203    decision 1.9487    set_bounds 2.1215    solve 5.7458    add 0.3046    
Current (lb-rhs): -0.04201798141002655
22338 domains visited
Cumulative time: 17.246846675872803

BaB round 12
batch: 2278
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.038791656494140625
10 lb beta sum: 0.16980819404125214, worst -0.0672195553779602
Time: prepare 0.0952    bound 0.3560    transfer 0.0171    finalize 0.1751    func 0.6735    
Accumulated time: func 6.5781    prepare 1.0068    bound 4.1806    transfer 0.1945    finalize 0.9043    
all_split False
======================Cut inference begins======================
max lb tensor(0.30879503) min lb tensor(-0.03815177)
Number of Verified Splits: 2719 of 4556
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 252.
#cuts 1-3: 22
#cuts 4-6: 213
#cuts 7-9: 17
#cuts >= 20: 0
BICCOS time: 0.7434043884277344 
BICCOS Cumulative time: 7.121678113937378
Preprocessing time: 0.14495563507080078 Inference time: 0.4578394889831543 Add cuts time: 0.13173723220825195 Cut analysis time: 0.008872032165527344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03815 (23), -0.03735 (23), -0.03640 (23), -0.03474 (22), -0.03364 (23), -0.03311 (23), -0.03304 (23), -0.03268 (23), -0.03225 (23), -0.03186 (22), -0.03186 (23), -0.03130 (23), -0.03076 (23), -0.03022 (23), -0.02980 (23), -0.02967 (23), -0.02964 (22), -0.02916 (23), -0.02875 (23), -0.02864 (23), 
Length of domains: 1837
Time: pickout 0.0423    decision 0.1323    set_bounds 0.2052    solve 0.6744    add 0.0137    
Accumulated time: pickout 0.3626    decision 2.0810    set_bounds 2.3267    solve 6.4202    add 0.3183    
Current (lb-rhs): -0.03815177083015442
24175 domains visited
Cumulative time: 19.090906620025635

BaB round 13
batch: 1837
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03574180603027344
10 lb beta sum: 0.17034059762954712, worst -0.045680075883865356
Time: prepare 0.0782    bound 0.2892    transfer 0.0140    finalize 0.1773    func 0.5833    
Accumulated time: func 7.1615    prepare 1.0853    bound 4.4697    transfer 0.2085    finalize 1.0816    
all_split False
======================Cut inference begins======================
max lb tensor(0.22804539) min lb tensor(-0.03510575)
Number of Verified Splits: 2642 of 3674
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 119.
#cuts 1-3: 32
#cuts 4-6: 85
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.6576113700866699 
BICCOS Cumulative time: 7.779289484024048
Preprocessing time: 0.11549544334411621 Inference time: 0.4572618007659912 Add cuts time: 0.08129310607910156 Cut analysis time: 0.0035610198974609375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03511 (24), -0.03402 (24), -0.03353 (24), -0.03092 (24), -0.03081 (23), -0.03066 (24), -0.02999 (24), -0.02964 (24), -0.02891 (24), -0.02861 (24), -0.02855 (24), -0.02846 (24), -0.02799 (24), -0.02791 (23), -0.02659 (24), -0.02654 (24), -0.02646 (24), -0.02636 (24), -0.02624 (24), -0.02587 (24), 
Length of domains: 1032
Time: pickout 0.0320    decision 0.1107    set_bounds 0.1657    solve 0.5841    add 0.0062    
Accumulated time: pickout 0.3946    decision 2.1916    set_bounds 2.4924    solve 7.0043    add 0.3245    
Current (lb-rhs): -0.03510574996471405
25207 domains visited
Cumulative time: 20.67675232887268

BaB round 14
batch: 1032
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 1240] [/input-8, 885] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03372669219970703
10 lb beta sum: 0.2900225520133972, worst -0.05488245189189911
Time: prepare 0.0416    bound 0.1803    transfer 0.0033    finalize 0.0120    func 0.2513    
Accumulated time: func 7.4128    prepare 1.1272    bound 4.6500    transfer 0.2118    finalize 1.0935    
all_split False
======================Cut inference begins======================
max lb tensor(0.45450747) min lb tensor(-0.03291135)
Number of Verified Splits: 1610 of 2064
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 51.
#cuts 1-3: 35
#cuts 4-6: 16
#cuts >= 20: 0
BICCOS time: 0.5100502967834473 
BICCOS Cumulative time: 8.289339780807495
Preprocessing time: 0.06544280052185059 Inference time: 0.4134228229522705 Add cuts time: 0.029931306838989258 Cut analysis time: 0.001253366470336914
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03291 (25), -0.03182 (25), -0.03134 (25), -0.02847 (25), -0.02792 (24), -0.02776 (25), -0.02745 (25), -0.02724 (25), -0.02667 (25), -0.02636 (25), -0.02620 (25), -0.02509 (25), -0.02493 (24), -0.02435 (25), -0.02344 (25), -0.02332 (25), -0.02330 (25), -0.02328 (25), -0.02317 (25), -0.02293 (25), 
Length of domains: 454
Time: pickout 0.0228    decision 0.0665    set_bounds 0.0903    solve 0.2518    add 0.0020    
Accumulated time: pickout 0.4174    decision 2.2582    set_bounds 2.5827    solve 7.2561    add 0.3266    
Current (lb-rhs): -0.03291134536266327
25661 domains visited
Cumulative time: 21.63590669631958

BaB round 15
batch: 454
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 1185] [/input-8, 1185] [/input-8, 1185] [/input-8, 1185] [/input-8, 1185] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027245521545410156
10 lb beta sum: 0.607571005821228, worst -0.04394008219242096
Time: prepare 0.0181    bound 0.1422    transfer 0.0016    finalize 0.0040    func 0.1725    
Accumulated time: func 7.5853    prepare 1.1455    bound 4.7922    transfer 0.2135    finalize 1.0975    
all_split False
======================Cut inference begins======================
max lb tensor(0.60669518) min lb tensor(-0.02644452)
Number of Verified Splits: 660 of 908
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 31
#cuts >= 20: 0
BICCOS time: 0.15043020248413086 
BICCOS Cumulative time: 8.439769983291626
Preprocessing time: 0.02793431282043457 Inference time: 0.11146712303161621 Add cuts time: 0.010355234146118164 Cut analysis time: 0.0006735324859619141
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02644 (26), -0.02573 (25), -0.02533 (26), -0.02486 (26), -0.02404 (26), -0.02291 (26), -0.02273 (25), -0.02246 (26), -0.02200 (26), -0.02133 (26), -0.02096 (26), -0.02061 (25), -0.02022 (26), -0.01988 (26), -0.01976 (26), -0.01962 (26), -0.01888 (26), -0.01856 (26), -0.01780 (26), -0.01758 (25), 
Length of domains: 248
Time: pickout 0.0088    decision 0.0363    set_bounds 0.0389    solve 0.1727    add 0.0039    
Accumulated time: pickout 0.4262    decision 2.2945    set_bounds 2.6216    solve 7.4287    add 0.3305    
Current (lb-rhs): -0.02644452452659607
25909 domains visited
Cumulative time: 22.051981210708618

BaB round 16
batch: 248
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1240] [/input-8, 1240] [/input-8, 493] [/input-8, 1240] [/input-8, 493] [/input-8, 1240] [/input-8, 493] [/input-8, 1240] [/input-8, 493] [/input-8, 1240] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.020837783813476562
10 lb beta sum: 0.6178904175758362, worst -0.016909360885620117
Time: prepare 0.0098    bound 0.1421    transfer 0.0011    finalize 0.0022    func 0.1586    
Accumulated time: func 7.7438    prepare 1.1556    bound 4.9343    transfer 0.2146    finalize 1.0997    
all_split False
======================Cut inference begins======================
max lb tensor(0.47104156) min lb tensor(-0.01679152)
Number of Verified Splits: 392 of 496
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 30
#cuts >= 20: 0
BICCOS time: 0.08908557891845703 
BICCOS Cumulative time: 8.528855562210083
Preprocessing time: 0.014690876007080078 Inference time: 0.068878173828125 Add cuts time: 0.004961729049682617 Cut analysis time: 0.0005548000335693359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01679 (27), -0.01568 (27), -0.01523 (27), -0.01423 (27), -0.01312 (27), -0.01268 (27), -0.01233 (27), -0.01162 (27), -0.01134 (27), -0.01102 (27), -0.01078 (27), -0.01048 (27), -0.01025 (27), -0.01004 (27), -0.00980 (27), -0.00969 (26), -0.00915 (27), -0.00913 (27), -0.00911 (27), -0.00886 (27), 
Length of domains: 104
Time: pickout 0.0061    decision 0.0246    set_bounds 0.0213    solve 0.1587    add 0.0014    
Accumulated time: pickout 0.4323    decision 2.3191    set_bounds 2.6429    solve 7.5874    add 0.3318    
Current (lb-rhs): -0.01679152250289917
26013 domains visited
Cumulative time: 22.35563087463379

BaB round 17
batch: 104
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.016579627990722656
10 lb beta sum: 0.5369045734405518, worst -0.012597799301147461
Time: prepare 0.0042    bound 0.1315    transfer 0.0006    finalize 0.0010    func 0.1387    
Accumulated time: func 7.8825    prepare 1.1600    bound 5.0658    transfer 0.2152    finalize 1.1007    
all_split False
======================Cut inference begins======================
max lb tensor(0.46391559) min lb tensor(-0.01255721)
Number of Verified Splits: 178 of 208
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03943443298339844 
BICCOS Cumulative time: 8.568289995193481
Preprocessing time: 0.0062465667724609375 Inference time: 0.03126263618469238 Add cuts time: 0.0017406940460205078 Cut analysis time: 0.00018453598022460938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01256 (28), -0.01196 (28), -0.01081 (28), -0.00957 (27), -0.00841 (28), -0.00746 (28), -0.00740 (28), -0.00706 (28), -0.00680 (28), -0.00658 (27), -0.00653 (28), -0.00566 (28), -0.00491 (28), -0.00444 (27), -0.00335 (28), -0.00332 (28), -0.00286 (28), -0.00282 (28), -0.00259 (28), -0.00255 (27), 
Length of domains: 30
Time: pickout 0.0030    decision 0.0169    set_bounds 0.0088    solve 0.1388    add 0.0009    
Accumulated time: pickout 0.4353    decision 2.3360    set_bounds 2.6517    solve 7.7261    add 0.3328    
Current (lb-rhs): -0.01255720853805542
26043 domains visited
Cumulative time: 22.56451153755188

BaB round 18
batch: 30
splitting decisions: 
split level 0: [/input-8, 139] [/input-8, 139] [/input-8, 117] [/input-8, 117] [/input-8, 117] [/input-8, 117] [/input-8, 117] [/input-8, 139] [/input-8, 139] [/input-8, 139] 
split level 1: [/input-8, 931] [/input-8, 931] [/input-8, 139] [/input-8, 139] [/input-8, 139] [/input-8, 139] [/input-8, 139] [/input-8, 931] [/input-8, 931] [/input-8, 931] 
split level 2: [/input-8, 1097] [/input-8, 1097] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 1097] [/input-8, 1097] [/input-8, 1097] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.00447845458984375

all verified at 1th iter
Time: prepare 0.0047    bound 0.0159    transfer 0.0008    finalize 0.0012    func 0.0241    
Accumulated time: func 7.9067    prepare 1.1649    bound 5.0816    transfer 0.2160    finalize 1.1019    
all_split False
======================Cut inference begins======================
max lb tensor(0.05016307) min lb tensor(0.00040817)
Number of Verified Splits: 240 of 240
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.00710749626159668 
BICCOS Cumulative time: 8.575397491455078
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0016    decision 0.0173    set_bounds 0.0149    solve 0.0242    add 0.0003    
Accumulated time: pickout 0.4368    decision 2.3534    set_bounds 2.6666    solve 7.7503    add 0.3331    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
26043 domains visited
Cumulative time: 22.630716562271118

Result: safe in 24.2685 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 84, vnnlib ID: 84 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.62381744, -28.09670830, -18.92805672, -21.62400627, -18.04868507,
         -20.67170334, -18.38792801, -22.29936600, -26.56884384, -27.05737495]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [686]; unstable size 686; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 230, 1, 686] with unstable size 229 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 686] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 686] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [229]; unstable size 229; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 229] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 229] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.50022173,  8.58374977,  0.05487370,  2.84900141,  1.87417698,
         -0.72468829,  3.40504527,  7.17037439,  7.46117973]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.62381744, -28.09670830, -18.92805672, -21.62400627, -18.04868507,
         -20.67170334, -18.38792801, -22.29936600, -26.56884384, -27.05737495]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.62763786, -27.96693420, -18.82089806, -21.58105659, -18.18916893,
          -20.65969467, -17.92498779, -22.51766396, -26.59140778, -26.94355965]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.26418114]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0061 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0738 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 85, vnnlib ID: 85 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.05389786, -20.54568100, -25.38948441, -26.07571030, -24.92573357,
         -26.81814766, -25.31372643, -25.39832497, -22.18379402, -23.40080070]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [595]; unstable size 595; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 233, 1, 595] with unstable size 232 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 595] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 595] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [232]; unstable size 232; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 232] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.74438763, 2.89176750, 3.72229528, 2.51304626, 4.30712271, 2.80102062,
         3.10480547, 0.20504284, 1.77497387]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0633 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 86, vnnlib ID: 86 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.32361412, -25.52174950, -20.63148117, -22.61431122, -22.40266609,
         -22.09627724, -23.98217392, -22.95088196, -26.26723480, -25.69747353]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [912]; unstable size 912; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 912] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 912] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 912] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 239] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.74784994, 3.37162209, 1.17322958, 0.89480489, 0.68540317, 2.25614309,
         1.51441860, 4.23806047, 3.34960651]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0731 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 87, vnnlib ID: 87 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.69555855, -19.83600044, -17.26213837, -16.53295326, -15.76759911,
         -16.55274010, -15.97445679, -15.69591236, -22.56094933, -18.99766541]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [484]; unstable size 484; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 223, 1, 484] with unstable size 222 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 484] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 484] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [222]; unstable size 222; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 222] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 222] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.12594318,  2.36834168,  0.02151155, -0.42955160, -0.99394369,
         -0.44192886, -1.36476994,  4.78464270,  1.58999181]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.69555855, -19.83600044, -17.26213837, -16.53295326, -15.76759911,
         -16.55274010, -15.97445679, -15.69591236, -22.56094933, -18.99766541]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.89224243, -20.05119324, -17.43051529, -16.67961121, -15.76606178,
          -16.74633598, -15.92820740, -16.27584839, -22.73025513, -19.33327484],
         [-21.89224243, -20.05119324, -17.43051529, -16.67961121, -15.76606178,
          -16.74633598, -15.92820740, -16.27584839, -22.73025513, -19.33327484]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.40376282, -0.50978661,  0.47048759, -0.34764099]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0748 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 88, vnnlib ID: 88 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.74517250, -27.26931763, -22.31864548, -21.42955971, -22.42046928,
         -21.44980049, -22.51526642, -20.76612473, -26.78885269, -23.30550575]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [399]; unstable size 399; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 176, 1, 399] with unstable size 175 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 399] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 399] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [175]; unstable size 175; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 175] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 175] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.71335769,  3.37155795, -1.61985373, -0.57951510, -1.65425396,
         -0.81910729, -2.40787172,  3.42854500, -0.36425400]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.74517250, -27.26931763, -22.31864548, -21.42955971, -22.42046928,
         -21.44980049, -22.51526642, -20.76612473, -26.78885269, -23.30550575]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.74517059, -27.26931572, -22.31864166, -21.42955780, -22.42046738,
          -21.44979858, -22.51526833, -20.76612663, -26.78884697, -23.30550766],
         [-25.74517059, -27.26931572, -22.31864166, -21.42955780, -22.42046738,
          -21.44979858, -22.51526833, -20.76612663, -26.78884697, -23.30550766]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.88908386,  0.10182571, -0.86884308,  0.19662666, -1.55251503,
           0.98686600]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0819 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 89, vnnlib ID: 89 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.06668091, -12.17250633, -18.19817734, -17.74991226, -18.22573662,
         -18.83922386, -18.43832207, -18.79791641, -13.75891685, -14.38429832]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [591]; unstable size 591; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 591] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 591] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 591] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 256] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.43584156, 4.09200811, 4.03862000, 4.51079798, 5.00953007, 4.46496391,
         5.03483009, 0.23301744, 1.42504859]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0632 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 90, vnnlib ID: 90 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.34238243, -16.93456459, -14.43105412, -14.20242596, -14.38679028,
         -14.68807125, -15.41123962, -15.82969379, -17.16383553, -15.87702465]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [859]; unstable size 859; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 248, 1, 859] with unstable size 247 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 859] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 859] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [247]; unstable size 247; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 247] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 247] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.60208189, -0.84271860, -2.06193995, -2.20308518, -2.22541595,
         -1.86848938, -1.36994278, -0.36857593, -1.56844378]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.34238243, -16.93456459, -14.43105412, -14.20242596, -14.38679028,
         -14.68807125, -15.41123962, -15.82969379, -17.16383553, -15.87702465]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.34238243, -16.93456650, -14.43105221, -14.20242500, -14.38679028,
          -14.68807125, -15.41123772, -15.82969379, -17.16383553, -15.87702370],
         [-16.34238243, -16.93456650, -14.43105221, -14.20242500, -14.38679028,
          -14.68807125, -15.41123772, -15.82969379, -17.16383553, -15.87702370]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.93114471,  1.52332878, -0.98018551, -1.20881271, -1.02444744,
          -0.72316647,  0.41845608,  1.75259781,  0.46578598]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         ...,


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0921 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 91, vnnlib ID: 91 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.16949272, -23.99048996, -31.56820297, -31.41168404, -30.28091240,
         -31.78048897, -32.67536545, -30.17310143, -29.00139236, -24.21942329]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [740]; unstable size 740; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 245, 1, 740] with unstable size 244 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 740] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 740] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [244]; unstable size 244; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 244] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 244] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.38111305,  5.21995306,  5.14613438,  3.91153574,  5.43957090,
          6.09781551,  3.61251163,  3.57682729, -0.52638078]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-30.16949272, -23.99048996, -31.56820297, -31.41168404, -30.28091240,
         -31.78048897, -32.67536545, -30.17310143, -29.00139236, -24.21942329]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.39106178, -23.67284584, -30.69213867, -30.40574837, -29.33213806,
          -30.76441956, -31.73852158, -29.12598610, -28.38734436, -23.48725510]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.18559074]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0055 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0735 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 92, vnnlib ID: 92 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.87058258, -22.74460030, -18.83897781, -17.07898903, -18.22540092,
         -16.89878654, -19.11079788, -18.79213715, -26.21196175, -21.30853462]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [669]; unstable size 669; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 241, 1, 669] with unstable size 240 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 669] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 669] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [240]; unstable size 240; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 240] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 240] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.66332340,  4.03361607,  0.93628335, -0.12254727,  0.23944283,
          1.05922604,  0.79270172,  7.63720179,  2.90536690]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.87058258, -22.74460030, -18.83897781, -17.07898903, -18.22540092,
         -16.89878654, -19.11079788, -18.79213715, -26.21196175, -21.30853462]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.51282120, -22.28214264, -18.49987793, -16.76547241, -17.89261055,
          -16.77055550, -18.66166306, -18.61735344, -25.76009750, -20.99545097]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00508308]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0067 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0816 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 93, vnnlib ID: 93 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.02754021, -16.85969925, -22.22765350, -22.47852516, -22.75400734,
         -22.81135941, -23.67437744, -22.92312431, -17.78327179, -18.35700417]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [740]; unstable size 740; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 266, 1, 740] with unstable size 265 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 740] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 740] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [265]; unstable size 265; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 265] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 265] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.72773457,  3.26004553,  3.78024054,  3.84159517,  3.89679289,
          4.82130146,  3.72940278, -0.13638735,  0.71589279]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.02754021, -16.85969925, -22.22765350, -22.47852516, -22.75400734,
         -22.81135941, -23.67437744, -22.92312431, -17.78327179, -18.35700417]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.84it/s]100%|██████████| 1/1 [00:00<00:00,  8.84it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.77746010, -17.05466080, -21.88848305, -22.15901375, -22.44706535,
          -22.50233269, -23.34392357, -22.66395569, -17.36938095, -18.43949699]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.31472015]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1157 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 26.383886337280273
alpha/beta optimization time: 1.2402422428131104
initial alpha-crown bounds: tensor([[ 1.80881166,  3.35405684,  3.86240458,  3.93695402,  3.99371862,
          4.90125322,  3.85100245, -0.08674860,  0.76243436]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.08674860000610352
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.569885969162
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.56984448432922
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.56981682777405
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.56979537010193
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.5697762966156
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.56975769996643
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.5697386264801
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.5697193145752
Verifying property 7 with 1 instances.
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08674860]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.02754021, -16.85969925, -22.22765350, -22.47852516, -22.75400734,
        -22.81135941, -23.67437744, -22.92312431, -17.78327179, -18.35700417],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08674860]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 740
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 259
Node /15 input 0: size torch.Size([100]) unstable 16
-----------------
# of unstable neurons: 1015
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001385211944580078
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08674907684326172
10 lb beta sum: 0.0, worst -0.08675050735473633
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0554    transfer 0.0001    finalize 0.0001    func 0.0559    
Accumulated time: func 0.0559    prepare 0.0002    bound 0.0554    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] 
split level 1: [/input-12, 24] 
split level 2: [/input-12, 64] 
split level 3: [/input-12, 90] 
split level 4: [/input-12, 29] 
split level 5: [/input-12, 42] 
split level 6: [/input-12, 59] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 69] 
split level 9: [/input-12, 12] 
split level 10: [/input-8, 1973] 
split level 11: [/input-12, 61] 
split level 12: [/input-8, 1392] 
split level 13: [/input-8, 940] 
split level 14: [/input-8, 1971] 
split level 15: [/input-8, 717] 
split level 16: [/input-8, 1490] 
split level 17: [/input-8, 1641] 
split level 18: [/input-8, 821] 
split level 19: [/input-8, 746] 
split level 20: [/input, 887] 
split level 21: [/input-8, 1704] 
split level 22: [/input-8, 1697] 
split level 23: [/input-8, 1974] 
split level 24: [/input-8, 923] 
split level 25: [/input-8, 931] 
split level 26: [/input-8, 757] 
split level 27: [/input, 2698] 
split level 28: [/input-8, 916] 
split level 29: [/input-8, 337] 
split level 30: [/input-8, 758] 
split level 31: [/input-8, 1333] 
split level 32: [/input-8, 1649] 
split level 33: [/input-8, 1505] 
split level 34: [/input-8, 825] 
split level 35: [/input, 3578] 
split level 36: [/input-8, 827] 
split level 37: [/input-8, 1593] 
split level 38: [/input, 1218] 
split level 39: [/input-8, 355] 
split level 40: [/input-8, 755] 
split level 41: [/input-8, 934] 
split level 42: [/input-8, 742] 
split level 43: [/input-8, 1677] 
split level 44: [/input-8, 1390] 
split level 45: [/input, 4035] 
split level 46: [/input-8, 1184] 
split level 47: [/input, 3449] 
split level 48: [/input-8, 715] 
split level 49: [/input, 2762] 
split level 50: [/input, 661] 
split level 51: [/input, 3448] 
split level 52: [/input-8, 330] 
split level 53: [/input-8, 1975] 
split level 54: [/input, 886] 
split level 55: [/input-8, 415] 
split level 56: [/input-8, 331] 
split level 57: [/input, 2758] 
split level 58: [/input-8, 1594] 
split level 59: [/input-8, 589] 
split level 60: [/input-8, 250] 
split level 61: [/input-8, 1686] 
split level 62: [/input, 1015] 
split level 63: [/input-8, 580] 
split level 64: [/input-8, 1678] 
split level 65: [/input, 326] 
split level 66: [/input, 949] 
split level 67: [/input, 1016] 
split level 68: [/input-8, 251] 
split level 69: [/input, 1014] 
split level 70: [/input-8, 1655] 
split level 71: [/input-8, 1176] 
split level 72: [/input, 1217] 
split level 73: [/input-8, 1027] 
split level 74: [/input, 2408] 
split level 75: [/input-8, 1688] 
split level 76: [/input-8, 753] 
split level 77: [/input, 2389] 
split level 78: [/input-8, 413] 
split level 79: [/input-8, 1987] 
split level 80: [/input, 2151] 
split level 81: [/input-8, 732] 
split level 82: [/input, 2152] 
split level 83: [/input, 1019] 
split level 84: [/input, 3572] 
split level 85: [/input, 679] 
split level 86: [/input, 1012] 
split level 87: [/input, 2136] 
split level 88: [/input, 4012] 
split level 89: [/input, 667] 
split level 90: [/input, 2425] 
split level 91: [/input-8, 1707] 
split level 92: [/input-8, 241] 
split level 93: [/input-8, 756] 
split level 94: [/input-8, 1647] 
split level 95: [/input, 1085] 
split level 96: [/input-8, 1034] 
split level 97: [/input, 885] 
split level 98: [/input, 856] 
split level 99: [/input, 666] 
split level 100: [/input, 2153] 
split level 101: [/input, 2150] 
split level 102: [/input-8, 838] 
split level 103: [/input-8, 254] 
split level 104: [/input, 2407] 
split level 105: [/input, 681] 
split level 106: [/input, 1228] 
split level 107: [/input, 1278] 
split level 108: [/input, 1469] 
split level 109: [/input-8, 819] 
split level 110: [/input, 346] 
split level 111: [/input, 730] 
split level 112: [/input, 3194] 
split level 113: [/input, 2555] 
split level 114: [/input, 874] 
split level 115: [/input, 869] 
split level 116: [/input, 1260] 
split level 117: [/input, 677] 
split level 118: [/input-8, 246] 
split level 119: [/input, 4039] 
split level 120: [/input, 2137] 
split level 121: [/input-8, 24] 
split level 122: [/input, 1102] 
split level 123: [/input, 2405] 
split level 124: [/input, 682] 
split level 125: [/input-8, 1381] 
split level 126: [/input, 1453] 
split level 127: [/input, 2749] 
split level 128: [/input, 2406] 
split level 129: [/input-8, 1663] 
split level 130: [/input, 2553] 
split level 131: [/input, 193] 
split level 132: [/input, 2409] 
split level 133: [/input-8, 406] 
split level 134: [/input, 2149] 
split level 135: [/input, 1250] 
split level 136: [/input-8, 6] 
split level 137: [/input, 3195] 
split level 138: [/input, 2549] 
split level 139: [/input, 116] 
split level 140: [/input, 2931] 
split level 141: [/input, 2550] 
split level 142: [/input-8, 1098] 
split level 143: [/input, 2102] 
split level 144: [/input, 1266] 
split level 145: [/input, 2133] 
split level 146: [/input, 1006] 
split level 147: [/input, 3445] 
split level 148: [/input, 854] 
split level 149: [/input, 2932] 
split level 150: [/input, 1045] 
split level 151: [/input, 372] 
split level 152: [/input-8, 752] 
split level 153: [/input, 2118] 
split level 154: [/input, 2376] 
split level 155: [/input, 2404] 
split level 156: [/input-8, 958] 
split level 157: [/input, 2884] 
split level 158: [/input, 1245] 
split level 159: [/input, 2552] 
split level 160: [/input, 2551] 
split level 161: [/input-8, 1986] 
split level 162: [/input, 728] 
split level 163: [/input, 678] 
split level 164: [/input, 1244] 
split level 165: [/input, 2216] 
split level 166: [/input, 2419] 
split level 167: [/input-8, 399] 
split level 168: [/input, 2296] 
split level 169: [/input-8, 1613] 
split level 170: [/input, 2295] 
split level 171: [/input, 2867] 
split level 172: [/input, 727] 
split level 173: [/input, 329] 
split level 174: [/input, 857] 
split level 175: [/input, 1058] 
split level 176: [/input, 1676] 
split level 177: [/input, 2784] 
split level 178: [/input, 209] 
split level 179: [/input, 2010] 
split level 180: [/input, 1277] 
split level 181: [/input, 1457] 
split level 182: [/input, 115] 
split level 183: [/input, 3495] 
split level 184: [/input, 2768] 
split level 185: [/input, 900] 
split level 186: [/input-8, 1158] 
split level 187: [/input, 852] 
split level 188: [/input, 1105] 
split level 189: [/input, 2171] 
split level 190: [/input, 67] 
split level 191: [/input, 1133] 
split level 192: [/input, 2012] 
split level 193: [/input, 2132] 
split level 194: [/input-8, 7] 
split level 195: [/input, 2298] 
split level 196: [/input, 1134] 
split level 197: [/input, 3869] 
split level 198: [/input, 2545] 
split level 199: [/input, 1216] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0867147445678711
10 lb beta sum: 0.0, worst -0.08671236038208008
Time: prepare 0.0119    bound 0.0993    transfer 0.0012    finalize 0.0032    func 0.1182    
Accumulated time: func 0.1741    prepare 0.0224    bound 0.1547    transfer 0.0013    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.35328722) min lb tensor(-0.08670855)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.010700464248657227 
BICCOS Cumulative time: 0.010700464248657227
Preprocessing time: 0.00989389419555664 Inference time: 0.00037384033203125 Add cuts time: 0.000141143798828125 Cut analysis time: 0.00029158592224121094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07826 (1), -0.07810 (1), -0.07780 (1), -0.07775 (1), -0.07746 (1), -0.07703 (1), -0.07690 (1), -0.07689 (1), -0.07678 (1), -0.07633 (1), -0.07632 (1), -0.07620 (1), -0.07588 (1), -0.07571 (1), -0.07553 (1), -0.07548 (1), -0.07546 (1), -0.07512 (1), -0.07476 (1), -0.07432 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5318    set_bounds 0.0092    solve 0.1183    add 0.0760    
Accumulated time: pickout 0.0004    decision 0.5318    set_bounds 0.0092    solve 0.1183    add 0.0760    
Current (lb-rhs): -0.0782613754272461
50 domains visited
Cumulative time: 0.8082599639892578

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 31] [/input-12, 24] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 64] [/input-12, 24] [/input-12, 31] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 42] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 3: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 42] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 42] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06419944763183594

all verified at 1th iter
Time: prepare 0.0074    bound 0.0119    transfer 0.0007    finalize 0.0024    func 0.0250    
Accumulated time: func 0.1990    prepare 0.0301    bound 0.1666    transfer 0.0020    finalize 0.0058    
all_split False
======================Cut inference begins======================
max lb tensor(0.16282052) min lb tensor(0.00339031)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03444314002990723 
BICCOS Cumulative time: 0.04514360427856445
Preprocessing time: 0.011797666549682617 Inference time: 0.0139007568359375 Add cuts time: 0.008547306060791016 Cut analysis time: 0.00019741058349609375
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0013    decision 0.0247    set_bounds 0.0117    solve 0.0250    add 0.0150    
Accumulated time: pickout 0.0016    decision 0.5565    set_bounds 0.0209    solve 0.1433    add 0.0910    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 31]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.72051548e-11, 1.29314646e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 31]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.72051548e-11, 1.34304091e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 31]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.75661872e-20, 1.08587489e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 31]), tensor([1., 1.]), tensor([0, 0]), tensor([5.75661872e-20, 1.34301707e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.017582416534423828

all verified at 1th iter
Time: prepare 0.0003    bound 0.0100    transfer 0.0001    finalize 0.0001    func 0.0107    
Accumulated time: func 0.2097    prepare 0.0305    bound 0.1766    transfer 0.0021    finalize 0.0059    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 197.44533705711365
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.5548 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 94, vnnlib ID: 94 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.95301628, -37.16675568, -28.61315918, -31.63938332, -31.43132591,
         -31.90670967, -31.58338928, -34.70899582, -29.83979225, -36.90626907]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [511]; unstable size 511; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 511] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 511] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 511] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 148] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.11264598,  7.84995270,  2.51627040,  2.42221284,  2.71285653,
          2.42410803,  5.54274845,  0.54273689,  7.53125143]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.95301628, -37.16675568, -28.61315918, -31.63938332, -31.43132591,
         -31.90670967, -31.58338928, -34.70899582, -29.83979225, -36.90626907]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-27.95301628, -37.16675568, -28.61315918, -31.63938332, -31.43132591,
          -31.90670967, -31.58338928, -34.70899582, -29.83979225, -36.90626907]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.66014290]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0720 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 95, vnnlib ID: 95 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.89297295, -27.33354378, -29.85372162, -29.49278831, -29.63881493,
         -29.50118065, -28.79456902, -32.01272583, -30.67852783, -30.54553604]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [545]; unstable size 545; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 545] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 545] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 545] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 206] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.09797335,  0.63166380,  0.38092375,  0.26649189,  0.20289707,
          0.00656366,  2.20104027,  2.04292107,  2.05920005]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.89297295, -27.33354378, -29.85372162, -29.49278831, -29.63881493,
         -29.50118065, -28.79456902, -32.01272583, -30.67852783, -30.54553604]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-27.34124565, -27.52548599, -29.41050339, -29.07751274, -29.21006012,
          -29.12439346, -28.47667313, -31.67535019, -30.41997719, -30.50797653]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.18424034]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0766 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 96, vnnlib ID: 96 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.40174294, -21.80084610, -13.97534084, -16.28988266, -14.66720581,
         -15.45098114, -14.34288788, -16.27135849, -21.38418579, -20.94428825]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [473]; unstable size 473; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 262, 1, 473] with unstable size 261 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 473] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 473] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [261]; unstable size 261; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 261] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 261] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.13220215,  5.32813597, -1.68543804,  0.95246208, -1.03167796,
         -0.07594645,  0.28766179,  5.26238585,  4.65756130]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.40174294, -21.80084610, -13.97534084, -16.28988266, -14.66720581,
         -15.45098114, -14.34288788, -16.27135849, -21.38418579, -20.94428825]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.40174294, -21.80084610, -13.97533989, -16.28988647, -14.66720772,
          -15.45098114, -14.34288788, -16.27136040, -21.38418961, -20.94428825],
         [-17.40174294, -21.80084610, -13.97533989, -16.28988647, -14.66720772,
          -15.45098114, -14.34288788, -16.27136040, -21.38418961, -20.94428825]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.36754799,  0.32431984,  1.10809326]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0799 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 97, vnnlib ID: 97 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.44726753, -23.07283783, -15.31714439, -16.86220932, -16.37182045,
         -17.43654442, -16.84148979, -17.91537094, -19.79871750, -21.47072220]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1135]; unstable size 1135; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 418, 1, 1135] with unstable size 417 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 1135] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1135] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [417]; unstable size 417; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 417] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 417] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.41564417,  4.65418434,  0.18066603, -0.18956983,  0.62921101,
         -0.03981161,  1.17113924,  2.01148963,  3.41380835]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-18.44726753, -23.07283783, -15.31714439, -16.86220932, -16.37182045,
         -17.43654442, -16.84148979, -17.91537094, -19.79871750, -21.47072220]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.57it/s]100%|██████████| 1/1 [00:00<00:00,  8.56it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.83646393, -22.39689064, -14.86150932, -16.11657333, -15.43437386,
          -16.66946793, -16.04981232, -17.15288162, -19.10764885, -20.77401161],
         [-17.83646393, -22.39689064, -14.86150932, -16.11657333, -15.43437386,
          -16.66946793, -16.04981232, -17.15288162, -19.10764885, -20.77401161]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.57286453, 1.18830299]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1196 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.51242733001709
alpha/beta optimization time: 1.246422529220581
initial alpha-crown bounds: tensor([[ 1.54290402,  4.87704659,  0.28550032, -0.07817465,  0.74323380,
          0.05854940,  1.29010987,  2.20426559,  3.58899212]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.0781746506690979
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.55572032928467
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5556788444519
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.55565237998962
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.5556309223175
Verifying property 3 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.07817465]], device='cuda:0') need to verify.
Model prediction is: tensor([-18.44726753, -23.07283783, -15.31714439, -16.86220932, -16.37182045,
        -17.43654442, -16.84148979, -17.91537094, -19.79871750, -21.47072220],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.07817465]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1135
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 400
Node /15 input 0: size torch.Size([100]) unstable 27
-----------------
# of unstable neurons: 1562
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010347366333007812
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07817292213439941
10 lb beta sum: 0.0, worst -0.07818281650543213
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0541    transfer 0.0001    finalize 0.0001    func 0.0546    
Accumulated time: func 0.0546    prepare 0.0002    bound 0.0541    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 59] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 67] 
split level 5: [/input-12, 97] 
split level 6: [/input-12, 14] 
split level 7: [/input-12, 83] 
split level 8: [/input-12, 55] 
split level 9: [/input-8, 173] 
split level 10: [/input-8, 1186] 
split level 11: [/input-12, 86] 
split level 12: [/input-8, 2018] 
split level 13: [/input-8, 163] 
split level 14: [/input-8, 1187] 
split level 15: [/input-8, 1069] 
split level 16: [/input-8, 164] 
split level 17: [/input-8, 2010] 
split level 18: [/input-8, 1178] 
split level 19: [/input-8, 1070] 
split level 20: [/input-8, 1378] 
split level 21: [/input-8, 2025] 
split level 22: [/input-8, 2009] 
split level 23: [/input-8, 132] 
split level 24: [/input-8, 141] 
split level 25: [/input-8, 874] 
split level 26: [/input-8, 877] 
split level 27: [/input-8, 130] 
split level 28: [/input-8, 1185] 
split level 29: [/input-8, 156] 
split level 30: [/input, 631] 
split level 31: [/input-8, 1361] 
split level 32: [/input-8, 869] 
split level 33: [/input, 2798] 
split level 34: [/input-12, 35] 
split level 35: [/input-8, 1370] 
split level 36: [/input, 2781] 
split level 37: [/input-8, 1386] 
split level 38: [/input-8, 1268] 
split level 39: [/input-8, 878] 
split level 40: [/input-8, 2019] 
split level 41: [/input-8, 1382] 
split level 42: [/input-8, 906] 
split level 43: [/input-8, 876] 
split level 44: [/input-8, 33] 
split level 45: [/input, 823] 
split level 46: [/input-8, 866] 
split level 47: [/input-8, 1379] 
split level 48: [/input, 3913] 
split level 49: [/input-8, 865] 
split level 50: [/input-8, 1383] 
split level 51: [/input, 3164] 
split level 52: [/input-8, 1390] 
split level 53: [/input-8, 189] 
split level 54: [/input-8, 1179] 
split level 55: [/input-8, 291] 
split level 56: [/input, 3147] 
split level 57: [/input-8, 857] 
split level 58: [/input-8, 1385] 
split level 59: [/input-8, 1251] 
split level 60: [/input-8, 884] 
split level 61: [/input, 3197] 
split level 62: [/input, 825] 
split level 63: [/input-8, 1253] 
split level 64: [/input, 1345] 
split level 65: [/input-8, 2011] 
split level 66: [/input-8, 868] 
split level 67: [/input-8, 1763] 
split level 68: [/input-8, 362] 
split level 69: [/input-8, 1391] 
split level 70: [/input-8, 219] 
split level 71: [/input-8, 2020] 
split level 72: [/input-8, 34] 
split level 73: [/input-8, 881] 
split level 74: [/input-8, 851] 
split level 75: [/input-8, 32] 
split level 76: [/input-8, 290] 
split level 77: [/input-8, 1375] 
split level 78: [/input, 824] 
split level 79: [/input, 826] 
split level 80: [/input, 2834] 
split level 81: [/input, 2763] 
split level 82: [/input, 954] 
split level 83: [/input-8, 1561] 
split level 84: [/input-8, 1269] 
split level 85: [/input, 3277] 
split level 86: [/input-8, 1078] 
split level 87: [/input-8, 1748] 
split level 88: [/input-8, 1396] 
split level 89: [/input, 2669] 
split level 90: [/input, 3279] 
split level 91: [/input, 2765] 
split level 92: [/input, 3097] 
split level 93: [/input-8, 867] 
split level 94: [/input-8, 216] 
split level 95: [/input-8, 210] 
split level 96: [/input-8, 323] 
split level 97: [/input-8, 1358] 
split level 98: [/input-8, 217] 
split level 99: [/input, 2779] 
split level 100: [/input-8, 220] 
split level 101: [/input-8, 862] 
split level 102: [/input, 2634] 
split level 103: [/input, 2635] 
split level 104: [/input-8, 218] 
split level 105: [/input, 807] 
split level 106: [/input, 3295] 
split level 107: [/input, 2780] 
split level 108: [/input-8, 1177] 
split level 109: [/input, 3366] 
split level 110: [/input-8, 209] 
split level 111: [/input-8, 883] 
split level 112: [/input, 3323] 
split level 113: [/input, 3269] 
split level 114: [/input, 2818] 
split level 115: [/input, 839] 
split level 116: [/input-8, 1233] 
split level 117: [/input, 2652] 
split level 118: [/input, 2585] 
split level 119: [/input-12, 43] 
split level 120: [/input-8, 820] 
split level 121: [/input-8, 1347] 
split level 122: [/input-8, 1562] 
split level 123: [/input, 2685] 
split level 124: [/input-8, 886] 
split level 125: [/input, 2686] 
split level 126: [/input, 842] 
split level 127: [/input-8, 201] 
split level 128: [/input, 1927] 
split level 129: [/input, 1911] 
split level 130: [/input, 923] 
split level 131: [/input-8, 1181] 
split level 132: [/input-8, 1373] 
split level 133: [/input, 956] 
split level 134: [/input-8, 599] 
split level 135: [/input, 775] 
split level 136: [/input, 907] 
split level 137: [/input, 2921] 
split level 138: [/input-8, 1514] 
split level 139: [/input, 3270] 
split level 140: [/input, 679] 
split level 141: [/input-8, 1765] 
split level 142: [/input, 792] 
split level 143: [/input, 67] 
split level 144: [/input-8, 604] 
split level 145: [/input, 2087] 
split level 146: [/input, 2653] 
split level 147: [/input, 105] 
split level 148: [/input-8, 1189] 
split level 149: [/input, 581] 
split level 150: [/input, 805] 
split level 151: [/input, 3381] 
split level 152: [/input, 2839] 
split level 153: [/input-8, 1995] 
split level 154: [/input-8, 843] 
split level 155: [/input, 3383] 
split level 156: [/input, 937] 
split level 157: [/input, 840] 
split level 158: [/input-8, 1252] 
split level 159: [/input-8, 1750] 
split level 160: [/input, 2748] 
split level 161: [/input, 986] 
split level 162: [/input, 2870] 
split level 163: [/input, 972] 
split level 164: [/input-8, 863] 
split level 165: [/input, 3081] 
split level 166: [/input, 939] 
split level 167: [/input, 1405] 
split level 168: [/input, 3384] 
split level 169: [/input-8, 208] 
split level 170: [/input, 791] 
split level 171: [/input-8, 238] 
split level 172: [/input, 315] 
split level 173: [/input, 2665] 
split level 174: [/input, 1356] 
split level 175: [/input-8, 1384] 
split level 176: [/input-8, 887] 
split level 177: [/input, 113] 
split level 178: [/input, 3043] 
split level 179: [/input, 659] 
split level 180: [/input-8, 810] 
split level 181: [/input, 77] 
split level 182: [/input, 3096] 
split level 183: [/input, 87] 
split level 184: [/input-8, 792] 
split level 185: [/input, 3468] 
split level 186: [/input-8, 242] 
split level 187: [/input-8, 1495] 
split level 188: [/input, 801] 
split level 189: [/input, 116] 
split level 190: [/input, 178] 
split level 191: [/input-8, 1349] 
split level 192: [/input, 820] 
split level 193: [/input-8, 1773] 
split level 194: [/input-8, 895] 
split level 195: [/input-8, 858] 
split level 196: [/input, 2126] 
split level 197: [/input, 450] 
split level 198: [/input-8, 364] 
split level 199: [/input, 177] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07807797193527222
10 lb beta sum: 0.0, worst -0.07808899879455566
Time: prepare 0.0117    bound 0.1007    transfer 0.0008    finalize 0.0029    func 0.1186    
Accumulated time: func 0.1732    prepare 0.0220    bound 0.1548    transfer 0.0009    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.16974890) min lb tensor(-0.07807416)
Number of Verified Splits: 8 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.010740041732788086 
BICCOS Cumulative time: 0.010740041732788086
Preprocessing time: 0.00999140739440918 Inference time: 0.00034499168395996094 Add cuts time: 0.0001239776611328125 Cut analysis time: 0.0002796649932861328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06938 (1), -0.06922 (1), -0.06872 (1), -0.06861 (1), -0.06856 (1), -0.06854 (1), -0.06785 (1), -0.06722 (1), -0.06717 (1), -0.06715 (1), -0.06694 (1), -0.06679 (1), -0.06658 (1), -0.06618 (1), -0.06564 (1), -0.06563 (1), -0.06563 (1), -0.06492 (1), -0.06462 (1), -0.06376 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5336    set_bounds 0.0093    solve 0.1187    add 0.0760    
Accumulated time: pickout 0.0004    decision 0.5336    set_bounds 0.0093    solve 0.1187    add 0.0760    
Current (lb-rhs): -0.06938141584396362
50 domains visited
Cumulative time: 0.8195583820343018

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 59] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 59] [/input-12, 4] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 4] [/input-12, 59] 
split level 2: [/input-12, 4] [/input-12, 67] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 67] [/input-12, 4] [/input-12, 67] [/input-12, 4] 
split level 3: [/input-12, 67] [/input-12, 97] [/input-12, 67] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03169822692871094

all verified at 1th iter
Time: prepare 0.0073    bound 0.0120    transfer 0.0007    finalize 0.0025    func 0.0251    
Accumulated time: func 0.1983    prepare 0.0296    bound 0.1667    transfer 0.0016    finalize 0.0056    
all_split False
======================Cut inference begins======================
max lb tensor(0.24257195) min lb tensor(0.00017685)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.035056352615356445 
BICCOS Cumulative time: 0.04579639434814453
Preprocessing time: 0.011786222457885742 Inference time: 0.014255523681640625 Add cuts time: 0.008811712265014648 Cut analysis time: 0.0002028942108154297
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0197    set_bounds 0.0121    solve 0.0252    add 0.0151    
Accumulated time: pickout 0.0014    decision 0.5533    set_bounds 0.0213    solve 0.1439    add 0.0911    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 58]), tensor([-1., -1.]), tensor([0, 0]), tensor([6.88974433e-11, 2.50047565e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 58]), tensor([-1.,  1.]), tensor([0, 0]), tensor([6.88974433e-11, 5.85431308e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 58]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.18294885e-09, 2.44830713e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 58]), tensor([1., 1.]), tensor([0, 0]), tensor([1.18294885e-09, 5.94202131e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.032655179500579834

all verified at 0th iter
Time: prepare 0.0003    bound 0.0042    transfer 0.0001    finalize 0.0002    func 0.0049    
Accumulated time: func 0.2032    prepare 0.0299    bound 0.1710    transfer 0.0017    finalize 0.0057    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 197.41009974479675
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.41002559661865
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.4100022315979
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.40998220443726
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.40972471237183
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.5903 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 98, vnnlib ID: 98 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.06963348, -22.13847923, -19.43040848, -17.05935478, -17.91039848,
         -16.70587921, -18.83517647, -19.20193481, -21.40512085, -23.21081352]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [821]; unstable size 821; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 268, 1, 821] with unstable size 267 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 821] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 821] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [267]; unstable size 267; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 267] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 267] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.66440129,  3.63743782,  1.26127374,  0.04986417, -0.05376536,
          0.98364002,  0.99622256,  2.72314119,  4.88065434]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.06963348, -22.13847923, -19.43040848, -17.05935478, -17.91039848,
         -16.70587921, -18.83517647, -19.20193481, -21.40512085, -23.21081352]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.75it/s]100%|██████████| 1/1 [00:00<00:00,  8.74it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.14386940, -22.24015808, -19.51546097, -17.41148949, -17.76541138,
          -17.10868263, -19.04941940, -19.17812157, -21.50530815, -23.38755035]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.65672874]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1172 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 3th iter
best_l after optimization: 16.604549407958984
alpha/beta optimization time: 0.04801011085510254
initial alpha-crown bounds: tensor([[1.72636914e+00, 3.70138049e+00, 1.30631149e+00, 6.20775521e-02,
         6.06834888e-04, 1.02092171e+00, 1.04711533e+00, 2.80543804e+00,
         4.93432760e+00]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 0 ; Worst class: (+ rhs) 0.000606834888458252
verified with init bound!
Result: safe-incomplete in 0.2368 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 99, vnnlib ID: 99 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.15164471, -15.32303524, -10.34104061, -11.69358635, -11.02870369,
         -12.56815910, -10.29522896, -13.35671329, -14.96125889, -15.40310478]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1104]; unstable size 1104; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 266, 1, 1104] with unstable size 265 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 1104] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1104] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [265]; unstable size 265; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 265] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 265] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.64230967,  2.91880178, -0.80557728,  0.38735676, -0.40144277,
          1.09796894,  1.71821141,  2.96996164,  2.98997831]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.15164471, -15.32303524, -10.34104061, -11.69358635, -11.02870369,
         -12.56815910, -10.29522896, -13.35671329, -14.96125889, -15.40310478]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.88836288, -15.24282074,  -9.95007992, -11.49615860, -10.75760651,
          -12.33977604, -10.26209450, -13.06920719, -14.77008438, -15.26176357],
         [-13.88836288, -15.24282074,  -9.95007992, -11.49615860, -10.75760651,
          -12.33977604, -10.26209450, -13.06920719, -14.77008438, -15.26176357]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.31201458,  0.49551201]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0796 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 100, vnnlib ID: 100 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.15521240, -20.46267700, -15.48517609, -15.11612129, -15.12829685,
         -14.53323936, -17.56829453, -16.12021637, -20.15639496, -18.95636940]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [775]; unstable size 775; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 276, 1, 775] with unstable size 275 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 775] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 775] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [275]; unstable size 275; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 275] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 275] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.33888245,  3.17010069, -0.78345799, -1.16919303, -0.99560738,
          1.16705465, -0.86630487,  3.00003219,  1.93420291]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-18.15521240, -20.46267700, -15.48517609, -15.11612129, -15.12829685,
         -14.53323936, -17.56829453, -16.12021637, -20.15639496, -18.95636940]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-18.15521240, -20.46267509, -15.48517513, -15.11611938, -15.12829590,
          -14.53323841, -17.56829262, -16.12021637, -20.15639305, -18.95636940],
         [-18.15521240, -20.46267509, -15.48517513, -15.11611938, -15.12829590,
          -14.53323841, -17.56829262, -16.12021637, -20.15639305, -18.95636940]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.36905575,  0.01217651, -0.58288097,  1.00409698]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0734 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 101, vnnlib ID: 101 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-32.25936890, -36.14345932, -37.27095795, -38.62052536, -37.58951950,
         -39.79058075, -40.22500229, -39.67473602, -32.04320145, -35.54521942]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1007]; unstable size 1007; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 1007] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 1007] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1007] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 260] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.62466073,  2.95583439,  3.49480033,  5.00074387,  3.80081677,
          5.96756887,  6.38276482,  5.76929760,  2.46701264]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-32.25936890, -36.14345932, -37.27095795, -38.62052536, -37.58951950,
         -39.79058075, -40.22500229, -39.67473602, -32.04320145, -35.54521942]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-31.95611572, -35.97737122, -36.92116928, -38.44849014, -37.25425720,
          -39.54434204, -39.96480942, -39.30963898, -32.26206589, -35.37592697]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.30595016]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0702 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 102, vnnlib ID: 102 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.35278130, -31.36741257, -23.66108131, -25.04328346, -24.10462570,
         -25.23495674, -26.15161133, -25.66592026, -29.01111603, -29.58918571]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [744]; unstable size 744; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 744] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 744] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 744] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 272] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.79987299,  5.21834898, -1.55336475, -0.28184390, -0.22590399,
          0.73269272,  0.47210947,  3.03185987,  3.45756841]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.35278130, -31.36741257, -23.66108131, -25.04328346, -24.10462570,
         -25.23495674, -26.15161133, -25.66592026, -29.01111603, -29.58918571]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-27.35277939, -31.36741257, -23.66108322, -25.04328346, -24.10462570,
          -25.23495865, -26.15161514, -25.66592407, -29.01112175, -29.58918571],
         [-27.35277939, -31.36741257, -23.66108322, -25.04328346, -24.10462570,
          -25.23495865, -26.15161514, -25.66592407, -29.01112175, -29.58918571]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44354248,  0.93865776,  1.13033295]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0774 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 103, vnnlib ID: 103 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.22183990, -23.66624069, -16.29309082, -19.27029610, -15.39398766,
         -19.13426781, -17.66785431, -19.55938721, -21.54466057, -23.50271797]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1067]; unstable size 1067; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 267, 1, 1067] with unstable size 266 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 1067] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1067] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [266]; unstable size 266; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 266] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 266] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.72265172, 6.91143370, 0.00909704, 2.97993898, 2.78059340, 0.93534517,
         3.08999920, 4.73980522, 6.88012981]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0672 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 104, vnnlib ID: 104 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.31546021, -24.12434387, -20.03258896, -20.35837746, -21.19475365,
         -18.88838959, -21.96802902, -21.15868759, -24.55088043, -23.12867355]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [905]; unstable size 905; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 307, 1, 905] with unstable size 306 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 905] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 905] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [306]; unstable size 306; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 306] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 306] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.86118591,  2.95259571, -0.24725604,  1.06830430,  0.89491725,
          1.90242493,  0.80980355,  3.26965952,  2.34717989]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.31546021, -24.12434387, -20.03258896, -20.35837746, -21.19475365,
         -18.88838959, -21.96802902, -21.15868759, -24.55088043, -23.12867355]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.60it/s]100%|██████████| 1/1 [00:00<00:00,  8.59it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.15029907, -24.19763947, -19.80143929, -20.63853264, -21.10856056,
          -19.26048470, -22.10736084, -21.32276344, -24.41694641, -23.30249786]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.54095459]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1190 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 15.521697998046875
alpha/beta optimization time: 1.2697784900665283
initial alpha-crown bounds: tensor([[ 1.94473195,  3.04443932, -0.17711663,  1.08993304,  0.95973778,
          1.94066238,  0.88277924,  3.39136529,  2.44516492]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.17711663246154785
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.54471921920776
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.54467701911926
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.54465293884277
Verifying property 2 with 1 instances.
##### Instance 104 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.17711663]], device='cuda:0') need to verify.
Model prediction is: tensor([-22.31546021, -24.12434387, -20.03258896, -20.35837746, -21.19475365,
        -18.88838959, -21.96802902, -21.15868759, -24.55088043, -23.12867355],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.17711663]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 905
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 297
Node /15 input 0: size torch.Size([100]) unstable 22
-----------------
# of unstable neurons: 1224
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010657310485839844
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17711687088012695
10 lb beta sum: 0.0, worst -0.17712116241455078
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0545    transfer 0.0001    finalize 0.0001    func 0.0550    
Accumulated time: func 0.0550    prepare 0.0002    bound 0.0545    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] 
split level 1: [/input-12, 8] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 72] 
split level 4: [/input-12, 32] 
split level 5: [/input-12, 7] 
split level 6: [/input-12, 59] 
split level 7: [/input-12, 50] 
split level 8: [/input-8, 421] 
split level 9: [/input-8, 403] 
split level 10: [/input-8, 218] 
split level 11: [/input-8, 1709] 
split level 12: [/input-8, 1947] 
split level 13: [/input-8, 1651] 
split level 14: [/input-8, 414] 
split level 15: [/input-8, 1636] 
split level 16: [/input-8, 220] 
split level 17: [/input-8, 1659] 
split level 18: [/input-8, 400] 
split level 19: [/input-8, 1684] 
split level 20: [/input-8, 410] 
split level 21: [/input-8, 725] 
split level 22: [/input-8, 1644] 
split level 23: [/input-8, 1971] 
split level 24: [/input-8, 232] 
split level 25: [/input-8, 1661] 
split level 26: [/input-8, 747] 
split level 27: [/input-8, 406] 
split level 28: [/input-8, 1339] 
split level 29: [/input-8, 1716] 
split level 30: [/input-8, 1949] 
split level 31: [/input-8, 217] 
split level 32: [/input-8, 233] 
split level 33: [/input, 1401] 
split level 34: [/input-8, 1972] 
split level 35: [/input-8, 930] 
split level 36: [/input-8, 415] 
split level 37: [/input-8, 430] 
split level 38: [/input-8, 210] 
split level 39: [/input-8, 1206] 
split level 40: [/input-12, 6] 
split level 41: [/input-8, 240] 
split level 42: [/input-8, 1365] 
split level 43: [/input-8, 225] 
split level 44: [/input-8, 408] 
split level 45: [/input-8, 1332] 
split level 46: [/input-8, 431] 
split level 47: [/input-8, 1388] 
split level 48: [/input-8, 423] 
split level 49: [/input-8, 980] 
split level 50: [/input-8, 424] 
split level 51: [/input-8, 241] 
split level 52: [/input-8, 202] 
split level 53: [/input-8, 1957] 
split level 54: [/input-8, 224] 
split level 55: [/input-8, 938] 
split level 56: [/input-8, 1953] 
split level 57: [/input-8, 1198] 
split level 58: [/input-8, 1396] 
split level 59: [/input-8, 1650] 
split level 60: [/input-8, 248] 
split level 61: [/input-8, 1707] 
split level 62: [/input, 1385] 
split level 63: [/input-8, 1404] 
split level 64: [/input-8, 292] 
split level 65: [/input-8, 416] 
split level 66: [/input-8, 1395] 
split level 67: [/input-8, 1669] 
split level 68: [/input-8, 230] 
split level 69: [/input-8, 1973] 
split level 70: [/input-8, 309] 
split level 71: [/input-8, 216] 
split level 72: [/input-8, 1525] 
split level 73: [/input, 3557] 
split level 74: [/input-8, 1325] 
split level 75: [/input-8, 227] 
split level 76: [/input-8, 1658] 
split level 77: [/input-8, 212] 
split level 78: [/input-8, 236] 
split level 79: [/input-8, 271] 
split level 80: [/input-8, 1519] 
split level 81: [/input-8, 1978] 
split level 82: [/input-8, 16] 
split level 83: [/input-8, 249] 
split level 84: [/input-8, 214] 
split level 85: [/input-8, 1782] 
split level 86: [/input-8, 1961] 
split level 87: [/input-8, 811] 
split level 88: [/input-8, 963] 
split level 89: [/input-8, 209] 
split level 90: [/input-8, 1648] 
split level 91: [/input-8, 285] 
split level 92: [/input-8, 290] 
split level 93: [/input-8, 203] 
split level 94: [/input, 1406] 
split level 95: [/input-8, 244] 
split level 96: [/input, 2983] 
split level 97: [/input-8, 1100] 
split level 98: [/input-8, 1386] 
split level 99: [/input-8, 439] 
split level 100: [/input-8, 828] 
split level 101: [/input-8, 1497] 
split level 102: [/input-8, 912] 
split level 103: [/input-12, 56] 
split level 104: [/input, 2014] 
split level 105: [/input-8, 1621] 
split level 106: [/input-8, 286] 
split level 107: [/input, 1997] 
split level 108: [/input-8, 829] 
split level 109: [/input, 2013] 
split level 110: [/input, 2622] 
split level 111: [/input, 1998] 
split level 112: [/input, 1965] 
split level 113: [/input, 507] 
split level 114: [/input, 1332] 
split level 115: [/input, 2030] 
split level 116: [/input, 1421] 
split level 117: [/input-8, 1230] 
split level 118: [/input, 2684] 
split level 119: [/input-8, 1335] 
split level 120: [/input, 153] 
split level 121: [/input, 2869] 
split level 122: [/input, 1022] 
split level 123: [/input-8, 197] 
split level 124: [/input, 1980] 
split level 125: [/input, 1966] 
split level 126: [/input-8, 1690] 
split level 127: [/input-8, 196] 
split level 128: [/input-8, 397] 
split level 129: [/input-8, 946] 
split level 130: [/input, 509] 
split level 131: [/input, 68] 
split level 132: [/input, 124] 
split level 133: [/input, 2029] 
split level 134: [/input-8, 964] 
split level 135: [/input, 1996] 
split level 136: [/input, 2046] 
split level 137: [/input, 1434] 
split level 138: [/input, 1964] 
split level 139: [/input, 1316] 
split level 140: [/input-8, 1656] 
split level 141: [/input, 141] 
split level 142: [/input-8, 208] 
split level 143: [/input-8, 962] 
split level 144: [/input, 2666] 
split level 145: [/input, 1982] 
split level 146: [/input, 3150] 
split level 147: [/input, 117] 
split level 148: [/input, 1981] 
split level 149: [/input, 2028] 
split level 150: [/input, 2034] 
split level 151: [/input, 109] 
split level 152: [/input, 81] 
split level 153: [/input, 3406] 
split level 154: [/input, 65] 
split level 155: [/input, 2897] 
split level 156: [/input, 1732] 
split level 157: [/input, 1373] 
split level 158: [/input-8, 394] 
split level 159: [/input, 1006] 
split level 160: [/input, 142] 
split level 161: [/input, 1812] 
split level 162: [/input-8, 1262] 
split level 163: [/input, 2649] 
split level 164: [/input-8, 586] 
split level 165: [/input, 2673] 
split level 166: [/input, 98] 
split level 167: [/input, 122] 
split level 168: [/input, 113] 
split level 169: [/input, 2913] 
split level 170: [/input, 21] 
split level 171: [/input, 2012] 
split level 172: [/input, 731] 
split level 173: [/input, 2278] 
split level 174: [/input, 2008] 
split level 175: [/input, 123] 
split level 176: [/input, 1017] 
split level 177: [/input-8, 1405] 
split level 178: [/input, 37] 
split level 179: [/input, 2644] 
split level 180: [/input-8, 636] 
split level 181: [/input, 790] 
split level 182: [/input-8, 1518] 
split level 183: [/input-8, 1552] 
split level 184: [/input, 2589] 
split level 185: [/input-8, 1640] 
split level 186: [/input, 84] 
split level 187: [/input, 3578] 
split level 188: [/input, 635] 
split level 189: [/input, 2045] 
split level 190: [/input, 23] 
split level 191: [/input, 36] 
split level 192: [/input, 2945] 
split level 193: [/input, 1979] 
split level 194: [/input, 2898] 
split level 195: [/input, 2753] 
split level 196: [/input, 2946] 
split level 197: [/input, 1723] 
split level 198: [/input, 2926] 
split level 199: [/input, 1328] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1770336627960205
10 lb beta sum: 0.0, worst -0.17703580856323242
Time: prepare 0.0116    bound 0.1014    transfer 0.0012    finalize 0.0031    func 0.1199    
Accumulated time: func 0.1749    prepare 0.0219    bound 0.1559    transfer 0.0013    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.24898601) min lb tensor(-0.17703080)
Number of Verified Splits: 4 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.010761737823486328 
BICCOS Cumulative time: 0.010761737823486328
Preprocessing time: 0.009913206100463867 Inference time: 0.00018167495727539062 Add cuts time: 8.296966552734375e-05 Cut analysis time: 0.0005838871002197266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16366 (1), -0.16340 (1), -0.16283 (1), -0.16248 (1), -0.16180 (1), -0.16066 (1), -0.16018 (1), -0.16015 (1), -0.15940 (1), -0.15937 (1), -0.15912 (1), -0.15893 (1), -0.15881 (1), -0.15875 (1), -0.15875 (1), -0.15862 (1), -0.15845 (1), -0.15827 (1), -0.15796 (1), -0.15775 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5280    set_bounds 0.0093    solve 0.1199    add 0.0695    
Accumulated time: pickout 0.0003    decision 0.5280    set_bounds 0.0093    solve 0.1199    add 0.0695    
Current (lb-rhs): -0.16365694999694824
50 domains visited
Cumulative time: 0.7975623607635498

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 8] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 1: [/input-12, 8] [/input-12, 46] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13065552711486816

all verified at 6th iter
Time: prepare 0.0073    bound 0.0421    transfer 0.0007    finalize 0.0025    func 0.0551    
Accumulated time: func 0.2299    prepare 0.0294    bound 0.1980    transfer 0.0020    finalize 0.0057    
all_split False
======================Cut inference begins======================
max lb tensor(0.38207227) min lb tensor(0.00023198)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03427743911743164 
BICCOS Cumulative time: 0.04503917694091797
Preprocessing time: 0.011786699295043945 Inference time: 0.014162778854370117 Add cuts time: 0.008134126663208008 Cut analysis time: 0.0001938343048095703
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0121    solve 0.0551    add 0.0150    
Accumulated time: pickout 0.0014    decision 0.5475    set_bounds 0.0214    solve 0.1751    add 0.0845    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 24]), tensor([-1., -1.]), tensor([0, 0]), tensor([5.75661872e-20, 1.32576033e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 24]), tensor([-1.,  1.]), tensor([0, 0]), tensor([5.75661872e-20, 2.02130124e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 24]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.75661872e-20, 1.29802987e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 24]), tensor([1., 1.]), tensor([0, 0]), tensor([5.75661872e-20, 2.03495786e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.03467535972595215

all verified at 0th iter
Time: prepare 0.0003    bound 0.0042    transfer 0.0001    finalize 0.0001    func 0.0049    
Accumulated time: func 0.2348    prepare 0.0297    bound 0.2022    transfer 0.0021    finalize 0.0059    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.4294147491455
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.42933821678162
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.4293155670166
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.42929577827454
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.42927622795105
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.42925715446472
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.5710 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 105, vnnlib ID: 105 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.51308250, -22.43931961, -18.50501633, -19.17534065, -19.69705963,
         -19.25070381, -20.29491043, -19.66059494, -20.88692856, -21.50129509]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [811]; unstable size 811; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 309, 1, 811] with unstable size 308 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 811] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 811] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [308]; unstable size 308; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 308] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 308] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.88940096,  0.17124438, -2.58539438, -1.63983190, -1.31377959,
         -1.55795729, -0.86024165, -1.02569354, -0.27762103]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.51308250, -22.43931961, -18.50501633, -19.17534065, -19.69705963,
         -19.25070381, -20.29491043, -19.66059494, -20.88692856, -21.50129509]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.51308632, -22.43931770, -18.50501251, -19.17533684, -19.69705772,
          -19.25070381, -20.29491043, -19.66059494, -20.88693047, -21.50129509],
         [-19.51308632, -22.43931770, -18.50501251, -19.17533684, -19.69705772,
          -19.25070381, -20.29491043, -19.66059494, -20.88693047, -21.50129509]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.14750862, -1.15558243, -0.48525810,  0.03646278, -0.40989113,
           0.63431549,  1.22633553,  1.84070015]]], device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         ...,


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0813 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 106, vnnlib ID: 106 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.87668610, -20.48638916, -25.85806274, -25.13366127, -24.85799789,
         -26.38156319, -26.31613541, -25.62492752, -20.27039146, -21.82055855]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [794]; unstable size 794; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 221, 1, 794] with unstable size 220 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 794] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 794] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [220]; unstable size 220; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 220] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 220] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.78698969,  3.17528629,  2.83466101,  2.43643284,  3.92167902,
          3.64071131,  3.01096916, -1.71908045,  0.30822122]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.87668610, -20.48638916, -25.85806274, -25.13366127, -24.85799789,
         -26.38156319, -26.31613541, -25.62492752, -20.27039146, -21.82055855]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.87668610, -20.48638916, -25.85806274, -25.13366127, -24.85799789,
          -26.38156319, -26.31613541, -25.62492752, -20.27039146, -21.82055855]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.21599770]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0799 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 107, vnnlib ID: 107 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.65453911, -28.29750824, -25.45104980, -28.11194038, -25.15310860,
         -28.19610023, -28.02035522, -26.93565750, -23.93723679, -27.98169518]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [701]; unstable size 701; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 241, 1, 701] with unstable size 240 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 701] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 701] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [240]; unstable size 240; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 240] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 240] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.39394474, 1.70092022, 3.99040127, 1.13504887, 3.87649226, 3.90128303,
         2.66181874, 0.08498125, 3.97777271]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0604 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 108, vnnlib ID: 108 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.15261269, -17.94160461, -14.95448303, -13.92990398, -14.40570259,
         -14.65692043, -13.89788246, -15.86449909, -18.80389977, -17.83309364]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [800]; unstable size 800; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 364, 1, 800] with unstable size 363 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 800] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 800] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [363]; unstable size 363; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 363] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 363] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.67310286,  1.51413131, -0.13763952, -0.79897380,  0.29746619,
         -1.22556460,  0.01225764,  2.61003304,  1.46175170]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.15261269, -17.94160461, -14.95448303, -13.92990398, -14.40570259,
         -14.65692043, -13.89788246, -15.86449909, -18.80389977, -17.83309364]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.15261078, -17.94160461, -14.95448208, -13.92990494, -14.40570354,
          -14.65692043, -13.89788151, -15.86450100, -18.80390167, -17.83309174],
         [-17.15261078, -17.94160461, -14.95448208, -13.92990494, -14.40570354,
          -14.65692043, -13.89788151, -15.86450100, -18.80390167, -17.83309174]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.02457714,  0.47579861, -0.03202343]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0714 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 109, vnnlib ID: 109 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.79030228, -30.41434669, -27.64798355, -28.61847115, -28.48152161,
         -29.57408333, -29.43395233, -30.51341820, -29.47771645, -30.12065697]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [497]; unstable size 497; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 497] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 497] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 497] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 139] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.35675907, 3.17424965, 3.96514440, 3.89233899, 4.75903320, 4.93405867,
         5.60336399, 4.77322054, 5.42915201]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0706 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 110, vnnlib ID: 110 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.93199348, -23.69929504, -17.71457291, -17.07846260, -17.30852318,
         -18.18094444, -14.50052071, -20.42077255, -23.73473549, -24.23317528]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [523]; unstable size 523; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 358, 1, 523] with unstable size 357 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 523] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 523] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [357]; unstable size 357; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 357] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 357] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.54994059, 6.75454903, 1.88174200, 1.26384246, 1.37097144, 2.10497570,
         3.85746670, 6.81311607, 7.42777681]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0688 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 111, vnnlib ID: 111 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.98239326, -22.89222527, -16.59890175, -19.05320930, -15.75452042,
         -18.76253128, -18.17463303, -18.00091171, -22.45012093, -22.38698578]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [707]; unstable size 707; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 286, 1, 707] with unstable size 285 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 707] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 707] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [285]; unstable size 285; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 285] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 285] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.54880238,  4.78813887, -0.27670121,  2.23500395,  2.02165771,
          1.09089088,  1.08386636,  4.23047447,  4.55613422]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.98239326, -22.89222527, -16.59890175, -19.05320930, -15.75452042,
         -18.76253128, -18.17463303, -18.00091171, -22.45012093, -22.38698578]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.60it/s]100%|██████████| 1/1 [00:00<00:00,  8.59it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.62423515, -22.64641190, -16.24180603, -18.99898338, -15.90926933,
          -18.73514366, -18.09658813, -18.31100082, -22.13391876, -22.22410011]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.33253670]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1190 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 23.334936141967773
alpha/beta optimization time: 1.2518062591552734
initial alpha-crown bounds: tensor([[ 2.69250250,  4.96834755, -0.15371263,  2.31067324,  2.06917906,
          1.21068358,  1.12954354,  4.43741608,  4.67030382]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.15371263027191162
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.55633759498596
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.55629634857178
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.55627298355103
Verifying property 2 with 1 instances.
##### Instance 111 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.15371263]], device='cuda:0') need to verify.
Model prediction is: tensor([-19.98239326, -22.89222527, -16.59890175, -19.05320930, -15.75452042,
        -18.76253128, -18.17463303, -18.00091171, -22.45012093, -22.38698578],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.15371263]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 707
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 281
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1014
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011444091796875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15371203422546387
10 lb beta sum: 0.0, worst -0.15372240543365479
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0547    transfer 0.0001    finalize 0.0001    func 0.0552    
Accumulated time: func 0.0552    prepare 0.0002    bound 0.0547    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 53] 
split level 3: [/input-12, 24] 
split level 4: [/input-12, 6] 
split level 5: [/input-12, 12] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 0] 
split level 8: [/input-12, 32] 
split level 9: [/input-8, 1700] 
split level 10: [/input-12, 38] 
split level 11: [/input-8, 1701] 
split level 12: [/input-12, 49] 
split level 13: [/input-8, 1628] 
split level 14: [/input-8, 929] 
split level 15: [/input-8, 1627] 
split level 16: [/input-8, 1630] 
split level 17: [/input-8, 476] 
split level 18: [/input-12, 7] 
split level 19: [/input-8, 1635] 
split level 20: [/input-8, 930] 
split level 21: [/input-8, 939] 
split level 22: [/input-8, 1637] 
split level 23: [/input-8, 474] 
split level 24: [/input-12, 57] 
split level 25: [/input-8, 1622] 
split level 26: [/input-8, 468] 
split level 27: [/input-8, 1261] 
split level 28: [/input-8, 795] 
split level 29: [/input-8, 1638] 
split level 30: [/input-8, 484] 
split level 31: [/input-8, 285] 
split level 32: [/input-8, 490] 
split level 33: [/input-8, 577] 
split level 34: [/input-8, 1614] 
split level 35: [/input-8, 1710] 
split level 36: [/input-8, 1708] 
split level 37: [/input-8, 1678] 
split level 38: [/input-8, 1970] 
split level 39: [/input-8, 797] 
split level 40: [/input-8, 1957] 
split level 41: [/input-8, 794] 
split level 42: [/input-8, 1053] 
split level 43: [/input-8, 788] 
split level 44: [/input-8, 596] 
split level 45: [/input-8, 1260] 
split level 46: [/input-8, 1684] 
split level 47: [/input-8, 1958] 
split level 48: [/input-8, 1716] 
split level 49: [/input-8, 1717] 
split level 50: [/input-8, 274] 
split level 51: [/input-8, 1949] 
split level 52: [/input-8, 1035] 
split level 53: [/input-8, 1922] 
split level 54: [/input-8, 90] 
split level 55: [/input-8, 492] 
split level 56: [/input-8, 1259] 
split level 57: [/input-8, 1052] 
split level 58: [/input-8, 1250] 
split level 59: [/input-8, 949] 
split level 60: [/input-8, 1713] 
split level 61: [/input-8, 1338] 
split level 62: [/input-8, 1262] 
split level 63: [/input-8, 1337] 
split level 64: [/input-8, 604] 
split level 65: [/input-8, 1313] 
split level 66: [/input-8, 460] 
split level 67: [/input-8, 401] 
split level 68: [/input-8, 1978] 
split level 69: [/input-8, 1643] 
split level 70: [/input-8, 422] 
split level 71: [/input-8, 1633] 
split level 72: [/input-8, 1617] 
split level 73: [/input-8, 1578] 
split level 74: [/input-8, 798] 
split level 75: [/input-8, 423] 
split level 76: [/input-8, 1659] 
split level 77: [/input-8, 108] 
split level 78: [/input-8, 307] 
split level 79: [/input-8, 1030] 
split level 80: [/input-8, 1951] 
split level 81: [/input-8, 493] 
split level 82: [/input-8, 1292] 
split level 83: [/input-8, 51] 
split level 84: [/input-8, 828] 
split level 85: [/input-8, 1625] 
split level 86: [/input-8, 1305] 
split level 87: [/input-8, 1623] 
split level 88: [/input-8, 811] 
split level 89: [/input-8, 98] 
split level 90: [/input-8, 829] 
split level 91: [/input-8, 1721] 
split level 92: [/input, 1163] 
split level 93: [/input-8, 413] 
split level 94: [/input-8, 45] 
split level 95: [/input-8, 330] 
split level 96: [/input, 183] 
split level 97: [/input-8, 50] 
split level 98: [/input-8, 505] 
split level 99: [/input-8, 82] 
split level 100: [/input-8, 1932] 
split level 101: [/input-8, 441] 
split level 102: [/input-8, 106] 
split level 103: [/input-8, 365] 
split level 104: [/input-8, 905] 
split level 105: [/input-8, 402] 
split level 106: [/input-8, 1615] 
split level 107: [/input-8, 830] 
split level 108: [/input-8, 1754] 
split level 109: [/input-8, 1595] 
split level 110: [/input-8, 1606] 
split level 111: [/input-8, 1712] 
split level 112: [/input-8, 627] 
split level 113: [/input, 1416] 
split level 114: [/input-8, 812] 
split level 115: [/input, 185] 
split level 116: [/input-8, 1646] 
split level 117: [/input-8, 498] 
split level 118: [/input-8, 1334] 
split level 119: [/input-8, 793] 
split level 120: [/input-8, 941] 
split level 121: [/input, 184] 
split level 122: [/input-8, 372] 
split level 123: [/input, 2949] 
split level 124: [/input, 2951] 
split level 125: [/input-8, 116] 
split level 126: [/input, 152] 
split level 127: [/input, 186] 
split level 128: [/input-8, 1609] 
split level 129: [/input, 3005] 
split level 130: [/input, 2504] 
split level 131: [/input-8, 446] 
split level 132: [/input, 3021] 
split level 133: [/input-8, 137] 
split level 134: [/input, 1435] 
split level 135: [/input-8, 958] 
split level 136: [/input-8, 1654] 
split level 137: [/input, 2475] 
split level 138: [/input-8, 777] 
split level 139: [/input-8, 1736] 
split level 140: [/input-8, 306] 
split level 141: [/input, 138] 
split level 142: [/input-8, 1762] 
split level 143: [/input, 1180] 
split level 144: [/input-8, 104] 
split level 145: [/input, 1607] 
split level 146: [/input-8, 1607] 
split level 147: [/input-8, 1297] 
split level 148: [/input, 1514] 
split level 149: [/input, 2440] 
split level 150: [/input, 151] 
split level 151: [/input-8, 1265] 
split level 152: [/input, 2489] 
split level 153: [/input, 2474] 
split level 154: [/input-8, 115] 
split level 155: [/input, 2491] 
split level 156: [/input-8, 117] 
split level 157: [/input, 3019] 
split level 158: [/input-8, 21] 
split level 159: [/input-8, 1251] 
split level 160: [/input, 3541] 
split level 161: [/input, 2522] 
split level 162: [/input-8, 1603] 
split level 163: [/input-8, 1108] 
split level 164: [/input-8, 447] 
split level 165: [/input-12, 36] 
split level 166: [/input, 2217] 
split level 167: [/input-8, 97] 
split level 168: [/input, 494] 
split level 169: [/input-8, 22] 
split level 170: [/input, 88] 
split level 171: [/input-8, 1746] 
split level 172: [/input-8, 1624] 
split level 173: [/input-8, 500] 
split level 174: [/input, 1015] 
split level 175: [/input, 217] 
split level 176: [/input, 199] 
split level 177: [/input, 2487] 
split level 178: [/input, 3301] 
split level 179: [/input, 2248] 
split level 180: [/input, 2408] 
split level 181: [/input, 1317] 
split level 182: [/input-8, 1027] 
split level 183: [/input-8, 956] 
split level 184: [/input, 2183] 
split level 185: [/input, 2455] 
split level 186: [/input, 3052] 
split level 187: [/input, 232] 
split level 188: [/input-8, 452] 
split level 189: [/input-8, 126] 
split level 190: [/input, 2792] 
split level 191: [/input, 1014] 
split level 192: [/input, 3038] 
split level 193: [/input, 1195] 
split level 194: [/input, 2791] 
split level 195: [/input, 1515] 
split level 196: [/input, 2250] 
split level 197: [/input-12, 92] 
split level 198: [/input, 2153] 
split level 199: [/input-8, 908] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15361356735229492
10 lb beta sum: 0.0, worst -0.15361547470092773
Time: prepare 0.0116    bound 0.1033    transfer 0.0012    finalize 0.0035    func 0.1223    
Accumulated time: func 0.1774    prepare 0.0219    bound 0.1580    transfer 0.0013    finalize 0.0036    
all_split False
======================Cut inference begins======================
max lb tensor(0.17703789) min lb tensor(-0.15360117)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.011175870895385742 
BICCOS Cumulative time: 0.011175870895385742
Preprocessing time: 0.010133028030395508 Inference time: 0.00028252601623535156 Add cuts time: 0.00010800361633300781 Cut analysis time: 0.000652313232421875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13946 (1), -0.13899 (1), -0.13871 (1), -0.13871 (1), -0.13858 (1), -0.13771 (1), -0.13699 (1), -0.13661 (1), -0.13640 (1), -0.13609 (1), -0.13552 (1), -0.13469 (1), -0.13451 (1), -0.13432 (1), -0.13412 (1), -0.13407 (1), -0.13332 (1), -0.13254 (1), -0.13219 (1), -0.13146 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5308    set_bounds 0.0088    solve 0.1223    add 0.0697    
Accumulated time: pickout 0.0003    decision 0.5308    set_bounds 0.0088    solve 0.1223    add 0.0697    
Current (lb-rhs): -0.13945627212524414
50 domains visited
Cumulative time: 0.8031177520751953

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
split level 1: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 2: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 0] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13810253143310547
10 lb beta sum: 0.7302241325378418, worst -0.060820072889328
Time: prepare 0.0069    bound 0.1220    transfer 0.0008    finalize 0.0023    func 0.1346    
Accumulated time: func 0.3121    prepare 0.0291    bound 0.2799    transfer 0.0021    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.29600102) min lb tensor(-0.06070638)
Number of Verified Splits: 201 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.023337602615356445 
BICCOS Cumulative time: 0.03451347351074219
Preprocessing time: 0.011920928955078125 Inference time: 0.0076541900634765625 Add cuts time: 0.003294229507446289 Cut analysis time: 0.00046825408935546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01174 (2), -0.01157 (2), -0.01129 (2), -0.01123 (2), -0.01109 (2), -0.01104 (2), -0.01089 (2), -0.01070 (2), -0.01060 (2), -0.01046 (2), -0.00997 (2), -0.00978 (2), -0.00953 (2), -0.00942 (2), -0.00933 (2), -0.00930 (2), -0.00913 (2), -0.00885 (2), -0.00848 (2), -0.00829 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0121    solve 0.1347    add 0.0933    
Accumulated time: pickout 0.0014    decision 0.5503    set_bounds 0.0209    solve 0.2570    add 0.1629    
Current (lb-rhs): -0.011741399765014648
100 domains visited
Cumulative time: 1.087353229522705

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
split level 1: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 2: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 3: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 49] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10868203639984131

all verified at 6th iter
Time: prepare 0.0071    bound 0.0478    transfer 0.0008    finalize 0.0021    func 0.0603    
Accumulated time: func 0.3724    prepare 0.0365    bound 0.3277    transfer 0.0029    finalize 0.0080    
all_split False
======================Cut inference begins======================
max lb tensor(0.24588990) min lb tensor(0.04230961)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.040376901626586914 
BICCOS Cumulative time: 0.0748903751373291
Preprocessing time: 0.01152348518371582 Inference time: 0.015747547149658203 Add cuts time: 0.012905597686767578 Cut analysis time: 0.0002002716064453125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0158    solve 0.0604    add 0.0197    
Accumulated time: pickout 0.0024    decision 0.5699    set_bounds 0.0368    solve 0.3174    add 0.1826    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([4.04065115e-11, 1.22077510e-01, 2.36569747e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([4.04065115e-11, 1.22077510e-01, 6.10366315e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([4.04065115e-11, 1.25405595e-01, 2.34755754e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([4.04065115e-11, 1.25405595e-01, 6.15425557e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([4.13832857e-11, 1.22245356e-01, 2.38444790e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([4.13832857e-11, 1.22245356e-01, 6.19618148e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([4.13832857e-11, 1.25942513e-01, 2.36675575e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([4.13832857e-11, 1.25942513e-01, 6.14449233e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09815013408660889

all verified at 2th iter
Time: prepare 0.0004    bound 0.0153    transfer 0.0001    finalize 0.0002    func 0.0161    
Accumulated time: func 0.3884    prepare 0.0369    bound 0.3430    transfer 0.0030    finalize 0.0081    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.11151361465454
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.11143517494202
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.11064434051514
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.11062216758728
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.11060190200806
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.1105830669403
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.8895 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 112, vnnlib ID: 112 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.02572250, -27.23712921, -27.95742416, -26.55063438, -28.86597252,
         -27.63702202, -28.59363937, -27.52897644, -25.43346977, -24.92130852]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [654]; unstable size 654; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 654] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 654] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 654] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 239] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.94611096,  1.33183825,  1.31211519,  0.27194166,  2.35654259,
          1.27423668,  2.06728601,  0.98784924, -0.88770485]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.02572250, -27.23712921, -27.95742416, -26.55063438, -28.86597252,
         -27.63702202, -28.59363937, -27.52897644, -25.43346977, -24.92130852]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-27.50359154, -27.88374138, -28.51186180, -27.05513573, -29.40580559,
          -28.19179726, -29.20458603, -28.14871597, -25.54721451, -25.68577957]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.13856506]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0062 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0716 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 113, vnnlib ID: 113 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.26823807, -20.68097305, -17.33302307, -15.71412659, -18.33230782,
         -15.48265743, -18.94750595, -17.71434212, -21.22698212, -20.08721161]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [904]; unstable size 904; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 247, 1, 904] with unstable size 246 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 904] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 904] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [246]; unstable size 246; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 246] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 246] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.46684694,  3.44482756,  0.77367580,  1.71358061, -0.53734124,
          2.20122433,  1.18286538,  4.27326107,  2.94509697]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.26823807, -20.68097305, -17.33302307, -15.71412659, -18.33230782,
         -15.48265743, -18.94750595, -17.71434212, -21.22698212, -20.08721161]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.26823807, -20.68097305, -17.33302307, -15.71412659, -18.33230782,
          -15.48265743, -18.94750595, -17.71434212, -21.22698212, -20.08721161]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.23146915]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.03650784, -1.00476182, -0.75079364,  ..., -0.68730158,
            -0.90952379, -1.62380958],
           [-0.44920623, -0.95714283, -0.67142856,  ..., -0.32222211,
            -0.65555555, -1.62380958],
           [-0.09999990, -0.92539680, -0.63968253,  ..., -0.22698402,
            -0.57619047, -1.63968253],
           ...,
           [-0.27460307, -0.29047608, -0.33809513,  ..., -0.87777776,
            -0.51269841, -0.48095238],
           [-0.30634910, -0.30634910, -0.33809513,  ..., -1.09999990,
            -0.65555555, -0.49682540],
           [-0.40158719, -0.40158719, -0.41746020,  ..., -1.29047608,
            -0.87777776, -0.62380952]],

          [[-1.62640905, -1.72302747, -1.65861523,  ..., -1.49758446,
            -1.57809973, -1.75523353],
           [-1.38486302, -1.77133656, -1.61030602,  ..., -1.35265696,
            -1.49758446, -1.75523353],
           [-1.09500802, -1.80354273, -1.62640905,  ..., -1.22383249,
            -1.40096617, -1.75523353],
           ...,
           [-1.25603855, -1.25603855, -1.28824472,  ..., -0.72463763,
            -0.43478248, -0.51529789],
           [-1.28824472, -1.25603855, -1.28824472,  ..., -0.88566822,
            -0.48309177, -0.45088565],
           [-1.33655393, -1.33655393, -1.33655393,  ..., -1.12721407,
            -0.67632848, -0.46698871]],

          [[-1.48275876, -1.52773619, -1.49775124,  ..., -1.28785622,
            -1.34782624, -1.42278874],
           [-1.15292358, -1.55772126, -1.54272878,  ..., -1.12293863,
            -1.19790113, -1.42278874],
           [-0.89805096, -1.54272878, -1.51274371,  ..., -1.06296861,
            -1.13793111, -1.43778121],
           ...,
           [-0.94302845, -0.94302845, -0.95802099,  ..., -0.61319339,
            -0.38830581, -0.52323836],
           [-0.94302845, -0.94302845, -0.94302845,  ..., -0.70314842,
            -0.34332830, -0.38830581],
           [-0.98800600, -1.00299859, -1.00299859,  ..., -0.89805096,
            -0.52323836, -0.31334329]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0724 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 114, vnnlib ID: 114 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.03265953, -29.80158615, -28.01462746, -29.49231339, -27.82477570,
         -29.74157143, -29.00487137, -29.65236473, -26.56688309, -30.04109955]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [952]; unstable size 952; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 952] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 952] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 952] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 256] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.56631327, 3.00716305, 4.34157419, 2.61966372, 4.48081446, 3.68361378,
         4.35380125, 1.53697205, 5.00381327]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0680 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 115, vnnlib ID: 115 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.37767220, -22.63599205, -16.68470383, -17.56246567, -14.84348488,
         -17.98977852, -17.40301132, -16.78604507, -20.68542862, -22.37132454]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [762]; unstable size 762; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 332, 1, 762] with unstable size 331 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 762] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 762] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [331]; unstable size 331; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 331] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 331] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.03614473, 5.42467785, 1.01491475, 1.54336715, 1.87700081, 1.22836065,
         1.06106329, 4.09441233, 4.97289801]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0514 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 116, vnnlib ID: 116 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.56104851, -25.43757248, -22.30799866, -20.47185135, -22.67837715,
         -19.94359779, -23.14790916, -21.03846169, -23.14024353, -23.94003487]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [756]; unstable size 756; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 262, 1, 756] with unstable size 261 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 756] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 756] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [261]; unstable size 261; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 261] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 261] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.01937914, 3.41800976, 1.25207329, 0.18682456, 1.56868863, 2.03725815,
         0.10003203, 1.46886098, 2.03972721]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0700 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 117, vnnlib ID: 117 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.62328815, -18.18186188, -18.71482468, -19.00971794, -17.99854279,
         -20.46262550, -20.13095474, -20.09570503, -10.99292850, -16.95243645]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [626]; unstable size 626; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 626] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 626] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 626] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 200] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.72617245, 5.95293760, 6.50314236, 6.90349865, 5.91612148, 8.26207733,
         7.94433451, 7.78404808, 4.84170914]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0666 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 118, vnnlib ID: 118 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.57911682, -18.01341438, -21.32861328, -22.58253288, -23.55420685,
         -22.23183250, -24.82959557, -22.38050079, -21.57038307, -21.39789391]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 173, 1, 445] with unstable size 172 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 445] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 445] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [172]; unstable size 172; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 172] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.14326143, 1.50191116, 2.99028349, 3.75917006, 2.42487884, 5.00067902,
         2.60955715, 1.96376371, 2.50974607]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0739 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 119, vnnlib ID: 119 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.73344231, -25.29462242, -19.50235748, -18.98530388, -19.31733131,
         -19.14581299, -19.42850494, -19.97113991, -22.87136459, -23.31713867]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [875]; unstable size 875; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 356, 1, 875] with unstable size 355 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 875] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 875] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [355]; unstable size 355; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 355] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 355] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.85499334,  3.47037888, -0.90604115, -0.95058966, -0.23341945,
         -0.53099990, -0.42522973,  1.47124910,  1.91838431]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.73344231, -25.29462242, -19.50235748, -18.98530388, -19.31733131,
         -19.14581299, -19.42850494, -19.97113991, -22.87136459, -23.31713867]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.94274139, -25.66132355, -19.52083969, -19.54301643, -19.51924324,
          -19.72516251, -19.77233505, -20.36951065, -23.25295830, -23.81954956],
         [-21.94274139, -25.66132355, -19.52083969, -19.54301643, -19.51924324,
          -19.72516251, -19.77233505, -20.36951065, -23.25295830, -23.81954956]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02217674, -0.02377319,  0.18214607,  0.22931862,  0.82649422]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.0126 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0770 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 120, vnnlib ID: 120 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-35.14804459, -45.50294495, -35.78569031, -36.05693054, -38.71368027,
         -36.82321548, -38.53306961, -37.81744385, -43.85329437, -44.71561813]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [867]; unstable size 867; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 166, 1, 867] with unstable size 165 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 867] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 867] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [165]; unstable size 165; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 165] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 165] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 9.32719994, -0.10789108,  0.04068589,  2.53268170,  0.74327803,
          2.51675272,  1.46775651,  8.13148308,  8.55004883]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-35.14804459, -45.50294495, -35.78569031, -36.05693054, -38.71368027,
         -36.82321548, -38.53306961, -37.81744385, -43.85329437, -44.71561813]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.63it/s]100%|██████████| 1/1 [00:00<00:00,  8.62it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-35.14986801, -45.41040802, -35.38068390, -35.74518204, -38.33306503,
          -36.46290207, -38.23206711, -37.45825958, -43.79046249, -44.53758621]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.23081589]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1185 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 33.40303039550781
alpha/beta optimization time: 1.2467560768127441
initial alpha-crown bounds: tensor([[ 9.34874153, -0.09103417,  0.06384516,  2.55859995,  0.76943445,
          2.53152752,  1.50653577,  8.14646721,  8.56891346]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.0910341739654541
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.56552362442017
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.56548309326172
Verifying property 1 with 1 instances.
##### Instance 120 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.09103417]], device='cuda:0') need to verify.
Model prediction is: tensor([-35.14804459, -45.50294495, -35.78569031, -36.05693054, -38.71368027,
        -36.82321548, -38.53306961, -37.81744385, -43.85329437, -44.71561813],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.09103417]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 867
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 159
Node /15 input 0: size torch.Size([100]) unstable 10
-----------------
# of unstable neurons: 1036
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010609626770019531
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09103250503540039
10 lb beta sum: 0.0, worst -0.09103631973266602
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0545    transfer 0.0001    finalize 0.0001    func 0.0549    
Accumulated time: func 0.0549    prepare 0.0002    bound 0.0545    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 5] 
split level 1: [/input-12, 50] 
split level 2: [/input-12, 42] 
split level 3: [/input-12, 59] 
split level 4: [/input-12, 10] 
split level 5: [/input-12, 31] 
split level 6: [/input-12, 90] 
split level 7: [/input-8, 217] 
split level 8: [/input-8, 225] 
split level 9: [/input-8, 226] 
split level 10: [/input-8, 1835] 
split level 11: [/input-8, 209] 
split level 12: [/input-8, 1188] 
split level 13: [/input-8, 233] 
split level 14: [/input-8, 1815] 
split level 15: [/input-8, 1029] 
split level 16: [/input-8, 234] 
split level 17: [/input-8, 1817] 
split level 18: [/input-8, 241] 
split level 19: [/input-8, 201] 
split level 20: [/input-8, 239] 
split level 21: [/input-8, 803] 
split level 22: [/input-8, 250] 
split level 23: [/input-8, 1371] 
split level 24: [/input, 3124] 
split level 25: [/input, 648] 
split level 26: [/input, 477] 
split level 27: [/input-8, 249] 
split level 28: [/input, 631] 
split level 29: [/input-8, 1834] 
split level 30: [/input-8, 428] 
split level 31: [/input-8, 1816] 
split level 32: [/input-8, 1826] 
split level 33: [/input-8, 247] 
split level 34: [/input, 3242] 
split level 35: [/input, 953] 
split level 36: [/input, 969] 
split level 37: [/input-8, 253] 
split level 38: [/input-8, 1847] 
split level 39: [/input-8, 902] 
split level 40: [/input-8, 635] 
split level 41: [/input-8, 508] 
split level 42: [/input, 3256] 
split level 43: [/input, 1002] 
split level 44: [/input, 917] 
split level 45: [/input-8, 634] 
split level 46: [/input-8, 901] 
split level 47: [/input, 933] 
split level 48: [/input-8, 60] 
split level 49: [/input, 3272] 
split level 50: [/input-8, 1808] 
split level 51: [/input-8, 1844] 
split level 52: [/input-8, 181] 
split level 53: [/input-8, 202] 
split level 54: [/input, 2907] 
split level 55: [/input, 3257] 
split level 56: [/input-8, 507] 
split level 57: [/input, 1004] 
split level 58: [/input-8, 586] 
split level 59: [/input-8, 576] 
split level 60: [/input, 3016] 
split level 61: [/input, 3052] 
split level 62: [/input-8, 246] 
split level 63: [/input, 3105] 
split level 64: [/input-8, 1622] 
split level 65: [/input-8, 192] 
split level 66: [/input-8, 235] 
split level 67: [/input, 3022] 
split level 68: [/input, 3676] 
split level 69: [/input, 2215] 
split level 70: [/input-8, 1379] 
split level 71: [/input, 919] 
split level 72: [/input, 3692] 
split level 73: [/input-8, 821] 
split level 74: [/input, 3691] 
split level 75: [/input, 2600] 
split level 76: [/input, 2263] 
split level 77: [/input, 2248] 
split level 78: [/input, 230] 
split level 79: [/input, 3006] 
split level 80: [/input-8, 2004] 
split level 81: [/input-8, 1800] 
split level 82: [/input, 2520] 
split level 83: [/input, 3496] 
split level 84: [/input-8, 452] 
split level 85: [/input-8, 911] 
split level 86: [/input-8, 193] 
split level 87: [/input, 2247] 
split level 88: [/input, 3379] 
split level 89: [/input, 3273] 
split level 90: [/input, 2199] 
split level 91: [/input, 2231] 
split level 92: [/input, 2844] 
split level 93: [/input, 3051] 
split level 94: [/input, 3287] 
split level 95: [/input, 229] 
split level 96: [/input, 2615] 
split level 97: [/input, 216] 
split level 98: [/input, 2519] 
split level 99: [/input, 3122] 
split level 100: [/input, 228] 
split level 101: [/input-8, 943] 
split level 102: [/input-8, 1833] 
split level 103: [/input, 2631] 
split level 104: [/input-8, 1843] 
split level 105: [/input, 2517] 
split level 106: [/input, 3268] 
split level 107: [/input, 614] 
split level 108: [/input, 2261] 
split level 109: [/input, 1336] 
split level 110: [/input, 2535] 
split level 111: [/input, 301] 
split level 112: [/input-8, 1596] 
split level 113: [/input, 199] 
split level 114: [/input, 222] 
split level 115: [/input, 699] 
split level 116: [/input, 227] 
split level 117: [/input, 2486] 
split level 118: [/input-8, 205] 
split level 119: [/input, 200] 
split level 120: [/input, 231] 
split level 121: [/input, 2616] 
split level 122: [/input, 214] 
split level 123: [/input-8, 1825] 
split level 124: [/input, 212] 
split level 125: [/input-8, 190] 
split level 126: [/input, 2471] 
split level 127: [/input, 3300] 
split level 128: [/input, 2244] 
split level 129: [/input-8, 506] 
split level 130: [/input, 213] 
split level 131: [/input, 2198] 
split level 132: [/input, 2265] 
split level 133: [/input, 232] 
split level 134: [/input, 215] 
split level 135: [/input, 2230] 
split level 136: [/input, 2502] 
split level 137: [/input, 1963] 
split level 138: [/input, 653] 
split level 139: [/input, 2213] 
split level 140: [/input, 2246] 
split level 141: [/input, 206] 
split level 142: [/input, 2232] 
split level 143: [/input, 3121] 
split level 144: [/input, 2843] 
split level 145: [/input, 3579] 
split level 146: [/input, 2534] 
split level 147: [/input, 715] 
split level 148: [/input, 2280] 
split level 149: [/input, 2277] 
split level 150: [/input, 2846] 
split level 151: [/input-8, 951] 
split level 152: [/input, 177] 
split level 153: [/input, 1964] 
split level 154: [/input-8, 1848] 
split level 155: [/input, 3301] 
split level 156: [/input, 2542] 
split level 157: [/input, 843] 
split level 158: [/input, 331] 
split level 159: [/input, 217] 
split level 160: [/input, 2845] 
split level 161: [/input, 3580] 
split level 162: [/input, 1979] 
split level 163: [/input, 198] 
split level 164: [/input, 2228] 
split level 165: [/input, 193] 
split level 166: [/input, 3675] 
split level 167: [/input, 3578] 
split level 168: [/input, 226] 
split level 169: [/input, 1833] 
split level 170: [/input, 196] 
split level 171: [/input, 2501] 
split level 172: [/input, 3380] 
split level 173: [/input, 238] 
split level 174: [/input, 210] 
split level 175: [/input, 2485] 
split level 176: [/input, 184] 
split level 177: [/input, 183] 
split level 178: [/input, 1948] 
split level 179: [/input, 46] 
split level 180: [/input, 1811] 
split level 181: [/input, 197] 
split level 182: [/input, 3708] 
split level 183: [/input, 2521] 
split level 184: [/input, 3383] 
split level 185: [/input, 1862] 
split level 186: [/input, 683] 
split level 187: [/input, 195] 
split level 188: [/input, 2455] 
split level 189: [/input, 3299] 
split level 190: [/input, 27] 
split level 191: [/input, 537] 
split level 192: [/input, 194] 
split level 193: [/input, 598] 
split level 194: [/input, 3581] 
split level 195: [/input, 28] 
split level 196: [/input, 29] 
split level 197: [/input, 2059] 
split level 198: [/input, 3577] 
split level 199: [/input, 536] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0909421443939209
10 lb beta sum: 0.0, worst -0.09093952178955078
Time: prepare 0.0116    bound 0.1023    transfer 0.0012    finalize 0.0031    func 0.1209    
Accumulated time: func 0.1758    prepare 0.0220    bound 0.1568    transfer 0.0013    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.13612819) min lb tensor(-0.09093666)
Number of Verified Splits: 4 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.01038980484008789 
BICCOS Cumulative time: 0.01038980484008789
Preprocessing time: 0.009865283966064453 Inference time: 0.00018787384033203125 Add cuts time: 8.177757263183594e-05 Cut analysis time: 0.0002548694610595703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08740 (1), -0.08730 (1), -0.08716 (1), -0.08697 (1), -0.08685 (1), -0.08680 (1), -0.08671 (1), -0.08632 (1), -0.08619 (1), -0.08608 (1), -0.08578 (1), -0.08554 (1), -0.08543 (1), -0.08542 (1), -0.08529 (1), -0.08498 (1), -0.08465 (1), -0.08457 (1), -0.08454 (1), -0.08446 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5288    set_bounds 0.0092    solve 0.1210    add 0.0683    
Accumulated time: pickout 0.0003    decision 0.5288    set_bounds 0.0092    solve 0.1210    add 0.0683    
Current (lb-rhs): -0.08740496635437012
50 domains visited
Cumulative time: 0.805473804473877

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 50] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] 
split level 1: [/input-12, 42] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 2: [/input-12, 59] [/input-12, 42] [/input-12, 42] [/input-12, 59] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 3: [/input-12, 31] [/input-12, 31] [/input-12, 59] [/input-12, 31] [/input-12, 31] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07100224494934082
10 lb beta sum: 0.44343894720077515, worst -0.003878951072692871

all verified at 13th iter
Time: prepare 0.0074    bound 0.0847    transfer 0.0007    finalize 0.0024    func 0.0979    
Accumulated time: func 0.2737    prepare 0.0297    bound 0.2415    transfer 0.0020    finalize 0.0056    
all_split False
======================Cut inference begins======================
max lb tensor(0.28334844) min lb tensor(0.00102162)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.0340116024017334 
BICCOS Cumulative time: 0.04440140724182129
Preprocessing time: 0.011852741241455078 Inference time: 0.013833999633789062 Add cuts time: 0.00812673568725586 Cut analysis time: 0.00019812583923339844
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0202    set_bounds 0.0117    solve 0.0980    add 0.0151    
Accumulated time: pickout 0.0014    decision 0.5490    set_bounds 0.0208    solve 0.2189    add 0.0834    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59,  5]), tensor([-1., -1.]), tensor([0, 0]), tensor([5.75661872e-20, 2.36709639e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59,  5]), tensor([-1.,  1.]), tensor([0, 0]), tensor([5.75661872e-20, 5.21669835e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59,  5]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.75661872e-20, 2.22709224e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59,  5]), tensor([1., 1.]), tensor([0, 0]), tensor([5.75661872e-20, 1.13020644e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0033769607543945312

all verified at 1th iter
Time: prepare 0.0003    bound 0.0101    transfer 0.0001    finalize 0.0001    func 0.0107    
Accumulated time: func 0.2845    prepare 0.0300    bound 0.2516    transfer 0.0021    finalize 0.0058    
After pruning, left:  0

Back to Regular BaB


Properties batch 2, size 1
Remaining timeout: 197.35949611663818
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 197.3594207763672
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.35939764976501
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.3593773841858
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.35935807228088
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.35933780670166
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.3593192100525
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.6407 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 121, vnnlib ID: 121 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.40458870, -23.24298668, -27.73333549, -27.90799141, -27.40376663,
         -28.05864906, -28.91640854, -27.54826736, -27.30009651, -25.52873611]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [684]; unstable size 684; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 286, 1, 684] with unstable size 285 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 684] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 684] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [285]; unstable size 285; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 285] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 285] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.35218525, 2.28642750, 2.51820374, 1.68908024, 2.53085232, 3.30504608,
         2.17191458, 2.28330183, 1.35116148]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0632 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 122, vnnlib ID: 122 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.14629936, -20.71539307, -24.46714020, -24.97179604, -24.83234215,
         -25.31670189, -27.17220497, -25.32540894, -20.97597122, -23.65787697]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [595]; unstable size 595; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 206, 1, 595] with unstable size 205 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 595] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 595] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [205]; unstable size 205; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 205] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 205] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.96349621,  1.88203287,  2.57148838,  2.24077988,  2.77335310,
          4.53415489,  2.59828901, -0.94698811,  1.90783048]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.14629936, -20.71539307, -24.46714020, -24.97179604, -24.83234215,
         -25.31670189, -27.17220497, -25.32540894, -20.97597122, -23.65787697]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.84978294, -20.93986130, -24.20811844, -24.78613472, -24.63944435,
          -25.15346718, -27.01600456, -25.25593185, -20.52700806, -23.77411842]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.41285324]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0060 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0760 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 123, vnnlib ID: 123 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.12747383, -35.12327194, -32.50504303, -34.70817566, -34.61371613,
         -34.77191544, -33.63956833, -36.66131973, -30.60513496, -36.99544525]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [448]; unstable size 448; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 264, 1, 448] with unstable size 263 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 448] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 448] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [263]; unstable size 263; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 263] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 263] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.72115159,  3.32613206,  0.34110022,  2.45504808,  2.08227730,
          2.35139179,  1.41229093,  3.91198683,  5.09997892]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-30.12747383, -35.12327194, -32.50504303, -34.70817566, -34.61371613,
         -34.77191544, -33.63956833, -36.66131973, -30.60513496, -36.99544525]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-30.12747383, -35.12327194, -32.50504303, -34.70817566, -34.61371613,
          -34.77191544, -33.63956833, -36.66131973, -30.60513496, -36.99544525]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.47766113]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-3.53968143e-01, -6.82538673e-02, -3.65078375e-02,  ...,
             1.11112073e-02, -2.11111009e-01, -5.23808524e-02],
           [-1.15872920e-01, -1.47618949e-01, -1.63491964e-01,  ...,
            -5.23808524e-02, -3.69841158e-01, -1.63491964e-01],
           [-2.42857039e-01, -1.15872920e-01, -2.26984024e-01,  ...,
             1.22222304e-01,  2.49206424e-01, -2.42857039e-01],
           ...,
           [ 1.22222304e-01,  4.28572372e-02,  2.65079439e-01,  ...,
            -7.03174591e-01, -2.11111009e-01, -2.26984024e-01],
           [ 1.53968334e-01,  3.76190543e-01, -2.26984024e-01,  ...,
            -4.17460203e-01, -4.80952382e-01, -2.26984024e-01],
           [ 3.44444513e-01,  5.19047678e-01,  3.92063558e-01,  ...,
            -3.65078375e-02, -2.74603069e-01, -2.11111009e-01]],

          [[ 1.61031820e-02,  2.25442946e-01,  2.73752123e-01,  ...,
             4.02576596e-01,  8.05154145e-02,  2.89855182e-01],
           [ 2.41546005e-01,  1.77133769e-01,  1.93236828e-01,  ...,
             3.86473536e-01, -3.22059989e-02,  1.44927651e-01],
           [ 1.12721533e-01,  2.57649064e-01,  1.61030710e-01,  ...,
             4.99194920e-01,  8.21256101e-01,  1.77133769e-01],
           ...,
           [ 7.56843865e-01,  5.79710245e-01,  6.92431629e-01,  ...,
            -3.86473298e-01,  1.61030710e-01,  2.25442946e-01],
           [ 5.95813274e-01,  7.72946954e-01,  2.09339887e-01,  ...,
             8.05154145e-02, -1.77133530e-01,  1.44927651e-01],
           [ 6.28019392e-01,  8.21256101e-01,  8.37359190e-01,  ...,
             5.31401038e-01,  1.22934580e-07,  9.66184735e-02]],

          [[ 4.51274544e-01,  7.36132085e-01,  7.36132085e-01,  ...,
             8.56072128e-01,  5.56222081e-01,  7.51124620e-01],
           [ 7.21139610e-01,  7.21139610e-01,  6.31184578e-01,  ...,
             7.96102107e-01,  3.46327007e-01,  6.01199567e-01],
           [ 5.26237071e-01,  6.76162124e-01,  6.61169589e-01,  ...,
             9.16042149e-01,  9.76012170e-01,  5.71214557e-01],
           ...,
           [ 1.05097473e+00,  8.86057138e-01,  1.09595215e+00,  ...,
             1.66416958e-01,  5.86207092e-01,  6.16192102e-01],
           [ 1.03598225e+00,  1.08095968e+00,  5.86207092e-01,  ...,
             4.96252000e-01,  3.46327007e-01,  6.31184578e-01],
           [ 1.08095968e+00,  1.15592217e+00,  1.09595215e+00,  ...,
             8.26087117e-01,  5.26237071e-01,  6.61169589e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0707 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 124, vnnlib ID: 124 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.54057121, -21.40389442, -20.55339050, -20.58682060, -20.08682251,
         -21.26310730, -20.37835312, -20.33173752, -21.91990280, -21.46942329]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [799]; unstable size 799; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 326, 1, 799] with unstable size 325 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 799] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 799] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [325]; unstable size 325; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 325] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 325] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.38908625, -1.18870032, -2.95449924, -2.60739756, -3.34873295,
         -1.96987128, -3.07361603, -3.06156135, -1.16480875]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.54057121, -21.40389442, -20.55339050, -20.58682060, -20.08682251,
         -21.26310730, -20.37835312, -20.33173752, -21.91990280, -21.46942329]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.54056931, -21.40389061, -20.55338860, -20.58681679, -20.08682060,
          -21.26310539, -20.37835312, -20.33173943, -21.91990280, -21.46942520],
         [-21.54056931, -21.40389061, -20.55338860, -20.58681679, -20.08682060,
          -21.26310539, -20.37835312, -20.33173943, -21.91990280, -21.46942520]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.07114410, -0.06553459, -0.91603661, -0.88260841, -1.38260460,
          -0.20631981, -1.09107208, -1.13768578,  0.45047760]]],
       device='cuda:0')
number of violation:  7
clean attack image tensor([[[[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         ...,


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0830 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 125, vnnlib ID: 125 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.34185982, -18.34316826, -19.90431023, -19.60602570, -20.92833138,
         -19.82821465, -22.19347191, -21.69088936, -18.03870010, -18.59241867]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [703]; unstable size 703; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 222, 1, 703] with unstable size 221 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 703] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 703] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [221]; unstable size 221; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 221] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 221] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.52273846, -0.96111453, -0.21341372, -0.24194956,  0.79662275,
         -0.12263966,  1.94754982,  1.67940426, -2.02313232]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.34185982, -18.34316826, -19.90431023, -19.60602570, -20.92833138,
         -19.82821465, -22.19347191, -21.69088936, -18.03870010, -18.59241867]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.34185982, -18.34316635, -19.90431023, -19.60602379, -20.92833138,
          -19.82821274, -22.19347000, -21.69088745, -18.03870010, -18.59241676],
         [-19.34185982, -18.34316635, -19.90431023, -19.60602379, -20.92833138,
          -19.82821274, -22.19347000, -21.69088745, -18.03870010, -18.59241676]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.74944305, -0.24925041,  1.31189346,  1.01360703,  1.23579597,
          -0.55371666]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0606 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 126, vnnlib ID: 126 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.60500145, -24.89141464, -19.17918777, -20.05367851, -18.86228371,
         -19.76714134, -19.96246719, -19.42761040, -24.32711601, -22.82327843]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [640]; unstable size 640; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 244, 1, 640] with unstable size 243 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 640] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 640] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [243]; unstable size 243; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 243] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 243] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.29259682,  3.78634882, -0.83907115,  0.12917000, -0.20247710,
         -0.06445068, -0.28860736,  3.43386030,  1.86539745]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.60500145, -24.89141464, -19.17918777, -20.05367851, -18.86228371,
         -19.76714134, -19.96246719, -19.42761040, -24.32711601, -22.82327843]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.97348404, -25.25050926, -19.38525391, -20.47401237, -19.55496788,
          -20.18207741, -20.31973648, -20.18347740, -24.64109039, -23.26975060],
         [-22.97348404, -25.25050926, -19.38525391, -20.47401237, -19.55496788,
          -20.18207741, -20.31973648, -20.18347740, -24.64109039, -23.26975060]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16971397,  0.62710953,  0.76476860,  0.62850952]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0062 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0738 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 127, vnnlib ID: 127 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
         -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [953]; unstable size 953; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 256, 1, 953] with unstable size 255 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 953] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 953] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [255]; unstable size 255; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 255] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 255] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.24769032,  1.62967813, -0.30106235, -0.63823330, -0.46131396,
          0.13329810,  1.71760356,  0.29797310,  0.64501810]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
         -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.41it/s]100%|██████████| 1/1 [00:00<00:00,  8.40it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.69080544, -28.02049828, -25.76778221, -25.07657433, -25.68251801,
          -26.00996780, -27.59398842, -26.61277580, -24.82239151, -26.61855125],
         [-25.69080544, -28.02049828, -25.76778221, -25.07657433, -25.68251801,
          -26.00996780, -27.59398842, -26.61277580, -24.82239151, -26.61855125]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.86841393, 0.94539070, 0.25418282, 0.86012650]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1221 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 3.3044397830963135
alpha/beta optimization time: 1.2556006908416748
initial alpha-crown bounds: tensor([[-0.19642937,  1.68688798, -0.24070334, -0.57431984, -0.39791632,
          0.20313388,  1.77232850,  0.36443198,  0.68702650]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 4 ; Worst class: (+ rhs) -0.5743198394775391
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5468044281006
Verifying property 0 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.19642937]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
        -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.19642937]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 953
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 248
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1222
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001049041748046875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19642668962478638
10 lb beta sum: 0.0, worst -0.19642853736877441
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0543    transfer 0.0001    finalize 0.0001    func 0.0548    
Accumulated time: func 0.0548    prepare 0.0002    bound 0.0543    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] 
split level 1: [/input-12, 61] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 32] 
split level 4: [/input-12, 79] 
split level 5: [/input-12, 4] 
split level 6: [/input-8, 913] 
split level 7: [/input-12, 2] 
split level 8: [/input-8, 1697] 
split level 9: [/input-8, 1764] 
split level 10: [/input-12, 29] 
split level 11: [/input-12, 8] 
split level 12: [/input-8, 1724] 
split level 13: [/input-12, 71] 
split level 14: [/input-8, 1052] 
split level 15: [/input-8, 1715] 
split level 16: [/input-8, 1690] 
split level 17: [/input-8, 1943] 
split level 18: [/input-8, 1698] 
split level 19: [/input-8, 1707] 
split level 20: [/input-8, 1762] 
split level 21: [/input-8, 1935] 
split level 22: [/input-8, 1716] 
split level 23: [/input-8, 1765] 
split level 24: [/input-8, 371] 
split level 25: [/input, 2679] 
split level 26: [/input-8, 1953] 
split level 27: [/input-12, 35] 
split level 28: [/input-8, 932] 
split level 29: [/input-8, 1626] 
split level 30: [/input-8, 179] 
split level 31: [/input-12, 58] 
split level 32: [/input-8, 1948] 
split level 33: [/input-8, 625] 
split level 34: [/input, 2455] 
split level 35: [/input-8, 1053] 
split level 36: [/input-8, 439] 
split level 37: [/input-8, 1756] 
split level 38: [/input-8, 1980] 
split level 39: [/input-8, 1634] 
split level 40: [/input-8, 1947] 
split level 41: [/input, 920] 
split level 42: [/input, 921] 
split level 43: [/input-8, 1034] 
split level 44: [/input, 2388] 
split level 45: [/input, 936] 
split level 46: [/input-8, 1310] 
split level 47: [/input-8, 933] 
split level 48: [/input, 2456] 
split level 49: [/input, 3016] 
split level 50: [/input-8, 2034] 
split level 51: [/input-8, 610] 
split level 52: [/input, 904] 
split level 53: [/input-8, 302] 
split level 54: [/input-8, 939] 
split level 55: [/input, 938] 
split level 56: [/input, 2439] 
split level 57: [/input, 2457] 
split level 58: [/input, 2474] 
split level 59: [/input, 2485] 
split level 60: [/input-8, 1084] 
split level 61: [/input, 2195] 
split level 62: [/input-8, 1618] 
split level 63: [/input, 2167] 
split level 64: [/input, 923] 
split level 65: [/input-8, 1520] 
split level 66: [/input, 3433] 
split level 67: [/input, 2202] 
split level 68: [/input-8, 1043] 
split level 69: [/input, 2440] 
split level 70: [/input, 2473] 
split level 71: [/input, 2371] 
split level 72: [/input, 2180] 
split level 73: [/input, 393] 
split level 74: [/input, 2230] 
split level 75: [/input, 135] 
split level 76: [/input, 2535] 
split level 77: [/input, 907] 
split level 78: [/input-8, 377] 
split level 79: [/input-8, 1757] 
split level 80: [/input, 2203] 
split level 81: [/input, 905] 
split level 82: [/input, 2406] 
split level 83: [/input, 1941] 
split level 84: [/input, 903] 
split level 85: [/input, 919] 
split level 86: [/input, 889] 
split level 87: [/input-8, 361] 
split level 88: [/input, 2148] 
split level 89: [/input, 3193] 
split level 90: [/input, 2471] 
split level 91: [/input, 2217] 
split level 92: [/input-8, 180] 
split level 93: [/input-8, 186] 
split level 94: [/input, 1350] 
split level 95: [/input, 2201] 
split level 96: [/input-8, 416] 
split level 97: [/input, 2231] 
split level 98: [/input, 3179] 
split level 99: [/input, 2168] 
split level 100: [/input, 3420] 
split level 101: [/input-8, 241] 
split level 102: [/input, 2441] 
split level 103: [/input-8, 1598] 
split level 104: [/input, 2472] 
split level 105: [/input, 2883] 
split level 106: [/input, 2475] 
split level 107: [/input, 3390] 
split level 108: [/input-8, 1523] 
split level 109: [/input-8, 604] 
split level 110: [/input, 3018] 
split level 111: [/input, 2185] 
split level 112: [/input, 2218] 
split level 113: [/input, 117] 
split level 114: [/input, 2897] 
split level 115: [/input, 2141] 
split level 116: [/input, 3466] 
split level 117: [/input, 1470] 
split level 118: [/input, 2419] 
split level 119: [/input, 2125] 
split level 120: [/input, 2170] 
split level 121: [/input, 2232] 
split level 122: [/input-8, 1227] 
split level 123: [/input, 3000] 
split level 124: [/input-8, 1780] 
split level 125: [/input-8, 446] 
split level 126: [/input, 404] 
split level 127: [/input, 2680] 
split level 128: [/input, 2169] 
split level 129: [/input, 2196] 
split level 130: [/input, 952] 
split level 131: [/input, 2697] 
split level 132: [/input-8, 934] 
split level 133: [/input, 2220] 
split level 134: [/input, 3180] 
split level 135: [/input, 85] 
split level 136: [/input-8, 1369] 
split level 137: [/input-8, 422] 
split level 138: [/input, 2154] 
split level 139: [/input, 420] 
split level 140: [/input, 2184] 
split level 141: [/input, 3017] 
split level 142: [/input, 2153] 
split level 143: [/input, 759] 
split level 144: [/input-8, 1377] 
split level 145: [/input, 435] 
split level 146: [/input-8, 1149] 
split level 147: [/input, 891] 
split level 148: [/input-8, 409] 
split level 149: [/input, 2468] 
split level 150: [/input, 2476] 
split level 151: [/input, 2205] 
split level 152: [/input, 2186] 
split level 153: [/input, 925] 
split level 154: [/input, 3192] 
split level 155: [/input-8, 1265] 
split level 156: [/input, 3181] 
split level 157: [/input, 2204] 
split level 158: [/input, 2426] 
split level 159: [/input, 3207] 
split level 160: [/input, 1349] 
split level 161: [/input, 712] 
split level 162: [/input, 474] 
split level 163: [/input, 2489] 
split level 164: [/input, 69] 
split level 165: [/input, 2219] 
split level 166: [/input, 2694] 
split level 167: [/input, 2390] 
split level 168: [/input, 2156] 
split level 169: [/input, 506] 
split level 170: [/input, 2155] 
split level 171: [/input, 3422] 
split level 172: [/input, 2433] 
split level 173: [/input, 3191] 
split level 174: [/input, 2393] 
split level 175: [/input, 2682] 
split level 176: [/input, 2442] 
split level 177: [/input, 2467] 
split level 178: [/input, 2488] 
split level 179: [/input, 2412] 
split level 180: [/input, 3468] 
split level 181: [/input-8, 212] 
split level 182: [/input, 2937] 
split level 183: [/input-8, 235] 
split level 184: [/input, 2461] 
split level 185: [/input-8, 959] 
split level 186: [/input, 714] 
split level 187: [/input, 2696] 
split level 188: [/input, 138] 
split level 189: [/input, 758] 
split level 190: [/input, 2211] 
split level 191: [/input, 713] 
split level 192: [/input, 3389] 
split level 193: [/input-8, 1317] 
split level 194: [/input, 2206] 
split level 195: [/input, 730] 
split level 196: [/input, 165] 
split level 197: [/input, 909] 
split level 198: [/input, 2416] 
split level 199: [/input, 3209] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19640344381332397
10 lb beta sum: 0.0, worst -0.19640576839447021
Time: prepare 0.0116    bound 0.1014    transfer 0.0011    finalize 0.0030    func 0.1198    
Accumulated time: func 0.1746    prepare 0.0220    bound 0.1557    transfer 0.0012    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.14749050) min lb tensor(-0.19640344)
Number of Verified Splits: 4 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.010678291320800781 
BICCOS Cumulative time: 0.010678291320800781
Preprocessing time: 0.00982522964477539 Inference time: 0.00018739700317382812 Add cuts time: 7.677078247070312e-05 Cut analysis time: 0.0005888938903808594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18764 (1), -0.18735 (1), -0.18734 (1), -0.18725 (1), -0.18632 (1), -0.18625 (1), -0.18619 (1), -0.18599 (1), -0.18594 (1), -0.18585 (1), -0.18516 (1), -0.18475 (1), -0.18457 (1), -0.18408 (1), -0.18331 (1), -0.18134 (1), -0.18113 (1), -0.18051 (1), -0.18039 (1), -0.17943 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5269    set_bounds 0.0090    solve 0.1199    add 0.0690    
Accumulated time: pickout 0.0003    decision 0.5269    set_bounds 0.0090    solve 0.1199    add 0.0690    
Current (lb-rhs): -0.1876354217529297
50 domains visited
Cumulative time: 0.7955312728881836

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 1: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 2: [/input-12, 32] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 32] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 2] [/input-12, 2] [/input-12, 32] [/input-12, 32] [/input-12, 2] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15661108493804932
10 lb beta sum: 0.5408635139465332, worst -0.10000592470169067
Time: prepare 0.0072    bound 0.1210    transfer 0.0007    finalize 0.0023    func 0.1338    
Accumulated time: func 0.3084    prepare 0.0294    bound 0.2767    transfer 0.0019    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.31405449) min lb tensor(-0.09976551)
Number of Verified Splits: 268 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.027303457260131836 
BICCOS Cumulative time: 0.03798174858093262
Preprocessing time: 0.01186823844909668 Inference time: 0.009963750839233398 Add cuts time: 0.005278348922729492 Cut analysis time: 0.00019311904907226562
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0197    set_bounds 0.0126    solve 0.1339    add 0.0145    
Accumulated time: pickout 0.0014    decision 0.5466    set_bounds 0.0216    solve 0.2538    add 0.0835    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 34]), tensor([-1., -1.]), tensor([0, 0]), tensor([6.07632273e-08, 3.59128177e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 34]), tensor([-1.,  1.]), tensor([0, 0]), tensor([6.07632273e-08, 9.46077555e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 34]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.75661872e-20, 3.35261524e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 34]), tensor([1., 1.]), tensor([0, 0]), tensor([5.75661872e-20, 9.94949788e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0635453462600708

all verified at 2th iter
Time: prepare 0.0003    bound 0.0152    transfer 0.0001    finalize 0.0002    func 0.0159    
Accumulated time: func 0.3243    prepare 0.0297    bound 0.2919    transfer 0.0020    finalize 0.0056    
After pruning, left:  0

Back to Regular BaB


Properties batch 1, size 1
Remaining timeout: 197.33519744873047
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 197.33512163162231
Verifying property 2 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.24070334]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
        -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.24070334]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 953
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 248
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1222
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010728836059570312
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24070000648498535
10 lb beta sum: 0.0, worst -0.24071407318115234
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0551    transfer 0.0001    finalize 0.0001    func 0.0555    
Accumulated time: func 0.0555    prepare 0.0002    bound 0.0551    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] 
split level 1: [/input-12, 8] 
split level 2: [/input-12, 42] 
split level 3: [/input-12, 46] 
split level 4: [/input-12, 61] 
split level 5: [/input-12, 12] 
split level 6: [/input-12, 32] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 79] 
split level 9: [/input-12, 34] 
split level 10: [/input-12, 90] 
split level 11: [/input-8, 932] 
split level 12: [/input-8, 1697] 
split level 13: [/input-12, 58] 
split level 14: [/input-8, 939] 
split level 15: [/input-8, 913] 
split level 16: [/input-8, 1953] 
split level 17: [/input-8, 1716] 
split level 18: [/input-8, 354] 
split level 19: [/input-8, 1698] 
split level 20: [/input-8, 1724] 
split level 21: [/input-8, 1052] 
split level 22: [/input-8, 1707] 
split level 23: [/input-8, 1764] 
split level 24: [/input-8, 1053] 
split level 25: [/input-8, 933] 
split level 26: [/input-8, 1939] 
split level 27: [/input-8, 937] 
split level 28: [/input-8, 1948] 
split level 29: [/input-8, 797] 
split level 30: [/input-8, 1634] 
split level 31: [/input-8, 1626] 
split level 32: [/input-8, 1947] 
split level 33: [/input-8, 946] 
split level 34: [/input-8, 1762] 
split level 35: [/input, 952] 
split level 36: [/input, 2231] 
split level 37: [/input, 2485] 
split level 38: [/input-8, 1690] 
split level 39: [/input, 936] 
split level 40: [/input, 938] 
split level 41: [/input, 2474] 
split level 42: [/input, 954] 
split level 43: [/input-8, 1206] 
split level 44: [/input-8, 934] 
split level 45: [/input, 966] 
split level 46: [/input, 2455] 
split level 47: [/input, 3016] 
split level 48: [/input, 2248] 
split level 49: [/input, 2230] 
split level 50: [/input, 921] 
split level 51: [/input, 506] 
split level 52: [/input-8, 49] 
split level 53: [/input-8, 232] 
split level 54: [/input-8, 241] 
split level 55: [/input, 2473] 
split level 56: [/input, 2488] 
split level 57: [/input-8, 1310] 
split level 58: [/input, 2202] 
split level 59: [/input, 2459] 
split level 60: [/input, 2232] 
split level 61: [/input, 923] 
split level 62: [/input-8, 186] 
split level 63: [/input, 2456] 
split level 64: [/input, 2535] 
split level 65: [/input, 2471] 
split level 66: [/input, 2472] 
split level 67: [/input, 2490] 
split level 68: [/input, 920] 
split level 69: [/input-8, 1523] 
split level 70: [/input, 2489] 
split level 71: [/input, 1941] 
split level 72: [/input, 2180] 
split level 73: [/input-8, 1765] 
split level 74: [/input, 3509] 
split level 75: [/input-8, 179] 
split level 76: [/input, 2218] 
split level 77: [/input-8, 1598] 
split level 78: [/input-8, 1780] 
split level 79: [/input, 393] 
split level 80: [/input, 2201] 
split level 81: [/input, 905] 
split level 82: [/input, 3516] 
split level 83: [/input, 904] 
split level 84: [/input, 2217] 
split level 85: [/input, 2203] 
split level 86: [/input-8, 610] 
split level 87: [/input, 2457] 
split level 88: [/input, 2219] 
split level 89: [/input, 2167] 
split level 90: [/input, 2439] 
split level 91: [/input, 955] 
split level 92: [/input, 2475] 
split level 93: [/input-8, 57] 
split level 94: [/input, 907] 
split level 95: [/input, 2388] 
split level 96: [/input, 2440] 
split level 97: [/input-8, 1920] 
split level 98: [/input, 2184] 
split level 99: [/input, 2220] 
split level 100: [/input, 2371] 
split level 101: [/input, 3533] 
split level 102: [/input-8, 897] 
split level 103: [/input, 2186] 
split level 104: [/input-8, 1807] 
split level 105: [/input-8, 625] 
split level 106: [/input, 2185] 
split level 107: [/input, 2406] 
split level 108: [/input, 2188] 
split level 109: [/input-8, 439] 
split level 110: [/input-8, 2001] 
split level 111: [/input, 2249] 
split level 112: [/input, 949] 
split level 113: [/input, 2115] 
split level 114: [/input, 971] 
split level 115: [/input, 2476] 
split level 116: [/input, 3000] 
split level 117: [/input-8, 959] 
split level 118: [/input, 404] 
split level 119: [/input, 2491] 
split level 120: [/input, 2169] 
split level 121: [/input-8, 56] 
split level 122: [/input, 2441] 
split level 123: [/input-8, 240] 
split level 124: [/input, 474] 
split level 125: [/input, 797] 
split level 126: [/input, 2505] 
split level 127: [/input, 1978] 
split level 128: [/input, 2236] 
split level 129: [/input, 946] 
split level 130: [/input, 2168] 
split level 131: [/input, 2204] 
split level 132: [/input-8, 209] 
split level 133: [/input-8, 337] 
split level 134: [/input, 1979] 
split level 135: [/input, 3466] 
split level 136: [/input-8, 1084] 
split level 137: [/input, 2254] 
split level 138: [/input, 889] 
split level 139: [/input-8, 1943] 
split level 140: [/input, 2542] 
split level 141: [/input, 1980] 
split level 142: [/input, 2762] 
split level 143: [/input, 3017] 
split level 144: [/input, 3518] 
split level 145: [/input-8, 217] 
split level 146: [/input, 2253] 
split level 147: [/input, 2148] 
split level 148: [/input-8, 940] 
split level 149: [/input, 1015] 
split level 150: [/input, 963] 
split level 151: [/input-8, 1980] 
split level 152: [/input, 2484] 
split level 153: [/input, 420] 
split level 154: [/input, 435] 
split level 155: [/input, 501] 
split level 156: [/input, 1954] 
split level 157: [/input, 1981] 
split level 158: [/input, 3517] 
split level 159: [/input, 2419] 
split level 160: [/input, 2273] 
split level 161: [/input, 730] 
split level 162: [/input, 2250] 
split level 163: [/input, 2509] 
split level 164: [/input, 1013] 
split level 165: [/input, 2251] 
split level 166: [/input, 2196] 
split level 167: [/input-8, 196] 
split level 168: [/input, 2764] 
split level 169: [/input, 2499] 
split level 170: [/input, 2078] 
split level 171: [/input-8, 41] 
split level 172: [/input-8, 242] 
split level 173: [/input, 3411] 
split level 174: [/input, 2284] 
split level 175: [/input, 1965] 
split level 176: [/input, 2468] 
split level 177: [/input, 714] 
split level 178: [/input, 2412] 
split level 179: [/input, 2189] 
split level 180: [/input, 2156] 
split level 181: [/input, 925] 
split level 182: [/input, 713] 
split level 183: [/input, 2332] 
split level 184: [/input, 2170] 
split level 185: [/input, 2270] 
split level 186: [/input, 2524] 
split level 187: [/input, 2461] 
split level 188: [/input, 3582] 
split level 189: [/input, 2442] 
split level 190: [/input, 2444] 
split level 191: [/input, 3468] 
split level 192: [/input, 2157] 
split level 193: [/input-8, 204] 
split level 194: [/input, 891] 
split level 195: [/input, 2349] 
split level 196: [/input, 699] 
split level 197: [/input, 2269] 
split level 198: [/input, 2268] 
split level 199: [/input, 2390] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24052870273590088
10 lb beta sum: 0.0, worst -0.24045276641845703
Time: prepare 0.0116    bound 0.1012    transfer 0.0007    finalize 0.0026    func 0.1188    
Accumulated time: func 0.1743    prepare 0.0220    bound 0.1563    transfer 0.0008    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.28614938) min lb tensor(-0.24044704)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.010826587677001953 
BICCOS Cumulative time: 0.010826587677001953
Preprocessing time: 0.009878158569335938 Inference time: 0.00023412704467773438 Add cuts time: 0.00011110305786132812 Cut analysis time: 0.0006031990051269531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23033 (1), -0.23025 (1), -0.22942 (1), -0.22934 (1), -0.22913 (1), -0.22873 (1), -0.22870 (1), -0.22858 (1), -0.22843 (1), -0.22782 (1), -0.22774 (1), -0.22767 (1), -0.22657 (1), -0.22509 (1), -0.22455 (1), -0.22430 (1), -0.22407 (1), -0.22402 (1), -0.22296 (1), -0.22043 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5323    set_bounds 0.0090    solve 0.1188    add 0.0746    
Accumulated time: pickout 0.0003    decision 0.5323    set_bounds 0.0090    solve 0.1188    add 0.0746    
Current (lb-rhs): -0.23033392429351807
50 domains visited
Cumulative time: 0.8062417507171631

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 8] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 46] [/input-12, 8] [/input-12, 46] [/input-12, 8] 
split level 2: [/input-12, 46] [/input-12, 12] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 32] [/input-12, 12] [/input-12, 46] [/input-12, 12] [/input-12, 46] 
split level 3: [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 32] [/input-12, 12] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17169976234436035
10 lb beta sum: 0.810333251953125, worst -0.048758089542388916
Time: prepare 0.0071    bound 0.1209    transfer 0.0007    finalize 0.0023    func 0.1337    
Accumulated time: func 0.3079    prepare 0.0294    bound 0.2771    transfer 0.0015    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.30053425) min lb tensor(-0.04845090)
Number of Verified Splits: 326 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03047776222229004 
BICCOS Cumulative time: 0.04130434989929199
Preprocessing time: 0.011657953262329102 Inference time: 0.011884450912475586 Add cuts time: 0.006744384765625 Cut analysis time: 0.00019097328186035156
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0198    set_bounds 0.0125    solve 0.1337    add 0.0147    
Accumulated time: pickout 0.0014    decision 0.5520    set_bounds 0.0215    solve 0.2526    add 0.0893    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 29]), tensor([-1., -1.]), tensor([0, 0]), tensor([8.73659868e-14, 1.00044593e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 29]), tensor([-1.,  1.]), tensor([0, 0]), tensor([8.73659868e-14, 2.65678108e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 29]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.73487621e-11, 1.92217335e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 29]), tensor([1., 1.]), tensor([0, 0]), tensor([2.73487621e-11, 2.83924401e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04300040006637573

all verified at 1th iter
Time: prepare 0.0003    bound 0.0098    transfer 0.0001    finalize 0.0012    func 0.0115    
Accumulated time: func 0.3195    prepare 0.0298    bound 0.2869    transfer 0.0017    finalize 0.0062    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 196.12348651885986
Verifying property 3 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.57431984]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
        -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.57431984]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 953
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 248
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1222
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010347366333007812
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5743148326873779
10 lb beta sum: 0.0, worst -0.5743211507797241
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0542    transfer 0.0001    finalize 0.0001    func 0.0546    
Accumulated time: func 0.0546    prepare 0.0002    bound 0.0542    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 12] 
split level 2: [/input-12, 90] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 8] 
split level 5: [/input-12, 61] 
split level 6: [/input-12, 79] 
split level 7: [/input-12, 58] 
split level 8: [/input-8, 1697] 
split level 9: [/input-12, 46] 
split level 10: [/input-8, 1618] 
split level 11: [/input-8, 1610] 
split level 12: [/input-8, 1973] 
split level 13: [/input-8, 1953] 
split level 14: [/input-8, 1660] 
split level 15: [/input-12, 29] 
split level 16: [/input-8, 1707] 
split level 17: [/input-8, 913] 
split level 18: [/input-8, 1698] 
split level 19: [/input-8, 1642] 
split level 20: [/input-8, 1724] 
split level 21: [/input-8, 1626] 
split level 22: [/input-8, 946] 
split level 23: [/input-8, 1716] 
split level 24: [/input-8, 1052] 
split level 25: [/input-8, 1713] 
split level 26: [/input-8, 509] 
split level 27: [/input-8, 1690] 
split level 28: [/input-8, 490] 
split level 29: [/input-8, 461] 
split level 30: [/input, 346] 
split level 31: [/input-8, 1053] 
split level 32: [/input, 3433] 
split level 33: [/input, 3016] 
split level 34: [/input-8, 1634] 
split level 35: [/input-8, 1943] 
split level 36: [/input-8, 934] 
split level 37: [/input, 2248] 
split level 38: [/input-8, 959] 
split level 39: [/input-8, 1611] 
split level 40: [/input, 936] 
split level 41: [/input, 2535] 
split level 42: [/input-8, 1641] 
split level 43: [/input-8, 1149] 
split level 44: [/input, 2485] 
split level 45: [/input-8, 933] 
split level 46: [/input-8, 932] 
split level 47: [/input-8, 1980] 
split level 48: [/input-8, 956] 
split level 49: [/input-8, 510] 
split level 50: [/input-8, 822] 
split level 51: [/input-8, 338] 
split level 52: [/input-8, 337] 
split level 53: [/input, 2456] 
split level 54: [/input-8, 897] 
split level 55: [/input, 938] 
split level 56: [/input-8, 1935] 
split level 57: [/input, 393] 
split level 58: [/input, 2231] 
split level 59: [/input-8, 467] 
split level 60: [/input, 952] 
split level 61: [/input-8, 1084] 
split level 62: [/input-8, 798] 
split level 63: [/input, 923] 
split level 64: [/input, 2455] 
split level 65: [/input, 905] 
split level 66: [/input, 907] 
split level 67: [/input, 2202] 
split level 68: [/input-8, 595] 
split level 69: [/input-8, 1649] 
split level 70: [/input, 889] 
split level 71: [/input, 2169] 
split level 72: [/input-8, 625] 
split level 73: [/input, 3533] 
split level 74: [/input, 2440] 
split level 75: [/input, 904] 
split level 76: [/input, 2471] 
split level 77: [/input, 2230] 
split level 78: [/input-8, 942] 
split level 79: [/input, 2472] 
split level 80: [/input, 2488] 
split level 81: [/input-8, 460] 
split level 82: [/input, 3466] 
split level 83: [/input, 2388] 
split level 84: [/input, 506] 
split level 85: [/input, 2186] 
split level 86: [/input, 2474] 
split level 87: [/input-8, 1780] 
split level 88: [/input, 3509] 
split level 89: [/input-8, 1310] 
split level 90: [/input, 2201] 
split level 91: [/input-8, 939] 
split level 92: [/input, 2167] 
split level 93: [/input, 2473] 
split level 94: [/input-8, 377] 
split level 95: [/input, 2441] 
split level 96: [/input, 920] 
split level 97: [/input, 2185] 
split level 98: [/input, 2168] 
split level 99: [/input-8, 604] 
split level 100: [/input, 2217] 
split level 101: [/input, 2188] 
split level 102: [/input, 2232] 
split level 103: [/input, 3000] 
split level 104: [/input, 2203] 
split level 105: [/input-8, 1523] 
split level 106: [/input, 3518] 
split level 107: [/input, 2153] 
split level 108: [/input-8, 1034] 
split level 109: [/input, 2457] 
split level 110: [/input, 2195] 
split level 111: [/input, 2184] 
split level 112: [/input, 2489] 
split level 113: [/input-8, 951] 
split level 114: [/input, 2180] 
split level 115: [/input, 949] 
split level 116: [/input, 404] 
split level 117: [/input, 2406] 
split level 118: [/input, 946] 
split level 119: [/input, 3468] 
split level 120: [/input, 2476] 
split level 121: [/input, 3017] 
split level 122: [/input-8, 179] 
split level 123: [/input-8, 330] 
split level 124: [/input, 420] 
split level 125: [/input, 2439] 
split level 126: [/input, 344] 
split level 127: [/input-8, 1043] 
split level 128: [/input, 2426] 
split level 129: [/input, 2155] 
split level 130: [/input, 2220] 
split level 131: [/input, 3516] 
split level 132: [/input-8, 345] 
split level 133: [/input, 435] 
split level 134: [/input, 2475] 
split level 135: [/input, 1350] 
split level 136: [/input, 2170] 
split level 137: [/input, 3517] 
split level 138: [/input-8, 1920] 
split level 139: [/input, 2154] 
split level 140: [/input, 3452] 
split level 141: [/input, 2218] 
split level 142: [/input, 375] 
split level 143: [/input, 2156] 
split level 144: [/input, 474] 
split level 145: [/input, 871] 
split level 146: [/input, 2490] 
split level 147: [/input, 2762] 
split level 148: [/input, 2204] 
split level 149: [/input, 891] 
split level 150: [/input, 2427] 
split level 151: [/input, 2172] 
split level 152: [/input, 2219] 
split level 153: [/input, 1331] 
split level 154: [/input-12, 32] 
split level 155: [/input, 797] 
split level 156: [/input, 2371] 
split level 157: [/input, 2442] 
split level 158: [/input, 875] 
split level 159: [/input, 955] 
split level 160: [/input, 2390] 
split level 161: [/input-8, 361] 
split level 162: [/input, 421] 
split level 163: [/input, 725] 
split level 164: [/input-8, 1598] 
split level 165: [/input, 2419] 
split level 166: [/input, 2238] 
split level 167: [/input, 2225] 
split level 168: [/input, 2505] 
split level 169: [/input, 2254] 
split level 170: [/input, 2509] 
split level 171: [/input, 971] 
split level 172: [/input, 2206] 
split level 173: [/input, 2130] 
split level 174: [/input, 2412] 
split level 175: [/input, 501] 
split level 176: [/input, 3411] 
split level 177: [/input, 2173] 
split level 178: [/input, 1317] 
split level 179: [/input-8, 459] 
split level 180: [/input, 2189] 
split level 181: [/input, 713] 
split level 182: [/input, 2468] 
split level 183: [/input, 2428] 
split level 184: [/input, 2444] 
split level 185: [/input, 2253] 
split level 186: [/input, 2250] 
split level 187: [/input, 2196] 
split level 188: [/input, 2764] 
split level 189: [/input, 925] 
split level 190: [/input, 2484] 
split level 191: [/input, 2493] 
split level 192: [/input, 3582] 
split level 193: [/input, 963] 
split level 194: [/input, 2157] 
split level 195: [/input, 3443] 
split level 196: [/input, 2236] 
split level 197: [/input, 2467] 
split level 198: [/input, 2255] 
split level 199: [/input, 2251] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5740733742713928
10 lb beta sum: 0.0, worst -0.5740779042243958
Time: prepare 0.0116    bound 0.1011    transfer 0.0008    finalize 0.0027    func 0.1189    
Accumulated time: func 0.1735    prepare 0.0218    bound 0.1552    transfer 0.0009    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.22041631) min lb tensor(-0.57407337)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010538578033447266 
BICCOS Cumulative time: 0.010538578033447266
Preprocessing time: 0.009810447692871094 Inference time: 0.0001163482666015625 Add cuts time: 5.364418029785156e-05 Cut analysis time: 0.0005581378936767578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.56485 (1), -0.56425 (1), -0.56396 (1), -0.56343 (1), -0.56291 (1), -0.56264 (1), -0.56260 (1), -0.56250 (1), -0.56241 (1), -0.56209 (1), -0.56182 (1), -0.56142 (1), -0.56141 (1), -0.56131 (1), -0.56109 (1), -0.56050 (1), -0.56041 (1), -0.56019 (1), -0.55935 (1), -0.55920 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5290    set_bounds 0.0094    solve 0.1189    add 0.0674    
Accumulated time: pickout 0.0003    decision 0.5290    set_bounds 0.0094    solve 0.1189    add 0.0674    
Current (lb-rhs): -0.5648458003997803
50 domains visited
Cumulative time: 0.8025903701782227

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 90] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 90] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 2: [/input-12, 2] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 3: [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.538240373134613
10 lb beta sum: 0.42580825090408325, worst -0.534645140171051
Time: prepare 0.0072    bound 0.1211    transfer 0.0010    finalize 0.0025    func 0.1345    
Accumulated time: func 0.3080    prepare 0.0293    bound 0.2763    transfer 0.0020    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.32642239) min lb tensor(-0.53447455)
Number of Verified Splits: 49 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.014850616455078125 
BICCOS Cumulative time: 0.02538919448852539
Preprocessing time: 0.011699676513671875 Inference time: 0.0017457008361816406 Add cuts time: 0.0011456012725830078 Cut analysis time: 0.00025963783264160156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30146 (2), -0.30141 (2), -0.30125 (2), -0.30105 (2), -0.30074 (2), -0.29957 (2), -0.29836 (2), -0.29754 (2), -0.29735 (2), -0.29699 (2), -0.29545 (2), -0.29414 (2), -0.29315 (2), -0.29302 (2), -0.29098 (2), -0.28964 (2), -0.28949 (2), -0.28700 (2), -0.28547 (2), -0.27915 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0196    set_bounds 0.0124    solve 0.1345    add 0.0789    
Accumulated time: pickout 0.0014    decision 0.5486    set_bounds 0.0218    solve 0.2535    add 0.1463    
Current (lb-rhs): -0.3014587461948395
100 domains visited
Cumulative time: 1.0642156600952148

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 90] [/input-12, 12] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 12] [/input-12, 90] [/input-12, 90] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 90] [/input-12, 2] [/input-12, 8] 
split level 3: [/input-12, 8] [/input-12, 8] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 58] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5579450130462646, worst -0.30145904421806335
10 lb beta sum: 0.5579450130462646, worst -0.3022522032260895
Time: prepare 0.0162    bound 0.1212    transfer 0.0007    finalize 0.0023    func 0.1435    
Accumulated time: func 0.4515    prepare 0.0458    bound 0.3975    transfer 0.0027    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.25812414) min lb tensor(-0.29965618)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.015769004821777344 
BICCOS Cumulative time: 0.041158199310302734
Preprocessing time: 0.011669635772705078 Inference time: 0.0024995803833007812 Add cuts time: 0.001312255859375 Cut analysis time: 0.0002875328063964844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13395 (3), -0.13366 (3), -0.13339 (3), -0.13300 (3), -0.13293 (3), -0.13230 (3), -0.12640 (3), -0.12623 (3), -0.12623 (3), -0.12470 (3), -0.12406 (3), -0.12318 (3), -0.12305 (3), -0.12285 (3), -0.12278 (3), -0.11954 (3), -0.11952 (3), -0.11563 (3), -0.11503 (3), -0.11400 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0153    solve 0.1436    add 0.0856    
Accumulated time: pickout 0.0025    decision 0.5682    set_bounds 0.0371    solve 0.3971    add 0.2318    
Current (lb-rhs): -0.13394933938980103
150 domains visited
Cumulative time: 1.3452610969543457

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 12] [/input-12, 12] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 90] 
split level 2: [/input-12, 8] [/input-12, 8] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 8] [/input-12, 2] 
split level 3: [/input-12, 58] [/input-12, 58] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 58] [/input-8, 1611] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14554953575134277
10 lb beta sum: 0.5328759551048279, worst -0.12745356559753418
Time: prepare 0.0064    bound 0.1207    transfer 0.0007    finalize 0.0020    func 0.1325    
Accumulated time: func 0.5840    prepare 0.0524    bound 0.5182    transfer 0.0034    finalize 0.0098    
all_split False
======================Cut inference begins======================
max lb tensor(0.27733207) min lb tensor(-0.12104297)
Number of Verified Splits: 165 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 5
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.022246360778808594 
BICCOS Cumulative time: 0.06340456008911133
Preprocessing time: 0.011425495147705078 Inference time: 0.008561372756958008 Add cuts time: 0.0018312931060791016 Cut analysis time: 0.00042819976806640625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03300 (4), -0.03208 (4), -0.03201 (4), -0.03173 (4), -0.03168 (4), -0.03136 (4), -0.03044 (4), -0.02474 (4), -0.02267 (4), -0.02258 (4), -0.02217 (4), -0.02204 (4), -0.02186 (4), -0.02184 (4), -0.02182 (4), -0.02118 (4), -0.02086 (4), -0.02069 (4), -0.01996 (4), -0.01977 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0159    solve 0.1326    add 0.2175    
Accumulated time: pickout 0.0035    decision 0.5876    set_bounds 0.0530    solve 0.5297    add 0.4493    
Current (lb-rhs): -0.03299856185913086
200 domains visited
Cumulative time: 1.7541391849517822

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 8] [/input-12, 90] [/input-12, 90] [/input-12, 8] [/input-12, 90] [/input-12, 8] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 2: [/input-12, 58] [/input-12, 2] [/input-12, 58] [/input-12, 58] [/input-12, 46] [/input-12, 58] [/input-12, 2] [/input-12, 46] [/input-12, 46] [/input-12, 58] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-8, 1611] [/input-12, 46] [/input-8, 1698] [/input-12, 46] [/input-12, 46] [/input-8, 1698] [/input-8, 1698] [/input-8, 1611] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06480258703231812
10 lb beta sum: 0.4834134578704834, worst -0.3616732358932495
Time: prepare 0.0067    bound 0.1376    transfer 0.0007    finalize 0.0022    func 0.1500    
Accumulated time: func 0.7340    prepare 0.0595    bound 0.6559    transfer 0.0042    finalize 0.0119    
all_split False
======================Cut inference begins======================
max lb tensor(0.48389226) min lb tensor(-0.00992048)
Number of Verified Splits: 372 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.03760933876037598 
BICCOS Cumulative time: 0.1010138988494873
Preprocessing time: 0.011536359786987305 Inference time: 0.019114017486572266 Add cuts time: 0.006026506423950195 Cut analysis time: 0.0009324550628662109
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0216    set_bounds 0.0155    solve 0.1500    add 0.0279    
Accumulated time: pickout 0.0045    decision 0.6091    set_bounds 0.0685    solve 0.6797    add 0.4772    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58]), tensor([-1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([9.33390734e-14, 1.66292921e-01, 8.28491896e-02, 3.39258462e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58, 42]), tensor([-1., -1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([9.33390734e-14, 1.66292921e-01, 8.28491896e-02, 9.06959027e-02,
        2.99729198e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58, 42]), tensor([-1., -1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([9.33390734e-14, 1.66292921e-01, 8.28491896e-02, 9.06959027e-02,
        1.70564298e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([9.33390734e-14, 1.66292921e-01, 5.50313443e-02, 3.34283262e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58, 42]), tensor([-1., -1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([9.33390734e-14, 1.66292921e-01, 5.50313443e-02, 1.03609577e-01,
        2.98136473e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58, 42]), tensor([-1., -1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([9.33390734e-14, 1.66292921e-01, 5.50313443e-02, 1.03609577e-01,
        2.12983508e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8, 42]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([9.33390734e-14, 5.35248071e-02, 3.18673670e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8, 42]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([9.33390734e-14, 5.35248071e-02, 8.20444664e-04]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8, 42]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.96858063e-01, 3.21853459e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8, 42]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.96858063e-01, 2.56054266e-03]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8]), tensor([1., 1.]), tensor([0, 0]), tensor([5.75661872e-20, 5.11566848e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  11
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4465234875679016
10 lb beta sum: 0.3564888536930084, worst -0.41555777192115784
Time: prepare 0.0005    bound 0.1383    transfer 0.0002    finalize 0.0002    func 0.1393    
Accumulated time: func 0.8733    prepare 0.0600    bound 0.7942    transfer 0.0044    finalize 0.0121    
After pruning, left:  6

Back to Regular BaB

BaB round 1
batch: 6
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 42] 
split level 1: [/input-12, 90] [/input-12, 90] [/input-12, 46] [/input-12, 2] [/input-12, 2] [/input-12, 90] 
split level 2: [/input-12, 79] [/input-12, 79] [/input-8, 1698] [/input-12, 79] [/input-12, 58] [/input-12, 2] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-8, 1690] [/input-12, 58] [/input-12, 46] [/input-12, 79] 
split level 4: [/input-8, 1698] [/input-8, 1698] [/input-8, 1611] [/input-12, 46] [/input-8, 1698] [/input-12, 58] 
split level 5: [/input-8, 1611] [/input-8, 1611] [/input-8, 1943] [/input-8, 337] [/input-8, 1611] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.519892692565918, worst -0.2880958914756775
10 lb beta sum: 0.5158848166465759, worst -0.26715123653411865
Time: prepare 0.0160    bound 0.1339    transfer 0.0014    finalize 0.0020    func 0.1566    
Accumulated time: func 1.0299    prepare 0.0763    bound 0.9281    transfer 0.0058    finalize 0.0142    
all_split False
======================Cut inference begins======================
max lb tensor(0.58029640) min lb tensor(-0.26701957)
Number of Verified Splits: 314 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.5378631949424744, worst -0.3884606957435608
10 lb beta sum: 0.6357950568199158, worst -0.26623594760894775
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 5
#cuts 4-6: 22
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.33884406089782715 
BICCOS Cumulative time: 0.43985795974731445
Preprocessing time: 0.010228395462036133 Inference time: 0.3182394504547119 Add cuts time: 0.009184837341308594 Cut analysis time: 0.0011913776397705078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26702 (6), -0.25414 (6), -0.24629 (6), -0.23347 (6), -0.22579 (6), -0.21932 (6), -0.21374 (6), -0.20568 (6), -0.19180 (6), -0.17875 (6), -0.15378 (6), -0.14883 (6), -0.14789 (6), -0.14110 (6), -0.14021 (6), -0.13489 (6), -0.12462 (6), -0.12280 (6), -0.11992 (6), -0.11974 (6), 
Length of domains: 70
Time: pickout 0.0006    decision 0.0196    set_bounds 0.0303    solve 0.1567    add 0.0116    
Accumulated time: pickout 0.0052    decision 0.6288    set_bounds 0.0987    solve 0.8364    add 0.4889    
Current (lb-rhs): -0.2670195698738098
270 domains visited
Cumulative time: 2.7353549003601074

BaB round 2
batch: 70
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1698] [/input-12, 79] [/input-8, 1698] [/input-12, 29] [/input-12, 79] [/input-8, 1698] [/input-12, 29] [/input-12, 29] [/input-8, 1698] [/input-12, 79] 
split level 1: [/input-8, 338] [/input-8, 1618] [/input-8, 1052] [/input-8, 338] [/input-8, 1618] [/input-8, 1053] [/input-8, 1698] [/input-8, 1698] [/input-8, 338] [/input-8, 1618] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.256977379322052
10 lb beta sum: 0.1566627472639084, worst -0.2531661093235016
Time: prepare 0.0056    bound 0.1369    transfer 0.0042    finalize 0.0017    func 0.1504    
Accumulated time: func 1.1803    prepare 0.0822    bound 1.0650    transfer 0.0100    finalize 0.0158    
all_split False
======================Cut inference begins======================
max lb tensor(0.25871921) min lb tensor(-0.25310558)
Number of Verified Splits: 124 of 280
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 9
#cuts 4-6: 8
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.021706819534301758 
BICCOS Cumulative time: 0.4615647792816162
Preprocessing time: 0.008341312408447266 Inference time: 0.01107168197631836 Add cuts time: 0.0016176700592041016 Cut analysis time: 0.0006761550903320312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25311 (8), -0.23314 (8), -0.22959 (8), -0.22423 (8), -0.22222 (8), -0.22105 (8), -0.20942 (8), -0.20695 (8), -0.20579 (8), -0.20519 (8), -0.20309 (8), -0.20040 (8), -0.19593 (8), -0.19553 (8), -0.19133 (8), -0.19022 (8), -0.18910 (8), -0.18803 (8), -0.18687 (8), -0.18552 (8), 
Length of domains: 156
Time: pickout 0.0019    decision 0.0179    set_bounds 0.0170    solve 0.1505    add 0.0014    
Accumulated time: pickout 0.0071    decision 0.6467    set_bounds 0.1157    solve 0.9869    add 0.4902    
Current (lb-rhs): -0.2531055808067322
426 domains visited
Cumulative time: 2.9466540813446045

BaB round 3
batch: 156
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-8, 934] [/input-12, 29] [/input-8, 1626] [/input-8, 1690] [/input-12, 29] [/input-12, 29] [/input-8, 1713] [/input-12, 29] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24481844902038574
10 lb beta sum: 0.19604286551475525, worst -0.24096202850341797
Time: prepare 0.0062    bound 0.1330    transfer 0.0009    finalize 0.0018    func 0.1439    
Accumulated time: func 1.3242    prepare 0.0886    bound 1.1981    transfer 0.0109    finalize 0.0176    
all_split False
======================Cut inference begins======================
max lb tensor(0.06092024) min lb tensor(-0.24088147)
Number of Verified Splits: 90 of 312
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 9
#cuts 4-6: 14
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.021437644958496094 
BICCOS Cumulative time: 0.4830024242401123
Preprocessing time: 0.008922338485717773 Inference time: 0.008990049362182617 Add cuts time: 0.0014553070068359375 Cut analysis time: 0.0020699501037597656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24088 (9), -0.24016 (9), -0.22760 (9), -0.22512 (9), -0.21539 (9), -0.21311 (9), -0.21311 (9), -0.21019 (9), -0.20834 (9), -0.20204 (9), -0.19983 (9), -0.19909 (9), -0.19625 (9), -0.19589 (9), -0.19546 (9), -0.19458 (9), -0.19250 (9), -0.19004 (9), -0.18970 (9), -0.18648 (9), 
Length of domains: 222
Time: pickout 0.0026    decision 0.0200    set_bounds 0.0137    solve 0.1439    add 0.0016    
Accumulated time: pickout 0.0097    decision 0.6667    set_bounds 0.1294    solve 1.1309    add 0.4918    
Current (lb-rhs): -0.24088147282600403
648 domains visited
Cumulative time: 3.1510982513427734

BaB round 4
batch: 222
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1618] [/input-8, 1698] [/input-8, 1690] [/input-8, 1052] [/input-8, 1053] [/input-8, 338] [/input-8, 1618] [/input-8, 1698] [/input-8, 934] [/input-8, 933] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24018114805221558
10 lb beta sum: 0.20862410962581635, worst -0.2364010214805603
Time: prepare 0.0085    bound 0.1419    transfer 0.0030    finalize 0.0023    func 0.1585    
Accumulated time: func 1.4827    prepare 0.0973    bound 1.3399    transfer 0.0139    finalize 0.0199    
all_split False
======================Cut inference begins======================
max lb tensor(0.05524683) min lb tensor(-0.23637015)
Number of Verified Splits: 69 of 444
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 11
#cuts 4-6: 7
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.022686004638671875 
BICCOS Cumulative time: 0.5056884288787842
Preprocessing time: 0.013048171997070312 Inference time: 0.006780147552490234 Add cuts time: 0.0021944046020507812 Cut analysis time: 0.0006632804870605469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23637 (10), -0.23536 (10), -0.22334 (10), -0.22139 (10), -0.22053 (10), -0.21796 (10), -0.21044 (10), -0.20797 (10), -0.20509 (10), -0.20509 (10), -0.20500 (10), -0.20436 (10), -0.20274 (10), -0.20269 (10), -0.20206 (10), -0.19973 (10), -0.19754 (10), -0.19691 (10), -0.18947 (10), -0.18863 (10), 
Length of domains: 375
Time: pickout 0.0033    decision 0.0234    set_bounds 0.0194    solve 0.1587    add 0.0022    
Accumulated time: pickout 0.0130    decision 0.6901    set_bounds 0.1488    solve 1.2895    add 0.4939    
Current (lb-rhs): -0.23637014627456665
1023 domains visited
Cumulative time: 3.381631374359131

BaB round 5
batch: 375
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1626] [/input-8, 1034] [/input-8, 1611] [/input-8, 1618] [/input-8, 933] [/input-8, 1943] [/input-8, 1034] [/input-8, 1618] [/input-8, 1611] [/input-8, 338] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23296016454696655
10 lb beta sum: 0.22006751596927643, worst -0.22909948229789734
Time: prepare 0.0143    bound 0.1427    transfer 0.0024    finalize 0.0036    func 0.1678    
Accumulated time: func 1.6505    prepare 0.1118    bound 1.4826    transfer 0.0163    finalize 0.0235    
all_split False
======================Cut inference begins======================
max lb tensor(0.08288765) min lb tensor(-0.22907126)
Number of Verified Splits: 89 of 750
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 5
#cuts 4-6: 17
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.03463935852050781 
BICCOS Cumulative time: 0.540327787399292
Preprocessing time: 0.021233081817626953 Inference time: 0.009350061416625977 Add cuts time: 0.0031456947326660156 Cut analysis time: 0.0009105205535888672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22907 (11), -0.22787 (11), -0.22708 (11), -0.22248 (11), -0.21594 (11), -0.21542 (11), -0.21351 (11), -0.21343 (11), -0.21273 (11), -0.21109 (11), -0.20576 (11), -0.20481 (11), -0.20311 (11), -0.20023 (11), -0.19770 (11), -0.19568 (11), -0.19422 (11), -0.19422 (11), -0.19397 (11), -0.19393 (11), 
Length of domains: 661
Time: pickout 0.0062    decision 0.0325    set_bounds 0.0322    solve 0.1680    add 0.0040    
Accumulated time: pickout 0.0192    decision 0.7226    set_bounds 0.1811    solve 1.4575    add 0.4979    
Current (lb-rhs): -0.2290712594985962
1684 domains visited
Cumulative time: 3.660454273223877

BaB round 6
batch: 661
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1713] [/input-8, 933] [/input-8, 1690] [/input-8, 1052] [/input-8, 913] [/input-8, 1713] [/input-8, 1943] [/input-8, 1953] [/input-8, 1716] [/input-8, 1713] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23024654388427734
10 lb beta sum: 0.20088866353034973, worst -0.34011876583099365
Time: prepare 0.0256    bound 0.1503    transfer 0.0092    finalize 0.0073    func 0.2017    
Accumulated time: func 1.8522    prepare 0.1376    bound 1.6329    transfer 0.0255    finalize 0.0308    
all_split False
======================Cut inference begins======================
max lb tensor(0.57682610) min lb tensor(-0.22651586)
Number of Verified Splits: 266 of 1322
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 6
#cuts 4-6: 27
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.07491946220397949 
BICCOS Cumulative time: 0.6152472496032715
Preprocessing time: 0.03939056396484375 Inference time: 0.03016376495361328 Add cuts time: 0.0040607452392578125 Cut analysis time: 0.0013043880462646484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22652 (12), -0.22526 (12), -0.22452 (12), -0.22019 (12), -0.21321 (12), -0.21259 (12), -0.21080 (12), -0.21061 (12), -0.20995 (12), -0.20880 (12), -0.20828 (12), -0.20736 (12), -0.20682 (12), -0.20301 (12), -0.20049 (12), -0.19981 (12), -0.19718 (12), -0.19574 (12), -0.19497 (12), -0.19372 (12), 
Length of domains: 1056
Time: pickout 0.0088    decision 0.0488    set_bounds 0.0563    solve 0.2020    add 0.0076    
Accumulated time: pickout 0.0280    decision 0.7714    set_bounds 0.2374    solve 1.6596    add 0.5055    
Current (lb-rhs): -0.22651585936546326
2740 domains visited
Cumulative time: 4.061746835708618

BaB round 7
batch: 1056
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1943] [/input-8, 1618] [/input-8, 1053] [/input-8, 1713] [/input-12, 61] [/input-8, 1626] [/input-8, 1953] [/input-8, 1943] [/input-8, 956] [/input-8, 1034] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22845304012298584
10 lb beta sum: 0.18206964433193207, worst -0.2247421145439148
Time: prepare 0.0411    bound 0.1802    transfer 0.0056    finalize 0.0125    func 0.2539    
Accumulated time: func 2.1061    prepare 0.1790    bound 1.8130    transfer 0.0311    finalize 0.0433    
all_split False
======================Cut inference begins======================
max lb tensor(0.77997851) min lb tensor(-0.22473350)
Number of Verified Splits: 442 of 2112
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 6
#cuts 4-6: 17
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.12496805191040039 
BICCOS Cumulative time: 0.7402153015136719
Preprocessing time: 0.06446671485900879 Inference time: 0.052034616470336914 Add cuts time: 0.007311105728149414 Cut analysis time: 0.0011556148529052734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22473 (13), -0.22341 (13), -0.22274 (13), -0.21764 (13), -0.21136 (13), -0.20971 (13), -0.20889 (13), -0.20773 (13), -0.20707 (13), -0.20674 (13), -0.20563 (13), -0.20523 (13), -0.20478 (13), -0.20114 (13), -0.19978 (13), -0.19855 (13), -0.19682 (13), -0.19398 (13), -0.19309 (13), -0.19168 (13), 
Length of domains: 1670
Time: pickout 0.0161    decision 0.2265    set_bounds 0.0907    solve 0.2544    add 0.0171    
Accumulated time: pickout 0.0441    decision 0.9979    set_bounds 0.3281    solve 1.9140    add 0.5226    
Current (lb-rhs): -0.22473350167274475
4410 domains visited
Cumulative time: 4.7970898151397705

BaB round 8
batch: 1670
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1149] [/input-8, 1953] [/input-8, 1713] [/input-8, 1953] [/input-12, 61] [/input-8, 1611] [/input-8, 1713] [/input-12, 61] [/input-12, 61] [/input-8, 1149] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22238922119140625
10 lb beta sum: 0.22090432047843933, worst -0.21867245435714722
Time: prepare 0.0694    bound 0.2496    transfer 0.0365    finalize 0.0203    func 0.3981    
Accumulated time: func 2.5042    prepare 0.2486    bound 2.0627    transfer 0.0676    finalize 0.0636    
all_split False
======================Cut inference begins======================
max lb tensor(0.75063467) min lb tensor(-0.21866599)
Number of Verified Splits: 1221 of 3340
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 7
#cuts 4-6: 15
#cuts 7-9: 11
#cuts >= 20: 0
BICCOS time: 0.43872642517089844 
BICCOS Cumulative time: 1.1789417266845703
Preprocessing time: 0.273759126663208 Inference time: 0.1447300910949707 Add cuts time: 0.018706083297729492 Cut analysis time: 0.0015311241149902344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21867 (14), -0.21729 (14), -0.21684 (14), -0.21152 (14), -0.21033 (14), -0.20785 (14), -0.20651 (14), -0.20369 (14), -0.20246 (14), -0.20188 (14), -0.20175 (14), -0.20098 (14), -0.20085 (14), -0.20064 (14), -0.20001 (14), -0.19959 (14), -0.19906 (14), -0.19886 (14), -0.19584 (14), -0.19493 (14), 
Length of domains: 2119
Time: pickout 0.0306    decision 0.1026    set_bounds 0.1425    solve 0.3989    add 0.0070    
Accumulated time: pickout 0.0747    decision 1.1005    set_bounds 0.4705    solve 2.3129    add 0.5296    
Current (lb-rhs): -0.2186659872531891
6529 domains visited
Cumulative time: 5.933029413223267

BaB round 9
batch: 2119
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 345] [/input-8, 934] [/input-8, 934] [/input-8, 345] [/input-8, 1053] [/input-8, 1707] [/input-8, 1716] [/input, 3016] [/input-8, 939] [/input-8, 1716] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2165815830230713
10 lb beta sum: 0.2792275846004486, worst -0.2128591239452362
Time: prepare 0.0883    bound 0.3967    transfer 0.0089    finalize 0.0274    func 0.5505    
Accumulated time: func 3.0547    prepare 0.3372    bound 2.4594    transfer 0.0765    finalize 0.0910    
all_split False
======================Cut inference begins======================
max lb tensor(0.52746791) min lb tensor(-0.21284947)
Number of Verified Splits: 663 of 4238
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 7
#cuts 4-6: 26
#cuts 7-9: 23
#cuts >= 20: 0
BICCOS time: 0.39214348793029785 
BICCOS Cumulative time: 1.5710852146148682
Preprocessing time: 0.1327681541442871 Inference time: 0.23994159698486328 Add cuts time: 0.01685619354248047 Cut analysis time: 0.002577543258666992
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21285 (15), -0.21101 (15), -0.20984 (15), -0.20806 (15), -0.20571 (15), -0.20534 (15), -0.20441 (15), -0.20351 (15), -0.20121 (15), -0.20052 (15), -0.19837 (15), -0.19780 (15), -0.19718 (15), -0.19695 (15), -0.19657 (15), -0.19597 (15), -0.19582 (15), -0.19402 (15), -0.19372 (15), -0.19349 (15), 
Length of domains: 3575
Time: pickout 0.0328    decision 0.1214    set_bounds 0.1823    solve 0.5520    add 0.0215    
Accumulated time: pickout 0.1075    decision 1.2218    set_bounds 0.6528    solve 2.8649    add 0.5511    
Current (lb-rhs): -0.2128494679927826
10104 domains visited
Cumulative time: 7.246150016784668

BaB round 10
batch: 3575
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1707] [/input-8, 932] [/input-8, 1716] [/input-8, 1713] [/input-8, 1690] [/input-8, 1943] [/input, 2231] [/input-8, 1690] [/input-8, 1707] [/input-8, 1943] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20838075876235962
10 lb beta sum: 0.270259290933609, worst -0.3046438694000244
Time: prepare 0.1588    bound 0.6236    transfer 0.0443    finalize 0.2060    func 1.0815    
Accumulated time: func 4.1362    prepare 0.4962    bound 3.0830    transfer 0.1208    finalize 0.2971    
all_split False
======================Cut inference begins======================
max lb tensor(0.54941684) min lb tensor(-0.20453846)
Number of Verified Splits: 1192 of 7150
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 93.
#cuts 1-3: 8
#cuts 4-6: 60
#cuts 7-9: 25
#cuts >= 20: 0
BICCOS time: 0.43304920196533203 
BICCOS Cumulative time: 2.0041344165802
Preprocessing time: 0.22331786155700684 Inference time: 0.1772317886352539 Add cuts time: 0.028275489807128906 Cut analysis time: 0.004224061965942383
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20454 (16), -0.20402 (16), -0.20345 (16), -0.20275 (16), -0.20226 (16), -0.20163 (16), -0.19831 (16), -0.19698 (16), -0.19653 (16), -0.19648 (16), -0.19599 (16), -0.19594 (16), -0.19532 (16), -0.19524 (16), -0.19499 (16), -0.19478 (16), -0.19419 (16), -0.19204 (16), -0.19130 (16), -0.19110 (16), 
Length of domains: 5958
Time: pickout 0.0656    decision 0.2012    set_bounds 0.3066    solve 1.0840    add 0.0387    
Accumulated time: pickout 0.1731    decision 1.4230    set_bounds 0.9594    solve 3.9489    add 0.5898    
Current (lb-rhs): -0.2045384645462036
16062 domains visited
Cumulative time: 9.395710468292236

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1953] [/input-8, 1943] [/input-8, 1943] [/input, 3016] [/input-12, 61] [/input, 2231] [/input, 2471] [/input-12, 61] [/input-8, 1610] [/input, 393] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20402079820632935
10 lb beta sum: 0.2590218484401703, worst -0.3071227967739105
Time: prepare 0.1873    bound 0.7217    transfer 0.0205    finalize 0.0531    func 1.0376    
Accumulated time: func 5.1738    prepare 0.6838    bound 3.8048    transfer 0.1413    finalize 0.3502    
all_split False
======================Cut inference begins======================
max lb tensor(0.62587029) min lb tensor(-0.20398846)
Number of Verified Splits: 1689 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 92.
#cuts 1-3: 10
#cuts 4-6: 45
#cuts 7-9: 36
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.7807128429412842 
BICCOS Cumulative time: 2.7848472595214844
Preprocessing time: 0.26623082160949707 Inference time: 0.2520158290863037 Add cuts time: 0.25820279121398926 Cut analysis time: 0.004263401031494141
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20454 (16), -0.20399 (17), -0.20334 (17), -0.20275 (16), -0.20226 (16), -0.20153 (17), -0.19830 (17), -0.19694 (17), -0.19653 (16), -0.19642 (17), -0.19594 (16), -0.19590 (17), -0.19524 (17), -0.19519 (17), -0.19492 (17), -0.19469 (17), -0.19408 (17), -0.19204 (16), -0.19130 (16), -0.19099 (17), 
Length of domains: 8365
Time: pickout 0.0580    decision 0.2264    set_bounds 0.5524    solve 1.0400    add 0.0282    
Accumulated time: pickout 0.2310    decision 1.6494    set_bounds 1.5118    solve 4.9889    add 0.6180    
Current (lb-rhs): -0.2045384645462036
22565 domains visited
current_vram/total_varm: 11.8GB/99.9GB, batch_size increase to 8192
Cumulative time: 12.110029935836792

BaB round 12
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3000] [/input-8, 1943] [/input-12, 61] [/input-8, 1610] [/input-8, 1626] [/input-8, 1724] [/input-8, 1943] [/input-8, 933] [/input-8, 1707] [/input-8, 1943] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20453888177871704
10 lb beta sum: 0.3600192666053772, worst -0.24948811531066895
Time: prepare 0.3884    bound 1.3534    transfer 0.1249    finalize 0.1176    func 2.0922    
Accumulated time: func 7.2661    prepare 1.0725    bound 5.1582    transfer 0.2662    finalize 0.4678    
all_split False
======================Cut inference begins======================
max lb tensor(0.86020613) min lb tensor(-0.20452440)
Number of Verified Splits: 4776 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 16
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 1.3907558917999268 
BICCOS Cumulative time: 4.175603151321411
Preprocessing time: 0.5242340564727783 Inference time: 0.7721283435821533 Add cuts time: 0.09303450584411621 Cut analysis time: 0.0013589859008789062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20452 (17), -0.20273 (17), -0.20222 (17), -0.19969 (18), -0.19755 (18), -0.19653 (17), -0.19592 (17), -0.19575 (18), -0.19539 (18), -0.19404 (18), -0.19358 (18), -0.19270 (18), -0.19259 (18), -0.19207 (18), -0.19195 (17), -0.19123 (17), -0.19094 (18), -0.19085 (18), -0.19033 (18), -0.19012 (18), 
Length of domains: 11781
Time: pickout 0.1211    decision 0.4473    set_bounds 0.9204    solve 2.3291    add 0.0545    
Accumulated time: pickout 0.3521    decision 2.0967    set_bounds 2.4322    solve 7.3180    add 0.6725    
Current (lb-rhs): -0.20452439785003662
34173 domains visited
current_vram/total_varm: 24.6GB/99.9GB, batch_size increase to 16384
Cumulative time: 17.445524215698242

BaB round 13
batch: 11781
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1943] [/input-8, 1943] [/input, 3000] [/input-8, 1716] [/input-8, 625] [/input, 2231] [/input-8, 1943] [/input, 3000] [/input-8, 1649] [/input-8, 1649] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20027583837509155
10 lb beta sum: 0.8522800803184509, worst -0.20023342967033386
Time: prepare 0.5652    bound 1.3326    transfer 0.2405    finalize 0.1514    func 2.7274    
Accumulated time: func 9.9934    prepare 1.6380    bound 6.4908    transfer 0.5067    finalize 0.6192    
all_split False
======================Cut inference begins======================
max lb tensor(0.86520469) min lb tensor(-0.20022500)
Number of Verified Splits: 12011 of 23562
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 24
#cuts >= 20: 0
BICCOS time: 3.0847368240356445 
BICCOS Cumulative time: 7.260339975357056
Preprocessing time: 0.7630376815795898 Inference time: 2.1500566005706787 Add cuts time: 0.17088627815246582 Cut analysis time: 0.0007562637329101562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20022 (18), -0.19844 (18), -0.19792 (18), -0.19356 (19), -0.19322 (19), -0.19312 (18), -0.19199 (19), -0.19165 (18), -0.19142 (19), -0.19132 (18), -0.19115 (19), -0.19092 (18), -0.19058 (18), -0.18934 (19), -0.18877 (18), -0.18804 (19), -0.18767 (18), -0.18696 (18), -0.18639 (19), -0.18624 (19), 
Length of domains: 11551
Time: pickout 0.2484    decision 0.9207    set_bounds 1.3288    solve 2.7323    add 0.0509    
Accumulated time: pickout 0.6005    decision 3.0173    set_bounds 3.7610    solve 10.0503    add 0.7234    
Current (lb-rhs): -0.20022499561309814
45724 domains visited
Cumulative time: 25.973167657852173

BaB round 14
batch: 11551
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1649] [/input, 393] [/input, 2457] [/input-8, 625] [/input, 2231] [/input-8, 1724] [/input-8, 913] [/input-12, 61] [/input-8, 625] [/input-8, 345] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19449740648269653
10 lb beta sum: 2.1808431148529053, worst -0.17164969444274902
Time: prepare 0.5613    bound 1.2974    transfer 0.2297    finalize 0.4714    func 2.7136    
Accumulated time: func 12.7070    prepare 2.1997    bound 7.7882    transfer 0.7364    finalize 1.0906    
all_split False
======================Cut inference begins======================
max lb tensor(1.08497834) min lb tensor(-0.17158520)
Number of Verified Splits: 20645 of 23102
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 4.669760465621948 
BICCOS Cumulative time: 11.930100440979004
Preprocessing time: 0.7681229114532471 Inference time: 3.6516778469085693 Add cuts time: 0.24948835372924805 Cut analysis time: 0.00047135353088378906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17159 (19), -0.17075 (20), -0.17050 (20), -0.16977 (19), -0.16969 (19), -0.16919 (20), -0.16897 (19), -0.16867 (20), -0.16842 (20), -0.16787 (19), -0.16745 (19), -0.16660 (20), -0.16549 (20), -0.16382 (20), -0.16376 (19), -0.16318 (19), -0.16225 (20), -0.16221 (20), -0.16201 (19), -0.16141 (19), 
Length of domains: 2457
Time: pickout 0.1950    decision 0.6438    set_bounds 1.3444    solve 2.7185    add 0.0189    
Accumulated time: pickout 0.7955    decision 3.6611    set_bounds 5.1054    solve 12.7688    add 0.7424    
Current (lb-rhs): -0.17158520221710205
48181 domains visited
Cumulative time: 35.80947542190552

BaB round 15
batch: 2457
splitting decisions: 
split level 0: [/input-8, 913] [/input-8, 1649] [/input-12, 61] [/input-8, 913] [/input-8, 1649] [/input-8, 1953] [/input-8, 913] [/input-8, 913] [/input-8, 913] [/input-8, 913] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.190454363822937

all verified at 4th iter
Time: prepare 0.1108    bound 0.0648    transfer 0.0396    finalize 0.0304    func 0.2769    
Accumulated time: func 12.9839    prepare 2.3107    bound 7.8530    transfer 0.7761    finalize 1.1210    
all_split False
======================Cut inference begins======================
max lb tensor(0.33624560) min lb tensor(0.00090408)
Number of Verified Splits: 4914 of 4914
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.16020536422729492 
BICCOS Cumulative time: 12.090305805206299
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0538    decision 0.1433    set_bounds 0.4095    solve 0.2778    add 0.0008    
Accumulated time: pickout 0.8493    decision 3.8044    set_bounds 5.5149    solve 13.0467    add 0.7432    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
48181 domains visited
Cumulative time: 36.891836166381836


Properties batch 4, size 1
Remaining timeout: 159.0168423652649
Verifying property 4 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.39791632]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
        -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.39791632]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 953
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 248
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1222
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010061264038085938
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.39791440963745117
10 lb beta sum: 0.0, worst -0.3979206085205078
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0541    transfer 0.0001    finalize 0.0001    func 0.0546    
Accumulated time: func 0.0546    prepare 0.0002    bound 0.0541    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 2] 
split level 3: [/input-12, 90] 
split level 4: [/input-12, 61] 
split level 5: [/input-12, 46] 
split level 6: [/input-12, 4] 
split level 7: [/input-12, 79] 
split level 8: [/input-12, 12] 
split level 9: [/input-12, 32] 
split level 10: [/input-12, 34] 
split level 11: [/input-12, 8] 
split level 12: [/input-8, 913] 
split level 13: [/input-12, 29] 
split level 14: [/input-8, 1697] 
split level 15: [/input-8, 171] 
split level 16: [/input-8, 1953] 
split level 17: [/input, 966] 
split level 18: [/input-8, 933] 
split level 19: [/input-8, 1698] 
split level 20: [/input-8, 1716] 
split level 21: [/input-8, 942] 
split level 22: [/input-8, 934] 
split level 23: [/input, 949] 
split level 24: [/input, 3509] 
split level 25: [/input-8, 180] 
split level 26: [/input-8, 1707] 
split level 27: [/input-8, 1690] 
split level 28: [/input-8, 1642] 
split level 29: [/input, 2485] 
split level 30: [/input-8, 1634] 
split level 31: [/input-8, 179] 
split level 32: [/input-8, 1724] 
split level 33: [/input, 952] 
split level 34: [/input-8, 1626] 
split level 35: [/input-8, 939] 
split level 36: [/input-8, 241] 
split level 37: [/input-8, 1206] 
split level 38: [/input, 938] 
split level 39: [/input-8, 1053] 
split level 40: [/input-8, 181] 
split level 41: [/input, 2474] 
split level 42: [/input, 936] 
split level 43: [/input-8, 1052] 
split level 44: [/input-8, 1947] 
split level 45: [/input, 2459] 
split level 46: [/input, 2231] 
split level 47: [/input-8, 1780] 
split level 48: [/input-8, 337] 
split level 49: [/input, 923] 
split level 50: [/input-8, 361] 
split level 51: [/input, 2455] 
split level 52: [/input, 3533] 
split level 53: [/input-8, 2001] 
split level 54: [/input-8, 338] 
split level 55: [/input, 3518] 
split level 56: [/input-8, 345] 
split level 57: [/input, 1941] 
split level 58: [/input, 506] 
split level 59: [/input, 2488] 
split level 60: [/input, 3016] 
split level 61: [/input, 2456] 
split level 62: [/input-8, 1765] 
split level 63: [/input-8, 1084] 
split level 64: [/input, 2230] 
split level 65: [/input, 2202] 
split level 66: [/input, 2473] 
split level 67: [/input, 2471] 
split level 68: [/input, 3516] 
split level 69: [/input-8, 1939] 
split level 70: [/input, 957] 
split level 71: [/input, 2232] 
split level 72: [/input, 2490] 
split level 73: [/input-8, 186] 
split level 74: [/input, 2388] 
split level 75: [/input, 2535] 
split level 76: [/input-8, 232] 
split level 77: [/input, 2472] 
split level 78: [/input, 2476] 
split level 79: [/input, 2220] 
split level 80: [/input, 2489] 
split level 81: [/input, 958] 
split level 82: [/input, 420] 
split level 83: [/input, 2475] 
split level 84: [/input-8, 959] 
split level 85: [/input, 2203] 
split level 86: [/input, 2218] 
split level 87: [/input, 941] 
split level 88: [/input, 404] 
split level 89: [/input, 2494] 
split level 90: [/input, 904] 
split level 91: [/input, 2406] 
split level 92: [/input-8, 330] 
split level 93: [/input-8, 299] 
split level 94: [/input-8, 1943] 
split level 95: [/input-8, 951] 
split level 96: [/input, 907] 
split level 97: [/input, 2219] 
split level 98: [/input, 3517] 
split level 99: [/input, 2180] 
split level 100: [/input, 2201] 
split level 101: [/input, 2217] 
split level 102: [/input, 393] 
split level 103: [/input-8, 950] 
split level 104: [/input, 963] 
split level 105: [/input, 2371] 
split level 106: [/input-8, 1598] 
split level 107: [/input, 946] 
split level 108: [/input, 2167] 
split level 109: [/input-8, 1523] 
split level 110: [/input, 2148] 
split level 111: [/input, 955] 
split level 112: [/input, 2254] 
split level 113: [/input, 971] 
split level 114: [/input, 920] 
split level 115: [/input-8, 1980] 
split level 116: [/input, 2184] 
split level 117: [/input, 2491] 
split level 118: [/input, 2457] 
split level 119: [/input, 1316] 
split level 120: [/input, 2238] 
split level 121: [/input, 2188] 
split level 122: [/input-8, 897] 
split level 123: [/input, 905] 
split level 124: [/input, 435] 
split level 125: [/input, 2835] 
split level 126: [/input, 2439] 
split level 127: [/input, 2186] 
split level 128: [/input, 2204] 
split level 129: [/input-8, 1807] 
split level 130: [/input-8, 240] 
split level 131: [/input, 1333] 
split level 132: [/input, 2253] 
split level 133: [/input, 474] 
split level 134: [/input, 2744] 
split level 135: [/input, 2542] 
split level 136: [/input, 2169] 
split level 137: [/input, 2509] 
split level 138: [/input, 2236] 
split level 139: [/input, 1978] 
split level 140: [/input, 2221] 
split level 141: [/input, 501] 
split level 142: [/input, 2185] 
split level 143: [/input, 2168] 
split level 144: [/input, 1013] 
split level 145: [/input-8, 242] 
split level 146: [/input, 1349] 
split level 147: [/input, 421] 
split level 148: [/input, 3411] 
split level 149: [/input, 925] 
split level 150: [/input, 3017] 
split level 151: [/input, 2484] 
split level 152: [/input, 2505] 
split level 153: [/input-8, 209] 
split level 154: [/input, 2493] 
split level 155: [/input, 2477] 
split level 156: [/input, 1015] 
split level 157: [/input, 730] 
split level 158: [/input-8, 217] 
split level 159: [/input, 1979] 
split level 160: [/input, 2205] 
split level 161: [/input, 2270] 
split level 162: [/input, 344] 
split level 163: [/input, 2239] 
split level 164: [/input, 2251] 
split level 165: [/input, 1350] 
split level 166: [/input, 2196] 
split level 167: [/input, 2206] 
split level 168: [/input, 2762] 
split level 169: [/input, 2255] 
split level 170: [/input-8, 204] 
split level 171: [/input-8, 213] 
split level 172: [/input, 2156] 
split level 173: [/input, 3468] 
split level 174: [/input, 3582] 
split level 175: [/input, 2390] 
split level 176: [/input, 2444] 
split level 177: [/input, 2883] 
split level 178: [/input, 2468] 
split level 179: [/input, 2250] 
split level 180: [/input, 2764] 
split level 181: [/input, 2189] 
split level 182: [/input, 2153] 
split level 183: [/input, 714] 
split level 184: [/input, 2170] 
split level 185: [/input, 2442] 
split level 186: [/input, 2412] 
split level 187: [/input-8, 212] 
split level 188: [/input-8, 941] 
split level 189: [/input, 2524] 
split level 190: [/input, 69] 
split level 191: [/input, 985] 
split level 192: [/input, 3466] 
split level 193: [/input-8, 196] 
split level 194: [/input, 2284] 
split level 195: [/input, 713] 
split level 196: [/input, 2269] 
split level 197: [/input, 2426] 
split level 198: [/input, 1317] 
split level 199: [/input, 2461] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3978002071380615
10 lb beta sum: 0.0, worst -0.39780545234680176
Time: prepare 0.0113    bound 0.0990    transfer 0.0024    finalize 0.0026    func 0.1179    
Accumulated time: func 0.1724    prepare 0.0215    bound 0.1531    transfer 0.0025    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.31647527) min lb tensor(-0.39780021)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010309934616088867 
BICCOS Cumulative time: 0.010309934616088867
Preprocessing time: 0.009874105453491211 Inference time: 0.00014448165893554688 Add cuts time: 6.508827209472656e-05 Cut analysis time: 0.0002262592315673828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.38674 (1), -0.38674 (1), -0.38668 (1), -0.38634 (1), -0.38617 (1), -0.38610 (1), -0.38575 (1), -0.38535 (1), -0.38523 (1), -0.38440 (1), -0.38419 (1), -0.38388 (1), -0.38387 (1), -0.38366 (1), -0.38343 (1), -0.38311 (1), -0.38193 (1), -0.38098 (1), -0.38006 (1), -0.37950 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5243    set_bounds 0.0085    solve 0.1180    add 0.1818    
Accumulated time: pickout 0.0003    decision 0.5243    set_bounds 0.0085    solve 0.1180    add 0.1818    
Current (lb-rhs): -0.38673949241638184
50 domains visited
Cumulative time: 0.9131162166595459

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 2] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 2] [/input-12, 58] 
split level 1: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 2] 
split level 2: [/input-12, 90] [/input-12, 90] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 46] [/input-12, 90] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 46] [/input-12, 46] [/input-12, 12] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3332233428955078
10 lb beta sum: 0.5662729740142822, worst -0.30741745233535767
Time: prepare 0.0074    bound 0.1214    transfer 0.0007    finalize 0.0024    func 0.1346    
Accumulated time: func 0.3070    prepare 0.0292    bound 0.2744    transfer 0.0032    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.15882254) min lb tensor(-0.30725250)
Number of Verified Splits: 19 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.01418614387512207 
BICCOS Cumulative time: 0.024496078491210938
Preprocessing time: 0.01211857795715332 Inference time: 0.0008420944213867188 Add cuts time: 0.0003457069396972656 Cut analysis time: 0.0008797645568847656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11357 (2), -0.11342 (2), -0.11322 (2), -0.11193 (2), -0.11029 (2), -0.11015 (2), -0.10999 (2), -0.10957 (2), -0.10901 (2), -0.10530 (2), -0.10117 (2), -0.09838 (2), -0.09653 (2), -0.09401 (2), -0.09350 (2), -0.09349 (2), -0.09193 (2), -0.09116 (2), -0.09087 (2), -0.08940 (2), 
Length of domains: 50
Time: pickout 0.0016    decision 0.0262    set_bounds 0.0173    solve 0.1347    add 0.0933    
Accumulated time: pickout 0.0019    decision 0.5505    set_bounds 0.0257    solve 0.2526    add 0.2752    
Current (lb-rhs): -0.11356556415557861
100 domains visited
Cumulative time: 1.2006628513336182

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 90] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 46] [/input-12, 46] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 46] [/input-12, 90] [/input-12, 90] 
split level 2: [/input-12, 12] [/input-12, 12] [/input-12, 46] [/input-12, 46] [/input-12, 12] [/input-12, 12] [/input-12, 46] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 12] [/input-12, 12] [/input-12, 32] [/input-12, 32] [/input-12, 12] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11405730247497559
10 lb beta sum: 0.7808092832565308, worst -0.031609535217285156
Time: prepare 0.0061    bound 0.1188    transfer 0.0007    finalize 0.0020    func 0.1308    
Accumulated time: func 0.4378    prepare 0.0355    bound 0.3932    transfer 0.0039    finalize 0.0071    
all_split False
======================Cut inference begins======================
max lb tensor(0.19251746) min lb tensor(-0.02890414)
Number of Verified Splits: 390 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.0345759391784668 
BICCOS Cumulative time: 0.059072017669677734
Preprocessing time: 0.011450529098510742 Inference time: 0.01743030548095703 Add cuts time: 0.005344390869140625 Cut analysis time: 0.00035071372985839844
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0192    set_bounds 0.0153    solve 0.1309    add 0.0191    
Accumulated time: pickout 0.0029    decision 0.5697    set_bounds 0.0411    solve 0.3835    add 0.2943    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2, 90]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 2.14383349e-01, 1.12839803e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2, 90]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 2.14383349e-01, 8.70394558e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2]), tensor([-1.,  1.]), tensor([0, 0]), tensor([5.75661872e-20, 1.19286701e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2, 90]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.98125586e-01, 1.07339725e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2, 90]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.98125586e-01, 1.50142778e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2, 90]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.24944612e-01, 9.74415988e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2, 90]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.24944612e-01, 9.76672769e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  7
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20906639099121094
10 lb beta sum: 0.7455818057060242, worst -0.12259626388549805
Time: prepare 0.0004    bound 0.1296    transfer 0.0002    finalize 0.0002    func 0.1304    
Accumulated time: func 0.5682    prepare 0.0360    bound 0.5228    transfer 0.0041    finalize 0.0073    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 90] 
split level 2: [/input-12, 61] 
split level 3: [/input-12, 46] 
split level 4: [/input-12, 4] 
split level 5: [/input-12, 79] 
split level 6: [/input-12, 12] 
split level 7: [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 1.5397400856018066, worst 0.061812639236450195

all verified at 0th iter
Time: prepare 0.0095    bound 0.0050    transfer 0.0030    finalize 0.0013    func 0.0205    
Accumulated time: func 0.5887    prepare 0.0459    bound 0.5278    transfer 0.0071    finalize 0.0085    
all_split False
======================Cut inference begins======================
max lb tensor(1.16300106) min lb tensor(0.06181264)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.0063762664794921875 
BICCOS Cumulative time: 0.06544828414916992
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0006    decision 0.0226    set_bounds 0.0213    solve 0.0206    add 0.0002    
Accumulated time: pickout 0.0034    decision 0.5922    set_bounds 0.0624    solve 0.4041    add 0.2945    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
Cumulative time: 1.6414577960968018


Properties batch 5, size 1
Remaining timeout: 157.1150825023651
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 157.11499428749084
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 157.1149604320526
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 157.1149387359619
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 42.8851 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 128, vnnlib ID: 128 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.50119209, -19.03553009, -15.22840977, -15.80129242, -14.75272465,
         -15.83410263, -14.41858292, -16.04555511, -18.78121948, -17.07835579]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [566]; unstable size 566; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 277, 1, 566] with unstable size 276 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 566] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 566] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [276]; unstable size 276; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 276] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 276] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.08655131,  2.27971649, -0.70720446,  0.21668977, -1.24121737,
          0.14262724, -0.35904777,  2.26373243,  0.64331293]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.50119209, -19.03553009, -15.22840977, -15.80129242, -14.75272465,
         -15.83410263, -14.41858292, -16.04555511, -18.78121948, -17.07835579]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.99808788, -18.69559097, -14.74748039, -15.45328903, -14.09618664,
          -15.44491768, -14.31151581, -15.40262127, -18.31984901, -16.73563576],
         [-15.99808788, -18.69559097, -14.74748039, -15.45328903, -14.09618664,
          -15.44491768, -14.31151581, -15.40262127, -18.31984901, -16.73563576]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.43596458, -0.21532917,  1.09110546]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0656 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 129, vnnlib ID: 129 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.34526443, -29.08344650, -25.10714531, -24.64510918, -24.53378105,
         -24.57837105, -26.13238144, -26.32098007, -25.42654800, -28.22369576]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [589]; unstable size 589; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 279, 1, 589] with unstable size 278 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 589] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 589] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [278]; unstable size 278; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 278] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 278] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.90512067,  2.61772943, -0.68264651, -0.29089296, -1.19851446,
          0.45634848,  0.37348247, -0.85104156,  1.92439890]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.34526443, -29.08344650, -25.10714531, -24.64510918, -24.53378105,
         -24.57837105, -26.13238144, -26.32098007, -25.42654800, -28.22369576]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.34526443, -29.08345222, -25.10714912, -24.64510918, -24.53377914,
          -24.57837105, -26.13237953, -26.32098007, -25.42654991, -28.22369576],
         [-25.34526443, -29.08345222, -25.10714912, -24.64510918, -24.53377914,
          -24.57837105, -26.13237953, -26.32098007, -25.42654991, -28.22369576]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.76689339,  0.52877808,  0.06673813, -0.04459190,  0.84817886]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0445 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 130, vnnlib ID: 130 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.30639458, -26.81990623, -22.08092117, -22.72490120, -20.55580521,
         -22.10051918, -22.94018555, -20.62528801, -29.47222137, -25.84111977]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [482]; unstable size 482; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 210, 1, 482] with unstable size 209 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 482] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 482] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [209]; unstable size 209; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 209] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 209] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.94138575,  2.94850779, -1.16203547,  0.27302718, -2.38051224,
         -0.17814445, -2.52197599,  5.83368635,  2.26016068]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.30639458, -26.81990623, -22.08092117, -22.72490120, -20.55580521,
         -22.10051918, -22.94018555, -20.62528801, -29.47222137, -25.84111977]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.30639648, -26.81990433, -22.08091927, -22.72489929, -20.55580711,
          -22.10051918, -22.94018173, -20.62528992, -29.47222328, -25.84112358],
         [-25.30639648, -26.81990433, -22.08091927, -22.72489929, -20.55580711,
          -22.10051918, -22.94018173, -20.62528992, -29.47222328, -25.84112358]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01959991, -1.54471207,  0.83966255, -1.47522926]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0771 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 131, vnnlib ID: 131 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.38834953, -31.51884651, -29.35291672, -31.02542496, -30.66601372,
         -31.39447021, -32.53964615, -32.87446594, -24.85302734, -31.34247780]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [590]; unstable size 590; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 208, 1, 590] with unstable size 207 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 590] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 590] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [207]; unstable size 207; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 207] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 207] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.28638136, 5.51830339, 2.94133258, 4.63216543, 3.96261144, 4.82937717,
         6.07474232, 5.84654808, 5.52136803]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0284 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 132, vnnlib ID: 132 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-35.68236923, -33.13178635, -40.98384094, -41.72174835, -40.35508347,
         -42.91672897, -41.79254532, -41.54734802, -35.50236130, -34.07597733]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [595]; unstable size 595; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 233, 1, 595] with unstable size 232 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 595] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 595] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [232]; unstable size 232; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 232] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.10743809,  5.94193077,  6.68529749,  5.16697359,  7.68069887,
          6.76294947,  6.25847864,  0.80630016, -0.04625964]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-35.68236923, -33.13178635, -40.98384094, -41.72174835, -40.35508347,
         -42.91672897, -41.79254532, -41.54734802, -35.50236130, -34.07597733]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.70it/s]100%|██████████| 1/1 [00:00<00:00,  8.70it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-34.74093628, -32.63446808, -39.92547989, -40.66252518, -39.21731186,
          -41.79864883, -40.77612686, -40.37427521, -34.67422867, -33.05698013]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.42251205]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1177 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 41.18775177001953
alpha/beta optimization time: 1.2420876026153564
initial alpha-crown bounds: tensor([[ 1.18385553,  6.04057741,  6.78337193,  5.29151726,  7.78996563,
          6.85149002,  6.37167501,  0.88482332, -0.00952530]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.009525299072265625
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.57202458381653
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.57197856903076
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.57195162773132
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.57193088531494
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.5719120502472
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.57189345359802
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.57187461853027
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.57185459136963
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.57183623313904
Verifying property 8 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.00952530]], device='cuda:0') need to verify.
Model prediction is: tensor([-35.68236923, -33.13178635, -40.98384094, -41.72174835, -40.35508347,
        -42.91672897, -41.79254532, -41.54734802, -35.50236130, -34.07597733],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.00952530]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 595
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 227
Node /15 input 0: size torch.Size([100]) unstable 16
-----------------
# of unstable neurons: 838
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010204315185546875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.009524345397949219
10 lb beta sum: 0.0, worst -0.009534239768981934
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0540    transfer 0.0001    finalize 0.0001    func 0.0545    
Accumulated time: func 0.0545    prepare 0.0002    bound 0.0540    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] 
split level 1: [/input-12, 59] 
split level 2: [/input-8, 156] 
split level 3: [/input-12, 12] 
split level 4: [/input-12, 15] 
split level 5: [/input-8, 1123] 
split level 6: [/input-8, 1122] 
split level 7: [/input-8, 157] 
split level 8: [/input-12, 89] 
split level 9: [/input-12, 36] 
split level 10: [/input-8, 1971] 
split level 11: [/input-12, 10] 
split level 12: [/input-8, 1763] 
split level 13: [/input-12, 2] 
split level 14: [/input-8, 1627] 
split level 15: [/input-8, 164] 
split level 16: [/input-8, 1628] 
split level 17: [/input-8, 147] 
split level 18: [/input-8, 793] 
split level 19: [/input-8, 1626] 
split level 20: [/input-8, 1755] 
split level 21: [/input-8, 1050] 
split level 22: [/input-8, 1067] 
split level 23: [/input-8, 1762] 
split level 24: [/input, 3177] 
split level 25: [/input, 904] 
split level 26: [/input-8, 598] 
split level 27: [/input-8, 814] 
split level 28: [/input-8, 747] 
split level 29: [/input-8, 308] 
split level 30: [/input, 3467] 
split level 31: [/input, 3210] 
split level 32: [/input-8, 748] 
split level 33: [/input-12, 13] 
split level 34: [/input-8, 1756] 
split level 35: [/input, 3146] 
split level 36: [/input-12, 8] 
split level 37: [/input-8, 1386] 
split level 38: [/input-12, 24] 
split level 39: [/input-8, 806] 
split level 40: [/input, 876] 
split level 41: [/input-8, 1500] 
split level 42: [/input-8, 1963] 
split level 43: [/input-8, 1517] 
split level 44: [/input-8, 749] 
split level 45: [/input-8, 1969] 
split level 46: [/input-8, 1968] 
split level 47: [/input-8, 1387] 
split level 48: [/input, 3464] 
split level 49: [/input-8, 1683] 
split level 50: [/input-8, 1119] 
split level 51: [/input-8, 1498] 
split level 52: [/input, 150] 
split level 53: [/input-8, 1561] 
split level 54: [/input-8, 588] 
split level 55: [/input-8, 1085] 
split level 56: [/input, 980] 
split level 57: [/input-8, 1943] 
split level 58: [/input, 3211] 
split level 59: [/input-8, 628] 
split level 60: [/input, 4001] 
split level 61: [/input-8, 1395] 
split level 62: [/input, 923] 
split level 63: [/input, 1671] 
split level 64: [/input, 3181] 
split level 65: [/input, 3499] 
split level 66: [/input-8, 973] 
split level 67: [/input-8, 1086] 
split level 68: [/input, 3441] 
split level 69: [/input, 380] 
split level 70: [/input-8, 1388] 
split level 71: [/input-8, 478] 
split level 72: [/input-8, 949] 
split level 73: [/input, 3196] 
split level 74: [/input-8, 1314] 
split level 75: [/input, 3302] 
split level 76: [/input, 857] 
split level 77: [/input-8, 1333] 
split level 78: [/input-8, 1390] 
split level 79: [/input-8, 1620] 
split level 80: [/input, 369] 
split level 81: [/input-8, 213] 
split level 82: [/input, 454] 
split level 83: [/input, 2266] 
split level 84: [/input, 3539] 
split level 85: [/input, 1442] 
split level 86: [/input, 2267] 
split level 87: [/input-8, 482] 
split level 88: [/input-8, 828] 
split level 89: [/input-8, 1033] 
split level 90: [/input, 882] 
split level 91: [/input, 2489] 
split level 92: [/input-8, 1385] 
split level 93: [/input-8, 1389] 
split level 94: [/input, 387] 
split level 95: [/input, 2278] 
split level 96: [/input, 2788] 
split level 97: [/input, 874] 
split level 98: [/input-8, 1929] 
split level 99: [/input, 2261] 
split level 100: [/input-8, 1393] 
split level 101: [/input, 883] 
split level 102: [/input, 839] 
split level 103: [/input, 833] 
split level 104: [/input, 983] 
split level 105: [/input, 2538] 
split level 106: [/input, 3483] 
split level 107: [/input, 2277] 
split level 108: [/input-8, 902] 
split level 109: [/input, 899] 
split level 110: [/input-8, 214] 
split level 111: [/input, 2518] 
split level 112: [/input, 2724] 
split level 113: [/input, 151] 
split level 114: [/input, 996] 
split level 115: [/input-8, 975] 
split level 116: [/input-8, 1973] 
split level 117: [/input, 3545] 
split level 118: [/input, 840] 
split level 119: [/input-8, 901] 
split level 120: [/input, 866] 
split level 121: [/input-8, 1820] 
split level 122: [/input-8, 1397] 
split level 123: [/input, 2534] 
split level 124: [/input-8, 1952] 
split level 125: [/input-8, 1214] 
split level 126: [/input, 982] 
split level 127: [/input, 3044] 
split level 128: [/input-8, 1644] 
split level 129: [/input, 2523] 
split level 130: [/input, 2274] 
split level 131: [/input, 314] 
split level 132: [/input, 2264] 
split level 133: [/input, 999] 
split level 134: [/input-8, 1315] 
split level 135: [/input-8, 1641] 
split level 136: [/input, 4039] 
split level 137: [/input, 175] 
split level 138: [/input-8, 1621] 
split level 139: [/input, 2725] 
split level 140: [/input, 2275] 
split level 141: [/input, 2260] 
split level 142: [/input-8, 1115] 
split level 143: [/input, 421] 
split level 144: [/input, 2487] 
split level 145: [/input, 2262] 
split level 146: [/input, 2281] 
split level 147: [/input, 978] 
split level 148: [/input, 2259] 
split level 149: [/input-8, 1757] 
split level 150: [/input, 2537] 
split level 151: [/input, 313] 
split level 152: [/input, 3041] 
split level 153: [/input, 2279] 
split level 154: [/input-8, 141] 
split level 155: [/input, 2282] 
split level 156: [/input, 405] 
split level 157: [/input, 2471] 
split level 158: [/input-8, 153] 
split level 159: [/input, 422] 
split level 160: [/input, 2244] 
split level 161: [/input, 1004] 
split level 162: [/input, 2143] 
split level 163: [/input-8, 911] 
split level 164: [/input-8, 202] 
split level 165: [/input, 2127] 
split level 166: [/input, 893] 
split level 167: [/input, 2215] 
split level 168: [/input, 822] 
split level 169: [/input-8, 1049] 
split level 170: [/input, 2539] 
split level 171: [/input-8, 201] 
split level 172: [/input, 3299] 
split level 173: [/input, 2752] 
split level 174: [/input, 2257] 
split level 175: [/input, 933] 
split level 176: [/input-8, 359] 
split level 177: [/input, 2542] 
split level 178: [/input, 3303] 
split level 179: [/input, 886] 
split level 180: [/input, 2273] 
split level 181: [/input, 2541] 
split level 182: [/input, 2533] 
split level 183: [/input, 2284] 
split level 184: [/input, 817] 
split level 185: [/input, 323] 
split level 186: [/input, 28] 
split level 187: [/input, 3480] 
split level 188: [/input, 819] 
split level 189: [/input, 76] 
split level 190: [/input, 2470] 
split level 191: [/input, 2519] 
split level 192: [/input, 2545] 
split level 193: [/input, 2706] 
split level 194: [/input, 3421] 
split level 195: [/input, 2111] 
split level 196: [/input-8, 1579] 
split level 197: [/input, 901] 
split level 198: [/input, 2228] 
split level 199: [/input, 1329] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.00944530963897705
10 lb beta sum: 0.0, worst -0.0094221830368042
Time: prepare 0.0117    bound 0.0997    transfer 0.0011    finalize 0.0027    func 0.1179    
Accumulated time: func 0.1724    prepare 0.0219    bound 0.1537    transfer 0.0012    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.24686611) min lb tensor(-0.00941050)
Number of Verified Splits: 56 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01312875747680664 
BICCOS Cumulative time: 0.01312875747680664
Preprocessing time: 0.009917736053466797 Inference time: 0.002103090286254883 Add cuts time: 0.0009255409240722656 Cut analysis time: 0.0001823902130126953
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5269    set_bounds 0.0088    solve 0.1180    add 0.0099    
Accumulated time: pickout 0.0003    decision 0.5269    set_bounds 0.0088    solve 0.1180    add 0.0099    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71]), tensor([-1.]), tensor([0]), tensor([2.75708067e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71]), tensor([1.]), tensor([0]), tensor([2.75708067e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.0808720588684082

all verified at 0th iter
Time: prepare 0.0003    bound 0.0041    transfer 0.0001    finalize 0.0001    func 0.0046    
Accumulated time: func 0.1770    prepare 0.0222    bound 0.1578    transfer 0.0013    finalize 0.0030    
After pruning, left:  0

Back to Regular BaB

Result: safe in 2.4568 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 133, vnnlib ID: 133 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-36.45841980, -44.35070419, -34.18724823, -36.62807846, -41.51102829,
         -36.81817245, -39.17654037, -38.88699341, -42.89539719, -42.96294785]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [414]; unstable size 414; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 108, 1, 414] with unstable size 107 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 414] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 414] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [107]; unstable size 107; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 107] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 107] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.80952764, 9.28114986, 1.87684739, 6.70495224, 2.04463530, 4.42981815,
         4.07691669, 7.95990896, 7.91283607]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0655 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 134, vnnlib ID: 134 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.47599602, -23.78956413, -23.91806030, -25.75347519, -25.58520699,
         -27.02601433, -25.19198990, -27.62649536, -20.75136948, -23.69546700]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [952]; unstable size 952; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 268, 1, 952] with unstable size 267 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 952] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 952] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [267]; unstable size 267; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 267] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 267] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.86406422,  0.76336527,  2.41063404,  2.30971575,  3.50218749,
          1.55449712,  4.16273117, -1.88281870,  0.94847751]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.47599602, -23.78956413, -23.91806030, -25.75347519, -25.58520699,
         -27.02601433, -25.19198990, -27.62649536, -20.75136948, -23.69546700]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.47599602, -23.78956413, -23.91806030, -25.75347519, -25.58520699,
          -27.02601433, -25.19198990, -27.62649536, -20.75136948, -23.69546700]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.72462654]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.15396857,  1.01111114,  1.01111114,  ...,  1.02698421,
             1.04285717,  1.10634947],
           [ 1.02698421,  0.94761908,  0.94761908,  ...,  1.12222254,
             1.12222254,  1.16984153],
           [ 0.99523818,  0.91587305,  0.86825401,  ...,  1.12222254,
             1.13809550,  1.16984153],
           ...,
           [-0.14761895, -0.41746020, -0.43333322,  ..., -0.36984116,
            -0.33809513, -0.41746020],
           [-0.30634910, -0.56031746, -0.57619047,  ..., -0.68730158,
            -0.54444444, -0.36984116],
           [-0.22698402, -0.33809513, -0.40158719,  ..., -0.59206349,
            -0.32222211, -0.14761895]],

          [[ 1.20772982,  1.06280196,  1.06280196,  ...,  1.07890511,
             1.09500813,  1.15942061],
           [ 1.07890511,  0.99838978,  0.99838978,  ...,  1.17552364,
             1.17552364,  1.22383285],
           [ 1.04669893,  0.96618366,  0.91787446,  ...,  1.17552364,
             1.19162667,  1.22383285],
           ...,
           [-0.11272129, -0.38647330, -0.40257636,  ..., -0.33816412,
            -0.30595800, -0.38647330],
           [-0.27375188, -0.53140092, -0.54750401,  ..., -0.66022539,
            -0.51529789, -0.33816412],
           [-0.19323659, -0.30595800, -0.37037024,  ..., -0.56360704,
            -0.28985494, -0.11272129]],

          [[ 1.26086998,  1.12593722,  1.12593722,  ...,  1.14092970,
             1.15592217,  1.21589243],
           [ 1.14092970,  1.06596720,  1.06596720,  ...,  1.23088503,
             1.23088503,  1.27586246],
           [ 1.11094475,  1.03598225,  0.99100471,  ...,  1.23088503,
             1.24587750,  1.27586246],
           ...,
           [ 0.03148442, -0.22338814, -0.23838064,  ..., -0.17841063,
            -0.14842562, -0.22338814],
           [-0.11844061, -0.35832080, -0.37331331,  ..., -0.47826082,
            -0.34332830, -0.17841063],
           [-0.04347810, -0.14842562, -0.20839565,  ..., -0.38830581,
            -0.13343313,  0.03148442]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0540 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 135, vnnlib ID: 135 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.20746422, -11.40287113, -17.07642365, -16.43939400, -16.29893875,
         -16.93239021, -18.25842094, -16.83162689, -14.06174088, -12.06176949]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [503]; unstable size 503; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 222, 1, 503] with unstable size 221 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 503] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 503] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [221]; unstable size 221; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 221] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 221] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.14191961,  3.64040279,  2.98625946,  2.87868166,  3.34063101,
          4.70360136,  3.04852533,  1.37090325, -0.29452467]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.20746422, -11.40287113, -17.07642365, -16.43939400, -16.29893875,
         -16.93239021, -18.25842094, -16.83162689, -14.06174088, -12.06176949]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.65it/s]100%|██████████| 1/1 [00:00<00:00,  8.64it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.27663136, -10.99063969, -16.15567589, -15.54304314, -15.45358086,
          -16.03116608, -17.35605240, -15.81715107, -13.23739529, -11.18209076]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.19145107]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1183 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 25.241046905517578
alpha/beta optimization time: 1.2504210472106934
initial alpha-crown bounds: tensor([[ 3.18642282,  3.68983555,  3.03233528,  2.93258429,  3.39427662,
          4.75412798,  3.10958767,  1.40874934, -0.26687264]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.2668726444244385
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.56185245513916
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.56181359291077
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.56179094314575
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.56177020072937
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.56175112724304
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.5617320537567
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.56171298027039
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.56169390678406
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.5616750717163
Verifying property 8 with 1 instances.
##### Instance 135 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.26687264]], device='cuda:0') need to verify.
Model prediction is: tensor([-16.20746422, -11.40287113, -17.07642365, -16.43939400, -16.29893875,
        -16.93239021, -18.25842094, -16.83162689, -14.06174088, -12.06176949],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.26687264]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 503
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 219
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 745
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010085105895996094
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.26687145233154297
10 lb beta sum: 0.0, worst -0.2668790817260742
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0537    transfer 0.0001    finalize 0.0001    func 0.0542    
Accumulated time: func 0.0542    prepare 0.0002    bound 0.0537    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 20] 
split level 3: [/input-12, 32] 
split level 4: [/input-12, 89] 
split level 5: [/input-8, 164] 
split level 6: [/input-12, 12] 
split level 7: [/input-12, 97] 
split level 8: [/input-8, 156] 
split level 9: [/input-12, 36] 
split level 10: [/input-12, 2] 
split level 11: [/input-8, 163] 
split level 12: [/input-12, 79] 
split level 13: [/input-12, 10] 
split level 14: [/input-8, 419] 
split level 15: [/input, 406] 
split level 16: [/input-12, 24] 
split level 17: [/input-8, 313] 
split level 18: [/input-8, 1626] 
split level 19: [/input-8, 1634] 
split level 20: [/input-8, 469] 
split level 21: [/input-8, 1321] 
split level 22: [/input, 3478] 
split level 23: [/input-8, 166] 
split level 24: [/input-8, 403] 
split level 25: [/input, 391] 
split level 26: [/input-8, 1618] 
split level 27: [/input, 936] 
split level 28: [/input, 407] 
split level 29: [/input-12, 13] 
split level 30: [/input-8, 477] 
split level 31: [/input-8, 915] 
split level 32: [/input-8, 1068] 
split level 33: [/input-8, 592] 
split level 34: [/input-8, 405] 
split level 35: [/input-8, 932] 
split level 36: [/input, 916] 
split level 37: [/input, 886] 
split level 38: [/input-8, 906] 
split level 39: [/input-8, 269] 
split level 40: [/input-8, 745] 
split level 41: [/input-8, 1610] 
split level 42: [/input-8, 942] 
split level 43: [/input-8, 844] 
split level 44: [/input-8, 1298] 
split level 45: [/input, 3496] 
split level 46: [/input-8, 802] 
split level 47: [/input-8, 1677] 
split level 48: [/input-8, 1069] 
split level 49: [/input, 3493] 
split level 50: [/input-8, 1651] 
split level 51: [/input-8, 1355] 
split level 52: [/input-8, 1625] 
split level 53: [/input, 887] 
split level 54: [/input-8, 1590] 
split level 55: [/input-8, 46] 
split level 56: [/input-8, 1614] 
split level 57: [/input-8, 1572] 
split level 58: [/input, 932] 
split level 59: [/input-8, 783] 
split level 60: [/input-8, 474] 
split level 61: [/input, 3464] 
split level 62: [/input-8, 1554] 
split level 63: [/input-8, 1658] 
split level 64: [/input-8, 951] 
split level 65: [/input, 3556] 
split level 66: [/input-8, 1040] 
split level 67: [/input-8, 1230] 
split level 68: [/input, 358] 
split level 69: [/input, 3494] 
split level 70: [/input-8, 843] 
split level 71: [/input-8, 1779] 
split level 72: [/input, 1942] 
split level 73: [/input-8, 406] 
split level 74: [/input, 996] 
split level 75: [/input-8, 1599] 
split level 76: [/input, 501] 
split level 77: [/input-8, 1393] 
split level 78: [/input, 931] 
split level 79: [/input-8, 286] 
split level 80: [/input-8, 777] 
split level 81: [/input, 1012] 
split level 82: [/input-8, 810] 
split level 83: [/input-8, 1678] 
split level 84: [/input-8, 910] 
split level 85: [/input, 1304] 
split level 86: [/input-8, 1356] 
split level 87: [/input-8, 489] 
split level 88: [/input, 504] 
split level 89: [/input, 2952] 
split level 90: [/input-8, 846] 
split level 91: [/input-8, 948] 
split level 92: [/input-8, 1497] 
split level 93: [/input-8, 1296] 
split level 94: [/input-8, 957] 
split level 95: [/input-8, 1666] 
split level 96: [/input-8, 909] 
split level 97: [/input, 87] 
split level 98: [/input-8, 1498] 
split level 99: [/input, 1303] 
split level 100: [/input-8, 1367] 
split level 101: [/input-8, 1315] 
split level 102: [/input, 506] 
split level 103: [/input, 3002] 
split level 104: [/input-8, 1780] 
split level 105: [/input, 510] 
split level 106: [/input, 2709] 
split level 107: [/input, 3221] 
split level 108: [/input-8, 395] 
split level 109: [/input, 3021] 
split level 110: [/input, 982] 
split level 111: [/input-8, 1360] 
split level 112: [/input, 2327] 
split level 113: [/input, 3570] 
split level 114: [/input, 3576] 
split level 115: [/input, 3577] 
split level 116: [/input, 1926] 
split level 117: [/input, 3572] 
split level 118: [/input-8, 1935] 
split level 119: [/input, 1013] 
split level 120: [/input, 1912] 
split level 121: [/input, 2278] 
split level 122: [/input-8, 1306] 
split level 123: [/input, 921] 
split level 124: [/input, 997] 
split level 125: [/input, 2916] 
split level 126: [/input, 2885] 
split level 127: [/input-8, 1170] 
split level 128: [/input, 4035] 
split level 129: [/input, 2887] 
split level 130: [/input, 1014] 
split level 131: [/input-8, 219] 
split level 132: [/input, 505] 
split level 133: [/input, 998] 
split level 134: [/input, 2215] 
split level 135: [/input-8, 1696] 
split level 136: [/input, 2715] 
split level 137: [/input, 2275] 
split level 138: [/input-8, 301] 
split level 139: [/input, 508] 
split level 140: [/input, 2214] 
split level 141: [/input-8, 371] 
split level 142: [/input, 1925] 
split level 143: [/input, 2072] 
split level 144: [/input, 2264] 
split level 145: [/input, 4034] 
split level 146: [/input-8, 33] 
split level 147: [/input-8, 1743] 
split level 148: [/input-8, 812] 
split level 149: [/input, 2707] 
split level 150: [/input, 509] 
split level 151: [/input-8, 913] 
split level 152: [/input, 1990] 
split level 153: [/input, 507] 
split level 154: [/input-8, 329] 
split level 155: [/input-8, 263] 
split level 156: [/input, 23] 
split level 157: [/input-8, 1091] 
split level 158: [/input, 2550] 
split level 159: [/input, 2549] 
split level 160: [/input-8, 39] 
split level 161: [/input, 2087] 
split level 162: [/input, 3020] 
split level 163: [/input, 1883] 
split level 164: [/input, 2535] 
split level 165: [/input-8, 1504] 
split level 166: [/input, 2263] 
split level 167: [/input, 3252] 
split level 168: [/input, 1334] 
split level 169: [/input, 206] 
split level 170: [/input, 2231] 
split level 171: [/input, 3582] 
split level 172: [/input, 1460] 
split level 173: [/input, 2519] 
split level 174: [/input-8, 835] 
split level 175: [/input, 2280] 
split level 176: [/input, 1867] 
split level 177: [/input, 3436] 
split level 178: [/input, 1989] 
split level 179: [/input, 873] 
split level 180: [/input-8, 1687] 
split level 181: [/input, 281] 
split level 182: [/input, 2959] 
split level 183: [/input, 2233] 
split level 184: [/input, 1851] 
split level 185: [/input, 1924] 
split level 186: [/input, 853] 
split level 187: [/input, 113] 
split level 188: [/input-8, 775] 
split level 189: [/input, 2281] 
split level 190: [/input-8, 496] 
split level 191: [/input, 2830] 
split level 192: [/input, 648] 
split level 193: [/input, 3578] 
split level 194: [/input, 2056] 
split level 195: [/input-8, 210] 
split level 196: [/input, 875] 
split level 197: [/input, 2893] 
split level 198: [/input, 2213] 
split level 199: [/input-8, 326] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2667815685272217
10 lb beta sum: 0.0, worst -0.2667880058288574
Time: prepare 0.0117    bound 0.1014    transfer 0.0008    finalize 0.0027    func 0.1193    
Accumulated time: func 0.1734    prepare 0.0221    bound 0.1552    transfer 0.0009    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(-0.07024956) min lb tensor(-0.26677966)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.00993204116821289 
BICCOS Cumulative time: 0.00993204116821289
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25838 (1), -0.25774 (1), -0.25718 (1), -0.25708 (1), -0.25700 (1), -0.25652 (1), -0.25638 (1), -0.25605 (1), -0.25590 (1), -0.25549 (1), -0.25533 (1), -0.25421 (1), -0.25330 (1), -0.25261 (1), -0.25239 (1), -0.25139 (1), -0.25081 (1), -0.25010 (1), -0.25007 (1), -0.24905 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5372    set_bounds 0.0092    solve 0.1193    add 0.0911    
Accumulated time: pickout 0.0003    decision 0.5372    set_bounds 0.0092    solve 0.1193    add 0.0911    
Current (lb-rhs): -0.2583826780319214
50 domains visited
Cumulative time: 0.8275260925292969

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 20] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 68] [/input-12, 71] [/input-12, 71] [/input-12, 71] 
split level 1: [/input-12, 20] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 20] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 32] [/input-12, 32] [/input-12, 20] [/input-12, 20] [/input-12, 32] [/input-12, 20] [/input-12, 32] [/input-12, 20] [/input-12, 20] [/input-12, 20] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24015355110168457
10 lb beta sum: 0.0, worst -0.24006664752960205
Time: prepare 0.0124    bound 0.0994    transfer 0.0007    finalize 0.0023    func 0.1174    
Accumulated time: func 0.2909    prepare 0.0348    bound 0.2546    transfer 0.0016    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.11847210) min lb tensor(-0.24003911)
Number of Verified Splits: 26 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.014821529388427734 
BICCOS Cumulative time: 0.024753570556640625
Preprocessing time: 0.012737274169921875 Inference time: 0.0011589527130126953 Add cuts time: 0.0004544258117675781 Cut analysis time: 0.00047087669372558594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07131 (2), -0.07064 (2), -0.07049 (2), -0.07038 (2), -0.07000 (2), -0.06965 (2), -0.06955 (2), -0.06910 (2), -0.06897 (2), -0.06893 (2), -0.06755 (2), -0.06706 (2), -0.06704 (2), -0.06643 (2), -0.06605 (2), -0.06561 (2), -0.06427 (2), -0.06400 (2), -0.06399 (2), -0.06116 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0199    set_bounds 0.0128    solve 0.1175    add 0.1208    
Accumulated time: pickout 0.0014    decision 0.5570    set_bounds 0.0221    solve 0.2369    add 0.2119    
Current (lb-rhs): -0.07130563259124756
100 domains visited
Cumulative time: 1.1146266460418701

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-12, 20] [/input-12, 20] [/input-12, 68] [/input-12, 20] [/input-12, 68] [/input-12, 68] [/input-12, 20] [/input-12, 20] [/input-12, 20] 
split level 1: [/input-12, 20] [/input-12, 68] [/input-12, 68] [/input-12, 20] [/input-12, 68] [/input-12, 20] [/input-12, 20] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 89] [/input-12, 32] [/input-12, 89] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 89] [/input-12, 89] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05367136001586914
10 lb beta sum: 0.5872474312782288, worst -0.020370006561279297
Time: prepare 0.0069    bound 0.1220    transfer 0.0007    finalize 0.0022    func 0.1351    
Accumulated time: func 0.4260    prepare 0.0420    bound 0.3766    transfer 0.0023    finalize 0.0074    
all_split False
======================Cut inference begins======================
max lb tensor(0.29137933) min lb tensor(-0.01566327)
Number of Verified Splits: 395 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.03728437423706055 
BICCOS Cumulative time: 0.06203794479370117
Preprocessing time: 0.01160287857055664 Inference time: 0.01692938804626465 Add cuts time: 0.008260250091552734 Cut analysis time: 0.0004918575286865234
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0201    set_bounds 0.0153    solve 0.1352    add 0.0194    
Accumulated time: pickout 0.0026    decision 0.5771    set_bounds 0.0374    solve 0.3720    add 0.2313    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 20]), tensor([-1., -1.]), tensor([0, 0]), tensor([4.51719773e-11, 4.44176644e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 20, 68]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([4.51719773e-11, 1.21495530e-01, 1.13126084e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 20, 68]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([4.51719773e-11, 1.21495530e-01, 5.40118366e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 12, 20]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([4.51719773e-11, 4.10551280e-02, 9.10214782e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 12, 20]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([4.51719773e-11, 4.10551280e-02, 1.15993544e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 12, 20]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([4.51719773e-11, 2.54620779e-02, 1.02482989e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 12, 20]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([4.51719773e-11, 2.54620779e-02, 1.19366452e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  7
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1328139305114746
10 lb beta sum: 0.582409143447876, worst -0.08267420530319214
Time: prepare 0.0004    bound 0.1303    transfer 0.0002    finalize 0.0002    func 0.1311    
Accumulated time: func 0.5571    prepare 0.0424    bound 0.5069    transfer 0.0024    finalize 0.0075    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] 
split level 1: [/input-12, 32] 
split level 2: [/input-12, 89] 
split level 3: [/input-12, 12] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 36] 
split level 6: [/input-8, 163] 
split level 7: [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493062496185303, worst 0.0011346936225891113

all verified at 0th iter
Time: prepare 0.0109    bound 0.0051    transfer 0.0017    finalize 0.0011    func 0.0205    
Accumulated time: func 0.5776    prepare 0.0538    bound 0.5120    transfer 0.0041    finalize 0.0087    
all_split False
======================Cut inference begins======================
max lb tensor(0.44128519) min lb tensor(0.00113469)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.006964206695556641 
BICCOS Cumulative time: 0.06900215148925781
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.0223    set_bounds 0.0243    solve 0.0205    add 0.0003    
Accumulated time: pickout 0.0030    decision 0.5994    set_bounds 0.0617    solve 0.3926    add 0.2316    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
Cumulative time: 1.5664269924163818

Result: safe in 3.1549 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 136, vnnlib ID: 136 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.03878975, -27.34531403, -23.53932953, -24.00347710, -23.92297554,
         -24.22077560, -25.12296104, -25.69461441, -24.00042725, -27.72712517]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [585]; unstable size 585; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 196, 1, 585] with unstable size 195 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 585] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 585] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [195]; unstable size 195; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 195] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 195] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.34309196, 0.87681031, 1.16531014, 1.17494845, 1.34177256, 2.16514802,
         2.73782158, 1.01523066, 4.69900179]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0726 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 137, vnnlib ID: 137 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.16277122, -21.12893295, -16.04788589, -16.93409729, -16.10508919,
         -17.10481453, -15.34734917, -18.76787186, -21.06470108, -20.31587410]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [438]; unstable size 438; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 276, 1, 438] with unstable size 275 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 438] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 438] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [275]; unstable size 275; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 275] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 275] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.22114420,  4.09420490, -0.54178745,  0.56779760, -0.32674521,
          0.62577611,  1.91951931,  3.76403713,  3.22747231]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.16277122, -21.12893295, -16.04788589, -16.93409729, -16.10508919,
         -17.10481453, -15.34734917, -18.76787186, -21.06470108, -20.31587410]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.53it/s]100%|██████████| 1/1 [00:00<00:00,  8.52it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.04311180, -21.13624954, -15.83210659, -16.94238091, -16.04538727,
          -17.10531425, -15.73818588, -18.64249992, -21.03587151, -20.26518440],
         [-20.04311180, -21.13624954, -15.83210659, -16.94238091, -16.04538727,
          -17.10531425, -15.73818588, -18.64249992, -21.03587151, -20.26518440]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.09392071, 0.30720139]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1204 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 17.213314056396484
alpha/beta optimization time: 1.2548344135284424
initial alpha-crown bounds: tensor([[ 3.30038834,  4.16773224, -0.48484492,  0.61480588, -0.26430136,
          0.68667233,  2.01555777,  3.85170579,  3.32559872]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.4848449230194092
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.56172680854797
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.56168627738953
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.56166219711304
Verifying property 2 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.48484492]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.16277122, -21.12893295, -16.04788589, -16.93409729, -16.10508919,
        -17.10481453, -15.34734917, -18.76787186, -21.06470108, -20.31587410],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.48484492]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 438
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 269
Node /15 input 0: size torch.Size([100]) unstable 17
-----------------
# of unstable neurons: 724
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010228157043457031
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.48484206199645996
10 lb beta sum: 0.0, worst -0.4848470091819763
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0541    transfer 0.0001    finalize 0.0001    func 0.0545    
Accumulated time: func 0.0545    prepare 0.0002    bound 0.0541    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 59] 
split level 3: [/input-12, 72] 
split level 4: [/input-12, 56] 
split level 5: [/input-12, 61] 
split level 6: [/input-12, 12] 
split level 7: [/input-12, 7] 
split level 8: [/input-12, 34] 
split level 9: [/input-12, 6] 
split level 10: [/input-8, 1635] 
split level 11: [/input-12, 68] 
split level 12: [/input-8, 474] 
split level 13: [/input-8, 1619] 
split level 14: [/input-8, 811] 
split level 15: [/input-8, 157] 
split level 16: [/input-8, 1636] 
split level 17: [/input-8, 91] 
split level 18: [/input-8, 1249] 
split level 19: [/input-8, 804] 
split level 20: [/input-8, 1259] 
split level 21: [/input-8, 1939] 
split level 22: [/input-8, 476] 
split level 23: [/input-8, 1725] 
split level 24: [/input-8, 44] 
split level 25: [/input-8, 1580] 
split level 26: [/input-12, 20] 
split level 27: [/input-8, 99] 
split level 28: [/input-8, 1718] 
split level 29: [/input-8, 1963] 
split level 30: [/input-8, 803] 
split level 31: [/input-8, 418] 
split level 32: [/input-8, 161] 
split level 33: [/input-8, 92] 
split level 34: [/input-8, 269] 
split level 35: [/input-12, 97] 
split level 36: [/input-8, 932] 
split level 37: [/input-8, 757] 
split level 38: [/input-8, 1954] 
split level 39: [/input-8, 406] 
split level 40: [/input-8, 98] 
split level 41: [/input-8, 54] 
split level 42: [/input-8, 1644] 
split level 43: [/input-8, 1962] 
split level 44: [/input-8, 428] 
split level 45: [/input-8, 146] 
split level 46: [/input-8, 481] 
split level 47: [/input-8, 1645] 
split level 48: [/input-8, 1581] 
split level 49: [/input-8, 1258] 
split level 50: [/input-8, 43] 
split level 51: [/input-8, 482] 
split level 52: [/input-8, 914] 
split level 53: [/input-8, 38] 
split level 54: [/input-8, 153] 
split level 55: [/input-8, 284] 
split level 56: [/input-8, 107] 
split level 57: [/input-8, 1241] 
split level 58: [/input-8, 426] 
split level 59: [/input-8, 755] 
split level 60: [/input-8, 28] 
split level 61: [/input-8, 1929] 
split level 62: [/input-8, 483] 
split level 63: [/input-8, 922] 
split level 64: [/input-8, 1568] 
split level 65: [/input, 2988] 
split level 66: [/input-8, 785] 
split level 67: [/input-8, 347] 
split level 68: [/input-8, 441] 
split level 69: [/input-8, 1650] 
split level 70: [/input-8, 491] 
split level 71: [/input-8, 1556] 
split level 72: [/input-8, 790] 
split level 73: [/input-8, 1579] 
split level 74: [/input, 3054] 
split level 75: [/input-8, 40] 
split level 76: [/input-8, 401] 
split level 77: [/input-8, 465] 
split level 78: [/input-8, 404] 
split level 79: [/input-8, 931] 
split level 80: [/input, 172] 
split level 81: [/input-8, 722] 
split level 82: [/input-8, 166] 
split level 83: [/input-8, 899] 
split level 84: [/input-8, 66] 
split level 85: [/input-8, 505] 
split level 86: [/input-8, 1614] 
split level 87: [/input-8, 588] 
split level 88: [/input-8, 1187] 
split level 89: [/input-8, 397] 
split level 90: [/input-8, 333] 
split level 91: [/input-8, 145] 
split level 92: [/input-8, 1027] 
split level 93: [/input-8, 1936] 
split level 94: [/input-8, 186] 
split level 95: [/input-8, 749] 
split level 96: [/input-8, 41] 
split level 97: [/input-8, 490] 
split level 98: [/input-8, 65] 
split level 99: [/input-8, 913] 
split level 100: [/input-8, 357] 
split level 101: [/input-8, 1248] 
split level 102: [/input-8, 612] 
split level 103: [/input-8, 1931] 
split level 104: [/input-8, 63] 
split level 105: [/input-8, 1283] 
split level 106: [/input, 378] 
split level 107: [/input-8, 1603] 
split level 108: [/input-8, 1242] 
split level 109: [/input-8, 25] 
split level 110: [/input-8, 312] 
split level 111: [/input-8, 1238] 
split level 112: [/input-8, 449] 
split level 113: [/input, 3383] 
split level 114: [/input, 3034] 
split level 115: [/input-8, 1193] 
split level 116: [/input-8, 342] 
split level 117: [/input-8, 1395] 
split level 118: [/input, 3038] 
split level 119: [/input-8, 1706] 
split level 120: [/input, 3167] 
split level 121: [/input-8, 1602] 
split level 122: [/input, 1124] 
split level 123: [/input-8, 177] 
split level 124: [/input-8, 1240] 
split level 125: [/input, 3300] 
split level 126: [/input, 1332] 
split level 127: [/input-8, 1596] 
split level 128: [/input-8, 1243] 
split level 129: [/input-8, 101] 
split level 130: [/input-8, 1224] 
split level 131: [/input-8, 1693] 
split level 132: [/input, 3161] 
split level 133: [/input-8, 1529] 
split level 134: [/input-8, 1642] 
split level 135: [/input-8, 1214] 
split level 136: [/input, 1196] 
split level 137: [/input-8, 236] 
split level 138: [/input-8, 326] 
split level 139: [/input-8, 169] 
split level 140: [/input-8, 2018] 
split level 141: [/input-8, 716] 
split level 142: [/input-8, 138] 
split level 143: [/input-8, 1167] 
split level 144: [/input-8, 587] 
split level 145: [/input-8, 1545] 
split level 146: [/input-8, 139] 
split level 147: [/input, 1450] 
split level 148: [/input-8, 175] 
split level 149: [/input-8, 1331] 
split level 150: [/input, 1080] 
split level 151: [/input, 669] 
split level 152: [/input, 476] 
split level 153: [/input-8, 248] 
split level 154: [/input, 501] 
split level 155: [/input-8, 1164] 
split level 156: [/input, 1400] 
split level 157: [/input-8, 2047] 
split level 158: [/input-8, 440] 
split level 159: [/input-8, 589] 
split level 160: [/input-8, 1694] 
split level 161: [/input, 1334] 
split level 162: [/input-8, 1175] 
split level 163: [/input, 1021] 
split level 164: [/input, 4068] 
split level 165: [/input, 1686] 
split level 166: [/input, 2613] 
split level 167: [/input-8, 204] 
split level 168: [/input, 3286] 
split level 169: [/input-8, 238] 
split level 170: [/input-8, 1699] 
split level 171: [/input, 377] 
split level 172: [/input, 974] 
split level 173: [/input-8, 395] 
split level 174: [/input-8, 1225] 
split level 175: [/input, 218] 
split level 176: [/input, 3926] 
split level 177: [/input, 3125] 
split level 178: [/input, 1599] 
split level 179: [/input, 1565] 
split level 180: [/input, 1652] 
split level 181: [/input, 1018] 
split level 182: [/input-8, 334] 
split level 183: [/input, 748] 
split level 184: [/input-8, 1705] 
split level 185: [/input, 1615] 
split level 186: [/input-8, 1775] 
split level 187: [/input-8, 1165] 
split level 188: [/input, 1180] 
split level 189: [/input-8, 865] 
split level 190: [/input-8, 1154] 
split level 191: [/input, 3541] 
split level 192: [/input-8, 1714] 
split level 193: [/input-8, 134] 
split level 194: [/input, 209] 
split level 195: [/input, 3166] 
split level 196: [/input-8, 227] 
split level 197: [/input, 3437] 
split level 198: [/input, 1490] 
split level 199: [/input, 2645] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4848381280899048
10 lb beta sum: 0.0, worst -0.48483455181121826
Time: prepare 0.0116    bound 0.1016    transfer 0.0012    finalize 0.0026    func 0.1196    
Accumulated time: func 0.1741    prepare 0.0218    bound 0.1557    transfer 0.0013    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(-0.05249625) min lb tensor(-0.48483211)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.0098724365234375 
BICCOS Cumulative time: 0.0098724365234375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.46542 (1), -0.46539 (1), -0.46526 (1), -0.46516 (1), -0.46444 (1), -0.46420 (1), -0.46408 (1), -0.46403 (1), -0.46206 (1), -0.46177 (1), -0.46133 (1), -0.46098 (1), -0.46044 (1), -0.45939 (1), -0.45896 (1), -0.45891 (1), -0.45799 (1), -0.45754 (1), -0.45753 (1), -0.45485 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5257    set_bounds 0.0088    solve 0.1197    add 0.0809    
Accumulated time: pickout 0.0003    decision 0.5257    set_bounds 0.0088    solve 0.1197    add 0.0809    
Current (lb-rhs): -0.465420663356781
50 domains visited
Cumulative time: 0.8151555061340332

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 31] [/input-12, 31] [/input-12, 8] [/input-12, 31] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 59] [/input-12, 8] [/input-12, 59] [/input-12, 8] 
split level 2: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 72] [/input-12, 59] [/input-12, 72] [/input-12, 59] 
split level 3: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 6] [/input-12, 72] [/input-12, 6] [/input-12, 6] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.44529879093170166
10 lb beta sum: 0.0, worst -0.4451838731765747
Time: prepare 0.0122    bound 0.1000    transfer 0.0007    finalize 0.0020    func 0.1176    
Accumulated time: func 0.2917    prepare 0.0343    bound 0.2557    transfer 0.0020    finalize 0.0048    
all_split False
======================Cut inference begins======================
max lb tensor(0.24742889) min lb tensor(-0.44515175)
Number of Verified Splits: 27 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.014161348342895508 
BICCOS Cumulative time: 0.024033784866333008
Preprocessing time: 0.011680126190185547 Inference time: 0.0011627674102783203 Add cuts time: 0.0007116794586181641 Cut analysis time: 0.0006067752838134766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19721 (2), -0.19663 (2), -0.19512 (2), -0.19194 (2), -0.18706 (2), -0.18079 (2), -0.18070 (2), -0.17756 (2), -0.17713 (2), -0.17694 (2), -0.17566 (2), -0.17544 (2), -0.16937 (2), -0.15780 (2), -0.15107 (2), -0.14526 (2), -0.14252 (2), -0.14146 (2), -0.13971 (2), -0.13862 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0198    set_bounds 0.0125    solve 0.1176    add 0.0797    
Accumulated time: pickout 0.0013    decision 0.5455    set_bounds 0.0213    solve 0.2373    add 0.1606    
Current (lb-rhs): -0.1972142457962036
100 domains visited
Cumulative time: 1.0607624053955078

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 59] [/input-12, 59] [/input-12, 31] [/input-12, 8] [/input-12, 31] 
split level 1: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 31] [/input-12, 72] [/input-12, 72] [/input-12, 59] [/input-12, 31] [/input-12, 72] 
split level 2: [/input-12, 72] [/input-12, 72] [/input-12, 61] [/input-12, 61] [/input-12, 72] [/input-12, 6] [/input-12, 61] [/input-12, 72] [/input-12, 72] [/input-12, 6] 
split level 3: [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-8, 1636] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.175506591796875
10 lb beta sum: 0.771496057510376, worst -0.14859893918037415
Time: prepare 0.0060    bound 0.1214    transfer 0.0007    finalize 0.0041    func 0.1349    
Accumulated time: func 0.4266    prepare 0.0406    bound 0.3771    transfer 0.0027    finalize 0.0089    
all_split False
======================Cut inference begins======================
max lb tensor(0.73487532) min lb tensor(-0.14463936)
Number of Verified Splits: 250 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 15
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.029934167861938477 
BICCOS Cumulative time: 0.053967952728271484
Preprocessing time: 0.011560201644897461 Inference time: 0.011819839477539062 Add cuts time: 0.00584101676940918 Cut analysis time: 0.0007131099700927734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11632 (3), -0.11607 (3), -0.11482 (3), -0.11201 (3), -0.11144 (3), -0.11024 (3), -0.11016 (3), -0.10989 (3), -0.10925 (3), -0.10795 (3), -0.10681 (3), -0.10649 (3), -0.10524 (3), -0.10361 (3), -0.10191 (3), -0.10186 (3), -0.09926 (3), -0.09781 (3), -0.09188 (3), -0.09028 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0195    set_bounds 0.0151    solve 0.1351    add 0.1025    
Accumulated time: pickout 0.0023    decision 0.5649    set_bounds 0.0364    solve 0.3724    add 0.2630    
Current (lb-rhs): -0.11632056534290314
150 domains visited
Cumulative time: 1.3640258312225342

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 59] [/input-12, 31] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 31] 
split level 1: [/input-12, 61] [/input-12, 61] [/input-12, 59] [/input-12, 59] [/input-12, 72] [/input-12, 59] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 59] 
split level 2: [/input-12, 6] [/input-12, 6] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 72] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 6] 
split level 3: [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-12, 6] [/input-8, 1619] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16184714436531067
10 lb beta sum: 1.7259042263031006, worst -0.048947155475616455
Time: prepare 0.0066    bound 0.1369    transfer 0.0007    finalize 0.0020    func 0.1489    
Accumulated time: func 0.5755    prepare 0.0474    bound 0.5140    transfer 0.0035    finalize 0.0109    
all_split False
======================Cut inference begins======================
max lb tensor(0.50891626) min lb tensor(-0.04643655)
Number of Verified Splits: 312 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 12
#cuts 4-6: 12
#cuts >= 20: 0
BICCOS time: 0.03522062301635742 
BICCOS Cumulative time: 0.0891885757446289
Preprocessing time: 0.011393070220947266 Inference time: 0.014589309692382812 Add cuts time: 0.008522510528564453 Cut analysis time: 0.0007157325744628906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04644 (4), -0.04642 (4), -0.04641 (4), -0.04640 (4), -0.04636 (4), -0.04634 (4), -0.04560 (4), -0.04550 (4), -0.04486 (4), -0.04486 (4), -0.04484 (4), -0.04479 (4), -0.03941 (4), -0.03940 (4), -0.03836 (4), -0.03815 (4), -0.03063 (4), -0.03062 (4), -0.03043 (4), -0.02889 (4), 
Length of domains: 48
Time: pickout 0.0010    decision 0.0200    set_bounds 0.0148    solve 0.1490    add 0.2522    
Accumulated time: pickout 0.0033    decision 0.5850    set_bounds 0.0512    solve 0.5214    add 0.5153    
Current (lb-rhs): -0.04643654823303223
198 domains visited
Cumulative time: 1.8365726470947266

Shallow-BaB round 5
batch: 48
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 59] [/input-12, 72] [/input-12, 59] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 2: [/input-12, 61] [/input-12, 61] [/input-8, 1636] [/input-8, 1636] [/input-12, 6] [/input-12, 6] [/input-12, 12] [/input-12, 12] [/input-8, 1259] [/input-8, 1259] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 1.849029302597046, worst -0.5160456895828247
10 lb beta sum: 2.363327980041504, worst -0.014735579490661621
Time: prepare 0.0157    bound 0.1344    transfer 0.0012    finalize 0.0022    func 0.1560    
Accumulated time: func 0.7315    prepare 0.0634    bound 0.6484    transfer 0.0047    finalize 0.0131    
all_split False
======================Cut inference begins======================
max lb tensor(0.64480126) min lb tensor(-0.01285326)
Number of Verified Splits: 354 of 384
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.036350250244140625 
BICCOS Cumulative time: 0.12553882598876953
Preprocessing time: 0.011024951934814453 Inference time: 0.018425464630126953 Add cuts time: 0.0065021514892578125 Cut analysis time: 0.00039768218994140625
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0228    set_bounds 0.0142    solve 0.1561    add 0.0253    
Accumulated time: pickout 0.0043    decision 0.6077    set_bounds 0.0654    solve 0.6775    add 0.5406    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
198 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8]), tensor([-1., -1.]), tensor([0, 0]), tensor([7.77738762e-09, 7.51475543e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1636], [-1.0], [0], [0.05542707443237305], [3]), '/input-12': (tensor([31,  8, 59, 72]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([7.77738762e-09, 2.18504712e-01, 5.38524091e-02, 3.77170295e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1636], [-1.0], [0], [0.05542707443237305], [3]), '/input-12': (tensor([31,  8, 59, 72]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.77738762e-09, 2.18504712e-01, 5.38524091e-02, 5.56592196e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1636], [1.0], [0], [5.75678415257811e-20], [3]), '/input-12': (tensor([31,  8, 59, 72]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([7.77738762e-09, 2.18504712e-01, 5.38524091e-02, 1.09554842e-01]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1636], [1.0], [0], [5.75678415257811e-20], [3]), '/input-12': (tensor([31,  8, 59, 72]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.77738762e-09, 2.18504712e-01, 5.38524091e-02, 5.49104661e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8, 59]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([7.77738762e-09, 2.18504712e-01, 2.20906705e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8]), tensor([ 1., -1.]), tensor([0, 0]), tensor([4.89325025e-10, 7.29676932e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8, 59]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([4.89325025e-10, 2.58247018e-01, 2.93168295e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8, 59]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([4.89325025e-10, 2.58247018e-01, 1.05128214e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  9
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2843005061149597
10 lb beta sum: 1.572622299194336, worst -0.19431990385055542
Time: prepare 0.0005    bound 0.1184    transfer 0.0002    finalize 0.0002    func 0.1193    
Accumulated time: func 0.8508    prepare 0.0639    bound 0.7667    transfer 0.0049    finalize 0.0133    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] 
split level 1: [/input-12, 72] [/input-12, 72] 
split level 2: [/input-12, 61] [/input-12, 61] 
split level 3: [/input-12, 12] [/input-12, 12] 
split level 4: [/input-12, 6] [/input-12, 6] 
split level 5: [/input-8, 1619] [/input-8, 1619] 
split level 6: [/input-8, 1636] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2279796600341797, worst -0.1526792049407959
10 lb beta sum: 2.2279796600341797, worst -0.15221905708312988
Time: prepare 0.0109    bound 0.1316    transfer 0.0016    finalize 0.0012    func 0.1471    
Accumulated time: func 0.9979    prepare 0.0752    bound 0.8984    transfer 0.0065    finalize 0.0145    
all_split False
======================Cut inference begins======================
max lb tensor(0.99977857) min lb tensor(-0.15198684)
Number of Verified Splits: 241 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 2.227979898452759, worst -0.7526971101760864
10 lb beta sum: 2.357771396636963, worst -0.3170177936553955
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 10
#cuts 4-6: 12
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.27751612663269043 
BICCOS Cumulative time: 0.40305495262145996
Preprocessing time: 0.007040262222290039 Inference time: 0.2633075714111328 Add cuts time: 0.006350278854370117 Cut analysis time: 0.0008180141448974609
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15199 (7), -0.14584 (7), -0.13118 (7), -0.12775 (7), -0.12466 (7), -0.12136 (7), -0.10488 (7), -0.09836 (7), -0.08382 (7), -0.07743 (7), -0.05882 (7), -0.05224 (7), -0.03015 (7), -0.02278 (7), -0.00555 (7), 
Length of domains: 15
Time: pickout 0.0005    decision 0.0203    set_bounds 0.0224    solve 0.1471    add 0.0010    
Accumulated time: pickout 0.0048    decision 0.6280    set_bounds 0.0878    solve 0.8246    add 0.5416    
Current (lb-rhs): -0.15198683738708496
213 domains visited
Cumulative time: 2.7029881477355957

BaB round 2
batch: 15
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 2: [/input-8, 1259] [/input-8, 99] [/input-8, 476] [/input-8, 99] [/input-8, 1259] [/input-8, 99] [/input-8, 476] [/input-8, 99] [/input-8, 1259] [/input-8, 1644] 
split level 3: [/input-8, 1718] [/input-8, 1644] [/input-8, 1718] [/input-8, 428] [/input-8, 1718] [/input-8, 1644] [/input-8, 1718] [/input-8, 428] [/input-8, 1718] [/input-8, 99] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14457100629806519
10 lb beta sum: 0.534375011920929, worst -0.13864463567733765
Time: prepare 0.0057    bound 0.1344    transfer 0.0011    finalize 0.0012    func 0.1440    
Accumulated time: func 1.1419    prepare 0.0811    bound 1.0328    transfer 0.0076    finalize 0.0157    
all_split False
======================Cut inference begins======================
max lb tensor(0.90700734) min lb tensor(-0.13852346)
Number of Verified Splits: 187 of 240
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.31473013758659363
10 lb beta sum: 1.1514205932617188, worst -0.03742343187332153
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 10
#cuts 4-6: 12
#cuts 7-9: 1
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.2681875228881836 
BICCOS Cumulative time: 0.6712424755096436
Preprocessing time: 0.007228374481201172 Inference time: 0.25031280517578125 Add cuts time: 0.009762048721313477 Cut analysis time: 0.0008842945098876953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13852 (11), -0.13705 (11), -0.13212 (11), -0.13065 (11), -0.12916 (11), -0.12768 (11), -0.12329 (11), -0.12181 (11), -0.11785 (11), -0.11637 (11), -0.11247 (11), -0.11161 (11), -0.11111 (11), -0.10963 (11), -0.10846 (11), -0.10699 (11), -0.10511 (11), -0.10492 (11), -0.10440 (11), -0.10436 (11), 
Length of domains: 53
Time: pickout 0.0008    decision 0.0143    set_bounds 0.0216    solve 0.1441    add 0.0021    
Accumulated time: pickout 0.0057    decision 0.6423    set_bounds 0.1094    solve 0.9687    add 0.5437    
Current (lb-rhs): -0.13852345943450928
266 domains visited
Cumulative time: 3.1561450958251953

BaB round 3
batch: 53
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1249] [/input-8, 1249] [/input-8, 1259] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 1259] [/input-8, 1249] [/input-8, 1249] [/input-8, 1259] 
split level 1: [/input-8, 476] [/input-8, 91] [/input-8, 428] [/input-8, 476] [/input-8, 476] [/input-8, 91] [/input-8, 428] [/input-8, 476] [/input-8, 91] [/input-8, 428] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13513821363449097
10 lb beta sum: 0.5444574952125549, worst -0.1293002963066101
Time: prepare 0.0042    bound 0.1368    transfer 0.0005    finalize 0.0011    func 0.1440    
Accumulated time: func 1.2859    prepare 0.0855    bound 1.1696    transfer 0.0081    finalize 0.0168    
all_split False
======================Cut inference begins======================
max lb tensor(0.02077043) min lb tensor(-0.12921119)
Number of Verified Splits: 32 of 212
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 11
#cuts 4-6: 16
#cuts >= 20: 0
BICCOS time: 0.012517929077148438 
BICCOS Cumulative time: 0.683760404586792
Preprocessing time: 0.006327629089355469 Inference time: 0.003572702407836914 Add cuts time: 0.0017244815826416016 Cut analysis time: 0.0008931159973144531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12921 (13), -0.12771 (13), -0.12257 (13), -0.12243 (13), -0.12107 (13), -0.12092 (13), -0.11972 (13), -0.11822 (13), -0.11771 (13), -0.11621 (13), -0.11354 (13), -0.11306 (13), -0.11202 (13), -0.11155 (13), -0.11053 (13), -0.10937 (13), -0.10904 (13), -0.10869 (13), -0.10787 (13), -0.10717 (13), 
Length of domains: 180
Time: pickout 0.0013    decision 0.0162    set_bounds 0.0099    solve 0.1441    add 0.0027    
Accumulated time: pickout 0.0070    decision 0.6586    set_bounds 0.1194    solve 1.1127    add 0.5464    
Current (lb-rhs): -0.1292111873626709
446 domains visited
Cumulative time: 3.3436944484710693

BaB round 4
batch: 180
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 91] [/input-8, 757] [/input-8, 99] [/input-8, 91] [/input-8, 757] [/input-8, 99] [/input-8, 91] [/input-8, 757] [/input-8, 99] [/input-8, 91] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13046202063560486
10 lb beta sum: 0.5913541913032532, worst -0.12462255358695984
Time: prepare 0.0070    bound 0.1395    transfer 0.0033    finalize 0.0016    func 0.1538    
Accumulated time: func 1.4397    prepare 0.0927    bound 1.3091    transfer 0.0114    finalize 0.0184    
all_split False
======================Cut inference begins======================
max lb tensor(0.00995916) min lb tensor(-0.12457335)
Number of Verified Splits: 34 of 360
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 12
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.017644643783569336 
BICCOS Cumulative time: 0.7014050483703613
Preprocessing time: 0.010659456253051758 Inference time: 0.0038259029388427734 Add cuts time: 0.0015807151794433594 Cut analysis time: 0.0015785694122314453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12457 (14), -0.12305 (14), -0.11763 (14), -0.11754 (14), -0.11610 (14), -0.11601 (14), -0.11502 (14), -0.11350 (14), -0.11249 (14), -0.11095 (14), -0.10888 (14), -0.10861 (14), -0.10804 (14), -0.10737 (14), -0.10706 (14), -0.10651 (14), -0.10545 (14), -0.10482 (14), -0.10422 (14), -0.10393 (14), 
Length of domains: 326
Time: pickout 0.0026    decision 0.0224    set_bounds 0.0153    solve 0.1539    add 0.0042    
Accumulated time: pickout 0.0096    decision 0.6810    set_bounds 0.1347    solve 1.2667    add 0.5506    
Current (lb-rhs): -0.12457334995269775
772 domains visited
Cumulative time: 3.5603930950164795

BaB round 5
batch: 326
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 99] [/input-8, 1241] [/input-8, 1249] [/input-8, 99] [/input-8, 1241] [/input-8, 1249] [/input-8, 99] [/input-8, 1241] [/input-8, 1249] [/input-8, 99] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12302860617637634
10 lb beta sum: 0.672082781791687, worst -0.11721611022949219
Time: prepare 0.0123    bound 0.1422    transfer 0.0051    finalize 0.0026    func 0.1665    
Accumulated time: func 1.6062    prepare 0.1052    bound 1.4513    transfer 0.0165    finalize 0.0210    
all_split False
======================Cut inference begins======================
max lb tensor(0.34538013) min lb tensor(-0.11715871)
Number of Verified Splits: 152 of 652
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 13
#cuts 4-6: 25
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.043828487396240234 
BICCOS Cumulative time: 0.7452335357666016
Preprocessing time: 0.018643617630004883 Inference time: 0.020001649856567383 Add cuts time: 0.0037963390350341797 Cut analysis time: 0.001386880874633789
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11716 (15), -0.11588 (15), -0.11561 (15), -0.11433 (15), -0.11256 (15), -0.11098 (15), -0.10970 (15), -0.10923 (15), -0.10887 (15), -0.10827 (15), -0.10816 (15), -0.10768 (15), -0.10733 (15), -0.10673 (15), -0.10581 (15), -0.10489 (15), -0.10427 (15), -0.10371 (15), -0.10332 (15), -0.10216 (15), 
Length of domains: 500
Time: pickout 0.0048    decision 0.0294    set_bounds 0.0273    solve 0.1667    add 0.0055    
Accumulated time: pickout 0.0145    decision 0.7103    set_bounds 0.1619    solve 1.4334    add 0.5562    
Current (lb-rhs): -0.11715871095657349
1272 domains visited
Cumulative time: 3.839425802230835

BaB round 6
batch: 500
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1580] [/input-8, 428] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 428] [/input-8, 1580] [/input-8, 1580] [/input-8, 428] [/input-8, 1580] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11818158626556396
10 lb beta sum: 0.6547155380249023, worst -0.112457275390625
Time: prepare 0.0188    bound 0.1419    transfer 0.0075    finalize 0.0046    func 0.1794    
Accumulated time: func 1.7856    prepare 0.1242    bound 1.5932    transfer 0.0241    finalize 0.0256    
all_split False
======================Cut inference begins======================
max lb tensor(0.29776108) min lb tensor(-0.11245143)
Number of Verified Splits: 113 of 1000
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 13
#cuts 4-6: 25
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.050440073013305664 
BICCOS Cumulative time: 0.7956736087799072
Preprocessing time: 0.029753684997558594 Inference time: 0.015564918518066406 Add cuts time: 0.0037543773651123047 Cut analysis time: 0.0013670921325683594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11245 (16), -0.11112 (16), -0.11091 (16), -0.10958 (16), -0.10766 (16), -0.10610 (16), -0.10485 (16), -0.10449 (16), -0.10442 (16), -0.10435 (16), -0.10422 (16), -0.10389 (16), -0.10330 (16), -0.10293 (16), -0.10280 (16), -0.10277 (16), -0.10259 (16), -0.10234 (16), -0.10136 (16), -0.10044 (16), 
Length of domains: 887
Time: pickout 0.0087    decision 0.0391    set_bounds 0.0425    solve 0.1797    add 0.0066    
Accumulated time: pickout 0.0232    decision 0.7495    set_bounds 0.2045    solve 1.6131    add 0.5627    
Current (lb-rhs): -0.11245143413543701
2159 domains visited
Cumulative time: 4.168329477310181

BaB round 7
batch: 887
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 428] [/input-8, 28] [/input-8, 1954] [/input-8, 428] [/input-8, 28] [/input-8, 99] [/input-8, 1929] [/input-8, 1954] [/input-8, 99] [/input-8, 28] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11148655414581299
10 lb beta sum: 0.7077406048774719, worst -0.10579660534858704
Time: prepare 0.0338    bound 0.1663    transfer 0.0076    finalize 0.0085    func 0.2277    
Accumulated time: func 2.0133    prepare 0.1583    bound 1.7595    transfer 0.0317    finalize 0.0341    
all_split False
======================Cut inference begins======================
max lb tensor(0.30726403) min lb tensor(-0.10578781)
Number of Verified Splits: 575 of 1774
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 39.
#cuts 1-3: 15
#cuts 4-6: 23
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.14270806312561035 
BICCOS Cumulative time: 0.9383816719055176
Preprocessing time: 0.053881168365478516 Inference time: 0.0767672061920166 Add cuts time: 0.010751724243164062 Cut analysis time: 0.0013079643249511719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10579 (17), -0.10564 (17), -0.10430 (17), -0.10424 (17), -0.10410 (17), -0.10285 (17), -0.10275 (17), -0.10131 (17), -0.10024 (17), -0.10012 (17), -0.09999 (17), -0.09958 (17), -0.09958 (17), -0.09909 (17), -0.09863 (17), -0.09850 (17), -0.09844 (17), -0.09804 (17), -0.09800 (17), -0.09755 (17), 
Length of domains: 1199
Time: pickout 0.0173    decision 0.1968    set_bounds 0.0760    solve 0.2281    add 0.0271    
Accumulated time: pickout 0.0404    decision 0.9463    set_bounds 0.2805    solve 1.8412    add 0.5898    
Current (lb-rhs): -0.10578781366348267
3358 domains visited
Cumulative time: 4.862637996673584

BaB round 8
batch: 1199
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1929] [/input-8, 1929] [/input-8, 28] [/input-8, 1929] [/input-8, 1929] [/input-8, 28] [/input-8, 28] [/input-8, 28] [/input-8, 1929] [/input-8, 803] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10949671268463135
10 lb beta sum: 0.778729259967804, worst -0.10378971695899963
Time: prepare 0.0460    bound 0.1941    transfer 0.0041    finalize 0.0102    func 0.2713    
Accumulated time: func 2.2846    prepare 0.2046    bound 1.9536    transfer 0.0357    finalize 0.0444    
all_split False
======================Cut inference begins======================
max lb tensor(0.62765563) min lb tensor(-0.10377002)
Number of Verified Splits: 1432 of 2398
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.29539012908935547 
BICCOS Cumulative time: 1.233771800994873
Preprocessing time: 0.07292723655700684 Inference time: 0.19923830032348633 Add cuts time: 0.022840261459350586 Cut analysis time: 0.00038433074951171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10377 (18), -0.10351 (18), -0.10222 (18), -0.10208 (18), -0.10196 (18), -0.10075 (18), -0.10054 (18), -0.09919 (18), -0.09841 (18), -0.09833 (18), -0.09722 (18), -0.09680 (18), -0.09679 (18), -0.09672 (18), -0.09567 (18), -0.09536 (18), -0.09525 (18), -0.09437 (18), -0.09381 (18), -0.09353 (18), 
Length of domains: 966
Time: pickout 0.0175    decision 0.0752    set_bounds 0.1013    solve 0.2717    add 0.0043    
Accumulated time: pickout 0.0579    decision 1.0215    set_bounds 0.3817    solve 2.1129    add 0.5941    
Current (lb-rhs): -0.10377001762390137
4324 domains visited
Cumulative time: 5.640231370925903

BaB round 9
batch: 966
splitting decisions: 
split level 0: [/input-8, 803] [/input-8, 803] [/input-8, 755] [/input-8, 803] [/input-8, 803] [/input-8, 1963] [/input-8, 755] [/input-8, 476] [/input-8, 1963] [/input-8, 426] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10384535789489746

all verified at 7th iter
Time: prepare 0.0372    bound 0.0566    transfer 0.0037    finalize 0.0086    func 0.1183    
Accumulated time: func 2.4029    prepare 0.2421    bound 2.0102    transfer 0.0394    finalize 0.0530    
all_split False
======================Cut inference begins======================
max lb tensor(0.20247592) min lb tensor(3.74317169e-05)
Number of Verified Splits: 1932 of 1932
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.05910086631774902 
BICCOS Cumulative time: 1.292872667312622
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0206    decision 0.2245    set_bounds 0.0831    solve 0.1187    add 0.0004    
Accumulated time: pickout 0.0786    decision 1.2460    set_bounds 0.4649    solve 2.2317    add 0.5945    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
4324 domains visited
Cumulative time: 6.156893730163574


Properties batch 3, size 1
Remaining timeout: 192.20620894432068
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 192.20609974861145
Verifying property 4 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.26430136]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.16277122, -21.12893295, -16.04788589, -16.93409729, -16.10508919,
        -17.10481453, -15.34734917, -18.76787186, -21.06470108, -20.31587410],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.26430136]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 438
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 269
Node /15 input 0: size torch.Size([100]) unstable 17
-----------------
# of unstable neurons: 724
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.918212890625e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.26430070400238037
10 lb beta sum: 0.0, worst -0.26430028676986694
Time: prepare 0.0002    bound 0.0908    transfer 0.0001    finalize 0.0001    func 0.0913    
Accumulated time: func 0.0913    prepare 0.0002    bound 0.0908    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] 
split level 1: [/input-12, 56] 
split level 2: [/input-12, 97] 
split level 3: [/input-12, 61] 
split level 4: [/input-12, 68] 
split level 5: [/input-12, 31] 
split level 6: [/input-12, 34] 
split level 7: [/input-8, 1249] 
split level 8: [/input-8, 1939] 
split level 9: [/input-12, 7] 
split level 10: [/input-8, 157] 
split level 11: [/input-8, 44] 
split level 12: [/input-8, 1259] 
split level 13: [/input-8, 612] 
split level 14: [/input-8, 804] 
split level 15: [/input-8, 811] 
split level 16: [/input-8, 1241] 
split level 17: [/input-8, 1258] 
split level 18: [/input-8, 38] 
split level 19: [/input-8, 1635] 
split level 20: [/input-8, 790] 
split level 21: [/input-8, 347] 
split level 22: [/input-8, 1581] 
split level 23: [/input-8, 139] 
split level 24: [/input-8, 166] 
split level 25: [/input-8, 174] 
split level 26: [/input-8, 1580] 
split level 27: [/input-8, 146] 
split level 28: [/input-8, 42] 
split level 29: [/input-8, 43] 
split level 30: [/input-8, 757] 
split level 31: [/input-8, 1242] 
split level 32: [/input-8, 2030] 
split level 33: [/input-12, 8] 
split level 34: [/input-8, 54] 
split level 35: [/input-8, 803] 
split level 36: [/input-8, 25] 
split level 37: [/input, 3149] 
split level 38: [/input-8, 28] 
split level 39: [/input-8, 161] 
split level 40: [/input-8, 2017] 
split level 41: [/input-8, 1636] 
split level 42: [/input-8, 132] 
split level 43: [/input-8, 153] 
split level 44: [/input-8, 406] 
split level 45: [/input, 3054] 
split level 46: [/input-8, 1644] 
split level 47: [/input-8, 1193] 
split level 48: [/input-8, 755] 
split level 49: [/input-8, 588] 
split level 50: [/input, 3176] 
split level 51: [/input-8, 491] 
split level 52: [/input-8, 1187] 
split level 53: [/input, 3167] 
split level 54: [/input-8, 2018] 
split level 55: [/input-8, 1382] 
split level 56: [/input-8, 441] 
split level 57: [/input, 3165] 
split level 58: [/input-12, 72] 
split level 59: [/input, 3161] 
split level 60: [/input, 3382] 
split level 61: [/input-8, 40] 
split level 62: [/input, 2602] 
split level 63: [/input-8, 41] 
split level 64: [/input-8, 932] 
split level 65: [/input-8, 145] 
split level 66: [/input-8, 2016] 
split level 67: [/input-8, 404] 
split level 68: [/input, 3300] 
split level 69: [/input-8, 1579] 
split level 70: [/input, 3113] 
split level 71: [/input-8, 1248] 
split level 72: [/input-8, 1931] 
split level 73: [/input-8, 204] 
split level 74: [/input-8, 134] 
split level 75: [/input, 2603] 
split level 76: [/input-8, 1164] 
split level 77: [/input, 3162] 
split level 78: [/input, 2601] 
split level 79: [/input-8, 785] 
split level 80: [/input, 873] 
split level 81: [/input-8, 138] 
split level 82: [/input-8, 1240] 
split level 83: [/input, 3146] 
split level 84: [/input, 2680] 
split level 85: [/input-8, 914] 
split level 86: [/input, 2652] 
split level 87: [/input, 476] 
split level 88: [/input-8, 1556] 
split level 89: [/input, 3166] 
split level 90: [/input-8, 1238] 
split level 91: [/input-8, 171] 
split level 92: [/input, 3125] 
split level 93: [/input-8, 342] 
split level 94: [/input-8, 922] 
split level 95: [/input-8, 1214] 
split level 96: [/input-8, 1596] 
split level 97: [/input-8, 1224] 
split level 98: [/input-8, 1645] 
split level 99: [/input-8, 63] 
split level 100: [/input, 2586] 
split level 101: [/input-8, 175] 
split level 102: [/input, 3038] 
split level 103: [/input, 1124] 
split level 104: [/input-8, 397] 
split level 105: [/input-8, 357] 
split level 106: [/input-8, 248] 
split level 107: [/input, 2637] 
split level 108: [/input-8, 589] 
split level 109: [/input-8, 465] 
split level 110: [/input-8, 931] 
split level 111: [/input, 682] 
split level 112: [/input-8, 2009] 
split level 113: [/input-8, 1165] 
split level 114: [/input-8, 722] 
split level 115: [/input-8, 1376] 
split level 116: [/input, 669] 
split level 117: [/input, 3383] 
split level 118: [/input, 3222] 
split level 119: [/input-8, 326] 
split level 120: [/input, 2649] 
split level 121: [/input, 2988] 
split level 122: [/input-8, 1393] 
split level 123: [/input, 748] 
split level 124: [/input-8, 1399] 
split level 125: [/input, 1652] 
split level 126: [/input-8, 1383] 
split level 127: [/input-8, 2047] 
split level 128: [/input-8, 98] 
split level 129: [/input-8, 1529] 
split level 130: [/input-8, 91] 
split level 131: [/input, 2572] 
split level 132: [/input-8, 1665] 
split level 133: [/input, 2666] 
split level 134: [/input, 3034] 
split level 135: [/input-8, 312] 
split level 136: [/input-8, 333] 
split level 137: [/input, 3973] 
split level 138: [/input-8, 418] 
split level 139: [/input-8, 238] 
split level 140: [/input-8, 899] 
split level 141: [/input-8, 1993] 
split level 142: [/input, 3286] 
split level 143: [/input, 3419] 
split level 144: [/input, 2896] 
split level 145: [/input, 1565] 
split level 146: [/input, 1599] 
split level 147: [/input-8, 401] 
split level 148: [/input, 875] 
split level 149: [/input, 823] 
split level 150: [/input, 4068] 
split level 151: [/input, 3354] 
split level 152: [/input-8, 1375] 
split level 153: [/input, 839] 
split level 154: [/input, 3235] 
split level 155: [/input-8, 1619] 
split level 156: [/input, 2880] 
split level 157: [/input, 745] 
split level 158: [/input, 1021] 
split level 159: [/input, 788] 
split level 160: [/input-8, 1331] 
split level 161: [/input, 1748] 
split level 162: [/input, 276] 
split level 163: [/input, 1615] 
split level 164: [/input-8, 1545] 
split level 165: [/input-8, 177] 
split level 166: [/input-8, 1718] 
split level 167: [/input-8, 749] 
split level 168: [/input-8, 395] 
split level 169: [/input-8, 865] 
split level 170: [/input, 837] 
split level 171: [/input, 1400] 
split level 172: [/input, 2571] 
split level 173: [/input, 1581] 
split level 174: [/input-8, 169] 
split level 175: [/input, 1686] 
split level 176: [/input-8, 440] 
split level 177: [/input, 1490] 
split level 178: [/input, 2645] 
split level 179: [/input-8, 2008] 
split level 180: [/input, 986] 
split level 181: [/input-8, 490] 
split level 182: [/input-8, 1929] 
split level 183: [/input-8, 1963] 
split level 184: [/input, 974] 
split level 185: [/input, 3281] 
split level 186: [/input, 1018] 
split level 187: [/input, 2613] 
split level 188: [/input, 853] 
split level 189: [/input-8, 2001] 
split level 190: [/input-8, 334] 
split level 191: [/input-8, 107] 
split level 192: [/input, 2028] 
split level 193: [/input, 275] 
split level 194: [/input, 681] 
split level 195: [/input, 790] 
split level 196: [/input, 903] 
split level 197: [/input-8, 587] 
split level 198: [/input, 209] 
split level 199: [/input, 773] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.26429522037506104
10 lb beta sum: 0.0, worst -0.2642984986305237
Time: prepare 0.0113    bound 0.1003    transfer 0.0012    finalize 0.0026    func 0.1179    
Accumulated time: func 0.2092    prepare 0.0214    bound 0.1911    transfer 0.0013    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.11695075) min lb tensor(-0.26429510)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.01043391227722168 
BICCOS Cumulative time: 0.01043391227722168
Preprocessing time: 0.00982046127319336 Inference time: 0.00025200843811035156 Add cuts time: 9.822845458984375e-05 Cut analysis time: 0.000263214111328125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25035 (1), -0.25029 (1), -0.25001 (1), -0.24989 (1), -0.24984 (1), -0.24972 (1), -0.24953 (1), -0.24941 (1), -0.24936 (1), -0.24912 (1), -0.24890 (1), -0.24852 (1), -0.24845 (1), -0.24807 (1), -0.24656 (1), -0.24620 (1), -0.24565 (1), -0.24526 (1), -0.24488 (1), -0.24445 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5283    set_bounds 0.0085    solve 0.1180    add 0.0924    
Accumulated time: pickout 0.0003    decision 0.5283    set_bounds 0.0085    solve 0.1180    add 0.0924    
Current (lb-rhs): -0.2503543496131897
50 domains visited
Cumulative time: 0.8692457675933838

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 56] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
split level 1: [/input-12, 56] [/input-12, 56] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 56] [/input-12, 97] [/input-12, 97] [/input-12, 56] [/input-12, 97] 
split level 2: [/input-12, 97] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 97] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 3: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 61] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.230890691280365
10 lb beta sum: 1.161550760269165, worst -0.1642627716064453
Time: prepare 0.0074    bound 0.1230    transfer 0.0007    finalize 0.0025    func 0.1363    
Accumulated time: func 0.3455    prepare 0.0291    bound 0.3141    transfer 0.0020    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.45590091) min lb tensor(-0.16405386)
Number of Verified Splits: 122 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 18
#cuts >= 20: 0
BICCOS time: 0.019394874572753906 
BICCOS Cumulative time: 0.029828786849975586
Preprocessing time: 0.011855840682983398 Inference time: 0.005014896392822266 Add cuts time: 0.002046346664428711 Cut analysis time: 0.00047779083251953125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05229 (2), -0.04797 (2), -0.04223 (2), -0.04183 (2), -0.04128 (2), -0.04121 (2), -0.03833 (2), -0.03722 (2), -0.03566 (2), -0.03409 (2), -0.03236 (2), -0.03235 (2), -0.03210 (2), -0.03204 (2), -0.03143 (2), -0.02993 (2), -0.02851 (2), -0.02815 (2), -0.02772 (2), -0.02711 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0199    set_bounds 0.0117    solve 0.1364    add 0.1299    
Accumulated time: pickout 0.0014    decision 0.5481    set_bounds 0.0203    solve 0.2543    add 0.2223    
Current (lb-rhs): -0.0522918701171875
100 domains visited
Cumulative time: 1.1877906322479248

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
split level 1: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 2: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 3: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 34] [/input-12, 31] [/input-12, 34] [/input-12, 31] [/input-12, 31] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14159923791885376
10 lb beta sum: 2.5315029621124268, worst -0.025802671909332275
Time: prepare 0.0074    bound 0.1364    transfer 0.0007    finalize 0.0027    func 0.1498    
Accumulated time: func 0.4953    prepare 0.0368    bound 0.4505    transfer 0.0027    finalize 0.0078    
all_split False
======================Cut inference begins======================
max lb tensor(0.62370098) min lb tensor(-0.02521485)
Number of Verified Splits: 394 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.03795957565307617 
BICCOS Cumulative time: 0.06778836250305176
Preprocessing time: 0.011523246765136719 Inference time: 0.01552891731262207 Add cuts time: 0.010478496551513672 Cut analysis time: 0.00042891502380371094
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0194    set_bounds 0.0155    solve 0.1499    add 0.0207    
Accumulated time: pickout 0.0024    decision 0.5675    set_bounds 0.0357    solve 0.4042    add 0.2430    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 59]), tensor([-1., -1.]), tensor([0, 0]), tensor([5.75661872e-20, 1.00311860e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 59]), tensor([-1.,  1.]), tensor([0, 0]), tensor([5.75661872e-20, 2.40901396e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 59, 56]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.01570055e-01, 5.65074533e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 59, 56]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.01570055e-01, 8.29762667e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 59]), tensor([1., 1.]), tensor([0, 0]), tensor([5.75661872e-20, 2.50102818e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  5
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15130376815795898
10 lb beta sum: 0.6458916664123535, worst -0.10090428590774536
Time: prepare 0.0004    bound 0.1283    transfer 0.0002    finalize 0.0002    func 0.1291    
Accumulated time: func 0.6243    prepare 0.0371    bound 0.5788    transfer 0.0029    finalize 0.0080    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] 
split level 1: [/input-12, 61] 
split level 2: [/input-12, 31] 
split level 3: [/input-12, 34] 
split level 4: [/input-8, 1249] 
split level 5: [/input-8, 1259] 
split level 6: [/input-8, 1241] 
split level 7: [/input-8, 28] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8986124992370605, worst -0.04761385917663574
10 lb beta sum: 1.933295488357544, worst -0.04713165760040283
Time: prepare 0.0109    bound 0.1322    transfer 0.0014    finalize 0.0012    func 0.1474    
Accumulated time: func 0.7717    prepare 0.0485    bound 0.7110    transfer 0.0043    finalize 0.0092    
all_split False
======================Cut inference begins======================
max lb tensor(0.67279470) min lb tensor(-0.04697132)
Number of Verified Splits: 232 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.8986124992370605, worst -0.17897582054138184
10 lb beta sum: 2.0313003063201904, worst -0.0933530330657959
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 13
#cuts 4-6: 1
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.29178357124328613 
BICCOS Cumulative time: 0.3595719337463379
Preprocessing time: 0.0070209503173828125 Inference time: 0.2780442237854004 Add cuts time: 0.006168365478515625 Cut analysis time: 0.0005500316619873047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04697 (8), -0.04603 (8), -0.04327 (8), -0.04233 (8), -0.03957 (8), -0.03863 (8), -0.03587 (8), -0.03493 (8), -0.01933 (8), -0.01843 (8), -0.01663 (8), -0.01559 (8), -0.01512 (8), -0.01422 (8), -0.01404 (8), -0.01310 (8), -0.01208 (8), -0.01167 (8), -0.01105 (8), -0.01073 (8), 
Length of domains: 24
Time: pickout 0.0004    decision 0.0221    set_bounds 0.0245    solve 0.1474    add 0.0011    
Accumulated time: pickout 0.0028    decision 0.5896    set_bounds 0.0602    solve 0.5517    add 0.2441    
Current (lb-rhs): -0.04697132110595703
124 domains visited
Cumulative time: 2.0632824897766113

BaB round 2
batch: 24
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 1: [/input-8, 44] [/input-8, 44] [/input-8, 166] [/input-8, 44] [/input-8, 44] [/input-8, 166] [/input-8, 44] [/input-8, 44] [/input-8, 166] [/input-8, 44] 
split level 2: [/input-8, 166] [/input-8, 166] [/input-8, 1644] [/input-8, 166] [/input-8, 166] [/input-8, 803] [/input-8, 166] [/input-8, 166] [/input-8, 1644] [/input-8, 166] 
split level 3: [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 1644] [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 803] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03813362121582031
10 lb beta sum: 0.24612078070640564, worst -0.03315696120262146
Time: prepare 0.0074    bound 0.1333    transfer 0.0007    finalize 0.0018    func 0.1457    
Accumulated time: func 0.9174    prepare 0.0561    bound 0.8443    transfer 0.0050    finalize 0.0110    
all_split False
======================Cut inference begins======================
max lb tensor(0.06718215) min lb tensor(-0.03303343)
Number of Verified Splits: 327 of 384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.04596376419067383 
BICCOS Cumulative time: 0.4055356979370117
Preprocessing time: 0.010928153991699219 Inference time: 0.03263735771179199 Add cuts time: 0.0020051002502441406 Cut analysis time: 0.00039315223693847656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03303 (12), -0.03263 (12), -0.03197 (12), -0.03152 (12), -0.02931 (12), -0.02879 (12), -0.02861 (12), -0.02825 (12), -0.02820 (12), -0.02782 (12), -0.02769 (12), -0.02737 (12), -0.02518 (12), -0.02505 (12), -0.02489 (12), -0.02437 (12), -0.02410 (12), -0.02407 (12), -0.02398 (12), -0.02354 (12), 
Length of domains: 57
Time: pickout 0.0009    decision 0.0179    set_bounds 0.0332    solve 0.1458    add 0.0010    
Accumulated time: pickout 0.0037    decision 0.6075    set_bounds 0.0934    solve 0.6975    add 0.2452    
Current (lb-rhs): -0.03303343057632446
181 domains visited
Cumulative time: 2.310586929321289

BaB round 3
batch: 57
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] 
split level 1: [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029996871948242188
10 lb beta sum: 0.6845191717147827, worst -0.025089889764785767
Time: prepare 0.0044    bound 0.1361    transfer 0.0006    finalize 0.0012    func 0.1440    
Accumulated time: func 1.0614    prepare 0.0608    bound 0.9804    transfer 0.0056    finalize 0.0122    
all_split False
======================Cut inference begins======================
max lb tensor(0.01745886) min lb tensor(-0.02502948)
Number of Verified Splits: 129 of 228
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.022403955459594727 
BICCOS Cumulative time: 0.42793965339660645
Preprocessing time: 0.006748199462890625 Inference time: 0.01433563232421875 Add cuts time: 0.0009412765502929688 Cut analysis time: 0.0003788471221923828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02503 (14), -0.02441 (14), -0.02395 (14), -0.02326 (14), -0.02130 (14), -0.02061 (14), -0.02060 (14), -0.02023 (14), -0.02001 (14), -0.01980 (14), -0.01946 (14), -0.01912 (14), -0.01888 (14), -0.01865 (14), -0.01850 (14), -0.01832 (14), -0.01820 (14), -0.01818 (14), -0.01778 (14), -0.01750 (14), 
Length of domains: 99
Time: pickout 0.0017    decision 0.0167    set_bounds 0.0109    solve 0.1440    add 0.0014    
Accumulated time: pickout 0.0054    decision 0.6243    set_bounds 0.1044    solve 0.8415    add 0.2465    
Current (lb-rhs): -0.025029480457305908
280 domains visited
Cumulative time: 2.5084846019744873

BaB round 4
batch: 99
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] 
split level 1: [/input-8, 1636] [/input-8, 755] [/input-8, 1636] [/input-8, 755] [/input-8, 1636] [/input-8, 755] [/input-8, 1636] [/input-8, 755] [/input-8, 1636] [/input-8, 755] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1307485103607178, worst -0.02163839340209961
10 lb beta sum: 1.5258620977401733, worst -0.018684804439544678
Time: prepare 0.0167    bound 0.1390    transfer 0.0011    finalize 0.0018    func 0.1618    
Accumulated time: func 1.2232    prepare 0.0776    bound 1.1194    transfer 0.0067    finalize 0.0140    
all_split False
======================Cut inference begins======================
max lb tensor(0.00707996) min lb tensor(-0.01863503)
Number of Verified Splits: 155 of 396
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.03343462944030762 
BICCOS Cumulative time: 0.46137428283691406
Preprocessing time: 0.011373281478881836 Inference time: 0.01997542381286621 Add cuts time: 0.001682281494140625 Cut analysis time: 0.0004036426544189453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01864 (16), -0.01761 (16), -0.01754 (16), -0.01642 (16), -0.01621 (16), -0.01599 (16), -0.01500 (16), -0.01492 (16), -0.01489 (16), -0.01423 (16), -0.01419 (16), -0.01388 (16), -0.01384 (16), -0.01343 (16), -0.01337 (16), -0.01318 (16), -0.01310 (16), -0.01268 (16), -0.01247 (16), -0.01228 (16), 
Length of domains: 241
Time: pickout 0.0019    decision 0.0195    set_bounds 0.0180    solve 0.1619    add 0.0022    
Accumulated time: pickout 0.0074    decision 0.6438    set_bounds 0.1223    solve 1.0034    add 0.2488    
Current (lb-rhs): -0.018635034561157227
521 domains visited
Cumulative time: 2.746367931365967

BaB round 5
batch: 241
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.021862447261810303
10 lb beta sum: 0.567771315574646, worst -0.017084747552871704
Time: prepare 0.0093    bound 0.1409    transfer 0.0024    finalize 0.1194    func 0.2752    
Accumulated time: func 1.4984    prepare 0.0872    bound 1.2603    transfer 0.0091    finalize 0.1333    
all_split False
======================Cut inference begins======================
max lb tensor(0.25241989) min lb tensor(-0.01705188)
Number of Verified Splits: 335 of 482
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.06100106239318848 
BICCOS Cumulative time: 0.5223753452301025
Preprocessing time: 0.014487743377685547 Inference time: 0.0429234504699707 Add cuts time: 0.003100872039794922 Cut analysis time: 0.0004889965057373047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01705 (17), -0.01605 (17), -0.01589 (17), -0.01478 (17), -0.01468 (17), -0.01449 (17), -0.01341 (17), -0.01335 (17), -0.01332 (17), -0.01254 (17), -0.01243 (17), -0.01232 (17), -0.01220 (17), -0.01171 (17), -0.01167 (17), -0.01152 (17), -0.01127 (17), -0.01106 (17), -0.01095 (17), -0.01078 (17), 
Length of domains: 147
Time: pickout 0.0039    decision 0.0238    set_bounds 0.0208    solve 0.2754    add 0.0013    
Accumulated time: pickout 0.0113    decision 0.6676    set_bounds 0.1432    solve 1.2788    add 0.2501    
Current (lb-rhs): -0.017051875591278076
668 domains visited
Cumulative time: 3.134904146194458

BaB round 6
batch: 147
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1636] [/input-8, 1644] [/input-8, 1636] [/input-8, 1636] [/input-8, 1644] [/input-8, 1636] [/input-8, 1644] [/input-8, 1636] [/input-8, 1644] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01743340492248535
10 lb beta sum: 1.0594958066940308, worst -0.012734174728393555
Time: prepare 0.0059    bound 0.1334    transfer 0.0020    finalize 0.0018    func 0.1450    
Accumulated time: func 1.6434    prepare 0.0933    bound 1.3937    transfer 0.0111    finalize 0.1352    
all_split False
======================Cut inference begins======================
max lb tensor(0.23937374) min lb tensor(-0.01271862)
Number of Verified Splits: 177 of 294
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.034108877182006836 
BICCOS Cumulative time: 0.5564842224121094
Preprocessing time: 0.008562803268432617 Inference time: 0.023312807083129883 Add cuts time: 0.001752614974975586 Cut analysis time: 0.00048065185546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01272 (18), -0.01211 (18), -0.01182 (18), -0.01170 (18), -0.01105 (18), -0.01084 (18), -0.01071 (18), -0.01054 (18), -0.01036 (18), -0.00981 (18), -0.00950 (18), -0.00942 (18), -0.00930 (18), -0.00918 (18), -0.00902 (18), -0.00900 (18), -0.00842 (18), -0.00822 (18), -0.00809 (18), -0.00801 (18), 
Length of domains: 117
Time: pickout 0.0031    decision 0.0171    set_bounds 0.0125    solve 0.1450    add 0.0012    
Accumulated time: pickout 0.0144    decision 0.6847    set_bounds 0.1556    solve 1.4238    add 0.2513    
Current (lb-rhs): -0.012718617916107178
785 domains visited
Cumulative time: 3.3489129543304443

BaB round 7
batch: 117
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 790] [/input-8, 790] [/input, 3161] [/input, 3161] [/input, 3161] [/input-8, 790] [/input-8, 790] [/input-8, 790] [/input-8, 790] [/input, 3161] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014573156833648682
10 lb beta sum: 1.10542893409729, worst -0.009145617485046387
Time: prepare 0.0050    bound 0.1331    transfer 0.0017    finalize 0.0012    func 0.1425    
Accumulated time: func 1.7859    prepare 0.0985    bound 1.5268    transfer 0.0128    finalize 0.1364    
all_split False
======================Cut inference begins======================
max lb tensor(0.01435554) min lb tensor(-0.00912827)
Number of Verified Splits: 165 of 234
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 24
#cuts >= 20: 0
BICCOS time: 0.030501365661621094 
BICCOS Cumulative time: 0.5869855880737305
Preprocessing time: 0.006871700286865234 Inference time: 0.021471500396728516 Add cuts time: 0.0016856193542480469 Cut analysis time: 0.0004725456237792969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00913 (19), -0.00875 (19), -0.00792 (19), -0.00762 (19), -0.00714 (19), -0.00647 (19), -0.00627 (19), -0.00581 (19), -0.00563 (19), -0.00553 (19), -0.00544 (19), -0.00533 (19), -0.00510 (19), -0.00506 (19), -0.00454 (19), -0.00453 (19), -0.00435 (19), -0.00434 (19), -0.00425 (19), -0.00423 (19), 
Length of domains: 69
Time: pickout 0.0023    decision 0.0152    set_bounds 0.0092    solve 0.1426    add 0.0014    
Accumulated time: pickout 0.0167    decision 0.6999    set_bounds 0.1648    solve 1.5664    add 0.2527    
Current (lb-rhs): -0.009128272533416748
854 domains visited
Cumulative time: 3.551037311553955

BaB round 8
batch: 69
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-8, 790] [/input-8, 790] [/input-12, 8] [/input-8, 790] [/input-8, 790] [/input-8, 790] [/input-12, 8] [/input-8, 790] [/input-8, 790] 
split level 1: [/input-8, 1644] [/input, 3161] [/input-8, 1242] [/input-8, 1242] [/input-8, 1242] [/input-8, 1644] [/input, 3161] [/input-8, 1644] [/input, 3161] [/input-8, 1242] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01003354787826538
10 lb beta sum: 0.6562624573707581, worst -0.004185497760772705
Time: prepare 0.0063    bound 0.1367    transfer 0.0006    finalize 0.0018    func 0.1473    
Accumulated time: func 1.9332    prepare 0.1049    bound 1.6635    transfer 0.0134    finalize 0.1382    
all_split False
======================Cut inference begins======================
max lb tensor(0.33073592) min lb tensor(-0.00413918)
Number of Verified Splits: 253 of 276
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.04468870162963867 
BICCOS Cumulative time: 0.6316742897033691
Preprocessing time: 0.00810551643371582 Inference time: 0.03425955772399902 Add cuts time: 0.0018382072448730469 Cut analysis time: 0.00048542022705078125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00414 (21), -0.00346 (21), -0.00314 (21), -0.00292 (21), -0.00256 (21), -0.00244 (21), -0.00242 (21), -0.00231 (21), -0.00196 (21), -0.00182 (21), -0.00153 (21), -0.00137 (21), -0.00126 (21), -0.00124 (21), -0.00088 (21), -0.00072 (21), -0.00064 (21), -0.00063 (21), -0.00062 (21), -0.00032 (21), 
Length of domains: 23
Time: pickout 0.0019    decision 0.0172    set_bounds 0.0167    solve 0.1474    add 0.0009    
Accumulated time: pickout 0.0186    decision 0.7171    set_bounds 0.1815    solve 1.7138    add 0.2536    
Current (lb-rhs): -0.0041391849517822266
877 domains visited
Cumulative time: 3.7809720039367676

BaB round 9
batch: 23
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1242] [/input-8, 1242] [/input-8, 1242] [/input-8, 1242] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-8, 1644] 
split level 1: [/input, 3161] [/input, 3161] [/input, 3161] [/input, 3161] [/input, 3161] [/input, 3161] [/input-8, 1242] [/input-8, 1644] [/input-8, 1242] [/input, 3161] 
split level 2: [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] 
split level 3: [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0005577206611633301

all verified at 1th iter
Time: prepare 0.0090    bound 0.0202    transfer 0.0025    finalize 0.0016    func 0.0356    
Accumulated time: func 1.9688    prepare 0.1142    bound 1.6837    transfer 0.0159    finalize 0.1398    
all_split False
======================Cut inference begins======================
max lb tensor(0.05214331) min lb tensor(0.00015962)
Number of Verified Splits: 368 of 368
No cut inferred: All or none verified.
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.01129293441772461 
BICCOS Cumulative time: 0.6429672241210938
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0017    decision 0.0180    set_bounds 0.0327    solve 0.0357    add 0.0001    
Accumulated time: pickout 0.0204    decision 0.7352    set_bounds 0.2142    solve 1.7495    add 0.2537    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
877 domains visited
Cumulative time: 3.882173776626587


Properties batch 5, size 1
Remaining timeout: 188.14805030822754
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 188.1479640007019
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 188.147940158844
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 188.1479196548462
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 11.8521 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 138, vnnlib ID: 138 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.17530060, -23.26024055, -22.88537025, -22.34073830, -22.57217026,
         -22.95246124, -23.25955200, -23.61799812, -23.03639603, -21.12484741]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [598]; unstable size 598; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 213, 1, 598] with unstable size 212 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 598] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 598] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [212]; unstable size 212; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 212] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 212] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.89664268,  0.67908835,  0.19554520,  0.18955255,  0.73444772,
          0.71419168,  0.94188952,  0.96517801, -1.17427909]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.17530060, -23.26024055, -22.88537025, -22.34073830, -22.57217026,
         -22.95246124, -23.25955200, -23.61799812, -23.03639603, -21.12484741]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.17530060, -23.26024055, -22.88537025, -22.34073830, -22.57217026,
          -22.95246124, -23.25955200, -23.61799812, -23.03639603, -21.12484741]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05045319]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0403 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 139, vnnlib ID: 139 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.98194313, -18.68232346, -13.41521168, -15.12617874, -13.36238766,
         -15.23961639, -11.65827942, -15.93192387, -18.96205139, -18.87558174]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [486]; unstable size 486; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 299, 1, 486] with unstable size 298 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 486] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 486] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [298]; unstable size 298; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 298] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 298] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.17125034, 4.88726854, 0.27177000, 2.09687996, 0.18416500, 2.01368856,
         2.31736898, 5.04107523, 4.79337168]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0644 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 140, vnnlib ID: 140 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.01308823, -19.76593781, -25.22100067, -25.57647514, -25.42583656,
         -26.01211357, -25.51028061, -24.41519165, -23.07863426, -17.48029327]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [532]; unstable size 532; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 532] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 532] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 532] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 203] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.27216339, 1.49679089, 6.10778522, 6.38268900, 6.18334293, 6.67020035,
         6.18721390, 4.92642784, 4.46745014]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0707 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 141, vnnlib ID: 141 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.90496635, -15.11729813, -17.63558197, -17.40718079, -18.01904297,
         -18.32819939, -17.60610199, -17.95012093, -15.46633625, -14.21533680]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [703]; unstable size 703; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 270, 1, 703] with unstable size 269 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 703] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 703] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [269]; unstable size 269; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 269] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 269] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.32847333,  0.70178270,  0.40967369,  0.70709515,  1.10043883,
          0.47019529,  0.52032518, -0.85370135, -1.78019547]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.90496635, -15.11729813, -17.63558197, -17.40718079, -18.01904297,
         -18.32819939, -17.60610199, -17.95012093, -15.46633625, -14.21533680]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.90496635, -15.11729908, -17.63558006, -17.40718079, -18.01904488,
          -18.32819939, -17.60610390, -17.95012093, -15.46633720, -14.21533775],
         [-16.90496635, -15.11729908, -17.63558006, -17.40718079, -18.01904488,
          -18.32819939, -17.60610390, -17.95012093, -15.46633720, -14.21533775]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.34903812, -0.90196133]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]],


         [[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0602 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 142, vnnlib ID: 142 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.14345169, -26.23081017, -22.50061417, -23.41731834, -23.96586800,
         -24.21544456, -20.18602753, -25.76428032, -26.53347778, -25.24602318]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [390]; unstable size 390; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 312, 1, 390] with unstable size 311 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 390] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 390] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [311]; unstable size 311; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 311] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 311] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.16251469, 3.85129452, 1.07807207, 2.04974055, 2.45816231, 2.71345663,
         3.85838294, 4.14238644, 3.23237848]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0773 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 143, vnnlib ID: 143 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.55906677, -26.64030838, -19.33113098, -21.43922997, -19.03748703,
         -20.97289085, -20.39774704, -20.86362457, -27.58946419, -25.17458534]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [519]; unstable size 519; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 519] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 519] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 519] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 219] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.02097797,  5.33160591, -0.73743272,  1.28090417,  0.87938404,
          0.03270650,  0.89394522,  6.65467310,  4.26477146]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.55906677, -26.64030838, -19.33113098, -21.43922997, -19.03748703,
         -20.97289085, -20.39774704, -20.86362457, -27.58946419, -25.17458534]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.90825081, -26.12090302, -18.51591682, -20.78538132, -18.67061234,
          -20.35578346, -19.77608490, -20.64961624, -26.99978256, -24.73842430]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15469551]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0065 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0787 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 144, vnnlib ID: 144 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.72182465, -25.40373611, -21.20227242, -20.08390617, -21.28728104,
         -19.64896584, -22.07214165, -21.57941437, -23.54422569, -23.66501617]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [553]; unstable size 553; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 225, 1, 553] with unstable size 224 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 553] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 553] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [224]; unstable size 224; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 224] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 224] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.95499563, 4.21736145, 0.73983383, 0.09517542, 0.76654363, 1.38522863,
         0.98252273, 2.42742252, 2.46281266]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0635 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 145, vnnlib ID: 145 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.44517517, -24.66761017, -18.86577606, -18.69302559, -20.38499641,
         -19.18245506, -20.75661469, -21.50863075, -24.90008926, -24.19531822]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [771]; unstable size 771; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 253, 1, 771] with unstable size 252 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 771] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 771] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [252]; unstable size 252; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 252] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 252] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.21118462,  4.10176945, -1.16934454, -0.72179759,  0.25676250,
          0.67854667,  1.19206476,  4.31922293,  3.50376511]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.44517517, -24.66761017, -18.86577606, -18.69302559, -20.38499641,
         -19.18245506, -20.75661469, -21.50863075, -24.90008926, -24.19531822]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.44517326, -24.66760826, -18.86577415, -18.69302559, -20.38499451,
          -19.18245316, -20.75661469, -21.50863075, -24.90009117, -24.19531822],
         [-21.44517326, -24.66760826, -18.86577415, -18.69302559, -20.38499451,
          -19.18245316, -20.75661469, -21.50863075, -24.90009117, -24.19531822]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.31667900, -0.48942757]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]],


         [[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0721 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 146, vnnlib ID: 146 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-34.38232803, -35.89345551, -38.77233124, -38.86247635, -39.62222672,
         -39.86164474, -39.87382126, -39.40642929, -30.93457031, -36.03558350]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [499]; unstable size 499; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 499] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 499] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 499] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 197] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.37971163, 3.87611699, 6.40737152, 6.38697481, 7.03273058, 7.19149876,
         7.20581627, 6.50212908, 4.14408016]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0687 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 147, vnnlib ID: 147 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-34.24032974, -37.65886307, -32.76491928, -35.87559128, -36.34276581,
         -36.02743912, -34.61969757, -36.23526382, -36.62348938, -40.18959427]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [734]; unstable size 734; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 229, 1, 734] with unstable size 228 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 734] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 734] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [228]; unstable size 228; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 228] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 228] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.42341971, 3.43717337, 2.28934169, 2.53784919, 2.29687023, 0.88679004,
         1.92648351, 2.44576788, 5.71752691]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0757 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 148, vnnlib ID: 148 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.79258919, -17.99694252, -16.45632553, -15.40058136, -16.56349564,
         -14.87314796, -17.80143356, -13.41994190, -19.54096222, -16.64786148]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [937]; unstable size 937; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 937] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 937] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 937] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 249] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.73422527, 2.70791578, 1.68733311, 0.95580506, 2.14770579, 0.50132084,
         2.85892677, 3.87416148, 1.62221193]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0685 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 149, vnnlib ID: 149 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.01166153, -22.78888702, -15.86253738, -18.02544975, -16.82504082,
         -17.96582985, -15.98325729, -20.20303345, -22.22256470, -22.36408424]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [720]; unstable size 720; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 334, 1, 720] with unstable size 333 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 720] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 720] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [333]; unstable size 333; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 333] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 333] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.70876312,  4.66763687,  1.06026280, -0.11882305,  0.88787508,
         -0.96121359,  2.31396723,  4.62897253,  4.35728931]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.01166153, -22.78888702, -15.86253738, -18.02544975, -16.82504082,
         -17.96582985, -15.98325729, -20.20303345, -22.22256470, -22.36408424]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.39785576, -22.92395973, -16.30167580, -18.20151138, -17.08473396,
          -18.17427635, -15.85140800, -20.40995026, -22.59860229, -22.46858406],
         [-20.39785576, -22.92395973, -16.30167580, -18.20151138, -17.08473396,
          -18.17427635, -15.85140800, -20.40995026, -22.59860229, -22.46858406]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.78305817, -0.45026779]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0737 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 150, vnnlib ID: 150 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-33.39692688, -33.50623703, -38.63787079, -39.79333878, -37.69999313,
         -41.03482437, -40.31786346, -38.34481812, -33.13186264, -33.37991333]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [788]; unstable size 788; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 788] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 788] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 788] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 259] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.16784954,  2.02646685,  3.53692102,  1.20165110,  4.52165127,
          3.78477335,  1.66250515, -2.21134377, -1.22387218]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-33.39692688, -33.50623703, -38.63787079, -39.79333878, -37.69999313,
         -41.03482437, -40.31786346, -38.34481812, -33.13186264, -33.37991333]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-33.39692307, -33.50624084, -38.63787079, -39.79333115, -37.69999313,
          -41.03482437, -40.31786346, -38.34482574, -33.13185501, -33.37990952],
         [-33.39692307, -33.50624084, -38.63787079, -39.79333115, -37.69999313,
          -41.03482437, -40.31786346, -38.34482574, -33.13185501, -33.37990952]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.10931778, -0.37438583, -0.12633133]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0751 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 151, vnnlib ID: 151 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.86795235, -23.21092606, -17.76663589, -16.98049545, -18.63553619,
         -17.40380287, -19.50118446, -17.26604271, -23.47448921, -21.17066383]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [654]; unstable size 654; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 654] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 654] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 654] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 260] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.18142772,  4.33078814, -0.50892019, -0.65947890,  0.37091172,
          1.13457859, -0.94743365,  4.42701197,  2.60953641]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.86795235, -23.21092606, -17.76663589, -16.98049545, -18.63553619,
         -17.40380287, -19.50118446, -17.26604271, -23.47448921, -21.17066383]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.86795235, -23.21092987, -17.76663589, -16.98049545, -18.63553619,
          -17.40380287, -19.50118637, -17.26604462, -23.47449112, -21.17066383],
         [-21.86795235, -23.21092987, -17.76663589, -16.98049545, -18.63553619,
          -17.40380287, -19.50118637, -17.26604462, -23.47449112, -21.17066383]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.36283302, -0.42330742, -0.13775826]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]],


         [[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]],


         [[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0779 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 152, vnnlib ID: 152 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.97657204, -24.17541313, -17.49859619, -20.07994652, -17.44471931,
         -20.39148903, -18.74324608, -20.42260742, -22.87066269, -23.45691490]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [494]; unstable size 494; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 271, 1, 494] with unstable size 270 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 494] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 494] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [270]; unstable size 270; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 270] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 270] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.14928675,  4.51440144,  1.64132619, -1.13099444,  1.91445684,
          0.33408707,  1.53952134,  3.79073215,  4.14098549]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.97657204, -24.17541313, -17.49859619, -20.07994652, -17.44471931,
         -20.39148903, -18.74324608, -20.42260742, -22.87066269, -23.45691490]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.97657204, -24.17541313, -17.49859619, -20.07994652, -17.44471931,
          -20.39148903, -18.74324608, -20.42260742, -22.87066269, -23.45691490]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05387688]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-9.41269815e-01, -9.09523785e-01, -1.33809519e+00,  ...,
            -6.39682531e-01,  7.46032670e-02,  1.85714364e-01],
           [-5.28571427e-01, -7.98412681e-01, -1.25873005e+00,  ...,
            -5.76190472e-01, -2.42857039e-01,  1.06349289e-01],
           [-4.65079248e-01, -4.01587188e-01, -7.66666651e-01,  ...,
            -3.85714173e-01, -3.53968143e-01, -1.63491964e-01],
           ...,
           [ 1.97936535e+00,  1.10634947e+00,  1.42380977e+00,  ...,
             1.94761932e+00,  1.94761932e+00,  1.97936535e+00],
           [ 1.94761932e+00,  1.47142887e+00,  1.37619078e+00,  ...,
             1.96349227e+00,  1.82063520e+00,  1.80476213e+00],
           [ 1.99523830e+00,  1.78888917e+00,  1.85238123e+00,  ...,
             1.99523830e+00,  1.99523830e+00,  1.94761932e+00]],

          [[-1.12721294e-01, -1.44927412e-01, -6.28019273e-01,  ...,
            -2.25442708e-01,  3.54267418e-01,  6.28019392e-01],
           [ 2.09339887e-01, -1.12721294e-01, -5.47504008e-01,  ...,
            -2.89854944e-01,  1.22934580e-07,  5.47504127e-01],
           [ 1.93236828e-01,  2.25442946e-01, -1.61029361e-02,  ...,
            -8.05151686e-02, -8.05151686e-02,  2.89855182e-01],
           ...,
           [ 1.70692456e+00,  8.37359190e-01,  1.14331758e+00,  ...,
             1.75523376e+00,  1.73913074e+00,  1.78743994e+00],
           [ 1.73913074e+00,  1.20772982e+00,  1.04669893e+00,  ...,
             1.72302771e+00,  1.57810009e+00,  1.61030626e+00],
           [ 1.85185218e+00,  1.57810009e+00,  1.56199706e+00,  ...,
             1.75523376e+00,  1.75523376e+00,  1.73913074e+00]],

          [[-1.39280367e+00, -1.30284870e+00, -1.61769128e+00,  ...,
            -1.27286363e+00, -7.48125911e-01, -3.73313308e-01],
           [-1.19790113e+00, -1.39280367e+00, -1.60269880e+00,  ...,
            -1.25787115e+00, -1.03298354e+00, -4.33283329e-01],
           [-1.13793111e+00, -1.21289361e+00, -1.45277369e+00,  ...,
            -1.18290865e+00, -1.03298354e+00, -7.18140900e-01],
           ...,
           [ 1.84557760e+00,  9.76012170e-01,  1.24587750e+00,  ...,
             1.87556267e+00,  1.84557760e+00,  1.87556267e+00],
           [ 1.87556267e+00,  1.33583248e+00,  1.15592217e+00,  ...,
             1.83058512e+00,  1.69565260e+00,  1.69565260e+00],
           [ 1.96551764e+00,  1.69565260e+00,  1.68066013e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.84557760e+00]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0590 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 153, vnnlib ID: 153 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.82804489, -23.63042831, -29.23712158, -28.24177551, -29.14320946,
         -29.41248703, -29.22246933, -29.10352325, -24.23150253, -21.39186287]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [726]; unstable size 726; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 265, 1, 726] with unstable size 264 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 726] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 726] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [264]; unstable size 264; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 264] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 264] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.64157295, 1.36549687, 5.86060524, 5.40555239, 5.76025724, 6.48044920,
         6.13686466, 6.01794577, 1.13634682]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0722 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 154, vnnlib ID: 154 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.78194427, -31.17414474, -25.47965050, -24.27825546, -24.95229912,
         -24.05517769, -25.49534607, -26.49033356, -27.99845505, -31.18796158]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [942]; unstable size 942; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 242, 1, 942] with unstable size 241 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 942] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 942] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [241]; unstable size 241; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 241] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 241] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.41716528,  5.54713678,  0.52021480, -0.06935596, -0.04526925,
          0.63125235,  1.37135768,  2.56105804,  5.77544641]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-29.78194427, -31.17414474, -25.47965050, -24.27825546, -24.95229912,
         -24.05517769, -25.49534607, -26.49033356, -27.99845505, -31.18796158]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.46it/s]100%|██████████| 1/1 [00:00<00:00,  8.45it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.30881500, -30.56450272, -25.00361443, -23.76336479, -24.40058708,
          -23.71853256, -24.78523254, -26.12451744, -27.38202095, -30.68591499],
         [-29.30881500, -30.56450272, -25.00361443, -23.76336479, -24.40058708,
          -23.71853256, -24.78523254, -26.12451744, -27.38202095, -30.68591499]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04483223, 0.68205452]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1211 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 21.08385467529297
alpha/beta optimization time: 1.2588253021240234
initial alpha-crown bounds: tensor([[ 4.47514009,  5.59848595,  0.56283295, -0.05797219, -0.01270866,
          0.67102218,  1.41879511,  2.60586190,  5.82239676]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.05797219276428223
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.55456805229187
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.55452036857605
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.55449199676514
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.5544707775116
Verifying property 3 with 1 instances.
##### Instance 154 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.05797219]], device='cuda:0') need to verify.
Model prediction is: tensor([-29.78194427, -31.17414474, -25.47965050, -24.27825546, -24.95229912,
        -24.05517769, -25.49534607, -26.49033356, -27.99845505, -31.18796158],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.05797219]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 942
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 235
Node /15 input 0: size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 1190
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010657310485839844
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05797219276428223
10 lb beta sum: 0.0, worst -0.05797398090362549
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0545    transfer 0.0001    finalize 0.0001    func 0.0550    
Accumulated time: func 0.0550    prepare 0.0002    bound 0.0545    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 72] 
split level 3: [/input-8, 1699] 
split level 4: [/input-12, 31] 
split level 5: [/input-8, 403] 
split level 6: [/input-8, 770] 
split level 7: [/input-8, 1732] 
split level 8: [/input-8, 1722] 
split level 9: [/input-8, 140] 
split level 10: [/input-8, 1706] 
split level 11: [/input-8, 1731] 
split level 12: [/input-8, 1713] 
split level 13: [/input-8, 405] 
split level 14: [/input-8, 141] 
split level 15: [/input-8, 771] 
split level 16: [/input-8, 418] 
split level 17: [/input-8, 592] 
split level 18: [/input-8, 1301] 
split level 19: [/input-8, 1716] 
split level 20: [/input-8, 779] 
split level 21: [/input-8, 453] 
split level 22: [/input-8, 443] 
split level 23: [/input-8, 1325] 
split level 24: [/input-8, 138] 
split level 25: [/input-8, 1499] 
split level 26: [/input-8, 906] 
split level 27: [/input-8, 1834] 
split level 28: [/input-8, 1701] 
split level 29: [/input-8, 1171] 
split level 30: [/input, 1510] 
split level 31: [/input-8, 1028] 
split level 32: [/input-8, 588] 
split level 33: [/input-8, 580] 
split level 34: [/input, 1448] 
split level 35: [/input, 2968] 
split level 36: [/input-8, 731] 
split level 37: [/input-8, 1261] 
split level 38: [/input, 2662] 
split level 39: [/input-8, 772] 
split level 40: [/input-8, 87] 
split level 41: [/input-8, 56] 
split level 42: [/input-8, 1089] 
split level 43: [/input-8, 1029] 
split level 44: [/input-8, 582] 
split level 45: [/input-8, 1733] 
split level 46: [/input-8, 994] 
split level 47: [/input-8, 1782] 
split level 48: [/input-8, 1147] 
split level 49: [/input-8, 382] 
split level 50: [/input, 1499] 
split level 51: [/input-8, 406] 
split level 52: [/input-8, 579] 
split level 53: [/input-8, 1337] 
split level 54: [/input-8, 397] 
split level 55: [/input-8, 1662] 
split level 56: [/input-8, 97] 
split level 57: [/input-8, 595] 
split level 58: [/input-8, 75] 
split level 59: [/input-8, 1270] 
split level 60: [/input-8, 578] 
split level 61: [/input-8, 1265] 
split level 62: [/input-8, 454] 
split level 63: [/input-8, 1730] 
split level 64: [/input, 581] 
split level 65: [/input-8, 1302] 
split level 66: [/input-8, 1342] 
split level 67: [/input, 1913] 
split level 68: [/input-8, 105] 
split level 69: [/input, 1449] 
split level 70: [/input-8, 1953] 
split level 71: [/input-8, 993] 
split level 72: [/input-8, 95] 
split level 73: [/input-8, 235] 
split level 74: [/input-8, 1593] 
split level 75: [/input-8, 374] 
split level 76: [/input, 3262] 
split level 77: [/input-8, 142] 
split level 78: [/input-8, 91] 
split level 79: [/input, 3010] 
split level 80: [/input-8, 1576] 
split level 81: [/input-8, 1294] 
split level 82: [/input, 1912] 
split level 83: [/input-8, 218] 
split level 84: [/input-8, 945] 
split level 85: [/input-8, 57] 
split level 86: [/input-8, 1842] 
split level 87: [/input-8, 32] 
split level 88: [/input-8, 956] 
split level 89: [/input-8, 226] 
split level 90: [/input-8, 1752] 
split level 91: [/input, 1396] 
split level 92: [/input, 2730] 
split level 93: [/input, 1491] 
split level 94: [/input, 2742] 
split level 95: [/input, 131] 
split level 96: [/input, 3347] 
split level 97: [/input, 56] 
split level 98: [/input-8, 149] 
split level 99: [/input-8, 1293] 
split level 100: [/input-8, 379] 
split level 101: [/input, 2516] 
split level 102: [/input, 292] 
split level 103: [/input, 2660] 
split level 104: [/input, 1497] 
split level 105: [/input, 3345] 
split level 106: [/input, 1478] 
split level 107: [/input, 3637] 
split level 108: [/input-8, 103] 
split level 109: [/input-8, 1791] 
split level 110: [/input-8, 1965] 
split level 111: [/input, 803] 
split level 112: [/input-8, 424] 
split level 113: [/input-8, 584] 
split level 114: [/input, 3351] 
split level 115: [/input, 787] 
split level 116: [/input-8, 79] 
split level 117: [/input-8, 1959] 
split level 118: [/input, 2474] 
split level 119: [/input-8, 432] 
split level 120: [/input, 2765] 
split level 121: [/input-8, 1283] 
split level 122: [/input, 807] 
split level 123: [/input-8, 1310] 
split level 124: [/input-8, 423] 
split level 125: [/input, 2663] 
split level 126: [/input, 3228] 
split level 127: [/input-8, 150] 
split level 128: [/input-8, 1284] 
split level 129: [/input, 940] 
split level 130: [/input-8, 143] 
split level 131: [/input-8, 236] 
split level 132: [/input, 819] 
split level 133: [/input, 424] 
split level 134: [/input, 2498] 
split level 135: [/input, 2750] 
split level 136: [/input-8, 1591] 
split level 137: [/input, 168] 
split level 138: [/input-8, 1758] 
split level 139: [/input, 177] 
split level 140: [/input, 2897] 
split level 141: [/input, 55] 
split level 142: [/input, 141] 
split level 143: [/input-8, 1971] 
split level 144: [/input, 179] 
split level 145: [/input, 2502] 
split level 146: [/input, 3566] 
split level 147: [/input, 282] 
split level 148: [/input, 791] 
split level 149: [/input, 792] 
split level 150: [/input-8, 151] 
split level 151: [/input-8, 1729] 
split level 152: [/input, 1706] 
split level 153: [/input, 2851] 
split level 154: [/input-8, 442] 
split level 155: [/input-8, 1851] 
split level 156: [/input-8, 1774] 
split level 157: [/input, 293] 
split level 158: [/input, 3123] 
split level 159: [/input, 2282] 
split level 160: [/input, 2540] 
split level 161: [/input, 308] 
split level 162: [/input, 2749] 
split level 163: [/input, 3279] 
split level 164: [/input, 809] 
split level 165: [/input, 934] 
split level 166: [/input-8, 1735] 
split level 167: [/input, 1525] 
split level 168: [/input, 467] 
split level 169: [/input, 2547] 
split level 170: [/input, 1489] 
split level 171: [/input, 1714] 
split level 172: [/input, 2103] 
split level 173: [/input, 2686] 
split level 174: [/input, 283] 
split level 175: [/input, 3116] 
split level 176: [/input-8, 2038] 
split level 177: [/input, 3419] 
split level 178: [/input, 194] 
split level 179: [/input, 215] 
split level 180: [/input-12, 61] 
split level 181: [/input, 924] 
split level 182: [/input, 811] 
split level 183: [/input, 810] 
split level 184: [/input, 348] 
split level 185: [/input, 296] 
split level 186: [/input, 3361] 
split level 187: [/input, 362] 
split level 188: [/input-8, 1271] 
split level 189: [/input, 298] 
split level 190: [/input, 2269] 
split level 191: [/input, 785] 
split level 192: [/input, 2481] 
split level 193: [/input, 346] 
split level 194: [/input, 2852] 
split level 195: [/input, 3311] 
split level 196: [/input, 2246] 
split level 197: [/input, 3511] 
split level 198: [/input, 769] 
split level 199: [/input, 140] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05793619155883789
10 lb beta sum: 0.0, worst -0.057932496070861816
Time: prepare 0.0114    bound 0.1000    transfer 0.0012    finalize 0.0032    func 0.1184    
Accumulated time: func 0.1734    prepare 0.0216    bound 0.1546    transfer 0.0013    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.09598291) min lb tensor(-0.05792987)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010720014572143555 
BICCOS Cumulative time: 0.010720014572143555
Preprocessing time: 0.009952068328857422 Inference time: 0.00011706352233886719 Add cuts time: 6.580352783203125e-05 Cut analysis time: 0.0005850791931152344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05414 (1), -0.05389 (1), -0.05389 (1), -0.05388 (1), -0.05380 (1), -0.05374 (1), -0.05374 (1), -0.05365 (1), -0.05364 (1), -0.05344 (1), -0.05333 (1), -0.05316 (1), -0.05313 (1), -0.05308 (1), -0.05307 (1), -0.05298 (1), -0.05287 (1), -0.05277 (1), -0.05268 (1), -0.05248 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5266    set_bounds 0.0090    solve 0.1185    add 0.1072    
Accumulated time: pickout 0.0003    decision 0.5266    set_bounds 0.0090    solve 0.1185    add 0.1072    
Current (lb-rhs): -0.05413895845413208
50 domains visited
Cumulative time: 0.8401110172271729

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 31] [/input-12, 31] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-8, 403] [/input-8, 403] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 140] [/input-8, 140] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0527874231338501
10 lb beta sum: 0.36995184421539307, worst -0.0508044958114624
Time: prepare 0.0074    bound 0.1213    transfer 0.0007    finalize 0.0026    func 0.1347    
Accumulated time: func 0.3081    prepare 0.0293    bound 0.2759    transfer 0.0020    finalize 0.0060    
all_split False
======================Cut inference begins======================
max lb tensor(0.06797994) min lb tensor(-0.05075514)
Number of Verified Splits: 50 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.014806032180786133 
BICCOS Cumulative time: 0.025526046752929688
Preprocessing time: 0.011716604232788086 Inference time: 0.0016810894012451172 Add cuts time: 0.0011684894561767578 Cut analysis time: 0.00023984909057617188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03598 (2), -0.03594 (2), -0.03589 (2), -0.03582 (2), -0.03578 (2), -0.03569 (2), -0.03545 (2), -0.03529 (2), -0.03526 (2), -0.03490 (2), -0.03488 (2), -0.03486 (2), -0.03480 (2), -0.03462 (2), -0.03449 (2), -0.03438 (2), -0.03436 (2), -0.03423 (2), -0.03415 (2), -0.03399 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0201    set_bounds 0.0123    solve 0.1348    add 0.0799    
Accumulated time: pickout 0.0014    decision 0.5467    set_bounds 0.0213    solve 0.2533    add 0.1871    
Current (lb-rhs): -0.03598207235336304
100 domains visited
Cumulative time: 1.1032741069793701

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 72] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 72] [/input-12, 31] [/input-12, 72] [/input-12, 72] [/input-12, 31] [/input-12, 72] [/input-12, 72] [/input-12, 31] 
split level 2: [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-12, 31] [/input-8, 403] [/input-12, 31] [/input-8, 403] [/input-8, 403] 
split level 3: [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] 
cut re-enabled after branching node selection
0 lb beta sum: 0.46294793486595154, worst -0.03598213195800781
10 lb beta sum: 0.46294793486595154, worst -0.036067888140678406
Time: prepare 0.0172    bound 0.1211    transfer 0.0007    finalize 0.0026    func 0.1443    
Accumulated time: func 0.4525    prepare 0.0467    bound 0.3970    transfer 0.0027    finalize 0.0085    
all_split False
======================Cut inference begins======================
max lb tensor(0.07998659) min lb tensor(-0.03591579)
Number of Verified Splits: 48 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.015164613723754883 
BICCOS Cumulative time: 0.04069066047668457
Preprocessing time: 0.011737823486328125 Inference time: 0.0018050670623779297 Add cuts time: 0.0013761520385742188 Cut analysis time: 0.0002455711364746094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01575 (3), -0.01568 (3), -0.01559 (3), -0.01543 (3), -0.01540 (3), -0.01539 (3), -0.01483 (3), -0.01435 (3), -0.01434 (3), -0.01357 (3), -0.01356 (3), -0.01348 (3), -0.01347 (3), -0.01302 (3), -0.01298 (3), -0.01253 (3), -0.01252 (3), -0.01245 (3), -0.01239 (3), -0.01238 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0194    set_bounds 0.0150    solve 0.1444    add 0.0838    
Accumulated time: pickout 0.0025    decision 0.5660    set_bounds 0.0362    solve 0.3977    add 0.2709    
Current (lb-rhs): -0.01575128734111786
150 domains visited
Cumulative time: 1.3822941780090332

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-12, 31] [/input-12, 31] 
split level 2: [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] 
split level 3: [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4651600420475006, worst -0.015750691294670105
10 lb beta sum: 0.4651600420475006, worst -0.015764102339744568
Time: prepare 0.0170    bound 0.1204    transfer 0.0011    finalize 0.0026    func 0.1443    
Accumulated time: func 0.5968    prepare 0.0640    bound 0.5174    transfer 0.0038    finalize 0.0111    
all_split False
======================Cut inference begins======================
max lb tensor(0.08410205) min lb tensor(-0.01530284)
Number of Verified Splits: 56 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 2
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.015579462051391602 
BICCOS Cumulative time: 0.05627012252807617
Preprocessing time: 0.011558294296264648 Inference time: 0.002310037612915039 Add cuts time: 0.0008237361907958984 Cut analysis time: 0.0008873939514160156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00274 (4), -0.00272 (4), -0.00271 (4), -0.00270 (4), -0.00270 (4), -0.00269 (4), -0.00267 (4), -0.00266 (4), -0.00258 (4), -0.00258 (4), -0.00242 (4), -0.00239 (4), -0.00217 (4), -0.00211 (4), -0.00202 (4), -0.00200 (4), -0.00196 (4), -0.00187 (4), -0.00177 (4), -0.00174 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0153    solve 0.1444    add 0.2191    
Accumulated time: pickout 0.0035    decision 0.5855    set_bounds 0.0516    solve 0.5421    add 0.4900    
Current (lb-rhs): -0.0027379244565963745
200 domains visited
Cumulative time: 1.7975423336029053

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 140] [/input-8, 140] [/input-8, 1713] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 140] [/input-8, 403] [/input-8, 140] [/input-8, 140] 
split level 2: [/input-8, 771] [/input-8, 771] [/input-8, 140] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] 
split level 3: [/input-8, 418] [/input-8, 418] [/input-8, 771] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0053626298904418945
10 lb beta sum: 0.36026012897491455, worst -0.0029265880584716797
Time: prepare 0.0078    bound 0.1373    transfer 0.0007    finalize 0.0025    func 0.1510    
Accumulated time: func 0.7478    prepare 0.0721    bound 0.6547    transfer 0.0045    finalize 0.0136    
all_split False
======================Cut inference begins======================
max lb tensor(0.24081010) min lb tensor(-0.00249052)
Number of Verified Splits: 327 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.03201127052307129 
BICCOS Cumulative time: 0.08828139305114746
Preprocessing time: 0.01156926155090332 Inference time: 0.015550374984741211 Add cuts time: 0.0044116973876953125 Cut analysis time: 0.0004799365997314453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00249 (5), -0.00248 (5), -0.00123 (5), -0.00118 (5), -0.00106 (5), -0.00101 (5), -0.00085 (5), -0.00084 (5), 
Length of domains: 8
Time: pickout 0.0012    decision 0.0197    set_bounds 0.0157    solve 0.1511    add 0.1054    
Accumulated time: pickout 0.0047    decision 0.6052    set_bounds 0.0673    solve 0.6932    add 0.5954    
Current (lb-rhs): -0.002490520477294922
208 domains visited
Cumulative time: 2.1228787899017334

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1499]), tensor([-1.]), tensor([0]), tensor([5.75662906e-20]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1499,  403]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.75662906e-20, 1.86638697e-03]), tensor([0, 3])), '/input-12': ([72, 31], [-1.0, -1.0], [0, 0], [5.756670415243884e-20, 0.007435308303683996], [1, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [5.756629056213256e-20, 0.005106733646243811], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([5.75667042e-20, 7.43530830e-03, 1.40471179e-02]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [5.756629056213256e-20, 0.005106733646243811], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.75667042e-20, 7.43530830e-03, 5.02185358e-05]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1499,  403]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.75662906e-20, 1.98237761e-03]), tensor([0, 3])), '/input-12': ([72, 31], [-1.0, 1.0], [0, 0], [5.756670415243884e-20, 0.007665739860385656], [1, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [5.756629056213256e-20, 0.004817829933017492], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.75667042e-20, 7.66573986e-03, 1.40051562e-02]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [5.756629056213256e-20, 0.004817829933017492], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([5.75667042e-20, 7.66573986e-03, 4.70594896e-05]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1499,  403]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.75662906e-20, 1.80040463e-03]), tensor([0, 3])), '/input-12': ([72, 31], [1.0, -1.0], [0, 0], [5.756691094759198e-20, 0.007057891692966223], [1, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [5.756629056213256e-20, 0.00527976593002677], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([5.75669109e-20, 7.05789169e-03, 1.43486280e-02]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [5.756629056213256e-20, 0.00527976593002677], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.75669109e-20, 7.05789169e-03, 1.44855512e-05]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 418], [1.0, -1.0], [0, 0], [5.756629056213256e-20, 0.0021886692848056555], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.75669109e-20, 7.82834180e-03, 1.43433232e-02]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 418], [1.0, -1.0], [0, 0], [5.756629056213256e-20, 0.0021886692848056555], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([5.75669109e-20, 7.82834180e-03, 2.77179643e-03]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 418], [1.0, 1.0], [0, 0], [5.756629056213256e-20, 0.002805994590744376], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.75669109e-20, 7.82834180e-03, 1.45483632e-02]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 418], [1.0, 1.0], [0, 0], [5.756629056213256e-20, 0.002805994590744376], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([5.75669109e-20, 7.82834180e-03, 2.88403197e-03]), tensor([1, 2, 4]))}
Shallow branching resets to n domains:  14
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.057881295680999756
10 lb beta sum: 0.7825854420661926, worst -0.05462363362312317
Time: prepare 0.0006    bound 0.1336    transfer 0.0002    finalize 0.0002    func 0.1347    
Accumulated time: func 0.8825    prepare 0.0727    bound 0.7883    transfer 0.0047    finalize 0.0138    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 72] [/input-8, 770] [/input-8, 770] [/input-8, 770] 
split level 2: [/input-12, 31] [/input-8, 140] [/input-8, 140] [/input-8, 140] 
split level 3: [/input-8, 403] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] 
split level 4: [/input-8, 140] [/input-8, 771] [/input-8, 771] [/input-8, 771] 
split level 5: [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.697033166885376, worst -0.03240135312080383
10 lb beta sum: 0.7101495265960693, worst -0.032248467206954956
Time: prepare 0.0110    bound 0.1327    transfer 0.0020    finalize 0.0017    func 0.1490    
Accumulated time: func 1.0316    prepare 0.0840    bound 0.9210    transfer 0.0067    finalize 0.0155    
all_split False
======================Cut inference begins======================
max lb tensor(0.06786299) min lb tensor(-0.03220597)
Number of Verified Splits: 224 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.7288017868995667, worst -0.2074681669473648
10 lb beta sum: 0.7430171370506287, worst -0.031287312507629395
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 3
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.2766122817993164 
BICCOS Cumulative time: 0.36489367485046387
Preprocessing time: 0.007011890411376953 Inference time: 0.2649965286254883 Add cuts time: 0.004031181335449219 Cut analysis time: 0.0005726814270019531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03221 (6), -0.03194 (6), -0.03129 (6), -0.03046 (6), -0.03041 (6), -0.03018 (6), -0.02950 (6), -0.02854 (6), -0.02758 (6), -0.02715 (6), -0.02664 (6), -0.02654 (6), -0.02645 (6), -0.02635 (6), -0.02581 (6), -0.02545 (6), -0.02523 (6), -0.02488 (6), -0.02479 (6), -0.02460 (6), 
Length of domains: 32
Time: pickout 0.0007    decision 0.0189    set_bounds 0.0262    solve 0.1491    add 0.0011    
Accumulated time: pickout 0.0054    decision 0.6241    set_bounds 0.0935    solve 0.8423    add 0.5965    
Current (lb-rhs): -0.0322059690952301
240 domains visited
Cumulative time: 2.7609643936157227

BaB round 2
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] 
split level 1: [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] 
split level 2: [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.030573725700378418
10 lb beta sum: 0.246751606464386, worst -0.02967393398284912
Time: prepare 0.0050    bound 0.1326    transfer 0.0005    finalize 0.0012    func 0.1411    
Accumulated time: func 1.1727    prepare 0.0892    bound 1.0537    transfer 0.0072    finalize 0.0167    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00395069) min lb tensor(-0.02965039)
Number of Verified Splits: 0 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 11.
#cuts 1-3: 3
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.007622957229614258 
BICCOS Cumulative time: 0.3725166320800781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02965 (9), -0.02942 (9), -0.02866 (9), -0.02787 (9), -0.02784 (9), -0.02760 (9), -0.02760 (9), -0.02733 (9), -0.02687 (9), -0.02668 (9), -0.02594 (9), -0.02583 (9), -0.02583 (9), -0.02552 (9), -0.02523 (9), -0.02491 (9), -0.02481 (9), -0.02464 (9), -0.02418 (9), -0.02415 (9), 
Length of domains: 256
Time: pickout 0.0015    decision 0.0157    set_bounds 0.0134    solve 0.1412    add 0.0021    
Accumulated time: pickout 0.0069    decision 0.6399    set_bounds 0.1070    solve 0.9834    add 0.5987    
Current (lb-rhs): -0.029650390148162842
496 domains visited
Cumulative time: 2.9430558681488037

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-8, 1731] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-8, 1731] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-8, 1731] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2941170334815979, worst -0.029650390148162842
10 lb beta sum: 0.2940831780433655, worst -0.02962934970855713
Time: prepare 0.0219    bound 0.1358    transfer 0.0013    finalize 0.0025    func 0.1654    
Accumulated time: func 1.3380    prepare 0.1113    bound 1.1895    transfer 0.0084    finalize 0.0193    
all_split False
======================Cut inference begins======================
max lb tensor(0.26335844) min lb tensor(-0.02961797)
Number of Verified Splits: 103 of 512
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.025914669036865234 
BICCOS Cumulative time: 0.39843130111694336
Preprocessing time: 0.01445627212524414 Inference time: 0.00896000862121582 Add cuts time: 0.0021696090698242188 Cut analysis time: 0.0003287792205810547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02962 (10), -0.02872 (10), -0.02865 (10), -0.02782 (10), -0.02757 (10), -0.02712 (10), -0.02689 (10), -0.02688 (10), -0.02668 (10), -0.02619 (10), -0.02579 (10), -0.02532 (10), -0.02506 (10), -0.02491 (10), -0.02479 (10), -0.02459 (10), -0.02442 (10), -0.02437 (10), -0.02413 (10), -0.02404 (10), 
Length of domains: 409
Time: pickout 0.0036    decision 0.0229    set_bounds 0.0226    solve 0.1655    add 0.0020    
Accumulated time: pickout 0.0105    decision 0.6628    set_bounds 0.1296    solve 1.1489    add 0.6006    
Current (lb-rhs): -0.02961796522140503
905 domains visited
Cumulative time: 3.1865925788879395

BaB round 4
batch: 409
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-8, 1701] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-8, 1731] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028964459896087646
10 lb beta sum: 0.4749464690685272, worst -0.0289420485496521
Time: prepare 0.0160    bound 0.1454    transfer 0.0042    finalize 0.0044    func 0.1754    
Accumulated time: func 1.5135    prepare 0.1275    bound 1.3350    transfer 0.0126    finalize 0.0237    
all_split False
======================Cut inference begins======================
max lb tensor(0.64098537) min lb tensor(-0.02892703)
Number of Verified Splits: 661 of 818
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 11
#cuts >= 20: 0
BICCOS time: 0.0970618724822998 
BICCOS Cumulative time: 0.49549317359924316
Preprocessing time: 0.023515939712524414 Inference time: 0.06366133689880371 Add cuts time: 0.009437799453735352 Cut analysis time: 0.0004467964172363281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02893 (11), -0.02870 (11), -0.02713 (11), -0.02709 (11), -0.02686 (11), -0.02569 (11), -0.02531 (11), -0.02434 (11), -0.02411 (11), -0.02393 (11), -0.02388 (11), -0.02386 (11), -0.02371 (11), -0.02370 (11), -0.02334 (11), -0.02319 (11), -0.02293 (11), -0.02227 (11), -0.02210 (11), -0.02209 (11), 
Length of domains: 157
Time: pickout 0.0056    decision 0.0385    set_bounds 0.0360    solve 0.1757    add 0.0016    
Accumulated time: pickout 0.0161    decision 0.7013    set_bounds 0.1656    solve 1.3246    add 0.6023    
Current (lb-rhs): -0.0289270281791687
1062 domains visited
Cumulative time: 3.544581413269043

BaB round 5
batch: 157
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028099536895751953
10 lb beta sum: 0.6019769310951233, worst -0.027737736701965332
Time: prepare 0.0062    bound 0.1343    transfer 0.0011    finalize 0.0015    func 0.1452    
Accumulated time: func 1.6586    prepare 0.1340    bound 1.4692    transfer 0.0137    finalize 0.0252    
all_split False
======================Cut inference begins======================
max lb tensor(0.22815895) min lb tensor(-0.02772844)
Number of Verified Splits: 219 of 314
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.033219337463378906 
BICCOS Cumulative time: 0.5287125110626221
Preprocessing time: 0.009170293807983398 Inference time: 0.0216672420501709 Add cuts time: 0.0020182132720947266 Cut analysis time: 0.0003635883331298828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02773 (12), -0.02723 (12), -0.02589 (12), -0.02585 (12), -0.02537 (12), -0.02412 (12), -0.02336 (12), -0.02269 (12), -0.02234 (12), -0.02217 (12), -0.02193 (12), -0.02189 (12), -0.02168 (12), -0.02151 (12), -0.02138 (12), -0.02116 (12), -0.02084 (12), -0.02052 (12), -0.02048 (12), -0.02037 (12), 
Length of domains: 95
Time: pickout 0.0042    decision 0.0207    set_bounds 0.0133    solve 0.1452    add 0.0011    
Accumulated time: pickout 0.0203    decision 0.7220    set_bounds 0.1789    solve 1.4698    add 0.6034    
Current (lb-rhs): -0.02772843837738037
1157 domains visited
Cumulative time: 3.7638700008392334

BaB round 6
batch: 95
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1028] [/input-8, 1028] [/input-8, 772] [/input-8, 772] [/input-8, 1028] [/input-8, 1028] [/input-8, 772] [/input-8, 772] [/input-8, 1028] [/input-8, 772] 
split level 1: [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02567964792251587
10 lb beta sum: 0.757038414478302, worst -0.025632083415985107
Time: prepare 0.0072    bound 0.1381    transfer 0.0007    finalize 0.0018    func 0.1503    
Accumulated time: func 1.8089    prepare 0.1414    bound 1.6073    transfer 0.0144    finalize 0.0270    
all_split False
======================Cut inference begins======================
max lb tensor(0.00272644) min lb tensor(-0.02560431)
Number of Verified Splits: 20 of 380
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.014544010162353516 
BICCOS Cumulative time: 0.5432565212249756
Preprocessing time: 0.010973215103149414 Inference time: 0.0024039745330810547 Add cuts time: 0.0003495216369628906 Cut analysis time: 0.0008172988891601562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02560 (14), -0.02428 (14), -0.02402 (14), -0.02372 (14), -0.02327 (14), -0.02324 (14), -0.02289 (14), -0.02287 (14), -0.02270 (14), -0.02245 (14), -0.02214 (14), -0.02205 (14), -0.02202 (14), -0.02170 (14), -0.02169 (14), -0.02137 (14), -0.02135 (14), -0.02093 (14), -0.02092 (14), -0.02066 (14), 
Length of domains: 360
Time: pickout 0.0019    decision 0.0194    set_bounds 0.0174    solve 0.1504    add 0.0024    
Accumulated time: pickout 0.0222    decision 0.7413    set_bounds 0.1964    solve 1.6202    add 0.6058    
Current (lb-rhs): -0.025604307651519775
1517 domains visited
Cumulative time: 3.970325469970703

BaB round 7
batch: 360
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8780561089515686, worst -0.023971855640411377
10 lb beta sum: 0.8802483677864075, worst -0.023937642574310303
Time: prepare 0.0311    bound 0.1439    transfer 0.0022    finalize 0.0030    func 0.1850    
Accumulated time: func 1.9939    prepare 0.1726    bound 1.7512    transfer 0.0166    finalize 0.0301    
all_split False
======================Cut inference begins======================
max lb tensor(0.00128043) min lb tensor(-0.02392644)
Number of Verified Splits: 18 of 720
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.02392721176147461 
BICCOS Cumulative time: 0.5671837329864502
Preprocessing time: 0.020960092544555664 Inference time: 0.002245664596557617 Add cuts time: 0.00035452842712402344 Cut analysis time: 0.0003669261932373047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02393 (15), -0.02384 (15), -0.02261 (15), -0.02253 (15), -0.02237 (15), -0.02234 (15), -0.02231 (15), -0.02222 (15), -0.02204 (15), -0.02200 (15), -0.02197 (15), -0.02195 (15), -0.02144 (15), -0.02143 (15), -0.02141 (15), -0.02115 (15), -0.02111 (15), -0.02107 (15), -0.02103 (15), -0.02100 (15), 
Length of domains: 702
Time: pickout 0.0054    decision 0.0309    set_bounds 0.1771    solve 0.1852    add 0.0035    
Accumulated time: pickout 0.0276    decision 0.7722    set_bounds 0.3735    solve 1.8054    add 0.6093    
Current (lb-rhs): -0.02392643690109253
2219 domains visited
Cumulative time: 4.398629188537598

BaB round 8
batch: 702
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8706216216087341, worst -0.023365139961242676
10 lb beta sum: 0.8706216216087341, worst -0.02334284782409668
Time: prepare 0.0592    bound 0.1529    transfer 0.0032    finalize 0.0063    func 0.2307    
Accumulated time: func 2.2246    prepare 0.2321    bound 1.9042    transfer 0.0197    finalize 0.0364    
all_split False
======================Cut inference begins======================
max lb tensor(0.01008725) min lb tensor(-0.02333695)
Number of Verified Splits: 250 of 1404
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.07672739028930664 
BICCOS Cumulative time: 0.6439111232757568
Preprocessing time: 0.04400205612182617 Inference time: 0.030023574829101562 Add cuts time: 0.0022804737091064453 Cut analysis time: 0.00042128562927246094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02334 (16), -0.02323 (16), -0.02235 (16), -0.02232 (16), -0.02202 (16), -0.02197 (16), -0.02194 (16), -0.02192 (16), -0.02169 (16), -0.02159 (16), -0.02145 (16), -0.02142 (16), -0.02139 (16), -0.02134 (16), -0.02127 (16), -0.02125 (16), -0.02111 (16), -0.02108 (16), -0.02104 (16), -0.02101 (16), 
Length of domains: 1154
Time: pickout 0.0121    decision 0.0514    set_bounds 0.0590    solve 0.2316    add 0.0049    
Accumulated time: pickout 0.0396    decision 0.8236    set_bounds 0.4325    solve 2.0370    add 0.6142    
Current (lb-rhs): -0.023336946964263916
3373 domains visited
Cumulative time: 4.837193727493286

BaB round 9
batch: 1154
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02251720428466797
10 lb beta sum: 0.7509317994117737, worst -0.022509872913360596
Time: prepare 0.0439    bound 0.1897    transfer 0.0043    finalize 0.0103    func 0.2640    
Accumulated time: func 2.4887    prepare 0.2762    bound 2.0938    transfer 0.0241    finalize 0.0467    
all_split False
======================Cut inference begins======================
max lb tensor(0.22982210) min lb tensor(-0.02250504)
Number of Verified Splits: 953 of 2308
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.19698286056518555 
BICCOS Cumulative time: 0.8408939838409424
Preprocessing time: 0.06999468803405762 Inference time: 0.1184394359588623 Add cuts time: 0.008058309555053711 Cut analysis time: 0.0004904270172119141
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02251 (17), -0.02240 (17), -0.02176 (17), -0.02173 (17), -0.02139 (17), -0.02138 (17), -0.02135 (17), -0.02127 (17), -0.02119 (17), -0.02109 (17), -0.02086 (17), -0.02083 (17), -0.02080 (17), -0.02077 (17), -0.02063 (17), -0.02062 (17), -0.02061 (17), -0.02052 (17), -0.02051 (17), -0.02048 (17), 
Length of domains: 1355
Time: pickout 0.0155    decision 0.0744    set_bounds 0.0980    solve 0.2644    add 0.0313    
Accumulated time: pickout 0.0552    decision 0.8980    set_bounds 0.5305    solve 2.3015    add 0.6454    
Current (lb-rhs): -0.02250504493713379
4728 domains visited
Cumulative time: 5.528066873550415

BaB round 10
batch: 1355
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 731] [/input-8, 731] [/input-8, 772] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 772] [/input-8, 731] [/input-8, 731] [/input-8, 731] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7564054727554321, worst -0.021252810955047607
10 lb beta sum: 0.7720591425895691, worst -0.021243274211883545
Time: prepare 0.1146    bound 0.2140    transfer 0.0062    finalize 0.0122    func 0.3653    
Accumulated time: func 2.8539    prepare 0.3910    bound 2.3079    transfer 0.0303    finalize 0.0589    
all_split False
======================Cut inference begins======================
max lb tensor(0.00178504) min lb tensor(-0.02123886)
Number of Verified Splits: 167 of 2710
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.10977983474731445 
BICCOS Cumulative time: 0.9506738185882568
Preprocessing time: 0.08279299736022949 Inference time: 0.02515578269958496 Add cuts time: 0.0013718605041503906 Cut analysis time: 0.0004591941833496094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02124 (18), -0.02113 (18), -0.02110 (18), -0.02107 (18), -0.02086 (18), -0.02075 (18), -0.02072 (18), -0.02069 (18), -0.02016 (18), -0.02014 (18), -0.02010 (18), -0.02001 (18), -0.01999 (18), -0.01994 (18), -0.01992 (18), -0.01990 (18), -0.01983 (18), -0.01981 (18), -0.01979 (18), -0.01976 (18), 
Length of domains: 2543
Time: pickout 0.0257    decision 0.0833    set_bounds 0.2601    solve 0.3659    add 0.0085    
Accumulated time: pickout 0.0808    decision 0.9813    set_bounds 0.7906    solve 2.6674    add 0.6539    
Current (lb-rhs): -0.021238863468170166
7271 domains visited
Cumulative time: 6.3869640827178955

BaB round 11
batch: 2543
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7460760474205017, worst -0.021096155047416687
10 lb beta sum: 0.751740038394928, worst -0.021095678210258484
Time: prepare 0.2168    bound 0.3416    transfer 0.0224    finalize 0.0223    func 0.6374    
Accumulated time: func 3.4914    prepare 0.6081    bound 2.6495    transfer 0.0527    finalize 0.0812    
all_split False
======================Cut inference begins======================
max lb tensor(0.00978523) min lb tensor(-0.02109276)
Number of Verified Splits: 1802 of 5086
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.43491411209106445 
BICCOS Cumulative time: 1.3855879306793213
Preprocessing time: 0.1583709716796875 Inference time: 0.2602834701538086 Add cuts time: 0.015624284744262695 Cut analysis time: 0.0006353855133056641
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02109 (19), -0.02106 (19), -0.02072 (19), -0.02069 (19), -0.02056 (19), -0.02045 (19), -0.02019 (19), -0.02016 (19), -0.02013 (19), -0.02008 (19), -0.01992 (19), -0.01990 (19), -0.01983 (19), -0.01980 (19), -0.01979 (19), -0.01976 (19), -0.01955 (19), -0.01953 (19), -0.01952 (19), -0.01949 (19), 
Length of domains: 3284
Time: pickout 0.0356    decision 0.1497    set_bounds 0.3815    solve 0.6385    add 0.0187    
Accumulated time: pickout 0.1164    decision 1.1311    set_bounds 1.1721    solve 3.3059    add 0.6726    
Current (lb-rhs): -0.02109275758266449
10555 domains visited
Cumulative time: 8.06727385520935

BaB round 12
batch: 3284
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 582] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7063555121421814, worst -0.02020442485809326
10 lb beta sum: 0.7076773047447205, worst -0.020195603370666504
Time: prepare 0.2854    bound 0.4171    transfer 0.0300    finalize 0.0306    func 0.8069    
Accumulated time: func 4.2983    prepare 0.8938    bound 3.0666    transfer 0.0827    finalize 0.1118    
all_split False
======================Cut inference begins======================
max lb tensor(0.00220072) min lb tensor(-0.02019066)
Number of Verified Splits: 465 of 6568
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.2880711555480957 
BICCOS Cumulative time: 1.673659086227417
Preprocessing time: 0.2089376449584961 Inference time: 0.07360124588012695 Add cuts time: 0.0050356388092041016 Cut analysis time: 0.0004966259002685547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02019 (20), -0.02016 (20), -0.01999 (20), -0.01995 (20), -0.01955 (20), -0.01951 (20), -0.01945 (20), -0.01934 (20), -0.01926 (20), -0.01923 (20), -0.01916 (20), -0.01913 (20), -0.01912 (20), -0.01908 (20), -0.01906 (20), -0.01905 (20), -0.01903 (20), -0.01900 (20), -0.01899 (20), -0.01897 (20), 
Length of domains: 6103
Time: pickout 0.0581    decision 0.1848    set_bounds 0.4596    solve 0.8088    add 0.0245    
Accumulated time: pickout 0.1745    decision 1.3159    set_bounds 1.6317    solve 4.1147    add 0.6971    
Current (lb-rhs): -0.020190656185150146
16658 domains visited
Cumulative time: 9.905671119689941

BaB round 13
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 580] [/input-8, 580] [/input-8, 580] [/input-8, 580] [/input-8, 580] [/input-8, 580] [/input-8, 1730] [/input-8, 580] [/input-8, 580] [/input-8, 580] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6963963508605957, worst -0.01935170590877533
10 lb beta sum: 0.6974561214447021, worst -0.0193474143743515
Time: prepare 0.3552    bound 0.4998    transfer 0.0441    finalize 0.2131    func 1.1663    
Accumulated time: func 5.4646    prepare 1.2493    bound 3.5664    transfer 0.1268    finalize 0.3249    
all_split False
======================Cut inference begins======================
max lb tensor(0.00205785) min lb tensor(-0.01934181)
Number of Verified Splits: 761 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.39656496047973633 
BICCOS Cumulative time: 2.0702240467071533
Preprocessing time: 0.25879621505737305 Inference time: 0.1297013759613037 Add cuts time: 0.007549285888671875 Cut analysis time: 0.0005180835723876953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01934 (21), -0.01931 (21), -0.01905 (20), -0.01903 (21), -0.01900 (21), -0.01896 (21), -0.01894 (20), -0.01893 (21), -0.01878 (21), -0.01875 (21), -0.01865 (21), -0.01854 (21), -0.01841 (21), -0.01839 (21), -0.01838 (21), -0.01836 (21), -0.01817 (21), -0.01815 (21), -0.01813 (21), -0.01810 (21), 
Length of domains: 9438
Time: pickout 0.0603    decision 0.3987    set_bounds 0.3709    solve 1.1687    add 0.0393    
Accumulated time: pickout 0.2348    decision 1.7146    set_bounds 2.0026    solve 5.2834    add 0.7364    
Current (lb-rhs): -0.019341811537742615
24089 domains visited
current_vram/total_varm: 13.3GB/99.9GB, batch_size increase to 8192
Cumulative time: 12.363030910491943

BaB round 14
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 582] [/input-8, 772] [/input-8, 582] [/input-8, 1733] [/input-8, 1733] [/input-8, 1730] [/input-8, 1733] [/input-8, 1733] [/input-8, 1733] [/input-8, 1730] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6773627996444702, worst -0.018522784113883972
10 lb beta sum: 0.6777000427246094, worst -0.018514499068260193
Time: prepare 0.7165    bound 0.9301    transfer 0.0985    finalize 0.0891    func 1.9420    
Accumulated time: func 7.4066    prepare 1.9661    bound 4.4965    transfer 0.2253    finalize 0.4140    
all_split False
======================Cut inference begins======================
max lb tensor(0.00289834) min lb tensor(-0.01850908)
Number of Verified Splits: 2010 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 1.177234411239624 
BICCOS Cumulative time: 3.2474584579467773
Preprocessing time: 0.5128524303436279 Inference time: 0.6171627044677734 Add cuts time: 0.0466156005859375 Cut analysis time: 0.0006036758422851562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01865 (21), -0.01854 (21), -0.01851 (22), -0.01848 (22), -0.01839 (21), -0.01836 (21), -0.01832 (21), -0.01828 (22), -0.01825 (22), -0.01821 (21), -0.01816 (22), -0.01813 (22), -0.01809 (22), -0.01806 (22), -0.01802 (21), -0.01799 (21), -0.01760 (22), -0.01758 (22), -0.01757 (22), -0.01755 (22), 
Length of domains: 15620
Time: pickout 0.1201    decision 0.6571    set_bounds 0.9658    solve 1.9455    add 0.0472    
Accumulated time: pickout 0.3549    decision 2.3716    set_bounds 2.9683    solve 7.2289    add 0.7836    
Current (lb-rhs): -0.018648207187652588
38463 domains visited
current_vram/total_varm: 19.4GB/99.9GB, batch_size increase to 16384
Cumulative time: 17.322875499725342

BaB round 15
batch: 15620
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 582] [/input-8, 579] [/input-8, 582] [/input-8, 582] [/input-8, 579] [/input-8, 1730] [/input-8, 582] [/input-8, 582] [/input-8, 1730] [/input-8, 582] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6493982076644897, worst -0.017770111560821533
10 lb beta sum: 0.6495371460914612, worst -0.017751753330230713
Time: prepare 1.3771    bound 1.7110    transfer 0.3188    finalize 0.1918    func 4.0976    
Accumulated time: func 11.5042    prepare 3.3436    bound 6.2075    transfer 0.5441    finalize 0.6058    
all_split False
======================Cut inference begins======================
max lb tensor(0.00340909) min lb tensor(-0.01774055)
Number of Verified Splits: 4536 of 31240
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 2.2360270023345947 
BICCOS Cumulative time: 5.483485460281372
Preprocessing time: 0.9873330593109131 Inference time: 1.2020518779754639 Add cuts time: 0.0460660457611084 Cut analysis time: 0.000576019287109375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01774 (22), -0.01763 (22), -0.01761 (22), -0.01757 (22), -0.01751 (23), -0.01749 (22), -0.01748 (23), -0.01738 (22), -0.01733 (22), -0.01732 (23), -0.01729 (23), -0.01728 (23), -0.01727 (22), -0.01725 (23), -0.01723 (22), -0.01723 (23), -0.01722 (22), -0.01719 (23), -0.01693 (23), -0.01690 (23), 
Length of domains: 26704
Time: pickout 0.2908    decision 0.8681    set_bounds 1.9422    solve 4.1023    add 0.1885    
Accumulated time: pickout 0.6457    decision 3.2398    set_bounds 4.9106    solve 11.3312    add 0.9721    
Current (lb-rhs): -0.01774054765701294
65167 domains visited
Cumulative time: 27.077983617782593

BaB round 16
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 142] [/input-8, 142] [/input-8, 1730] [/input-8, 142] [/input-8, 142] [/input-8, 1730] [/input-8, 579] [/input-8, 1730] [/input-8, 1730] [/input-8, 579] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6082273125648499, worst -0.016611874103546143
10 lb beta sum: 0.6083597540855408, worst -0.01658576726913452
Time: prepare 1.4620    bound 1.7900    transfer 0.3349    finalize 0.5436    func 4.3445    
Accumulated time: func 15.8487    prepare 4.8061    bound 7.9975    transfer 0.8790    finalize 1.1494    
all_split False
======================Cut inference begins======================
max lb tensor(0.00348306) min lb tensor(-0.01657170)
Number of Verified Splits: 4739 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 2.4757814407348633 
BICCOS Cumulative time: 7.959266901016235
Preprocessing time: 1.0594580173492432 Inference time: 1.3690617084503174 Add cuts time: 0.04666471481323242 Cut analysis time: 0.0005970001220703125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01751 (23), -0.01749 (22), -0.01748 (23), -0.01738 (22), -0.01732 (23), -0.01729 (23), -0.01723 (23), -0.01719 (23), -0.01687 (23), -0.01684 (23), -0.01658 (23), -0.01657 (23), -0.01655 (23), -0.01653 (23), -0.01650 (23), -0.01646 (23), -0.01646 (23), -0.01642 (23), -0.01640 (24), -0.01639 (23), 
Length of domains: 38349
Time: pickout 0.2476    decision 1.6267    set_bounds 1.9188    solve 4.3508    add 0.1208    
Accumulated time: pickout 0.8932    decision 4.8665    set_bounds 6.8293    solve 15.6820    add 1.0928    
Current (lb-rhs): -0.017510175704956055
93196 domains visited
current_vram/total_varm: 36.3GB/99.9GB, batch_size increase to 32768
Cumulative time: 37.93794798851013

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1733] [/input-8, 1733] [/input-8, 1730] [/input-8, 1730] [/input-8, 1730] [/input-8, 142] [/input-8, 1730] [/input-8, 1733] [/input-8, 1730] [/input-8, 1733] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5868910551071167, worst -0.016380295157432556
10 lb beta sum: 0.586921215057373, worst -0.016363665461540222
Time: prepare 3.0450    bound 8.7108    transfer 0.7099    finalize 0.5305    func 13.4364    
Accumulated time: func 29.2851    prepare 7.8514    bound 16.7083    transfer 1.5889    finalize 1.6799    
all_split False
======================Cut inference begins======================
max lb tensor(0.00380373) min lb tensor(-0.01635514)
Number of Verified Splits: 13037 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 5.596350431442261 
BICCOS Cumulative time: 13.555617332458496
Preprocessing time: 2.157601833343506 Inference time: 3.277402877807617 Add cuts time: 0.16055536270141602 Cut analysis time: 0.0007903575897216797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01653 (23), -0.01650 (23), -0.01646 (23), -0.01642 (23), -0.01640 (24), -0.01636 (24), -0.01636 (24), -0.01632 (24), -0.01632 (23), -0.01631 (23), -0.01628 (23), -0.01627 (23), -0.01625 (24), -0.01622 (24), -0.01621 (23), -0.01620 (24), -0.01616 (23), -0.01616 (24), -0.01606 (24), -0.01603 (24), 
Length of domains: 58080
Time: pickout 0.5053    decision 3.2973    set_bounds 3.8486    solve 14.0716    add 0.1946    
Accumulated time: pickout 1.3985    decision 8.1639    set_bounds 10.6780    solve 29.7535    add 1.2875    
Current (lb-rhs): -0.016528308391571045
145695 domains visited
Cumulative time: 65.72178840637207

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2968] [/input, 2968] [/input, 2968] [/input, 2968] [/input, 2968] [/input, 2968] [/input, 2968] [/input, 2968] [/input, 2968] [/input, 2968] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5569416284561157, worst -0.01595473289489746
10 lb beta sum: 0.5569416284561157, worst -0.01594698429107666
Time: prepare 3.1812    bound 8.7128    transfer 0.7058    finalize 0.5747    func 13.6235    
Accumulated time: func 42.9085    prepare 11.0330    bound 25.4211    transfer 2.2947    finalize 2.2545    
all_split False
======================Cut inference begins======================
max lb tensor(0.00418013) min lb tensor(-0.01594228)
Number of Verified Splits: 16118 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 13
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 6.514255523681641 
BICCOS Cumulative time: 20.069872856140137
Preprocessing time: 3.1679439544677734 Inference time: 3.1608409881591797 Add cuts time: 0.18473267555236816 Cut analysis time: 0.0007379055023193359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01636 (24), -0.01632 (24), -0.01627 (23), -0.01620 (24), -0.01616 (23), -0.01616 (24), -0.01601 (24), -0.01600 (24), -0.01597 (24), -0.01597 (24), -0.01594 (24), -0.01583 (24), -0.01580 (25), -0.01579 (24), -0.01577 (25), -0.01568 (24), -0.01565 (25), -0.01562 (25), -0.01548 (24), -0.01546 (25), 
Length of domains: 74730
Time: pickout 0.5603    decision 3.3072    set_bounds 4.2863    solve 13.6365    add 0.4596    
Accumulated time: pickout 1.9588    decision 11.4711    set_bounds 14.9643    solve 43.3900    add 1.7470    
Current (lb-rhs): -0.01635514199733734
195113 domains visited
Cumulative time: 94.8611171245575

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input, 2968] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.015789151191711426
10 lb beta sum: 0.2859129309654236, worst -0.015786588191986084
Time: prepare 1.7263    bound 10.1276    transfer 0.6972    finalize 0.6111    func 14.7285    
Accumulated time: func 57.6370    prepare 12.7597    bound 35.5487    transfer 2.9919    finalize 2.8657    
all_split False
======================Cut inference begins======================
max lb tensor(0.00237441) min lb tensor(-0.01578295)
Number of Verified Splits: 17476 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 13
#cuts 7-9: 2
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 6.5062415599823 
BICCOS Cumulative time: 26.576114416122437
Preprocessing time: 2.3883891105651855 Inference time: 3.905927896499634 Add cuts time: 0.21101903915405273 Cut analysis time: 0.0009055137634277344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01580 (25), -0.01578 (25), -0.01577 (25), -0.01576 (24), -0.01575 (25), -0.01566 (24), -0.01565 (25), -0.01562 (25), -0.01561 (25), -0.01558 (25), -0.01546 (25), -0.01544 (24), -0.01543 (25), -0.01543 (25), -0.01543 (25), -0.01540 (24), -0.01539 (25), -0.01539 (25), -0.01535 (25), -0.01532 (25), 
Length of domains: 90022
Time: pickout 0.5678    decision 3.7641    set_bounds 3.7581    solve 14.7411    add 0.3299    
Accumulated time: pickout 2.5266    decision 15.2352    set_bounds 18.7223    solve 58.1312    add 2.0769    
Current (lb-rhs): -0.015801772475242615
243173 domains visited
Cumulative time: 124.90657329559326

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2968] [/input, 2968] [/input, 2968] [/input, 2968] [/input, 2968] [/input, 2968] [/input, 2968] [/input, 2968] [/input, 2968] [/input, 2968] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.015147924423217773
10 lb beta sum: 0.263657808303833, worst -0.015138685703277588
Time: prepare 1.8616    bound 10.1266    transfer 0.6992    finalize 0.6607    func 15.1304    
Accumulated time: func 72.7674    prepare 14.6218    bound 45.6753    transfer 3.6912    finalize 3.5263    
all_split False
======================Cut inference begins======================
max lb tensor(0.00264460) min lb tensor(-0.01513362)
Number of Verified Splits: 17595 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 1
#cuts 7-9: 7
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 6.597641229629517 
BICCOS Cumulative time: 33.17375564575195
Preprocessing time: 2.388624668121338 Inference time: 3.9385430812835693 Add cuts time: 0.26918935775756836 Cut analysis time: 0.0012841224670410156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01578 (25), -0.01576 (24), -0.01575 (25), -0.01566 (24), -0.01561 (25), -0.01558 (25), -0.01543 (25), -0.01543 (25), -0.01539 (25), -0.01539 (25), -0.01523 (25), -0.01513 (26), -0.01512 (25), -0.01510 (26), -0.01506 (25), -0.01497 (26), -0.01495 (25), -0.01494 (26), -0.01488 (25), -0.01486 (25), 
Length of domains: 105195
Time: pickout 0.6203    decision 4.4063    set_bounds 4.2656    solve 15.1467    add 0.4011    
Accumulated time: pickout 3.1469    decision 19.6415    set_bounds 22.9879    solve 73.2779    add 2.4781    
Current (lb-rhs): -0.015782952308654785
291114 domains visited
Cumulative time: 156.78059124946594

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 142] [/input, 2968] [/input, 2968] [/input, 2968] [/input-8, 142] [/input, 2968] [/input-8, 142] [/input, 2968] [/input-8, 1593] [/input-8, 142] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.015059113502502441
10 lb beta sum: 0.25132057070732117, worst -0.01836426556110382
Time: prepare 1.8933    bound 10.1453    transfer 0.6965    finalize 0.6959    func 13.8842    
Accumulated time: func 86.6516    prepare 16.5156    bound 55.8206    transfer 4.3876    finalize 4.2222    
all_split False
======================Cut inference begins======================
max lb tensor(0.00335243) min lb tensor(-0.01505584)
Number of Verified Splits: 17853 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 13
#cuts 4-6: 2
#cuts 7-9: 11
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 8.400681257247925 
BICCOS Cumulative time: 41.57443690299988
Preprocessing time: 2.5618340969085693 Inference time: 5.441809892654419 Add cuts time: 0.3952932357788086 Cut analysis time: 0.0017440319061279297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01578 (25), -0.01575 (25), -0.01561 (25), -0.01558 (25), -0.01543 (25), -0.01543 (25), -0.01539 (25), -0.01539 (25), -0.01513 (26), -0.01510 (26), -0.01506 (25), -0.01506 (25), -0.01497 (26), -0.01495 (25), -0.01495 (25), -0.01494 (26), -0.01488 (25), -0.01486 (25), -0.01485 (25), -0.01482 (25), 
Length of domains: 120110
Time: pickout 0.6682    decision 4.2075    set_bounds 4.8105    solve 13.9052    add 0.3960    
Accumulated time: pickout 3.8151    decision 23.8489    set_bounds 27.7984    solve 87.1831    add 2.8740    
Current (lb-rhs): -0.015782952308654785
338797 domains visited
Cumulative time: 189.62799072265625

BaB round 22
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2968] [/input-8, 1325] [/input-8, 1593] [/input-8, 1593] [/input, 2968] [/input-8, 1593] [/input-8, 1593] [/input-8, 1593] [/input-8, 1593] [/input-8, 1593] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.015128791332244873
10 lb beta sum: 0.24006280303001404, worst -0.03534999489784241
Time: prepare 1.9476    bound 10.1704    transfer 0.7062    finalize 0.7143    func 13.9965    
Accumulated time: func 100.6481    prepare 18.4638    bound 65.9910    transfer 5.0938    finalize 4.9365    
all_split False
======================Cut inference begins======================
max lb tensor(0.00355643) min lb tensor(-0.01512474)
Number of Verified Splits: 19235 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 14
#cuts 7-9: 4
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 9.198657512664795 
BICCOS Cumulative time: 50.77309441566467
Preprocessing time: 4.510949373245239 Inference time: 4.188553333282471 Add cuts time: 0.4979562759399414 Cut analysis time: 0.0011985301971435547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01513 (26), -0.01512 (26), -0.01510 (26), -0.01509 (26), -0.01506 (25), -0.01497 (26), -0.01495 (26), -0.01495 (25), -0.01494 (26), -0.01492 (26), -0.01486 (25), -0.01482 (25), -0.01478 (26), -0.01477 (26), -0.01476 (26), -0.01475 (26), -0.01473 (26), -0.01473 (26), -0.01469 (26), -0.01466 (26), 
Length of domains: 133643
Time: pickout 0.6675    decision 3.3662    set_bounds 4.9560    solve 14.0182    add 0.3830    
Accumulated time: pickout 4.4826    decision 27.2151    set_bounds 32.7544    solve 101.2013    add 3.2570    
Current (lb-rhs): -0.01513361930847168
385098 domains visited
Time out!!!!!!!!
Result: unknown in 226.4092 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 155, vnnlib ID: 155 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.92134666, -14.68086624, -14.01877499, -12.96694374, -13.68891144,
         -13.29801559, -12.61456585, -14.58385181, -12.91630363, -13.61004829]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [523]; unstable size 523; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 293, 1, 523] with unstable size 292 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 523] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 523] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [292]; unstable size 292; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 292] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 292] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.07341194,  0.02069998, -0.45618224, -0.75070482, -0.48273420,
         -0.58674026,  0.21641418, -1.83327830, -0.92162538]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.92134666, -14.68086624, -14.01877499, -12.96694374, -13.68891144,
         -13.29801559, -12.61456585, -14.58385181, -12.91630363, -13.61004829]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.52026176, -14.13672733, -13.69211388, -12.48086071, -13.31669331,
          -12.76901054, -12.69317245, -14.15498734, -12.40141487, -13.11113548],
         [-14.52026176, -14.13672733, -13.69211388, -12.48086071, -13.31669331,
          -12.76901054, -12.69317245, -14.15498734, -12.40141487, -13.11113548]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.99894142, -0.21231174,  0.62352085,  0.07583809, -0.29175758,
           0.41796303]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0167 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0873 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 156, vnnlib ID: 156 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.54337883, -22.91224098, -19.67365646, -18.07358360, -18.92478752,
         -18.42077827, -18.27539825, -20.47289658, -23.38033676, -23.14374924]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [789]; unstable size 789; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 789] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 789] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 789] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 259] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.47897148,  2.52675486,  0.01573062, -0.71339214, -0.73171186,
         -1.54283834,  0.69137216,  2.97468805,  2.91973972]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.54337883, -22.91224098, -19.67365646, -18.07358360, -18.92478752,
         -18.42077827, -18.27539825, -20.47289658, -23.38033676, -23.14374924]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.54338074, -22.91224098, -19.67365646, -18.07358170, -18.92478561,
          -18.42077637, -18.27539635, -20.47289658, -23.38033676, -23.14374733],
         [-22.54338074, -22.91224098, -19.67365646, -18.07358170, -18.92478561,
          -18.42077637, -18.27539635, -20.47289658, -23.38033676, -23.14374733]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.34719467,  0.50400925, -0.14538002]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0715 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 157, vnnlib ID: 157 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.22789001, -20.43865013, -26.99475098, -25.86932182, -27.76927757,
         -27.09349632, -26.96388435, -26.58814430, -23.07920265, -18.19562912]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [462]; unstable size 462; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 183, 1, 462] with unstable size 182 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 462] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 462] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 182] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.89370704, 1.38738203, 7.23277378, 6.41899061, 8.12875843, 7.56016397,
         7.36910868, 6.89903069, 3.88113189]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0638 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 158, vnnlib ID: 158 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.36944771, -28.77778244, -30.05463600, -28.34849167, -31.03860283,
         -28.43247223, -29.29167557, -29.50824356, -27.05603409, -31.43330383]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [584]; unstable size 584; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 235, 1, 584] with unstable size 234 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 584] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 584] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [234]; unstable size 234; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 234] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 234] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.98524386,  0.54466224,  1.17118883, -0.38150430,  1.88505030,
         -0.46537066,  0.44484520,  0.24631691,  3.03603673]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-29.36944771, -28.77778244, -30.05463600, -28.34849167, -31.03860283,
         -28.43247223, -29.29167557, -29.50824356, -27.05603409, -31.43330383]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.53it/s]100%|██████████| 1/1 [00:00<00:00,  8.53it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-28.40040588, -27.81520653, -28.63296509, -26.82895470, -29.46481514,
          -26.85583305, -27.88446808, -27.95312691, -26.49433899, -30.27206993],
         [-28.40040588, -27.81520653, -28.63296509, -26.82895470, -29.46481514,
          -26.85583305, -27.88446808, -27.95312691, -26.49433899, -30.27206993]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.33461571, 0.36149406]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1202 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 8.091229438781738
alpha/beta optimization time: 1.2556982040405273
initial alpha-crown bounds: tensor([[ 1.03688884,  0.59373093,  1.24077296, -0.31201315,  1.97173214,
         -0.38633657,  0.51818895,  0.33714461,  3.09112048]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.3863365650177002
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.55433130264282
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.55428290367126
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.5542550086975
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.5542311668396
Verifying property 3 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.31201315]], device='cuda:0') need to verify.
Model prediction is: tensor([-29.36944771, -28.77778244, -30.05463600, -28.34849167, -31.03860283,
        -28.43247223, -29.29167557, -29.50824356, -27.05603409, -31.43330383],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.31201315]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 584
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 230
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 829
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010657310485839844
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3120102882385254
10 lb beta sum: 0.0, worst -0.31202220916748047
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0545    transfer 0.0001    finalize 0.0002    func 0.0550    
Accumulated time: func 0.0550    prepare 0.0002    bound 0.0545    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 90] 
split level 3: [/input-12, 58] 
split level 4: [/input-12, 8] 
split level 5: [/input-12, 2] 
split level 6: [/input-12, 64] 
split level 7: [/input-12, 79] 
split level 8: [/input-12, 61] 
split level 9: [/input-12, 46] 
split level 10: [/input-8, 268] 
split level 11: [/input-8, 172] 
split level 12: [/input-8, 171] 
split level 13: [/input, 456] 
split level 14: [/input, 439] 
split level 15: [/input, 3000] 
split level 16: [/input-8, 179] 
split level 17: [/input-8, 788] 
split level 18: [/input, 3017] 
split level 19: [/input, 442] 
split level 20: [/input, 3018] 
split level 21: [/input-8, 371] 
split level 22: [/input, 3032] 
split level 23: [/input, 2986] 
split level 24: [/input-8, 909] 
split level 25: [/input-8, 1287] 
split level 26: [/input-8, 1282] 
split level 27: [/input-8, 473] 
split level 28: [/input-8, 178] 
split level 29: [/input, 3066] 
split level 30: [/input, 2972] 
split level 31: [/input, 3002] 
split level 32: [/input-8, 380] 
split level 33: [/input, 954] 
split level 34: [/input-8, 892] 
split level 35: [/input-8, 372] 
split level 36: [/input-8, 1067] 
split level 37: [/input, 487] 
split level 38: [/input, 2955] 
split level 39: [/input, 3019] 
split level 40: [/input-8, 186] 
split level 41: [/input-8, 1780] 
split level 42: [/input-8, 1125] 
split level 43: [/input, 3031] 
split level 44: [/input-8, 381] 
split level 45: [/input-8, 1075] 
split level 46: [/input, 999] 
split level 47: [/input-8, 1732] 
split level 48: [/input, 506] 
split level 49: [/input-8, 1123] 
split level 50: [/input, 3013] 
split level 51: [/input-8, 1118] 
split level 52: [/input-8, 292] 
split level 53: [/input, 474] 
split level 54: [/input-8, 1772] 
split level 55: [/input-8, 1038] 
split level 56: [/input-8, 1773] 
split level 57: [/input-8, 508] 
split level 58: [/input, 1975] 
split level 59: [/input, 892] 
split level 60: [/input, 956] 
split level 61: [/input, 986] 
split level 62: [/input-8, 146] 
split level 63: [/input-8, 465] 
split level 64: [/input, 202] 
split level 65: [/input-8, 774] 
split level 66: [/input-8, 925] 
split level 67: [/input-8, 1035] 
split level 68: [/input-8, 592] 
split level 69: [/input, 200] 
split level 70: [/input-8, 871] 
split level 71: [/input-8, 1655] 
split level 72: [/input-8, 792] 
split level 73: [/input, 949] 
split level 74: [/input, 2871] 
split level 75: [/input, 3036] 
split level 76: [/input, 918] 
split level 77: [/input-8, 1643] 
split level 78: [/input, 298] 
split level 79: [/input-8, 1731] 
split level 80: [/input, 467] 
split level 81: [/input, 217] 
split level 82: [/input, 971] 
split level 83: [/input, 1993] 
split level 84: [/input, 932] 
split level 85: [/input-8, 2046] 
split level 86: [/input, 2997] 
split level 87: [/input, 618] 
split level 88: [/input, 2927] 
split level 89: [/input-8, 893] 
split level 90: [/input, 1977] 
split level 91: [/input-8, 1076] 
split level 92: [/input-8, 1180] 
split level 93: [/input, 1974] 
split level 94: [/input-8, 891] 
split level 95: [/input, 1017] 
split level 96: [/input-8, 1730] 
split level 97: [/input, 923] 
split level 98: [/input-8, 1625] 
split level 99: [/input-8, 843] 
split level 100: [/input, 1976] 
split level 101: [/input, 232] 
split level 102: [/input, 435] 
split level 103: [/input, 2947] 
split level 104: [/input, 903] 
split level 105: [/input-8, 888] 
split level 106: [/input, 1003] 
split level 107: [/input, 507] 
split level 108: [/input, 390] 
split level 109: [/input, 1012] 
split level 110: [/input-8, 1614] 
split level 111: [/input, 1960] 
split level 112: [/input-8, 165] 
split level 113: [/input, 1978] 
split level 114: [/input-8, 773] 
split level 115: [/input, 3554] 
split level 116: [/input-8, 820] 
split level 117: [/input, 1990] 
split level 118: [/input-8, 1407] 
split level 119: [/input, 597] 
split level 120: [/input, 924] 
split level 121: [/input, 633] 
split level 122: [/input, 3022] 
split level 123: [/input-8, 158] 
split level 124: [/input, 308] 
split level 125: [/input-8, 122] 
split level 126: [/input, 661] 
split level 127: [/input-8, 1790] 
split level 128: [/input-8, 1563] 
split level 129: [/input-8, 1233] 
split level 130: [/input, 884] 
split level 131: [/input, 185] 
split level 132: [/input-8, 1737] 
split level 133: [/input, 619] 
split level 134: [/input, 3037] 
split level 135: [/input, 203] 
split level 136: [/input, 219] 
split level 137: [/input, 1973] 
split level 138: [/input-8, 879] 
split level 139: [/input-8, 406] 
split level 140: [/input, 2887] 
split level 141: [/input, 283] 
split level 142: [/input-8, 334] 
split level 143: [/input, 1989] 
split level 144: [/input, 323] 
split level 145: [/input, 909] 
split level 146: [/input, 631] 
split level 147: [/input, 795] 
split level 148: [/input, 2024] 
split level 149: [/input, 3522] 
split level 150: [/input, 314] 
split level 151: [/input-8, 1548] 
split level 152: [/input, 1502] 
split level 153: [/input, 605] 
split level 154: [/input-8, 169] 
split level 155: [/input-8, 887] 
split level 156: [/input-8, 1613] 
split level 157: [/input, 222] 
split level 158: [/input-8, 890] 
split level 159: [/input, 632] 
split level 160: [/input, 2010] 
split level 161: [/input, 221] 
split level 162: [/input, 2526] 
split level 163: [/input, 187] 
split level 164: [/input-8, 1678] 
split level 165: [/input, 2092] 
split level 166: [/input, 973] 
split level 167: [/input, 1961] 
split level 168: [/input-8, 1384] 
split level 169: [/input, 2363] 
split level 170: [/input, 2021] 
split level 171: [/input, 820] 
split level 172: [/input, 2921] 
split level 173: [/input, 339] 
split level 174: [/input, 268] 
split level 175: [/input, 1996] 
split level 176: [/input, 2930] 
split level 177: [/input, 1944] 
split level 178: [/input, 588] 
split level 179: [/input, 1946] 
split level 180: [/input-8, 142] 
split level 181: [/input, 3478] 
split level 182: [/input, 2322] 
split level 183: [/input-8, 1669] 
split level 184: [/input, 617] 
split level 185: [/input, 779] 
split level 186: [/input-8, 1920] 
split level 187: [/input, 2862] 
split level 188: [/input, 70] 
split level 189: [/input, 125] 
split level 190: [/input, 2332] 
split level 191: [/input, 786] 
split level 192: [/input, 2349] 
split level 193: [/input, 803] 
split level 194: [/input-8, 1278] 
split level 195: [/input-8, 1785] 
split level 196: [/input, 72] 
split level 197: [/input, 260] 
split level 198: [/input, 3038] 
split level 199: [/input, 614] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3119649887084961
10 lb beta sum: 0.0, worst -0.31195902824401855
Time: prepare 0.0116    bound 0.1011    transfer 0.0008    finalize 0.0029    func 0.1190    
Accumulated time: func 0.1741    prepare 0.0223    bound 0.1556    transfer 0.0009    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.19403887) min lb tensor(-0.31195331)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010699987411499023 
BICCOS Cumulative time: 0.010699987411499023
Preprocessing time: 0.009913206100463867 Inference time: 0.0001456737518310547 Add cuts time: 7.05718994140625e-05 Cut analysis time: 0.0005705356597900391
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.29670 (1), -0.29598 (1), -0.29591 (1), -0.29570 (1), -0.29544 (1), -0.29523 (1), -0.29453 (1), -0.29451 (1), -0.29407 (1), -0.29403 (1), -0.29383 (1), -0.29352 (1), -0.29273 (1), -0.29211 (1), -0.29185 (1), -0.29089 (1), -0.29040 (1), -0.29015 (1), -0.29007 (1), -0.29004 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5317    set_bounds 0.0090    solve 0.1191    add 0.0674    
Accumulated time: pickout 0.0004    decision 0.5317    set_bounds 0.0090    solve 0.1191    add 0.0674    
Current (lb-rhs): -0.29670143127441406
50 domains visited
Cumulative time: 0.8040192127227783

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 68] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 8] [/input-12, 8] [/input-12, 68] [/input-12, 8] [/input-12, 8] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 2] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2753455638885498
10 lb beta sum: 0.6592479348182678, worst -0.20838308334350586
Time: prepare 0.0073    bound 0.1193    transfer 0.0007    finalize 0.0023    func 0.1322    
Accumulated time: func 0.3063    prepare 0.0298    bound 0.2749    transfer 0.0017    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.29780918) min lb tensor(-0.20817947)
Number of Verified Splits: 64 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.0157015323638916 
BICCOS Cumulative time: 0.026401519775390625
Preprocessing time: 0.011731624603271484 Inference time: 0.0023360252380371094 Add cuts time: 0.0013539791107177734 Cut analysis time: 0.0002799034118652344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11036 (2), -0.10995 (2), -0.10935 (2), -0.10905 (2), -0.10900 (2), -0.10859 (2), -0.10841 (2), -0.10803 (2), -0.10690 (2), -0.10664 (2), -0.10652 (2), -0.10589 (2), -0.10525 (2), -0.10452 (2), -0.10276 (2), -0.10264 (2), -0.10227 (2), -0.10106 (2), -0.09940 (2), -0.09830 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0194    set_bounds 0.0124    solve 0.1323    add 0.0793    
Accumulated time: pickout 0.0015    decision 0.5512    set_bounds 0.0214    solve 0.2514    add 0.1467    
Current (lb-rhs): -0.11035692691802979
100 domains visited
Cumulative time: 1.0645549297332764

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 68] 
split level 1: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] 
split level 2: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 2] [/input-12, 79] [/input-12, 64] [/input-12, 64] [/input-12, 2] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18611526489257812
10 lb beta sum: 0.7561200261116028, worst -0.09558629989624023
Time: prepare 0.0071    bound 0.1200    transfer 0.0007    finalize 0.0027    func 0.1331    
Accumulated time: func 0.4394    prepare 0.0371    bound 0.3949    transfer 0.0024    finalize 0.0080    
all_split False
======================Cut inference begins======================
max lb tensor(0.40660185) min lb tensor(-0.09285355)
Number of Verified Splits: 205 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 15
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.024144649505615234 
BICCOS Cumulative time: 0.05054616928100586
Preprocessing time: 0.011531829833984375 Inference time: 0.008726119995117188 Add cuts time: 0.0033998489379882812 Cut analysis time: 0.0004868507385253906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02887 (3), -0.02777 (3), -0.02672 (3), -0.02671 (3), -0.02555 (3), -0.02539 (3), -0.02504 (3), -0.02333 (3), -0.02286 (3), -0.02179 (3), -0.02085 (3), -0.02083 (3), -0.02080 (3), -0.02028 (3), -0.02024 (3), -0.01916 (3), -0.01909 (3), -0.01869 (3), -0.01835 (3), -0.01825 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0153    solve 0.1332    add 0.0955    
Accumulated time: pickout 0.0025    decision 0.5706    set_bounds 0.0367    solve 0.3846    add 0.2422    
Current (lb-rhs): -0.028868108987808228
150 domains visited
Cumulative time: 1.3534324169158936

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 8] [/input-12, 64] [/input-12, 8] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 64] [/input-12, 79] [/input-12, 64] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1351635456085205
10 lb beta sum: 1.0161973237991333, worst -0.08978080749511719
Time: prepare 0.0073    bound 0.1354    transfer 0.0008    finalize 0.0024    func 0.1491    
Accumulated time: func 0.5886    prepare 0.0446    bound 0.5304    transfer 0.0032    finalize 0.0104    
all_split False
======================Cut inference begins======================
max lb tensor(0.68372798) min lb tensor(-0.01021104)
Number of Verified Splits: 376 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 8
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.041266679763793945 
BICCOS Cumulative time: 0.0918128490447998
Preprocessing time: 0.011469602584838867 Inference time: 0.0167086124420166 Add cuts time: 0.012479782104492188 Cut analysis time: 0.0006086826324462891
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0191    set_bounds 0.0152    solve 0.1492    add 0.0229    
Accumulated time: pickout 0.0036    decision 0.5897    set_bounds 0.0520    solve 0.5338    add 0.2651    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 1.43342838e-01, 1.06318101e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8, 42]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 1.43342838e-01, 5.76867312e-02, 1.48440227e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8, 42]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 1.43342838e-01, 5.76867312e-02, 1.81713719e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 1.52052954e-01, 1.04179218e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8, 42]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 1.52052954e-01, 5.66050261e-02, 1.50892630e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8, 42]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 1.52052954e-01, 5.66050261e-02, 1.81549508e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61, 42]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.75662906e-20, 5.72364688e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61, 42]), tensor([1., 1.]), tensor([0, 0]), tensor([5.75662906e-20, 8.73804539e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22560739517211914
10 lb beta sum: 1.0109610557556152, worst -0.1329575479030609
Time: prepare 0.0004    bound 0.1280    transfer 0.0001    finalize 0.0002    func 0.1288    
Accumulated time: func 0.7173    prepare 0.0451    bound 0.6583    transfer 0.0033    finalize 0.0106    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 1: [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 2: [/input-12, 58] [/input-12, 58] [/input-12, 8] 
split level 3: [/input-12, 64] [/input-12, 64] [/input-12, 2] 
split level 4: [/input-12, 79] [/input-12, 79] [/input-12, 64] 
split level 5: [/input-12, 46] [/input-12, 46] [/input-12, 79] 
split level 6: [/input-8, 179] [/input-8, 179] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4878228902816772, worst -0.03551548719406128
10 lb beta sum: 1.4960440397262573, worst -0.03532952070236206
Time: prepare 0.0157    bound 0.1324    transfer 0.0007    finalize 0.0018    func 0.1533    
Accumulated time: func 0.8706    prepare 0.0612    bound 0.7907    transfer 0.0041    finalize 0.0124    
all_split False
======================Cut inference begins======================
max lb tensor(0.99604964) min lb tensor(-0.03529710)
Number of Verified Splits: 380 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.4886884689331055, worst -0.552077054977417
10 lb beta sum: 1.6842741966247559, worst -0.132912278175354
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 8
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.37548160552978516 
BICCOS Cumulative time: 0.46729445457458496
Preprocessing time: 0.010167598724365234 Inference time: 0.35292506217956543 Add cuts time: 0.011522054672241211 Cut analysis time: 0.0008668899536132812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03530 (7), -0.03191 (7), -0.02938 (7), -0.02565 (7), 
Length of domains: 4
Time: pickout 0.0005    decision 0.0204    set_bounds 0.0318    solve 0.1534    add 0.0007    
Accumulated time: pickout 0.0041    decision 0.6101    set_bounds 0.0838    solve 0.6872    add 0.2658    
Current (lb-rhs): -0.03529709577560425
154 domains visited
Cumulative time: 2.3367536067962646

BaB round 2
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 171] [/input-8, 171] [/input-8, 171] [/input-8, 171] 
split level 2: [/input, 3000] [/input, 3000] [/input, 3000] [/input, 3000] 
split level 3: [/input, 3017] [/input, 3017] [/input, 3017] [/input, 3017] 
split level 4: [/input, 3018] [/input, 3018] [/input, 3018] [/input, 3018] 
split level 5: [/input-8, 179] [/input-8, 179] [/input-8, 179] [/input-8, 179] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.00426793098449707

all verified at 0th iter
Time: prepare 0.0064    bound 0.0050    transfer 0.0011    finalize 0.0012    func 0.0155    
Accumulated time: func 0.8860    prepare 0.0679    bound 0.7958    transfer 0.0052    finalize 0.0136    
all_split False
======================Cut inference begins======================
max lb tensor(0.09694767) min lb tensor(0.00426793)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 26.
#cuts 1-3: 8
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.007729053497314453 
BICCOS Cumulative time: 0.4750235080718994
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0014    decision 0.0179    set_bounds 0.0261    solve 0.0168    add 0.0004    
Accumulated time: pickout 0.0055    decision 0.6280    set_bounds 0.1099    solve 0.7040    add 0.2662    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
154 domains visited
Cumulative time: 2.408250570297241


Properties batch 4, size 1
Remaining timeout: 195.88356351852417
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 195.88348174095154
Verifying property 5 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.38633657]], device='cuda:0') need to verify.
Model prediction is: tensor([-29.36944771, -28.77778244, -30.05463600, -28.34849167, -31.03860283,
        -28.43247223, -29.29167557, -29.50824356, -27.05603409, -31.43330383],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.38633657]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 584
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 230
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 829
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.989738464355469e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.386333703994751
10 lb beta sum: 0.0, worst -0.3863389492034912
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0539    transfer 0.0001    finalize 0.0001    func 0.0543    
Accumulated time: func 0.0543    prepare 0.0002    bound 0.0539    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 90] 
split level 3: [/input-12, 8] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 58] 
split level 6: [/input-12, 64] 
split level 7: [/input-12, 79] 
split level 8: [/input-12, 61] 
split level 9: [/input-12, 46] 
split level 10: [/input-8, 268] 
split level 11: [/input-8, 909] 
split level 12: [/input-8, 172] 
split level 13: [/input-8, 171] 
split level 14: [/input, 456] 
split level 15: [/input, 439] 
split level 16: [/input, 3000] 
split level 17: [/input-8, 1282] 
split level 18: [/input-8, 179] 
split level 19: [/input, 442] 
split level 20: [/input, 3032] 
split level 21: [/input, 2986] 
split level 22: [/input, 3017] 
split level 23: [/input, 3018] 
split level 24: [/input-8, 788] 
split level 25: [/input-8, 1067] 
split level 26: [/input-8, 371] 
split level 27: [/input-8, 1287] 
split level 28: [/input-8, 892] 
split level 29: [/input, 3066] 
split level 30: [/input-8, 178] 
split level 31: [/input, 487] 
split level 32: [/input, 2972] 
split level 33: [/input-8, 473] 
split level 34: [/input, 3002] 
split level 35: [/input, 954] 
split level 36: [/input, 2955] 
split level 37: [/input, 3031] 
split level 38: [/input-8, 925] 
split level 39: [/input-8, 1780] 
split level 40: [/input, 3019] 
split level 41: [/input-8, 372] 
split level 42: [/input-8, 186] 
split level 43: [/input-8, 1075] 
split level 44: [/input-8, 1038] 
split level 45: [/input-8, 1772] 
split level 46: [/input, 506] 
split level 47: [/input-8, 380] 
split level 48: [/input, 999] 
split level 49: [/input-8, 1773] 
split level 50: [/input-8, 774] 
split level 51: [/input-8, 1123] 
split level 52: [/input-8, 381] 
split level 53: [/input, 474] 
split level 54: [/input, 3013] 
split level 55: [/input-8, 1125] 
split level 56: [/input-8, 1035] 
split level 57: [/input-8, 508] 
split level 58: [/input-8, 1643] 
split level 59: [/input-8, 465] 
split level 60: [/input-8, 1732] 
split level 61: [/input, 892] 
split level 62: [/input, 986] 
split level 63: [/input-8, 146] 
split level 64: [/input, 202] 
split level 65: [/input-8, 871] 
split level 66: [/input, 949] 
split level 67: [/input-8, 1548] 
split level 68: [/input, 298] 
split level 69: [/input, 956] 
split level 70: [/input-8, 792] 
split level 71: [/input-8, 891] 
split level 72: [/input-8, 292] 
split level 73: [/input-8, 1118] 
split level 74: [/input-8, 1635] 
split level 75: [/input, 3036] 
split level 76: [/input-8, 893] 
split level 77: [/input, 923] 
split level 78: [/input, 467] 
split level 79: [/input, 200] 
split level 80: [/input, 1975] 
split level 81: [/input-8, 1180] 
split level 82: [/input, 918] 
split level 83: [/input-8, 2046] 
split level 84: [/input, 217] 
split level 85: [/input-8, 592] 
split level 86: [/input, 971] 
split level 87: [/input, 2927] 
split level 88: [/input, 1017] 
split level 89: [/input-8, 1076] 
split level 90: [/input-8, 1228] 
split level 91: [/input, 932] 
split level 92: [/input, 2997] 
split level 93: [/input-8, 843] 
split level 94: [/input, 924] 
split level 95: [/input, 232] 
split level 96: [/input-8, 1563] 
split level 97: [/input, 507] 
split level 98: [/input-8, 773] 
split level 99: [/input-8, 820] 
split level 100: [/input-8, 1614] 
split level 101: [/input, 618] 
split level 102: [/input, 1003] 
split level 103: [/input, 2947] 
split level 104: [/input, 1974] 
split level 105: [/input-8, 165] 
split level 106: [/input, 435] 
split level 107: [/input, 1012] 
split level 108: [/input, 2871] 
split level 109: [/input-8, 1731] 
split level 110: [/input, 1977] 
split level 111: [/input, 390] 
split level 112: [/input-8, 1243] 
split level 113: [/input, 1993] 
split level 114: [/input-8, 888] 
split level 115: [/input, 903] 
split level 116: [/input-8, 12] 
split level 117: [/input-8, 1625] 
split level 118: [/input, 3022] 
split level 119: [/input-8, 332] 
split level 120: [/input, 1976] 
split level 121: [/input-8, 158] 
split level 122: [/input, 283] 
split level 123: [/input, 1960] 
split level 124: [/input-8, 122] 
split level 125: [/input, 3554] 
split level 126: [/input, 811] 
split level 127: [/input, 633] 
split level 128: [/input, 2092] 
split level 129: [/input-8, 1233] 
split level 130: [/input-8, 890] 
split level 131: [/input-8, 1920] 
split level 132: [/input, 884] 
split level 133: [/input, 597] 
split level 134: [/input-8, 879] 
split level 135: [/input, 203] 
split level 136: [/input, 795] 
split level 137: [/input, 308] 
split level 138: [/input, 1978] 
split level 139: [/input, 1990] 
split level 140: [/input, 219] 
split level 141: [/input, 314] 
split level 142: [/input, 3037] 
split level 143: [/input, 185] 
split level 144: [/input-8, 334] 
split level 145: [/input-8, 1678] 
split level 146: [/input-8, 1407] 
split level 147: [/input, 909] 
split level 148: [/input, 792] 
split level 149: [/input-8, 1642] 
split level 150: [/input-8, 1737] 
split level 151: [/input, 2363] 
split level 152: [/input-8, 887] 
split level 153: [/input, 323] 
split level 154: [/input, 72] 
split level 155: [/input, 619] 
split level 156: [/input, 2887] 
split level 157: [/input, 1502] 
split level 158: [/input-8, 1384] 
split level 159: [/input, 222] 
split level 160: [/input, 3522] 
split level 161: [/input, 71] 
split level 162: [/input-8, 1669] 
split level 163: [/input-8, 169] 
split level 164: [/input-8, 1613] 
split level 165: [/input-8, 1730] 
split level 166: [/input, 339] 
split level 167: [/input, 973] 
split level 168: [/input, 221] 
split level 169: [/input, 605] 
split level 170: [/input, 70] 
split level 171: [/input, 632] 
split level 172: [/input, 631] 
split level 173: [/input, 2106] 
split level 174: [/input, 187] 
split level 175: [/input, 2930] 
split level 176: [/input, 2109] 
split level 177: [/input, 268] 
split level 178: [/input, 2862] 
split level 179: [/input, 2332] 
split level 180: [/input, 1335] 
split level 181: [/input, 2322] 
split level 182: [/input, 1989] 
split level 183: [/input, 1996] 
split level 184: [/input, 1944] 
split level 185: [/input-8, 1554] 
split level 186: [/input, 2091] 
split level 187: [/input, 1946] 
split level 188: [/input, 3038] 
split level 189: [/input, 779] 
split level 190: [/input, 260] 
split level 191: [/input-8, 1027] 
split level 192: [/input, 786] 
split level 193: [/input, 820] 
split level 194: [/input, 285] 
split level 195: [/input, 2349] 
split level 196: [/input, 1336] 
split level 197: [/input, 617] 
split level 198: [/input, 2021] 
split level 199: [/input, 588] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3861417770385742
10 lb beta sum: 0.0, worst -0.3861401081085205
Time: prepare 0.0114    bound 0.0994    transfer 0.0012    finalize 0.0026    func 0.1172    
Accumulated time: func 0.1715    prepare 0.0216    bound 0.1533    transfer 0.0013    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.17392540) min lb tensor(-0.38613462)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010426998138427734 
BICCOS Cumulative time: 0.010426998138427734
Preprocessing time: 0.010009765625 Inference time: 0.00012111663818359375 Add cuts time: 7.534027099609375e-05 Cut analysis time: 0.00022077560424804688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.36964 (1), -0.36948 (1), -0.36816 (1), -0.36791 (1), -0.36660 (1), -0.36599 (1), -0.36591 (1), -0.36572 (1), -0.36540 (1), -0.36503 (1), -0.36488 (1), -0.36479 (1), -0.36474 (1), -0.36415 (1), -0.36413 (1), -0.36401 (1), -0.36327 (1), -0.36227 (1), -0.36141 (1), -0.36121 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5265    set_bounds 0.0086    solve 0.1173    add 0.0728    
Accumulated time: pickout 0.0003    decision 0.5265    set_bounds 0.0086    solve 0.1173    add 0.0728    
Current (lb-rhs): -0.36963510513305664
50 domains visited
Cumulative time: 0.8134019374847412

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 68] [/input-12, 42] 
split level 1: [/input-12, 68] [/input-12, 8] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] [/input-12, 68] 
split level 2: [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 8] 
split level 3: [/input-12, 2] [/input-12, 79] [/input-12, 2] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 2] [/input-12, 2] [/input-12, 79] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.32616591453552246
10 lb beta sum: 0.4465484619140625, worst -0.30382752418518066
Time: prepare 0.0072    bound 0.1190    transfer 0.0008    finalize 0.0024    func 0.1321    
Accumulated time: func 0.3037    prepare 0.0291    bound 0.2723    transfer 0.0022    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.26297235) min lb tensor(-0.30361366)
Number of Verified Splits: 96 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.017399072647094727 
BICCOS Cumulative time: 0.02782607078552246
Preprocessing time: 0.011710405349731445 Inference time: 0.003577709197998047 Add cuts time: 0.0018498897552490234 Cut analysis time: 0.00026106834411621094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18671 (2), -0.18588 (2), -0.18565 (2), -0.18520 (2), -0.18405 (2), -0.18395 (2), -0.18361 (2), -0.18318 (2), -0.18291 (2), -0.18212 (2), -0.18153 (2), -0.18019 (2), -0.17819 (2), -0.17701 (2), -0.17696 (2), -0.17644 (2), -0.17560 (2), -0.17524 (2), -0.17485 (2), -0.17440 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0228    set_bounds 0.0124    solve 0.1322    add 0.0805    
Accumulated time: pickout 0.0014    decision 0.5494    set_bounds 0.0209    solve 0.2495    add 0.1533    
Current (lb-rhs): -0.1867074966430664
100 domains visited
Cumulative time: 1.080066204071045

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2369849681854248
10 lb beta sum: 0.7949877977371216, worst -0.15892577171325684
Time: prepare 0.0070    bound 0.1213    transfer 0.0007    finalize 0.0026    func 0.1342    
Accumulated time: func 0.4379    prepare 0.0363    bound 0.3936    transfer 0.0029    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.41913122) min lb tensor(-0.15695429)
Number of Verified Splits: 133 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 6
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.020122766494750977 
BICCOS Cumulative time: 0.04794883728027344
Preprocessing time: 0.011602640151977539 Inference time: 0.006173372268676758 Add cuts time: 0.002018451690673828 Cut analysis time: 0.00032830238342285156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04339 (3), -0.04209 (3), -0.04131 (3), -0.04108 (3), -0.03998 (3), -0.03920 (3), -0.03905 (3), -0.03806 (3), -0.03780 (3), -0.03728 (3), -0.03705 (3), -0.03678 (3), -0.03661 (3), -0.03650 (3), -0.03635 (3), -0.03524 (3), -0.03301 (3), -0.03145 (3), -0.03121 (3), -0.03006 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0153    solve 0.1343    add 0.0881    
Accumulated time: pickout 0.0024    decision 0.5688    set_bounds 0.0363    solve 0.3838    add 0.2414    
Current (lb-rhs): -0.04339250922203064
150 domains visited
Cumulative time: 1.3585424423217773

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
split level 3: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15011358261108398
10 lb beta sum: 0.8387397527694702, worst -0.019576936960220337
Time: prepare 0.0076    bound 0.1366    transfer 0.0007    finalize 0.0023    func 0.1498    
Accumulated time: func 0.5877    prepare 0.0442    bound 0.5302    transfer 0.0036    finalize 0.0100    
all_split False
======================Cut inference begins======================
max lb tensor(0.18235260) min lb tensor(-0.01798587)
Number of Verified Splits: 371 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 20
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.03936910629272461 
BICCOS Cumulative time: 0.08731794357299805
Preprocessing time: 0.011584758758544922 Inference time: 0.01691269874572754 Add cuts time: 0.01019597053527832 Cut analysis time: 0.0006756782531738281
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0193    set_bounds 0.0156    solve 0.1499    add 0.0241    
Accumulated time: pickout 0.0035    decision 0.5880    set_bounds 0.0519    solve 0.5337    add 0.2655    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1067]), tensor([-1.]), tensor([0]), tensor([3.58732407e-43]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [3.587324068671532e-43], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([5.75675313e-20, 1.61394373e-01, 8.34758431e-02]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [3.587324068671532e-43], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.75675313e-20, 1.61394373e-01, 3.72037292e-02]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [3.587324068671532e-43], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.75675313e-20, 1.25242069e-01, 9.72281247e-02]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [3.587324068671532e-43], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([5.75675313e-20, 1.25242069e-01, 1.88136417e-02]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [3.587324068671532e-43], [0]), '/input-12': (tensor([2, 8]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.60519386e-45, 1.67150244e-01]), tensor([1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [3.587324068671532e-43], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.60519386e-45, 1.26840189e-01, 1.00912437e-01]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [3.587324068671532e-43], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([5.60519386e-45, 1.26840189e-01, 1.88889969e-02]), tensor([1, 2, 3]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3853566646575928
10 lb beta sum: 1.086531639099121, worst -0.24505364894866943
Time: prepare 0.0005    bound 0.1454    transfer 0.0001    finalize 0.0002    func 0.1463    
Accumulated time: func 0.7341    prepare 0.0446    bound 0.6756    transfer 0.0037    finalize 0.0102    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 90] 
split level 3: [/input-12, 8] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 79] 
split level 6: [/input-12, 61] 
split level 7: [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4406702518463135, worst -0.05337190628051758
10 lb beta sum: 1.464111566543579, worst -0.0519866943359375
Time: prepare 0.0107    bound 0.1461    transfer 0.0018    finalize 0.0016    func 0.1619    
Accumulated time: func 0.8960    prepare 0.0558    bound 0.8218    transfer 0.0055    finalize 0.0119    
all_split False
======================Cut inference begins======================
max lb tensor(0.98341370) min lb tensor(-0.05188870)
Number of Verified Splits: 249 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.440670132637024, worst -0.18368244171142578
10 lb beta sum: 1.6145565509796143, worst -0.14186811447143555
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 20
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.46434760093688965 
BICCOS Cumulative time: 0.5516655445098877
Preprocessing time: 0.007028102874755859 Inference time: 0.4504528045654297 Add cuts time: 0.006016254425048828 Cut analysis time: 0.0008504390716552734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05189 (8), -0.04825 (8), -0.04582 (8), -0.04137 (8), -0.00665 (8), -0.00390 (8), -0.00262 (8), 
Length of domains: 7
Time: pickout 0.0005    decision 0.0224    set_bounds 0.0176    solve 0.1620    add 0.0009    
Accumulated time: pickout 0.0040    decision 0.6104    set_bounds 0.0695    solve 0.6957    add 0.2664    
Current (lb-rhs): -0.05188870429992676
157 domains visited
Cumulative time: 2.4420690536499023

BaB round 2
batch: 7
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input, 3000] [/input-8, 171] [/input-8, 268] [/input, 3000] [/input-8, 171] [/input-8, 171] [/input-8, 268] 
split level 2: [/input-8, 179] [/input, 3000] [/input-8, 171] [/input-8, 179] [/input, 3000] [/input-8, 179] [/input-8, 171] 
split level 3: [/input, 3017] [/input-8, 179] [/input-8, 179] [/input, 3017] [/input-8, 179] [/input, 3017] [/input-8, 179] 
split level 4: [/input, 3018] [/input, 3017] [/input, 3018] [/input, 3018] [/input, 3017] [/input, 3018] [/input, 3018] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02003335952758789
10 lb beta sum: 0.0431610532104969, worst -0.014554262161254883
Time: prepare 0.0057    bound 0.1473    transfer 0.0006    finalize 0.0013    func 0.1565    
Accumulated time: func 1.0524    prepare 0.0618    bound 0.9691    transfer 0.0062    finalize 0.0132    
all_split False
======================Cut inference begins======================
max lb tensor(0.08720922) min lb tensor(-0.01448441)
Number of Verified Splits: 195 of 224
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2458667755126953
10 lb beta sum: 1.3042259216308594, worst -0.16942119598388672
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 20
#cuts 4-6: 10
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.30313706398010254 
BICCOS Cumulative time: 0.8548026084899902
Preprocessing time: 0.0066492557525634766 Inference time: 0.2908363342285156 Add cuts time: 0.0046100616455078125 Cut analysis time: 0.001041412353515625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01448 (13), -0.01268 (13), -0.01267 (13), -0.01072 (13), -0.00978 (13), -0.00903 (13), -0.00876 (13), -0.00857 (13), -0.00836 (13), -0.00811 (13), -0.00741 (13), -0.00618 (13), -0.00548 (13), -0.00483 (13), -0.00465 (13), -0.00461 (13), -0.00459 (13), -0.00431 (13), -0.00356 (13), -0.00332 (13), 
Length of domains: 29
Time: pickout 0.0010    decision 0.0159    set_bounds 0.0250    solve 0.1565    add 0.0011    
Accumulated time: pickout 0.0050    decision 0.6263    set_bounds 0.0945    solve 0.8523    add 0.2675    
Current (lb-rhs): -0.014484405517578125
186 domains visited
Cumulative time: 2.9464266300201416

BaB round 3
batch: 29
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 171] [/input, 3018] [/input-8, 171] [/input, 3018] [/input, 3018] [/input-8, 171] [/input, 3018] [/input, 3018] [/input-8, 171] [/input, 3018] 
split level 2: [/input, 3002] [/input, 3002] [/input, 3002] [/input, 3032] [/input, 3002] [/input, 3002] [/input, 3032] [/input, 3002] [/input, 3002] [/input, 3002] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0011060237884521484
10 lb beta sum: 0.0, worst -0.0010306835174560547
Time: prepare 0.0059    bound 0.1476    transfer 0.0013    finalize 0.0011    func 0.1575    
Accumulated time: func 1.2099    prepare 0.0679    bound 1.1166    transfer 0.0075    finalize 0.0143    
all_split False
======================Cut inference begins======================
max lb tensor(0.06574965) min lb tensor(-0.00097609)
Number of Verified Splits: 231 of 232
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 23
#cuts 4-6: 9
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.03239631652832031 
BICCOS Cumulative time: 0.8871989250183105
Preprocessing time: 0.0069196224212646484 Inference time: 0.02243947982788086 Add cuts time: 0.0020203590393066406 Cut analysis time: 0.001016855239868164
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00098 (16), 
Length of domains: 1
Time: pickout 0.0016    decision 0.0149    set_bounds 0.0236    solve 0.1575    add 0.0006    
Accumulated time: pickout 0.0066    decision 0.6412    set_bounds 0.1180    solve 1.0098    add 0.2681    
Current (lb-rhs): -0.0009760856628417969
187 domains visited
Cumulative time: 3.1781134605407715

BaB round 4
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 268] 
split level 1: [/input, 456] 
split level 2: [/input-8, 172] 
split level 3: [/input-8, 372] 
split level 4: [/input-8, 178] 
split level 5: [/input, 3002] 
split level 6: [/input, 3031] 
split level 7: [/input-8, 1125] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.037513017654418945

all verified at 0th iter
Time: prepare 0.0064    bound 0.0057    transfer 0.0009    finalize 0.0011    func 0.0158    
Accumulated time: func 1.2257    prepare 0.0747    bound 1.1223    transfer 0.0084    finalize 0.0154    
all_split False
======================Cut inference begins======================
max lb tensor(0.11207199) min lb tensor(0.03751302)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 34.
#cuts 1-3: 23
#cuts 4-6: 9
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.007546663284301758 
BICCOS Cumulative time: 0.8947455883026123
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0224    set_bounds 0.0293    solve 0.0159    add 0.0004    
Accumulated time: pickout 0.0077    decision 0.6636    set_bounds 0.1473    solve 1.0257    add 0.2685    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
187 domains visited
Cumulative time: 3.255592107772827


Properties batch 6, size 1
Remaining timeout: 192.38299298286438
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 192.3829083442688
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 192.3828842639923
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 7.6179 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 159, vnnlib ID: 159 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.30548668, -31.13262558, -30.14710617, -29.36580276, -31.43879890,
         -30.41797447, -28.40415192, -33.04300690, -32.20061874, -30.97929573]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [616]; unstable size 616; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 174, 1, 616] with unstable size 173 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 616] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 616] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [173]; unstable size 173; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 173] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 173] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.89829934, 1.27482843, 1.03844357, 0.41801405, 2.17892456, 1.35105944,
         3.53787756, 2.40265942, 1.21200275]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0685 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 160, vnnlib ID: 160 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.07235527, -18.64887428, -12.18960285, -14.05477905, -11.31740856,
         -14.56902885, -12.93454456, -14.51499081, -16.24306488, -18.54707718]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1027]; unstable size 1027; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 299, 1, 1027] with unstable size 298 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 32, 1, 1027] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1027] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [298]; unstable size 298; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 32, 1, 298] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 298] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [31]; unstable size 31; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.02182794,  4.76163864, -0.19650868,  1.45338202,  1.88351476,
          0.29130340,  1.95355928,  2.40450501,  4.61817646]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.07235527, -18.64887428, -12.18960285, -14.05477905, -11.31740856,
         -14.56902885, -12.93454456, -14.51499081, -16.24306488, -18.54707718]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.70it/s]100%|██████████| 1/1 [00:00<00:00,  8.69it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.22353172, -18.85214615, -12.26174545, -14.25788116, -11.70257187,
          -14.80233765, -13.11868382, -14.95127678, -16.34649467, -18.77943611]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.55917358]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1178 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 20.154895782470703
alpha/beta optimization time: 1.256321668624878
initial alpha-crown bounds: tensor([[ 2.14901876,  4.91513729, -0.11741784,  1.51492679,  1.96165740,
          0.36733073,  2.03420472,  2.56606030,  4.76397800]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.1174178421497345
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.55425763130188
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.55421566963196
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.55419206619263
Verifying property 2 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.11741784]], device='cuda:0') need to verify.
Model prediction is: tensor([-15.07235527, -18.64887428, -12.18960285, -14.05477905, -11.31740856,
        -14.56902885, -12.93454456, -14.51499081, -16.24306488, -18.54707718],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.11741784]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1027
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 30
-----------------
# of unstable neurons: 1350
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011134147644042969
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11741337180137634
10 lb beta sum: 0.0, worst -0.11741861701011658
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0543    transfer 0.0001    finalize 0.0001    func 0.0548    
Accumulated time: func 0.0548    prepare 0.0002    bound 0.0543    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] 
split level 1: [/input-12, 24] 
split level 2: [/input-12, 53] 
split level 3: [/input-12, 69] 
split level 4: [/input-12, 96] 
split level 5: [/input-12, 6] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 12] 
split level 8: [/input-12, 46] 
split level 9: [/input-12, 0] 
split level 10: [/input-8, 1955] 
split level 11: [/input-12, 18] 
split level 12: [/input-12, 49] 
split level 13: [/input-12, 15] 
split level 14: [/input-12, 38] 
split level 15: [/input-8, 1628] 
split level 16: [/input-8, 1708] 
split level 17: [/input-8, 275] 
split level 18: [/input-8, 1962] 
split level 19: [/input-8, 481] 
split level 20: [/input-8, 484] 
split level 21: [/input-8, 274] 
split level 22: [/input-8, 1954] 
split level 23: [/input-8, 1705] 
split level 24: [/input-8, 1678] 
split level 25: [/input-8, 477] 
split level 26: [/input-8, 1945] 
split level 27: [/input-8, 1710] 
split level 28: [/input-8, 1938] 
split level 29: [/input-8, 930] 
split level 30: [/input-8, 1946] 
split level 31: [/input-8, 1626] 
split level 32: [/input-12, 20] 
split level 33: [/input-8, 1716] 
split level 34: [/input-8, 1963] 
split level 35: [/input-8, 1618] 
split level 36: [/input-8, 1300] 
split level 37: [/input-8, 797] 
split level 38: [/input-8, 1931] 
split level 39: [/input-8, 469] 
split level 40: [/input-12, 57] 
split level 41: [/input-8, 1630] 
split level 42: [/input-8, 1318] 
split level 43: [/input-8, 1301] 
split level 44: [/input-8, 1953] 
split level 45: [/input-8, 592] 
split level 46: [/input-8, 1660] 
split level 47: [/input-8, 285] 
split level 48: [/input-8, 461] 
split level 49: [/input-8, 804] 
split level 50: [/input-8, 1363] 
split level 51: [/input-8, 779] 
split level 52: [/input-8, 100] 
split level 53: [/input-8, 438] 
split level 54: [/input-8, 1638] 
split level 55: [/input-8, 1621] 
split level 56: [/input-8, 453] 
split level 57: [/input-8, 1230] 
split level 58: [/input-8, 1338] 
split level 59: [/input-8, 578] 
split level 60: [/input-8, 1939] 
split level 61: [/input-8, 1961] 
split level 62: [/input-8, 433] 
split level 63: [/input-8, 1340] 
split level 64: [/input-8, 777] 
split level 65: [/input-8, 1940] 
split level 66: [/input-8, 1941] 
split level 67: [/input-8, 75] 
split level 68: [/input-8, 1029] 
split level 69: [/input-8, 108] 
split level 70: [/input-8, 1372] 
split level 71: [/input-8, 1290] 
split level 72: [/input-8, 1364] 
split level 73: [/input-8, 1652] 
split level 74: [/input-8, 298] 
split level 75: [/input-8, 478] 
split level 76: [/input-8, 434] 
split level 77: [/input-8, 1054] 
split level 78: [/input-8, 778] 
split level 79: [/input-8, 1329] 
split level 80: [/input-8, 1226] 
split level 81: [/input-8, 918] 
split level 82: [/input-8, 624] 
split level 83: [/input-8, 1790] 
split level 84: [/input-8, 441] 
split level 85: [/input, 2710] 
split level 86: [/input-8, 814] 
split level 87: [/input-8, 830] 
split level 88: [/input-8, 91] 
split level 89: [/input-8, 603] 
split level 90: [/input-8, 465] 
split level 91: [/input-8, 577] 
split level 92: [/input-8, 785] 
split level 93: [/input-8, 595] 
split level 94: [/input-8, 829] 
split level 95: [/input-8, 1613] 
split level 96: [/input-8, 1646] 
split level 97: [/input-8, 1260] 
split level 98: [/input-8, 28] 
split level 99: [/input-8, 73] 
split level 100: [/input-8, 1229] 
split level 101: [/input-8, 1337] 
split level 102: [/input-8, 798] 
split level 103: [/input-8, 409] 
split level 104: [/input-8, 83] 
split level 105: [/input, 1446] 
split level 106: [/input-8, 813] 
split level 107: [/input-8, 82] 
split level 108: [/input-8, 76] 
split level 109: [/input-8, 1596] 
split level 110: [/input-8, 1297] 
split level 111: [/input-8, 955] 
split level 112: [/input-8, 1597] 
split level 113: [/input-8, 74] 
split level 114: [/input-8, 1225] 
split level 115: [/input-8, 492] 
split level 116: [/input-8, 958] 
split level 117: [/input-8, 1764] 
split level 118: [/input-8, 1773] 
split level 119: [/input-8, 293] 
split level 120: [/input-8, 1595] 
split level 121: [/input-8, 1762] 
split level 122: [/input, 612] 
split level 123: [/input-8, 109] 
split level 124: [/input-8, 1593] 
split level 125: [/input-8, 446] 
split level 126: [/input-8, 21] 
split level 127: [/input-8, 85] 
split level 128: [/input, 2725] 
split level 129: [/input-8, 1227] 
split level 130: [/input, 3460] 
split level 131: [/input-8, 1321] 
split level 132: [/input-8, 81] 
split level 133: [/input-8, 1657] 
split level 134: [/input-8, 486] 
split level 135: [/input-8, 22] 
split level 136: [/input, 3208] 
split level 137: [/input-8, 78] 
split level 138: [/input-8, 452] 
split level 139: [/input, 508] 
split level 140: [/input, 610] 
split level 141: [/input, 884] 
split level 142: [/input, 885] 
split level 143: [/input-8, 1594] 
split level 144: [/input, 597] 
split level 145: [/input-8, 626] 
split level 146: [/input-8, 812] 
split level 147: [/input-8, 1365] 
split level 148: [/input-8, 345] 
split level 149: [/input, 1223] 
split level 150: [/input-8, 1252] 
split level 151: [/input, 3239] 
split level 152: [/input, 2164] 
split level 153: [/input-8, 1228] 
split level 154: [/input, 3224] 
split level 155: [/input-8, 1222] 
split level 156: [/input, 1209] 
split level 157: [/input, 1012] 
split level 158: [/input, 1019] 
split level 159: [/input, 551] 
split level 160: [/input-8, 86] 
split level 161: [/input-8, 488] 
split level 162: [/input, 593] 
split level 163: [/input-8, 92] 
split level 164: [/input-8, 278] 
split level 165: [/input-8, 116] 
split level 166: [/input, 900] 
split level 167: [/input-8, 1781] 
split level 168: [/input, 2786] 
split level 169: [/input, 611] 
split level 170: [/input, 3492] 
split level 171: [/input, 3446] 
split level 172: [/input, 2787] 
split level 173: [/input, 2163] 
split level 174: [/input-8, 1761] 
split level 175: [/input, 1020] 
split level 176: [/input, 2181] 
split level 177: [/input-8, 384] 
split level 178: [/input, 3578] 
split level 179: [/input, 1210] 
split level 180: [/input, 1179] 
split level 181: [/input-8, 442] 
split level 182: [/input, 2772] 
split level 183: [/input, 3048] 
split level 184: [/input, 2196] 
split level 185: [/input, 387] 
split level 186: [/input, 557] 
split level 187: [/input, 1208] 
split level 188: [/input, 3498] 
split level 189: [/input, 2789] 
split level 190: [/input, 552] 
split level 191: [/input, 3020] 
split level 192: [/input, 3541] 
split level 193: [/input, 2792] 
split level 194: [/input, 956] 
split level 195: [/input, 444] 
split level 196: [/input, 2556] 
split level 197: [/input, 1194] 
split level 198: [/input, 3532] 
split level 199: [/input, 2660] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11737602949142456
10 lb beta sum: 0.0, worst -0.11737102270126343
Time: prepare 0.0115    bound 0.1018    transfer 0.0013    finalize 0.0035    func 0.1207    
Accumulated time: func 0.1755    prepare 0.0218    bound 0.1561    transfer 0.0014    finalize 0.0036    
all_split False
======================Cut inference begins======================
max lb tensor(0.13235998) min lb tensor(-0.11736530)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.010773897171020508 
BICCOS Cumulative time: 0.010773897171020508
Preprocessing time: 0.009879112243652344 Inference time: 0.0005426406860351562 Add cuts time: 9.107589721679688e-05 Cut analysis time: 0.00026106834411621094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10714 (1), -0.10711 (1), -0.10690 (1), -0.10673 (1), -0.10672 (1), -0.10634 (1), -0.10629 (1), -0.10602 (1), -0.10581 (1), -0.10580 (1), -0.10568 (1), -0.10532 (1), -0.10527 (1), -0.10510 (1), -0.10450 (1), -0.10413 (1), -0.10399 (1), -0.10324 (1), -0.10308 (1), -0.10299 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5261    set_bounds 0.0086    solve 0.1208    add 0.0705    
Accumulated time: pickout 0.0003    decision 0.5261    set_bounds 0.0086    solve 0.1208    add 0.0705    
Current (lb-rhs): -0.10714393854141235
50 domains visited
Cumulative time: 0.7966315746307373

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 24] [/input-12, 24] [/input-12, 53] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 53] [/input-12, 53] [/input-12, 69] [/input-12, 53] [/input-12, 69] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 3: [/input-12, 69] [/input-12, 69] [/input-12, 6] [/input-12, 69] [/input-12, 6] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08096316456794739

all verified at 6th iter
Time: prepare 0.0067    bound 0.0440    transfer 0.0007    finalize 0.0023    func 0.0564    
Accumulated time: func 0.2318    prepare 0.0287    bound 0.2002    transfer 0.0021    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.17983094) min lb tensor(0.00159499)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03577923774719238 
BICCOS Cumulative time: 0.04655313491821289
Preprocessing time: 0.012143850326538086 Inference time: 0.015928983688354492 Add cuts time: 0.007515907287597656 Cut analysis time: 0.00019049644470214844
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0129    solve 0.0564    add 0.0150    
Accumulated time: pickout 0.0013    decision 0.5458    set_bounds 0.0215    solve 0.1772    add 0.0856    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 31]), tensor([-1., -1.]), tensor([0, 0]), tensor([5.75662906e-20, 1.87414855e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 31]), tensor([-1.,  1.]), tensor([0, 0]), tensor([5.75662906e-20, 2.04158753e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 31]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.75662906e-20, 1.93642005e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 31]), tensor([1., 1.]), tensor([0, 0]), tensor([5.75662906e-20, 1.88853160e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.057777196168899536

all verified at 2th iter
Time: prepare 0.0004    bound 0.0153    transfer 0.0001    finalize 0.0001    func 0.0159    
Accumulated time: func 0.2478    prepare 0.0291    bound 0.2154    transfer 0.0022    finalize 0.0061    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.41112160682678
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.41104364395142
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.41102075576782
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.41100072860718
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.41097903251648
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.41095995903015
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.5891 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 161, vnnlib ID: 161 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.26904869, -33.04354858, -25.95203400, -25.30147362, -26.82607079,
         -23.58791351, -27.02210999, -26.74736023, -30.97900772, -31.80931664]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [497]; unstable size 497; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 236, 1, 497] with unstable size 235 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 497] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 497] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [235]; unstable size 235; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 235] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 235] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.07312393, 7.09390211, 1.17368293, 1.32954621, 1.97331989, 2.09624052,
         2.19010615, 5.61076927, 6.28059912]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0633 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 162, vnnlib ID: 162 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.48896790, -26.36515045, -19.88720322, -22.34896469, -20.88877678,
         -23.03698540, -20.63687515, -24.80028343, -23.16793442, -27.18689156]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [914]; unstable size 914; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 265, 1, 914] with unstable size 264 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 914] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 914] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [264]; unstable size 264; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 264] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 264] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.50396144,  4.56140327,  1.59753513,  0.26819646,  2.21705413,
         -0.30545187,  3.74951553,  1.75252259,  5.38511467]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.48896790, -26.36515045, -19.88720322, -22.34896469, -20.88877678,
         -23.03698540, -20.63687515, -24.80028343, -23.16793442, -27.18689156]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.51it/s]100%|██████████| 1/1 [00:00<00:00,  8.50it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.61618996, -26.34212685, -20.08324432, -22.38359451, -20.88983536,
          -23.12462997, -20.31562424, -24.86903000, -23.20267296, -27.22996330]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.23237991]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1204 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 21.216480255126953
alpha/beta optimization time: 1.244729995727539
initial alpha-crown bounds: tensor([[ 1.54622078,  4.63079357,  1.64909220,  0.31041086,  2.27289987,
         -0.27205837,  3.81806350,  1.79653978,  5.46451855]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.272058367729187
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5640890598297
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.56404757499695
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.5640242099762
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.5640025138855
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.56398344039917
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.56396389007568
Verifying property 5 with 1 instances.
##### Instance 162 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.27205837]], device='cuda:0') need to verify.
Model prediction is: tensor([-22.48896790, -26.36515045, -19.88720322, -22.34896469, -20.88877678,
        -23.03698540, -20.63687515, -24.80028343, -23.16793442, -27.18689156],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.27205837]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 914
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 259
Node /15 input 0: size torch.Size([100]) unstable 17
-----------------
# of unstable neurons: 1190
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.989738464355469e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2720566987991333
10 lb beta sum: 0.0, worst -0.27205920219421387
Time: prepare 0.0002    bound 0.0899    transfer 0.0001    finalize 0.0001    func 0.0903    
Accumulated time: func 0.0903    prepare 0.0002    bound 0.0899    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] 
split level 1: [/input-12, 36] 
split level 2: [/input-12, 96] 
split level 3: [/input-12, 89] 
split level 4: [/input-12, 43] 
split level 5: [/input-12, 15] 
split level 6: [/input-12, 18] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 90] 
split level 9: [/input, 2968] 
split level 10: [/input-8, 1772] 
split level 11: [/input-8, 173] 
split level 12: [/input-8, 1171] 
split level 13: [/input, 419] 
split level 14: [/input, 2984] 
split level 15: [/input-8, 953] 
split level 16: [/input-8, 1756] 
split level 17: [/input-8, 1755] 
split level 18: [/input, 2966] 
split level 19: [/input, 900] 
split level 20: [/input-8, 1236] 
split level 21: [/input, 3044] 
split level 22: [/input-8, 1762] 
split level 23: [/input, 901] 
split level 24: [/input-8, 1734] 
split level 25: [/input, 932] 
split level 26: [/input-8, 228] 
split level 27: [/input, 953] 
split level 28: [/input-8, 372] 
split level 29: [/input, 885] 
split level 30: [/input, 2935] 
split level 31: [/input-8, 954] 
split level 32: [/input, 137] 
split level 33: [/input, 117] 
split level 34: [/input-8, 1374] 
split level 35: [/input, 966] 
split level 36: [/input-8, 1245] 
split level 37: [/input, 3028] 
split level 38: [/input, 2920] 
split level 39: [/input-8, 1740] 
split level 40: [/input, 3235] 
split level 41: [/input, 962] 
split level 42: [/input-8, 1769] 
split level 43: [/input-8, 2015] 
split level 44: [/input, 869] 
split level 45: [/input, 647] 
split level 46: [/input, 140] 
split level 47: [/input-8, 1716] 
split level 48: [/input, 133] 
split level 49: [/input-8, 2006] 
split level 50: [/input-8, 1332] 
split level 51: [/input, 964] 
split level 52: [/input, 1912] 
split level 53: [/input, 118] 
split level 54: [/input, 948] 
split level 55: [/input-8, 1625] 
split level 56: [/input-8, 1618] 
split level 57: [/input, 853] 
split level 58: [/input, 2685] 
split level 59: [/input-8, 1649] 
split level 60: [/input-8, 1193] 
split level 61: [/input-8, 1748] 
split level 62: [/input, 949] 
split level 63: [/input, 1390] 
split level 64: [/input, 2936] 
split level 65: [/input, 1943] 
split level 66: [/input, 916] 
split level 67: [/input, 934] 
split level 68: [/input, 169] 
split level 69: [/input, 167] 
split level 70: [/input, 125] 
split level 71: [/input, 2988] 
split level 72: [/input, 450] 
split level 73: [/input-8, 1077] 
split level 74: [/input, 965] 
split level 75: [/input, 141] 
split level 76: [/input, 970] 
split level 77: [/input-8, 1331] 
split level 78: [/input, 164] 
split level 79: [/input, 213] 
split level 80: [/input-8, 1244] 
split level 81: [/input, 102] 
split level 82: [/input, 2972] 
split level 83: [/input, 968] 
split level 84: [/input, 1928] 
split level 85: [/input-8, 1996] 
split level 86: [/input, 884] 
split level 87: [/input-8, 1650] 
split level 88: [/input, 172] 
split level 89: [/input-8, 1633] 
split level 90: [/input, 871] 
split level 91: [/input, 2686] 
split level 92: [/input-8, 1781] 
split level 93: [/input, 2441] 
split level 94: [/input-8, 2032] 
split level 95: [/input, 852] 
split level 96: [/input, 631] 
split level 97: [/input, 698] 
split level 98: [/input, 3460] 
split level 99: [/input, 946] 
split level 100: [/input, 142] 
split level 101: [/input, 678] 
split level 102: [/input, 89] 
split level 103: [/input, 2211] 
split level 104: [/input, 2670] 
split level 105: [/input, 406] 
split level 106: [/input-8, 1157] 
split level 107: [/input-8, 2017] 
split level 108: [/input, 2964] 
split level 109: [/input-8, 181] 
split level 110: [/input, 2692] 
split level 111: [/input, 868] 
split level 112: [/input, 854] 
split level 113: [/input, 2963] 
split level 114: [/input, 823] 
split level 115: [/input, 2524] 
split level 116: [/input, 375] 
split level 117: [/input-8, 1366] 
split level 118: [/input, 1913] 
split level 119: [/input, 1897] 
split level 120: [/input, 855] 
split level 121: [/input-8, 229] 
split level 122: [/input, 211] 
split level 123: [/input-8, 771] 
split level 124: [/input, 2948] 
split level 125: [/input, 2691] 
split level 126: [/input-8, 956] 
split level 127: [/input, 156] 
split level 128: [/input-8, 1610] 
split level 129: [/input, 1927] 
split level 130: [/input, 1881] 
split level 131: [/input, 3531] 
split level 132: [/input, 3131] 
split level 133: [/input, 930] 
split level 134: [/input, 3291] 
split level 135: [/input, 3476] 
split level 136: [/input, 4007] 
split level 137: [/input, 2939] 
split level 138: [/input, 662] 
split level 139: [/input, 216] 
split level 140: [/input, 2248] 
split level 141: [/input-8, 1617] 
split level 142: [/input, 126] 
split level 143: [/input, 1898] 
split level 144: [/input, 3532] 
split level 145: [/input, 914] 
split level 146: [/input, 838] 
split level 147: [/input, 132] 
split level 148: [/input, 228] 
split level 149: [/input, 957] 
split level 150: [/input, 981] 
split level 151: [/input, 94] 
split level 152: [/input, 2425] 
split level 153: [/input, 3549] 
split level 154: [/input-8, 1284] 
split level 155: [/input, 2690] 
split level 156: [/input, 101] 
split level 157: [/input, 2156] 
split level 158: [/input, 2702] 
split level 159: [/input-8, 1749] 
split level 160: [/input, 158] 
split level 161: [/input, 2477] 
split level 162: [/input, 898] 
split level 163: [/input-8, 366] 
split level 164: [/input, 2142] 
split level 165: [/input, 974] 
split level 166: [/input, 2932] 
split level 167: [/input, 2706] 
split level 168: [/input, 87] 
split level 169: [/input, 2212] 
split level 170: [/input, 2931] 
split level 171: [/input, 2492] 
split level 172: [/input, 2676] 
split level 173: [/input, 2436] 
split level 174: [/input, 2659] 
split level 175: [/input, 214] 
split level 176: [/input, 2181] 
split level 177: [/input, 2660] 
split level 178: [/input, 215] 
split level 179: [/input, 2675] 
split level 180: [/input, 2504] 
split level 181: [/input-8, 213] 
split level 182: [/input, 2507] 
split level 183: [/input, 2180] 
split level 184: [/input, 2424] 
split level 185: [/input, 73] 
split level 186: [/input, 2661] 
split level 187: [/input, 1882] 
split level 188: [/input, 2254] 
split level 189: [/input, 3501] 
split level 190: [/input, 1498] 
split level 191: [/input, 2677] 
split level 192: [/input, 2163] 
split level 193: [/input, 2658] 
split level 194: [/input, 2206] 
split level 195: [/input, 2638] 
split level 196: [/input, 2398] 
split level 197: [/input, 3041] 
split level 198: [/input, 2674] 
split level 199: [/input, 2705] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2718234062194824
10 lb beta sum: 0.0, worst -0.27181529998779297
Time: prepare 0.0113    bound 0.1003    transfer 0.0011    finalize 0.0030    func 0.1183    
Accumulated time: func 0.2087    prepare 0.0216    bound 0.1902    transfer 0.0012    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.02809167) min lb tensor(-0.27181172)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010281801223754883 
BICCOS Cumulative time: 0.010281801223754883
Preprocessing time: 0.009822845458984375 Inference time: 0.0001609325408935547 Add cuts time: 7.2479248046875e-05 Cut analysis time: 0.00022554397583007812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26585 (1), -0.26582 (1), -0.26572 (1), -0.26563 (1), -0.26555 (1), -0.26530 (1), -0.26508 (1), -0.26495 (1), -0.26459 (1), -0.26443 (1), -0.26409 (1), -0.26402 (1), -0.26370 (1), -0.26369 (1), -0.26352 (1), -0.26338 (1), -0.26330 (1), -0.26329 (1), -0.26328 (1), -0.26314 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5290    set_bounds 0.0091    solve 0.1184    add 0.0785    
Accumulated time: pickout 0.0004    decision 0.5290    set_bounds 0.0091    solve 0.1184    add 0.0785    
Current (lb-rhs): -0.26584839820861816
50 domains visited
Cumulative time: 0.8565001487731934

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 96] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 96] 
split level 1: [/input-12, 89] [/input-12, 89] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 89] 
split level 2: [/input-12, 43] [/input-12, 43] [/input-12, 89] [/input-12, 43] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 43] 
split level 3: [/input-12, 18] [/input-12, 18] [/input-12, 43] [/input-12, 18] [/input-12, 18] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 18] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24263739585876465
10 lb beta sum: 0.5864970088005066, worst -0.23490643501281738
Time: prepare 0.0074    bound 0.1204    transfer 0.0007    finalize 0.0025    func 0.1337    
Accumulated time: func 0.3424    prepare 0.0293    bound 0.3106    transfer 0.0019    finalize 0.0057    
all_split False
======================Cut inference begins======================
max lb tensor(0.09628160) min lb tensor(-0.23489404)
Number of Verified Splits: 12 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 11
#cuts >= 20: 0
BICCOS time: 0.013560771942138672 
BICCOS Cumulative time: 0.023842573165893555
Preprocessing time: 0.011808156967163086 Inference time: 0.0005512237548828125 Add cuts time: 0.0002319812774658203 Cut analysis time: 0.0009694099426269531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07050 (2), -0.06992 (2), -0.06975 (2), -0.06922 (2), -0.06900 (2), -0.06897 (2), -0.06890 (2), -0.06885 (2), -0.06860 (2), -0.06850 (2), -0.06810 (2), -0.06780 (2), -0.06769 (2), -0.06761 (2), -0.06558 (2), -0.06547 (2), -0.06376 (2), -0.06254 (2), -0.06170 (2), -0.06137 (2), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0212    set_bounds 0.0120    solve 0.1338    add 0.0848    
Accumulated time: pickout 0.0016    decision 0.5502    set_bounds 0.0211    solve 0.2523    add 0.1633    
Current (lb-rhs): -0.0705014020204544
100 domains visited
Cumulative time: 1.1233444213867188

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-12, 83] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 96] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] 
split level 1: [/input-12, 96] [/input-12, 96] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 36] [/input-12, 89] [/input-12, 36] 
split level 2: [/input-12, 89] [/input-12, 89] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 89] [/input-12, 43] [/input-12, 89] 
split level 3: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 43] [/input-12, 18] [/input-12, 43] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07522034645080566
10 lb beta sum: 0.7983205914497375, worst -0.11694979667663574
Time: prepare 0.0070    bound 0.1209    transfer 0.0007    finalize 0.0023    func 0.1337    
Accumulated time: func 0.4761    prepare 0.0365    bound 0.4315    transfer 0.0026    finalize 0.0080    
all_split False
======================Cut inference begins======================
max lb tensor(0.29535317) min lb tensor(-0.03634810)
Number of Verified Splits: 379 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.03567242622375488 
BICCOS Cumulative time: 0.05951499938964844
Preprocessing time: 0.011636734008789062 Inference time: 0.016574621200561523 Add cuts time: 0.007108211517333984 Cut analysis time: 0.0003528594970703125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0192    set_bounds 0.0155    solve 0.1337    add 0.0197    
Accumulated time: pickout 0.0027    decision 0.5694    set_bounds 0.0366    solve 0.3860    add 0.1830    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 43, 83]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 1.02731898e-01, 2.99908310e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 43, 83]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 1.02731898e-01, 2.22622324e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 43, 83]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 4.89089638e-02, 2.93958038e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 43, 83]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 4.89089638e-02, 4.19669896e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 96]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.75662906e-20, 3.73006910e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 96, 83]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 1.89574614e-01, 2.58574933e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 96, 83]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 1.89574614e-01, 5.94339520e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  7
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21222591400146484
10 lb beta sum: 0.5384151339530945, worst -0.19476167857646942
Time: prepare 0.0005    bound 0.1313    transfer 0.0002    finalize 0.0002    func 0.1322    
Accumulated time: func 0.6082    prepare 0.0370    bound 0.5628    transfer 0.0028    finalize 0.0082    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 96] [/input-12, 83] 
split level 1: [/input-12, 89] [/input-12, 89] 
split level 2: [/input-12, 15] [/input-12, 43] 
split level 3: [/input-8, 1171] [/input-12, 18] 
split level 4: [/input, 2984] [/input-8, 1171] 
split level 5: [/input, 2966] [/input, 2984] 
split level 6: [/input-8, 1762] [/input, 2966] 
cut re-enabled after branching node selection
0 lb beta sum: 1.0952568054199219, worst -0.10419589281082153
10 lb beta sum: 1.1569156646728516, worst -0.1039542555809021
Time: prepare 0.0124    bound 0.1331    transfer 0.0026    finalize 0.0013    func 0.1511    
Accumulated time: func 0.7593    prepare 0.0498    bound 0.6959    transfer 0.0054    finalize 0.0094    
all_split False
======================Cut inference begins======================
max lb tensor(0.68832052) min lb tensor(-0.10389680)
Number of Verified Splits: 224 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.1161069869995117, worst -0.13662797212600708
10 lb beta sum: 1.2583940029144287, worst -0.05159708857536316
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 9
#cuts 4-6: 1
#cuts 7-9: 9
#cuts >= 20: 0
BICCOS time: 0.2881755828857422 
BICCOS Cumulative time: 0.3476905822753906
Preprocessing time: 0.007459878921508789 Inference time: 0.273512601852417 Add cuts time: 0.006285667419433594 Cut analysis time: 0.0009174346923828125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10390 (7), -0.10013 (7), -0.09844 (7), -0.09762 (7), -0.09468 (7), -0.09389 (7), -0.09216 (7), -0.08844 (7), -0.08563 (7), -0.08227 (7), -0.08026 (7), -0.07960 (7), -0.07712 (7), -0.07644 (7), -0.07434 (7), -0.07122 (7), -0.04721 (7), -0.04483 (7), -0.04383 (7), -0.04181 (7), 
Length of domains: 32
Time: pickout 0.0005    decision 0.0203    set_bounds 0.0271    solve 0.1512    add 0.0081    
Accumulated time: pickout 0.0032    decision 0.5897    set_bounds 0.0637    solve 0.5372    add 0.1911    
Current (lb-rhs): -0.10389679670333862
132 domains visited
Cumulative time: 1.9946320056915283

BaB round 2
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] 
split level 1: [/input-8, 1650] [/input-12, 2] [/input-8, 1650] [/input-12, 2] [/input-8, 1650] [/input-12, 2] [/input-8, 1650] [/input-12, 2] [/input-8, 1650] [/input-12, 2] 
split level 2: [/input-8, 1077] [/input-8, 1762] [/input-8, 1077] [/input-8, 1236] [/input-8, 1077] [/input-8, 1762] [/input-8, 1077] [/input-8, 1236] [/input-8, 1077] [/input-8, 1762] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10298943519592285
10 lb beta sum: 0.2682151198387146, worst -0.09982705116271973
Time: prepare 0.0064    bound 0.1505    transfer 0.0012    finalize 0.0018    func 0.1615    
Accumulated time: func 0.9209    prepare 0.0564    bound 0.8464    transfer 0.0066    finalize 0.0112    
all_split False
======================Cut inference begins======================
max lb tensor(1.11671257) min lb tensor(-0.09978604)
Number of Verified Splits: 187 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts 7-9: 9
#cuts >= 20: 0
BICCOS time: 0.026690006256103516 
BICCOS Cumulative time: 0.37438058853149414
Preprocessing time: 0.007653474807739258 Inference time: 0.015698909759521484 Add cuts time: 0.0024449825286865234 Cut analysis time: 0.00089263916015625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09979 (10), -0.09777 (10), -0.09604 (10), -0.09432 (10), -0.09409 (10), -0.09360 (10), -0.09231 (10), -0.09059 (10), -0.09022 (10), -0.08989 (10), -0.08864 (10), -0.08814 (10), -0.08657 (10), -0.08476 (10), -0.08443 (10), -0.08168 (10), -0.08111 (10), -0.07782 (10), -0.07645 (10), -0.07573 (10), 
Length of domains: 69
Time: pickout 0.0016    decision 0.0131    set_bounds 0.0215    solve 0.1616    add 0.0017    
Accumulated time: pickout 0.0048    decision 0.6028    set_bounds 0.0852    solve 0.6987    add 0.1929    
Current (lb-rhs): -0.09978604316711426
201 domains visited
Cumulative time: 2.221743583679199

BaB round 3
batch: 69
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input, 3028] [/input-8, 1772] [/input-12, 90] [/input, 3028] [/input-8, 1772] [/input-12, 90] [/input, 3028] [/input-8, 1772] [/input-12, 90] 
split level 1: [/input-8, 1756] [/input-8, 1781] [/input-12, 90] [/input-8, 1756] [/input-8, 1781] [/input-12, 90] [/input-8, 1756] [/input-8, 1781] [/input-12, 90] [/input-8, 1756] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09798717498779297
10 lb beta sum: 0.3241303563117981, worst -0.097930908203125
Time: prepare 0.0071    bound 0.1491    transfer 0.0007    finalize 0.0019    func 0.1605    
Accumulated time: func 1.0814    prepare 0.0636    bound 0.9954    transfer 0.0073    finalize 0.0131    
all_split False
======================Cut inference begins======================
max lb tensor(0.45851707) min lb tensor(-0.09790206)
Number of Verified Splits: 212 of 276
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts 7-9: 9
#cuts >= 20: 0
BICCOS time: 0.03132033348083496 
BICCOS Cumulative time: 0.4057009220123291
Preprocessing time: 0.008014440536499023 Inference time: 0.019961118698120117 Add cuts time: 0.0024657249450683594 Cut analysis time: 0.0008790493011474609
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09790 (12), -0.09588 (12), -0.09421 (12), -0.09247 (12), -0.09223 (12), -0.09166 (12), -0.09045 (12), -0.08880 (12), -0.08805 (12), -0.08799 (12), -0.08684 (12), -0.08623 (12), -0.08447 (12), -0.08262 (12), -0.08256 (12), -0.07912 (12), -0.07904 (12), -0.07526 (12), -0.07380 (12), -0.07304 (12), 
Length of domains: 64
Time: pickout 0.0018    decision 0.0146    set_bounds 0.0206    solve 0.1606    add 0.0011    
Accumulated time: pickout 0.0066    decision 0.6174    set_bounds 0.1058    solve 0.8594    add 0.1939    
Current (lb-rhs): -0.09790205955505371
265 domains visited
Cumulative time: 2.452768087387085

BaB round 4
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1772] [/input-8, 1762] [/input-8, 1772] [/input-8, 1762] [/input-8, 1772] [/input-8, 1762] [/input-8, 1772] [/input-8, 1762] [/input-8, 1772] [/input-8, 1762] 
split level 1: [/input-8, 1236] [/input-8, 954] [/input-8, 1236] [/input-8, 954] [/input-8, 1236] [/input-8, 954] [/input-8, 1236] [/input-8, 954] [/input-8, 1236] [/input-8, 954] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0010549860307946801, worst -0.09166431427001953
10 lb beta sum: 0.0018231732537969947, worst -0.09162545204162598
Time: prepare 0.0122    bound 0.1474    transfer 0.0009    finalize 0.0012    func 0.1633    
Accumulated time: func 1.2447    prepare 0.0760    bound 1.1428    transfer 0.0082    finalize 0.0143    
all_split False
======================Cut inference begins======================
max lb tensor(0.00269745) min lb tensor(-0.09161234)
Number of Verified Splits: 5 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 9
#cuts 4-6: 3
#cuts 7-9: 10
#cuts >= 20: 0
BICCOS time: 0.01046442985534668 
BICCOS Cumulative time: 0.4161653518676758
Preprocessing time: 0.007555246353149414 Inference time: 0.0006465911865234375 Add cuts time: 0.0009710788726806641 Cut analysis time: 0.001291513442993164
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09161 (14), -0.09027 (14), -0.08961 (14), -0.08826 (14), -0.08766 (14), -0.08632 (14), -0.08620 (14), -0.08571 (14), -0.08569 (14), -0.08529 (14), -0.08485 (14), -0.08437 (14), -0.08434 (14), -0.08419 (14), -0.08395 (14), -0.08382 (14), -0.08369 (14), -0.08284 (14), -0.08248 (14), -0.08235 (14), 
Length of domains: 251
Time: pickout 0.0019    decision 0.0145    set_bounds 0.0120    solve 0.1634    add 0.0029    
Accumulated time: pickout 0.0085    decision 0.6319    set_bounds 0.1178    solve 1.0227    add 0.1969    
Current (lb-rhs): -0.09161233901977539
516 domains visited
Cumulative time: 2.658149003982544

BaB round 5
batch: 251
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1756] [/input-8, 1245] [/input-8, 1756] [/input-8, 1245] [/input-8, 1756] [/input-8, 1245] [/input-8, 1756] [/input-8, 1756] [/input-8, 1245] [/input-8, 1756] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08920431137084961
10 lb beta sum: 0.0014221884775906801, worst -0.08917021751403809
Time: prepare 0.0124    bound 0.1589    transfer 0.0034    finalize 0.0025    func 0.1806    
Accumulated time: func 1.4253    prepare 0.0886    bound 1.3017    transfer 0.0116    finalize 0.0168    
all_split False
======================Cut inference begins======================
max lb tensor(0.00933077) min lb tensor(-0.08915138)
Number of Verified Splits: 19 of 502
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 9
#cuts 4-6: 6
#cuts 7-9: 10
#cuts >= 20: 0
BICCOS time: 0.0203702449798584 
BICCOS Cumulative time: 0.4365355968475342
Preprocessing time: 0.014727115631103516 Inference time: 0.0023107528686523438 Add cuts time: 0.0013055801391601562 Cut analysis time: 0.002026796340942383
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08915 (15), -0.08781 (15), -0.08719 (15), -0.08584 (15), -0.08523 (15), -0.08387 (15), -0.08374 (15), -0.08328 (15), -0.08313 (15), -0.08276 (15), -0.08239 (15), -0.08193 (15), -0.08179 (15), -0.08178 (15), -0.08141 (15), -0.08131 (15), -0.08117 (15), -0.08043 (15), -0.07996 (15), -0.07982 (15), 
Length of domains: 483
Time: pickout 0.0039    decision 0.0253    set_bounds 0.0210    solve 0.1807    add 0.0032    
Accumulated time: pickout 0.0124    decision 0.6572    set_bounds 0.1388    solve 1.2034    add 0.2000    
Current (lb-rhs): -0.08915138244628906
999 domains visited
Cumulative time: 2.9131977558135986

BaB round 6
batch: 483
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2935] [/input-8, 1374] [/input, 2935] [/input, 2935] [/input-8, 1374] [/input, 2935] [/input, 2935] [/input-8, 1374] [/input, 2935] [/input, 2935] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08749127388000488
10 lb beta sum: 0.0012031644582748413, worst -0.08746933937072754
Time: prepare 0.0241    bound 0.1676    transfer 0.0056    finalize 0.0058    func 0.2094    
Accumulated time: func 1.6347    prepare 0.1129    bound 1.4693    transfer 0.0172    finalize 0.0226    
all_split False
======================Cut inference begins======================
max lb tensor(0.01186795) min lb tensor(-0.08745861)
Number of Verified Splits: 36 of 966
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 9
#cuts 4-6: 8
#cuts 7-9: 12
#cuts >= 20: 0
BICCOS time: 0.03729891777038574 
BICCOS Cumulative time: 0.4738345146179199
Preprocessing time: 0.029633045196533203 Inference time: 0.0044977664947509766 Add cuts time: 0.001878499984741211 Cut analysis time: 0.0012896060943603516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08746 (16), -0.08611 (16), -0.08552 (16), -0.08417 (16), -0.08249 (16), -0.08232 (16), -0.08206 (16), -0.08196 (16), -0.08179 (16), -0.08115 (16), -0.08105 (16), -0.08071 (16), -0.08065 (16), -0.08044 (16), -0.08009 (16), -0.08004 (16), -0.07988 (16), -0.07986 (16), -0.07970 (16), -0.07929 (16), 
Length of domains: 930
Time: pickout 0.0079    decision 0.0350    set_bounds 0.1940    solve 0.2096    add 0.0047    
Accumulated time: pickout 0.0203    decision 0.6922    set_bounds 0.3328    solve 1.4131    add 0.2047    
Current (lb-rhs): -0.08745861053466797
1929 domains visited
Cumulative time: 3.4029364585876465

BaB round 7
batch: 930
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1740] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 954] [/input-8, 1374] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08456563949584961
10 lb beta sum: 0.0010967232519760728, worst -0.08455872535705566
Time: prepare 0.0464    bound 0.2221    transfer 0.0080    finalize 0.0103    func 0.2989    
Accumulated time: func 1.9336    prepare 0.1595    bound 1.6913    transfer 0.0252    finalize 0.0329    
all_split False
======================Cut inference begins======================
max lb tensor(0.01234228) min lb tensor(-0.08455181)
Number of Verified Splits: 109 of 1860
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 9
#cuts 4-6: 13
#cuts 7-9: 16
#cuts >= 20: 0
BICCOS time: 0.07765769958496094 
BICCOS Cumulative time: 0.5514922142028809
Preprocessing time: 0.05698442459106445 Inference time: 0.015306949615478516 Add cuts time: 0.003589630126953125 Cut analysis time: 0.0017766952514648438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08455 (17), -0.08421 (17), -0.08259 (17), -0.08227 (17), -0.08221 (17), -0.08091 (17), -0.08085 (17), -0.08049 (17), -0.08046 (17), -0.07958 (17), -0.07926 (17), -0.07915 (17), -0.07895 (17), -0.07886 (17), -0.07881 (17), -0.07852 (17), -0.07812 (17), -0.07781 (17), -0.07761 (17), -0.07735 (17), 
Length of domains: 1751
Time: pickout 0.0189    decision 0.0663    set_bounds 0.0786    solve 0.2998    add 0.0090    
Accumulated time: pickout 0.0392    decision 0.7585    set_bounds 0.4114    solve 1.7129    add 0.2137    
Current (lb-rhs): -0.08455181121826172
3680 domains visited
Cumulative time: 3.955890655517578

BaB round 8
batch: 1751
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08177495002746582
10 lb beta sum: 0.0010570032754912972, worst -0.0817728042602539
Time: prepare 0.0868    bound 0.3459    transfer 0.0203    finalize 0.0192    func 0.4970    
Accumulated time: func 2.4306    prepare 0.2466    bound 2.0372    transfer 0.0455    finalize 0.0521    
all_split False
======================Cut inference begins======================
max lb tensor(0.00852299) min lb tensor(-0.08176875)
Number of Verified Splits: 258 of 3502
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 61.
#cuts 1-3: 9
#cuts 4-6: 21
#cuts 7-9: 31
#cuts >= 20: 0
BICCOS time: 0.15944957733154297 
BICCOS Cumulative time: 0.7109417915344238
Preprocessing time: 0.10985827445983887 Inference time: 0.03882241249084473 Add cuts time: 0.007792472839355469 Cut analysis time: 0.0029764175415039062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08177 (18), -0.08140 (18), -0.07977 (18), -0.07943 (18), -0.07936 (18), -0.07808 (18), -0.07801 (18), -0.07763 (18), -0.07760 (18), -0.07679 (18), -0.07643 (18), -0.07615 (18), -0.07610 (18), -0.07603 (18), -0.07590 (18), -0.07568 (18), -0.07556 (18), -0.07536 (18), -0.07500 (18), -0.07481 (18), 
Length of domains: 3244
Time: pickout 0.0290    decision 0.1105    set_bounds 0.1489    solve 0.6484    add 0.0157    
Accumulated time: pickout 0.0682    decision 0.8690    set_bounds 0.5603    solve 2.3613    add 0.2295    
Current (lb-rhs): -0.08176875114440918
6924 domains visited
Cumulative time: 5.073276519775391

BaB round 9
batch: 3244
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08099699020385742
10 lb beta sum: 0.0010292764054611325, worst -0.08099818229675293
Time: prepare 0.1650    bound 0.5786    transfer 0.0256    finalize 0.0371    func 0.8485    
Accumulated time: func 3.2791    prepare 0.4119    bound 2.6158    transfer 0.0710    finalize 0.0892    
all_split False
======================Cut inference begins======================
max lb tensor(0.01122856) min lb tensor(-0.08099437)
Number of Verified Splits: 473 of 6488
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 72.
#cuts 1-3: 9
#cuts 4-6: 50
#cuts 7-9: 13
#cuts >= 20: 0
BICCOS time: 0.2942512035369873 
BICCOS Cumulative time: 1.0051929950714111
Preprocessing time: 0.20227813720703125 Inference time: 0.07604527473449707 Add cuts time: 0.012673616409301758 Cut analysis time: 0.0032541751861572266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08099 (19), -0.08063 (19), -0.07900 (19), -0.07866 (19), -0.07858 (19), -0.07731 (19), -0.07721 (19), -0.07684 (19), -0.07683 (19), -0.07602 (19), -0.07565 (19), -0.07538 (19), -0.07525 (19), -0.07513 (19), -0.07490 (19), -0.07479 (19), -0.07458 (19), -0.07422 (19), -0.07403 (19), -0.07372 (19), 
Length of domains: 6015
Time: pickout 0.0533    decision 0.1885    set_bounds 0.2807    solve 1.0119    add 0.0205    
Accumulated time: pickout 0.1215    decision 1.0575    set_bounds 0.8409    solve 3.3731    add 0.2500    
Current (lb-rhs): -0.0809943675994873
12939 domains visited
Cumulative time: 6.93388557434082

BaB round 10
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0781714916229248
10 lb beta sum: 0.0009877922711893916, worst -0.07815790176391602
Time: prepare 0.2152    bound 0.7098    transfer 0.0511    finalize 0.2096    func 1.2398    
Accumulated time: func 4.5189    prepare 0.6273    bound 3.3256    transfer 0.1221    finalize 0.2988    
all_split False
======================Cut inference begins======================
max lb tensor(0.01058745) min lb tensor(-0.07815337)
Number of Verified Splits: 616 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 73.
#cuts 1-3: 9
#cuts 4-6: 39
#cuts 7-9: 25
#cuts >= 20: 0
BICCOS time: 0.3854856491088867 
BICCOS Cumulative time: 1.3906786441802979
Preprocessing time: 0.2578299045562744 Inference time: 0.10357451438903809 Add cuts time: 0.02074909210205078 Cut analysis time: 0.0033321380615234375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07815 (20), -0.07775 (20), -0.07616 (20), -0.07577 (20), -0.07573 (20), -0.07551 (20), -0.07535 (20), -0.07442 (20), -0.07435 (20), -0.07399 (20), -0.07395 (20), -0.07367 (20), -0.07359 (20), -0.07321 (19), -0.07318 (20), -0.07312 (20), -0.07277 (20), -0.07254 (20), -0.07241 (20), -0.07213 (20), 
Length of domains: 9495
Time: pickout 0.0662    decision 0.2279    set_bounds 0.3629    solve 1.2422    add 0.0454    
Accumulated time: pickout 0.1877    decision 1.2855    set_bounds 1.2039    solve 4.6153    add 0.2954    
Current (lb-rhs): -0.07815337181091309
20515 domains visited
current_vram/total_varm: 11.8GB/99.9GB, batch_size increase to 8192
Cumulative time: 9.284519672393799

BaB round 11
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 948] [/input, 948] [/input, 948] [/input, 948] [/input, 948] [/input, 948] [/input, 948] [/input, 2935] [/input, 1912] [/input, 1912] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07673788070678711
10 lb beta sum: 0.0009460104629397392, worst -0.07669568061828613
Time: prepare 0.4317    bound 1.3440    transfer 0.1548    finalize 0.3194    func 2.3564    
Accumulated time: func 6.8754    prepare 1.0593    bound 4.6696    transfer 0.2769    finalize 0.6181    
all_split False
======================Cut inference begins======================
max lb tensor(0.01382763) min lb tensor(-0.07666564)
Number of Verified Splits: 1302 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 115.
#cuts 1-3: 9
#cuts 4-6: 31
#cuts 7-9: 68
#cuts 10-12: 7
#cuts >= 20: 0
BICCOS time: 1.0497560501098633 
BICCOS Cumulative time: 2.440434694290161
Preprocessing time: 0.5252625942230225 Inference time: 0.46503663063049316 Add cuts time: 0.053649187088012695 Cut analysis time: 0.005807638168334961
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07667 (21), -0.07490 (21), -0.07468 (21), -0.07424 (21), -0.07389 (21), -0.07379 (21), -0.07291 (21), -0.07286 (21), -0.07250 (21), -0.07249 (21), -0.07243 (20), -0.07230 (21), -0.07197 (21), -0.07190 (21), -0.07171 (21), -0.07158 (21), -0.07146 (21), -0.07140 (21), -0.07110 (21), -0.07105 (21), 
Length of domains: 16385
Time: pickout 0.1325    decision 0.6314    set_bounds 0.7343    solve 2.3599    add 0.0554    
Accumulated time: pickout 0.3202    decision 1.9169    set_bounds 1.9382    solve 6.9753    add 0.3507    
Current (lb-rhs): -0.07666563987731934
35597 domains visited
current_vram/total_varm: 22.4GB/99.9GB, batch_size increase to 16384
Cumulative time: 14.284375667572021

BaB round 12
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1928] [/input, 1928] [/input-8, 1245] [/input-8, 1769] [/input-8, 1374] [/input, 1913] [/input, 3028] [/input-8, 1740] [/input, 3028] [/input-8, 2006] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07448840141296387
10 lb beta sum: 0.000974024529568851, worst -0.074462890625
Time: prepare 0.8743    bound 2.6964    transfer 0.3384    finalize 0.2398    func 4.3676    
Accumulated time: func 11.2429    prepare 1.9340    bound 7.3660    transfer 0.6152    finalize 0.8580    
all_split False
======================Cut inference begins======================
max lb tensor(0.01457801) min lb tensor(-0.07445931)
Number of Verified Splits: 3450 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 207.
#cuts 1-3: 9
#cuts 4-6: 53
#cuts 7-9: 127
#cuts 10-12: 18
#cuts >= 20: 0
BICCOS time: 2.1587471961975098 
BICCOS Cumulative time: 4.599181890487671
Preprocessing time: 1.4026050567626953 Inference time: 0.6339588165283203 Add cuts time: 0.11117005348205566 Cut analysis time: 0.011013269424438477
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07446 (22), -0.07272 (22), -0.07228 (22), -0.07207 (22), -0.07185 (22), -0.07166 (22), -0.07148 (22), -0.07067 (22), -0.07054 (22), -0.07033 (22), -0.07031 (22), -0.07014 (22), -0.07012 (22), -0.06986 (22), -0.06958 (21), -0.06950 (22), -0.06949 (22), -0.06948 (22), -0.06943 (22), -0.06940 (22), 
Length of domains: 29319
Time: pickout 0.2781    decision 1.6353    set_bounds 2.0037    solve 4.3733    add 0.1278    
Accumulated time: pickout 0.5983    decision 3.5521    set_bounds 3.9419    solve 11.3486    add 0.4785    
Current (lb-rhs): -0.07445931434631348
64915 domains visited
current_vram/total_varm: 41.8GB/99.9GB, batch_size increase to 32768
Cumulative time: 24.944478750228882

BaB round 13
batch: 29319
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1769] [/input, 167] [/input, 167] [/input, 885] [/input-8, 1245] [/input, 1913] [/input, 167] [/input-8, 2006] [/input, 885] [/input-8, 1769] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07224845886230469
10 lb beta sum: 0.0009761716355569661, worst -0.07224774360656738
Time: prepare 1.5769    bound 5.0891    transfer 0.6293    finalize 0.4498    func 8.6032    
Accumulated time: func 19.8461    prepare 3.5113    bound 12.4551    transfer 1.2445    finalize 1.3078    
all_split False
======================Cut inference begins======================
max lb tensor(0.01294088) min lb tensor(-0.07224488)
Number of Verified Splits: 6668 of 58638
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 341.
#cuts 1-3: 9
#cuts 4-6: 90
#cuts 7-9: 202
#cuts 10-12: 40
#cuts >= 20: 0
BICCOS time: 4.022510528564453 
BICCOS Cumulative time: 8.621692419052124
Preprocessing time: 1.9396436214447021 Inference time: 1.7809796333312988 Add cuts time: 0.28311729431152344 Cut analysis time: 0.01876997947692871
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07224 (23), -0.07050 (23), -0.07007 (23), -0.07005 (23), -0.06983 (23), -0.06963 (23), -0.06944 (23), -0.06922 (23), -0.06846 (23), -0.06833 (23), -0.06831 (23), -0.06811 (23), -0.06809 (23), -0.06797 (23), -0.06792 (23), -0.06788 (23), -0.06762 (23), -0.06754 (23), -0.06741 (23), -0.06727 (23), 
Length of domains: 51970
Time: pickout 0.6282    decision 3.2892    set_bounds 3.4970    solve 8.6127    add 0.2711    
Accumulated time: pickout 1.2266    decision 6.8413    set_bounds 7.4389    solve 19.9613    add 0.7496    
Current (lb-rhs): -0.07224488258361816
116885 domains visited
Cumulative time: 45.41753935813904

BaB round 14
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2006] [/input-8, 1740] [/input-8, 1740] [/input, 2935] [/input, 948] [/input, 167] [/input-8, 1374] [/input-8, 1193] [/input, 948] [/input-8, 1769] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07040786743164062
10 lb beta sum: 0.0011258663143962622, worst -0.09354264289140701
Time: prepare 1.7847    bound 11.3643    transfer 0.7013    finalize 0.5830    func 14.8660    
Accumulated time: func 34.7120    prepare 5.2964    bound 23.8195    transfer 1.9459    finalize 1.8908    
all_split False
======================Cut inference begins======================
max lb tensor(0.01665759) min lb tensor(-0.07034945)
Number of Verified Splits: 7741 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 430.
#cuts 1-3: 9
#cuts 4-6: 116
#cuts 7-9: 246
#cuts 10-12: 59
#cuts >= 20: 0
BICCOS time: 5.023303031921387 
BICCOS Cumulative time: 13.64499545097351
Preprocessing time: 2.9799726009368896 Inference time: 1.5438759326934814 Add cuts time: 0.47567272186279297 Cut analysis time: 0.023781776428222656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07050 (23), -0.07035 (24), -0.06963 (23), -0.06944 (23), -0.06922 (23), -0.06833 (23), -0.06815 (24), -0.06811 (23), -0.06796 (24), -0.06788 (23), -0.06782 (24), -0.06754 (23), -0.06727 (23), -0.06725 (23), -0.06717 (23), -0.06713 (23), -0.06703 (23), -0.06685 (23), -0.06683 (23), -0.06672 (23), 
Length of domains: 76997
Time: pickout 0.5915    decision 3.8425    set_bounds 3.8817    solve 14.8814    add 0.2544    
Accumulated time: pickout 1.8181    decision 10.6838    set_bounds 11.3206    solve 34.8427    add 1.0039    
Current (lb-rhs): -0.07049942016601562
174680 domains visited
Cumulative time: 74.10301089286804

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2936] [/input, 871] [/input, 1912] [/input, 1912] [/input, 419] [/input, 419] [/input, 419] [/input, 948] [/input, 419] [/input, 419] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06864786148071289
10 lb beta sum: 0.0012754572089761496, worst -0.09143564850091934
Time: prepare 1.8145    bound 11.7270    transfer 0.7119    finalize 0.6274    func 16.2718    
Accumulated time: func 50.9839    prepare 7.1114    bound 35.5465    transfer 2.6578    finalize 2.5182    
all_split False
======================Cut inference begins======================
max lb tensor(0.01810324) min lb tensor(-0.06858873)
Number of Verified Splits: 9323 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 542.
#cuts 1-3: 9
#cuts 4-6: 122
#cuts 7-9: 293
#cuts 10-12: 118
#cuts >= 20: 0
BICCOS time: 4.9007697105407715 
BICCOS Cumulative time: 18.545765161514282
Preprocessing time: 2.2951385974884033 Inference time: 1.872558355331421 Add cuts time: 0.7011258602142334 Cut analysis time: 0.03194689750671387
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07035 (24), -0.06859 (24), -0.06796 (24), -0.06782 (24), -0.06772 (24), -0.06751 (24), -0.06711 (24), -0.06657 (24), -0.06620 (24), -0.06607 (24), -0.06601 (24), -0.06597 (24), -0.06593 (25), -0.06586 (24), -0.06577 (24), -0.06553 (24), -0.06539 (24), -0.06538 (24), -0.06535 (24), -0.06524 (24), 
Length of domains: 100442
Time: pickout 0.6058    decision 4.0508    set_bounds 4.1446    solve 16.2847    add 0.2128    
Accumulated time: pickout 2.4239    decision 14.7347    set_bounds 15.4652    solve 51.1274    add 1.2167    
Current (lb-rhs): -0.07034945487976074
230893 domains visited
Cumulative time: 104.55674481391907

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 885] [/input, 948] [/input, 167] [/input, 167] [/input-8, 2006] [/input, 964] [/input, 1390] [/input, 885] [/input-8, 228] [/input, 948] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0681767463684082
10 lb beta sum: 0.0031605404801666737, worst -0.08171837776899338
Time: prepare 1.8611    bound 12.1465    transfer 0.7182    finalize 0.6650    func 15.8378    
Accumulated time: func 66.8217    prepare 8.9729    bound 47.6930    transfer 3.3759    finalize 3.1832    
all_split False
======================Cut inference begins======================
max lb tensor(0.01720524) min lb tensor(-0.06813908)
Number of Verified Splits: 8361 of 65536
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 542.
#cuts 1-3: 9
#cuts 4-6: 122
#cuts 7-9: 293
#cuts 10-12: 118
#cuts >= 20: 0
BICCOS time: 0.002190828323364258 
BICCOS Cumulative time: 18.547955989837646
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06859 (24), -0.06814 (25), -0.06782 (24), -0.06772 (24), -0.06751 (24), -0.06711 (24), -0.06607 (24), -0.06597 (24), -0.06593 (25), -0.06586 (24), -0.06572 (25), -0.06539 (24), -0.06535 (24), -0.06524 (24), -0.06512 (24), -0.06505 (24), -0.06500 (24), -0.06493 (24), -0.06493 (24), -0.06488 (24), 
Length of domains: 124849
Time: pickout 0.6216    decision 4.2903    set_bounds 4.5517    solve 15.8557    add 0.2170    
Accumulated time: pickout 3.0456    decision 19.0250    set_bounds 20.0169    solve 66.9830    add 1.4338    
Current (lb-rhs): -0.0685887336730957
288068 domains visited
Cumulative time: 130.3456084728241

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1943] [/input, 1943] [/input-8, 1769] [/input, 1912] [/input, 167] [/input, 167] [/input, 1943] [/input, 1943] [/input, 1943] [/input, 1943] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0664222240447998
10 lb beta sum: 0.00209638150408864, worst -0.08519177883863449
Time: prepare 1.8862    bound 12.1428    transfer 0.7070    finalize 1.8207    func 17.0016    
Accumulated time: func 83.8233    prepare 10.8596    bound 59.8358    transfer 4.0829    finalize 5.0040    
all_split False
======================Cut inference begins======================
max lb tensor(0.01610851) min lb tensor(-0.06638288)
Number of Verified Splits: 8256 of 65536
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 542.
#cuts 1-3: 9
#cuts 4-6: 122
#cuts 7-9: 293
#cuts 10-12: 118
#cuts >= 20: 0
BICCOS time: 0.0012857913970947266 
BICCOS Cumulative time: 18.54924178123474
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06814 (25), -0.06711 (24), -0.06638 (25), -0.06607 (24), -0.06593 (25), -0.06593 (25), -0.06586 (24), -0.06572 (25), -0.06549 (25), -0.06539 (24), -0.06530 (25), -0.06500 (24), -0.06493 (24), -0.06453 (24), -0.06434 (25), -0.06430 (24), -0.06417 (25), -0.06412 (24), -0.06396 (25), -0.06386 (25), 
Length of domains: 149361
Time: pickout 0.6399    decision 3.9916    set_bounds 3.3865    solve 17.0152    add 0.2183    
Accumulated time: pickout 3.6855    decision 23.0166    set_bounds 23.4034    solve 83.9982    add 1.6521    
Current (lb-rhs): -0.06813907623291016
345348 domains visited
Cumulative time: 155.8235306739807

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1769] [/input, 871] [/input-8, 1769] [/input, 419] [/input, 419] [/input, 419] [/input, 419] [/input, 884] [/input, 1913] [/input, 855] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06527090072631836
10 lb beta sum: 0.0018425246234983206, worst -0.0653836727142334
Time: prepare 1.9103    bound 12.1510    transfer 0.7004    finalize 0.5951    func 15.8098    
Accumulated time: func 99.6331    prepare 12.7703    bound 71.9868    transfer 4.7833    finalize 5.5990    
all_split False
======================Cut inference begins======================
max lb tensor(0.01857150) min lb tensor(-0.06522584)
Number of Verified Splits: 7863 of 65536
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 542.
#cuts 1-3: 9
#cuts 4-6: 122
#cuts 7-9: 293
#cuts 10-12: 118
#cuts >= 20: 0
BICCOS time: 0.0015611648559570312 
BICCOS Cumulative time: 18.5508029460907
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06814 (25), -0.06638 (25), -0.06593 (25), -0.06572 (25), -0.06549 (25), -0.06530 (25), -0.06523 (25), -0.06434 (25), -0.06417 (25), -0.06397 (25), -0.06396 (25), -0.06386 (25), -0.06380 (25), -0.06373 (25), -0.06345 (25), -0.06328 (25), -0.06317 (25), -0.06316 (25), -0.06311 (25), -0.06309 (25), 
Length of domains: 174266
Time: pickout 0.6394    decision 4.6042    set_bounds 3.3613    solve 17.3227    add 0.2234    
Accumulated time: pickout 4.3249    decision 27.6208    set_bounds 26.7647    solve 101.3209    add 1.8755    
Current (lb-rhs): -0.06813907623291016
403021 domains visited
Cumulative time: 182.20336961746216

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1912] [/input, 1912] [/input, 167] [/input, 948] [/input-8, 1193] [/input-8, 1769] [/input, 948] [/input, 901] [/input, 948] [/input-8, 1193] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0028637144714593887, worst -0.06102728843688965
10 lb beta sum: 0.0032962888944894075, worst -0.08016804605722427
Time: prepare 3.3664    bound 12.1440    transfer 0.7020    finalize 2.2136    func 18.8551    
Accumulated time: func 118.4882    prepare 16.1371    bound 84.1308    transfer 5.4853    finalize 7.8126    
all_split False
======================Cut inference begins======================
max lb tensor(0.01951320) min lb tensor(-0.06100464)
Number of Verified Splits: 6202 of 65536
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 542.
#cuts 1-3: 9
#cuts 4-6: 122
#cuts 7-9: 293
#cuts 10-12: 118
#cuts >= 20: 0
BICCOS time: 0.0012621879577636719 
BICCOS Cumulative time: 18.552065134048462
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06814 (25), -0.06638 (25), -0.06593 (25), -0.06572 (25), -0.06549 (25), -0.06530 (25), -0.06523 (25), -0.06434 (25), -0.06417 (25), -0.06397 (25), -0.06396 (25), -0.06380 (25), -0.06373 (25), -0.06345 (25), -0.06328 (25), -0.06316 (25), -0.06311 (25), -0.06309 (25), -0.06307 (26), -0.06304 (25), 
Length of domains: 200832
Time: pickout 0.6401    decision 3.3078    set_bounds 3.3639    solve 18.8681    add 0.2386    
Accumulated time: pickout 4.9650    decision 30.9286    set_bounds 30.1285    solve 120.1890    add 2.1141    
Current (lb-rhs): -0.06813907623291016
462355 domains visited
Time out!!!!!!!!
Result: unknown in 212.4474 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 163, vnnlib ID: 163 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.72241402, -24.34649849, -23.13090515, -23.33512688, -23.44177818,
         -22.72599030, -24.29437256, -23.28028107, -25.88602257, -23.95406342]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [815]; unstable size 815; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 815] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 815] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 815] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 288] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.40899789, -1.25210953, -1.71175027, -1.47050393, -0.92382956,
         -2.03374100, -0.67183709,  0.06250179, -1.59028721]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.72241402, -24.34649849, -23.13090515, -23.33512688, -23.44177818,
         -22.72599030, -24.29437256, -23.28028107, -25.88602257, -23.95406342]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.72241211, -24.34649277, -23.13090134, -23.33512497, -23.44177628,
          -22.72598839, -24.29437065, -23.28027916, -25.88602257, -23.95405960],
         [-23.72241211, -24.34649277, -23.13090134, -23.33512497, -23.44177628,
          -22.72598839, -24.29437065, -23.28027916, -25.88602257, -23.95405960]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.44213295,  1.06621361, -0.14937782,  0.05484581,  0.16149712,
          -0.55429077,  1.01409149,  0.67378044]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         ...,


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0984 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 164, vnnlib ID: 164 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.75207901, -26.19200516, -21.51674461, -21.03239250, -21.79173470,
         -19.86995125, -22.43434525, -21.71803665, -25.64961243, -25.42793655]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [834]; unstable size 834; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 834] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 834] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 834] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 272] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.31165791, 4.29574871, 0.41222405, 0.84093690, 0.84679627, 1.26739883,
         0.78366566, 3.96632481, 3.82774282]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0674 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 165, vnnlib ID: 165 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.22746849, -18.94099426, -15.30552959, -16.48309898, -16.57509995,
         -17.20245552, -18.03771782, -16.32104874, -17.03782463, -18.11646080]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [739]; unstable size 739; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 296, 1, 739] with unstable size 295 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 739] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 739] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [295]; unstable size 295; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 295] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 295] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.56572247,  0.72621608, -1.85110521, -0.71412671, -0.72852230,
         -0.07062471,  0.71391797, -0.96604156,  0.12609458]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.22746849, -18.94099426, -15.30552959, -16.48309898, -16.57509995,
         -17.20245552, -18.03771782, -16.32104874, -17.03782463, -18.11646080]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.22747231, -18.94099617, -15.30552959, -16.48309898, -16.57509995,
          -17.20245552, -18.03771782, -16.32104874, -17.03782654, -18.11646080],
         [-17.22747231, -18.94099617, -15.30552959, -16.48309898, -16.57509995,
          -17.20245552, -18.03771782, -16.32104874, -17.03782654, -18.11646080]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.90642357, -1.01551914,  0.16205025,  0.25405121,  0.88140678,
           0.71677780]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0869 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 166, vnnlib ID: 166 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.80888367, -17.65867996, -15.04872608, -14.86061478, -14.44957924,
         -15.80550385, -12.51641083, -16.93015480, -17.87636757, -16.77168083]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 300, 1, 527] with unstable size 299 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 32, 1, 527] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [299]; unstable size 299; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 32, 1, 299] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 299] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [31]; unstable size 31; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.97510815, 3.01688480, 0.83104944, 0.91215861, 0.13671064, 1.58025670,
         1.78175306, 2.71599102, 2.04945230]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0642 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 167, vnnlib ID: 167 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.61078835, -21.87978363, -18.13955688, -19.07592964, -19.79349327,
         -19.61386681, -20.54054451, -20.75547600, -18.17226410, -21.24487877]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [616]; unstable size 616; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 264, 1, 616] with unstable size 263 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 616] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 616] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [263]; unstable size 263; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 263] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 263] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.55854058, -0.58302045, -0.01108956,  0.84704232,  0.37303150,
          1.41230452,  1.42802882, -0.66239893,  1.97629547]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.61078835, -21.87978363, -18.13955688, -19.07592964, -19.79349327,
         -19.61386681, -20.54054451, -20.75547600, -18.17226410, -21.24487877]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-18.55933762, -22.55691528, -19.05906868, -19.80771828, -20.68400002,
          -20.36371231, -21.27793312, -21.47817230, -18.53498459, -21.80866051],
         [-18.55933762, -22.55691528, -19.05906868, -19.80771828, -20.68400002,
          -20.36371231, -21.27793312, -21.47817230, -18.53498459, -21.80866051]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.49973106,  1.24838066, -0.02435303]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0738 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 168, vnnlib ID: 168 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.20258904, -28.97587204, -21.97974777, -26.12151527, -22.80328751,
         -24.79159355, -26.35929489, -25.88696289, -29.32278824, -27.97410202]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 81, 1, 659] with unstable size 80 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 659] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [80]; unstable size 80; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 80] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 80] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.61785388, 5.97946167, 3.68134069, 0.37307757, 2.26610637, 3.72874069,
         3.38983059, 6.45273161, 5.22464943]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0450 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 169, vnnlib ID: 169 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.22389221, -25.61617279, -20.58332062, -23.34521294, -20.21918297,
         -23.68240929, -23.30189896, -22.01793289, -23.25316620, -24.99141312]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [521]; unstable size 521; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 194, 1, 521] with unstable size 193 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 521] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 521] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [193]; unstable size 193; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 193] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.86727226,  3.52099252, -0.37071085,  2.10049105,  2.35707164,
          2.03269410,  1.03111410,  1.52145720,  3.31146622]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.22389221, -25.61617279, -20.58332062, -23.34521294, -20.21918297,
         -23.68240929, -23.30189896, -22.01793289, -23.25316620, -24.99141312]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.59311104, -25.98283386, -20.80554199, -23.80249596, -20.90235329,
          -24.19322205, -23.63773346, -22.69346428, -23.59370041, -25.37232018]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.09681129]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0777 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 170, vnnlib ID: 170 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.96089172, -27.30179405, -18.06871414, -21.83080864, -18.06796074,
         -20.49729729, -22.39441490, -20.41414833, -26.60469437, -25.81503868]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [620]; unstable size 620; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 620] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 620] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 620] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 180] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.75783134,  7.53109455, -0.86600566,  3.01546717,  1.56956530,
          3.31403399,  1.72679353,  7.39529657,  6.39896250]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.96089172, -27.30179405, -18.06871414, -21.83080864, -18.06796074,
         -20.49729729, -22.39441490, -20.41414833, -26.60469437, -25.81503868]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.96817017, -27.31116486, -18.08074570, -21.85573387, -18.09226227,
          -20.52867126, -22.39926720, -20.45345879, -26.61774445, -25.83756828]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01151657]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0043 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0778 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 171, vnnlib ID: 171 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-28.76115799, -29.22484970, -26.75863647, -27.30132103, -27.79590416,
         -27.84509468, -25.49637985, -28.66069603, -31.11473465, -27.50533867]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [617]; unstable size 617; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 214, 1, 617] with unstable size 213 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 617] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 617] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [213]; unstable size 213; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 213] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 213] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.97265625, 2.28189468, 0.24724400, 0.96132356, 1.16451263, 1.43096888,
         1.79910493, 3.81141233, 0.72075981]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0700 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 172, vnnlib ID: 172 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.93356705, -26.18995857, -23.55833054, -25.85114861, -23.34313011,
         -26.63274956, -26.89310074, -26.08115768, -22.53829002, -26.71156120]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [854]; unstable size 854; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 854] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 854] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 854] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 206] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.99029899,  0.58493608,  2.75045776,  0.33922207,  3.42682910,
          3.47799611,  2.48519087, -0.45412546,  3.58810210]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.93356705, -26.18995857, -23.55833054, -25.85114861, -23.34313011,
         -26.63274956, -26.89310074, -26.08115768, -22.53829002, -26.71156120]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.61it/s]100%|██████████| 1/1 [00:00<00:00,  8.60it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.21707344, -26.20688248, -23.75342369, -25.93466568, -23.61607170,
          -26.77052689, -27.00837326, -26.42004776, -22.24679565, -26.81797409]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02972221]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1188 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.763309478759766
alpha/beta optimization time: 1.2613108158111572
initial alpha-crown bounds: tensor([[ 3.05976796,  0.63149047,  2.80625153,  0.39776480,  3.48817921,
          3.54835081,  2.58086896, -0.39641124,  3.64704728]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.3964112401008606
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.55581831932068
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.55577683448792
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.5557496547699
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.5557279586792
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.55570912361145
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.55569076538086
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.55567240715027
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.55565357208252
Verifying property 7 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.39641124]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.93356705, -26.18995857, -23.55833054, -25.85114861, -23.34313011,
        -26.63274956, -26.89310074, -26.08115768, -22.53829002, -26.71156120],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.39641124]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 854
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 201
Node /15 input 0: size torch.Size([100]) unstable 25
-----------------
# of unstable neurons: 1080
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011229515075683594
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.39641010761260986
10 lb beta sum: 0.0, worst -0.3964126706123352
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0549    transfer 0.0001    finalize 0.0001    func 0.0554    
Accumulated time: func 0.0554    prepare 0.0002    bound 0.0549    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] 
split level 1: [/input-12, 92] 
split level 2: [/input-12, 24] 
split level 3: [/input-12, 0] 
split level 4: [/input-12, 20] 
split level 5: [/input-8, 819] 
split level 6: [/input-8, 817] 
split level 7: [/input-8, 818] 
split level 8: [/input-12, 83] 
split level 9: [/input-8, 443] 
split level 10: [/input-8, 1334] 
split level 11: [/input-8, 500] 
split level 12: [/input-8, 444] 
split level 13: [/input-8, 1196] 
split level 14: [/input-8, 1715] 
split level 15: [/input-12, 42] 
split level 16: [/input-8, 497] 
split level 17: [/input-12, 64] 
split level 18: [/input-8, 499] 
split level 19: [/input-8, 1650] 
split level 20: [/input-8, 1169] 
split level 21: [/input-8, 1515] 
split level 22: [/input-8, 442] 
split level 23: [/input-8, 1114] 
split level 24: [/input-8, 1612] 
split level 25: [/input-8, 1065] 
split level 26: [/input-8, 1660] 
split level 27: [/input, 2938] 
split level 28: [/input-8, 1399] 
split level 29: [/input-8, 1619] 
split level 30: [/input-8, 1324] 
split level 31: [/input-8, 157] 
split level 32: [/input-8, 498] 
split level 33: [/input-8, 1611] 
split level 34: [/input-8, 1661] 
split level 35: [/input-8, 748] 
split level 36: [/input-8, 1134] 
split level 37: [/input-8, 1613] 
split level 38: [/input, 873] 
split level 39: [/input, 2781] 
split level 40: [/input-8, 747] 
split level 41: [/input-8, 338] 
split level 42: [/input-12, 43] 
split level 43: [/input-8, 1516] 
split level 44: [/input-8, 1662] 
split level 45: [/input-12, 59] 
split level 46: [/input-8, 1646] 
split level 47: [/input-8, 1322] 
split level 48: [/input-8, 749] 
split level 49: [/input-8, 1653] 
split level 50: [/input-8, 1654] 
split level 51: [/input-8, 793] 
split level 52: [/input-8, 1618] 
split level 53: [/input-8, 1768] 
split level 54: [/input-8, 1174] 
split level 55: [/input-8, 1610] 
split level 56: [/input-8, 403] 
split level 57: [/input, 889] 
split level 58: [/input-8, 404] 
split level 59: [/input, 857] 
split level 60: [/input-8, 154] 
split level 61: [/input-8, 1071] 
split level 62: [/input-8, 1172] 
split level 63: [/input, 872] 
split level 64: [/input, 665] 
split level 65: [/input-8, 794] 
split level 66: [/input, 974] 
split level 67: [/input, 651] 
split level 68: [/input, 3549] 
split level 69: [/input, 3521] 
split level 70: [/input, 667] 
split level 71: [/input, 680] 
split level 72: [/input-8, 406] 
split level 73: [/input, 361] 
split level 74: [/input-8, 68] 
split level 75: [/input, 3221] 
split level 76: [/input-8, 1549] 
split level 77: [/input, 2766] 
split level 78: [/input-8, 105] 
split level 79: [/input, 946] 
split level 80: [/input, 2779] 
split level 81: [/input-8, 2022] 
split level 82: [/input, 332] 
split level 83: [/input, 434] 
split level 84: [/input-8, 21] 
split level 85: [/input-8, 69] 
split level 86: [/input-8, 1161] 
split level 87: [/input-8, 429] 
split level 88: [/input, 844] 
split level 89: [/input, 165] 
split level 90: [/input, 345] 
split level 91: [/input-8, 1231] 
split level 92: [/input-8, 1265] 
split level 93: [/input-8, 475] 
split level 94: [/input-8, 441] 
split level 95: [/input, 930] 
split level 96: [/input, 2747] 
split level 97: [/input, 2760] 
split level 98: [/input-8, 167] 
split level 99: [/input, 871] 
split level 100: [/input-8, 476] 
split level 101: [/input, 2663] 
split level 102: [/input, 3414] 
split level 103: [/input, 3288] 
split level 104: [/input, 2778] 
split level 105: [/input, 316] 
split level 106: [/input, 957] 
split level 107: [/input-8, 331] 
split level 108: [/input, 2877] 
split level 109: [/input-8, 1617] 
split level 110: [/input-8, 1341] 
split level 111: [/input-8, 1924] 
split level 112: [/input-8, 1342] 
split level 113: [/input, 990] 
split level 114: [/input, 855] 
split level 115: [/input, 3192] 
split level 116: [/input, 225] 
split level 117: [/input-8, 1609] 
split level 118: [/input, 3031] 
split level 119: [/input-8, 1614] 
split level 120: [/input, 331] 
split level 121: [/input-8, 410] 
split level 122: [/input, 3975] 
split level 123: [/input, 381] 
split level 124: [/input-8, 401] 
split level 125: [/input-8, 402] 
split level 126: [/input, 1511] 
split level 127: [/input, 3041] 
split level 128: [/input-8, 468] 
split level 129: [/input, 3418] 
split level 130: [/input, 1134] 
split level 131: [/input, 3043] 
split level 132: [/input, 1510] 
split level 133: [/input, 226] 
split level 134: [/input, 962] 
split level 135: [/input-8, 1375] 
split level 136: [/input, 3459] 
split level 137: [/input, 683] 
split level 138: [/input-8, 488] 
split level 139: [/input, 2136] 
split level 140: [/input, 3030] 
split level 141: [/input, 843] 
split level 142: [/input-8, 1783] 
split level 143: [/input-8, 973] 
split level 144: [/input, 403] 
split level 145: [/input, 840] 
split level 146: [/input, 1509] 
split level 147: [/input, 2664] 
split level 148: [/input, 2424] 
split level 149: [/input, 841] 
split level 150: [/input, 1719] 
split level 151: [/input-8, 953] 
split level 152: [/input, 3042] 
split level 153: [/input-8, 1520] 
split level 154: [/input-8, 70] 
split level 155: [/input, 317] 
split level 156: [/input, 899] 
split level 157: [/input, 3548] 
split level 158: [/input, 2393] 
split level 159: [/input, 3246] 
split level 160: [/input, 1216] 
split level 161: [/input, 376] 
split level 162: [/input, 224] 
split level 163: [/input-8, 1925] 
split level 164: [/input, 3457] 
split level 165: [/input, 1492] 
split level 166: [/input, 2391] 
split level 167: [/input, 1006] 
split level 168: [/input, 2409] 
split level 169: [/input, 300] 
split level 170: [/input, 3443] 
split level 171: [/input, 3111] 
split level 172: [/input, 122] 
split level 173: [/input, 1021] 
split level 174: [/input, 3099] 
split level 175: [/input-8, 990] 
split level 176: [/input, 1017] 
split level 177: [/input, 2392] 
split level 178: [/input, 979] 
split level 179: [/input, 2137] 
split level 180: [/input, 1512] 
split level 181: [/input, 1514] 
split level 182: [/input, 975] 
split level 183: [/input, 3114] 
split level 184: [/input-8, 1547] 
split level 185: [/input, 2135] 
split level 186: [/input, 329] 
split level 187: [/input, 568] 
split level 188: [/input, 357] 
split level 189: [/input, 218] 
split level 190: [/input, 341] 
split level 191: [/input, 3419] 
split level 192: [/input, 2152] 
split level 193: [/input, 333] 
split level 194: [/input, 3441] 
split level 195: [/input, 1099] 
split level 196: [/input, 1513] 
split level 197: [/input, 3113] 
split level 198: [/input-8, 1347] 
split level 199: [/input, 1519] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3963733911514282
10 lb beta sum: 0.0, worst -0.3963697552680969
Time: prepare 0.0117    bound 0.1011    transfer 0.0008    finalize 0.0027    func 0.1190    
Accumulated time: func 0.1744    prepare 0.0223    bound 0.1561    transfer 0.0009    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.07017159) min lb tensor(-0.39636746)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010453462600708008 
BICCOS Cumulative time: 0.010453462600708008
Preprocessing time: 0.009992599487304688 Inference time: 0.00015211105346679688 Add cuts time: 7.367134094238281e-05 Cut analysis time: 0.00023508071899414062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.38675 (1), -0.38675 (1), -0.38656 (1), -0.38642 (1), -0.38626 (1), -0.38588 (1), -0.38583 (1), -0.38573 (1), -0.38354 (1), -0.38254 (1), -0.38204 (1), -0.37946 (1), -0.37930 (1), -0.37873 (1), -0.37843 (1), -0.37808 (1), -0.37797 (1), -0.37730 (1), -0.37708 (1), -0.37684 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5346    set_bounds 0.0096    solve 0.1191    add 0.0682    
Accumulated time: pickout 0.0003    decision 0.5346    set_bounds 0.0096    solve 0.1191    add 0.0682    
Current (lb-rhs): -0.38675349950790405
50 domains visited
Cumulative time: 0.8028755187988281

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] 
split level 1: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 92] [/input-12, 24] [/input-12, 92] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 24] [/input-12, 0] [/input-12, 0] [/input-12, 0] 
split level 3: [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3726043105125427
10 lb beta sum: 0.580084502696991, worst -0.36853814125061035
Time: prepare 0.0073    bound 0.1214    transfer 0.0008    finalize 0.0024    func 0.1346    
Accumulated time: func 0.3090    prepare 0.0299    bound 0.2775    transfer 0.0017    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.14343369) min lb tensor(-0.36848330)
Number of Verified Splits: 16 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.012928009033203125 
BICCOS Cumulative time: 0.023381471633911133
Preprocessing time: 0.011762857437133789 Inference time: 0.0006735324859619141 Add cuts time: 0.00024771690368652344 Cut analysis time: 0.00024390220642089844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23975 (2), -0.23949 (2), -0.23885 (2), -0.23773 (2), -0.23733 (2), -0.23706 (2), -0.23682 (2), -0.23628 (2), -0.23563 (2), -0.23549 (2), -0.23546 (2), -0.23546 (2), -0.23510 (2), -0.23344 (2), -0.23259 (2), -0.23241 (2), -0.23231 (2), -0.23210 (2), -0.23201 (2), -0.22929 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0239    set_bounds 0.0129    solve 0.1347    add 0.0801    
Accumulated time: pickout 0.0013    decision 0.5585    set_bounds 0.0225    solve 0.2538    add 0.1483    
Current (lb-rhs): -0.23975253105163574
100 domains visited
Cumulative time: 1.0691821575164795

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 24] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 24] [/input-12, 0] [/input-12, 24] [/input-12, 92] [/input-12, 0] [/input-12, 0] [/input-12, 92] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 0] [/input-8, 819] [/input-12, 0] [/input-12, 0] [/input-8, 819] [/input-8, 819] [/input-12, 0] [/input-8, 819] [/input-8, 819] [/input-12, 0] 
split level 3: [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2394081950187683
10 lb beta sum: 0.7652418613433838, worst -0.2356104850769043
Time: prepare 0.0072    bound 0.1209    transfer 0.0008    finalize 0.0022    func 0.1338    
Accumulated time: func 0.4428    prepare 0.0374    bound 0.3984    transfer 0.0025    finalize 0.0075    
all_split False
======================Cut inference begins======================
max lb tensor(0.48864269) min lb tensor(-0.23514074)
Number of Verified Splits: 51 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.015645503997802734 
BICCOS Cumulative time: 0.03902697563171387
Preprocessing time: 0.011727571487426758 Inference time: 0.0021080970764160156 Add cuts time: 0.0015153884887695312 Cut analysis time: 0.0002944469451904297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12185 (3), -0.11956 (3), -0.11954 (3), -0.11928 (3), -0.11908 (3), -0.11856 (3), -0.11796 (3), -0.11623 (3), -0.11411 (3), -0.11286 (3), -0.11168 (3), -0.11166 (3), -0.10858 (3), -0.10600 (3), -0.10471 (3), -0.10434 (3), -0.10281 (3), -0.10101 (3), -0.10089 (3), -0.09646 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0146    solve 0.1339    add 0.0848    
Accumulated time: pickout 0.0023    decision 0.5780    set_bounds 0.0371    solve 0.3877    add 0.2330    
Current (lb-rhs): -0.1218530535697937
150 domains visited
Cumulative time: 1.338841438293457

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 0] [/input-12, 0] [/input-12, 92] [/input-12, 92] [/input-8, 818] [/input-12, 0] [/input-12, 0] [/input-12, 24] [/input-12, 24] [/input-8, 818] 
split level 2: [/input-8, 819] [/input-8, 819] [/input-8, 818] [/input-8, 818] [/input-8, 1322] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 500] 
split level 3: [/input-8, 818] [/input-8, 818] [/input-8, 1516] [/input-8, 500] [/input-8, 21] [/input-8, 500] [/input-8, 500] [/input-8, 1058] [/input-8, 1058] [/input-8, 157] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12624233961105347
10 lb beta sum: 0.7355108261108398, worst -0.1213260293006897
Time: prepare 0.0076    bound 0.1236    transfer 0.0041    finalize 0.0029    func 0.1410    
Accumulated time: func 0.5838    prepare 0.0453    bound 0.5220    transfer 0.0065    finalize 0.0104    
all_split False
======================Cut inference begins======================
max lb tensor(0.50553226) min lb tensor(-0.11839958)
Number of Verified Splits: 88 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 4
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.01809239387512207 
BICCOS Cumulative time: 0.05711936950683594
Preprocessing time: 0.011746883392333984 Inference time: 0.004082441329956055 Add cuts time: 0.0017993450164794922 Cut analysis time: 0.00046372413635253906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04699 (4), -0.04657 (4), -0.04620 (4), -0.04620 (4), -0.04556 (4), -0.04547 (4), -0.04474 (4), -0.04468 (4), -0.04451 (4), -0.04412 (4), -0.04400 (4), -0.04397 (4), -0.04390 (4), -0.04381 (4), -0.04307 (4), -0.04196 (4), -0.04163 (4), -0.03982 (4), -0.03943 (4), -0.03941 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0137    solve 0.1410    add 0.0923    
Accumulated time: pickout 0.0032    decision 0.5976    set_bounds 0.0508    solve 0.5287    add 0.3253    
Current (lb-rhs): -0.046987712383270264
200 domains visited
Cumulative time: 1.6247878074645996

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-8, 819] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-12, 0] 
split level 2: [/input-8, 818] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 818] 
split level 3: [/input-8, 500] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 500] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05164909362792969
10 lb beta sum: 0.667110800743103, worst -0.10890501737594604
Time: prepare 0.0081    bound 0.1380    transfer 0.0008    finalize 0.0025    func 0.1519    
Accumulated time: func 0.7357    prepare 0.0536    bound 0.6600    transfer 0.0073    finalize 0.0129    
all_split False
======================Cut inference begins======================
max lb tensor(0.04273051) min lb tensor(-0.04517764)
Number of Verified Splits: 139 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.02210378646850586 
BICCOS Cumulative time: 0.0792231559753418
Preprocessing time: 0.011561393737792969 Inference time: 0.007126569747924805 Add cuts time: 0.0024924278259277344 Cut analysis time: 0.0009233951568603516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00682 (5), -0.00681 (5), -0.00653 (5), -0.00651 (5), -0.00651 (5), -0.00634 (5), -0.00632 (5), -0.00591 (5), -0.00563 (5), -0.00542 (5), -0.00539 (5), -0.00530 (5), -0.00487 (5), -0.00487 (5), -0.00470 (5), -0.00467 (5), -0.00448 (5), -0.00437 (5), -0.00412 (5), -0.00409 (5), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0197    set_bounds 0.0153    solve 0.1520    add 0.2565    
Accumulated time: pickout 0.0042    decision 0.6173    set_bounds 0.0660    solve 0.6807    add 0.5818    
Current (lb-rhs): -0.006822418421506882
250 domains visited
Cumulative time: 2.0916032791137695

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([64]), tensor([-1.]), tensor([0]), tensor([5.75662906e-20]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [-1.0], [0], [2.6904930515036488e-43], [3]), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 1.37508854e-01, 7.51471370e-02, 2.73026694e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [-1.0], [0], [2.6904930515036488e-43], [3]), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 1.37508854e-01, 7.51471370e-02, 5.65231591e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [1.0], [0], [0.01951913721859455], [3]), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 1.37508854e-01, 7.51471370e-02, 2.76329387e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [1.0], [0], [0.01951913721859455], [3]), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 1.37508854e-01, 7.51471370e-02, 5.60154766e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 1.37508854e-01, 3.57286781e-02, 5.22957882e-04]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 1.37508854e-01, 3.57286781e-02, 4.99587595e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [-1.0], [0], [0.017362849786877632], [3]), '/input-12': (tensor([64, 36, 24, 92]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 1.16705582e-01, 1.03367582e-01, 2.65598167e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [-1.0], [0], [0.017362849786877632], [3]), '/input-12': (tensor([64, 36, 24, 92]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 1.16705582e-01, 1.03367582e-01, 4.78344113e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [1.0], [0], [0.014236228540539742], [3]), '/input-12': (tensor([64, 36, 24, 92]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 1.16705582e-01, 1.03367582e-01, 2.77575124e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [1.0], [0], [0.014236228540539742], [3]), '/input-12': (tensor([64, 36, 24, 92]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 1.16705582e-01, 1.03367582e-01, 4.83035892e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([64, 36, 24]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 1.16705582e-01, 3.52588743e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3935967683792114
10 lb beta sum: 0.8473874926567078, worst -0.3853582739830017
Time: prepare 0.0006    bound 0.1373    transfer 0.0002    finalize 0.0002    func 0.1384    
Accumulated time: func 0.8741    prepare 0.0541    bound 0.7973    transfer 0.0075    finalize 0.0131    
After pruning, left:  7

Back to Regular BaB

BaB round 1
batch: 7
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 0] [/input-12, 0] [/input-12, 92] 
split level 1: [/input-12, 92] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-12, 0] 
split level 2: [/input-12, 24] [/input-8, 1334] [/input-8, 1334] [/input-8, 818] [/input-8, 500] [/input-8, 500] [/input-8, 819] 
split level 3: [/input-12, 0] [/input, 2938] [/input, 2938] [/input-8, 1334] [/input-8, 1334] [/input-8, 1334] [/input-8, 818] 
split level 4: [/input-8, 818] [/input-8, 1058] [/input-8, 1058] [/input, 2938] [/input-8, 1516] [/input-8, 1516] [/input-8, 1334] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8511124849319458, worst -0.19487787783145905
10 lb beta sum: 0.8516767024993896, worst -0.19418218731880188
Time: prepare 0.0103    bound 0.1385    transfer 0.0024    finalize 0.0020    func 0.1547    
Accumulated time: func 1.0287    prepare 0.0647    bound 0.9358    transfer 0.0099    finalize 0.0151    
all_split False
======================Cut inference begins======================
max lb tensor(0.27959812) min lb tensor(-0.19391946)
Number of Verified Splits: 188 of 224
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.8394601345062256, worst -0.25944796204566956
10 lb beta sum: 0.9471299648284912, worst -0.2553798258304596
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 4
#cuts 4-6: 21
#cuts 7-9: 10
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.2710850238800049 
BICCOS Cumulative time: 0.3503081798553467
Preprocessing time: 0.006478786468505859 Inference time: 0.2568624019622803 Add cuts time: 0.0060122013092041016 Cut analysis time: 0.0017316341400146484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19392 (5), -0.19245 (5), -0.17419 (5), -0.17049 (5), -0.15551 (5), -0.15311 (5), -0.14802 (5), -0.14684 (5), -0.13814 (5), -0.13502 (5), -0.11641 (5), -0.11217 (5), -0.06620 (5), -0.06600 (5), -0.05985 (5), -0.05742 (5), -0.05457 (5), -0.05438 (5), -0.04359 (5), -0.04238 (5), 
Length of domains: 36
Time: pickout 0.0006    decision 0.0159    set_bounds 0.0220    solve 0.1547    add 0.0011    
Accumulated time: pickout 0.0048    decision 0.6332    set_bounds 0.0880    solve 0.8354    add 0.5829    
Current (lb-rhs): -0.19391946494579315
286 domains visited
Cumulative time: 2.7231335639953613

BaB round 2
batch: 36
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 819] [/input-8, 500] [/input-8, 500] [/input-8, 817] [/input-8, 817] [/input-8, 819] [/input-8, 819] [/input-8, 817] [/input-8, 817] [/input-8, 819] 
split level 1: [/input-8, 500] [/input, 2938] [/input-8, 157] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] 
split level 2: [/input-8, 157] [/input-8, 1058] [/input-8, 1662] [/input-8, 1516] [/input-8, 1516] [/input, 2938] [/input, 2938] [/input-8, 1516] [/input-8, 1516] [/input-8, 157] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18394993245601654
10 lb beta sum: 0.4658535420894623, worst -0.17968076467514038
Time: prepare 0.0063    bound 0.1535    transfer 0.0011    finalize 0.0016    func 0.1644    
Accumulated time: func 1.1931    prepare 0.0712    bound 1.0893    transfer 0.0110    finalize 0.0167    
all_split False
======================Cut inference begins======================
max lb tensor(0.03252542) min lb tensor(-0.17954157)
Number of Verified Splits: 98 of 288
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 6
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.019240379333496094 
BICCOS Cumulative time: 0.3695485591888428
Preprocessing time: 0.00835108757019043 Inference time: 0.007895708084106445 Add cuts time: 0.0025506019592285156 Cut analysis time: 0.0004429817199707031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17954 (8), -0.17825 (8), -0.16861 (8), -0.16622 (8), -0.16404 (8), -0.16307 (8), -0.15937 (8), -0.15536 (8), -0.15380 (8), -0.15130 (8), -0.14883 (8), -0.14848 (8), -0.14611 (8), -0.14610 (8), -0.14394 (8), -0.13967 (8), -0.13817 (8), -0.13787 (8), -0.13724 (8), -0.13640 (8), 
Length of domains: 190
Time: pickout 0.0016    decision 0.0132    set_bounds 0.0164    solve 0.1645    add 0.0017    
Accumulated time: pickout 0.0065    decision 0.6464    set_bounds 0.1044    solve 0.9999    add 0.5846    
Current (lb-rhs): -0.17954157292842865
476 domains visited
Cumulative time: 2.940413236618042

BaB round 3
batch: 190
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2938] [/input-8, 1399] [/input-8, 1065] [/input-12, 20] [/input-8, 817] [/input-8, 817] [/input-8, 1065] [/input-8, 1334] [/input-8, 1334] [/input-12, 20] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18100938200950623
10 lb beta sum: 0.553585946559906, worst -0.17940333485603333
Time: prepare 0.0084    bound 0.1375    transfer 0.0007    finalize 0.0023    func 0.1519    
Accumulated time: func 1.3451    prepare 0.0799    bound 1.2268    transfer 0.0117    finalize 0.0190    
all_split False
======================Cut inference begins======================
max lb tensor(0.72082484) min lb tensor(-0.17933415)
Number of Verified Splits: 214 of 380
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 12
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.03304100036621094 
BICCOS Cumulative time: 0.4025895595550537
Preprocessing time: 0.01100015640258789 Inference time: 0.019052505493164062 Add cuts time: 0.002583742141723633 Cut analysis time: 0.00040459632873535156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17933 (9), -0.17808 (9), -0.16793 (9), -0.16553 (9), -0.16307 (9), -0.16206 (9), -0.15522 (9), -0.15269 (9), -0.15110 (9), -0.14997 (9), -0.14433 (9), -0.14387 (9), -0.14347 (9), -0.14140 (9), -0.13938 (9), -0.13547 (9), -0.13387 (9), -0.13365 (9), -0.13357 (9), -0.13251 (9), 
Length of domains: 166
Time: pickout 0.0026    decision 0.0247    set_bounds 0.0188    solve 0.1520    add 0.0017    
Accumulated time: pickout 0.0091    decision 0.6711    set_bounds 0.1232    solve 1.1519    add 0.5863    
Current (lb-rhs): -0.1793341487646103
642 domains visited
Cumulative time: 3.1745996475219727

BaB round 4
batch: 166
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1334] [/input-8, 1334] [/input-8, 1661] [/input-8, 1661] [/input-12, 20] [/input-8, 1334] [/input-8, 1334] [/input-8, 1661] [/input-8, 1661] [/input-12, 20] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17684194445610046
10 lb beta sum: 1.350696325302124, worst -0.16877925395965576
Time: prepare 0.0073    bound 0.1630    transfer 0.0024    finalize 0.0020    func 0.1769    
Accumulated time: func 1.5220    prepare 0.0874    bound 1.3898    transfer 0.0141    finalize 0.0210    
all_split False
======================Cut inference begins======================
max lb tensor(1.02509463) min lb tensor(-0.16873533)
Number of Verified Splits: 268 of 332
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 12
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.03634786605834961 
BICCOS Cumulative time: 0.4389374256134033
Preprocessing time: 0.009656190872192383 Inference time: 0.022691011428833008 Add cuts time: 0.003592967987060547 Cut analysis time: 0.0004076957702636719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16874 (10), -0.16788 (10), -0.15720 (10), -0.15518 (10), -0.15210 (10), -0.15132 (10), -0.14578 (10), -0.14177 (10), -0.14151 (10), -0.13932 (10), -0.13467 (10), -0.13419 (10), -0.13183 (10), -0.12980 (10), -0.12976 (10), -0.12828 (10), -0.12825 (10), -0.12690 (10), -0.12202 (10), -0.11908 (10), 
Length of domains: 64
Time: pickout 0.0027    decision 0.0177    set_bounds 0.0138    solve 0.1770    add 0.0011    
Accumulated time: pickout 0.0117    decision 0.6888    set_bounds 0.1370    solve 1.3289    add 0.5874    
Current (lb-rhs): -0.1687353253364563
706 domains visited
Cumulative time: 3.424405336380005

BaB round 5
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1661] [/input-8, 1516] [/input-8, 1661] [/input-8, 157] [/input-8, 1174] [/input-8, 157] [/input-8, 1174] [/input-8, 157] [/input-8, 1661] [/input-8, 157] 
split level 1: [/input-8, 1174] [/input-8, 157] [/input-8, 1174] [/input-8, 1516] [/input-8, 1661] [/input-8, 1516] [/input-8, 1661] [/input-8, 1516] [/input-8, 1174] [/input-8, 1516] 
cut re-enabled after branching node selection
0 lb beta sum: 1.3335492610931396, worst -0.16506168246269226
10 lb beta sum: 1.3386616706848145, worst -0.165004163980484
Time: prepare 0.0116    bound 0.1554    transfer 0.0012    finalize 0.0018    func 0.1717    
Accumulated time: func 1.6937    prepare 0.0992    bound 1.5452    transfer 0.0152    finalize 0.0228    
all_split False
======================Cut inference begins======================
max lb tensor(0.17660964) min lb tensor(-0.16497913)
Number of Verified Splits: 48 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 13
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.012796401977539062 
BICCOS Cumulative time: 0.4517338275909424
Preprocessing time: 0.007602214813232422 Inference time: 0.003977298736572266 Add cuts time: 0.0004303455352783203 Cut analysis time: 0.0007865428924560547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16498 (12), -0.16455 (12), -0.16322 (12), -0.15956 (12), -0.15300 (12), -0.15178 (12), -0.15167 (12), -0.14817 (12), -0.14760 (12), -0.14688 (12), -0.14630 (12), -0.14570 (12), -0.14558 (12), -0.14169 (12), -0.14153 (12), -0.13752 (12), -0.13713 (12), -0.13583 (12), -0.13499 (12), -0.13447 (12), 
Length of domains: 208
Time: pickout 0.0018    decision 0.0144    set_bounds 0.0133    solve 0.1718    add 0.0021    
Accumulated time: pickout 0.0135    decision 0.7032    set_bounds 0.1504    solve 1.5007    add 0.5895    
Current (lb-rhs): -0.16497913002967834
914 domains visited
Cumulative time: 3.6411001682281494

BaB round 6
batch: 208
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 748] [/input-8, 1662] [/input-8, 748] [/input-8, 1662] [/input-8, 817] [/input-8, 1662] [/input-8, 817] [/input-8, 1662] [/input-8, 748] [/input-8, 1662] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16668078303337097
10 lb beta sum: 1.2676746845245361, worst -0.1645517498254776
Time: prepare 0.0091    bound 0.1603    transfer 0.0025    finalize 0.0023    func 0.1769    
Accumulated time: func 1.8706    prepare 0.1085    bound 1.7055    transfer 0.0177    finalize 0.0251    
all_split False
======================Cut inference begins======================
max lb tensor(0.85249668) min lb tensor(-0.16454864)
Number of Verified Splits: 131 of 416
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 13
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.02691936492919922 
BICCOS Cumulative time: 0.4786531925201416
Preprocessing time: 0.012022256851196289 Inference time: 0.013067960739135742 Add cuts time: 0.0014379024505615234 Cut analysis time: 0.00039124488830566406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16455 (13), -0.16321 (13), -0.16199 (13), -0.16083 (13), -0.16065 (13), -0.15949 (13), -0.15778 (13), -0.14991 (13), -0.14958 (13), -0.14824 (13), -0.14763 (13), -0.14715 (13), -0.14630 (13), -0.14581 (13), -0.14564 (13), -0.14384 (13), -0.14251 (13), -0.14162 (13), -0.14147 (13), -0.13745 (13), 
Length of domains: 285
Time: pickout 0.0030    decision 0.0261    set_bounds 0.0179    solve 0.1770    add 0.0019    
Accumulated time: pickout 0.0166    decision 0.7293    set_bounds 0.1682    solve 1.6776    add 0.5914    
Current (lb-rhs): -0.16454863548278809
1199 domains visited
Cumulative time: 3.8949759006500244

BaB round 7
batch: 285
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 1654] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4846354722976685, worst -0.16092655062675476
10 lb beta sum: 1.5007078647613525, worst -0.1608922779560089
Time: prepare 0.0252    bound 0.1658    transfer 0.0044    finalize 0.0033    func 0.2026    
Accumulated time: func 2.0732    prepare 0.1339    bound 1.8713    transfer 0.0221    finalize 0.0284    
all_split False
======================Cut inference begins======================
max lb tensor(0.23009801) min lb tensor(-0.16088644)
Number of Verified Splits: 163 of 570
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.037160396575927734 
BICCOS Cumulative time: 0.5158135890960693
Preprocessing time: 0.016431808471679688 Inference time: 0.01878643035888672 Add cuts time: 0.0015611648559570312 Cut analysis time: 0.0003809928894042969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16089 (14), -0.15969 (14), -0.15955 (14), -0.15935 (14), -0.15896 (14), -0.15835 (14), -0.15801 (14), -0.15763 (14), -0.15563 (14), -0.15428 (14), -0.15359 (14), -0.15226 (14), -0.14988 (14), -0.14956 (14), -0.14853 (14), -0.14823 (14), -0.14700 (14), -0.14610 (14), -0.14567 (14), -0.14534 (14), 
Length of domains: 407
Time: pickout 0.0047    decision 0.0299    set_bounds 0.0246    solve 0.2036    add 0.0018    
Accumulated time: pickout 0.0213    decision 0.7592    set_bounds 0.1928    solve 1.8812    add 0.5932    
Current (lb-rhs): -0.16088643670082092
1606 domains visited
Cumulative time: 4.198211431503296

BaB round 8
batch: 407
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 817] [/input-8, 1516] [/input-8, 817] [/input-8, 1399] [/input, 2938] [/input-8, 747] [/input-8, 817] [/input-8, 498] [/input-8, 1516] [/input-8, 748] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4489572048187256, worst -0.16083979606628418
10 lb beta sum: 1.815347671508789, worst -0.1593531370162964
Time: prepare 0.0360    bound 0.1658    transfer 0.0041    finalize 0.0051    func 0.2164    
Accumulated time: func 2.2896    prepare 0.1701    bound 2.0371    transfer 0.0263    finalize 0.0335    
all_split False
======================Cut inference begins======================
max lb tensor(0.22913069) min lb tensor(-0.15934968)
Number of Verified Splits: 69 of 814
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.03358936309814453 
BICCOS Cumulative time: 0.5494029521942139
Preprocessing time: 0.02318096160888672 Inference time: 0.007634401321411133 Add cuts time: 0.0009076595306396484 Cut analysis time: 0.0018663406372070312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15935 (15), -0.15804 (15), -0.15801 (15), -0.15679 (15), -0.15671 (15), -0.15668 (15), -0.15605 (15), -0.15546 (15), -0.15534 (15), -0.15472 (15), -0.15358 (15), -0.15223 (15), -0.15182 (15), -0.15169 (15), -0.15102 (15), -0.15070 (15), -0.15050 (15), -0.15037 (15), -0.15036 (15), -0.14971 (15), 
Length of domains: 745
Time: pickout 0.0061    decision 0.0360    set_bounds 0.0344    solve 0.2166    add 0.0042    
Accumulated time: pickout 0.0274    decision 0.7952    set_bounds 0.2272    solve 2.0978    add 0.5975    
Current (lb-rhs): -0.15934967994689941
2351 domains visited
Cumulative time: 4.530280828475952

BaB round 9
batch: 745
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 747] [/input-8, 748] [/input-8, 1324] [/input-8, 1399] [/input-8, 1399] [/input-8, 1324] [/input-8, 498] [/input-8, 748] [/input-8, 1134] [/input-8, 747] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9015830755233765, worst -0.15629029273986816
10 lb beta sum: 1.9047671556472778, worst -0.15624511241912842
Time: prepare 0.0665    bound 0.1898    transfer 0.0081    finalize 0.0085    func 0.2826    
Accumulated time: func 2.5722    prepare 0.2369    bound 2.2269    transfer 0.0343    finalize 0.0420    
all_split False
======================Cut inference begins======================
max lb tensor(0.25645167) min lb tensor(-0.15621352)
Number of Verified Splits: 208 of 1490
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.07632184028625488 
BICCOS Cumulative time: 0.6257247924804688
Preprocessing time: 0.04861569404602051 Inference time: 0.02525949478149414 Add cuts time: 0.0019054412841796875 Cut analysis time: 0.0005412101745605469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15621 (16), -0.15527 (16), -0.15487 (16), -0.15399 (16), -0.15391 (16), -0.15365 (16), -0.15331 (16), -0.15263 (16), -0.15231 (16), -0.15199 (16), -0.15194 (16), -0.15072 (16), -0.15066 (16), -0.14942 (16), -0.14939 (16), -0.14896 (16), -0.14869 (16), -0.14816 (16), -0.14808 (16), -0.14767 (16), 
Length of domains: 1282
Time: pickout 0.0134    decision 0.0558    set_bounds 0.0629    solve 0.2830    add 0.0052    
Accumulated time: pickout 0.0408    decision 0.8510    set_bounds 0.2901    solve 2.3808    add 0.6027    
Current (lb-rhs): -0.15621352195739746
3633 domains visited
Cumulative time: 5.029443740844727

BaB round 10
batch: 1282
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 498] [/input, 889] [/input-8, 1134] [/input-8, 1516] [/input-8, 748] [/input-8, 157] [/input-8, 1516] [/input, 889] [/input-8, 747] [/input-8, 748] 
cut re-enabled after branching node selection
0 lb beta sum: 1.868674397468567, worst -0.15351057052612305
10 lb beta sum: 1.8703333139419556, worst -0.15350008010864258
Time: prepare 0.1163    bound 0.2720    transfer 0.0058    finalize 0.0150    func 0.4258    
Accumulated time: func 2.9980    prepare 0.3534    bound 2.4989    transfer 0.0401    finalize 0.0569    
all_split False
======================Cut inference begins======================
max lb tensor(0.27713597) min lb tensor(-0.15349412)
Number of Verified Splits: 205 of 2564
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.11052918434143066 
BICCOS Cumulative time: 0.7362539768218994
Preprocessing time: 0.07994294166564941 Inference time: 0.027449369430541992 Add cuts time: 0.002580881118774414 Cut analysis time: 0.0005559921264648438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15349 (17), -0.15213 (17), -0.15194 (17), -0.15093 (17), -0.15075 (17), -0.15065 (17), -0.15057 (17), -0.14963 (17), -0.14956 (17), -0.14946 (17), -0.14939 (17), -0.14929 (17), -0.14904 (17), -0.14856 (17), -0.14827 (17), -0.14810 (17), -0.14801 (17), -0.14767 (17), -0.14722 (17), -0.14718 (17), 
Length of domains: 2359
Time: pickout 0.0181    decision 0.2341    set_bounds 0.1063    solve 0.4262    add 0.0125    
Accumulated time: pickout 0.0589    decision 1.0851    set_bounds 0.3965    solve 2.8070    add 0.6152    
Current (lb-rhs): -0.15349411964416504
5992 domains visited
Cumulative time: 5.9409191608428955

BaB round 11
batch: 2359
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 497] [/input-8, 747] [/input-8, 747] [/input-8, 794] [/input, 889] [/input, 2938] [/input-8, 794] [/input-8, 1174] [/input-8, 748] [/input-8, 1516] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8457905054092407, worst -0.1525697112083435
10 lb beta sum: 1.8467960357666016, worst -0.15256857872009277
Time: prepare 0.3751    bound 0.4347    transfer 0.0306    finalize 0.0275    func 0.8990    
Accumulated time: func 3.8970    prepare 0.7288    bound 2.9335    transfer 0.0707    finalize 0.0844    
all_split False
======================Cut inference begins======================
max lb tensor(0.27887827) min lb tensor(-0.15256321)
Number of Verified Splits: 373 of 4718
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.20761466026306152 
BICCOS Cumulative time: 0.9438686370849609
Preprocessing time: 0.1458146572113037 Inference time: 0.055764198303222656 Add cuts time: 0.005510091781616211 Cut analysis time: 0.0005257129669189453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15256 (18), -0.15120 (18), -0.15010 (18), -0.14881 (18), -0.14874 (18), -0.14810 (18), -0.14788 (18), -0.14781 (18), -0.14777 (18), -0.14763 (18), -0.14746 (18), -0.14707 (18), -0.14699 (18), -0.14674 (18), -0.14664 (18), -0.14652 (18), -0.14645 (18), -0.14622 (18), -0.14593 (18), -0.14583 (18), 
Length of domains: 4345
Time: pickout 0.0350    decision 0.1424    set_bounds 0.1916    solve 0.9006    add 0.0150    
Accumulated time: pickout 0.0939    decision 1.2275    set_bounds 0.5881    solve 3.7077    add 0.6302    
Current (lb-rhs): -0.152563214302063
10337 domains visited
Cumulative time: 7.447336196899414

BaB round 12
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 794] [/input-8, 1174] [/input-8, 748] [/input-8, 497] [/input-8, 1611] [/input-8, 748] [/input-8, 497] [/input-8, 1611] [/input-8, 498] [/input-8, 794] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8191943168640137, worst -0.14891964197158813
10 lb beta sum: 1.8196337223052979, worst -0.14888674020767212
Time: prepare 0.3911    bound 0.6836    transfer 0.0575    finalize 0.0462    func 1.2328    
Accumulated time: func 5.1298    prepare 1.1202    bound 3.6172    transfer 0.1283    finalize 0.1306    
all_split False
======================Cut inference begins======================
max lb tensor(0.28390622) min lb tensor(-0.14888185)
Number of Verified Splits: 821 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.40200257301330566 
BICCOS Cumulative time: 1.3458712100982666
Preprocessing time: 0.2615966796875 Inference time: 0.12701749801635742 Add cuts time: 0.012871742248535156 Cut analysis time: 0.0005166530609130859
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14888 (19), -0.14862 (19), -0.14788 (18), -0.14783 (19), -0.14752 (19), -0.14734 (19), -0.14726 (19), -0.14684 (19), -0.14643 (19), -0.14636 (19), -0.14599 (19), -0.14581 (19), -0.14564 (18), -0.14551 (19), -0.14513 (19), -0.14500 (19), -0.14470 (18), -0.14468 (19), -0.14445 (19), -0.14422 (19), 
Length of domains: 7620
Time: pickout 0.0748    decision 0.2284    set_bounds 0.5096    solve 1.2349    add 0.0405    
Accumulated time: pickout 0.1687    decision 1.4559    set_bounds 1.0977    solve 4.9426    add 0.6707    
Current (lb-rhs): -0.14888185262680054
17708 domains visited
Cumulative time: 9.959541082382202

BaB round 13
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 498] [/input-8, 794] [/input-8, 748] [/input-8, 748] [/input-8, 498] [/input-8, 747] [/input-8, 498] [/input-8, 747] [/input-8, 748] [/input-8, 748] 
cut re-enabled after branching node selection
0 lb beta sum: 1.759065866470337, worst -0.1460781693458557
10 lb beta sum: 1.7594653367996216, worst -0.1460527777671814
Time: prepare 0.3963    bound 0.6823    transfer 0.0439    finalize 0.0499    func 1.2319    
Accumulated time: func 6.3617    prepare 1.5168    bound 4.2995    transfer 0.1721    finalize 0.1805    
all_split False
======================Cut inference begins======================
max lb tensor(0.27195060) min lb tensor(-0.14603889)
Number of Verified Splits: 494 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.575732946395874 
BICCOS Cumulative time: 1.9216041564941406
Preprocessing time: 0.4805164337158203 Inference time: 0.08306455612182617 Add cuts time: 0.011622905731201172 Cut analysis time: 0.0005290508270263672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14888 (19), -0.14862 (19), -0.14752 (19), -0.14734 (19), -0.14726 (19), -0.14684 (19), -0.14636 (19), -0.14604 (19), -0.14599 (19), -0.14588 (20), -0.14551 (19), -0.14513 (19), -0.14500 (19), -0.14449 (20), -0.14445 (19), -0.14435 (20), -0.14422 (19), -0.14414 (19), -0.14381 (19), -0.14355 (19), 
Length of domains: 11222
Time: pickout 0.0613    decision 0.4067    set_bounds 0.3636    solve 1.2338    add 0.0345    
Accumulated time: pickout 0.2301    decision 1.8626    set_bounds 1.4613    solve 6.1764    add 0.7052    
Current (lb-rhs): -0.14888185262680054
25406 domains visited
Cumulative time: 12.653366804122925

BaB round 14
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1399] [/input-8, 1324] [/input-8, 747] [/input-8, 498] [/input-8, 1662] [/input-8, 1114] [/input-8, 1324] [/input-8, 747] [/input-8, 1174] [/input-8, 497] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8201009035110474, worst -0.1470649242401123
10 lb beta sum: 1.8204604387283325, worst -0.14706552028656006
Time: prepare 0.3878    bound 0.6855    transfer 0.0435    finalize 0.0501    func 1.2215    
Accumulated time: func 7.5833    prepare 1.9049    bound 4.9850    transfer 0.2157    finalize 0.2306    
all_split False
======================Cut inference begins======================
max lb tensor(0.01833332) min lb tensor(-0.14705878)
Number of Verified Splits: 489 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.3618152141571045 
BICCOS Cumulative time: 2.283419370651245
Preprocessing time: 0.25991344451904297 Inference time: 0.09005188941955566 Add cuts time: 0.011278152465820312 Cut analysis time: 0.0005717277526855469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14706 (20), -0.14676 (20), -0.14588 (20), -0.14570 (20), -0.14549 (20), -0.14540 (20), -0.14450 (20), -0.14449 (20), -0.14435 (20), -0.14434 (20), -0.14414 (19), -0.14412 (20), -0.14397 (20), -0.14365 (20), -0.14326 (20), -0.14325 (19), -0.14317 (20), -0.14314 (20), -0.14298 (20), -0.14293 (19), 
Length of domains: 14829
Time: pickout 0.0612    decision 0.2358    set_bounds 0.3768    solve 1.4505    add 0.0235    
Accumulated time: pickout 0.2912    decision 2.0984    set_bounds 1.8381    solve 7.6268    add 0.7287    
Current (lb-rhs): -0.14705878496170044
33109 domains visited
Cumulative time: 15.178779363632202

BaB round 15
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1516] [/input-8, 497] [/input-8, 1516] [/input-8, 1662] [/input-8, 498] [/input, 889] [/input-8, 497] [/input-8, 1174] [/input-8, 498] [/input-8, 747] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7422022819519043, worst -0.14428812265396118
10 lb beta sum: 1.742501974105835, worst -0.1441916823387146
Time: prepare 0.3940    bound 0.6833    transfer 0.0435    finalize 0.0481    func 1.4634    
Accumulated time: func 9.0467    prepare 2.2992    bound 5.6682    transfer 0.2591    finalize 0.2787    
all_split False
======================Cut inference begins======================
max lb tensor(0.01805747) min lb tensor(-0.14415443)
Number of Verified Splits: 632 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.3925197124481201 
BICCOS Cumulative time: 2.6759390830993652
Preprocessing time: 0.25890278816223145 Inference time: 0.11701607704162598 Add cuts time: 0.016028881072998047 Cut analysis time: 0.0005719661712646484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14706 (20), -0.14676 (20), -0.14570 (20), -0.14549 (20), -0.14540 (20), -0.14450 (20), -0.14435 (20), -0.14434 (20), -0.14415 (21), -0.14412 (20), -0.14397 (20), -0.14365 (20), -0.14326 (20), -0.14317 (20), -0.14314 (20), -0.14298 (20), -0.14279 (20), -0.14277 (21), -0.14264 (20), -0.14261 (20), 
Length of domains: 18293
Time: pickout 0.0654    decision 0.2289    set_bounds 0.3748    solve 1.4650    add 0.0541    
Accumulated time: pickout 0.3566    decision 2.3272    set_bounds 2.2129    solve 9.0918    add 0.7828    
Current (lb-rhs): -0.14705878496170044
40669 domains visited
Cumulative time: 17.781195640563965

BaB round 16
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 497] [/input-8, 1516] [/input-8, 1516] [/input-8, 1174] [/input-8, 1516] [/input-8, 498] [/input-8, 1516] [/input-8, 1174] [/input-8, 1516] [/input-8, 497] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7563045024871826, worst -0.1430865228176117
10 lb beta sum: 1.7564243078231812, worst -0.14308181405067444
Time: prepare 0.3919    bound 0.6813    transfer 0.0569    finalize 0.0495    func 1.4983    
Accumulated time: func 10.5450    prepare 2.6913    bound 6.3495    transfer 0.3161    finalize 0.3282    
all_split False
======================Cut inference begins======================
max lb tensor(0.01971769) min lb tensor(-0.14306423)
Number of Verified Splits: 457 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.36013078689575195 
BICCOS Cumulative time: 3.036069869995117
Preprocessing time: 0.26363563537597656 Inference time: 0.08243942260742188 Add cuts time: 0.013567447662353516 Cut analysis time: 0.00048828125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14706 (20), -0.14676 (20), -0.14570 (20), -0.14540 (20), -0.14450 (20), -0.14434 (20), -0.14415 (21), -0.14397 (20), -0.14365 (20), -0.14317 (20), -0.14314 (20), -0.14306 (21), -0.14277 (21), -0.14264 (20), -0.14261 (20), -0.14251 (20), -0.14249 (21), -0.14235 (20), -0.14228 (20), -0.14169 (21), 
Length of domains: 21932
Time: pickout 0.0629    decision 0.2305    set_bounds 0.3784    solve 1.5002    add 0.0490    
Accumulated time: pickout 0.4195    decision 2.5577    set_bounds 2.5913    solve 10.5920    add 0.8318    
Current (lb-rhs): -0.14705878496170044
48404 domains visited
Cumulative time: 20.38070845603943

BaB round 17
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1654] [/input-8, 1516] [/input-8, 1169] [/input-8, 1114] [/input-8, 1516] [/input-8, 404] [/input-8, 1114] [/input-8, 404] [/input-8, 1174] [/input-8, 1399] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8088054656982422, worst -0.14546877145767212
10 lb beta sum: 1.8089253902435303, worst -0.1453862190246582
Time: prepare 0.4001    bound 0.6815    transfer 0.0418    finalize 0.0511    func 1.2289    
Accumulated time: func 11.7739    prepare 3.0917    bound 7.0310    transfer 0.3578    finalize 0.3792    
all_split False
======================Cut inference begins======================
max lb tensor(0.01787829) min lb tensor(-0.14536440)
Number of Verified Splits: 475 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.3617990016937256 
BICCOS Cumulative time: 3.3978688716888428
Preprocessing time: 0.26283860206604004 Inference time: 0.08526086807250977 Add cuts time: 0.013022899627685547 Cut analysis time: 0.0006766319274902344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14536 (21), -0.14435 (21), -0.14434 (20), -0.14415 (21), -0.14401 (21), -0.14397 (20), -0.14317 (20), -0.14306 (21), -0.14297 (21), -0.14277 (21), -0.14261 (20), -0.14249 (21), -0.14228 (20), -0.14209 (21), -0.14169 (21), -0.14138 (20), -0.14124 (20), -0.14122 (21), -0.14122 (20), -0.14112 (21), 
Length of domains: 25553
Time: pickout 0.0678    decision 0.2404    set_bounds 0.3767    solve 1.5410    add 0.0253    
Accumulated time: pickout 0.4873    decision 2.7981    set_bounds 2.9680    solve 12.1330    add 0.8571    
Current (lb-rhs): -0.1453644037246704
56121 domains visited
Cumulative time: 23.01310420036316

BaB round 18
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1654] [/input-8, 1174] [/input-8, 404] [/input-8, 1174] [/input, 2938] [/input-8, 1174] [/input, 2938] [/input-8, 1169] [/input-8, 1174] [/input-8, 1654] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7634179592132568, worst -0.14249300956726074
10 lb beta sum: 1.7635377645492554, worst -0.14248520135879517
Time: prepare 0.3960    bound 0.6877    transfer 0.0422    finalize 0.0513    func 1.2328    
Accumulated time: func 13.0067    prepare 3.4880    bound 7.7187    transfer 0.4001    finalize 0.4305    
all_split False
======================Cut inference begins======================
max lb tensor(0.21207130) min lb tensor(-0.14247757)
Number of Verified Splits: 566 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.38720226287841797 
BICCOS Cumulative time: 3.7850711345672607
Preprocessing time: 0.2676053047180176 Inference time: 0.10393786430358887 Add cuts time: 0.014998912811279297 Cut analysis time: 0.0006601810455322266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14536 (21), -0.14435 (21), -0.14415 (21), -0.14401 (21), -0.14306 (21), -0.14297 (21), -0.14277 (21), -0.14249 (21), -0.14248 (21), -0.14228 (20), -0.14227 (21), -0.14209 (21), -0.14169 (21), -0.14138 (20), -0.14132 (21), -0.14122 (21), -0.14122 (20), -0.14112 (21), -0.14107 (21), -0.14097 (21), 
Length of domains: 29083
Time: pickout 0.0640    decision 0.2354    set_bounds 0.3778    solve 1.2352    add 0.0242    
Accumulated time: pickout 0.5513    decision 3.0335    set_bounds 3.3458    solve 13.3682    add 0.8813    
Current (lb-rhs): -0.1453644037246704
63747 domains visited
Cumulative time: 25.358208179473877

BaB round 19
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1662] [/input-8, 1516] [/input-8, 498] [/input-8, 1516] [/input-8, 1324] [/input-8, 1516] [/input-8, 1169] [/input-8, 748] [/input-8, 1662] [/input-8, 1662] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7277109622955322, worst -0.13985371589660645
10 lb beta sum: 1.7278307676315308, worst -0.13995510339736938
Time: prepare 0.3959    bound 0.6830    transfer 0.0420    finalize 0.0501    func 1.2258    
Accumulated time: func 14.2325    prepare 3.8843    bound 8.4017    transfer 0.4421    finalize 0.4806    
all_split False
======================Cut inference begins======================
max lb tensor(0.19735855) min lb tensor(-0.13983929)
Number of Verified Splits: 656 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.40724897384643555 
BICCOS Cumulative time: 4.192320108413696
Preprocessing time: 0.2633330821990967 Inference time: 0.12491226196289062 Add cuts time: 0.018497943878173828 Cut analysis time: 0.0005056858062744141
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14536 (21), -0.14435 (21), -0.14415 (21), -0.14401 (21), -0.14306 (21), -0.14297 (21), -0.14277 (21), -0.14249 (21), -0.14248 (21), -0.14227 (21), -0.14209 (21), -0.14169 (21), -0.14132 (21), -0.14122 (21), -0.14122 (20), -0.14112 (21), -0.14107 (21), -0.14097 (21), -0.14091 (21), -0.14084 (21), 
Length of domains: 32523
Time: pickout 0.0637    decision 0.6051    set_bounds 0.3727    solve 1.2277    add 0.0240    
Accumulated time: pickout 0.6150    decision 3.6386    set_bounds 3.7185    solve 14.5960    add 0.9053    
Current (lb-rhs): -0.1453644037246704
71283 domains visited
Cumulative time: 28.08260941505432

BaB round 20
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1134] [/input-8, 1134] [/input, 2938] [/input, 2938] [/input-8, 1654] [/input-8, 747] [/input, 889] [/input-8, 498] [/input-8, 497] [/input-8, 1169] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7398933172225952, worst -0.1423059105873108
10 lb beta sum: 1.7400929927825928, worst -0.14227455854415894
Time: prepare 0.3947    bound 0.6834    transfer 0.0420    finalize 0.0510    func 1.2253    
Accumulated time: func 15.4578    prepare 4.2793    bound 9.0851    transfer 0.4840    finalize 0.5316    
all_split False
======================Cut inference begins======================
max lb tensor(0.01492274) min lb tensor(-0.14225250)
Number of Verified Splits: 514 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.3845071792602539 
BICCOS Cumulative time: 4.57682728767395
Preprocessing time: 0.267383337020874 Inference time: 0.0997459888458252 Add cuts time: 0.016841411590576172 Cut analysis time: 0.0005364418029785156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14536 (21), -0.14435 (21), -0.14401 (21), -0.14306 (21), -0.14297 (21), -0.14248 (21), -0.14227 (21), -0.14225 (22), -0.14209 (21), -0.14169 (21), -0.14132 (21), -0.14122 (21), -0.14112 (21), -0.14107 (21), -0.14097 (21), -0.14091 (21), -0.14087 (22), -0.14084 (21), -0.14080 (21), -0.14071 (21), 
Length of domains: 36105
Time: pickout 0.0662    decision 0.5995    set_bounds 0.3805    solve 1.2273    add 0.0941    
Accumulated time: pickout 0.6812    decision 4.2380    set_bounds 4.0990    solve 15.8233    add 0.9994    
Current (lb-rhs): -0.1453644037246704
78961 domains visited
Cumulative time: 30.85445785522461

BaB round 21
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1662] [/input-8, 1169] [/input-8, 1662] [/input-8, 1134] [/input-8, 1169] [/input-8, 1662] [/input-8, 1169] [/input-8, 1169] [/input-8, 748] [/input-8, 1516] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7449811697006226, worst -0.1392347812652588
10 lb beta sum: 1.745021104812622, worst -0.13921314477920532
Time: prepare 0.3965    bound 0.6815    transfer 0.0420    finalize 0.0508    func 1.2259    
Accumulated time: func 16.6837    prepare 4.6761    bound 9.7666    transfer 0.5260    finalize 0.5824    
all_split False
======================Cut inference begins======================
max lb tensor(0.01610255) min lb tensor(-0.13915718)
Number of Verified Splits: 555 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.3900787830352783 
BICCOS Cumulative time: 4.9669060707092285
Preprocessing time: 0.26572275161743164 Inference time: 0.10889053344726562 Add cuts time: 0.014964103698730469 Cut analysis time: 0.0005013942718505859
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14536 (21), -0.14435 (21), -0.14401 (21), -0.14306 (21), -0.14297 (21), -0.14248 (21), -0.14227 (21), -0.14225 (22), -0.14209 (21), -0.14169 (21), -0.14132 (21), -0.14122 (21), -0.14097 (21), -0.14091 (21), -0.14087 (22), -0.14084 (21), -0.14080 (21), -0.14071 (21), -0.14065 (21), -0.14008 (21), 
Length of domains: 39646
Time: pickout 0.0650    decision 0.2311    set_bounds 0.7869    solve 1.2274    add 0.0372    
Accumulated time: pickout 0.7462    decision 4.4692    set_bounds 4.8859    solve 17.0507    add 1.0366    
Current (lb-rhs): -0.1453644037246704
86598 domains visited
Cumulative time: 33.613890171051025

BaB round 22
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1611] [/input-8, 1324] [/input-8, 1324] [/input, 889] [/input-8, 1324] [/input-8, 1610] [/input-8, 1662] [/input-8, 1610] [/input-8, 1662] [/input-8, 1610] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7640235424041748, worst -0.13939163088798523
10 lb beta sum: 1.764143466949463, worst -0.13939473032951355
Time: prepare 0.3985    bound 0.6813    transfer 0.0447    finalize 0.0575    func 1.2367    
Accumulated time: func 17.9204    prepare 5.0749    bound 10.4479    transfer 0.5706    finalize 0.6400    
all_split False
======================Cut inference begins======================
max lb tensor(0.19762963) min lb tensor(-0.13932624)
Number of Verified Splits: 729 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.42284464836120605 
BICCOS Cumulative time: 5.389750719070435
Preprocessing time: 0.2688591480255127 Inference time: 0.13389968872070312 Add cuts time: 0.01956772804260254 Cut analysis time: 0.0005180835723876953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14536 (21), -0.14435 (21), -0.14401 (21), -0.14297 (21), -0.14248 (21), -0.14227 (21), -0.14225 (22), -0.14209 (21), -0.14132 (21), -0.14122 (21), -0.14097 (21), -0.14091 (21), -0.14087 (22), -0.14071 (21), -0.14008 (21), -0.14007 (22), -0.13994 (21), -0.13984 (21), -0.13962 (21), -0.13951 (21), 
Length of domains: 43013
Time: pickout 0.0649    decision 0.2271    set_bounds 0.3789    solve 1.2392    add 0.0258    
Accumulated time: pickout 0.8111    decision 4.6963    set_bounds 5.2648    solve 18.2899    add 1.0624    
Current (lb-rhs): -0.1453644037246704
94061 domains visited
Cumulative time: 36.00179052352905

BaB round 23
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1662] [/input-8, 1661] [/input-8, 1662] [/input-8, 1174] [/input-8, 1662] [/input-8, 1169] [/input-8, 1399] [/input-8, 1662] [/input-8, 404] [/input-8, 747] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7999153137207031, worst -0.1435161828994751
10 lb beta sum: 1.8000152111053467, worst -0.1435115933418274
Time: prepare 0.3963    bound 0.6810    transfer 0.0426    finalize 0.0528    func 1.2273    
Accumulated time: func 19.1478    prepare 5.4715    bound 11.1289    transfer 0.6132    finalize 0.6928    
all_split False
======================Cut inference begins======================
max lb tensor(0.17540029) min lb tensor(-0.14350414)
Number of Verified Splits: 580 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.3915534019470215 
BICCOS Cumulative time: 5.781304121017456
Preprocessing time: 0.2672603130340576 Inference time: 0.10552334785461426 Add cuts time: 0.018187999725341797 Cut analysis time: 0.0005817413330078125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14350 (22), -0.14248 (21), -0.14227 (21), -0.14225 (22), -0.14214 (22), -0.14138 (22), -0.14132 (21), -0.14125 (22), -0.14091 (21), -0.14087 (22), -0.14007 (22), -0.13993 (22), -0.13984 (21), -0.13969 (22), -0.13935 (21), -0.13935 (21), -0.13933 (22), -0.13921 (22), -0.13916 (22), -0.13912 (22), 
Length of domains: 46529
Time: pickout 0.0664    decision 0.7008    set_bounds 0.3810    solve 1.2296    add 0.0267    
Accumulated time: pickout 0.8776    decision 5.3971    set_bounds 5.6458    solve 19.5195    add 1.0890    
Current (lb-rhs): -0.14350414276123047
101673 domains visited
Cumulative time: 38.81975030899048

BaB round 24
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1169] [/input-8, 1662] [/input-8, 1516] [/input-8, 1611] [/input, 889] [/input-8, 747] [/input-8, 1610] [/input-8, 1611] [/input-8, 1662] [/input-8, 1516] 
cut re-enabled after branching node selection
0 lb beta sum: 1.769421100616455, worst -0.14007830619812012
10 lb beta sum: 1.7696008682250977, worst -0.14007538557052612
Time: prepare 0.3992    bound 0.6826    transfer 0.0476    finalize 0.5749    func 1.7596    
Accumulated time: func 20.9073    prepare 5.8710    bound 11.8114    transfer 0.6608    finalize 1.2678    
all_split False
======================Cut inference begins======================
max lb tensor(0.20411873) min lb tensor(-0.14006299)
Number of Verified Splits: 706 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.4162132740020752 
BICCOS Cumulative time: 6.197517395019531
Preprocessing time: 0.2676432132720947 Inference time: 0.1289224624633789 Add cuts time: 0.019088029861450195 Cut analysis time: 0.0005595684051513672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14350 (22), -0.14227 (21), -0.14225 (22), -0.14214 (22), -0.14138 (22), -0.14125 (22), -0.14091 (21), -0.14087 (22), -0.14007 (22), -0.14006 (22), -0.13993 (22), -0.13984 (21), -0.13976 (22), -0.13969 (22), -0.13935 (21), -0.13933 (22), -0.13921 (22), -0.13916 (22), -0.13912 (22), -0.13912 (22), 
Length of domains: 49919
Time: pickout 0.0657    decision 0.2357    set_bounds 0.3810    solve 1.7617    add 0.0273    
Accumulated time: pickout 0.9433    decision 5.6328    set_bounds 6.0268    solve 21.2812    add 1.1163    
Current (lb-rhs): -0.14350414276123047
109159 domains visited
Cumulative time: 41.73299980163574

BaB round 25
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 748] [/input-8, 1661] [/input-8, 1618] [/input-8, 748] [/input-8, 1661] [/input-8, 1169] [/input-8, 748] [/input-8, 1169] [/input-8, 748] [/input-8, 748] 
cut re-enabled after branching node selection
0 lb beta sum: 1.751560926437378, worst -0.14042162895202637
10 lb beta sum: 1.751640796661377, worst -0.14041626453399658
Time: prepare 0.3998    bound 0.6817    transfer 0.0483    finalize 0.0514    func 1.2358    
Accumulated time: func 22.1432    prepare 6.2711    bound 12.4931    transfer 0.7091    finalize 1.3192    
all_split False
======================Cut inference begins======================
max lb tensor(0.20183384) min lb tensor(-0.14039934)
Number of Verified Splits: 727 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.4255702495574951 
BICCOS Cumulative time: 6.623087644577026
Preprocessing time: 0.2681255340576172 Inference time: 0.13392972946166992 Add cuts time: 0.0229337215423584 Cut analysis time: 0.0005812644958496094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14350 (22), -0.14225 (22), -0.14214 (22), -0.14138 (22), -0.14125 (22), -0.14087 (22), -0.14040 (22), -0.14007 (22), -0.14006 (22), -0.13993 (22), -0.13984 (21), -0.13976 (22), -0.13969 (22), -0.13935 (21), -0.13933 (22), -0.13921 (22), -0.13916 (22), -0.13912 (22), -0.13912 (22), -0.13905 (22), 
Length of domains: 53288
Time: pickout 0.0654    decision 0.2360    set_bounds 0.3796    solve 1.2377    add 0.0268    
Accumulated time: pickout 1.0087    decision 5.8688    set_bounds 6.4064    solve 22.5189    add 1.1431    
Current (lb-rhs): -0.14350414276123047
116624 domains visited
Cumulative time: 44.12796473503113

BaB round 26
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 404] [/input, 3221] [/input-8, 1662] [/input-8, 497] [/input-8, 1662] [/input-8, 1662] [/input-8, 1662] [/input-8, 1662] [/input-8, 747] [/input, 3221] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7022398710250854, worst -0.13528937101364136
10 lb beta sum: 1.7022998332977295, worst -0.13522768020629883
Time: prepare 0.4043    bound 0.6835    transfer 0.0425    finalize 0.0513    func 1.2361    
Accumulated time: func 23.3793    prepare 6.6756    bound 13.1765    transfer 0.7516    finalize 1.3705    
all_split False
======================Cut inference begins======================
max lb tensor(0.21346885) min lb tensor(-0.13515741)
Number of Verified Splits: 847 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.4607532024383545 
BICCOS Cumulative time: 7.083840847015381
Preprocessing time: 0.27349019050598145 Inference time: 0.16122794151306152 Add cuts time: 0.024996280670166016 Cut analysis time: 0.0010387897491455078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14350 (22), -0.14225 (22), -0.14214 (22), -0.14138 (22), -0.14125 (22), -0.14087 (22), -0.14040 (22), -0.14007 (22), -0.14006 (22), -0.13993 (22), -0.13984 (21), -0.13976 (22), -0.13969 (22), -0.13935 (21), -0.13933 (22), -0.13921 (22), -0.13916 (22), -0.13912 (22), -0.13912 (22), -0.13905 (22), 
Length of domains: 56537
Time: pickout 0.0660    decision 0.2347    set_bounds 0.9100    solve 1.2380    add 0.0274    
Accumulated time: pickout 1.0746    decision 6.1035    set_bounds 7.3164    solve 23.7569    add 1.1705    
Current (lb-rhs): -0.14350414276123047
123969 domains visited
Cumulative time: 47.09362459182739

BaB round 27
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1169] [/input-8, 747] [/input-8, 1661] [/input-8, 747] [/input-8, 1169] [/input, 3549] [/input-8, 1661] [/input-8, 1516] [/input-8, 1169] [/input-8, 1169] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7152302265167236, worst -0.13856232166290283
10 lb beta sum: 1.7152900695800781, worst -0.13868248462677002
Time: prepare 0.4010    bound 0.6825    transfer 0.0430    finalize 0.0533    func 1.2351    
Accumulated time: func 24.6144    prepare 7.0769    bound 13.8590    transfer 0.7946    finalize 1.4238    
all_split False
======================Cut inference begins======================
max lb tensor(0.17535496) min lb tensor(-0.13854659)
Number of Verified Splits: 757 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.43869805335998535 
BICCOS Cumulative time: 7.522538900375366
Preprocessing time: 0.2713780403137207 Inference time: 0.14111900329589844 Add cuts time: 0.025641918182373047 Cut analysis time: 0.0005590915679931641
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14350 (22), -0.14225 (22), -0.14214 (22), -0.14138 (22), -0.14125 (22), -0.14087 (22), -0.14040 (22), -0.14007 (22), -0.14006 (22), -0.13993 (22), -0.13976 (22), -0.13969 (22), -0.13935 (21), -0.13933 (22), -0.13921 (22), -0.13916 (22), -0.13912 (22), -0.13912 (22), -0.13905 (22), -0.13899 (22), 
Length of domains: 59876
Time: pickout 0.0669    decision 0.2286    set_bounds 0.3785    solve 1.2374    add 0.0283    
Accumulated time: pickout 1.1416    decision 6.3321    set_bounds 7.6949    solve 24.9943    add 1.1988    
Current (lb-rhs): -0.14350414276123047
131404 domains visited
Cumulative time: 49.49771499633789

BaB round 28
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 498] [/input-8, 498] [/input-8, 1134] [/input, 3549] [/input, 3221] [/input-8, 404] [/input, 3549] [/input, 3549] [/input-8, 1322] [/input, 3221] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7292170524597168, worst -0.13985222578048706
10 lb beta sum: 1.7293567657470703, worst -0.13983094692230225
Time: prepare 0.4059    bound 0.6829    transfer 0.0621    finalize 0.0530    func 1.2582    
Accumulated time: func 25.8726    prepare 7.4831    bound 14.5419    transfer 0.8568    finalize 1.4768    
all_split False
======================Cut inference begins======================
max lb tensor(0.21069068) min lb tensor(-0.13979638)
Number of Verified Splits: 640 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.4159054756164551 
BICCOS Cumulative time: 7.938444375991821
Preprocessing time: 0.269162654876709 Inference time: 0.12262439727783203 Add cuts time: 0.023569822311401367 Cut analysis time: 0.0005486011505126953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14350 (22), -0.14214 (22), -0.14138 (22), -0.14125 (22), -0.14040 (22), -0.14007 (22), -0.14006 (22), -0.13993 (22), -0.13980 (23), -0.13976 (22), -0.13969 (22), -0.13933 (22), -0.13921 (22), -0.13916 (22), -0.13912 (22), -0.13912 (22), -0.13905 (22), -0.13899 (22), -0.13869 (22), -0.13865 (22), 
Length of domains: 63332
Time: pickout 0.0670    decision 0.8168    set_bounds 0.3725    solve 1.2599    add 0.0367    
Accumulated time: pickout 1.2086    decision 7.1489    set_bounds 8.0675    solve 26.2542    add 1.2355    
Current (lb-rhs): -0.14350414276123047
138956 domains visited
Cumulative time: 52.49207329750061

BaB round 29
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 747] [/input-8, 1174] [/input-8, 1661] [/input, 2938] [/input-8, 1174] [/input-8, 1661] [/input-8, 1618] [/input-8, 1169] [/input-8, 1174] [/input-8, 1661] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7219460010528564, worst -0.1384766399860382
10 lb beta sum: 1.7220258712768555, worst -0.1384834349155426
Time: prepare 0.4033    bound 0.6818    transfer 0.0434    finalize 0.0614    func 1.2442    
Accumulated time: func 27.1167    prepare 7.8866    bound 15.2236    transfer 0.9002    finalize 1.5382    
all_split False
======================Cut inference begins======================
max lb tensor(0.20975959) min lb tensor(-0.13845971)
Number of Verified Splits: 606 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 1.0577709674835205 
BICCOS Cumulative time: 8.996215343475342
Preprocessing time: 0.27250099182128906 Inference time: 0.7614035606384277 Add cuts time: 0.023345947265625 Cut analysis time: 0.0005204677581787109
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14350 (22), -0.14214 (22), -0.14138 (22), -0.14125 (22), -0.14040 (22), -0.14006 (22), -0.13993 (22), -0.13980 (23), -0.13976 (22), -0.13969 (22), -0.13933 (22), -0.13921 (22), -0.13916 (22), -0.13912 (22), -0.13912 (22), -0.13905 (22), -0.13899 (22), -0.13869 (22), -0.13865 (22), -0.13860 (22), 
Length of domains: 66822
Time: pickout 0.0695    decision 0.2335    set_bounds 0.3843    solve 1.2465    add 0.1693    
Accumulated time: pickout 1.2781    decision 7.3824    set_bounds 8.4518    solve 27.5007    add 1.4048    
Current (lb-rhs): -0.14350414276123047
146542 domains visited
Cumulative time: 55.67813682556152

BaB round 30
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1661] [/input-8, 1618] [/input-8, 1661] [/input-8, 1661] [/input, 3549] [/input-8, 1661] [/input-8, 1169] [/input, 3549] [/input-8, 1661] [/input, 889] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7214713096618652, worst -0.1377640962600708
10 lb beta sum: 1.7215112447738647, worst -0.1378309726715088
Time: prepare 0.4051    bound 0.6820    transfer 0.0435    finalize 0.0513    func 1.2370    
Accumulated time: func 28.3537    prepare 8.2921    bound 15.9056    transfer 0.9437    finalize 1.5895    
all_split False
======================Cut inference begins======================
max lb tensor(0.19316983) min lb tensor(-0.13775647)
Number of Verified Splits: 750 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.4328951835632324 
BICCOS Cumulative time: 9.429110527038574
Preprocessing time: 0.2694368362426758 Inference time: 0.14129972457885742 Add cuts time: 0.02163982391357422 Cut analysis time: 0.000518798828125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14350 (22), -0.14214 (22), -0.14138 (22), -0.14125 (22), -0.14040 (22), -0.14006 (22), -0.13993 (22), -0.13980 (23), -0.13976 (22), -0.13969 (22), -0.13933 (22), -0.13921 (22), -0.13912 (22), -0.13912 (22), -0.13905 (22), -0.13899 (22), -0.13865 (22), -0.13860 (22), -0.13855 (22), -0.13846 (23), 
Length of domains: 70168
Time: pickout 0.0661    decision 0.2316    set_bounds 0.3720    solve 1.2388    add 0.0270    
Accumulated time: pickout 1.3442    decision 7.6140    set_bounds 8.8238    solve 28.7394    add 1.4318    
Current (lb-rhs): -0.14350414276123047
153984 domains visited
Cumulative time: 58.07335591316223

BaB round 31
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1661] [/input-8, 1661] [/input-8, 1661] [/input, 3221] [/input-8, 1661] [/input-8, 1618] [/input-8, 1662] [/input-8, 1169] [/input, 2938] [/input-8, 1661] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7360708713531494, worst -0.13632741570472717
10 lb beta sum: 1.7361106872558594, worst -0.1363355815410614
Time: prepare 0.4045    bound 0.6819    transfer 0.0595    finalize 0.0526    func 1.2527    
Accumulated time: func 29.6063    prepare 8.6968    bound 16.5875    transfer 1.0032    finalize 1.6421    
all_split False
======================Cut inference begins======================
max lb tensor(0.01352286) min lb tensor(-0.13629177)
Number of Verified Splits: 615 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.40510010719299316 
BICCOS Cumulative time: 9.834210634231567
Preprocessing time: 0.2682380676269531 Inference time: 0.11531639099121094 Add cuts time: 0.02103590965270996 Cut analysis time: 0.0005097389221191406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14350 (22), -0.14214 (22), -0.14138 (22), -0.14125 (22), -0.14040 (22), -0.14006 (22), -0.13993 (22), -0.13980 (23), -0.13976 (22), -0.13969 (22), -0.13933 (22), -0.13921 (22), -0.13912 (22), -0.13912 (22), -0.13905 (22), -0.13899 (22), -0.13865 (22), -0.13855 (22), -0.13846 (23), -0.13843 (23), 
Length of domains: 73649
Time: pickout 0.0669    decision 0.2311    set_bounds 0.3755    solve 1.2547    add 0.0277    
Accumulated time: pickout 1.4111    decision 7.8451    set_bounds 9.1993    solve 29.9941    add 1.4594    
Current (lb-rhs): -0.14350414276123047
161561 domains visited
Cumulative time: 60.45947766304016

BaB round 32
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1174] [/input-8, 748] [/input-8, 748] [/input-8, 747] [/input-8, 1174] [/input-8, 1661] [/input-8, 1618] [/input-8, 747] [/input-8, 1661] [/input-8, 1661] 
cut re-enabled after branching node selection
0 lb beta sum: 1.745188593864441, worst -0.1370510756969452
10 lb beta sum: 1.7453083992004395, worst -0.1371273398399353
Time: prepare 0.4085    bound 0.6822    transfer 0.0438    finalize 0.0536    func 1.2437    
Accumulated time: func 30.8500    prepare 9.1056    bound 17.2697    transfer 1.0470    finalize 1.6957    
all_split False
======================Cut inference begins======================
max lb tensor(0.21021330) min lb tensor(-0.13701880)
Number of Verified Splits: 796 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.44289398193359375 
BICCOS Cumulative time: 10.277104616165161
Preprocessing time: 0.27057385444641113 Inference time: 0.14963793754577637 Add cuts time: 0.022174358367919922 Cut analysis time: 0.0005078315734863281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14350 (22), -0.14214 (22), -0.14138 (22), -0.14125 (22), -0.14040 (22), -0.14006 (22), -0.13993 (22), -0.13980 (23), -0.13976 (22), -0.13969 (22), -0.13921 (22), -0.13912 (22), -0.13912 (22), -0.13905 (22), -0.13899 (22), -0.13865 (22), -0.13855 (22), -0.13846 (23), -0.13843 (23), -0.13823 (22), 
Length of domains: 76949
Time: pickout 0.0668    decision 0.9469    set_bounds 0.3762    solve 1.2457    add 0.0289    
Accumulated time: pickout 1.4779    decision 8.7920    set_bounds 9.5755    solve 31.2398    add 1.4883    
Current (lb-rhs): -0.14350414276123047
168957 domains visited
Cumulative time: 63.596599102020264

BaB round 33
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 404] [/input-8, 747] [/input-8, 1174] [/input-8, 1169] [/input-8, 1661] [/input-8, 1618] [/input-8, 1661] [/input-8, 1661] [/input-8, 1610] [/input-8, 1169] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7791216373443604, worst -0.13741710782051086
10 lb beta sum: 1.7791814804077148, worst -0.1374744474887848
Time: prepare 0.4038    bound 0.6823    transfer 0.0433    finalize 0.0539    func 1.2380    
Accumulated time: func 32.0880    prepare 9.5097    bound 17.9520    transfer 1.0904    finalize 1.7496    
all_split False
======================Cut inference begins======================
max lb tensor(0.16746247) min lb tensor(-0.13741335)
Number of Verified Splits: 729 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.4322967529296875 
BICCOS Cumulative time: 10.709401369094849
Preprocessing time: 0.2675602436065674 Inference time: 0.13898634910583496 Add cuts time: 0.02523064613342285 Cut analysis time: 0.0005195140838623047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14350 (22), -0.14214 (22), -0.14138 (22), -0.14125 (22), -0.14040 (22), -0.14006 (22), -0.13993 (22), -0.13980 (23), -0.13976 (22), -0.13912 (22), -0.13912 (22), -0.13905 (22), -0.13899 (22), -0.13865 (22), -0.13855 (22), -0.13846 (23), -0.13843 (23), -0.13823 (22), -0.13776 (23), -0.13775 (22), 
Length of domains: 80316
Time: pickout 0.0686    decision 0.2330    set_bounds 0.3866    solve 1.2403    add 0.0285    
Accumulated time: pickout 1.5465    decision 9.0250    set_bounds 9.9621    solve 32.4801    add 1.5168    
Current (lb-rhs): -0.14350414276123047
176420 domains visited
Cumulative time: 66.01469683647156

BaB round 34
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1661] [/input-8, 498] [/input-8, 747] [/input-8, 1661] [/input-8, 1516] [/input-8, 747] [/input, 3221] [/input, 3221] [/input, 2938] [/input-8, 747] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7797845602035522, worst -0.14110541343688965
10 lb beta sum: 1.7798644304275513, worst -0.14109861850738525
Time: prepare 0.4038    bound 0.6821    transfer 0.0645    finalize 0.0607    func 1.2662    
Accumulated time: func 33.3542    prepare 9.9139    bound 18.6340    transfer 1.1549    finalize 1.8103    
all_split False
======================Cut inference begins======================
max lb tensor(0.17438471) min lb tensor(-0.14109272)
Number of Verified Splits: 753 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.4440770149230957 
BICCOS Cumulative time: 11.153478384017944
Preprocessing time: 0.2740020751953125 Inference time: 0.14547181129455566 Add cuts time: 0.024051189422607422 Cut analysis time: 0.0005519390106201172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.14040 (22), -0.14006 (22), -0.13980 (23), -0.13976 (22), -0.13972 (23), -0.13905 (22), -0.13896 (23), -0.13855 (22), -0.13846 (23), -0.13843 (23), -0.13819 (23), -0.13776 (23), -0.13766 (22), -0.13754 (23), -0.13741 (23), -0.13732 (23), -0.13702 (23), -0.13702 (23), 
Length of domains: 83659
Time: pickout 0.0677    decision 0.9812    set_bounds 0.3794    solve 1.2682    add 0.0333    
Accumulated time: pickout 1.6142    decision 10.0062    set_bounds 10.3415    solve 33.7483    add 1.5501    
Current (lb-rhs): -0.1410927176475525
183859 domains visited
Cumulative time: 69.21847987174988

BaB round 35
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1662] [/input-8, 404] [/input-8, 1134] [/input-8, 404] [/input, 3221] [/input-8, 1661] [/input-8, 1618] [/input-8, 1322] [/input-8, 1661] [/input-8, 748] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7948956489562988, worst -0.13417860865592957
10 lb beta sum: 1.7949955463409424, worst -0.1341930329799652
Time: prepare 0.4085    bound 0.6835    transfer 0.0500    finalize 0.0535    func 1.2502    
Accumulated time: func 34.6044    prepare 10.3227    bound 19.3176    transfer 1.2049    finalize 1.8638    
all_split False
======================Cut inference begins======================
max lb tensor(0.20315540) min lb tensor(-0.13410482)
Number of Verified Splits: 692 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.42012906074523926 
BICCOS Cumulative time: 11.573607444763184
Preprocessing time: 0.2724936008453369 Inference time: 0.12497639656066895 Add cuts time: 0.021986007690429688 Cut analysis time: 0.0006730556488037109
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.14040 (22), -0.14006 (22), -0.13980 (23), -0.13976 (22), -0.13972 (23), -0.13905 (22), -0.13896 (23), -0.13855 (22), -0.13846 (23), -0.13843 (23), -0.13819 (23), -0.13776 (23), -0.13766 (22), -0.13754 (23), -0.13741 (23), -0.13732 (23), -0.13702 (23), -0.13702 (23), 
Length of domains: 87063
Time: pickout 0.0685    decision 0.2316    set_bounds 0.3749    solve 1.2524    add 0.0288    
Accumulated time: pickout 1.6826    decision 10.2377    set_bounds 10.7164    solve 35.0006    add 1.5789    
Current (lb-rhs): -0.1410927176475525
191359 domains visited
Cumulative time: 71.62346911430359

BaB round 36
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3221] [/input-8, 1134] [/input, 3221] [/input-8, 1169] [/input-8, 1134] [/input-8, 747] [/input, 3549] [/input, 3221] [/input, 3221] [/input, 3549] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7506434917449951, worst -0.13913917541503906
10 lb beta sum: 1.7507433891296387, worst -0.1391376256942749
Time: prepare 1.2529    bound 0.6838    transfer 0.0423    finalize 0.0526    func 2.0871    
Accumulated time: func 36.6916    prepare 11.5758    bound 20.0014    transfer 1.2472    finalize 1.9164    
all_split False
======================Cut inference begins======================
max lb tensor(0.22329783) min lb tensor(-0.13913023)
Number of Verified Splits: 827 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.45923829078674316 
BICCOS Cumulative time: 12.032845735549927
Preprocessing time: 0.27607274055480957 Inference time: 0.1579122543334961 Add cuts time: 0.02473139762878418 Cut analysis time: 0.0005218982696533203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.14040 (22), -0.13980 (23), -0.13972 (23), -0.13913 (23), -0.13905 (22), -0.13896 (23), -0.13855 (22), -0.13846 (23), -0.13843 (23), -0.13819 (23), -0.13789 (23), -0.13776 (23), -0.13766 (22), -0.13754 (23), -0.13741 (23), -0.13732 (23), -0.13702 (23), -0.13702 (23), 
Length of domains: 90332
Time: pickout 0.0684    decision 0.2428    set_bounds 0.3817    solve 2.0895    add 0.0281    
Accumulated time: pickout 1.7511    decision 10.4805    set_bounds 11.0981    solve 37.0902    add 1.6070    
Current (lb-rhs): -0.1410927176475525
198724 domains visited
Cumulative time: 74.92218542098999

BaB round 37
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1324] [/input-8, 497] [/input-8, 1322] [/input-8, 475] [/input-8, 1265] [/input-8, 1662] [/input-8, 1662] [/input-8, 1324] [/input-8, 1662] [/input-8, 1324] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7058360576629639, worst -0.1379995346069336
10 lb beta sum: 1.7058360576629639, worst -0.1380864977836609
Time: prepare 0.4079    bound 0.6827    transfer 0.0433    finalize 0.0536    func 1.2419    
Accumulated time: func 37.9334    prepare 11.9840    bound 20.6841    transfer 1.2905    finalize 1.9700    
all_split False
======================Cut inference begins======================
max lb tensor(0.21633470) min lb tensor(-0.13798070)
Number of Verified Splits: 981 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.48696017265319824 
BICCOS Cumulative time: 12.519805908203125
Preprocessing time: 0.2692220211029053 Inference time: 0.1882014274597168 Add cuts time: 0.028982877731323242 Cut analysis time: 0.0005538463592529297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.13980 (23), -0.13972 (23), -0.13913 (23), -0.13896 (23), -0.13855 (22), -0.13846 (23), -0.13843 (23), -0.13819 (23), -0.13798 (23), -0.13789 (23), -0.13776 (23), -0.13766 (22), -0.13754 (23), -0.13741 (23), -0.13732 (23), -0.13702 (23), -0.13702 (23), -0.13693 (22), 
Length of domains: 93447
Time: pickout 0.0682    decision 0.2356    set_bounds 0.3809    solve 1.2435    add 0.0319    
Accumulated time: pickout 1.8192    decision 10.7161    set_bounds 11.4790    solve 38.3336    add 1.6389    
Current (lb-rhs): -0.1410927176475525
205935 domains visited
Cumulative time: 77.40207886695862

BaB round 38
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1661] [/input-8, 748] [/input-8, 1654] [/input-8, 1174] [/input-8, 1661] [/input-8, 1610] [/input-8, 1654] [/input-8, 1661] [/input-8, 1661] [/input-8, 747] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7370867729187012, worst -0.13480108976364136
10 lb beta sum: 1.7372066974639893, worst -0.13484251499176025
Time: prepare 0.4113    bound 0.6823    transfer 0.0438    finalize 0.0540    func 1.2455    
Accumulated time: func 39.1789    prepare 12.3956    bound 21.3664    transfer 1.3342    finalize 2.0240    
all_split False
======================Cut inference begins======================
max lb tensor(0.01797813) min lb tensor(-0.13476783)
Number of Verified Splits: 798 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.4515509605407715 
BICCOS Cumulative time: 12.971356868743896
Preprocessing time: 0.27659153938293457 Inference time: 0.14703869819641113 Add cuts time: 0.027363061904907227 Cut analysis time: 0.0005576610565185547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.13980 (23), -0.13972 (23), -0.13913 (23), -0.13896 (23), -0.13855 (22), -0.13846 (23), -0.13843 (23), -0.13819 (23), -0.13798 (23), -0.13789 (23), -0.13776 (23), -0.13766 (22), -0.13754 (23), -0.13741 (23), -0.13732 (23), -0.13702 (23), -0.13702 (23), -0.13693 (22), 
Length of domains: 96745
Time: pickout 0.0716    decision 0.2334    set_bounds 0.3834    solve 1.2475    add 0.0308    
Accumulated time: pickout 1.8909    decision 10.9494    set_bounds 11.8624    solve 39.5811    add 1.6698    
Current (lb-rhs): -0.1410927176475525
213329 domains visited
Cumulative time: 79.8508734703064

BaB round 39
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1324] [/input-8, 157] [/input-8, 1324] [/input, 3221] [/input-8, 1324] [/input-8, 1618] [/input-8, 1169] [/input-8, 1324] [/input-8, 1169] [/input-8, 1324] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6745251417160034, worst -0.13244754076004028
10 lb beta sum: 1.6746249198913574, worst -0.13239824771881104
Time: prepare 0.4079    bound 0.6830    transfer 0.0438    finalize 0.0537    func 1.2458    
Accumulated time: func 40.4247    prepare 12.8037    bound 22.0495    transfer 1.3781    finalize 2.0776    
all_split False
======================Cut inference begins======================
max lb tensor(0.20331573) min lb tensor(-0.13238299)
Number of Verified Splits: 1042 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.5146703720092773 
BICCOS Cumulative time: 13.486027240753174
Preprocessing time: 0.2813224792480469 Inference time: 0.1990067958831787 Add cuts time: 0.03381967544555664 Cut analysis time: 0.0005214214324951172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.13980 (23), -0.13972 (23), -0.13913 (23), -0.13896 (23), -0.13855 (22), -0.13846 (23), -0.13843 (23), -0.13819 (23), -0.13798 (23), -0.13789 (23), -0.13776 (23), -0.13766 (22), -0.13754 (23), -0.13741 (23), -0.13732 (23), -0.13702 (23), -0.13702 (23), -0.13693 (22), 
Length of domains: 99799
Time: pickout 0.0698    decision 1.1190    set_bounds 0.4041    solve 1.2478    add 0.0344    
Accumulated time: pickout 1.9607    decision 12.0685    set_bounds 12.2665    solve 40.8289    add 1.7041    
Current (lb-rhs): -0.1410927176475525
220479 domains visited
Cumulative time: 83.27579736709595

BaB round 40
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1324] [/input-8, 1618] [/input-8, 1611] [/input-8, 1324] [/input-8, 1661] [/input-8, 1169] [/input-8, 1324] [/input-8, 1661] [/input, 3221] [/input, 3221] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6891725063323975, worst -0.1306976079940796
10 lb beta sum: 1.6892125606536865, worst -0.13071542978286743
Time: prepare 0.4051    bound 0.6827    transfer 0.0588    finalize 0.0609    func 1.2631    
Accumulated time: func 41.6878    prepare 13.2091    bound 22.7322    transfer 1.4369    finalize 2.1386    
all_split False
======================Cut inference begins======================
max lb tensor(0.19306475) min lb tensor(-0.13068926)
Number of Verified Splits: 890 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.4771091938018799 
BICCOS Cumulative time: 13.963136434555054
Preprocessing time: 0.2740366458892822 Inference time: 0.1684885025024414 Add cuts time: 0.03407692909240723 Cut analysis time: 0.0005071163177490234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.13980 (23), -0.13972 (23), -0.13913 (23), -0.13896 (23), -0.13855 (22), -0.13846 (23), -0.13843 (23), -0.13819 (23), -0.13798 (23), -0.13789 (23), -0.13776 (23), -0.13766 (22), -0.13754 (23), -0.13741 (23), -0.13732 (23), -0.13702 (23), -0.13702 (23), -0.13693 (22), 
Length of domains: 103005
Time: pickout 0.0743    decision 0.2351    set_bounds 0.4006    solve 1.2652    add 0.0320    
Accumulated time: pickout 2.0349    decision 12.3036    set_bounds 12.6671    solve 42.0941    add 1.7361    
Current (lb-rhs): -0.1410927176475525
227781 domains visited
Cumulative time: 85.7924313545227

BaB round 41
Cut Inference reaches max iterations. Recover the setting
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1661] [/input-8, 1169] [/input-8, 1169] [/input-8, 476] [/input-8, 476] [/input-8, 497] [/input-8, 497] [/input-8, 1662] [/input-8, 497] [/input-8, 1324] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6903332471847534, worst -0.13695788383483887
10 lb beta sum: 1.6904330253601074, worst -0.13701027631759644
Time: prepare 0.4057    bound 0.6830    transfer 0.0422    finalize 0.0547    func 2.2073    
Accumulated time: func 43.8951    prepare 13.6150    bound 23.4152    transfer 1.4791    finalize 2.1933    
all_split False
======================Cut inference begins======================
max lb tensor(0.16895965) min lb tensor(-0.13695586)
Number of Verified Splits: 862 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0005590915679931641 
BICCOS Cumulative time: 13.963695526123047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.13980 (23), -0.13972 (23), -0.13913 (23), -0.13896 (23), -0.13846 (23), -0.13843 (23), -0.13819 (23), -0.13798 (23), -0.13789 (23), -0.13776 (23), -0.13754 (23), -0.13741 (23), -0.13732 (23), -0.13702 (23), -0.13702 (23), -0.13696 (23), -0.13693 (22), -0.13693 (23), 
Length of domains: 106239
Time: pickout 0.0705    decision 0.2373    set_bounds 0.3957    solve 2.2093    add 0.0297    
Accumulated time: pickout 2.1054    decision 12.5409    set_bounds 13.0628    solve 44.3035    add 1.7657    
Current (lb-rhs): -0.1410927176475525
235111 domains visited
Cumulative time: 88.76625967025757

BaB round 42
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2938] [/input-8, 1169] [/input-8, 1662] [/input, 3221] [/input-8, 1662] [/input, 3221] [/input, 3221] [/input-8, 1662] [/input, 2938] [/input, 3221] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6858856678009033, worst -0.1360015571117401
10 lb beta sum: 1.6859654188156128, worst -0.13600268959999084
Time: prepare 0.4154    bound 0.6827    transfer 0.0423    finalize 0.0524    func 1.2473    
Accumulated time: func 45.1424    prepare 14.0307    bound 24.0978    transfer 1.5214    finalize 2.2457    
all_split False
======================Cut inference begins======================
max lb tensor(0.21231365) min lb tensor(-0.13598207)
Number of Verified Splits: 947 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0006251335144042969 
BICCOS Cumulative time: 13.964320659637451
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.13980 (23), -0.13972 (23), -0.13913 (23), -0.13896 (23), -0.13846 (23), -0.13843 (23), -0.13819 (23), -0.13798 (23), -0.13789 (23), -0.13776 (23), -0.13754 (23), -0.13741 (23), -0.13732 (23), -0.13702 (23), -0.13702 (23), -0.13696 (23), -0.13693 (22), -0.13682 (23), 
Length of domains: 109388
Time: pickout 0.0693    decision 0.2305    set_bounds 0.3783    solve 1.2496    add 0.0480    
Accumulated time: pickout 2.1748    decision 12.7714    set_bounds 13.4411    solve 45.5530    add 1.8138    
Current (lb-rhs): -0.1410927176475525
242356 domains visited
Cumulative time: 90.77356290817261

BaB round 43
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 748] [/input-8, 1324] [/input-8, 1169] [/input, 3221] [/input-8, 1169] [/input-8, 1169] [/input, 3221] [/input-8, 1324] [/input-8, 747] [/input-8, 1662] 
cut re-enabled after branching node selection
0 lb beta sum: 1.715710163116455, worst -0.13650548458099365
10 lb beta sum: 1.7157700061798096, worst -0.13652008771896362
Time: prepare 0.4149    bound 0.6816    transfer 0.0417    finalize 0.0539    func 1.2466    
Accumulated time: func 46.3889    prepare 14.4458    bound 24.7795    transfer 1.5631    finalize 2.2996    
all_split False
======================Cut inference begins======================
max lb tensor(0.20968783) min lb tensor(-0.13647950)
Number of Verified Splits: 755 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.000446319580078125 
BICCOS Cumulative time: 13.96476697921753
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.13972 (23), -0.13913 (23), -0.13896 (23), -0.13846 (23), -0.13819 (23), -0.13798 (23), -0.13789 (23), -0.13776 (23), -0.13754 (23), -0.13741 (23), -0.13732 (23), -0.13702 (23), -0.13702 (23), -0.13696 (23), -0.13682 (23), -0.13670 (23), -0.13670 (23), -0.13670 (23), 
Length of domains: 112729
Time: pickout 0.0683    decision 0.2307    set_bounds 0.3700    solve 1.2482    add 0.0316    
Accumulated time: pickout 2.2430    decision 13.0021    set_bounds 13.8111    solve 46.8012    add 1.8454    
Current (lb-rhs): -0.1410927176475525
249793 domains visited
Cumulative time: 92.75189161300659

BaB round 44
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1324] [/input-8, 1661] [/input-8, 1662] [/input-8, 1169] [/input, 3221] [/input-8, 1169] [/input-8, 1661] [/input-8, 1174] [/input-8, 1654] [/input-8, 1169] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7116416692733765, worst -0.13437584042549133
10 lb beta sum: 1.7116416692733765, worst -0.13437417149543762
Time: prepare 0.4091    bound 0.6815    transfer 0.0423    finalize 0.0555    func 1.2434    
Accumulated time: func 47.6323    prepare 14.8552    bound 25.4610    transfer 1.6054    finalize 2.3551    
all_split False
======================Cut inference begins======================
max lb tensor(0.20570624) min lb tensor(-0.13433388)
Number of Verified Splits: 795 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.000469207763671875 
BICCOS Cumulative time: 13.965236186981201
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.13972 (23), -0.13913 (23), -0.13896 (23), -0.13846 (23), -0.13819 (23), -0.13798 (23), -0.13789 (23), -0.13776 (23), -0.13754 (23), -0.13741 (23), -0.13732 (23), -0.13702 (23), -0.13702 (23), -0.13696 (23), -0.13682 (23), -0.13670 (23), -0.13670 (23), -0.13670 (23), 
Length of domains: 116030
Time: pickout 0.0684    decision 0.2283    set_bounds 0.3711    solve 1.2454    add 0.0299    
Accumulated time: pickout 2.3115    decision 13.2304    set_bounds 14.1822    solve 48.0466    add 1.8753    
Current (lb-rhs): -0.1410927176475525
257190 domains visited
Cumulative time: 94.72593927383423

BaB round 45
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3221] [/input, 3221] [/input, 3221] [/input-8, 1169] [/input, 3221] [/input-8, 1169] [/input, 3221] [/input-8, 1169] [/input, 3221] [/input-8, 747] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7191450595855713, worst -0.13753274083137512
10 lb beta sum: 1.7191450595855713, worst -0.1375574767589569
Time: prepare 0.4133    bound 0.6830    transfer 0.0475    finalize 0.0548    func 1.2555    
Accumulated time: func 48.8878    prepare 15.2687    bound 26.1440    transfer 1.6529    finalize 2.4099    
all_split False
======================Cut inference begins======================
max lb tensor(0.22077519) min lb tensor(-0.13751891)
Number of Verified Splits: 806 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0006856918334960938 
BICCOS Cumulative time: 13.965921878814697
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.13972 (23), -0.13913 (23), -0.13896 (23), -0.13819 (23), -0.13798 (23), -0.13789 (23), -0.13776 (23), -0.13754 (23), -0.13752 (24), -0.13741 (23), -0.13732 (23), -0.13702 (23), -0.13702 (23), -0.13696 (23), -0.13682 (23), -0.13670 (23), -0.13670 (23), -0.13670 (23), 
Length of domains: 119320
Time: pickout 0.0702    decision 0.2302    set_bounds 0.3750    solve 2.2977    add 0.0442    
Accumulated time: pickout 2.3817    decision 13.4606    set_bounds 14.5572    solve 50.3444    add 1.9195    
Current (lb-rhs): -0.1410927176475525
264576 domains visited
Cumulative time: 97.78025555610657

BaB round 46
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1661] [/input-8, 1549] [/input-8, 1324] [/input-8, 1618] [/input, 3221] [/input, 3221] [/input-8, 1549] [/input-8, 1661] [/input, 3221] [/input, 3221] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7084777355194092, worst -0.13108837604522705
10 lb beta sum: 1.7085176706314087, worst -0.13106441497802734
Time: prepare 0.4197    bound 0.6831    transfer 0.0411    finalize 0.0540    func 1.2529    
Accumulated time: func 50.1407    prepare 15.6887    bound 26.8272    transfer 1.6940    finalize 2.4639    
all_split False
======================Cut inference begins======================
max lb tensor(0.22996473) min lb tensor(-0.13104677)
Number of Verified Splits: 812 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0005166530609130859 
BICCOS Cumulative time: 13.96643853187561
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.13972 (23), -0.13913 (23), -0.13896 (23), -0.13819 (23), -0.13798 (23), -0.13789 (23), -0.13776 (23), -0.13754 (23), -0.13752 (24), -0.13741 (23), -0.13732 (23), -0.13702 (23), -0.13702 (23), -0.13696 (23), -0.13682 (23), -0.13670 (23), -0.13670 (23), -0.13670 (23), 
Length of domains: 122604
Time: pickout 0.0699    decision 0.2324    set_bounds 0.3762    solve 1.2549    add 0.0347    
Accumulated time: pickout 2.4516    decision 13.6929    set_bounds 14.9334    solve 51.5992    add 1.9543    
Current (lb-rhs): -0.1410927176475525
271956 domains visited
Cumulative time: 99.78203558921814

BaB round 47
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1324] [/input-8, 1169] [/input-8, 1324] [/input-8, 157] [/input-8, 1324] [/input, 3288] [/input-8, 1324] [/input, 889] [/input-8, 1324] [/input-8, 1661] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6955089569091797, worst -0.13410985469818115
10 lb beta sum: 1.6955089569091797, worst -0.13410252332687378
Time: prepare 0.4096    bound 0.6825    transfer 0.0582    finalize 0.0542    func 1.2593    
Accumulated time: func 51.4000    prepare 16.0986    bound 27.5097    transfer 1.7522    finalize 2.5180    
all_split False
======================Cut inference begins======================
max lb tensor(0.21161765) min lb tensor(-0.13407129)
Number of Verified Splits: 823 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0004649162292480469 
BICCOS Cumulative time: 13.966903448104858
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.13972 (23), -0.13913 (23), -0.13896 (23), -0.13819 (23), -0.13798 (23), -0.13789 (23), -0.13754 (23), -0.13752 (24), -0.13741 (23), -0.13732 (23), -0.13702 (23), -0.13702 (23), -0.13696 (23), -0.13682 (23), -0.13670 (23), -0.13670 (23), -0.13660 (23), -0.13648 (24), 
Length of domains: 125877
Time: pickout 0.0736    decision 0.2337    set_bounds 0.3766    solve 1.2614    add 0.0368    
Accumulated time: pickout 2.5251    decision 13.9266    set_bounds 15.3100    solve 52.8606    add 1.9911    
Current (lb-rhs): -0.1410927176475525
279325 domains visited
Cumulative time: 101.7967574596405

BaB round 48
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 748] [/input, 3221] [/input-8, 1169] [/input, 889] [/input, 889] [/input, 3549] [/input, 3549] [/input, 3549] [/input-8, 1169] [/input, 889] 
cut re-enabled after branching node selection
0 lb beta sum: 1.709756851196289, worst -0.13221219182014465
10 lb beta sum: 1.7097967863082886, worst -0.1323186457157135
Time: prepare 0.4156    bound 0.6822    transfer 0.0685    finalize 0.0554    func 1.2772    
Accumulated time: func 52.6772    prepare 16.5144    bound 28.1918    transfer 1.8207    finalize 2.5735    
all_split False
======================Cut inference begins======================
max lb tensor(0.19233835) min lb tensor(-0.13218895)
Number of Verified Splits: 896 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0005164146423339844 
BICCOS Cumulative time: 13.967419862747192
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.13972 (23), -0.13913 (23), -0.13896 (23), -0.13819 (23), -0.13798 (23), -0.13789 (23), -0.13754 (23), -0.13752 (24), -0.13741 (23), -0.13732 (23), -0.13702 (23), -0.13702 (23), -0.13696 (23), -0.13682 (23), -0.13670 (23), -0.13670 (23), -0.13660 (23), -0.13648 (24), 
Length of domains: 129077
Time: pickout 0.0713    decision 0.2351    set_bounds 0.3752    solve 1.2796    add 0.0301    
Accumulated time: pickout 2.5964    decision 14.1617    set_bounds 15.6852    solve 54.1402    add 2.0211    
Current (lb-rhs): -0.1410927176475525
286621 domains visited
Cumulative time: 103.82640051841736

BaB round 49
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1322] [/input-8, 1661] [/input-8, 1169] [/input-8, 1169] [/input-8, 747] [/input-8, 1169] [/input-8, 1169] [/input, 3221] [/input-8, 1169] [/input-8, 747] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7255487442016602, worst -0.1332719326019287
10 lb beta sum: 1.7255487442016602, worst -0.13335227966308594
Time: prepare 0.4175    bound 0.6833    transfer 0.0691    finalize 0.0549    func 1.2798    
Accumulated time: func 53.9570    prepare 16.9322    bound 28.8751    transfer 1.8897    finalize 2.6284    
all_split False
======================Cut inference begins======================
max lb tensor(0.20429957) min lb tensor(-0.13324398)
Number of Verified Splits: 759 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0005981922149658203 
BICCOS Cumulative time: 13.968018054962158
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.13972 (23), -0.13913 (23), -0.13896 (23), -0.13819 (23), -0.13798 (23), -0.13789 (23), -0.13754 (23), -0.13752 (24), -0.13741 (23), -0.13732 (23), -0.13702 (23), -0.13702 (23), -0.13696 (23), -0.13682 (23), -0.13670 (23), -0.13670 (23), -0.13660 (23), -0.13648 (24), 
Length of domains: 132414
Time: pickout 0.0718    decision 0.2329    set_bounds 0.3813    solve 1.2816    add 0.0570    
Accumulated time: pickout 2.6682    decision 14.3946    set_bounds 16.0665    solve 55.4218    add 2.0781    
Current (lb-rhs): -0.1410927176475525
294054 domains visited
Cumulative time: 105.88628625869751

BaB round 50
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2938] [/input, 3549] [/input-8, 1322] [/input, 3549] [/input-8, 1134] [/input, 3549] [/input-8, 1134] [/input-8, 1611] [/input-8, 1324] [/input-8, 1610] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7116175889968872, worst -0.13293734192848206
10 lb beta sum: 1.7116175889968872, worst -0.13303473591804504
Time: prepare 0.4173    bound 0.6820    transfer 0.0696    finalize 0.0512    func 1.2754    
Accumulated time: func 55.2323    prepare 17.3498    bound 29.5571    transfer 1.9593    finalize 2.6796    
all_split False
======================Cut inference begins======================
max lb tensor(0.20962632) min lb tensor(-0.13292947)
Number of Verified Splits: 1009 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0005130767822265625 
BICCOS Cumulative time: 13.968531131744385
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.13972 (23), -0.13913 (23), -0.13896 (23), -0.13819 (23), -0.13798 (23), -0.13789 (23), -0.13754 (23), -0.13752 (24), -0.13741 (23), -0.13732 (23), -0.13702 (23), -0.13702 (23), -0.13696 (23), -0.13682 (23), -0.13670 (23), -0.13670 (23), -0.13660 (23), -0.13648 (24), 
Length of domains: 135501
Time: pickout 0.0724    decision 0.2300    set_bounds 1.4888    solve 1.2776    add 0.0323    
Accumulated time: pickout 2.7406    decision 14.6245    set_bounds 17.5553    solve 56.6994    add 2.1104    
Current (lb-rhs): -0.1410927176475525
301237 domains visited
Cumulative time: 109.02558588981628

BaB round 51
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1174] [/input-8, 747] [/input-8, 1549] [/input-8, 404] [/input-8, 747] [/input-8, 1169] [/input-8, 747] [/input-8, 1169] [/input, 3221] [/input-8, 404] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7331817150115967, worst -0.1353667676448822
10 lb beta sum: 1.7332415580749512, worst -0.1353626549243927
Time: prepare 0.4134    bound 0.6814    transfer 0.0694    finalize 0.0527    func 1.2714    
Accumulated time: func 56.5037    prepare 17.7635    bound 30.2384    transfer 2.0287    finalize 2.7323    
all_split False
======================Cut inference begins======================
max lb tensor(0.19728160) min lb tensor(-0.13534030)
Number of Verified Splits: 827 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.00045299530029296875 
BICCOS Cumulative time: 13.968984127044678
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.13972 (23), -0.13913 (23), -0.13896 (23), -0.13819 (23), -0.13798 (23), -0.13789 (23), -0.13754 (23), -0.13752 (24), -0.13741 (23), -0.13696 (23), -0.13682 (23), -0.13670 (23), -0.13670 (23), -0.13660 (23), -0.13648 (24), -0.13640 (23), -0.13625 (23), -0.13599 (23), 
Length of domains: 138770
Time: pickout 0.0705    decision 0.2308    set_bounds 0.3757    solve 1.2730    add 0.0355    
Accumulated time: pickout 2.8110    decision 14.8554    set_bounds 17.9309    solve 57.9724    add 2.1459    
Current (lb-rhs): -0.1410927176475525
308602 domains visited
Cumulative time: 111.04608750343323

BaB round 52
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1661] [/input-8, 498] [/input-8, 1324] [/input-8, 1516] [/input-8, 748] [/input-8, 1134] [/input-8, 1324] [/input-8, 748] [/input-8, 1324] [/input-8, 1661] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7600855827331543, worst -0.13333627581596375
10 lb beta sum: 1.7601056098937988, worst -0.13340333104133606
Time: prepare 0.4085    bound 0.6819    transfer 0.0691    finalize 0.0548    func 1.2702    
Accumulated time: func 57.7739    prepare 18.1723    bound 30.9203    transfer 2.0977    finalize 2.7871    
all_split False
======================Cut inference begins======================
max lb tensor(0.20691741) min lb tensor(-0.13331214)
Number of Verified Splits: 821 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.000438690185546875 
BICCOS Cumulative time: 13.969422817230225
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.13972 (23), -0.13913 (23), -0.13896 (23), -0.13819 (23), -0.13798 (23), -0.13789 (23), -0.13754 (23), -0.13752 (24), -0.13741 (23), -0.13696 (23), -0.13682 (23), -0.13670 (23), -0.13670 (23), -0.13660 (23), -0.13648 (24), -0.13640 (23), -0.13625 (23), -0.13599 (23), 
Length of domains: 142045
Time: pickout 0.0703    decision 0.2291    set_bounds 0.3729    solve 1.2722    add 0.0346    
Accumulated time: pickout 2.8814    decision 15.0844    set_bounds 18.3039    solve 59.2445    add 2.1805    
Current (lb-rhs): -0.1410927176475525
315973 domains visited
Cumulative time: 113.06474924087524

BaB round 53
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3221] [/input-8, 1174] [/input-8, 1174] [/input, 3549] [/input, 3549] [/input-8, 1174] [/input, 3221] [/input, 3221] [/input-8, 748] [/input, 3549] 
cut re-enabled after branching node selection
0 lb beta sum: 1.752555251121521, worst -0.1349775493144989
10 lb beta sum: 1.752555251121521, worst -0.13503697514533997
Time: prepare 0.4117    bound 0.6826    transfer 0.0694    finalize 0.0571    func 1.2761    
Accumulated time: func 59.0500    prepare 18.5842    bound 31.6029    transfer 2.1672    finalize 2.8443    
all_split False
======================Cut inference begins======================
max lb tensor(0.21451163) min lb tensor(-0.13496497)
Number of Verified Splits: 851 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0004570484161376953 
BICCOS Cumulative time: 13.969879865646362
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14044 (23), -0.13972 (23), -0.13913 (23), -0.13896 (23), -0.13819 (23), -0.13798 (23), -0.13789 (23), -0.13752 (24), -0.13696 (23), -0.13682 (23), -0.13670 (23), -0.13670 (23), -0.13660 (23), -0.13648 (24), -0.13625 (23), -0.13599 (23), -0.13598 (24), -0.13581 (23), -0.13559 (23), 
Length of domains: 145290
Time: pickout 0.0728    decision 0.2322    set_bounds 0.3781    solve 1.2777    add 0.0352    
Accumulated time: pickout 2.9542    decision 15.3166    set_bounds 18.6819    solve 60.5222    add 2.2157    
Current (lb-rhs): -0.1410927176475525
323314 domains visited
Cumulative time: 115.09918284416199

BaB round 54
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 497] [/input-8, 1169] [/input, 3221] [/input-8, 476] [/input-8, 497] [/input-8, 497] [/input-8, 497] [/input-8, 497] [/input, 3221] [/input-8, 1662] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7502961158752441, worst -0.13779842853546143
10 lb beta sum: 1.7503561973571777, worst -0.13777685165405273
Time: prepare 0.4148    bound 0.6821    transfer 0.0695    finalize 1.2352    func 2.4569    
Accumulated time: func 61.5069    prepare 18.9992    bound 32.2851    transfer 2.2367    finalize 4.0795    
all_split False
======================Cut inference begins======================
max lb tensor(0.19179368) min lb tensor(-0.13776582)
Number of Verified Splits: 807 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0005166530609130859 
BICCOS Cumulative time: 13.970396518707275
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14044 (23), -0.13913 (23), -0.13896 (23), -0.13819 (23), -0.13798 (23), -0.13789 (23), -0.13777 (24), -0.13752 (24), -0.13696 (23), -0.13670 (23), -0.13660 (23), -0.13655 (24), -0.13648 (24), -0.13639 (24), -0.13599 (23), -0.13598 (24), -0.13559 (23), -0.13551 (24), -0.13549 (23), -0.13534 (24), 
Length of domains: 148579
Time: pickout 0.0742    decision 0.2351    set_bounds 0.3739    solve 2.4587    add 0.0407    
Accumulated time: pickout 3.0284    decision 15.5517    set_bounds 19.0558    solve 62.9809    add 2.2564    
Current (lb-rhs): -0.14044487476348877
330699 domains visited
Cumulative time: 118.31868195533752

BaB round 55
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 889] [/input-8, 1661] [/input-8, 1324] [/input-8, 157] [/input-8, 1661] [/input-8, 1174] [/input-8, 1324] [/input-8, 157] [/input-8, 1662] [/input-8, 748] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7702255249023438, worst -0.13675522804260254
10 lb beta sum: 1.7702255249023438, worst -0.1367207169532776
Time: prepare 0.4100    bound 0.6814    transfer 0.0695    finalize 0.0541    func 1.2694    
Accumulated time: func 62.7763    prepare 19.4095    bound 32.9664    transfer 2.3062    finalize 4.1335    
all_split False
======================Cut inference begins======================
max lb tensor(0.20261878) min lb tensor(-0.13667983)
Number of Verified Splits: 815 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0004870891571044922 
BICCOS Cumulative time: 13.97088360786438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13913 (23), -0.13798 (23), -0.13789 (23), -0.13777 (24), -0.13752 (24), -0.13696 (23), -0.13668 (24), -0.13660 (23), -0.13655 (24), -0.13648 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13599 (23), -0.13598 (24), -0.13559 (23), -0.13551 (24), -0.13549 (23), -0.13534 (24), -0.13527 (24), 
Length of domains: 151860
Time: pickout 0.0700    decision 0.2313    set_bounds 0.3732    solve 1.2718    add 0.0321    
Accumulated time: pickout 3.0984    decision 15.7830    set_bounds 19.4291    solve 64.2527    add 2.2885    
Current (lb-rhs): -0.13913023471832275
338076 domains visited
Cumulative time: 120.33467292785645

BaB round 56
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1654] [/input-8, 1661] [/input, 2938] [/input-8, 1610] [/input-8, 1661] [/input-8, 1662] [/input-8, 1661] [/input-8, 1662] [/input-8, 1169] [/input-8, 1169] 
cut re-enabled after branching node selection
0 lb beta sum: 1.783216953277588, worst -0.1315276324748993
10 lb beta sum: 1.783316731452942, worst -0.13170269131660461
Time: prepare 0.4168    bound 0.6821    transfer 0.0729    finalize 0.0547    func 1.2814    
Accumulated time: func 64.0577    prepare 19.8266    bound 33.6485    transfer 2.3792    finalize 4.1882    
all_split False
======================Cut inference begins======================
max lb tensor(0.21606737) min lb tensor(-0.13152763)
Number of Verified Splits: 737 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0004715919494628906 
BICCOS Cumulative time: 13.971355199813843
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13913 (23), -0.13798 (23), -0.13789 (23), -0.13777 (24), -0.13752 (24), -0.13696 (23), -0.13668 (24), -0.13660 (23), -0.13655 (24), -0.13648 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13599 (23), -0.13598 (24), -0.13559 (23), -0.13551 (24), -0.13549 (23), -0.13534 (24), -0.13527 (24), 
Length of domains: 155219
Time: pickout 0.0744    decision 0.2311    set_bounds 0.3775    solve 1.2832    add 0.0368    
Accumulated time: pickout 3.1728    decision 16.0140    set_bounds 19.8065    solve 65.5360    add 2.3253    
Current (lb-rhs): -0.13913023471832275
345531 domains visited
Cumulative time: 122.37366986274719

BaB round 57
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3221] [/input-8, 1169] [/input, 3221] [/input, 3221] [/input-8, 1661] [/input-8, 1618] [/input-8, 1322] [/input-8, 1324] [/input-8, 1610] [/input-8, 1265] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7416183948516846, worst -0.13546591997146606
10 lb beta sum: 1.7418181896209717, worst -0.13556241989135742
Time: prepare 0.4170    bound 0.6847    transfer 0.0674    finalize 0.0544    func 1.2784    
Accumulated time: func 65.3361    prepare 20.2439    bound 34.3332    transfer 2.4466    finalize 4.2426    
all_split False
======================Cut inference begins======================
max lb tensor(0.22184962) min lb tensor(-0.13546592)
Number of Verified Splits: 955 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0006072521209716797 
BICCOS Cumulative time: 13.971962451934814
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13913 (23), -0.13798 (23), -0.13777 (24), -0.13752 (24), -0.13696 (23), -0.13668 (24), -0.13660 (23), -0.13655 (24), -0.13648 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13599 (23), -0.13598 (24), -0.13551 (24), -0.13549 (23), -0.13547 (24), -0.13534 (24), -0.13527 (24), -0.13519 (24), 
Length of domains: 158360
Time: pickout 0.0720    decision 0.2390    set_bounds 0.3808    solve 1.2805    add 0.0327    
Accumulated time: pickout 3.2448    decision 16.2530    set_bounds 20.1873    solve 66.8165    add 2.3580    
Current (lb-rhs): -0.13913023471832275
352768 domains visited
Cumulative time: 124.41890144348145

BaB round 58
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1611] [/input-8, 1662] [/input-8, 1134] [/input-8, 1611] [/input, 2938] [/input-8, 1174] [/input-8, 498] [/input-8, 748] [/input-8, 498] [/input-8, 747] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7498339414596558, worst -0.13237038254737854
10 lb beta sum: 1.7499737739562988, worst -0.13249024748802185
Time: prepare 0.4148    bound 0.6812    transfer 0.0693    finalize 0.0541    func 1.2748    
Accumulated time: func 66.6110    prepare 20.6589    bound 35.0144    transfer 2.5159    finalize 4.2967    
all_split False
======================Cut inference begins======================
max lb tensor(0.19892186) min lb tensor(-0.13237038)
Number of Verified Splits: 809 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.00045490264892578125 
BICCOS Cumulative time: 13.97241735458374
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13913 (23), -0.13798 (23), -0.13777 (24), -0.13752 (24), -0.13696 (23), -0.13668 (24), -0.13660 (23), -0.13655 (24), -0.13648 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13599 (23), -0.13598 (24), -0.13551 (24), -0.13547 (24), -0.13534 (24), -0.13527 (24), -0.13519 (24), -0.13509 (24), 
Length of domains: 161647
Time: pickout 0.0713    decision 0.2329    set_bounds 0.3727    solve 1.2771    add 0.0340    
Accumulated time: pickout 3.3161    decision 16.4859    set_bounds 20.5600    solve 68.0936    add 2.3919    
Current (lb-rhs): -0.13913023471832275
360151 domains visited
Cumulative time: 126.4443621635437

BaB round 59
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1662] [/input-8, 1516] [/input-8, 1654] [/input, 3549] [/input-8, 1661] [/input-8, 1174] [/input-8, 1324] [/input-8, 1661] [/input, 3221] [/input-8, 1174] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6530511379241943, worst -0.13548779487609863
10 lb beta sum: 1.6530910730361938, worst -0.1354544758796692
Time: prepare 0.4307    bound 0.6829    transfer 0.0689    finalize 1.3241    func 2.5613    
Accumulated time: func 69.1723    prepare 21.0899    bound 35.6973    transfer 2.5848    finalize 5.6208    
all_split False
======================Cut inference begins======================
max lb tensor(0.22443575) min lb tensor(-0.13544768)
Number of Verified Splits: 1123 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0005807876586914062 
BICCOS Cumulative time: 13.972998142242432
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13798 (23), -0.13777 (24), -0.13752 (24), -0.13696 (23), -0.13668 (24), -0.13660 (23), -0.13655 (24), -0.13648 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13599 (23), -0.13598 (24), -0.13551 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13527 (24), -0.13519 (24), -0.13509 (24), 
Length of domains: 164620
Time: pickout 0.0731    decision 0.2333    set_bounds 0.3808    solve 2.5631    add 0.1576    
Accumulated time: pickout 3.3892    decision 16.7192    set_bounds 20.9409    solve 70.6566    add 2.5496    
Current (lb-rhs): -0.13798069953918457
367220 domains visited
Cumulative time: 129.9012405872345

BaB round 60
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1661] [/input-8, 1654] [/input-8, 1661] [/input-8, 498] [/input, 889] [/input-8, 498] [/input, 889] [/input-8, 475] [/input-8, 475] [/input-8, 475] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7027273178100586, worst -0.1346597671508789
10 lb beta sum: 1.702787160873413, worst -0.1347329020500183
Time: prepare 0.4287    bound 0.6838    transfer 0.0688    finalize 0.0555    func 1.2922    
Accumulated time: func 70.4644    prepare 21.5189    bound 36.3811    transfer 2.6536    finalize 5.6764    
all_split False
======================Cut inference begins======================
max lb tensor(0.22136873) min lb tensor(-0.13462096)
Number of Verified Splits: 1026 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0005080699920654297 
BICCOS Cumulative time: 13.973506212234497
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13752 (24), -0.13696 (23), -0.13668 (24), -0.13655 (24), -0.13648 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13599 (23), -0.13598 (24), -0.13551 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13527 (24), -0.13519 (24), -0.13509 (24), -0.13496 (24), -0.13489 (24), 
Length of domains: 167690
Time: pickout 0.0742    decision 0.2337    set_bounds 0.3824    solve 1.2942    add 0.0378    
Accumulated time: pickout 3.4634    decision 16.9530    set_bounds 21.3233    solve 71.9509    add 2.5874    
Current (lb-rhs): -0.1377658247947693
374386 domains visited
Cumulative time: 131.97075986862183

BaB round 61
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1169] [/input-8, 1169] [/input-8, 1662] [/input-8, 1610] [/input-8, 1324] [/input, 1719] [/input-8, 1516] [/input-8, 1661] [/input-8, 1324] [/input-8, 1169] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7122211456298828, worst -0.13234752416610718
10 lb beta sum: 1.7122411727905273, worst -0.13251423835754395
Time: prepare 0.4225    bound 0.6822    transfer 0.0700    finalize 0.0543    func 1.2840    
Accumulated time: func 71.7484    prepare 21.9417    bound 37.0633    transfer 2.7236    finalize 5.7307    
all_split False
======================Cut inference begins======================
max lb tensor(0.01842660) min lb tensor(-0.13231319)
Number of Verified Splits: 999 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.00048422813415527344 
BICCOS Cumulative time: 13.973990440368652
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13752 (24), -0.13696 (23), -0.13668 (24), -0.13655 (24), -0.13648 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13599 (23), -0.13598 (24), -0.13551 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13527 (24), -0.13519 (24), -0.13509 (24), -0.13496 (24), -0.13489 (24), 
Length of domains: 170787
Time: pickout 0.0727    decision 0.2373    set_bounds 0.3892    solve 1.2862    add 0.0382    
Accumulated time: pickout 3.5361    decision 17.1902    set_bounds 21.7125    solve 73.2370    add 2.6256    
Current (lb-rhs): -0.1377658247947693
381579 domains visited
Cumulative time: 134.0376341342926

BaB round 62
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3221] [/input, 889] [/input-8, 1169] [/input, 3221] [/input-8, 498] [/input-8, 1174] [/input, 3221] [/input, 3221] [/input, 3221] [/input-8, 1654] 
cut re-enabled after branching node selection
0 lb beta sum: 1.716402530670166, worst -0.1269473433494568
10 lb beta sum: 1.716402530670166, worst -0.1268444061279297
Time: prepare 0.4241    bound 0.6819    transfer 0.0693    finalize 0.0582    func 1.2887    
Accumulated time: func 73.0372    prepare 22.3661    bound 37.7451    transfer 2.7929    finalize 5.7888    
all_split False
======================Cut inference begins======================
max lb tensor(0.21669316) min lb tensor(-0.12681395)
Number of Verified Splits: 810 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0004515647888183594 
BICCOS Cumulative time: 13.97444200515747
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13752 (24), -0.13696 (23), -0.13668 (24), -0.13655 (24), -0.13648 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13599 (23), -0.13598 (24), -0.13551 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13527 (24), -0.13519 (24), -0.13509 (24), -0.13496 (24), -0.13489 (24), 
Length of domains: 174073
Time: pickout 0.0780    decision 0.2350    set_bounds 0.3724    solve 1.2915    add 0.0352    
Accumulated time: pickout 3.6141    decision 17.4253    set_bounds 22.0849    solve 74.5285    add 2.6608    
Current (lb-rhs): -0.1377658247947693
388961 domains visited
Cumulative time: 136.0911979675293

BaB round 63
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1169] [/input-8, 1324] [/input-8, 1661] [/input-8, 747] [/input-8, 1322] [/input-8, 476] [/input-8, 497] [/input-8, 476] [/input-8, 1324] [/input-8, 1324] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6374789476394653, worst -0.13079845905303955
10 lb beta sum: 1.6374789476394653, worst -0.13082188367843628
Time: prepare 0.4141    bound 0.6818    transfer 0.0694    finalize 0.0540    func 1.2740    
Accumulated time: func 74.3112    prepare 22.7804    bound 38.4269    transfer 2.8623    finalize 5.8429    
all_split False
======================Cut inference begins======================
max lb tensor(0.22867262) min lb tensor(-0.13076699)
Number of Verified Splits: 1164 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.00046539306640625 
BICCOS Cumulative time: 13.974907398223877
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13752 (24), -0.13696 (23), -0.13668 (24), -0.13655 (24), -0.13648 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13599 (23), -0.13598 (24), -0.13551 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13527 (24), -0.13519 (24), -0.13509 (24), -0.13496 (24), -0.13489 (24), 
Length of domains: 177005
Time: pickout 0.0727    decision 0.2428    set_bounds 0.3712    solve 1.2759    add 0.0358    
Accumulated time: pickout 3.6867    decision 17.6681    set_bounds 22.4561    solve 75.8044    add 2.6967    
Current (lb-rhs): -0.1377658247947693
395989 domains visited
Cumulative time: 138.1318974494934

BaB round 64
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1611] [/input-8, 1662] [/input-8, 1618] [/input-8, 1661] [/input-8, 1322] [/input-8, 1322] [/input, 3221] [/input-8, 1324] [/input-8, 1322] [/input-8, 497] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6499066352844238, worst -0.12493503093719482
10 lb beta sum: 1.6499066352844238, worst -0.12493777275085449
Time: prepare 0.4036    bound 0.6819    transfer 0.0689    finalize 0.0502    func 1.2593    
Accumulated time: func 75.5705    prepare 23.1842    bound 39.1088    transfer 2.9312    finalize 5.8931    
all_split False
======================Cut inference begins======================
max lb tensor(0.20295185) min lb tensor(-0.12492013)
Number of Verified Splits: 1161 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0007097721099853516 
BICCOS Cumulative time: 13.975617170333862
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13752 (24), -0.13696 (23), -0.13668 (24), -0.13655 (24), -0.13648 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13599 (23), -0.13598 (24), -0.13551 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13527 (24), -0.13519 (24), -0.13509 (24), -0.13496 (24), -0.13489 (24), 
Length of domains: 179940
Time: pickout 0.0725    decision 0.2330    set_bounds 0.3758    solve 2.6434    add 0.0364    
Accumulated time: pickout 3.7592    decision 17.9011    set_bounds 22.8319    solve 78.4478    add 2.7330    
Current (lb-rhs): -0.1377658247947693
403020 domains visited
Cumulative time: 141.53914046287537

BaB round 65
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1549] [/input-8, 1549] [/input, 3221] [/input-8, 1549] [/input-8, 1169] [/input-8, 1549] [/input-8, 1653] [/input-8, 1549] [/input-8, 497] [/input, 2938] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6794004440307617, worst -0.12841355800628662
10 lb beta sum: 1.6794004440307617, worst -0.12839752435684204
Time: prepare 0.4102    bound 0.6815    transfer 0.0693    finalize 0.0530    func 1.2688    
Accumulated time: func 76.8393    prepare 23.5947    bound 39.7903    transfer 3.0005    finalize 5.9461    
all_split False
======================Cut inference begins======================
max lb tensor(0.20879781) min lb tensor(-0.12834698)
Number of Verified Splits: 1073 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0004932880401611328 
BICCOS Cumulative time: 13.976110458374023
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13752 (24), -0.13696 (23), -0.13668 (24), -0.13655 (24), -0.13648 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13599 (23), -0.13598 (24), -0.13551 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13527 (24), -0.13519 (24), -0.13509 (24), -0.13496 (24), -0.13489 (24), 
Length of domains: 182963
Time: pickout 0.0718    decision 0.2343    set_bounds 0.3763    solve 1.2711    add 0.0345    
Accumulated time: pickout 3.8310    decision 18.1354    set_bounds 23.2082    solve 79.7189    add 2.7675    
Current (lb-rhs): -0.1377658247947693
410139 domains visited
Cumulative time: 143.5662043094635

BaB round 66
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1169] [/input-8, 1322] [/input, 889] [/input-8, 1549] [/input-8, 1324] [/input-8, 748] [/input-8, 1324] [/input-8, 1324] [/input-8, 1662] [/input-8, 1169] 
cut re-enabled after branching node selection
0 lb beta sum: 1.661512851715088, worst -0.1305711269378662
10 lb beta sum: 1.6615327596664429, worst -0.13065117597579956
Time: prepare 0.4126    bound 0.6836    transfer 0.0692    finalize 0.0527    func 1.2728    
Accumulated time: func 78.1121    prepare 24.0076    bound 40.4739    transfer 3.0697    finalize 5.9987    
all_split False
======================Cut inference begins======================
max lb tensor(0.20476723) min lb tensor(-0.13056493)
Number of Verified Splits: 1160 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0004508495330810547 
BICCOS Cumulative time: 13.976561307907104
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13752 (24), -0.13696 (23), -0.13668 (24), -0.13655 (24), -0.13648 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13599 (23), -0.13598 (24), -0.13551 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13527 (24), -0.13519 (24), -0.13509 (24), -0.13496 (24), -0.13489 (24), 
Length of domains: 185899
Time: pickout 0.0702    decision 0.2305    set_bounds 0.3686    solve 1.2745    add 0.0348    
Accumulated time: pickout 3.9012    decision 18.3659    set_bounds 23.5769    solve 80.9934    add 2.8024    
Current (lb-rhs): -0.1377658247947693
417171 domains visited
Cumulative time: 145.5874047279358

BaB round 67
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3549] [/input-8, 1174] [/input, 3221] [/input, 3221] [/input, 3221] [/input, 3549] [/input-8, 1324] [/input-8, 747] [/input, 3221] [/input-8, 1324] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6740089654922485, worst -0.13603222370147705
10 lb beta sum: 1.6740089654922485, worst -0.1360776424407959
Time: prepare 0.4136    bound 0.6846    transfer 0.0722    finalize 0.0544    func 1.2808    
Accumulated time: func 79.3928    prepare 24.4215    bound 41.1585    transfer 3.1419    finalize 6.0531    
all_split False
======================Cut inference begins======================
max lb tensor(0.20563692) min lb tensor(-0.13602936)
Number of Verified Splits: 944 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0005304813385009766 
BICCOS Cumulative time: 13.977091789245605
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13752 (24), -0.13668 (24), -0.13655 (24), -0.13648 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13599 (23), -0.13598 (24), -0.13551 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13527 (24), -0.13519 (24), -0.13509 (24), -0.13496 (24), -0.13489 (24), 
Length of domains: 189051
Time: pickout 0.0718    decision 0.2313    set_bounds 0.3693    solve 1.2828    add 0.0350    
Accumulated time: pickout 3.9729    decision 18.5972    set_bounds 23.9462    solve 82.2762    add 2.8374    
Current (lb-rhs): -0.1377658247947693
424419 domains visited
Cumulative time: 147.620952129364

BaB round 68
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1618] [/input-8, 1610] [/input, 889] [/input, 3221] [/input, 3221] [/input-8, 1169] [/input-8, 1549] [/input-8, 1549] [/input-8, 1169] [/input, 889] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6550847291946411, worst -0.1323358118534088
10 lb beta sum: 1.6551246643066406, worst -0.13225188851356506
Time: prepare 0.4177    bound 0.6845    transfer 0.0662    finalize 0.0535    func 1.2768    
Accumulated time: func 80.6696    prepare 24.8394    bound 41.8430    transfer 3.2081    finalize 6.1066    
all_split False
======================Cut inference begins======================
max lb tensor(0.20411265) min lb tensor(-0.13220707)
Number of Verified Splits: 1150 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0005466938018798828 
BICCOS Cumulative time: 13.977638483047485
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13752 (24), -0.13668 (24), -0.13655 (24), -0.13648 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13599 (23), -0.13551 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13527 (24), -0.13519 (24), -0.13509 (24), -0.13496 (24), -0.13489 (24), -0.13485 (24), 
Length of domains: 191997
Time: pickout 0.0729    decision 0.2343    set_bounds 0.3878    solve 1.2790    add 0.0348    
Accumulated time: pickout 4.0458    decision 18.8315    set_bounds 24.3340    solve 83.5552    add 2.8722    
Current (lb-rhs): -0.1377658247947693
431461 domains visited
Cumulative time: 149.67447352409363

BaB round 69
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 475] [/input-8, 1661] [/input-8, 498] [/input-8, 475] [/input-8, 1324] [/input-8, 475] [/input-8, 1322] [/input-8, 475] [/input-8, 1611] [/input-8, 475] 
cut re-enabled after branching node selection
0 lb beta sum: 1.682133436203003, worst -0.1305326223373413
10 lb beta sum: 1.682133436203003, worst -0.13052314519882202
Time: prepare 0.4146    bound 0.6826    transfer 0.0690    finalize 0.0518    func 1.2728    
Accumulated time: func 81.9425    prepare 25.2543    bound 42.5256    transfer 3.2771    finalize 6.1584    
all_split False
======================Cut inference begins======================
max lb tensor(0.22111285) min lb tensor(-0.13047302)
Number of Verified Splits: 898 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.00045299530029296875 
BICCOS Cumulative time: 13.978091478347778
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13752 (24), -0.13668 (24), -0.13655 (24), -0.13648 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13599 (23), -0.13551 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13527 (24), -0.13519 (24), -0.13509 (24), -0.13496 (24), -0.13489 (24), -0.13485 (24), 
Length of domains: 195195
Time: pickout 0.0758    decision 0.2398    set_bounds 0.3732    solve 1.2752    add 0.0375    
Accumulated time: pickout 4.1216    decision 19.0713    set_bounds 24.7072    solve 84.8304    add 2.9097    
Current (lb-rhs): -0.1377658247947693
438755 domains visited
Cumulative time: 151.717209815979

BaB round 70
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1322] [/input-8, 1611] [/input-8, 1169] [/input, 3221] [/input-8, 497] [/input-8, 1662] [/input-8, 497] [/input-8, 1618] [/input-8, 497] [/input-8, 1610] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7038280963897705, worst -0.13217830657958984
10 lb beta sum: 1.70386803150177, worst -0.13225722312927246
Time: prepare 0.4131    bound 0.6870    transfer 0.0688    finalize 1.5325    func 2.7568    
Accumulated time: func 84.6992    prepare 25.6676    bound 43.2126    transfer 3.3460    finalize 7.6909    
all_split False
======================Cut inference begins======================
max lb tensor(0.20897484) min lb tensor(-0.13213646)
Number of Verified Splits: 952 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0006129741668701172 
BICCOS Cumulative time: 13.978704452514648
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13752 (24), -0.13668 (24), -0.13655 (24), -0.13648 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13599 (23), -0.13551 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13519 (24), -0.13509 (24), -0.13496 (24), -0.13489 (24), -0.13485 (24), -0.13462 (24), 
Length of domains: 198339
Time: pickout 0.0736    decision 0.2353    set_bounds 0.3661    solve 2.7587    add 0.0591    
Accumulated time: pickout 4.1952    decision 19.3066    set_bounds 25.0733    solve 87.5891    add 2.9688    
Current (lb-rhs): -0.1377658247947693
445995 domains visited
Cumulative time: 155.25358653068542

BaB round 71
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 747] [/input-8, 1611] [/input-8, 1322] [/input-8, 1549] [/input-8, 1322] [/input-8, 1549] [/input, 3221] [/input-8, 1169] [/input-8, 1324] [/input-8, 748] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6982653141021729, worst -0.1342042088508606
10 lb beta sum: 1.698305368423462, worst -0.134168803691864
Time: prepare 0.4140    bound 0.6822    transfer 0.0691    finalize 0.0579    func 1.2786    
Accumulated time: func 85.9778    prepare 26.0819    bound 43.8948    transfer 3.4151    finalize 7.7488    
all_split False
======================Cut inference begins======================
max lb tensor(0.18522054) min lb tensor(-0.13414979)
Number of Verified Splits: 857 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0005342960357666016 
BICCOS Cumulative time: 13.979238748550415
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13752 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13551 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13519 (24), -0.13496 (24), -0.13489 (24), -0.13485 (24), -0.13462 (24), -0.13446 (24), -0.13443 (24), -0.13439 (24), 
Length of domains: 201578
Time: pickout 0.0713    decision 0.2340    set_bounds 0.3712    solve 1.2808    add 0.0368    
Accumulated time: pickout 4.2665    decision 19.5406    set_bounds 25.4445    solve 88.8699    add 3.0055    
Current (lb-rhs): -0.1377658247947693
453330 domains visited
Cumulative time: 157.2909231185913

BaB round 72
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1322] [/input-8, 1169] [/input, 889] [/input, 889] [/input, 889] [/input, 889] [/input, 3221] [/input-8, 1549] [/input-8, 1549] [/input-8, 1549] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7026104927062988, worst -0.13066241145133972
10 lb beta sum: 1.7026104927062988, worst -0.1306246817111969
Time: prepare 0.4135    bound 0.6815    transfer 0.0690    finalize 0.0525    func 1.2716    
Accumulated time: func 87.2495    prepare 26.4957    bound 44.5764    transfer 3.4841    finalize 7.8014    
all_split False
======================Cut inference begins======================
max lb tensor(0.22385776) min lb tensor(-0.13056836)
Number of Verified Splits: 948 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0004856586456298828 
BICCOS Cumulative time: 13.979724407196045
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13752 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13551 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13519 (24), -0.13496 (24), -0.13489 (24), -0.13485 (24), -0.13462 (24), -0.13446 (24), -0.13443 (24), -0.13439 (24), 
Length of domains: 204726
Time: pickout 0.0731    decision 0.2341    set_bounds 0.3707    solve 1.2740    add 0.0390    
Accumulated time: pickout 4.3396    decision 19.7747    set_bounds 25.8152    solve 90.1439    add 3.0445    
Current (lb-rhs): -0.1377658247947693
460574 domains visited
Cumulative time: 159.32196426391602

BaB round 73
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 476] [/input-8, 1610] [/input-8, 498] [/input-8, 1324] [/input, 1719] [/input-8, 1662] [/input-8, 1661] [/input-8, 1324] [/input-8, 1610] [/input-8, 1169] 
cut re-enabled after branching node selection
0 lb beta sum: 1.67805016040802, worst -0.12558996677398682
10 lb beta sum: 1.67805016040802, worst -0.12576055526733398
Time: prepare 0.4148    bound 0.6827    transfer 0.0691    finalize 0.0533    func 1.2749    
Accumulated time: func 88.5243    prepare 26.9109    bound 45.2590    transfer 3.5532    finalize 7.8547    
all_split False
======================Cut inference begins======================
max lb tensor(0.20755696) min lb tensor(-0.12558651)
Number of Verified Splits: 955 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0005326271057128906 
BICCOS Cumulative time: 13.980257034301758
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13752 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13551 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13519 (24), -0.13496 (24), -0.13489 (24), -0.13485 (24), -0.13462 (24), -0.13446 (24), -0.13443 (24), -0.13439 (24), 
Length of domains: 207867
Time: pickout 0.0723    decision 0.2323    set_bounds 0.3629    solve 1.2762    add 0.0374    
Accumulated time: pickout 4.4119    decision 20.0070    set_bounds 26.1781    solve 91.4201    add 3.0819    
Current (lb-rhs): -0.1377658247947693
467811 domains visited
Cumulative time: 161.34518003463745

BaB round 74
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1653] [/input, 3221] [/input-8, 498] [/input, 3221] [/input, 3221] [/input-8, 1324] [/input-8, 475] [/input, 2766] [/input-8, 1324] [/input, 3221] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7078297138214111, worst -0.12737295031547546
10 lb beta sum: 1.7078297138214111, worst -0.12724125385284424
Time: prepare 0.4116    bound 0.6816    transfer 0.0694    finalize 0.0532    func 1.2705    
Accumulated time: func 89.7948    prepare 27.3227    bound 45.9406    transfer 3.6226    finalize 7.9079    
all_split False
======================Cut inference begins======================
max lb tensor(0.20362401) min lb tensor(-0.12712699)
Number of Verified Splits: 885 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0004949569702148438 
BICCOS Cumulative time: 13.980751991271973
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13752 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13551 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13519 (24), -0.13496 (24), -0.13489 (24), -0.13485 (24), -0.13462 (24), -0.13446 (24), -0.13443 (24), -0.13439 (24), 
Length of domains: 211078
Time: pickout 0.0721    decision 0.2309    set_bounds 0.3711    solve 1.2723    add 0.0374    
Accumulated time: pickout 4.4840    decision 20.2379    set_bounds 26.5492    solve 92.6923    add 3.1193    
Current (lb-rhs): -0.1377658247947693
475118 domains visited
Cumulative time: 163.36647295951843

BaB round 75
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1662] [/input-8, 497] [/input-8, 1610] [/input-8, 1661] [/input-8, 497] [/input, 1719] [/input-8, 497] [/input, 2938] [/input-8, 497] [/input-8, 1662] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6950759887695312, worst -0.133843332529068
10 lb beta sum: 1.6951160430908203, worst -0.1337771713733673
Time: prepare 0.4132    bound 0.6817    transfer 0.0694    finalize 0.0527    func 1.2716    
Accumulated time: func 91.0664    prepare 27.7362    bound 46.6223    transfer 3.6919    finalize 7.9606    
all_split False
======================Cut inference begins======================
max lb tensor(0.23518860) min lb tensor(-0.13375500)
Number of Verified Splits: 914 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0004889965057373047 
BICCOS Cumulative time: 13.98124098777771
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13519 (24), -0.13496 (24), -0.13489 (24), -0.13485 (24), -0.13462 (24), -0.13446 (24), -0.13443 (24), -0.13439 (24), -0.13427 (24), -0.13423 (24), 
Length of domains: 214260
Time: pickout 0.0738    decision 0.2300    set_bounds 0.3641    solve 1.2733    add 0.0366    
Accumulated time: pickout 4.5578    decision 20.4680    set_bounds 26.9133    solve 93.9657    add 3.1559    
Current (lb-rhs): -0.1377658247947693
482396 domains visited
Cumulative time: 165.3877625465393

BaB round 76
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input, 3549] [/input-8, 1169] [/input, 3221] [/input-8, 1653] [/input-8, 1611] [/input, 3549] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6811246871948242, worst -0.12877202033996582
10 lb beta sum: 1.6811647415161133, worst -0.12879741191864014
Time: prepare 0.4108    bound 0.6822    transfer 0.0693    finalize 0.0554    func 2.8879    
Accumulated time: func 93.9543    prepare 28.1473    bound 47.3045    transfer 3.7613    finalize 8.0160    
all_split False
======================Cut inference begins======================
max lb tensor(0.20998770) min lb tensor(-0.12875521)
Number of Verified Splits: 844 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0005843639373779297 
BICCOS Cumulative time: 13.981825351715088
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13519 (24), -0.13496 (24), -0.13489 (24), -0.13485 (24), -0.13462 (24), -0.13446 (24), -0.13443 (24), -0.13439 (24), -0.13427 (24), -0.13423 (24), 
Length of domains: 217512
Time: pickout 0.0729    decision 0.2331    set_bounds 0.3709    solve 2.8903    add 0.0402    
Accumulated time: pickout 4.6307    decision 20.7011    set_bounds 27.2842    solve 96.8560    add 3.1962    
Current (lb-rhs): -0.1377658247947693
489744 domains visited
Cumulative time: 169.0339162349701

BaB round 77
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1549] [/input-8, 1549] [/input-8, 1610] [/input, 3288] [/input, 3221] [/input-8, 497] [/input, 889] [/input-8, 1549] [/input-8, 1662] [/input-8, 1662] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6706682443618774, worst -0.13091272115707397
10 lb beta sum: 1.6706682443618774, worst -0.131006121635437
Time: prepare 0.4168    bound 0.6826    transfer 0.0697    finalize 0.0570    func 1.2811    
Accumulated time: func 95.2354    prepare 28.5644    bound 47.9871    transfer 3.8309    finalize 8.0730    
all_split False
======================Cut inference begins======================
max lb tensor(0.18266720) min lb tensor(-0.13081580)
Number of Verified Splits: 1026 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0004417896270751953 
BICCOS Cumulative time: 13.982267141342163
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13519 (24), -0.13496 (24), -0.13489 (24), -0.13485 (24), -0.13462 (24), -0.13446 (24), -0.13443 (24), -0.13439 (24), -0.13427 (24), -0.13423 (24), 
Length of domains: 220582
Time: pickout 0.0722    decision 0.2326    set_bounds 0.3615    solve 1.2825    add 0.0413    
Accumulated time: pickout 4.7029    decision 20.9336    set_bounds 27.6458    solve 98.1385    add 3.2375    
Current (lb-rhs): -0.1377658247947693
496910 domains visited
Cumulative time: 171.0702440738678

BaB round 78
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1324] [/input-8, 404] [/input, 889] [/input-8, 1549] [/input-8, 1549] [/input-8, 1134] [/input, 3221] [/input-8, 1549] [/input-8, 1662] [/input-8, 1618] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6756739616394043, worst -0.13179564476013184
10 lb beta sum: 1.6756939888000488, worst -0.13183563947677612
Time: prepare 0.4139    bound 0.6835    transfer 0.0695    finalize 0.0610    func 1.2828    
Accumulated time: func 96.5183    prepare 28.9785    bound 48.6705    transfer 3.9004    finalize 8.1339    
all_split False
======================Cut inference begins======================
max lb tensor(0.23415768) min lb tensor(-0.13178658)
Number of Verified Splits: 945 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0004703998565673828 
BICCOS Cumulative time: 13.98273754119873
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13519 (24), -0.13496 (24), -0.13489 (24), -0.13485 (24), -0.13462 (24), -0.13446 (24), -0.13443 (24), -0.13439 (24), -0.13427 (24), -0.13423 (24), 
Length of domains: 223733
Time: pickout 0.0721    decision 0.2347    set_bounds 0.3765    solve 1.2846    add 0.0439    
Accumulated time: pickout 4.7750    decision 21.1684    set_bounds 28.0223    solve 99.4231    add 3.2814    
Current (lb-rhs): -0.1377658247947693
504157 domains visited
Cumulative time: 173.1271529197693

BaB round 79
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1661] [/input-8, 1654] [/input-8, 1662] [/input-8, 1174] [/input-8, 1169] [/input, 3221] [/input, 3221] [/input-8, 1169] [/input-8, 1549] [/input-8, 1174] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6872003078460693, worst -0.12909337878227234
10 lb beta sum: 1.6872003078460693, worst -0.12910977005958557
Time: prepare 0.4188    bound 0.6864    transfer 0.0665    finalize 0.0594    func 1.2865    
Accumulated time: func 97.8048    prepare 29.3976    bound 49.3569    transfer 3.9669    finalize 8.1933    
all_split False
======================Cut inference begins======================
max lb tensor(0.21948612) min lb tensor(-0.12907842)
Number of Verified Splits: 854 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0005140304565429688 
BICCOS Cumulative time: 13.983251571655273
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13519 (24), -0.13496 (24), -0.13489 (24), -0.13485 (24), -0.13462 (24), -0.13446 (24), -0.13443 (24), -0.13439 (24), -0.13427 (24), -0.13423 (24), 
Length of domains: 226975
Time: pickout 0.0734    decision 0.2361    set_bounds 0.3782    solve 1.2890    add 0.0414    
Accumulated time: pickout 4.8484    decision 21.4045    set_bounds 28.4005    solve 100.7121    add 3.3228    
Current (lb-rhs): -0.1377658247947693
511495 domains visited
Cumulative time: 175.1925642490387

BaB round 80
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1654] [/input-8, 497] [/input-8, 1618] [/input-8, 1654] [/input-8, 497] [/input-8, 498] [/input-8, 1322] [/input-8, 497] [/input-8, 1662] [/input-8, 1654] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7070802450180054, worst -0.129144549369812
10 lb beta sum: 1.7070802450180054, worst -0.12927067279815674
Time: prepare 0.4180    bound 0.6833    transfer 0.0694    finalize 0.0604    func 1.2845    
Accumulated time: func 99.0893    prepare 29.8159    bound 50.0403    transfer 4.0363    finalize 8.2538    
all_split False
======================Cut inference begins======================
max lb tensor(0.20008296) min lb tensor(-0.12914455)
Number of Verified Splits: 823 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0005214214324951172 
BICCOS Cumulative time: 13.983772993087769
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13519 (24), -0.13496 (24), -0.13489 (24), -0.13485 (24), -0.13462 (24), -0.13446 (24), -0.13443 (24), -0.13439 (24), -0.13427 (24), -0.13423 (24), 
Length of domains: 230248
Time: pickout 0.0745    decision 0.2408    set_bounds 0.3782    solve 1.2867    add 0.0413    
Accumulated time: pickout 4.9229    decision 21.6453    set_bounds 28.7787    solve 101.9989    add 3.3641    
Current (lb-rhs): -0.1377658247947693
518864 domains visited
Cumulative time: 177.25918555259705

BaB round 81
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 497] [/input-8, 1169] [/input-8, 1324] [/input-8, 1654] [/input-8, 1169] [/input-8, 1265] [/input-8, 497] [/input-8, 497] [/input-8, 1169] [/input-8, 1324] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7130303382873535, worst -0.12957823276519775
10 lb beta sum: 1.7130303382873535, worst -0.12962573766708374
Time: prepare 0.4133    bound 0.6828    transfer 0.0690    finalize 0.0556    func 1.2740    
Accumulated time: func 100.3633    prepare 30.2294    bound 50.7231    transfer 4.1053    finalize 8.3093    
all_split False
======================Cut inference begins======================
max lb tensor(0.20827597) min lb tensor(-0.12954229)
Number of Verified Splits: 925 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0005366802215576172 
BICCOS Cumulative time: 13.984309673309326
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13519 (24), -0.13496 (24), -0.13489 (24), -0.13485 (24), -0.13462 (24), -0.13446 (24), -0.13443 (24), -0.13439 (24), -0.13427 (24), -0.13423 (24), 
Length of domains: 233419
Time: pickout 0.0756    decision 0.2374    set_bounds 0.3780    solve 1.2754    add 0.0413    
Accumulated time: pickout 4.9985    decision 21.8827    set_bounds 29.1567    solve 103.2743    add 3.4054    
Current (lb-rhs): -0.1377658247947693
526131 domains visited
Cumulative time: 179.3095099925995

BaB round 82
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1611] [/input-8, 498] [/input, 3221] [/input-8, 1549] [/input-8, 1322] [/input-8, 747] [/input-8, 1611] [/input, 3221] [/input, 3221] [/input-8, 1265] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6836676597595215, worst -0.13235187530517578
10 lb beta sum: 1.6837077140808105, worst -0.13247895240783691
Time: prepare 0.4145    bound 0.6836    transfer 0.0689    finalize 0.0552    func 1.2766    
Accumulated time: func 101.6399    prepare 30.6442    bound 51.4067    transfer 4.1742    finalize 8.3646    
all_split False
======================Cut inference begins======================
max lb tensor(0.22307426) min lb tensor(-0.13235188)
Number of Verified Splits: 930 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0005750656127929688 
BICCOS Cumulative time: 13.98488473892212
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13519 (24), -0.13496 (24), -0.13489 (24), -0.13485 (24), -0.13462 (24), -0.13446 (24), -0.13443 (24), -0.13439 (24), -0.13427 (24), -0.13423 (24), 
Length of domains: 236585
Time: pickout 0.0746    decision 0.2359    set_bounds 0.3707    solve 1.2782    add 0.0416    
Accumulated time: pickout 5.0730    decision 22.1186    set_bounds 29.5274    solve 104.5526    add 3.4470    
Current (lb-rhs): -0.1377658247947693
533393 domains visited
Cumulative time: 181.35725498199463

BaB round 83
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3221] [/input, 3221] [/input, 3221] [/input, 3221] [/input, 3221] [/input-8, 1322] [/input-8, 1174] [/input, 3549] [/input, 3221] [/input, 3549] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6873952150344849, worst -0.12679722905158997
10 lb beta sum: 1.6874151229858398, worst -0.1267690658569336
Time: prepare 0.4159    bound 0.6823    transfer 0.0695    finalize 0.0537    func 1.2756    
Accumulated time: func 102.9155    prepare 31.0604    bound 52.0890    transfer 4.2437    finalize 8.4183    
all_split False
======================Cut inference begins======================
max lb tensor(0.21335834) min lb tensor(-0.12667412)
Number of Verified Splits: 911 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0004601478576660156 
BICCOS Cumulative time: 13.985344886779785
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13519 (24), -0.13496 (24), -0.13489 (24), -0.13485 (24), -0.13462 (24), -0.13446 (24), -0.13443 (24), -0.13439 (24), -0.13427 (24), -0.13423 (24), 
Length of domains: 239770
Time: pickout 0.0729    decision 0.2343    set_bounds 2.1379    solve 1.2776    add 0.0410    
Accumulated time: pickout 5.1459    decision 22.3529    set_bounds 31.6653    solve 105.8302    add 3.4881    
Current (lb-rhs): -0.1377658247947693
540674 domains visited
Cumulative time: 185.16242909431458

BaB round 84
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1134] [/input-8, 498] [/input, 3221] [/input-8, 498] [/input-8, 1134] [/input-8, 1324] [/input-8, 1662] [/input-8, 1169] [/input-8, 1324] [/input-8, 1611] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7140519618988037, worst -0.12886548042297363
10 lb beta sum: 1.7140519618988037, worst -0.12884396314620972
Time: prepare 0.4116    bound 0.6814    transfer 0.0712    finalize 0.0545    func 1.2749    
Accumulated time: func 104.1904    prepare 31.4722    bound 52.7704    transfer 4.3149    finalize 8.4728    
all_split False
======================Cut inference begins======================
max lb tensor(0.20684195) min lb tensor(-0.12880015)
Number of Verified Splits: 983 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0004534721374511719 
BICCOS Cumulative time: 13.985798358917236
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13547 (24), -0.13545 (24), -0.13534 (24), -0.13519 (24), -0.13496 (24), -0.13489 (24), -0.13485 (24), -0.13462 (24), -0.13446 (24), -0.13443 (24), -0.13439 (24), -0.13427 (24), -0.13423 (24), 
Length of domains: 242883
Time: pickout 0.0732    decision 0.2324    set_bounds 0.3651    solve 1.2769    add 0.0415    
Accumulated time: pickout 5.2191    decision 22.5852    set_bounds 32.0304    solve 107.1071    add 3.5295    
Current (lb-rhs): -0.1377658247947693
547883 domains visited
Cumulative time: 187.20169758796692

BaB round 85
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1611] [/input-8, 498] [/input, 3221] [/input-8, 1322] [/input-8, 1549] [/input-8, 1549] [/input-8, 1134] [/input-8, 1134] [/input-8, 1653] [/input-8, 1654] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7227959632873535, worst -0.1344391405582428
10 lb beta sum: 1.722895860671997, worst -0.13444891571998596
Time: prepare 0.4160    bound 0.6825    transfer 0.0701    finalize 0.0549    func 1.2779    
Accumulated time: func 105.4683    prepare 31.8885    bound 53.4529    transfer 4.3849    finalize 8.5277    
all_split False
======================Cut inference begins======================
max lb tensor(0.20769978) min lb tensor(-0.13443533)
Number of Verified Splits: 869 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.00044274330139160156 
BICCOS Cumulative time: 13.986241102218628
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13547 (24), -0.13545 (24), -0.13519 (24), -0.13496 (24), -0.13485 (24), -0.13462 (24), -0.13446 (24), -0.13444 (25), -0.13443 (24), -0.13439 (24), -0.13423 (24), -0.13415 (25), -0.13413 (24), 
Length of domains: 246110
Time: pickout 0.0758    decision 0.2381    set_bounds 0.3815    solve 1.2802    add 0.0417    
Accumulated time: pickout 5.2949    decision 22.8233    set_bounds 32.4120    solve 108.3874    add 3.5713    
Current (lb-rhs): -0.1377658247947693
555206 domains visited
Cumulative time: 189.26222968101501

BaB round 86
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 498] [/input-8, 1169] [/input, 3221] [/input, 3221] [/input, 889] [/input-8, 1549] [/input, 3221] [/input-8, 1549] [/input-8, 475] [/input-8, 1611] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7304421663284302, worst -0.13087299466133118
10 lb beta sum: 1.7304821014404297, worst -0.1308911144733429
Time: prepare 0.4134    bound 0.6827    transfer 0.0709    finalize 0.0548    func 1.2751    
Accumulated time: func 106.7434    prepare 32.3021    bound 54.1356    transfer 4.4559    finalize 8.5825    
all_split False
======================Cut inference begins======================
max lb tensor(0.19927359) min lb tensor(-0.13086262)
Number of Verified Splits: 876 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0004458427429199219 
BICCOS Cumulative time: 13.986686944961548
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13547 (24), -0.13545 (24), -0.13519 (24), -0.13496 (24), -0.13485 (24), -0.13462 (24), -0.13446 (24), -0.13444 (25), -0.13443 (24), -0.13439 (24), -0.13423 (24), -0.13415 (25), -0.13413 (24), 
Length of domains: 249330
Time: pickout 0.0751    decision 0.2343    set_bounds 0.3680    solve 1.2767    add 0.0426    
Accumulated time: pickout 5.3699    decision 23.0576    set_bounds 32.7799    solve 109.6641    add 3.6138    
Current (lb-rhs): -0.1377658247947693
562522 domains visited
Cumulative time: 191.30454850196838

BaB round 87
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1169] [/input-8, 1324] [/input-8, 1662] [/input, 889] [/input-8, 1322] [/input-8, 1662] [/input, 1719] [/input-8, 497] [/input-8, 497] [/input-8, 1516] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7417422533035278, worst -0.1263124644756317
10 lb beta sum: 1.7417422533035278, worst -0.12646308541297913
Time: prepare 0.4194    bound 0.6832    transfer 0.0709    finalize 0.0550    func 1.2828    
Accumulated time: func 108.0262    prepare 32.7217    bound 54.8188    transfer 4.5268    finalize 8.6375    
all_split False
======================Cut inference begins======================
max lb tensor(0.22087073) min lb tensor(-0.12629011)
Number of Verified Splits: 883 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0004527568817138672 
BICCOS Cumulative time: 13.987139701843262
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13547 (24), -0.13545 (24), -0.13519 (24), -0.13496 (24), -0.13485 (24), -0.13462 (24), -0.13446 (24), -0.13444 (25), -0.13443 (24), -0.13439 (24), -0.13423 (24), -0.13415 (25), -0.13413 (24), 
Length of domains: 252543
Time: pickout 0.0725    decision 0.2359    set_bounds 0.3745    solve 1.2846    add 0.0553    
Accumulated time: pickout 5.4425    decision 23.2935    set_bounds 33.1545    solve 110.9487    add 3.6691    
Current (lb-rhs): -0.1377658247947693
569831 domains visited
Cumulative time: 193.37691354751587

BaB round 88
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 497] [/input-8, 1610] [/input-8, 747] [/input-8, 497] [/input-8, 1618] [/input-8, 498] [/input, 3549] [/input-8, 497] [/input-8, 498] [/input, 2747] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7345466613769531, worst -0.13337674736976624
10 lb beta sum: 1.7345466613769531, worst -0.1334412395954132
Time: prepare 0.4231    bound 0.6821    transfer 0.0741    finalize 0.0558    func 1.2891    
Accumulated time: func 109.3153    prepare 33.1451    bound 55.5010    transfer 4.6009    finalize 8.6933    
all_split False
======================Cut inference begins======================
max lb tensor(0.22226763) min lb tensor(-0.13337162)
Number of Verified Splits: 829 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0004451274871826172 
BICCOS Cumulative time: 13.987584829330444
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13547 (24), -0.13545 (24), -0.13519 (24), -0.13485 (24), -0.13462 (24), -0.13446 (24), -0.13444 (25), -0.13443 (24), -0.13439 (24), -0.13423 (24), -0.13415 (25), -0.13413 (24), -0.13410 (24), 
Length of domains: 255810
Time: pickout 0.0740    decision 0.2383    set_bounds 0.3731    solve 1.2911    add 0.0432    
Accumulated time: pickout 5.5164    decision 23.5318    set_bounds 33.5276    solve 112.2397    add 3.7123    
Current (lb-rhs): -0.1377658247947693
577194 domains visited
Cumulative time: 195.44228267669678

BaB round 89
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 498] [/input, 3221] [/input-8, 1324] [/input-8, 1618] [/input-8, 498] [/input-8, 1662] [/input, 2938] [/input-8, 1265] [/input-8, 748] [/input-8, 1324] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7350225448608398, worst -0.1322576105594635
10 lb beta sum: 1.7350225448608398, worst -0.13228407502174377
Time: prepare 0.4259    bound 0.6821    transfer 0.0712    finalize 0.0574    func 1.2917    
Accumulated time: func 110.6071    prepare 33.5713    bound 56.1830    transfer 4.6721    finalize 8.7507    
all_split False
======================Cut inference begins======================
max lb tensor(0.22393912) min lb tensor(-0.13224974)
Number of Verified Splits: 807 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0004591941833496094 
BICCOS Cumulative time: 13.988044023513794
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13777 (24), -0.13668 (24), -0.13655 (24), -0.13639 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13547 (24), -0.13545 (24), -0.13519 (24), -0.13462 (24), -0.13446 (24), -0.13444 (25), -0.13443 (24), -0.13439 (24), -0.13423 (24), -0.13415 (25), -0.13410 (24), -0.13401 (24), -0.13388 (24), 
Length of domains: 259099
Time: pickout 0.0722    decision 0.2373    set_bounds 0.3743    solve 1.2942    add 0.0441    
Accumulated time: pickout 5.5887    decision 23.7691    set_bounds 33.9020    solve 113.5340    add 3.7564    
Current (lb-rhs): -0.1377658247947693
584579 domains visited
Cumulative time: 197.51125144958496

BaB round 90
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 497] [/input-8, 1662] [/input-12, 43] [/input, 3221] [/input-8, 1661] [/input-8, 1654] [/input-12, 43] [/input-8, 1611] [/input-8, 1174] [/input-8, 1322] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7447868585586548, worst -0.13549071550369263
10 lb beta sum: 1.7447868585586548, worst -0.13547343015670776
Time: prepare 0.4186    bound 0.6835    transfer 0.0966    finalize 0.0582    func 1.3117    
Accumulated time: func 111.9187    prepare 33.9901    bound 56.8665    transfer 4.7687    finalize 8.8089    
all_split False
======================Cut inference begins======================
max lb tensor(0.18612546) min lb tensor(-0.13544983)
Number of Verified Splits: 791 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0005736351013183594 
BICCOS Cumulative time: 13.988617658615112
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13668 (24), -0.13636 (24), -0.13613 (24), -0.13603 (24), -0.13547 (24), -0.13545 (25), -0.13545 (24), -0.13462 (24), -0.13446 (24), -0.13444 (25), -0.13443 (24), -0.13439 (24), -0.13415 (25), -0.13410 (24), -0.13408 (25), -0.13401 (24), -0.13388 (24), -0.13376 (24), -0.13375 (25), -0.13345 (24), 
Length of domains: 262404
Time: pickout 0.0743    decision 0.2357    set_bounds 2.2880    solve 1.3135    add 0.0425    
Accumulated time: pickout 5.6630    decision 24.0048    set_bounds 36.1899    solve 114.8475    add 3.7989    
Current (lb-rhs): -0.13667982816696167
591980 domains visited
Time out!!!!!!!!
Result: unknown in 205.4769 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 173, vnnlib ID: 173 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.90053749, -18.83853912, -16.65795326, -15.93625736, -16.87875748,
         -16.65612221, -15.87883949, -18.48574829, -19.30859566, -18.32104874]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [775]; unstable size 775; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 292, 1, 775] with unstable size 291 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 775] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 775] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [291]; unstable size 291; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 291] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 291] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.07465315,  0.67120814, -0.69678187, -0.40189290,  0.40540996,
         -1.27040446,  0.91172010,  1.11740494,  0.40299344]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.90053749, -18.83853912, -16.65795326, -15.93625736, -16.87875748,
         -16.65612221, -15.87883949, -18.48574829, -19.30859566, -18.32104874]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.90053940, -18.83854103, -16.65795326, -15.93625832, -16.87875938,
          -16.65612030, -15.87884331, -18.48575401, -19.30859756, -18.32105255],
         [-17.90053940, -18.83854103, -16.65795326, -15.93625832, -16.87875938,
          -16.65612030, -15.87884331, -18.48575401, -19.30859756, -18.32105255]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.96428108,  0.72169495,  0.94250107, -0.05741501]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0867 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 174, vnnlib ID: 174 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.01452446, -31.17614365, -24.06021309, -25.31211662, -23.70052147,
         -25.47224236, -25.36236954, -25.44280624, -27.95291138, -29.38704109]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [639]; unstable size 639; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 278, 1, 639] with unstable size 277 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 639] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 639] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [277]; unstable size 277; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 277] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 277] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.53353548,  4.77915478, -0.68763781,  0.12715709,  0.16958100,
          0.30826443,  0.61279356,  2.10399413,  3.39013529]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.01452446, -31.17614365, -24.06021309, -25.31211662, -23.70052147,
         -25.47224236, -25.36236954, -25.44280624, -27.95291138, -29.38704109]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.71807671, -30.91207504, -23.73194122, -25.07842064, -23.86753273,
          -25.28093910, -25.23051643, -25.63899803, -27.60635185, -29.14414406]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.13559151]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0833 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 175, vnnlib ID: 175 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-28.88498878, -31.32757950, -31.15767288, -32.62705231, -31.05282402,
         -32.13772202, -32.09079361, -30.79269218, -31.35886765, -30.31673813]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [770]; unstable size 770; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 291, 1, 770] with unstable size 290 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 770] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 770] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [290]; unstable size 290; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 290] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 290] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.78770685,  1.03243494,  1.96444631,  0.51057148,  1.33818662,
          1.22204232,  0.09967986,  0.93596244, -0.07644749]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-28.88498878, -31.32757950, -31.15767288, -32.62705231, -31.05282402,
         -32.13772202, -32.09079361, -30.79269218, -31.35886765, -30.31673813]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.59it/s]100%|██████████| 1/1 [00:00<00:00,  8.58it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.28597832, -31.01292419, -31.50415421, -32.71194839, -31.25744820,
          -32.18006134, -32.28217316, -30.93283844, -31.51461792, -29.99298286]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.70700455]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1191 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 23th iter
best_l after optimization: 8.5050048828125
alpha/beta optimization time: 0.30279970169067383
initial alpha-crown bounds: tensor([[8.78652573e-01, 1.08035851e+00, 2.04135513e+00, 5.90096712e-01,
         1.42439342e+00, 1.30016017e+00, 2.00366437e-01, 9.89597201e-01,
         2.43186951e-05]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 0 ; Worst class: (+ rhs) 2.4318695068359375e-05
verified with init bound!
Result: safe-incomplete in 0.4882 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 176, vnnlib ID: 176 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.17542076, -27.76688576, -22.42221451, -23.23637009, -22.93698311,
         -23.34073257, -23.85361671, -24.75134850, -25.51817131, -27.31844711]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [710]; unstable size 710; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 188, 1, 710] with unstable size 187 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 710] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 710] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 187] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.05221027,  3.04186678, -1.68551755, -1.26099968, -0.22333622,
          0.06938851,  0.46372625,  0.85233927,  2.67835474]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.17542076, -27.76688576, -22.42221451, -23.23637009, -22.93698311,
         -23.34073257, -23.85361671, -24.75134850, -25.51817131, -27.31844711]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-24.17541504, -27.76688766, -22.42221451, -23.23637199, -22.93698311,
          -23.34073448, -23.85361481, -24.75134277, -25.51817131, -27.31844521],
         [-24.17541504, -27.76688766, -22.42221451, -23.23637199, -22.93698311,
          -23.34073448, -23.85361481, -24.75134277, -25.51817131, -27.31844521]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.81415749, -0.29938889,  0.10436249]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]],


         [[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]],


         [[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0829 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 177, vnnlib ID: 177 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-45.55731201, -50.89083099, -42.06116486, -47.85534668, -48.62054062,
         -48.15819550, -49.32711411, -47.74969101, -49.46615982, -52.86323929]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [518]; unstable size 518; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 116, 1, 518] with unstable size 115 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 518] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 518] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [115]; unstable size 115; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 115] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 115] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.03216028, 7.96402073, 5.21769238, 5.94199753, 5.50237274, 6.70993805,
         5.09641886, 6.72968769, 9.94023228]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0666 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 178, vnnlib ID: 178 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-28.28612328, -36.58068848, -28.50667953, -31.36640739, -29.10656929,
         -32.13262939, -33.39686966, -30.94572258, -36.68356323, -37.42233658]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [770]; unstable size 770; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 150, 1, 770] with unstable size 149 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 770] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 770] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [149]; unstable size 149; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 149] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 6.97211361, -0.64362061,  1.92279041, -0.18267345,  2.60485005,
          3.75918341,  1.37062383,  7.21187735,  7.83290958]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-28.28612328, -36.58068848, -28.50667953, -31.36640739, -29.10656929,
         -32.13262939, -33.39686966, -30.94572258, -36.68356323, -37.42233658]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-28.54991722, -36.72984695, -28.28089142, -31.22305489, -28.90884018,
          -31.94745827, -33.18599701, -30.79593277, -36.82979584, -37.53469467],
         [-28.54991722, -36.72984695, -28.28089142, -31.22305489, -28.90884018,
          -31.94745827, -33.18599701, -30.79593277, -36.82979584, -37.53469467]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.26902580,  0.35892296]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0060 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0484 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 179, vnnlib ID: 179 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.31065178, -29.77011871, -24.73226166, -28.38901711, -26.21283531,
         -28.98853493, -28.51242447, -30.11011124, -25.90357208, -30.21725655]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [606]; unstable size 606; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 205, 1, 606] with unstable size 204 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 606] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 606] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [204]; unstable size 204; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 204] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 204] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.38776445, 1.62000215, 4.98641109, 2.86554289, 5.48513222, 5.11340523,
         6.28316832, 2.58398366, 6.84431171]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0304 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 180, vnnlib ID: 180 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.24666405, -28.76270676, -23.26070213, -22.05362892, -20.50691032,
         -21.35376549, -23.01077271, -17.43795013, -27.58108521, -26.06879044]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [599]; unstable size 599; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 274, 1, 599] with unstable size 273 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 599] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 599] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [273]; unstable size 273; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 273] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 273] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.87904930, 8.74207497, 3.91814947, 3.03320622, 2.01956224, 2.34560633,
         3.41726923, 7.67006540, 6.18134117]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0640 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 181, vnnlib ID: 181 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.61829376, -18.38642883, -14.96894455, -16.51321602, -15.02400494,
         -16.66117096, -14.13184452, -17.61631203, -17.11466599, -18.21944618]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [694]; unstable size 694; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 694] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 694] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 694] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 259] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.01481533,  2.06576967, -0.04681420,  1.60054743, -0.07306218,
          1.60960865,  2.27459693,  1.25393093,  2.08621836]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.61829376, -18.38642883, -14.96894455, -16.51321602, -15.02400494,
         -16.66117096, -14.13184452, -17.61631203, -17.11466599, -18.21944618]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.37it/s]100%|██████████| 1/1 [00:00<00:00,  8.36it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.09273529, -18.14864540, -14.29659462, -16.09573364, -14.54441929,
          -16.17729568, -13.98502541, -17.08440590, -16.74464989, -17.94149017],
         [-17.09273529, -18.14864540, -14.29659462, -16.09573364, -14.54441929,
          -16.17729568, -13.98502541, -17.08440590, -16.74464989, -17.94149017]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.31156921, 0.55939388]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1223 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.35643196105957
alpha/beta optimization time: 1.2526872158050537
initial alpha-crown bounds: tensor([[ 2.11682487,  2.15421200, -0.00883794,  1.63260925, -0.03195834,
          1.64549243,  2.32464266,  1.34506488,  2.17838144]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.03195834159851074
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.58984851837158
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.58980536460876
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.58977675437927
Verifying property 2 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.00883794]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.61829376, -18.38642883, -14.96894455, -16.51321602, -15.02400494,
        -16.66117096, -14.13184452, -17.61631203, -17.11466599, -18.21944618],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.00883794]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 694
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 257
Node /15 input 0: size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 964
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011563301086425781
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.008836030960083008
10 lb beta sum: 0.0, worst -0.008846759796142578
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0553    transfer 0.0001    finalize 0.0001    func 0.0558    
Accumulated time: func 0.0558    prepare 0.0002    bound 0.0553    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] 
split level 1: [/input-12, 12] 
split level 2: [/input-12, 61] 
split level 3: [/input-8, 1627] 
split level 4: [/input-8, 1635] 
split level 5: [/input-12, 92] 
split level 6: [/input-8, 1954] 
split level 7: [/input-8, 1051] 
split level 8: [/input-8, 1628] 
split level 9: [/input-8, 924] 
split level 10: [/input-8, 1969] 
split level 11: [/input-8, 477] 
split level 12: [/input-12, 71] 
split level 13: [/input-8, 410] 
split level 14: [/input-8, 155] 
split level 15: [/input-8, 1961] 
split level 16: [/input-8, 1962] 
split level 17: [/input-8, 418] 
split level 18: [/input-12, 50] 
split level 19: [/input-8, 1380] 
split level 20: [/input-8, 1963] 
split level 21: [/input-8, 1570] 
split level 22: [/input-8, 1589] 
split level 23: [/input-8, 1973] 
split level 24: [/input-8, 306] 
split level 25: [/input-8, 466] 
split level 26: [/input-8, 1246] 
split level 27: [/input-8, 1590] 
split level 28: [/input-8, 300] 
split level 29: [/input-8, 930] 
split level 30: [/input-8, 424] 
split level 31: [/input-8, 1560] 
split level 32: [/input-8, 339] 
split level 33: [/input-8, 1371] 
split level 34: [/input-8, 435] 
split level 35: [/input-8, 307] 
split level 36: [/input-8, 36] 
split level 37: [/input-8, 741] 
split level 38: [/input-8, 161] 
split level 39: [/input-8, 458] 
split level 40: [/input-8, 1290] 
split level 41: [/input-8, 957] 
split level 42: [/input-8, 436] 
split level 43: [/input-8, 995] 
split level 44: [/input-8, 758] 
split level 45: [/input-8, 1598] 
split level 46: [/input-8, 869] 
split level 47: [/input-8, 738] 
split level 48: [/input-8, 408] 
split level 49: [/input-8, 1619] 
split level 50: [/input-8, 281] 
split level 51: [/input-8, 1561] 
split level 52: [/input-8, 150] 
split level 53: [/input-8, 459] 
split level 54: [/input-8, 159] 
split level 55: [/input-8, 149] 
split level 56: [/input-8, 1968] 
split level 57: [/input-8, 276] 
split level 58: [/input-8, 1680] 
split level 59: [/input-8, 625] 
split level 60: [/input-8, 177] 
split level 61: [/input-8, 1674] 
split level 62: [/input-8, 298] 
split level 63: [/input-12, 20] 
split level 64: [/input-8, 342] 
split level 65: [/input-8, 1038] 
split level 66: [/input-8, 243] 
split level 67: [/input-8, 102] 
split level 68: [/input-8, 299] 
split level 69: [/input-8, 349] 
split level 70: [/input-8, 908] 
split level 71: [/input-8, 770] 
split level 72: [/input-8, 1370] 
split level 73: [/input-8, 1638] 
split level 74: [/input-8, 357] 
split level 75: [/input-8, 1515] 
split level 76: [/input-8, 1701] 
split level 77: [/input-8, 1678] 
split level 78: [/input-8, 782] 
split level 79: [/input-8, 285] 
split level 80: [/input-8, 110] 
split level 81: [/input-8, 802] 
split level 82: [/input-8, 769] 
split level 83: [/input-8, 2036] 
split level 84: [/input-8, 771] 
split level 85: [/input-8, 85] 
split level 86: [/input-8, 494] 
split level 87: [/input-8, 244] 
split level 88: [/input-8, 1381] 
split level 89: [/input-8, 1945] 
split level 90: [/input-8, 997] 
split level 91: [/input, 1381] 
split level 92: [/input-8, 773] 
split level 93: [/input-8, 93] 
split level 94: [/input, 2787] 
split level 95: [/input-8, 1199] 
split level 96: [/input, 3314] 
split level 97: [/input-8, 245] 
split level 98: [/input-8, 1034] 
split level 99: [/input-8, 176] 
split level 100: [/input-8, 1210] 
split level 101: [/input-8, 169] 
split level 102: [/input-8, 1060] 
split level 103: [/input-8, 1947] 
split level 104: [/input, 4062] 
split level 105: [/input-8, 827] 
split level 106: [/input, 2804] 
split level 107: [/input, 1455] 
split level 108: [/input-8, 772] 
split level 109: [/input-8, 160] 
split level 110: [/input-8, 1656] 
split level 111: [/input-8, 411] 
split level 112: [/input, 2694] 
split level 113: [/input-8, 1227] 
split level 114: [/input-8, 1081] 
split level 115: [/input-8, 1225] 
split level 116: [/input, 2802] 
split level 117: [/input-8, 801] 
split level 118: [/input-8, 247] 
split level 119: [/input-8, 634] 
split level 120: [/input, 3463] 
split level 121: [/input-8, 246] 
split level 122: [/input-8, 71] 
split level 123: [/input-8, 449] 
split level 124: [/input, 1013] 
split level 125: [/input, 3991] 
split level 126: [/input, 85] 
split level 127: [/input-8, 1698] 
split level 128: [/input-8, 460] 
split level 129: [/input-8, 1937] 
split level 130: [/input-8, 1601] 
split level 131: [/input-8, 144] 
split level 132: [/input, 2941] 
split level 133: [/input-8, 1702] 
split level 134: [/input, 1382] 
split level 135: [/input, 832] 
split level 136: [/input-8, 488] 
split level 137: [/input, 3453] 
split level 138: [/input-8, 97] 
split level 139: [/input-8, 774] 
split level 140: [/input-8, 1609] 
split level 141: [/input, 1668] 
split level 142: [/input-8, 1073] 
split level 143: [/input, 1010] 
split level 144: [/input, 535] 
split level 145: [/input-8, 393] 
split level 146: [/input-8, 404] 
split level 147: [/input-8, 2037] 
split level 148: [/input-8, 1555] 
split level 149: [/input, 1488] 
split level 150: [/input, 2788] 
split level 151: [/input-8, 237] 
split level 152: [/input-8, 987] 
split level 153: [/input, 281] 
split level 154: [/input-8, 910] 
split level 155: [/input, 2012] 
split level 156: [/input-8, 251] 
split level 157: [/input-8, 1230] 
split level 158: [/input, 3234] 
split level 159: [/input, 844] 
split level 160: [/input-8, 1035] 
split level 161: [/input-8, 1688] 
split level 162: [/input, 841] 
split level 163: [/input, 621] 
split level 164: [/input-8, 37] 
split level 165: [/input-8, 1611] 
split level 166: [/input, 2908] 
split level 167: [/input, 3254] 
split level 168: [/input, 1252] 
split level 169: [/input, 610] 
split level 170: [/input, 3264] 
split level 171: [/input, 1305] 
split level 172: [/input, 509] 
split level 173: [/input-8, 1337] 
split level 174: [/input, 910] 
split level 175: [/input-8, 1789] 
split level 176: [/input-8, 451] 
split level 177: [/input, 1197] 
split level 178: [/input, 3049] 
split level 179: [/input, 2073] 
split level 180: [/input-8, 496] 
split level 181: [/input, 2843] 
split level 182: [/input, 857] 
split level 183: [/input-8, 407] 
split level 184: [/input, 1687] 
split level 185: [/input, 2009] 
split level 186: [/input-8, 255] 
split level 187: [/input, 2088] 
split level 188: [/input, 495] 
split level 189: [/input, 1148] 
split level 190: [/input, 2089] 
split level 191: [/input, 732] 
split level 192: [/input-8, 626] 
split level 193: [/input, 2013] 
split level 194: [/input-8, 391] 
split level 195: [/input, 514] 
split level 196: [/input, 3387] 
split level 197: [/input-8, 236] 
split level 198: [/input, 526] 
split level 199: [/input, 1017] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.008778095245361328
10 lb beta sum: 0.0, worst -0.008772850036621094
Time: prepare 0.0117    bound 0.1006    transfer 0.0021    finalize 0.0032    func 0.1202    
Accumulated time: func 0.1760    prepare 0.0221    bound 0.1559    transfer 0.0022    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.19408154) min lb tensor(-0.00876856)
Number of Verified Splits: 75 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.013981819152832031 
BICCOS Cumulative time: 0.013981819152832031
Preprocessing time: 0.00999140739440918 Inference time: 0.002691507339477539 Add cuts time: 0.0011119842529296875 Cut analysis time: 0.000186920166015625
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5325    set_bounds 0.0089    solve 0.1204    add 0.0100    
Accumulated time: pickout 0.0003    decision 0.5325    set_bounds 0.0089    solve 0.1204    add 0.0100    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46]), tensor([-1.]), tensor([0]), tensor([4.61041427e-10]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46]), tensor([1.]), tensor([0]), tensor([2.56671628e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.03352785110473633

all verified at 0th iter
Time: prepare 0.0003    bound 0.0040    transfer 0.0001    finalize 0.0001    func 0.0046    
Accumulated time: func 0.1806    prepare 0.0224    bound 0.1599    transfer 0.0023    finalize 0.0034    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.6495978832245
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.6495361328125
Verifying property 4 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03195834]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.61829376, -18.38642883, -14.96894455, -16.51321602, -15.02400494,
        -16.66117096, -14.13184452, -17.61631203, -17.11466599, -18.21944618],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03195834]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 694
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 257
Node /15 input 0: size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 964
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.632110595703125e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03195643424987793
10 lb beta sum: 0.0, worst -0.031957387924194336
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0541    transfer 0.0001    finalize 0.0001    func 0.0546    
Accumulated time: func 0.0546    prepare 0.0002    bound 0.0541    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] 
split level 1: [/input-12, 50] 
split level 2: [/input-12, 61] 
split level 3: [/input-12, 10] 
split level 4: [/input-12, 4] 
split level 5: [/input-12, 92] 
split level 6: [/input-8, 1051] 
split level 7: [/input-8, 155] 
split level 8: [/input-12, 71] 
split level 9: [/input-8, 306] 
split level 10: [/input-8, 1570] 
split level 11: [/input-8, 418] 
split level 12: [/input-8, 1370] 
split level 13: [/input-8, 300] 
split level 14: [/input-8, 349] 
split level 15: [/input-8, 410] 
split level 16: [/input-8, 1246] 
split level 17: [/input-8, 924] 
split level 18: [/input-8, 307] 
split level 19: [/input-8, 342] 
split level 20: [/input-8, 1380] 
split level 21: [/input-8, 1371] 
split level 22: [/input-8, 170] 
split level 23: [/input-8, 1680] 
split level 24: [/input-8, 299] 
split level 25: [/input-12, 55] 
split level 26: [/input-8, 149] 
split level 27: [/input-8, 1635] 
split level 28: [/input-8, 741] 
split level 29: [/input-8, 150] 
split level 30: [/input-8, 408] 
split level 31: [/input-8, 357] 
split level 32: [/input-8, 1589] 
split level 33: [/input-8, 1560] 
split level 34: [/input-8, 1381] 
split level 35: [/input-8, 1963] 
split level 36: [/input-8, 869] 
split level 37: [/input-8, 339] 
split level 38: [/input-8, 908] 
split level 39: [/input-8, 1561] 
split level 40: [/input-8, 2036] 
split level 41: [/input-8, 177] 
split level 42: [/input-8, 1210] 
split level 43: [/input-8, 738] 
split level 44: [/input-8, 1590] 
split level 45: [/input-8, 161] 
split level 46: [/input-8, 957] 
split level 47: [/input-8, 1324] 
split level 48: [/input-8, 1065] 
split level 49: [/input-8, 2037] 
split level 50: [/input-8, 1290] 
split level 51: [/input-8, 1515] 
split level 52: [/input-8, 758] 
split level 53: [/input-8, 36] 
split level 54: [/input-8, 424] 
split level 55: [/input-8, 298] 
split level 56: [/input-8, 179] 
split level 57: [/input-8, 1073] 
split level 58: [/input-8, 1962] 
split level 59: [/input-8, 1598] 
split level 60: [/input-8, 770] 
split level 61: [/input-8, 285] 
split level 62: [/input-8, 1674] 
split level 63: [/input-8, 1060] 
split level 64: [/input, 85] 
split level 65: [/input-8, 769] 
split level 66: [/input-8, 254] 
split level 67: [/input-8, 956] 
split level 68: [/input-8, 2011] 
split level 69: [/input-8, 1332] 
split level 70: [/input, 3497] 
split level 71: [/input, 3314] 
split level 72: [/input-8, 251] 
split level 73: [/input-8, 1627] 
split level 74: [/input, 1381] 
split level 75: [/input-8, 1941] 
split level 76: [/input, 2953] 
split level 77: [/input-8, 1688] 
split level 78: [/input-8, 466] 
split level 79: [/input-8, 37] 
split level 80: [/input-8, 995] 
split level 81: [/input, 1382] 
split level 82: [/input, 2919] 
split level 83: [/input-8, 252] 
split level 84: [/input-8, 997] 
split level 85: [/input-8, 1969] 
split level 86: [/input-8, 802] 
split level 87: [/input-8, 1035] 
split level 88: [/input, 3466] 
split level 89: [/input-8, 1081] 
split level 90: [/input, 906] 
split level 91: [/input-8, 245] 
split level 92: [/input, 2787] 
split level 93: [/input, 410] 
split level 94: [/input-8, 243] 
split level 95: [/input-8, 827] 
split level 96: [/input-8, 102] 
split level 97: [/input-8, 1162] 
split level 98: [/input-8, 244] 
split level 99: [/input-8, 773] 
split level 100: [/input, 2802] 
split level 101: [/input-8, 1232] 
split level 102: [/input-8, 1034] 
split level 103: [/input-8, 253] 
split level 104: [/input-8, 1656] 
split level 105: [/input-8, 159] 
split level 106: [/input-8, 281] 
split level 107: [/input-8, 1362] 
split level 108: [/input, 2804] 
split level 109: [/input-8, 169] 
split level 110: [/input-8, 435] 
split level 111: [/input, 2930] 
split level 112: [/input-8, 782] 
split level 113: [/input-8, 771] 
split level 114: [/input-8, 38] 
split level 115: [/input-8, 30] 
split level 116: [/input, 345] 
split level 117: [/input, 2931] 
split level 118: [/input-8, 255] 
split level 119: [/input-8, 246] 
split level 120: [/input, 1687] 
split level 121: [/input, 2954] 
split level 122: [/input, 3387] 
split level 123: [/input, 1013] 
split level 124: [/input-8, 972] 
split level 125: [/input, 857] 
split level 126: [/input, 2904] 
split level 127: [/input, 1406] 
split level 128: [/input-8, 1961] 
split level 129: [/input-8, 144] 
split level 130: [/input, 844] 
split level 131: [/input-8, 820] 
split level 132: [/input-8, 1601] 
split level 133: [/input-8, 1199] 
split level 134: [/input-8, 772] 
split level 135: [/input, 343] 
split level 136: [/input-8, 1968] 
split level 137: [/input-8, 1347] 
split level 138: [/input, 828] 
split level 139: [/input-8, 816] 
split level 140: [/input-8, 176] 
split level 141: [/input, 2028] 
split level 142: [/input, 1252] 
split level 143: [/input-8, 411] 
split level 144: [/input-8, 160] 
split level 145: [/input, 2788] 
split level 146: [/input, 2638] 
split level 147: [/input, 426] 
split level 148: [/input, 281] 
split level 149: [/input, 839] 
split level 150: [/input, 104] 
split level 151: [/input-8, 1225] 
split level 152: [/input, 1197] 
split level 153: [/input, 135] 
split level 154: [/input, 841] 
split level 155: [/input, 2871] 
split level 156: [/input, 2012] 
split level 157: [/input, 2637] 
split level 158: [/input, 2027] 
split level 159: [/input, 2013] 
split level 160: [/input, 716] 
split level 161: [/input, 2941] 
split level 162: [/input, 359] 
split level 163: [/input, 495] 
split level 164: [/input, 2884] 
split level 165: [/input, 2344] 
split level 166: [/input, 1305] 
split level 167: [/input-8, 1787] 
split level 168: [/input, 812] 
split level 169: [/input, 3496] 
split level 170: [/input, 791] 
split level 171: [/input, 732] 
split level 172: [/input, 921] 
split level 173: [/input-8, 801] 
split level 174: [/input-8, 963] 
split level 175: [/input, 838] 
split level 176: [/input, 837] 
split level 177: [/input, 3373] 
split level 178: [/input, 509] 
split level 179: [/input, 3528] 
split level 180: [/input, 789] 
split level 181: [/input, 792] 
split level 182: [/input, 811] 
split level 183: [/input, 3234] 
split level 184: [/input-8, 407] 
split level 185: [/input, 1521] 
split level 186: [/input, 1300] 
split level 187: [/input, 2089] 
split level 188: [/input, 325] 
split level 189: [/input-8, 71] 
split level 190: [/input, 2088] 
split level 191: [/input, 163] 
split level 192: [/input, 621] 
split level 193: [/input, 3197] 
split level 194: [/input, 938] 
split level 195: [/input, 2085] 
split level 196: [/input, 1317] 
split level 197: [/input, 2073] 
split level 198: [/input, 3093] 
split level 199: [/input, 2086] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0319058895111084
10 lb beta sum: 0.0, worst -0.031900882720947266
Time: prepare 0.0116    bound 0.1019    transfer 0.0025    finalize 0.0029    func 0.1217    
Accumulated time: func 0.1762    prepare 0.0220    bound 0.1560    transfer 0.0026    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.36960173) min lb tensor(-0.03189564)
Number of Verified Splits: 18 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011029481887817383 
BICCOS Cumulative time: 0.011029481887817383
Preprocessing time: 0.009937763214111328 Inference time: 0.000675201416015625 Add cuts time: 0.00023555755615234375 Cut analysis time: 0.00018095970153808594
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0016    decision 0.5282    set_bounds 0.0085    solve 0.1217    add 0.0098    
Accumulated time: pickout 0.0016    decision 0.5282    set_bounds 0.0085    solve 0.1217    add 0.0098    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46]), tensor([-1.]), tensor([0]), tensor([4.84607021e-10]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46]), tensor([1.]), tensor([0]), tensor([5.75661872e-20]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0021674633026123047

all verified at 1th iter
Time: prepare 0.0005    bound 0.0114    transfer 0.0001    finalize 0.0001    func 0.0122    
Accumulated time: func 0.1884    prepare 0.0224    bound 0.1675    transfer 0.0028    finalize 0.0032    
After pruning, left:  0

Back to Regular BaB


Properties batch 5, size 1
Remaining timeout: 196.66961789131165
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 196.66955256462097
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 196.66950678825378
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 196.66948699951172
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.3306 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 182, vnnlib ID: 182 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-39.90199280, -44.40210342, -40.76707840, -43.34727097, -43.50157547,
         -44.47279358, -43.63641739, -44.64598465, -42.91106033, -44.25598907]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [505]; unstable size 505; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 505] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 505] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 505] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 148] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.55335236, 0.12430668, 2.72152352, 3.00824594, 3.66845274, 2.93544912,
         3.93169498, 2.25763512, 3.53325558]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0743 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 183, vnnlib ID: 183 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.65114021, -23.35434914, -17.16299438, -18.00729561, -16.22119331,
         -18.46559906, -16.77936554, -19.72109604, -21.88067436, -23.28927422]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [818]; unstable size 818; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 507, 1, 818] with unstable size 506 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 818] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 818] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [506]; unstable size 506; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 506] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 506] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.09171438,  3.97727156, -0.48304814,  0.36927640,  0.67224592,
         -1.08889985,  1.76183963,  2.47835636,  4.03331804]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.65114021, -23.35434914, -17.16299438, -18.00729561, -16.22119331,
         -18.46559906, -16.77936554, -19.72109604, -21.88067436, -23.28927422]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.54929352, -24.17858124, -17.99969864, -18.86230087, -17.29471970,
          -19.35946846, -17.28303909, -20.91881943, -22.74308395, -24.15728378],
         [-21.54929352, -24.17858124, -17.99969864, -18.86230087, -17.29471970,
          -19.35946846, -17.28303909, -20.91881943, -22.74308395, -24.15728378]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.70497894, -0.01168060]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0752 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 184, vnnlib ID: 184 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.96131706, -20.58467484, -24.37945938, -24.98764610, -24.46944046,
         -25.62986183, -27.33307266, -24.34143448, -19.32966995, -19.06360817]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [585]; unstable size 585; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 585] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 585] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 585] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 203] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.81747198,  0.87446845,  3.82560587,  4.56164408,  3.79659128,
          5.13660002,  6.65209579,  3.81942320, -1.01505280]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.96131706, -20.58467484, -24.37945938, -24.98764610, -24.46944046,
         -25.62986183, -27.33307266, -24.34143448, -19.32966995, -19.06360817]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.04928017, -20.95272827, -24.45425415, -25.08170509, -24.51628304,
          -25.76401329, -27.44613266, -24.56295776, -19.09752655, -19.62283516]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.52530861]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0056 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0718 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 185, vnnlib ID: 185 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.26067162, -13.01693153, -13.98059750, -14.13839722, -13.50657654,
         -14.73349571, -13.24168968, -14.22063255, -15.82023048, -12.07003784]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [650]; unstable size 650; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 234, 1, 650] with unstable size 233 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 650] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 650] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [233]; unstable size 233; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 233] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 233] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.41751862,  0.11600983,  0.06584787,  0.44963503, -0.42950106,
          0.86466265, -0.55640650,  0.24044323,  2.07411861]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.26067162, -13.01693153, -13.98059750, -14.13839722, -13.50657654,
         -14.73349571, -13.24168968, -14.22063255, -15.82023048, -12.07003784]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.50it/s]100%|██████████| 1/1 [00:00<00:00,  8.49it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.86489582, -12.93333149, -13.34103966, -13.58108902, -12.91056156,
          -14.13509750, -12.40045166, -13.78853512, -15.49103832, -12.07455730],
         [-15.86489582, -12.93333149, -13.34103966, -13.58108902, -12.91056156,
          -14.13509750, -12.40045166, -13.78853512, -15.49103832, -12.07455730]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.83600426, 0.32589436]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1205 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 5.902817726135254
alpha/beta optimization time: 1.2504286766052246
initial alpha-crown bounds: tensor([[ 2.50665379,  0.15565372,  0.15051556,  0.50773716, -0.35287189,
          0.92790484, -0.47352743,  0.32139444,  2.15935755]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.4735274314880371
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5903971195221
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.59035778045654
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.5903344154358
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.590313911438
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.59029507637024
Verifying property 4 with 1 instances.
##### Instance 185 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.35287189]], device='cuda:0') need to verify.
Model prediction is: tensor([-16.26067162, -13.01693153, -13.98059750, -14.13839722, -13.50657654,
        -14.73349571, -13.24168968, -14.22063255, -15.82023048, -12.07003784],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.35287189]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 650
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 225
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 899
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010514259338378906
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3528709411621094
10 lb beta sum: 0.0, worst -0.352874755859375
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0540    transfer 0.0001    finalize 0.0001    func 0.0544    
Accumulated time: func 0.0544    prepare 0.0002    bound 0.0540    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 13] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 69] 
split level 4: [/input-12, 4] 
split level 5: [/input-12, 2] 
split level 6: [/input-12, 90] 
split level 7: [/input-12, 29] 
split level 8: [/input-12, 38] 
split level 9: [/input-12, 79] 
split level 10: [/input-12, 34] 
split level 11: [/input-12, 12] 
split level 12: [/input-8, 1690] 
split level 13: [/input-12, 64] 
split level 14: [/input-12, 55] 
split level 15: [/input-8, 923] 
split level 16: [/input-8, 913] 
split level 17: [/input-8, 820] 
split level 18: [/input-8, 1693] 
split level 19: [/input-8, 1674] 
split level 20: [/input-8, 915] 
split level 21: [/input-8, 1966] 
split level 22: [/input-8, 1698] 
split level 23: [/input-8, 1714] 
split level 24: [/input-8, 336] 
split level 25: [/input-8, 249] 
split level 26: [/input-8, 240] 
split level 27: [/input-8, 930] 
split level 28: [/input, 3571] 
split level 29: [/input-8, 1323] 
split level 30: [/input-8, 1705] 
split level 31: [/input-8, 1934] 
split level 32: [/input-8, 1718] 
split level 33: [/input-8, 1713] 
split level 34: [/input-8, 1932] 
split level 35: [/input-8, 742] 
split level 36: [/input-8, 1676] 
split level 37: [/input-8, 250] 
split level 38: [/input-8, 1406] 
split level 39: [/input-8, 916] 
split level 40: [/input-8, 1951] 
split level 41: [/input-8, 242] 
split level 42: [/input-8, 1040] 
split level 43: [/input, 3572] 
split level 44: [/input-8, 305] 
split level 45: [/input-8, 239] 
split level 46: [/input-8, 750] 
split level 47: [/input-8, 300] 
split level 48: [/input, 2836] 
split level 49: [/input-8, 1704] 
split level 50: [/input-8, 1483] 
split level 51: [/input-8, 757] 
split level 52: [/input-8, 186] 
split level 53: [/input-8, 55] 
split level 54: [/input, 2167] 
split level 55: [/input, 328] 
split level 56: [/input, 2013] 
split level 57: [/input-8, 41] 
split level 58: [/input, 647] 
split level 59: [/input, 648] 
split level 60: [/input-8, 254] 
split level 61: [/input-8, 1954] 
split level 62: [/input, 2403] 
split level 63: [/input, 291] 
split level 64: [/input, 2787] 
split level 65: [/input, 1019] 
split level 66: [/input, 2004] 
split level 67: [/input, 2425] 
split level 68: [/input, 3794] 
split level 69: [/input, 3418] 
split level 70: [/input, 2340] 
split level 71: [/input-8, 331] 
split level 72: [/input, 343] 
split level 73: [/input-8, 2003] 
split level 74: [/input-8, 1634] 
split level 75: [/input, 2392] 
split level 76: [/input, 2007] 
split level 77: [/input, 1556] 
split level 78: [/input, 2933] 
split level 79: [/input-8, 581] 
split level 80: [/input, 1015] 
split level 81: [/input, 1350] 
split level 82: [/input, 856] 
split level 83: [/input-8, 734] 
split level 84: [/input-8, 398] 
split level 85: [/input-8, 1325] 
split level 86: [/input-8, 723] 
split level 87: [/input, 487] 
split level 88: [/input-8, 487] 
split level 89: [/input, 1013] 
split level 90: [/input, 490] 
split level 91: [/input-8, 479] 
split level 92: [/input, 3433] 
split level 93: [/input, 2835] 
split level 94: [/input, 2137] 
split level 95: [/input, 2552] 
split level 96: [/input, 2021] 
split level 97: [/input, 2002] 
split level 98: [/input-8, 246] 
split level 99: [/input, 2752] 
split level 100: [/input, 1020] 
split level 101: [/input, 312] 
split level 102: [/input, 2020] 
split level 103: [/input, 2556] 
split level 104: [/input, 2199] 
split level 105: [/input, 2006] 
split level 106: [/input, 2375] 
split level 107: [/input, 2010] 
split level 108: [/input, 2457] 
split level 109: [/input-8, 47] 
split level 110: [/input, 2949] 
split level 111: [/input, 3738] 
split level 112: [/input, 3481] 
split level 113: [/input-8, 765] 
split level 114: [/input, 83] 
split level 115: [/input, 2284] 
split level 116: [/input-8, 132] 
split level 117: [/input, 2339] 
split level 118: [/input-8, 2001] 
split level 119: [/input-8, 1311] 
split level 120: [/input, 2008] 
split level 121: [/input-8, 1245] 
split level 122: [/input, 2003] 
split level 123: [/input-8, 1383] 
split level 124: [/input-8, 1403] 
split level 125: [/input, 3384] 
split level 126: [/input, 2300] 
split level 127: [/input, 2768] 
split level 128: [/input, 3280] 
split level 129: [/input, 2553] 
split level 130: [/input, 2357] 
split level 131: [/input-8, 1646] 
split level 132: [/input, 3419] 
split level 133: [/input, 2409] 
split level 134: [/input, 327] 
split level 135: [/input, 486] 
split level 136: [/input, 3563] 
split level 137: [/input-8, 238] 
split level 138: [/input, 427] 
split level 139: [/input, 3788] 
split level 140: [/input, 348] 
split level 141: [/input, 1973] 
split level 142: [/input-8, 1204] 
split level 143: [/input, 3452] 
split level 144: [/input, 65] 
split level 145: [/input, 1348] 
split level 146: [/input, 2281] 
split level 147: [/input, 733] 
split level 148: [/input, 2147] 
split level 149: [/input, 817] 
split level 150: [/input, 2395] 
split level 151: [/input, 3300] 
split level 152: [/input, 701] 
split level 153: [/input, 858] 
split level 154: [/input, 396] 
split level 155: [/input, 2180] 
split level 156: [/input, 2551] 
split level 157: [/input, 1138] 
split level 158: [/input, 791] 
split level 159: [/input, 2341] 
split level 160: [/input, 2385] 
split level 161: [/input, 645] 
split level 162: [/input, 3785] 
split level 163: [/input, 2204] 
split level 164: [/input, 1851] 
split level 165: [/input, 840] 
split level 166: [/input, 2558] 
split level 167: [/input, 2882] 
split level 168: [/input, 824] 
split level 169: [/input, 2878] 
split level 170: [/input, 2098] 
split level 171: [/input-8, 195] 
split level 172: [/input-8, 1589] 
split level 173: [/input, 2087] 
split level 174: [/input, 859] 
split level 175: [/input, 2901] 
split level 176: [/input, 739] 
split level 177: [/input-8, 495] 
split level 178: [/input, 3264] 
split level 179: [/input, 3279] 
split level 180: [/input, 2298] 
split level 181: [/input, 651] 
split level 182: [/input, 2400] 
split level 183: [/input, 813] 
split level 184: [/input, 2417] 
split level 185: [/input, 2472] 
split level 186: [/input, 2297] 
split level 187: [/input-8, 1385] 
split level 188: [/input, 68] 
split level 189: [/input, 2277] 
split level 190: [/input, 3972] 
split level 191: [/input, 1003] 
split level 192: [/input, 2291] 
split level 193: [/input, 1251] 
split level 194: [/input, 2840] 
split level 195: [/input, 2302] 
split level 196: [/input, 2469] 
split level 197: [/input, 2849] 
split level 198: [/input, 3096] 
split level 199: [/input, 2912] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3527388572692871
10 lb beta sum: 0.0, worst -0.35274600982666016
Time: prepare 0.0117    bound 0.1006    transfer 0.0012    finalize 0.0030    func 0.1191    
Accumulated time: func 0.1735    prepare 0.0220    bound 0.1546    transfer 0.0013    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.30284384) min lb tensor(-0.35273886)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010316610336303711 
BICCOS Cumulative time: 0.010316610336303711
Preprocessing time: 0.00987696647644043 Inference time: 0.0001506805419921875 Add cuts time: 6.437301635742188e-05 Cut analysis time: 0.00022459030151367188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.33612 (1), -0.33607 (1), -0.33556 (1), -0.33518 (1), -0.33515 (1), -0.33378 (1), -0.33348 (1), -0.33337 (1), -0.33115 (1), -0.33034 (1), -0.33017 (1), -0.33012 (1), -0.33011 (1), -0.32917 (1), -0.32909 (1), -0.32842 (1), -0.32840 (1), -0.32833 (1), -0.32716 (1), -0.32651 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5263    set_bounds 0.0093    solve 0.1192    add 0.0793    
Accumulated time: pickout 0.0003    decision 0.5263    set_bounds 0.0093    solve 0.1192    add 0.0793    
Current (lb-rhs): -0.3361210823059082
50 domains visited
Cumulative time: 0.8125631809234619

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 13] [/input-12, 13] [/input-12, 46] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] 
split level 1: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 46] [/input-12, 4] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 90] [/input-12, 90] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2822880744934082
10 lb beta sum: 0.5416095852851868, worst -0.26552900671958923
Time: prepare 0.0071    bound 0.1198    transfer 0.0007    finalize 0.0023    func 0.1325    
Accumulated time: func 0.3061    prepare 0.0294    bound 0.2743    transfer 0.0020    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.22604465) min lb tensor(-0.26535761)
Number of Verified Splits: 54 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.015776872634887695 
BICCOS Cumulative time: 0.026093482971191406
Preprocessing time: 0.011816740036010742 Inference time: 0.0022253990173339844 Add cuts time: 0.0013854503631591797 Cut analysis time: 0.00034928321838378906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11972 (2), -0.11905 (2), -0.11864 (2), -0.11680 (2), -0.11492 (2), -0.11385 (2), -0.11170 (2), -0.10985 (2), -0.10817 (2), -0.10379 (2), -0.10368 (2), -0.10298 (2), -0.10167 (2), -0.09754 (2), -0.09688 (2), -0.09684 (2), -0.09442 (2), -0.09118 (2), -0.09100 (2), -0.09087 (2), 
Length of domains: 50
Time: pickout 0.0013    decision 0.0202    set_bounds 0.0128    solve 0.1326    add 0.1111    
Accumulated time: pickout 0.0016    decision 0.5465    set_bounds 0.0221    solve 0.2518    add 0.1904    
Current (lb-rhs): -0.11972147226333618
100 domains visited
Cumulative time: 1.1100962162017822

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 13] [/input-12, 69] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] 
split level 1: [/input-12, 4] [/input-12, 69] [/input-12, 4] [/input-12, 69] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 2] [/input-12, 4] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 2] [/input-12, 69] [/input-12, 69] [/input-12, 2] [/input-12, 4] 
split level 3: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08437299728393555
10 lb beta sum: 0.5134057998657227, worst -0.01782834529876709
Time: prepare 0.0061    bound 0.1249    transfer 0.0007    finalize 0.0024    func 0.1367    
Accumulated time: func 0.4428    prepare 0.0357    bound 0.3992    transfer 0.0027    finalize 0.0079    
all_split False
======================Cut inference begins======================
max lb tensor(0.29270995) min lb tensor(-0.01512134)
Number of Verified Splits: 395 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03682708740234375 
BICCOS Cumulative time: 0.06292057037353516
Preprocessing time: 0.011467695236206055 Inference time: 0.01802229881286621 Add cuts time: 0.007139444351196289 Cut analysis time: 0.0001976490020751953
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0077    decision 0.0196    set_bounds 0.0153    solve 0.1368    add 0.0185    
Accumulated time: pickout 0.0093    decision 0.5660    set_bounds 0.0374    solve 0.3886    add 0.2089    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 13, 46]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([8.63810976e-14, 1.35563299e-01, 8.94118994e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 13, 46]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([8.63810976e-14, 1.35563299e-01, 1.68663189e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 13]), tensor([-1.,  1.]), tensor([0, 0]), tensor([8.63810976e-14, 2.34083697e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2,  4, 13]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([0.00141438, 0.10609291, 0.19830261]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2,  4, 13]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([0.00141438, 0.10609291, 0.21992503]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2,  4, 13]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.00141438, 0.17812537, 0.09950791]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2,  4, 13]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([0.00141438, 0.17812537, 0.22238503]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  7
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0600128173828125

all verified at 2th iter
Time: prepare 0.0005    bound 0.0160    transfer 0.0002    finalize 0.0002    func 0.0169    
Accumulated time: func 0.4596    prepare 0.0362    bound 0.4152    transfer 0.0028    finalize 0.0081    
After pruning, left:  0

Back to Regular BaB


Properties batch 5, size 1
Remaining timeout: 197.0062563419342
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.0061798095703
Verifying property 6 with 1 instances.
##### Instance 185 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.47352743]], device='cuda:0') need to verify.
Model prediction is: tensor([-16.26067162, -13.01693153, -13.98059750, -14.13839722, -13.50657654,
        -14.73349571, -13.24168968, -14.22063255, -15.82023048, -12.07003784],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.47352743]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 650
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 225
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 899
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010466575622558594
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4735264778137207
10 lb beta sum: 0.0, worst -0.47353458404541016
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0541    transfer 0.0001    finalize 0.0001    func 0.0546    
Accumulated time: func 0.0546    prepare 0.0002    bound 0.0541    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] 
split level 1: [/input-12, 0] 
split level 2: [/input-12, 83] 
split level 3: [/input-12, 38] 
split level 4: [/input-12, 29] 
split level 5: [/input-12, 4] 
split level 6: [/input-12, 13] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 46] 
split level 9: [/input-12, 12] 
split level 10: [/input-12, 58] 
split level 11: [/input-12, 90] 
split level 12: [/input-12, 69] 
split level 13: [/input-8, 1690] 
split level 14: [/input-8, 820] 
split level 15: [/input-8, 1966] 
split level 16: [/input-12, 79] 
split level 17: [/input-8, 1713] 
split level 18: [/input-12, 55] 
split level 19: [/input-8, 1693] 
split level 20: [/input-8, 1974] 
split level 21: [/input-8, 1676] 
split level 22: [/input-12, 6] 
split level 23: [/input-12, 34] 
split level 24: [/input-8, 1714] 
split level 25: [/input-8, 1698] 
split level 26: [/input-8, 1325] 
split level 27: [/input-8, 1718] 
split level 28: [/input-8, 1674] 
split level 29: [/input-8, 1687] 
split level 30: [/input-8, 1932] 
split level 31: [/input-8, 1951] 
split level 32: [/input-8, 1705] 
split level 33: [/input-8, 1704] 
split level 34: [/input-8, 601] 
split level 35: [/input-8, 1954] 
split level 36: [/input-8, 913] 
split level 37: [/input-8, 1323] 
split level 38: [/input-8, 923] 
split level 39: [/input, 2167] 
split level 40: [/input-8, 930] 
split level 41: [/input-8, 2003] 
split level 42: [/input-8, 1406] 
split level 43: [/input-8, 1934] 
split level 44: [/input-8, 588] 
split level 45: [/input, 2392] 
split level 46: [/input, 1350] 
split level 47: [/input-8, 621] 
split level 48: [/input-8, 750] 
split level 49: [/input, 2425] 
split level 50: [/input, 856] 
split level 51: [/input, 328] 
split level 52: [/input, 2137] 
split level 53: [/input-8, 1646] 
split level 54: [/input, 3433] 
split level 55: [/input, 872] 
split level 56: [/input, 3418] 
split level 57: [/input-8, 581] 
split level 58: [/input-8, 915] 
split level 59: [/input, 3571] 
split level 60: [/input, 3572] 
split level 61: [/input, 2199] 
split level 62: [/input, 1013] 
split level 63: [/input, 1661] 
split level 64: [/input-8, 595] 
split level 65: [/input-8, 742] 
split level 66: [/input, 2403] 
split level 67: [/input, 2552] 
split level 68: [/input-8, 336] 
split level 69: [/input-8, 1403] 
split level 70: [/input, 3452] 
split level 71: [/input-8, 331] 
split level 72: [/input, 3794] 
split level 73: [/input, 1020] 
split level 74: [/input, 857] 
split level 75: [/input-8, 1311] 
split level 76: [/input, 312] 
split level 77: [/input, 3419] 
split level 78: [/input, 3512] 
split level 79: [/input, 3384] 
split level 80: [/input-8, 757] 
split level 81: [/input-8, 1191] 
split level 82: [/input-8, 240] 
split level 83: [/input, 1019] 
split level 84: [/input-8, 879] 
split level 85: [/input, 2375] 
split level 86: [/input, 2004] 
split level 87: [/input, 2457] 
split level 88: [/input-8, 249] 
split level 89: [/input, 967] 
split level 90: [/input, 1348] 
split level 91: [/input, 2395] 
split level 92: [/input, 2398] 
split level 93: [/input, 2340] 
split level 94: [/input-8, 892] 
split level 95: [/input, 3496] 
split level 96: [/input, 2472] 
split level 97: [/input, 3785] 
split level 98: [/input-8, 250] 
split level 99: [/input, 348] 
split level 100: [/input, 2357] 
split level 101: [/input, 2204] 
split level 102: [/input, 2409] 
split level 103: [/input-8, 186] 
split level 104: [/input, 3563] 
split level 105: [/input, 2121] 
split level 106: [/input-8, 1720] 
split level 107: [/input, 2553] 
split level 108: [/input-8, 254] 
split level 109: [/input-8, 239] 
split level 110: [/input, 3788] 
split level 111: [/input, 2087] 
split level 112: [/input, 2519] 
split level 113: [/input, 2327] 
split level 114: [/input, 3278] 
split level 115: [/input, 2281] 
split level 116: [/input, 2275] 
split level 117: [/input, 858] 
split level 118: [/input, 1947] 
split level 119: [/input, 2284] 
split level 120: [/input, 2341] 
split level 121: [/input, 2836] 
split level 122: [/input, 2147] 
split level 123: [/input, 487] 
split level 124: [/input, 2020] 
split level 125: [/input, 824] 
split level 126: [/input, 2532] 
split level 127: [/input, 1466] 
split level 128: [/input, 2469] 
split level 129: [/input, 2949] 
split level 130: [/input, 2344] 
split level 131: [/input, 2558] 
split level 132: [/input, 2377] 
split level 133: [/input, 396] 
split level 134: [/input, 330] 
split level 135: [/input, 2933] 
split level 136: [/input, 951] 
split level 137: [/input, 327] 
split level 138: [/input, 3163] 
split level 139: [/input, 3804] 
split level 140: [/input, 2339] 
split level 141: [/input-8, 55] 
split level 142: [/input-8, 765] 
split level 143: [/input-8, 1634] 
split level 144: [/input, 2277] 
split level 145: [/input, 840] 
split level 146: [/input, 2007] 
split level 147: [/input, 486] 
split level 148: [/input, 2397] 
split level 149: [/input, 1901] 
split level 150: [/input, 1946] 
split level 151: [/input, 2180] 
split level 152: [/input, 2006] 
split level 153: [/input, 2473] 
split level 154: [/input, 1948] 
split level 155: [/input, 952] 
split level 156: [/input, 2300] 
split level 157: [/input, 3738] 
split level 158: [/input-8, 1285] 
split level 159: [/input, 859] 
split level 160: [/input, 2486] 
split level 161: [/input, 2298] 
split level 162: [/input, 739] 
split level 163: [/input-8, 479] 
split level 164: [/input, 1945] 
split level 165: [/input, 1902] 
split level 166: [/input, 2466] 
split level 167: [/input-8, 894] 
split level 168: [/input, 83] 
split level 169: [/input, 733] 
split level 170: [/input, 2122] 
split level 171: [/input, 2835] 
split level 172: [/input, 2291] 
split level 173: [/input, 2003] 
split level 174: [/input, 2302] 
split level 175: [/input-8, 1612] 
split level 176: [/input, 418] 
split level 177: [/input, 2211] 
split level 178: [/input-8, 246] 
split level 179: [/input, 3336] 
split level 180: [/input, 721] 
split level 181: [/input-8, 579] 
split level 182: [/input, 1894] 
split level 183: [/input-8, 495] 
split level 184: [/input, 3554] 
split level 185: [/input, 3279] 
split level 186: [/input, 2297] 
split level 187: [/input, 1893] 
split level 188: [/input, 3259] 
split level 189: [/input, 2008] 
split level 190: [/input, 2551] 
split level 191: [/input-8, 1924] 
split level 192: [/input, 2190] 
split level 193: [/input, 2098] 
split level 194: [/input, 2252] 
split level 195: [/input, 1958] 
split level 196: [/input, 2508] 
split level 197: [/input, 2501] 
split level 198: [/input, 2627] 
split level 199: [/input, 1895] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4734153747558594
10 lb beta sum: 0.0, worst -0.47342634201049805
Time: prepare 0.0113    bound 0.1022    transfer 0.0008    finalize 0.0027    func 0.1196    
Accumulated time: func 0.1742    prepare 0.0219    bound 0.1563    transfer 0.0009    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.43399239) min lb tensor(-0.47341537)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.01055908203125 
BICCOS Cumulative time: 0.01055908203125
Preprocessing time: 0.009998559951782227 Inference time: 0.00022721290588378906 Add cuts time: 8.320808410644531e-05 Cut analysis time: 0.00025010108947753906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.45865 (1), -0.45846 (1), -0.45832 (1), -0.45812 (1), -0.45785 (1), -0.45761 (1), -0.45733 (1), -0.45583 (1), -0.45583 (1), -0.45567 (1), -0.45555 (1), -0.45477 (1), -0.45426 (1), -0.45221 (1), -0.45212 (1), -0.45116 (1), -0.44992 (1), -0.44945 (1), -0.44744 (1), -0.44692 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5277    set_bounds 0.0096    solve 0.1197    add 0.0681    
Accumulated time: pickout 0.0003    decision 0.5277    set_bounds 0.0096    solve 0.1197    add 0.0681    
Current (lb-rhs): -0.4586501121520996
50 domains visited
Cumulative time: 0.8023631572723389

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input-12, 38] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] 
split level 2: [/input-12, 4] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 4] [/input-12, 4] [/input-12, 38] [/input-12, 38] [/input-12, 38] 
split level 3: [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 2] [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4106011390686035
10 lb beta sum: 1.046152949333191, worst -0.39881110191345215
Time: prepare 0.0070    bound 0.1197    transfer 0.0007    finalize 0.0023    func 0.1323    
Accumulated time: func 0.3065    prepare 0.0291    bound 0.2761    transfer 0.0016    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.28392488) min lb tensor(-0.39856261)
Number of Verified Splits: 107 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.018116474151611328 
BICCOS Cumulative time: 0.028675556182861328
Preprocessing time: 0.011767387390136719 Inference time: 0.004110574722290039 Add cuts time: 0.0018949508666992188 Cut analysis time: 0.00034356117248535156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20267 (2), -0.20267 (2), -0.20265 (2), -0.20169 (2), -0.19615 (2), -0.19583 (2), -0.19505 (2), -0.19374 (2), -0.19327 (2), -0.18703 (2), -0.18630 (2), -0.18154 (2), -0.18106 (2), -0.17890 (2), -0.17831 (2), -0.17828 (2), -0.17759 (2), -0.17728 (2), -0.17629 (2), -0.17228 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0130    solve 0.1324    add 0.0822    
Accumulated time: pickout 0.0014    decision 0.5472    set_bounds 0.0226    solve 0.2521    add 0.1503    
Current (lb-rhs): -0.2026740312576294
100 domains visited
Cumulative time: 1.068917989730835

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 38] [/input-12, 0] [/input-12, 0] [/input-12, 0] 
split level 2: [/input-12, 4] [/input-12, 4] [/input-12, 38] [/input-12, 38] [/input-12, 13] [/input-12, 13] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 13] 
split level 3: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21434593200683594
10 lb beta sum: 1.212538242340088, worst -0.20120739936828613
Time: prepare 0.0063    bound 0.1196    transfer 0.0007    finalize 0.0022    func 0.1314    
Accumulated time: func 0.4379    prepare 0.0357    bound 0.3956    transfer 0.0024    finalize 0.0073    
all_split False
======================Cut inference begins======================
max lb tensor(0.36011350) min lb tensor(-0.19960815)
Number of Verified Splits: 228 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 10
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.026844263076782227 
BICCOS Cumulative time: 0.055519819259643555
Preprocessing time: 0.011566638946533203 Inference time: 0.010451078414916992 Add cuts time: 0.004413604736328125 Cut analysis time: 0.00041294097900390625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12969 (3), -0.12718 (3), -0.12715 (3), -0.12033 (3), -0.12027 (3), -0.11952 (3), -0.11462 (3), -0.11456 (3), -0.10395 (3), -0.10367 (3), -0.10366 (3), -0.10349 (3), -0.09986 (3), -0.09981 (3), -0.09956 (3), -0.09295 (3), -0.09294 (3), -0.08356 (3), -0.08336 (3), -0.08140 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0197    set_bounds 0.0156    solve 0.1314    add 0.0992    
Accumulated time: pickout 0.0023    decision 0.5669    set_bounds 0.0382    solve 0.3835    add 0.2494    
Current (lb-rhs): -0.1296873688697815
150 domains visited
Cumulative time: 1.3628480434417725

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 0] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 64] [/input-12, 0] [/input-12, 0] [/input-12, 0] 
split level 2: [/input-12, 4] [/input-12, 2] [/input-12, 4] [/input-12, 13] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 13] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-12, 13] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 90] [/input-12, 13] [/input-12, 13] [/input-12, 2] [/input-12, 13] [/input-12, 13] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1801762580871582
10 lb beta sum: 1.6400747299194336, worst -0.09964150190353394
Time: prepare 0.0063    bound 0.1356    transfer 0.0011    finalize 0.0021    func 0.1478    
Accumulated time: func 0.5857    prepare 0.0422    bound 0.5312    transfer 0.0035    finalize 0.0095    
all_split False
======================Cut inference begins======================
max lb tensor(0.48241228) min lb tensor(-0.09790516)
Number of Verified Splits: 361 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 17
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.03921651840209961 
BICCOS Cumulative time: 0.09473633766174316
Preprocessing time: 0.0114593505859375 Inference time: 0.017563819885253906 Add cuts time: 0.009636402130126953 Cut analysis time: 0.00055694580078125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0193    set_bounds 0.0155    solve 0.1478    add 0.1425    
Accumulated time: pickout 0.0032    decision 0.5861    set_bounds 0.0537    solve 0.5314    add 0.3919    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 64]), tensor([-1., -1.]), tensor([0, 0]), tensor([5.75662906e-20, 6.02409720e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 64]), tensor([-1.,  1.]), tensor([0, 0]), tensor([5.75662906e-20, 6.07547015e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38,  2, 64]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([0.80924511, 0.16614990, 0.11806409, 0.18563382]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38,  2, 64]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([0.80924511, 0.16614990, 0.11806409, 0.08129375]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38,  2, 64]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([0.80924511, 0.16614990, 0.13950877, 0.18498449]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38,  2, 64]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([0.80924511, 0.16614990, 0.13950877, 0.08435802]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38, 64]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.80924511, 0.22219221, 0.22738759]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38, 64]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([0.80924511, 0.22219221, 0.07561557]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.40236854553222656
10 lb beta sum: 1.4212713241577148, worst -0.16862845420837402
Time: prepare 0.0005    bound 0.1341    transfer 0.0001    finalize 0.0002    func 0.1350    
Accumulated time: func 0.7207    prepare 0.0427    bound 0.6654    transfer 0.0036    finalize 0.0096    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 0] 
split level 1: [/input-12, 38] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 13] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 46] 
split level 6: [/input-12, 90] 
split level 7: [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 2.5855064392089844, worst 0.013797879219055176

all verified at 0th iter
Time: prepare 0.0094    bound 0.0049    transfer 0.0027    finalize 0.0014    func 0.0202    
Accumulated time: func 0.7408    prepare 0.0525    bound 0.6703    transfer 0.0063    finalize 0.0110    
all_split False
======================Cut inference begins======================
max lb tensor(1.19861710) min lb tensor(0.01379788)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 20.
#cuts 1-3: 17
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.006452322006225586 
BICCOS Cumulative time: 0.10118865966796875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0005    decision 0.0221    set_bounds 0.0203    solve 0.0202    add 0.0003    
Accumulated time: pickout 0.0038    decision 0.6083    set_bounds 0.0740    solve 0.5516    add 0.3922    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
Cumulative time: 1.9560275077819824


Properties batch 7, size 1
Remaining timeout: 194.84095859527588
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 194.8401894569397
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 5.1599 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 186, vnnlib ID: 186 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.58661270, -19.23237419, -17.80228806, -19.64345360, -18.73787880,
         -20.88980293, -20.24271202, -20.68834686, -12.61566162, -18.87177277]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [600]; unstable size 600; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 600] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 600] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 600] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 197] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.94333220, 5.41133118, 3.87400532, 5.60846663, 4.71442032, 6.68207455,
         6.00083160, 6.36807251, 5.18235540]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0674 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 187, vnnlib ID: 187 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
         -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1008]; unstable size 1008; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 327, 1, 1008] with unstable size 326 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 1008] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1008] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [326]; unstable size 326; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 326] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 326] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.10357308,  2.68191552, -0.13346767, -0.21289134, -0.43652701,
          0.26639223,  0.25994682,  0.99712312,  1.33664036]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
         -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.62it/s]100%|██████████| 1/1 [00:00<00:00,  8.61it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.90619469, -26.33676720, -23.54781151, -23.44444466, -23.36634827,
          -24.09861946, -24.28264427, -25.14246368, -22.15742874, -24.83438683],
         [-22.90619469, -26.33676720, -23.54781151, -23.44444466, -23.36634827,
          -24.09861946, -24.28264427, -25.14246368, -22.15742874, -24.83438683]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.74876595, 1.39038277, 1.28701591, 1.20891953]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1190 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 5.630870819091797
alpha/beta optimization time: 1.2433972358703613
initial alpha-crown bounds: tensor([[-0.02824759,  2.79288363, -0.02322006, -0.12002206, -0.32431293,
          0.37612629,  0.35790420,  1.15994859,  1.43981075]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 4 ; Worst class: (+ rhs) -0.3243129253387451
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5677616596222
Verifying property 0 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02824759]], device='cuda:0') need to verify.
Model prediction is: tensor([-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
        -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02824759]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1008
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1349
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010371208190917969
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028244495391845703
10 lb beta sum: 0.0, worst -0.02825140953063965
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0543    transfer 0.0001    finalize 0.0001    func 0.0548    
Accumulated time: func 0.0548    prepare 0.0002    bound 0.0543    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 32] 
split level 1: [/input-12, 69] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 79] 
split level 6: [/input-12, 56] 
split level 7: [/input-12, 53] 
split level 8: [/input-12, 68] 
split level 9: [/input-8, 1643] 
split level 10: [/input-8, 1698] 
split level 11: [/input-12, 89] 
split level 12: [/input-8, 1060] 
split level 13: [/input-8, 1950] 
split level 14: [/input-12, 97] 
split level 15: [/input-8, 1707] 
split level 16: [/input-8, 1708] 
split level 17: [/input-8, 1635] 
split level 18: [/input-8, 1691] 
split level 19: [/input-8, 372] 
split level 20: [/input-8, 1699] 
split level 21: [/input-12, 71] 
split level 22: [/input-8, 626] 
split level 23: [/input-8, 1050] 
split level 24: [/input-8, 172] 
split level 25: [/input-8, 371] 
split level 26: [/input-8, 1067] 
split level 27: [/input-12, 78] 
split level 28: [/input-8, 611] 
split level 29: [/input-8, 627] 
split level 30: [/input-8, 1716] 
split level 31: [/input-12, 10] 
split level 32: [/input-8, 1948] 
split level 33: [/input-8, 1651] 
split level 34: [/input-8, 1693] 
split level 35: [/input-8, 1652] 
split level 36: [/input-8, 349] 
split level 37: [/input-12, 67] 
split level 38: [/input-8, 1764] 
split level 39: [/input-8, 1941] 
split level 40: [/input-8, 373] 
split level 41: [/input-8, 1634] 
split level 42: [/input-8, 612] 
split level 43: [/input-8, 1630] 
split level 44: [/input, 405] 
split level 45: [/input-8, 1402] 
split level 46: [/input-8, 276] 
split level 47: [/input-8, 1646] 
split level 48: [/input-8, 1243] 
split level 49: [/input-8, 1638] 
split level 50: [/input-8, 1945] 
split level 51: [/input, 3511] 
split level 52: [/input-8, 1404] 
split level 53: [/input-8, 302] 
split level 54: [/input, 3495] 
split level 55: [/input-8, 362] 
split level 56: [/input-8, 342] 
split level 57: [/input-8, 1057] 
split level 58: [/input-12, 35] 
split level 59: [/input-8, 1235] 
split level 60: [/input, 457] 
split level 61: [/input-8, 931] 
split level 62: [/input-8, 1627] 
split level 63: [/input, 423] 
split level 64: [/input, 2468] 
split level 65: [/input-8, 227] 
split level 66: [/input, 440] 
split level 67: [/input-8, 1660] 
split level 68: [/input-8, 1625] 
split level 69: [/input-8, 1301] 
split level 70: [/input, 2248] 
split level 71: [/input-8, 1642] 
split level 72: [/input, 2504] 
split level 73: [/input-8, 907] 
split level 74: [/input-8, 602] 
split level 75: [/input-8, 1626] 
split level 76: [/input, 2520] 
split level 77: [/input-8, 228] 
split level 78: [/input-8, 597] 
split level 79: [/input, 2488] 
split level 80: [/input-8, 481] 
split level 81: [/input, 2180] 
split level 82: [/input-8, 1958] 
split level 83: [/input-8, 871] 
split level 84: [/input, 948] 
split level 85: [/input, 2199] 
split level 86: [/input, 2247] 
split level 87: [/input-8, 1610] 
split level 88: [/input-8, 219] 
split level 89: [/input, 750] 
split level 90: [/input, 2246] 
split level 91: [/input, 1962] 
split level 92: [/input-8, 234] 
split level 93: [/input, 406] 
split level 94: [/input, 2505] 
split level 95: [/input, 2949] 
split level 96: [/input, 2172] 
split level 97: [/input-8, 111] 
split level 98: [/input-8, 163] 
split level 99: [/input, 2181] 
split level 100: [/input, 2214] 
split level 101: [/input, 390] 
split level 102: [/input-8, 863] 
split level 103: [/input, 2009] 
split level 104: [/input, 2010] 
split level 105: [/input-8, 1378] 
split level 106: [/input, 1991] 
split level 107: [/input-8, 1405] 
split level 108: [/input-8, 737] 
split level 109: [/input, 2263] 
split level 110: [/input-8, 750] 
split level 111: [/input, 2040] 
split level 112: [/input, 1994] 
split level 113: [/input-8, 473] 
split level 114: [/input, 81] 
split level 115: [/input, 3510] 
split level 116: [/input, 2473] 
split level 117: [/input, 988] 
split level 118: [/input, 2898] 
split level 119: [/input, 442] 
split level 120: [/input-8, 235] 
split level 121: [/input-8, 948] 
split level 122: [/input, 2042] 
split level 123: [/input, 972] 
split level 124: [/input, 3527] 
split level 125: [/input-8, 153] 
split level 126: [/input, 2264] 
split level 127: [/input, 1370] 
split level 128: [/input, 950] 
split level 129: [/input, 1978] 
split level 130: [/input-8, 1521] 
split level 131: [/input, 2008] 
split level 132: [/input, 1457] 
split level 133: [/input, 2011] 
split level 134: [/input, 2536] 
split level 135: [/input-8, 255] 
split level 136: [/input-8, 154] 
split level 137: [/input, 2506] 
split level 138: [/input-8, 1752] 
split level 139: [/input, 2266] 
split level 140: [/input, 3547] 
split level 141: [/input-8, 414] 
split level 142: [/input-8, 432] 
split level 143: [/input, 82] 
split level 144: [/input, 1992] 
split level 145: [/input-8, 218] 
split level 146: [/input-8, 1406] 
split level 147: [/input, 3526] 
split level 148: [/input, 3437] 
split level 149: [/input, 2250] 
split level 150: [/input, 939] 
split level 151: [/input-8, 1620] 
split level 152: [/input, 1993] 
split level 153: [/input-8, 1618] 
split level 154: [/input, 1362] 
split level 155: [/input, 2534] 
split level 156: [/input, 2202] 
split level 157: [/input-8, 248] 
split level 158: [/input, 2007] 
split level 159: [/input, 2533] 
split level 160: [/input-8, 1758] 
split level 161: [/input-8, 2035] 
split level 162: [/input-8, 119] 
split level 163: [/input, 1378] 
split level 164: [/input-8, 511] 
split level 165: [/input, 1975] 
split level 166: [/input, 2474] 
split level 167: [/input, 2930] 
split level 168: [/input, 2158] 
split level 169: [/input, 984] 
split level 170: [/input-8, 1364] 
split level 171: [/input-8, 790] 
split level 172: [/input-8, 949] 
split level 173: [/input, 2413] 
split level 174: [/input-8, 2034] 
split level 175: [/input-8, 1715] 
split level 176: [/input-8, 229] 
split level 177: [/input, 2262] 
split level 178: [/input, 2657] 
split level 179: [/input, 1946] 
split level 180: [/input, 2515] 
split level 181: [/input, 2458] 
split level 182: [/input, 663] 
split level 183: [/input, 2229] 
split level 184: [/input, 1976] 
split level 185: [/input, 1944] 
split level 186: [/input-8, 1667] 
split level 187: [/input-8, 447] 
split level 188: [/input, 2280] 
split level 189: [/input-8, 1045] 
split level 190: [/input, 1419] 
split level 191: [/input, 2139] 
split level 192: [/input, 1928] 
split level 193: [/input, 2269] 
split level 194: [/input-8, 1568] 
split level 195: [/input, 2417] 
split level 196: [/input, 2142] 
split level 197: [/input, 2245] 
split level 198: [/input, 2460] 
split level 199: [/input, 711] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028209924697875977
10 lb beta sum: 0.0, worst -0.028209447860717773
Time: prepare 0.0116    bound 0.0994    transfer 0.0012    finalize 0.0034    func 0.1183    
Accumulated time: func 0.1730    prepare 0.0219    bound 0.1537    transfer 0.0013    finalize 0.0035    
all_split False
======================Cut inference begins======================
max lb tensor(0.49938822) min lb tensor(-0.02820659)
Number of Verified Splits: 33 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01208949089050293 
BICCOS Cumulative time: 0.01208949089050293
Preprocessing time: 0.010020971298217773 Inference time: 0.0011954307556152344 Add cuts time: 0.0003466606140136719 Cut analysis time: 0.00052642822265625
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5250    set_bounds 0.0091    solve 0.1183    add 0.0098    
Accumulated time: pickout 0.0003    decision 0.5250    set_bounds 0.0091    solve 0.1183    add 0.0098    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([32]), tensor([-1.]), tensor([0]), tensor([4.68623473e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([32]), tensor([1.]), tensor([0]), tensor([6.41769970e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.008170723915100098

all verified at 1th iter
Time: prepare 0.0003    bound 0.0099    transfer 0.0001    finalize 0.0001    func 0.0104    
Accumulated time: func 0.1835    prepare 0.0222    bound 0.1636    transfer 0.0014    finalize 0.0036    
After pruning, left:  0

Back to Regular BaB


Properties batch 1, size 1
Remaining timeout: 197.60628175735474
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 197.60622191429138
Verifying property 2 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02322006]], device='cuda:0') need to verify.
Model prediction is: tensor([-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
        -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02322006]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1008
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1349
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010466575622558594
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02321624755859375
10 lb beta sum: 0.0, worst -0.023224353790283203
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0540    transfer 0.0001    finalize 0.0001    func 0.0544    
Accumulated time: func 0.0544    prepare 0.0002    bound 0.0540    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] 
split level 1: [/input-12, 53] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 69] 
split level 4: [/input-12, 32] 
split level 5: [/input-12, 12] 
split level 6: [/input-12, 24] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 10] 
split level 9: [/input-12, 59] 
split level 10: [/input-8, 1643] 
split level 11: [/input-12, 68] 
split level 12: [/input-12, 90] 
split level 13: [/input-8, 1635] 
split level 14: [/input-8, 1707] 
split level 15: [/input-12, 79] 
split level 16: [/input-8, 1698] 
split level 17: [/input-8, 1691] 
split level 18: [/input-8, 1699] 
split level 19: [/input-8, 1307] 
split level 20: [/input-8, 1950] 
split level 21: [/input-8, 1693] 
split level 22: [/input-8, 276] 
split level 23: [/input-8, 1627] 
split level 24: [/input-8, 1948] 
split level 25: [/input-8, 1651] 
split level 26: [/input-8, 371] 
split level 27: [/input-8, 1652] 
split level 28: [/input-8, 931] 
split level 29: [/input-8, 372] 
split level 30: [/input-8, 737] 
split level 31: [/input-8, 947] 
split level 32: [/input-8, 1708] 
split level 33: [/input-8, 1660] 
split level 34: [/input-8, 602] 
split level 35: [/input-8, 1941] 
split level 36: [/input-8, 1299] 
split level 37: [/input-8, 1638] 
split level 38: [/input-8, 1947] 
split level 39: [/input-8, 1301] 
split level 40: [/input-8, 1659] 
split level 41: [/input-8, 1646] 
split level 42: [/input-8, 611] 
split level 43: [/input-8, 1634] 
split level 44: [/input-8, 1620] 
split level 45: [/input-8, 1945] 
split level 46: [/input-8, 948] 
split level 47: [/input-8, 172] 
split level 48: [/input-8, 1060] 
split level 49: [/input, 457] 
split level 50: [/input, 2468] 
split level 51: [/input, 423] 
split level 52: [/input-8, 898] 
split level 53: [/input-8, 1662] 
split level 54: [/input-8, 594] 
split level 55: [/input-8, 1642] 
split level 56: [/input-8, 477] 
split level 57: [/input, 663] 
split level 58: [/input-8, 1958] 
split level 59: [/input-8, 1716] 
split level 60: [/input, 3511] 
split level 61: [/input-8, 1626] 
split level 62: [/input-8, 342] 
split level 63: [/input, 440] 
split level 64: [/input-8, 941] 
split level 65: [/input-8, 593] 
split level 66: [/input, 948] 
split level 67: [/input, 1962] 
split level 68: [/input-8, 1764] 
split level 69: [/input-8, 587] 
split level 70: [/input, 2520] 
split level 71: [/input-8, 612] 
split level 72: [/input-8, 750] 
split level 73: [/input-8, 907] 
split level 74: [/input, 1991] 
split level 75: [/input-8, 373] 
split level 76: [/input, 3495] 
split level 77: [/input, 1978] 
split level 78: [/input, 2246] 
split level 79: [/input-8, 949] 
split level 80: [/input-8, 597] 
split level 81: [/input-8, 348] 
split level 82: [/input, 2504] 
split level 83: [/input, 2214] 
split level 84: [/input, 3546] 
split level 85: [/input-8, 1625] 
split level 86: [/input-8, 627] 
split level 87: [/input-8, 786] 
split level 88: [/input, 1004] 
split level 89: [/input-8, 781] 
split level 90: [/input, 3543] 
split level 91: [/input, 2248] 
split level 92: [/input, 2199] 
split level 93: [/input-8, 1618] 
split level 94: [/input-8, 790] 
split level 95: [/input-8, 1650] 
split level 96: [/input, 1994] 
split level 97: [/input, 2010] 
split level 98: [/input-8, 793] 
split level 99: [/input, 2247] 
split level 100: [/input, 2488] 
split level 101: [/input, 3560] 
split level 102: [/input, 1975] 
split level 103: [/input, 3526] 
split level 104: [/input, 3547] 
split level 105: [/input, 2263] 
split level 106: [/input, 3562] 
split level 107: [/input, 3563] 
split level 108: [/input-8, 1404] 
split level 109: [/input, 2536] 
split level 110: [/input, 984] 
split level 111: [/input, 988] 
split level 112: [/input, 442] 
split level 113: [/input, 2229] 
split level 114: [/input-8, 899] 
split level 115: [/input-8, 782] 
split level 116: [/input-8, 255] 
split level 117: [/input, 2505] 
split level 118: [/input, 2264] 
split level 119: [/input, 2009] 
split level 120: [/input, 2537] 
split level 121: [/input, 3510] 
split level 122: [/input, 3525] 
split level 123: [/input, 2040] 
split level 124: [/input, 1946] 
split level 125: [/input-12, 56] 
split level 126: [/input, 2473] 
split level 127: [/input-8, 234] 
split level 128: [/input-8, 780] 
split level 129: [/input, 3422] 
split level 130: [/input-8, 1235] 
split level 131: [/input, 2008] 
split level 132: [/input-8, 1715] 
split level 133: [/input, 1370] 
split level 134: [/input, 2266] 
split level 135: [/input-8, 785] 
split level 136: [/input, 2281] 
split level 137: [/input, 3524] 
split level 138: [/input, 1993] 
split level 139: [/input-8, 473] 
split level 140: [/input, 3527] 
split level 141: [/input, 1944] 
split level 142: [/input-8, 1658] 
split level 143: [/input-8, 1045] 
split level 144: [/input-8, 239] 
split level 145: [/input-8, 329] 
split level 146: [/input, 1992] 
split level 147: [/input-8, 481] 
split level 148: [/input, 2228] 
split level 149: [/input, 2007] 
split level 150: [/input, 2282] 
split level 151: [/input, 2011] 
split level 152: [/input-8, 248] 
split level 153: [/input, 972] 
split level 154: [/input-8, 1364] 
split level 155: [/input-8, 796] 
split level 156: [/input, 1977] 
split level 157: [/input, 2506] 
split level 158: [/input, 711] 
split level 159: [/input-8, 56] 
split level 160: [/input, 1976] 
split level 161: [/input, 2250] 
split level 162: [/input, 2280] 
split level 163: [/input, 1003] 
split level 164: [/input, 987] 
split level 165: [/input-8, 245] 
split level 166: [/input-8, 871] 
split level 167: [/input, 2534] 
split level 168: [/input, 2012] 
split level 169: [/input, 2245] 
split level 170: [/input, 406] 
split level 171: [/input-8, 474] 
split level 172: [/input, 3561] 
split level 173: [/input, 1960] 
split level 174: [/input, 2533] 
split level 175: [/input, 2262] 
split level 176: [/input, 2244] 
split level 177: [/input, 950] 
split level 178: [/input-8, 231] 
split level 179: [/input, 2540] 
split level 180: [/input, 1928] 
split level 181: [/input-8, 804] 
split level 182: [/input, 3409] 
split level 183: [/input, 3507] 
split level 184: [/input, 3437] 
split level 185: [/input, 2283] 
split level 186: [/input, 2551] 
split level 187: [/input-8, 218] 
split level 188: [/input-8, 330] 
split level 189: [/input-8, 235] 
split level 190: [/input-8, 1667] 
split level 191: [/input-8, 49] 
split level 192: [/input, 1974] 
split level 193: [/input, 2474] 
split level 194: [/input, 2532] 
split level 195: [/input-8, 254] 
split level 196: [/input, 2770] 
split level 197: [/input, 2269] 
split level 198: [/input, 678] 
split level 199: [/input, 2278] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02313709259033203
10 lb beta sum: 0.0, worst -0.02313232421875
Time: prepare 0.0117    bound 0.0998    transfer 0.0007    finalize 0.0026    func 0.1174    
Accumulated time: func 0.1718    prepare 0.0219    bound 0.1538    transfer 0.0008    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.16045094) min lb tensor(-0.02312708)
Number of Verified Splits: 48 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.012638092041015625 
BICCOS Cumulative time: 0.012638092041015625
Preprocessing time: 0.009852170944213867 Inference time: 0.0017654895782470703 Add cuts time: 0.0008261203765869141 Cut analysis time: 0.00019431114196777344
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5232    set_bounds 0.0089    solve 0.1175    add 0.0098    
Accumulated time: pickout 0.0003    decision 0.5232    set_bounds 0.0089    solve 0.1175    add 0.0098    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78]), tensor([-1.]), tensor([0]), tensor([1.39356644e-07]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78]), tensor([1.]), tensor([0]), tensor([8.21263946e-10]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.005664348602294922

all verified at 0th iter
Time: prepare 0.0003    bound 0.0040    transfer 0.0001    finalize 0.0001    func 0.0045    
Accumulated time: func 0.1763    prepare 0.0222    bound 0.1578    transfer 0.0009    finalize 0.0028    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 196.73633193969727
Verifying property 3 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.12002206]], device='cuda:0') need to verify.
Model prediction is: tensor([-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
        -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.12002206]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1008
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1349
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010395050048828125
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12001872062683105
10 lb beta sum: 0.0, worst -0.12002158164978027
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0544    transfer 0.0001    finalize 0.0001    func 0.0549    
Accumulated time: func 0.0549    prepare 0.0002    bound 0.0544    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 12] 
split level 1: [/input-12, 90] 
split level 2: [/input-12, 2] 
split level 3: [/input-12, 10] 
split level 4: [/input-12, 68] 
split level 5: [/input-12, 53] 
split level 6: [/input-12, 67] 
split level 7: [/input-12, 79] 
split level 8: [/input-8, 1643] 
split level 9: [/input-12, 59] 
split level 10: [/input-12, 46] 
split level 11: [/input-8, 172] 
split level 12: [/input-12, 78] 
split level 13: [/input-8, 1698] 
split level 14: [/input-8, 1707] 
split level 15: [/input-8, 173] 
split level 16: [/input-8, 1651] 
split level 17: [/input-8, 1699] 
split level 18: [/input-8, 1630] 
split level 19: [/input-8, 372] 
split level 20: [/input-8, 371] 
split level 21: [/input-8, 276] 
split level 22: [/input-8, 1693] 
split level 23: [/input-8, 1659] 
split level 24: [/input-8, 898] 
split level 25: [/input-8, 1691] 
split level 26: [/input-8, 1635] 
split level 27: [/input-8, 1652] 
split level 28: [/input-8, 947] 
split level 29: [/input-8, 737] 
split level 30: [/input-8, 1301] 
split level 31: [/input-8, 1638] 
split level 32: [/input-8, 786] 
split level 33: [/input-8, 1646] 
split level 34: [/input-8, 626] 
split level 35: [/input-8, 1067] 
split level 36: [/input-8, 1610] 
split level 37: [/input-8, 1060] 
split level 38: [/input-8, 1662] 
split level 39: [/input-8, 785] 
split level 40: [/input-8, 907] 
split level 41: [/input-8, 611] 
split level 42: [/input, 457] 
split level 43: [/input-8, 908] 
split level 44: [/input-8, 507] 
split level 45: [/input-8, 1945] 
split level 46: [/input-8, 931] 
split level 47: [/input, 423] 
split level 48: [/input-8, 1299] 
split level 49: [/input-12, 69] 
split level 50: [/input-8, 1404] 
split level 51: [/input-8, 793] 
split level 52: [/input, 405] 
split level 53: [/input, 3495] 
split level 54: [/input-8, 612] 
split level 55: [/input-8, 1660] 
split level 56: [/input-8, 790] 
split level 57: [/input-8, 1708] 
split level 58: [/input, 3511] 
split level 59: [/input, 948] 
split level 60: [/input-8, 899] 
split level 61: [/input-8, 597] 
split level 62: [/input-8, 627] 
split level 63: [/input-8, 782] 
split level 64: [/input-8, 373] 
split level 65: [/input-8, 506] 
split level 66: [/input-8, 473] 
split level 67: [/input-8, 1650] 
split level 68: [/input-8, 593] 
split level 69: [/input-8, 1950] 
split level 70: [/input-8, 602] 
split level 71: [/input-8, 1625] 
split level 72: [/input-8, 948] 
split level 73: [/input-8, 1634] 
split level 74: [/input-8, 342] 
split level 75: [/input-8, 781] 
split level 76: [/input-8, 477] 
split level 77: [/input, 2468] 
split level 78: [/input-8, 1941] 
split level 79: [/input-8, 1618] 
split level 80: [/input-8, 348] 
split level 81: [/input, 663] 
split level 82: [/input-8, 788] 
split level 83: [/input-8, 1642] 
split level 84: [/input-8, 481] 
split level 85: [/input-8, 1764] 
split level 86: [/input-8, 163] 
split level 87: [/input-8, 879] 
split level 88: [/input, 1370] 
split level 89: [/input-8, 629] 
split level 90: [/input-8, 1667] 
split level 91: [/input-8, 779] 
split level 92: [/input-8, 505] 
split level 93: [/input-8, 466] 
split level 94: [/input, 971] 
split level 95: [/input-8, 871] 
split level 96: [/input, 440] 
split level 97: [/input-8, 1402] 
split level 98: [/input, 442] 
split level 99: [/input-8, 1620] 
split level 100: [/input, 2246] 
split level 101: [/input-8, 510] 
split level 102: [/input-8, 1406] 
split level 103: [/input, 3546] 
split level 104: [/input, 3526] 
split level 105: [/input-8, 1045] 
split level 106: [/input-8, 796] 
split level 107: [/input-8, 1715] 
split level 108: [/input, 2520] 
split level 109: [/input-8, 1626] 
split level 110: [/input, 3525] 
split level 111: [/input, 2247] 
split level 112: [/input-8, 780] 
split level 113: [/input, 3510] 
split level 114: [/input, 2214] 
split level 115: [/input, 969] 
split level 116: [/input, 3527] 
split level 117: [/input-8, 1605] 
split level 118: [/input, 750] 
split level 119: [/input, 2248] 
split level 120: [/input-8, 474] 
split level 121: [/input-8, 1658] 
split level 122: [/input-8, 1235] 
split level 123: [/input-8, 594] 
split level 124: [/input, 947] 
split level 125: [/input-8, 1947] 
split level 126: [/input, 3507] 
split level 127: [/input-8, 804] 
split level 128: [/input, 2504] 
split level 129: [/input, 2199] 
split level 130: [/input, 3547] 
split level 131: [/input-8, 490] 
split level 132: [/input, 2263] 
split level 133: [/input-8, 167] 
split level 134: [/input, 406] 
split level 135: [/input, 3524] 
split level 136: [/input, 3467] 
split level 137: [/input-8, 949] 
split level 138: [/input, 1978] 
split level 139: [/input, 2229] 
split level 140: [/input, 988] 
split level 141: [/input, 2488] 
split level 142: [/input-8, 941] 
split level 143: [/input-8, 750] 
split level 144: [/input-8, 329] 
split level 145: [/input, 2473] 
split level 146: [/input, 3422] 
split level 147: [/input, 984] 
split level 148: [/input, 972] 
split level 149: [/input-8, 328] 
split level 150: [/input, 1991] 
split level 151: [/input, 2209] 
split level 152: [/input, 2151] 
split level 153: [/input, 2264] 
split level 154: [/input-8, 1057] 
split level 155: [/input, 2266] 
split level 156: [/input-8, 1521] 
split level 157: [/input, 2250] 
split level 158: [/input, 2202] 
split level 159: [/input, 1354] 
split level 160: [/input, 3560] 
split level 161: [/input, 1994] 
split level 162: [/input-8, 863] 
split level 163: [/input-8, 1401] 
split level 164: [/input-8, 1405] 
split level 165: [/input, 1975] 
split level 166: [/input, 786] 
split level 167: [/input, 2226] 
split level 168: [/input-8, 1356] 
split level 169: [/input, 2506] 
split level 170: [/input-8, 154] 
split level 171: [/input, 1946] 
split level 172: [/input, 3409] 
split level 173: [/input, 3451] 
split level 174: [/input, 2536] 
split level 175: [/input, 711] 
split level 176: [/input, 3441] 
split level 177: [/input, 1976] 
split level 178: [/input, 790] 
split level 179: [/input-8, 457] 
split level 180: [/input, 1929] 
split level 181: [/input, 2474] 
split level 182: [/input-8, 119] 
split level 183: [/input, 1992] 
split level 184: [/input, 2460] 
split level 185: [/input, 2280] 
split level 186: [/input, 2458] 
split level 187: [/input, 987] 
split level 188: [/input, 2262] 
split level 189: [/input-8, 1958] 
split level 190: [/input, 2136] 
split level 191: [/input, 3437] 
split level 192: [/input, 2326] 
split level 193: [/input, 2149] 
split level 194: [/input, 678] 
split level 195: [/input, 1944] 
split level 196: [/input, 3561] 
split level 197: [/input, 2245] 
split level 198: [/input, 787] 
split level 199: [/input, 1977] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11990976333618164
10 lb beta sum: 0.0, worst -0.11991453170776367
Time: prepare 0.0118    bound 0.1015    transfer 0.0007    finalize 0.0026    func 0.1192    
Accumulated time: func 0.1741    prepare 0.0221    bound 0.1559    transfer 0.0008    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.48653030) min lb tensor(-0.11990976)
Number of Verified Splits: 7 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.01093602180480957 
BICCOS Cumulative time: 0.01093602180480957
Preprocessing time: 0.010213613510131836 Inference time: 0.0003082752227783203 Add cuts time: 0.00013017654418945312 Cut analysis time: 0.00028395652770996094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10394 (1), -0.10381 (1), -0.10380 (1), -0.10371 (1), -0.10096 (1), -0.10080 (1), -0.10064 (1), -0.10015 (1), -0.10008 (1), -0.10006 (1), -0.09958 (1), -0.09889 (1), -0.09836 (1), -0.09814 (1), -0.09750 (1), -0.09747 (1), -0.09692 (1), -0.09616 (1), -0.09552 (1), -0.09529 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5283    set_bounds 0.0090    solve 0.1193    add 0.1194    
Accumulated time: pickout 0.0004    decision 0.5283    set_bounds 0.0090    solve 0.1193    add 0.1194    
Current (lb-rhs): -0.10394430160522461
50 domains visited
Cumulative time: 0.8471746444702148

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 12] [/input-12, 12] [/input-12, 2] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 1: [/input-12, 2] [/input-12, 2] [/input-12, 53] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 2: [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 67] [/input-12, 53] 
split level 3: [/input-12, 79] [/input-12, 53] [/input-12, 79] [/input-12, 67] [/input-12, 67] [/input-12, 79] [/input-12, 53] [/input-12, 67] [/input-12, 79] [/input-12, 67] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08253026008605957

all verified at 3th iter
Time: prepare 0.0074    bound 0.0240    transfer 0.0007    finalize 0.0025    func 0.0372    
Accumulated time: func 0.2112    prepare 0.0298    bound 0.1799    transfer 0.0015    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.27384388) min lb tensor(6.86645508e-05)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03450727462768555 
BICCOS Cumulative time: 0.04544329643249512
Preprocessing time: 0.011777639389038086 Inference time: 0.014093875885009766 Add cuts time: 0.008443355560302734 Cut analysis time: 0.00019240379333496094
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0196    set_bounds 0.0118    solve 0.0372    add 0.0151    
Accumulated time: pickout 0.0015    decision 0.5479    set_bounds 0.0208    solve 0.1565    add 0.1345    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53, 12]), tensor([-1., -1.]), tensor([0, 0]), tensor([8.37716398e-14, 2.43944928e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53, 12]), tensor([-1.,  1.]), tensor([0, 0]), tensor([8.37716398e-14, 9.05237645e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53, 12]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.35994335e-09, 2.41995618e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53, 12]), tensor([1., 1.]), tensor([0, 0]), tensor([2.35994335e-09, 9.14094895e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.031201601028442383

all verified at 0th iter
Time: prepare 0.0003    bound 0.0044    transfer 0.0001    finalize 0.0002    func 0.0050    
Accumulated time: func 0.2162    prepare 0.0301    bound 0.1842    transfer 0.0016    finalize 0.0053    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 195.62233591079712
Verifying property 4 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.32431293]], device='cuda:0') need to verify.
Model prediction is: tensor([-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
        -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.32431293]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1008
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1349
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.751319885253906e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.324310302734375
10 lb beta sum: 0.0, worst -0.32430601119995117
Time: prepare 0.0002    bound 0.0899    transfer 0.0001    finalize 0.0001    func 0.0904    
Accumulated time: func 0.0904    prepare 0.0002    bound 0.0899    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] 
split level 1: [/input-12, 90] 
split level 2: [/input-12, 59] 
split level 3: [/input-12, 10] 
split level 4: [/input-12, 46] 
split level 5: [/input-12, 97] 
split level 6: [/input-12, 69] 
split level 7: [/input-12, 32] 
split level 8: [/input-12, 12] 
split level 9: [/input-12, 68] 
split level 10: [/input-12, 53] 
split level 11: [/input-12, 56] 
split level 12: [/input-12, 4] 
split level 13: [/input-12, 79] 
split level 14: [/input-12, 67] 
split level 15: [/input-8, 1643] 
split level 16: [/input-12, 78] 
split level 17: [/input-8, 172] 
split level 18: [/input-8, 173] 
split level 19: [/input-8, 1698] 
split level 20: [/input-8, 1691] 
split level 21: [/input-8, 371] 
split level 22: [/input-8, 372] 
split level 23: [/input-8, 1699] 
split level 24: [/input-8, 1950] 
split level 25: [/input-8, 931] 
split level 26: [/input-8, 1651] 
split level 27: [/input-8, 1307] 
split level 28: [/input-8, 737] 
split level 29: [/input-8, 1652] 
split level 30: [/input-8, 1635] 
split level 31: [/input-8, 1947] 
split level 32: [/input-8, 1693] 
split level 33: [/input-8, 1067] 
split level 34: [/input, 457] 
split level 35: [/input-8, 1941] 
split level 36: [/input-8, 1660] 
split level 37: [/input-8, 907] 
split level 38: [/input, 3495] 
split level 39: [/input, 948] 
split level 40: [/input-8, 1299] 
split level 41: [/input-8, 1707] 
split level 42: [/input-8, 1060] 
split level 43: [/input, 3511] 
split level 44: [/input-8, 373] 
split level 45: [/input-8, 1945] 
split level 46: [/input, 423] 
split level 47: [/input, 971] 
split level 48: [/input, 663] 
split level 49: [/input, 2468] 
split level 50: [/input-8, 898] 
split level 51: [/input-8, 348] 
split level 52: [/input-8, 1301] 
split level 53: [/input, 988] 
split level 54: [/input-8, 941] 
split level 55: [/input-8, 908] 
split level 56: [/input, 3546] 
split level 57: [/input, 2520] 
split level 58: [/input-8, 1642] 
split level 59: [/input, 1004] 
split level 60: [/input, 3510] 
split level 61: [/input, 3526] 
split level 62: [/input, 442] 
split level 63: [/input-8, 342] 
split level 64: [/input, 3543] 
split level 65: [/input, 1962] 
split level 66: [/input-8, 1764] 
split level 67: [/input, 440] 
split level 68: [/input, 3547] 
split level 69: [/input, 3525] 
split level 70: [/input-8, 948] 
split level 71: [/input, 969] 
split level 72: [/input, 1978] 
split level 73: [/input-8, 1646] 
split level 74: [/input, 1991] 
split level 75: [/input-8, 255] 
split level 76: [/input-8, 163] 
split level 77: [/input-8, 1667] 
split level 78: [/input, 984] 
split level 79: [/input, 972] 
split level 80: [/input, 2246] 
split level 81: [/input, 947] 
split level 82: [/input, 3527] 
split level 83: [/input, 2214] 
split level 84: [/input, 2010] 
split level 85: [/input, 3562] 
split level 86: [/input-8, 234] 
split level 87: [/input-8, 899] 
split level 88: [/input, 2247] 
split level 89: [/input-8, 253] 
split level 90: [/input-8, 612] 
split level 91: [/input, 2263] 
split level 92: [/input, 3524] 
split level 93: [/input, 2504] 
split level 94: [/input, 987] 
split level 95: [/input, 2248] 
split level 96: [/input, 1994] 
split level 97: [/input, 2009] 
split level 98: [/input, 3563] 
split level 99: [/input, 2473] 
split level 100: [/input, 2264] 
split level 101: [/input, 998] 
split level 102: [/input, 3507] 
split level 103: [/input, 2199] 
split level 104: [/input, 2537] 
split level 105: [/input, 2229] 
split level 106: [/input-8, 611] 
split level 107: [/input-8, 1650] 
split level 108: [/input, 3560] 
split level 109: [/input, 2536] 
split level 110: [/input, 1370] 
split level 111: [/input-8, 1958] 
split level 112: [/input, 2266] 
split level 113: [/input, 3422] 
split level 114: [/input-8, 329] 
split level 115: [/input, 1975] 
split level 116: [/input-8, 597] 
split level 117: [/input, 2008] 
split level 118: [/input, 2505] 
split level 119: [/input, 3438] 
split level 120: [/input, 406] 
split level 121: [/input, 2488] 
split level 122: [/input, 2202] 
split level 123: [/input-8, 2035] 
split level 124: [/input-8, 245] 
split level 125: [/input, 1946] 
split level 126: [/input-8, 793] 
split level 127: [/input-8, 1708] 
split level 128: [/input-8, 154] 
split level 129: [/input-8, 782] 
split level 130: [/input, 2281] 
split level 131: [/input, 2011] 
split level 132: [/input, 2007] 
split level 133: [/input-8, 328] 
split level 134: [/input, 3437] 
split level 135: [/input, 2282] 
split level 136: [/input, 1993] 
split level 137: [/input-8, 949] 
split level 138: [/input-8, 248] 
split level 139: [/input, 939] 
split level 140: [/input, 1992] 
split level 141: [/input-8, 790] 
split level 142: [/input-8, 1057] 
split level 143: [/input-8, 2034] 
split level 144: [/input-8, 239] 
split level 145: [/input, 2539] 
split level 146: [/input, 2250] 
split level 147: [/input, 2228] 
split level 148: [/input, 1976] 
split level 149: [/input, 2506] 
split level 150: [/input, 2012] 
split level 151: [/input, 803] 
split level 152: [/input, 2262] 
split level 153: [/input, 2474] 
split level 154: [/input, 1003] 
split level 155: [/input, 950] 
split level 156: [/input, 1362] 
split level 157: [/input, 2540] 
split level 158: [/input-8, 254] 
split level 159: [/input, 2458] 
split level 160: [/input, 2534] 
split level 161: [/input, 923] 
split level 162: [/input, 711] 
split level 163: [/input, 2283] 
split level 164: [/input, 2269] 
split level 165: [/input, 2245] 
split level 166: [/input-8, 217] 
split level 167: [/input, 3409] 
split level 168: [/input, 3561] 
split level 169: [/input, 1977] 
split level 170: [/input-8, 871] 
split level 171: [/input, 1960] 
split level 172: [/input-8, 785] 
split level 173: [/input-8, 1513] 
split level 174: [/input, 787] 
split level 175: [/input, 2533] 
split level 176: [/input-8, 251] 
split level 177: [/input, 1944] 
split level 178: [/input, 2280] 
split level 179: [/input-8, 1235] 
split level 180: [/input-8, 863] 
split level 181: [/input, 786] 
split level 182: [/input, 2014] 
split level 183: [/input-8, 231] 
split level 184: [/input, 2244] 
split level 185: [/input, 790] 
split level 186: [/input, 2142] 
split level 187: [/input, 2657] 
split level 188: [/input, 1974] 
split level 189: [/input, 3397] 
split level 190: [/input, 2006] 
split level 191: [/input, 2594] 
split level 192: [/input, 2898] 
split level 193: [/input-8, 49] 
split level 194: [/input, 82] 
split level 195: [/input, 2413] 
split level 196: [/input, 2278] 
split level 197: [/input-8, 473] 
split level 198: [/input, 2139] 
split level 199: [/input, 819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.32419443130493164
10 lb beta sum: 0.0, worst -0.3241913318634033
Time: prepare 0.0114    bound 0.0996    transfer 0.0012    finalize 0.0030    func 0.1178    
Accumulated time: func 0.2082    prepare 0.0215    bound 0.1895    transfer 0.0013    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.44236279) min lb tensor(-0.32418847)
Number of Verified Splits: 7 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.010999202728271484 
BICCOS Cumulative time: 0.010999202728271484
Preprocessing time: 0.009981632232666016 Inference time: 0.0002872943878173828 Add cuts time: 0.00010395050048828125 Cut analysis time: 0.0006263256072998047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30803 (1), -0.30783 (1), -0.30706 (1), -0.30703 (1), -0.30696 (1), -0.30653 (1), -0.30579 (1), -0.30577 (1), -0.30557 (1), -0.30473 (1), -0.30447 (1), -0.30382 (1), -0.30376 (1), -0.30141 (1), -0.29946 (1), -0.29911 (1), -0.29836 (1), -0.29713 (1), -0.29649 (1), -0.29503 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5244    set_bounds 0.0092    solve 0.1179    add 0.0691    
Accumulated time: pickout 0.0003    decision 0.5244    set_bounds 0.0092    solve 0.1179    add 0.0691    
Current (lb-rhs): -0.30803418159484863
50 domains visited
Cumulative time: 0.8317954540252686

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 59] [/input-12, 59] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 69] [/input-12, 69] [/input-12, 53] [/input-12, 69] [/input-12, 69] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 69] [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2724184989929199
10 lb beta sum: 1.3615097999572754, worst -0.2215244174003601
Time: prepare 0.0073    bound 0.1198    transfer 0.0007    finalize 0.0023    func 0.1327    
Accumulated time: func 0.3409    prepare 0.0290    bound 0.3093    transfer 0.0020    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.37184262) min lb tensor(-0.22145766)
Number of Verified Splits: 85 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.01734137535095215 
BICCOS Cumulative time: 0.028340578079223633
Preprocessing time: 0.011783123016357422 Inference time: 0.003148794174194336 Add cuts time: 0.002038717269897461 Cut analysis time: 0.0003707408905029297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07792 (2), -0.07767 (2), -0.07704 (2), -0.07691 (2), -0.07556 (2), -0.07528 (2), -0.07462 (2), -0.07446 (2), -0.07411 (2), -0.07243 (2), -0.07092 (2), -0.06994 (2), -0.06856 (2), -0.06745 (2), -0.06690 (2), -0.06372 (2), -0.06344 (2), -0.06338 (2), -0.06301 (2), -0.06241 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0127    solve 0.1328    add 0.0830    
Accumulated time: pickout 0.0014    decision 0.5438    set_bounds 0.0218    solve 0.2507    add 0.1521    
Current (lb-rhs): -0.07792341709136963
100 domains visited
Cumulative time: 1.0982460975646973

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 46] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 59] 
split level 2: [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 53] [/input-12, 53] [/input-12, 69] [/input-12, 46] 
split level 3: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 79] [/input-12, 79] [/input-12, 53] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1281280517578125
10 lb beta sum: 1.5393521785736084, worst -0.03537881374359131
Time: prepare 0.0066    bound 0.1389    transfer 0.0007    finalize 0.0025    func 0.1514    
Accumulated time: func 0.4923    prepare 0.0359    bound 0.4482    transfer 0.0027    finalize 0.0080    
all_split False
======================Cut inference begins======================
max lb tensor(0.36876500) min lb tensor(-0.03476655)
Number of Verified Splits: 387 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03614234924316406 
BICCOS Cumulative time: 0.0644829273223877
Preprocessing time: 0.011923074722290039 Inference time: 0.016635894775390625 Add cuts time: 0.007378816604614258 Cut analysis time: 0.00020456314086914062
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0153    solve 0.1514    add 0.0187    
Accumulated time: pickout 0.0023    decision 0.5633    set_bounds 0.0372    solve 0.4021    add 0.1708    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 53,  2]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.41401216e-01, 1.27637789e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 53,  2]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.41401216e-01, 1.29560634e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 53,  2]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.57478973e-01, 1.23914406e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 53,  2]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 1.57478973e-01, 1.29921123e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 59,  2]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([2.68801275e-40, 1.74029633e-01, 1.22427747e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 59,  2]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.68801275e-40, 1.74029633e-01, 4.24288958e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 59]), tensor([1., 1.]), tensor([0, 0]), tensor([2.68801275e-40, 2.72030056e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  7
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1318066120147705

all verified at 3th iter
Time: prepare 0.0004    bound 0.0200    transfer 0.0001    finalize 0.0002    func 0.0208    
Accumulated time: func 0.5131    prepare 0.0363    bound 0.4682    transfer 0.0029    finalize 0.0082    
After pruning, left:  0

Back to Regular BaB


Properties batch 5, size 1
Remaining timeout: 194.0415768623352
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 194.0415015220642
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 194.04147863388062
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 194.04145860671997
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 5.9586 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 188, vnnlib ID: 188 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.53459740, -20.49768829, -16.34491158, -18.79847145, -17.40628815,
         -19.14499092, -17.82529068, -20.38037872, -18.29029465, -19.59790993]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [480]; unstable size 480; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 239, 1, 480] with unstable size 238 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 480] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 480] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [238]; unstable size 238; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 238] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 238] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.72171783,  2.40926838,  1.62155735,  0.22273885,  1.79393637,
          0.73343152,  2.65353608,  0.41378748,  1.72563410]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.53459740, -20.49768829, -16.34491158, -18.79847145, -17.40628815,
         -19.14499092, -17.82529068, -20.38037872, -18.29029465, -19.59790993]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.48986244, -20.62852478, -16.81181908, -19.12182999, -17.79186821,
          -19.52043343, -18.19032669, -20.78457069, -18.32118225, -19.74188423]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.32195663]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0060 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0743 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 189, vnnlib ID: 189 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.10610676, -17.76342773, -12.52653217, -13.96433544, -11.74744606,
         -14.36178112, -12.99651241, -15.44241428, -18.03474236, -17.01032066]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [516]; unstable size 516; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 216, 1, 516] with unstable size 215 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 516] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 516] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [215]; unstable size 215; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 215] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.92542005,  3.79097652, -0.20490754,  0.89167619,  1.22881341,
         -0.10279560,  2.61780787,  4.21574450,  3.57154155]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.10610676, -17.76342773, -12.52653217, -13.96433544, -11.74744606,
         -14.36178112, -12.99651241, -15.44241428, -18.03474236, -17.01032066]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.55it/s]100%|██████████| 1/1 [00:00<00:00,  8.54it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.14539337, -17.81489372, -12.46373749, -14.03906250, -12.16037464,
          -14.42084599, -13.10583210, -15.64711285, -18.06120491, -17.03760910],
         [-15.14539337, -17.81489372, -12.46373749, -14.03906250, -12.16037464,
          -14.42084599, -13.10583210, -15.64711285, -18.06120491, -17.03760910]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.30336285, 0.94545746]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1198 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 18.44194793701172
alpha/beta optimization time: 1.256690263748169
initial alpha-crown bounds: tensor([[ 1.97218394,  3.86037588, -0.17338073,  0.95068479,  1.30200815,
         -0.04648653,  2.66390944,  4.29102325,  3.62162924]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.17338073253631592
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.55586576461792
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.55582427978516
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.55579686164856
Verifying property 2 with 1 instances.
##### Instance 189 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.17338073]], device='cuda:0') need to verify.
Model prediction is: tensor([-15.10610676, -17.76342773, -12.52653217, -13.96433544, -11.74744606,
        -14.36178112, -12.99651241, -15.44241428, -18.03474236, -17.01032066],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.17338073]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 516
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 211
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 750
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010371208190917969
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17338037490844727
10 lb beta sum: 0.0, worst -0.1733853816986084
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0545    transfer 0.0001    finalize 0.0001    func 0.0550    
Accumulated time: func 0.0550    prepare 0.0002    bound 0.0545    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] 
split level 1: [/input-12, 53] 
split level 2: [/input-12, 6] 
split level 3: [/input-12, 69] 
split level 4: [/input-12, 12] 
split level 5: [/input-12, 18] 
split level 6: [/input-12, 49] 
split level 7: [/input-8, 1962] 
split level 8: [/input-12, 15] 
split level 9: [/input-12, 38] 
split level 10: [/input-12, 7] 
split level 11: [/input-8, 1717] 
split level 12: [/input-8, 1947] 
split level 13: [/input-8, 579] 
split level 14: [/input-8, 1710] 
split level 15: [/input-8, 1691] 
split level 16: [/input-8, 478] 
split level 17: [/input-8, 1698] 
split level 18: [/input-8, 467] 
split level 19: [/input-8, 476] 
split level 20: [/input-8, 1701] 
split level 21: [/input-8, 1954] 
split level 22: [/input-8, 1500] 
split level 23: [/input-8, 1634] 
split level 24: [/input-8, 109] 
split level 25: [/input-12, 57] 
split level 26: [/input-8, 438] 
split level 27: [/input-8, 723] 
split level 28: [/input-8, 1964] 
split level 29: [/input-8, 452] 
split level 30: [/input-8, 1617] 
split level 31: [/input, 3253] 
split level 32: [/input-8, 1702] 
split level 33: [/input-8, 1356] 
split level 34: [/input-8, 420] 
split level 35: [/input-8, 430] 
split level 36: [/input-8, 486] 
split level 37: [/input-8, 1970] 
split level 38: [/input-8, 227] 
split level 39: [/input-8, 1298] 
split level 40: [/input-8, 733] 
split level 41: [/input-8, 900] 
split level 42: [/input-8, 84] 
split level 43: [/input-8, 1035] 
split level 44: [/input-8, 429] 
split level 45: [/input, 3254] 
split level 46: [/input-8, 1372] 
split level 47: [/input-8, 1485] 
split level 48: [/input-8, 1357] 
split level 49: [/input-8, 1605] 
split level 50: [/input-8, 91] 
split level 51: [/input-8, 630] 
split level 52: [/input-8, 898] 
split level 53: [/input-8, 923] 
split level 54: [/input-8, 174] 
split level 55: [/input-8, 584] 
split level 56: [/input-8, 1609] 
split level 57: [/input, 3067] 
split level 58: [/input-8, 450] 
split level 59: [/input-8, 280] 
split level 60: [/input, 235] 
split level 61: [/input, 2756] 
split level 62: [/input-8, 2004] 
split level 63: [/input-8, 1771] 
split level 64: [/input-8, 145] 
split level 65: [/input-8, 1355] 
split level 66: [/input, 636] 
split level 67: [/input-8, 406] 
split level 68: [/input-8, 794] 
split level 69: [/input, 1652] 
split level 70: [/input-8, 717] 
split level 71: [/input, 2266] 
split level 72: [/input, 2722] 
split level 73: [/input, 362] 
split level 74: [/input, 2987] 
split level 75: [/input-8, 1237] 
split level 76: [/input, 3382] 
split level 77: [/input-8, 1782] 
split level 78: [/input, 3506] 
split level 79: [/input, 2537] 
split level 80: [/input-8, 1549] 
split level 81: [/input-8, 1248] 
split level 82: [/input, 3492] 
split level 83: [/input, 3543] 
split level 84: [/input, 360] 
split level 85: [/input, 1463] 
split level 86: [/input, 1491] 
split level 87: [/input, 3478] 
split level 88: [/input, 2229] 
split level 89: [/input, 2482] 
split level 90: [/input-8, 747] 
split level 91: [/input-8, 189] 
split level 92: [/input, 364] 
split level 93: [/input, 234] 
split level 94: [/input, 1175] 
split level 95: [/input, 2759] 
split level 96: [/input, 2214] 
split level 97: [/input-8, 1026] 
split level 98: [/input, 3526] 
split level 99: [/input-8, 1635] 
split level 100: [/input, 3442] 
split level 101: [/input-8, 432] 
split level 102: [/input, 2199] 
split level 103: [/input, 2523] 
split level 104: [/input, 1483] 
split level 105: [/input, 940] 
split level 106: [/input, 594] 
split level 107: [/input, 1337] 
split level 108: [/input, 2476] 
split level 109: [/input, 2248] 
split level 110: [/input-8, 1387] 
split level 111: [/input, 596] 
split level 112: [/input-8, 1601] 
split level 113: [/input-8, 187] 
split level 114: [/input, 1129] 
split level 115: [/input-8, 346] 
split level 116: [/input-8, 80] 
split level 117: [/input, 2284] 
split level 118: [/input, 2247] 
split level 119: [/input, 2263] 
split level 120: [/input-8, 1825] 
split level 121: [/input, 3485] 
split level 122: [/input, 3892] 
split level 123: [/input, 3490] 
split level 124: [/input, 2226] 
split level 125: [/input, 2241] 
split level 126: [/input-8, 1380] 
split level 127: [/input, 198] 
split level 128: [/input, 2556] 
split level 129: [/input, 2774] 
split level 130: [/input-8, 981] 
split level 131: [/input-8, 434] 
split level 132: [/input, 3863] 
split level 133: [/input, 2539] 
split level 134: [/input, 1942] 
split level 135: [/input, 707] 
split level 136: [/input, 1144] 
split level 137: [/input, 2485] 
split level 138: [/input-8, 378] 
split level 139: [/input, 1112] 
split level 140: [/input, 1218] 
split level 141: [/input, 366] 
split level 142: [/input, 196] 
split level 143: [/input, 2180] 
split level 144: [/input, 3910] 
split level 145: [/input, 1494] 
split level 146: [/input, 2233] 
split level 147: [/input, 413] 
split level 148: [/input-8, 1534] 
split level 149: [/input, 2787] 
split level 150: [/input, 2441] 
split level 151: [/input, 2598] 
split level 152: [/input, 1544] 
split level 153: [/input, 3890] 
split level 154: [/input-8, 158] 
split level 155: [/input, 1669] 
split level 156: [/input, 2540] 
split level 157: [/input, 183] 
split level 158: [/input-8, 10] 
split level 159: [/input, 2766] 
split level 160: [/input, 2007] 
split level 161: [/input-8, 73] 
split level 162: [/input, 218] 
split level 163: [/input, 3093] 
split level 164: [/input-8, 1824] 
split level 165: [/input-12, 92] 
split level 166: [/input, 2451] 
split level 167: [/input-8, 1682] 
split level 168: [/input, 2513] 
split level 169: [/input, 877] 
split level 170: [/input, 3021] 
split level 171: [/input-8, 1672] 
split level 172: [/input-8, 1218] 
split level 173: [/input, 156] 
split level 174: [/input-8, 1995] 
split level 175: [/input-8, 440] 
split level 176: [/input-8, 1735] 
split level 177: [/input, 190] 
split level 178: [/input, 2929] 
split level 179: [/input, 546] 
split level 180: [/input, 862] 
split level 181: [/input, 1014] 
split level 182: [/input, 2910] 
split level 183: [/input, 2298] 
split level 184: [/input, 2668] 
split level 185: [/input-8, 1033] 
split level 186: [/input, 1235] 
split level 187: [/input, 2330] 
split level 188: [/input, 3437] 
split level 189: [/input, 2878] 
split level 190: [/input, 982] 
split level 191: [/input, 2478] 
split level 192: [/input, 3582] 
split level 193: [/input, 2548] 
split level 194: [/input, 2784] 
split level 195: [/input-8, 1379] 
split level 196: [/input, 846] 
split level 197: [/input, 1495] 
split level 198: [/input, 3335] 
split level 199: [/input-8, 362] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1733388900756836
10 lb beta sum: 0.0, worst -0.17332446575164795
Time: prepare 0.0113    bound 0.1007    transfer 0.0012    finalize 0.0028    func 0.1188    
Accumulated time: func 0.1738    prepare 0.0218    bound 0.1553    transfer 0.0013    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.01895177) min lb tensor(-0.17331839)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010313987731933594 
BICCOS Cumulative time: 0.010313987731933594
Preprocessing time: 0.009925365447998047 Inference time: 0.00011754035949707031 Add cuts time: 5.626678466796875e-05 Cut analysis time: 0.0002148151397705078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16248 (1), -0.16235 (1), -0.16214 (1), -0.16177 (1), -0.16122 (1), -0.16119 (1), -0.16111 (1), -0.16097 (1), -0.16011 (1), -0.15969 (1), -0.15933 (1), -0.15929 (1), -0.15788 (1), -0.15780 (1), -0.15772 (1), -0.15751 (1), -0.15748 (1), -0.15742 (1), -0.15736 (1), -0.15694 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5290    set_bounds 0.0092    solve 0.1189    add 0.0675    
Accumulated time: pickout 0.0003    decision 0.5290    set_bounds 0.0092    solve 0.1189    add 0.0675    
Current (lb-rhs): -0.16247916221618652
50 domains visited
Cumulative time: 0.7958168983459473

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] [/input-12, 53] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 53] [/input-12, 78] [/input-12, 78] [/input-12, 78] 
split level 1: [/input-12, 53] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 53] [/input-12, 53] [/input-12, 6] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 2: [/input-12, 6] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 6] [/input-12, 6] [/input-12, 69] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 3: [/input-12, 69] [/input-12, 49] [/input-12, 49] [/input-12, 49] [/input-12, 69] [/input-12, 69] [/input-12, 49] [/input-12, 49] [/input-12, 49] [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14616835117340088
10 lb beta sum: 0.34676826000213623, worst -0.14577269554138184
Time: prepare 0.0069    bound 0.1207    transfer 0.0007    finalize 0.0020    func 0.1330    
Accumulated time: func 0.3068    prepare 0.0290    bound 0.2760    transfer 0.0021    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.11064661) min lb tensor(-0.14573276)
Number of Verified Splits: 89 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.0171663761138916 
BICCOS Cumulative time: 0.027480363845825195
Preprocessing time: 0.011726140975952148 Inference time: 0.003339052200317383 Add cuts time: 0.0019085407257080078 Cut analysis time: 0.0001926422119140625
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0013    decision 0.0196    set_bounds 0.0126    solve 0.1331    add 0.0151    
Accumulated time: pickout 0.0016    decision 0.5486    set_bounds 0.0218    solve 0.2519    add 0.0827    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78, 53]), tensor([-1., -1.]), tensor([0, 0]), tensor([6.33887248e-05, 1.16578594e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78, 53]), tensor([-1.,  1.]), tensor([0, 0]), tensor([6.33887248e-05, 1.24738440e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78, 53]), tensor([ 1., -1.]), tensor([0, 0]), tensor([6.33887248e-05, 8.75452012e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78, 53]), tensor([1., 1.]), tensor([0, 0]), tensor([6.33887248e-05, 9.90790576e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.012821555137634277

all verified at 1th iter
Time: prepare 0.0003    bound 0.0099    transfer 0.0001    finalize 0.0001    func 0.0105    
Accumulated time: func 0.3173    prepare 0.0293    bound 0.2858    transfer 0.0022    finalize 0.0051    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.37260484695435
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.3725299835205
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.3725073337555
Verifying property 5 with 1 instances.
##### Instance 189 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04648653]], device='cuda:0') need to verify.
Model prediction is: tensor([-15.10610676, -17.76342773, -12.52653217, -13.96433544, -11.74744606,
        -14.36178112, -12.99651241, -15.44241428, -18.03474236, -17.01032066],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04648653]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 516
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 211
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 750
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010442733764648438
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04648593068122864
10 lb beta sum: 0.0, worst -0.04649388790130615
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0537    transfer 0.0001    finalize 0.0001    func 0.0542    
Accumulated time: func 0.0542    prepare 0.0002    bound 0.0537    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 49] 
split level 1: [/input-12, 42] 
split level 2: [/input-12, 18] 
split level 3: [/input-12, 15] 
split level 4: [/input-12, 78] 
split level 5: [/input-12, 38] 
split level 6: [/input-12, 53] 
split level 7: [/input-12, 6] 
split level 8: [/input-12, 12] 
split level 9: [/input-8, 584] 
split level 10: [/input-12, 57] 
split level 11: [/input-8, 1068] 
split level 12: [/input-8, 1698] 
split level 13: [/input-8, 227] 
split level 14: [/input-8, 478] 
split level 15: [/input-8, 1053] 
split level 16: [/input-8, 1035] 
split level 17: [/input-8, 1069] 
split level 18: [/input-8, 467] 
split level 19: [/input-8, 1041] 
split level 20: [/input-8, 630] 
split level 21: [/input, 3442] 
split level 22: [/input, 2891] 
split level 23: [/input-8, 822] 
split level 24: [/input-8, 1742] 
split level 25: [/input-8, 476] 
split level 26: [/input-8, 109] 
split level 27: [/input-8, 909] 
split level 28: [/input-8, 1691] 
split level 29: [/input-8, 452] 
split level 30: [/input, 2923] 
split level 31: [/input-8, 486] 
split level 32: [/input-8, 1714] 
split level 33: [/input-8, 379] 
split level 34: [/input-8, 1682] 
split level 35: [/input-8, 1485] 
split level 36: [/input, 373] 
split level 37: [/input-8, 1771] 
split level 38: [/input-8, 280] 
split level 39: [/input-8, 1995] 
split level 40: [/input-8, 900] 
split level 41: [/input-8, 1964] 
split level 42: [/input, 2513] 
split level 43: [/input-8, 2004] 
split level 44: [/input-8, 80] 
split level 45: [/input, 636] 
split level 46: [/input-8, 1701] 
split level 47: [/input, 1942] 
split level 48: [/input-8, 73] 
split level 49: [/input, 898] 
split level 50: [/input, 3485] 
split level 51: [/input-8, 1702] 
split level 52: [/input-8, 1161] 
split level 53: [/input, 1494] 
split level 54: [/input-8, 411] 
split level 55: [/input, 1463] 
split level 56: [/input-8, 450] 
split level 57: [/input, 2241] 
split level 58: [/input-8, 1357] 
split level 59: [/input-8, 1298] 
split level 60: [/input, 414] 
split level 61: [/input-8, 1970] 
split level 62: [/input, 1511] 
split level 63: [/input, 1927] 
split level 64: [/input, 2900] 
split level 65: [/input, 2987] 
split level 66: [/input, 169] 
split level 67: [/input-8, 1617] 
split level 68: [/input-8, 372] 
split level 69: [/input-8, 1710] 
split level 70: [/input, 2759] 
split level 71: [/input, 2117] 
split level 72: [/input-8, 1355] 
split level 73: [/input, 940] 
split level 74: [/input-8, 1782] 
split level 75: [/input-8, 579] 
split level 76: [/input, 1337] 
split level 77: [/input, 2917] 
split level 78: [/input, 1495] 
split level 79: [/input, 2405] 
split level 80: [/input, 2936] 
split level 81: [/input, 2266] 
split level 82: [/input, 2548] 
split level 83: [/input, 2162] 
split level 84: [/input-8, 1988] 
split level 85: [/input, 2910] 
split level 86: [/input, 362] 
split level 87: [/input, 218] 
split level 88: [/input-8, 1757] 
split level 89: [/input, 364] 
split level 90: [/input, 413] 
split level 91: [/input, 2909] 
split level 92: [/input-8, 1062] 
split level 93: [/input-8, 1668] 
split level 94: [/input-8, 1605] 
split level 95: [/input, 956] 
split level 96: [/input, 198] 
split level 97: [/input-8, 1051] 
split level 98: [/input-8, 72] 
split level 99: [/input-8, 1731] 
split level 100: [/input-8, 1634] 
split level 101: [/input, 915] 
split level 102: [/input-8, 1609] 
split level 103: [/input, 2482] 
split level 104: [/input, 75] 
split level 105: [/input, 1452] 
split level 106: [/input, 2263] 
split level 107: [/input, 555] 
split level 108: [/input, 3254] 
split level 109: [/input, 2774] 
split level 110: [/input, 137] 
split level 111: [/input, 3548] 
split level 112: [/input, 901] 
split level 113: [/input-8, 420] 
split level 114: [/input, 2180] 
split level 115: [/input, 217] 
split level 116: [/input, 86] 
split level 117: [/input, 1432] 
split level 118: [/input, 181] 
split level 119: [/input, 1331] 
split level 120: [/input, 596] 
split level 121: [/input, 2476] 
split level 122: [/input, 2248] 
split level 123: [/input, 1369] 
split level 124: [/input, 2878] 
split level 125: [/input, 2902] 
split level 126: [/input, 3490] 
split level 127: [/input, 594] 
split level 128: [/input, 420] 
split level 129: [/input, 790] 
split level 130: [/input, 914] 
split level 131: [/input, 366] 
split level 132: [/input, 3027] 
split level 133: [/input, 862] 
split level 134: [/input, 885] 
split level 135: [/input, 2539] 
split level 136: [/input, 877] 
split level 137: [/input-8, 378] 
split level 138: [/input, 2247] 
split level 139: [/input, 90] 
split level 140: [/input, 2947] 
split level 141: [/input, 2925] 
split level 142: [/input, 156] 
split level 143: [/input-8, 1358] 
split level 144: [/input, 907] 
split level 145: [/input, 1021] 
split level 146: [/input, 2950] 
split level 147: [/input, 234] 
split level 148: [/input, 1313] 
split level 149: [/input, 60] 
split level 150: [/input, 183] 
split level 151: [/input, 91] 
split level 152: [/input, 1652] 
split level 153: [/input-8, 1142] 
split level 154: [/input, 3013] 
split level 155: [/input, 2929] 
split level 156: [/input-8, 1033] 
split level 157: [/input, 974] 
split level 158: [/input-8, 717] 
split level 159: [/input, 3260] 
split level 160: [/input, 1669] 
split level 161: [/input, 2372] 
split level 162: [/input, 2218] 
split level 163: [/input, 2229] 
split level 164: [/input, 182] 
split level 165: [/input, 846] 
split level 166: [/input, 663] 
split level 167: [/input, 2510] 
split level 168: [/input, 2284] 
split level 169: [/input, 2451] 
split level 170: [/input, 773] 
split level 171: [/input, 2178] 
split level 172: [/input, 929] 
split level 173: [/input, 2998] 
split level 174: [/input, 2007] 
split level 175: [/input-8, 116] 
split level 176: [/input, 2441] 
split level 177: [/input, 2355] 
split level 178: [/input, 2286] 
split level 179: [/input, 2556] 
split level 180: [/input, 3437] 
split level 181: [/input, 214] 
split level 182: [/input, 2254] 
split level 183: [/input, 1299] 
split level 184: [/input, 109] 
split level 185: [/input, 261] 
split level 186: [/input, 632] 
split level 187: [/input-8, 1730] 
split level 188: [/input, 948] 
split level 189: [/input, 2189] 
split level 190: [/input, 2370] 
split level 191: [/input, 65] 
split level 192: [/input, 1346] 
split level 193: [/input, 3582] 
split level 194: [/input, 964] 
split level 195: [/input-8, 2007] 
split level 196: [/input, 3276] 
split level 197: [/input-8, 123] 
split level 198: [/input, 446] 
split level 199: [/input, 484] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04642373323440552
10 lb beta sum: 0.0, worst -0.04642072319984436
Time: prepare 0.0114    bound 0.1001    transfer 0.0007    finalize 0.0025    func 0.1174    
Accumulated time: func 0.1716    prepare 0.0220    bound 0.1539    transfer 0.0008    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.19991946) min lb tensor(-0.04641277)
Number of Verified Splits: 13 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010834455490112305 
BICCOS Cumulative time: 0.010834455490112305
Preprocessing time: 0.009949207305908203 Inference time: 0.000514984130859375 Add cuts time: 0.00019407272338867188 Cut analysis time: 0.0001761913299560547
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5275    set_bounds 0.0089    solve 0.1175    add 0.0097    
Accumulated time: pickout 0.0003    decision 0.5275    set_bounds 0.0089    solve 0.1175    add 0.0097    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49]), tensor([-1.]), tensor([0]), tensor([2.38116726e-09]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49]), tensor([1.]), tensor([0]), tensor([4.44094095e-10]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.019377142190933228

all verified at 0th iter
Time: prepare 0.0003    bound 0.0041    transfer 0.0001    finalize 0.0001    func 0.0046    
Accumulated time: func 0.1762    prepare 0.0223    bound 0.1579    transfer 0.0009    finalize 0.0028    
After pruning, left:  0

Back to Regular BaB


Properties batch 6, size 1
Remaining timeout: 196.44563031196594
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 196.44556975364685
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 196.44554829597473
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.5545 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 190, vnnlib ID: 190 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.31871891, -18.47064972, -19.12639618, -20.47543144, -18.57441521,
         -21.48938560, -20.72224808, -20.14287567, -13.06752682, -17.90552711]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [738]; unstable size 738; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 738] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 738] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 738] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 239] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.85416621, 3.53390479, 4.32532787, 5.85610437, 3.81353593, 6.73792982,
         5.85599041, 5.13794994, 3.02939796]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0747 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 191, vnnlib ID: 191 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.47589493, -26.35393333, -20.38714218, -18.54223824, -19.56955147,
         -18.76048660, -21.12660980, -21.15067482, -25.07092285, -25.82291603]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [646]; unstable size 646; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 298, 1, 646] with unstable size 297 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 646] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 646] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [297]; unstable size 297; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 297] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 297] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.24239540,  5.63601017,  0.64621532, -0.16879296, -0.18126954,
          1.30519700,  1.09948552,  4.69383430,  5.11891699]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.47589493, -26.35393333, -20.38714218, -18.54223824, -19.56955147,
         -18.76048660, -21.12660980, -21.15067482, -25.07092285, -25.82291603]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.47it/s]100%|██████████| 1/1 [00:00<00:00,  8.46it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-24.62831497, -26.66142845, -20.55701828, -18.69111824, -19.67261124,
          -18.72575760, -21.38451195, -21.12766838, -25.30397987, -26.02238846],
         [-24.62831497, -26.66142845, -20.55701828, -18.69111824, -19.67261124,
          -18.72575760, -21.38451195, -21.12766838, -25.30397987, -26.02238846]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.98149300, 0.03463936]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1213 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 23.09737205505371
alpha/beta optimization time: 1.2400641441345215
initial alpha-crown bounds: tensor([[ 4.31553030,  5.74813271,  0.69852769, -0.09507775, -0.16205460,
          1.35331488,  1.20960522,  4.79450655,  5.23488617]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.16205459833145142
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5734338760376
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.57339453697205
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.57336831092834
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.5733470916748
Verifying property 3 with 1 instances.
##### Instance 191 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.09507775]], device='cuda:0') need to verify.
Model prediction is: tensor([-24.47589493, -26.35393333, -20.38714218, -18.54223824, -19.56955147,
        -18.76048660, -21.12660980, -21.15067482, -25.07092285, -25.82291603],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.09507775]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 646
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 960
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010323524475097656
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09507602453231812
10 lb beta sum: 0.0, worst -0.09507566690444946
Time: prepare 0.0002    bound 0.0893    transfer 0.0001    finalize 0.0001    func 0.0898    
Accumulated time: func 0.0898    prepare 0.0002    bound 0.0893    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] 
split level 1: [/input-12, 4] 
split level 2: [/input-12, 17] 
split level 3: [/input-12, 56] 
split level 4: [/input-12, 97] 
split level 5: [/input-12, 2] 
split level 6: [/input-12, 90] 
split level 7: [/input-12, 83] 
split level 8: [/input-12, 10] 
split level 9: [/input-12, 79] 
split level 10: [/input-12, 31] 
split level 11: [/input-12, 72] 
split level 12: [/input-8, 1371] 
split level 13: [/input-8, 1682] 
split level 14: [/input-8, 1940] 
split level 15: [/input-8, 1379] 
split level 16: [/input-8, 1380] 
split level 17: [/input-8, 851] 
split level 18: [/input-8, 1069] 
split level 19: [/input-8, 1370] 
split level 20: [/input-8, 850] 
split level 21: [/input-8, 1196] 
split level 22: [/input-8, 1681] 
split level 23: [/input-8, 245] 
split level 24: [/input-8, 1388] 
split level 25: [/input-8, 204] 
split level 26: [/input-8, 1061] 
split level 27: [/input-8, 224] 
split level 28: [/input-8, 1362] 
split level 29: [/input-8, 1363] 
split level 30: [/input-8, 232] 
split level 31: [/input-8, 852] 
split level 32: [/input-8, 246] 
split level 33: [/input-8, 230] 
split level 34: [/input-8, 1373] 
split level 35: [/input-8, 1070] 
split level 36: [/input-8, 1386] 
split level 37: [/input-8, 1387] 
split level 38: [/input-8, 1932] 
split level 39: [/input-8, 2030] 
split level 40: [/input-8, 250] 
split level 41: [/input-8, 37] 
split level 42: [/input-8, 244] 
split level 43: [/input-12, 71] 
split level 44: [/input-8, 192] 
split level 45: [/input, 3180] 
split level 46: [/input-8, 860] 
split level 47: [/input-8, 1690] 
split level 48: [/input-8, 236] 
split level 49: [/input-8, 1374] 
split level 50: [/input-12, 35] 
split level 51: [/input-8, 249] 
split level 52: [/input-8, 1939] 
split level 53: [/input-8, 194] 
split level 54: [/input, 3181] 
split level 55: [/input-8, 1206] 
split level 56: [/input-8, 597] 
split level 57: [/input-8, 46] 
split level 58: [/input-8, 1636] 
split level 59: [/input-8, 2005] 
split level 60: [/input-8, 240] 
split level 61: [/input-8, 2024] 
split level 62: [/input, 3214] 
split level 63: [/input-8, 962] 
split level 64: [/input-8, 1749] 
split level 65: [/input-8, 1955] 
split level 66: [/input, 3008] 
split level 67: [/input-8, 410] 
split level 68: [/input, 122] 
split level 69: [/input-8, 39] 
split level 70: [/input-8, 1382] 
split level 71: [/input, 123] 
split level 72: [/input, 3195] 
split level 73: [/input-8, 1076] 
split level 74: [/input-8, 215] 
split level 75: [/input, 2835] 
split level 76: [/input-8, 1665] 
split level 77: [/input, 2670] 
split level 78: [/input-8, 1765] 
split level 79: [/input-8, 1260] 
split level 80: [/input, 1307] 
split level 81: [/input-8, 182] 
split level 82: [/input-8, 1252] 
split level 83: [/input-8, 1473] 
split level 84: [/input-8, 30] 
split level 85: [/input-8, 994] 
split level 86: [/input-8, 409] 
split level 87: [/input, 3275] 
split level 88: [/input, 3166] 
split level 89: [/input-8, 1585] 
split level 90: [/input-8, 1366] 
split level 91: [/input, 2884] 
split level 92: [/input-8, 1365] 
split level 93: [/input-8, 1954] 
split level 94: [/input-8, 1078] 
split level 95: [/input, 107] 
split level 96: [/input-8, 1569] 
split level 97: [/input, 121] 
split level 98: [/input, 2976] 
split level 99: [/input, 1400] 
split level 100: [/input-8, 170] 
split level 101: [/input-8, 207] 
split level 102: [/input-8, 1308] 
split level 103: [/input, 137] 
split level 104: [/input-8, 174] 
split level 105: [/input, 905] 
split level 106: [/input-8, 1057] 
split level 107: [/input, 3177] 
split level 108: [/input-8, 1775] 
split level 109: [/input, 1324] 
split level 110: [/input, 44] 
split level 111: [/input-8, 1079] 
split level 112: [/input, 2650] 
split level 113: [/input-8, 1785] 
split level 114: [/input-8, 1375] 
split level 115: [/input, 140] 
split level 116: [/input, 2074] 
split level 117: [/input, 139] 
split level 118: [/input, 449] 
split level 119: [/input-8, 1708] 
split level 120: [/input-8, 320] 
split level 121: [/input, 3034] 
split level 122: [/input-8, 367] 
split level 123: [/input, 1308] 
split level 124: [/input, 145] 
split level 125: [/input-8, 958] 
split level 126: [/input-8, 1391] 
split level 127: [/input-8, 1354] 
split level 128: [/input, 3276] 
split level 129: [/input, 2361] 
split level 130: [/input, 1003] 
split level 131: [/input, 921] 
split level 132: [/input, 2075] 
split level 133: [/input, 2339] 
split level 134: [/input-8, 352] 
split level 135: [/input, 3243] 
split level 136: [/input, 2664] 
split level 137: [/input-8, 1750] 
split level 138: [/input, 120] 
split level 139: [/input, 2031] 
split level 140: [/input, 956] 
split level 141: [/input, 489] 
split level 142: [/input, 1004] 
split level 143: [/input, 193] 
split level 144: [/input, 2347] 
split level 145: [/input, 24] 
split level 146: [/input, 873] 
split level 147: [/input, 2345] 
split level 148: [/input, 1399] 
split level 149: [/input, 2653] 
split level 150: [/input-8, 47] 
split level 151: [/input, 156] 
split level 152: [/input, 4042] 
split level 153: [/input, 28] 
split level 154: [/input, 162] 
split level 155: [/input, 491] 
split level 156: [/input, 968] 
split level 157: [/input, 2615] 
split level 158: [/input, 2109] 
split level 159: [/input, 92] 
split level 160: [/input, 862] 
split level 161: [/input, 2077] 
split level 162: [/input, 27] 
split level 163: [/input, 274] 
split level 164: [/input, 2068] 
split level 165: [/input, 957] 
split level 166: [/input, 2631] 
split level 167: [/input, 3242] 
split level 168: [/input, 81] 
split level 169: [/input, 889] 
split level 170: [/input, 3244] 
split level 171: [/input-8, 336] 
split level 172: [/input, 2599] 
split level 173: [/input, 2363] 
split level 174: [/input, 3148] 
split level 175: [/input, 2620] 
split level 176: [/input, 78] 
split level 177: [/input, 4043] 
split level 178: [/input, 310] 
split level 179: [/input, 2680] 
split level 180: [/input, 3049] 
split level 181: [/input, 2099] 
split level 182: [/input, 2696] 
split level 183: [/input, 797] 
split level 184: [/input, 2494] 
split level 185: [/input, 2366] 
split level 186: [/input, 105] 
split level 187: [/input, 2187] 
split level 188: [/input, 445] 
split level 189: [/input, 2381] 
split level 190: [/input, 2093] 
split level 191: [/input, 1020] 
split level 192: [/input, 2333] 
split level 193: [/input, 45] 
split level 194: [/input, 1374] 
split level 195: [/input, 2731] 
split level 196: [/input, 2477] 
split level 197: [/input, 2114] 
split level 198: [/input, 2604] 
split level 199: [/input, 464] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09498542547225952
10 lb beta sum: 0.0, worst -0.09498584270477295
Time: prepare 0.0118    bound 0.0999    transfer 0.0012    finalize 0.0029    func 0.1183    
Accumulated time: func 0.2082    prepare 0.0220    bound 0.1892    transfer 0.0013    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.19737911) min lb tensor(-0.09498298)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.010962724685668945 
BICCOS Cumulative time: 0.010962724685668945
Preprocessing time: 0.009851455688476562 Inference time: 0.0003542900085449219 Add cuts time: 0.0001289844512939453 Cut analysis time: 0.0006279945373535156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08700 (1), -0.08692 (1), -0.08686 (1), -0.08682 (1), -0.08680 (1), -0.08678 (1), -0.08657 (1), -0.08651 (1), -0.08628 (1), -0.08613 (1), -0.08608 (1), -0.08604 (1), -0.08600 (1), -0.08600 (1), -0.08566 (1), -0.08557 (1), -0.08532 (1), -0.08531 (1), -0.08498 (1), -0.08403 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5226    set_bounds 0.0092    solve 0.1184    add 0.0774    
Accumulated time: pickout 0.0003    decision 0.5226    set_bounds 0.0092    solve 0.1184    add 0.0774    
Current (lb-rhs): -0.08699917793273926
50 domains visited
Cumulative time: 0.8439862728118896

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 4] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
split level 1: [/input-12, 4] [/input-12, 4] [/input-12, 17] [/input-12, 17] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 2: [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
split level 3: [/input-12, 90] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06345951557159424

all verified at 1th iter
Time: prepare 0.0069    bound 0.0119    transfer 0.0007    finalize 0.0022    func 0.0244    
Accumulated time: func 0.2325    prepare 0.0292    bound 0.2011    transfer 0.0020    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.19576445) min lb tensor(2.78949738e-05)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03455758094787598 
BICCOS Cumulative time: 0.04552030563354492
Preprocessing time: 0.011763334274291992 Inference time: 0.014303922653198242 Add cuts time: 0.00827789306640625 Cut analysis time: 0.0002124309539794922
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0122    solve 0.0244    add 0.0150    
Accumulated time: pickout 0.0013    decision 0.5421    set_bounds 0.0214    solve 0.1429    add 0.0924    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([83, 59]), tensor([-1., -1.]), tensor([0, 0]), tensor([5.75662906e-20, 5.47384471e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([83, 59]), tensor([-1.,  1.]), tensor([0, 0]), tensor([5.75662906e-20, 1.84472546e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([83, 59]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.70727348, 0.15584929]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([83, 59]), tensor([1., 1.]), tensor([0, 0]), tensor([1.70727348, 0.18968688]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.006905317306518555

all verified at 1th iter
Time: prepare 0.0004    bound 0.0111    transfer 0.0001    finalize 0.0002    func 0.0119    
Accumulated time: func 0.2444    prepare 0.0296    bound 0.2122    transfer 0.0021    finalize 0.0054    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 197.4026870727539
Verifying property 4 with 1 instances.
##### Instance 191 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.16205460]], device='cuda:0') need to verify.
Model prediction is: tensor([-24.47589493, -26.35393333, -20.38714218, -18.54223824, -19.56955147,
        -18.76048660, -21.12660980, -21.15067482, -25.07092285, -25.82291603],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.16205460]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 646
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 960
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.846687316894531e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1620543748140335
10 lb beta sum: 0.0, worst -0.16205492615699768
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0539    transfer 0.0001    finalize 0.0001    func 0.0544    
Accumulated time: func 0.0544    prepare 0.0002    bound 0.0539    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] 
split level 1: [/input-12, 2] 
split level 2: [/input-12, 10] 
split level 3: [/input-12, 8] 
split level 4: [/input-12, 90] 
split level 5: [/input-12, 97] 
split level 6: [/input-12, 17] 
split level 7: [/input-8, 908] 
split level 8: [/input-8, 868] 
split level 9: [/input-8, 875] 
split level 10: [/input-8, 930] 
split level 11: [/input-12, 56] 
split level 12: [/input-8, 909] 
split level 13: [/input-8, 20] 
split level 14: [/input-8, 1548] 
split level 15: [/input-12, 43] 
split level 16: [/input-8, 860] 
split level 17: [/input-8, 1052] 
split level 18: [/input-8, 869] 
split level 19: [/input-8, 853] 
split level 20: [/input-8, 1748] 
split level 21: [/input-8, 1259] 
split level 22: [/input-8, 1242] 
split level 23: [/input-8, 1756] 
split level 24: [/input-8, 877] 
split level 25: [/input-8, 861] 
split level 26: [/input-8, 852] 
split level 27: [/input-8, 1252] 
split level 28: [/input-8, 26] 
split level 29: [/input-8, 812] 
split level 30: [/input-8, 938] 
split level 31: [/input-8, 1363] 
split level 32: [/input-12, 59] 
split level 33: [/input-8, 918] 
split level 34: [/input, 3108] 
split level 35: [/input-8, 1379] 
split level 36: [/input-8, 1234] 
split level 37: [/input-8, 1061] 
split level 38: [/input-8, 1749] 
split level 39: [/input-8, 192] 
split level 40: [/input, 2629] 
split level 41: [/input-8, 1069] 
split level 42: [/input-8, 794] 
split level 43: [/input-8, 364] 
split level 44: [/input-8, 934] 
split level 45: [/input-8, 862] 
split level 46: [/input-8, 870] 
split level 47: [/input-8, 1362] 
split level 48: [/input-12, 79] 
split level 49: [/input-8, 336] 
split level 50: [/input-8, 1628] 
split level 51: [/input-8, 1260] 
split level 52: [/input-8, 1357] 
split level 53: [/input-8, 1371] 
split level 54: [/input-8, 1076] 
split level 55: [/input-8, 1932] 
split level 56: [/input-8, 358] 
split level 57: [/input-8, 224] 
split level 58: [/input-8, 1370] 
split level 59: [/input, 1315] 
split level 60: [/input-8, 1636] 
split level 61: [/input-8, 1373] 
split level 62: [/input-8, 101] 
split level 63: [/input-8, 1763] 
split level 64: [/input-8, 4] 
split level 65: [/input, 1332] 
split level 66: [/input-8, 1196] 
split level 67: [/input-8, 1387] 
split level 68: [/input-8, 344] 
split level 69: [/input, 1316] 
split level 70: [/input-8, 851] 
split level 71: [/input-8, 1618] 
split level 72: [/input-8, 854] 
split level 73: [/input, 1320] 
split level 74: [/input-8, 1354] 
split level 75: [/input-8, 174] 
split level 76: [/input-8, 1380] 
split level 77: [/input-8, 1633] 
split level 78: [/input-8, 1637] 
split level 79: [/input-8, 1365] 
split level 80: [/input-8, 1612] 
split level 81: [/input, 2581] 
split level 82: [/input-8, 1641] 
split level 83: [/input, 887] 
split level 84: [/input-8, 92] 
split level 85: [/input-8, 1765] 
split level 86: [/input-8, 1030] 
split level 87: [/input-8, 232] 
split level 88: [/input-8, 230] 
split level 89: [/input-8, 1625] 
split level 90: [/input-8, 215] 
split level 91: [/input-8, 2005] 
split level 92: [/input-8, 170] 
split level 93: [/input-8, 245] 
split level 94: [/input, 1815] 
split level 95: [/input, 3417] 
split level 96: [/input-8, 1386] 
split level 97: [/input, 1334] 
split level 98: [/input, 1351] 
split level 99: [/input-8, 109] 
split level 100: [/input, 1305] 
split level 101: [/input, 1400] 
split level 102: [/input-8, 887] 
split level 103: [/input, 889] 
split level 104: [/input-8, 1710] 
split level 105: [/input-8, 1388] 
split level 106: [/input, 855] 
split level 107: [/input-8, 1772] 
split level 108: [/input-8, 37] 
split level 109: [/input-8, 194] 
split level 110: [/input-8, 182] 
split level 111: [/input-8, 154] 
split level 112: [/input, 3539] 
split level 113: [/input-8, 1366] 
split level 114: [/input-8, 93] 
split level 115: [/input-8, 1374] 
split level 116: [/input-8, 207] 
split level 117: [/input, 1287] 
split level 118: [/input, 885] 
split level 119: [/input-8, 846] 
split level 120: [/input, 3142] 
split level 121: [/input-8, 1263] 
split level 122: [/input, 2394] 
split level 123: [/input, 905] 
split level 124: [/input-8, 249] 
split level 125: [/input-8, 1180] 
split level 126: [/input-8, 1976] 
split level 127: [/input, 2407] 
split level 128: [/input, 1399] 
split level 129: [/input, 2135] 
split level 130: [/input, 436] 
split level 131: [/input, 2134] 
split level 132: [/input, 1306] 
split level 133: [/input-8, 1382] 
split level 134: [/input, 1817] 
split level 135: [/input-8, 246] 
split level 136: [/input-8, 1404] 
split level 137: [/input, 533] 
split level 138: [/input-8, 1057] 
split level 139: [/input, 489] 
split level 140: [/input, 3444] 
split level 141: [/input-8, 175] 
split level 142: [/input-8, 845] 
split level 143: [/input-8, 1039] 
split level 144: [/input, 107] 
split level 145: [/input, 947] 
split level 146: [/input, 1079] 
split level 147: [/input, 3860] 
split level 148: [/input-8, 1676] 
split level 149: [/input-8, 240] 
split level 150: [/input-8, 947] 
split level 151: [/input-8, 473] 
split level 152: [/input, 2361] 
split level 153: [/input, 871] 
split level 154: [/input, 2696] 
split level 155: [/input, 2423] 
split level 156: [/input, 3034] 
split level 157: [/input, 53] 
split level 158: [/input, 2345] 
split level 159: [/input, 120] 
split level 160: [/input, 2680] 
split level 161: [/input, 310] 
split level 162: [/input-8, 1406] 
split level 163: [/input-8, 439] 
split level 164: [/input, 1307] 
split level 165: [/input-8, 510] 
split level 166: [/input, 27] 
split level 167: [/input, 1544] 
split level 168: [/input-8, 1540] 
split level 169: [/input-8, 797] 
split level 170: [/input, 535] 
split level 171: [/input, 362] 
split level 172: [/input-8, 250] 
split level 173: [/input-8, 1649] 
split level 174: [/input, 423] 
split level 175: [/input, 873] 
split level 176: [/input, 122] 
split level 177: [/input-8, 1350] 
split level 178: [/input-8, 1961] 
split level 179: [/input, 2624] 
split level 180: [/input, 2640] 
split level 181: [/input, 445] 
split level 182: [/input, 1080] 
split level 183: [/input-8, 102] 
split level 184: [/input, 2168] 
split level 185: [/input-8, 1668] 
split level 186: [/input, 85] 
split level 187: [/input-8, 1262] 
split level 188: [/input-8, 183] 
split level 189: [/input-8, 1939] 
split level 190: [/input, 2068] 
split level 191: [/input, 22] 
split level 192: [/input-8, 445] 
split level 193: [/input, 2072] 
split level 194: [/input-8, 352] 
split level 195: [/input, 1344] 
split level 196: [/input, 2391] 
split level 197: [/input, 1324] 
split level 198: [/input, 3049] 
split level 199: [/input-8, 863] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16200986504554749
10 lb beta sum: 0.0, worst -0.16200435161590576
Time: prepare 0.0114    bound 0.1017    transfer 0.0008    finalize 0.0027    func 0.1191    
Accumulated time: func 0.1734    prepare 0.0217    bound 0.1556    transfer 0.0009    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(-0.06769678) min lb tensor(-0.16200182)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.00998067855834961 
BICCOS Cumulative time: 0.00998067855834961
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15805 (1), -0.15801 (1), -0.15788 (1), -0.15777 (1), -0.15770 (1), -0.15765 (1), -0.15764 (1), -0.15740 (1), -0.15722 (1), -0.15719 (1), -0.15663 (1), -0.15656 (1), -0.15656 (1), -0.15610 (1), -0.15590 (1), -0.15513 (1), -0.15512 (1), -0.15512 (1), -0.15501 (1), -0.15500 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5317    set_bounds 0.0096    solve 0.1192    add 0.0767    
Accumulated time: pickout 0.0003    decision 0.5317    set_bounds 0.0096    solve 0.1192    add 0.0767    
Current (lb-rhs): -0.15804573893547058
50 domains visited
Cumulative time: 0.8212423324584961

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 1: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 90] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 3: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-8, 868] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-8, 868] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15109509229660034
10 lb beta sum: 0.0, worst -0.15094539523124695
Time: prepare 0.0126    bound 0.0990    transfer 0.0007    finalize 0.0026    func 0.1175    
Accumulated time: func 0.2909    prepare 0.0346    bound 0.2546    transfer 0.0016    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.02657786) min lb tensor(-0.15093711)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012303590774536133 
BICCOS Cumulative time: 0.022284269332885742
Preprocessing time: 0.01181936264038086 Inference time: 0.00017833709716796875 Add cuts time: 6.461143493652344e-05 Cut analysis time: 0.00024127960205078125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06087 (2), -0.06086 (2), -0.06084 (2), -0.06082 (2), -0.06066 (2), -0.06055 (2), -0.06042 (2), -0.06038 (2), -0.06006 (2), -0.05974 (2), -0.05960 (2), -0.05929 (2), -0.05788 (2), -0.05771 (2), -0.05765 (2), -0.05761 (2), -0.05735 (2), -0.05602 (2), -0.05597 (2), -0.05584 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0122    solve 0.1176    add 0.0748    
Accumulated time: pickout 0.0014    decision 0.5513    set_bounds 0.0218    solve 0.2367    add 0.1516    
Current (lb-rhs): -0.06087425351142883
100 domains visited
Cumulative time: 1.0595343112945557

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 68] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 8] [/input-12, 8] [/input-12, 90] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-8, 868] [/input-12, 90] [/input-12, 90] 
split level 3: [/input-8, 1252] [/input-8, 868] [/input-8, 860] [/input-8, 1371] [/input-8, 868] [/input-8, 1252] [/input-12, 17] [/input-8, 860] [/input-12, 17] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05793607234954834
10 lb beta sum: 0.11694122850894928, worst -0.25163793563842773
Time: prepare 0.0066    bound 0.1192    transfer 0.0007    finalize 0.0021    func 0.1313    
Accumulated time: func 0.4222    prepare 0.0414    bound 0.3738    transfer 0.0023    finalize 0.0074    
all_split False
======================Cut inference begins======================
max lb tensor(0.21991134) min lb tensor(-0.05420631)
Number of Verified Splits: 143 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.020837068557739258 
BICCOS Cumulative time: 0.043121337890625
Preprocessing time: 0.0116119384765625 Inference time: 0.0068569183349609375 Add cuts time: 0.0020411014556884766 Cut analysis time: 0.00032711029052734375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02618 (3), -0.02600 (3), -0.02600 (3), -0.02575 (3), -0.02468 (3), -0.02411 (3), -0.02410 (3), -0.02371 (3), -0.02358 (3), -0.02330 (3), -0.02329 (3), -0.02328 (3), -0.02270 (3), -0.02268 (3), -0.02188 (3), -0.02151 (3), -0.02092 (3), -0.02057 (3), -0.02025 (3), -0.02013 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0192    set_bounds 0.0149    solve 0.1314    add 0.0917    
Accumulated time: pickout 0.0023    decision 0.5705    set_bounds 0.0367    solve 0.3681    add 0.2433    
Current (lb-rhs): -0.02617906779050827
150 domains visited
Cumulative time: 1.338815689086914

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 8] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 8] [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-12, 17] [/input-12, 90] [/input-12, 17] [/input-12, 17] [/input-12, 10] [/input-12, 8] 
split level 2: [/input-12, 90] [/input-8, 868] [/input-12, 17] [/input-12, 17] [/input-8, 1076] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-12, 90] [/input-12, 17] 
split level 3: [/input-8, 868] [/input-8, 1252] [/input-8, 1371] [/input-8, 868] [/input-8, 1371] [/input-8, 1371] [/input-8, 1252] [/input-8, 1252] [/input-12, 17] [/input-8, 868] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029671132564544678
10 lb beta sum: 0.15630292892456055, worst -0.0438690260052681
Time: prepare 0.0068    bound 0.1187    transfer 0.0007    finalize 0.0024    func 0.1312    
Accumulated time: func 0.5535    prepare 0.0485    bound 0.4925    transfer 0.0030    finalize 0.0098    
all_split False
======================Cut inference begins======================
max lb tensor(0.11034134) min lb tensor(-0.02254198)
Number of Verified Splits: 225 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 5
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.0273587703704834 
BICCOS Cumulative time: 0.0704801082611084
Preprocessing time: 0.011522293090820312 Inference time: 0.010970115661621094 Add cuts time: 0.004399299621582031 Cut analysis time: 0.00046706199645996094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01162 (4), -0.01139 (4), -0.01131 (4), -0.01128 (4), -0.01094 (4), -0.01089 (4), -0.01087 (4), -0.01058 (4), -0.01045 (4), -0.01036 (4), -0.01027 (4), -0.00995 (4), -0.00989 (4), -0.00970 (4), -0.00932 (4), -0.00868 (4), -0.00824 (4), -0.00814 (4), -0.00810 (4), -0.00797 (4), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0198    set_bounds 0.0143    solve 0.1313    add 0.2399    
Accumulated time: pickout 0.0032    decision 0.5903    set_bounds 0.0510    solve 0.4994    add 0.4832    
Current (lb-rhs): -0.011619701981544495
200 domains visited
Cumulative time: 1.7727530002593994

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-12, 17] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 17] [/input-12, 17] 
split level 2: [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-8, 868] [/input-8, 868] 
split level 3: [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 860] [/input-8, 860] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01880931854248047
10 lb beta sum: 0.6392163634300232, worst -0.2263849675655365
Time: prepare 0.0073    bound 0.1367    transfer 0.0010    finalize 0.0022    func 0.1499    
Accumulated time: func 0.7034    prepare 0.0560    bound 0.6293    transfer 0.0040    finalize 0.0121    
all_split False
======================Cut inference begins======================
max lb tensor(0.04802752) min lb tensor(-0.01084024)
Number of Verified Splits: 288 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.03129291534423828 
BICCOS Cumulative time: 0.10177302360534668
Preprocessing time: 0.011535406112670898 Inference time: 0.014216899871826172 Add cuts time: 0.005070924758911133 Cut analysis time: 0.0004696846008300781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00804 (5), -0.00803 (5), -0.00796 (5), -0.00796 (5), -0.00795 (5), -0.00795 (5), -0.00504 (5), -0.00490 (5), -0.00490 (5), -0.00314 (5), -0.00306 (5), -0.00305 (5), -0.00287 (5), -0.00281 (5), -0.00275 (5), -0.00016 (5), -0.00006 (5), -0.00005 (5), 
Length of domains: 18
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0149    solve 0.1500    add 0.1084    
Accumulated time: pickout 0.0043    decision 0.6098    set_bounds 0.0660    solve 0.6494    add 0.5917    
Current (lb-rhs): -0.008044078946113586
218 domains visited
Cumulative time: 2.0982584953308105

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  8, 90,  2]), tensor([-1., -1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([3.91373045e-11, 2.09061671e-02, 2.07905043e-02, 2.04516370e-02,
        3.35800811e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  8, 90,  2]), tensor([-1., -1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([3.91373045e-11, 2.09061671e-02, 2.07905043e-02, 2.04516370e-02,
        3.26403975e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  8, 90,  2]), tensor([-1., -1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([3.91373045e-11, 2.09061671e-02, 2.07905043e-02, 1.46974791e-02,
        3.34410532e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  8, 90,  2]), tensor([-1., -1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([3.91373045e-11, 2.09061671e-02, 2.07905043e-02, 1.46974791e-02,
        3.51716131e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([860], [-1.0], [0], [2.4079238394032746e-36], [3]), '/input-12': (tensor([68, 17,  8,  2]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.91373045e-11, 2.09061671e-02, 2.72029359e-02, 7.01127341e-03]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([860], [-1.0], [0], [2.4079238394032746e-36], [3]), '/input-12': (tensor([68, 17,  8,  2]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.91373045e-11, 2.09061671e-02, 2.72029359e-02, 3.51698771e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([860], [1.0], [0], [0.009231293573975563], [3]), '/input-12': (tensor([68, 17,  8,  2]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.91373045e-11, 2.09061671e-02, 2.72029359e-02, 6.97308173e-03]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([860], [1.0], [0], [0.009231293573975563], [3]), '/input-12': (tensor([68, 17,  8,  2]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.91373045e-11, 2.09061671e-02, 2.72029359e-02, 3.58727798e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  2]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([3.91373045e-11, 7.31985411e-03, 6.67410484e-03]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  2]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([3.91373045e-11, 7.31985411e-03, 2.62187183e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68,  8]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.27857981e-07, 1.69062112e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68,  8]), tensor([1., 1.]), tensor([0, 0]), tensor([2.27857981e-07, 1.73319001e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10341383516788483
10 lb beta sum: 0.4764866530895233, worst -0.09314534068107605
Time: prepare 0.0006    bound 0.1362    transfer 0.0002    finalize 0.0002    func 0.1374    
Accumulated time: func 0.8408    prepare 0.0566    bound 0.7655    transfer 0.0042    finalize 0.0123    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 97] [/input-12, 8] [/input-12, 90] [/input-12, 10] 
split level 2: [/input-8, 868] [/input-12, 90] [/input-12, 17] [/input-12, 90] 
split level 3: [/input-8, 860] [/input-12, 97] [/input-8, 868] [/input-12, 17] 
split level 4: [/input-8, 1052] [/input-8, 868] [/input-8, 869] [/input-8, 868] 
split level 5: [/input-8, 1748] [/input-8, 860] [/input-8, 1052] [/input-8, 1052] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8635216951370239, worst -0.06448492407798767
10 lb beta sum: 0.8645190000534058, worst -0.06412604451179504
Time: prepare 0.0112    bound 0.1340    transfer 0.0013    finalize 0.0016    func 0.1498    
Accumulated time: func 0.9905    prepare 0.0681    bound 0.8995    transfer 0.0055    finalize 0.0139    
all_split False
======================Cut inference begins======================
max lb tensor(0.24069655) min lb tensor(-0.06395534)
Number of Verified Splits: 192 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.8485606908798218, worst -0.18264538049697876
10 lb beta sum: 0.8789764642715454, worst -0.12978899478912354
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.26427626609802246 
BICCOS Cumulative time: 0.36604928970336914
Preprocessing time: 0.007144927978515625 Inference time: 0.25409913063049316 Add cuts time: 0.002563953399658203 Cut analysis time: 0.00046825408935546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06396 (6), -0.06320 (6), -0.06222 (6), -0.06218 (6), -0.06046 (6), -0.05946 (6), -0.05871 (6), -0.05864 (6), -0.05772 (6), -0.05769 (6), -0.05709 (6), -0.05695 (6), -0.05576 (6), -0.05504 (6), -0.05469 (6), -0.05432 (6), -0.05431 (6), -0.05307 (6), -0.05115 (6), -0.05090 (6), 
Length of domains: 64
Time: pickout 0.0005    decision 0.0178    set_bounds 0.0213    solve 0.1498    add 0.0011    
Accumulated time: pickout 0.0048    decision 0.6276    set_bounds 0.0872    solve 0.7993    add 0.5928    
Current (lb-rhs): -0.06395533680915833
282 domains visited
Cumulative time: 2.718479633331299

BaB round 2
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 97] [/input-12, 10] [/input-12, 10] [/input-12, 97] [/input-12, 10] [/input-8, 908] [/input-12, 10] [/input-12, 97] 
split level 1: [/input-12, 97] [/input-12, 97] [/input-8, 869] [/input-12, 97] [/input-12, 97] [/input-8, 869] [/input-12, 97] [/input-8, 861] [/input-12, 97] [/input-8, 909] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9124410152435303, worst -0.06222185492515564
10 lb beta sum: 0.9124410152435303, worst -0.06206384301185608
Time: prepare 0.0111    bound 0.1341    transfer 0.0005    finalize 0.0015    func 0.1489    
Accumulated time: func 1.1395    prepare 0.0794    bound 1.0336    transfer 0.0061    finalize 0.0154    
all_split False
======================Cut inference begins======================
max lb tensor(0.29424205) min lb tensor(-0.06197622)
Number of Verified Splits: 155 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 10
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.022632360458374023 
BICCOS Cumulative time: 0.38868165016174316
Preprocessing time: 0.007674217224121094 Inference time: 0.012878179550170898 Add cuts time: 0.0016231536865234375 Cut analysis time: 0.00045680999755859375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06198 (8), -0.06194 (8), -0.06137 (8), -0.06059 (8), -0.05849 (8), -0.05845 (8), -0.05794 (8), -0.05742 (8), -0.05689 (8), -0.05685 (8), -0.05577 (8), -0.05555 (8), -0.05500 (8), -0.05484 (8), -0.05464 (8), -0.05436 (8), -0.05398 (8), -0.05384 (8), -0.05235 (8), -0.05131 (8), 
Length of domains: 101
Time: pickout 0.0018    decision 0.0145    set_bounds 0.0142    solve 0.1490    add 0.0033    
Accumulated time: pickout 0.0066    decision 0.6421    set_bounds 0.1015    solve 0.9483    add 0.5961    
Current (lb-rhs): -0.061976224184036255
383 domains visited
Cumulative time: 2.924921989440918

BaB round 3
batch: 101
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-8, 908] [/input-12, 56] [/input-8, 908] [/input-12, 56] [/input-8, 20] [/input-8, 20] [/input-12, 56] [/input-8, 908] [/input-8, 908] 
split level 1: [/input-8, 909] [/input-12, 56] [/input-8, 909] [/input-12, 56] [/input-8, 909] [/input-8, 860] [/input-8, 909] [/input-8, 1052] [/input-8, 20] [/input-8, 1052] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05988398194313049
10 lb beta sum: 0.6273733973503113, worst -0.0551525354385376
Time: prepare 0.0078    bound 0.1411    transfer 0.0007    finalize 0.0019    func 0.1542    
Accumulated time: func 1.2936    prepare 0.0875    bound 1.1746    transfer 0.0068    finalize 0.0173    
all_split False
======================Cut inference begins======================
max lb tensor(0.02298650) min lb tensor(-0.05508199)
Number of Verified Splits: 124 of 404
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 14
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.024419546127319336 
BICCOS Cumulative time: 0.4131011962890625
Preprocessing time: 0.011563777923583984 Inference time: 0.010842561721801758 Add cuts time: 0.0007624626159667969 Cut analysis time: 0.0012507438659667969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05508 (10), -0.05464 (10), -0.05382 (10), -0.05364 (10), -0.05165 (10), -0.05123 (10), -0.05037 (10), -0.05009 (10), -0.04998 (10), -0.04991 (10), -0.04826 (10), -0.04797 (10), -0.04718 (10), -0.04707 (10), -0.04630 (10), -0.04618 (10), -0.04617 (10), -0.04599 (10), -0.04448 (10), -0.04375 (10), 
Length of domains: 280
Time: pickout 0.0019    decision 0.0237    set_bounds 0.0219    solve 0.1543    add 0.0042    
Accumulated time: pickout 0.0085    decision 0.6658    set_bounds 0.1234    solve 1.1026    add 0.6003    
Current (lb-rhs): -0.05508199334144592
663 domains visited
Cumulative time: 3.156317710876465

BaB round 4
batch: 280
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 908] [/input-8, 860] [/input-8, 869] [/input-8, 869] [/input-8, 908] [/input-8, 1748] [/input-8, 869] [/input-8, 869] [/input-8, 908] [/input-8, 908] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05729900300502777
10 lb beta sum: 1.2671077251434326, worst -0.047367751598358154
Time: prepare 0.0110    bound 0.1471    transfer 0.0024    finalize 0.0034    func 0.1675    
Accumulated time: func 1.4611    prepare 0.0986    bound 1.3217    transfer 0.0091    finalize 0.0206    
all_split False
======================Cut inference begins======================
max lb tensor(0.65138125) min lb tensor(-0.04732347)
Number of Verified Splits: 327 of 560
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.05166912078857422 
BICCOS Cumulative time: 0.4647703170776367
Preprocessing time: 0.015970945358276367 Inference time: 0.032393455505371094 Add cuts time: 0.0028510093688964844 Cut analysis time: 0.00045371055603027344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04732 (11), -0.04712 (11), -0.04620 (11), -0.04592 (11), -0.04390 (11), -0.04378 (11), -0.04325 (11), -0.04284 (11), -0.04237 (11), -0.04191 (11), -0.04173 (11), -0.04092 (11), -0.04055 (11), -0.04015 (11), -0.03995 (11), -0.03926 (11), -0.03837 (11), -0.03823 (11), -0.03811 (11), -0.03785 (11), 
Length of domains: 233
Time: pickout 0.0039    decision 0.0304    set_bounds 0.0237    solve 0.1677    add 0.0030    
Accumulated time: pickout 0.0124    decision 0.6962    set_bounds 0.1471    solve 1.2702    add 0.6034    
Current (lb-rhs): -0.04732346534729004
896 domains visited
Cumulative time: 3.438819646835327

BaB round 5
batch: 233
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 860] [/input-8, 1748] [/input-8, 1748] [/input-8, 860] [/input-8, 1252] [/input-8, 860] [/input-8, 1932] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0554165244102478
10 lb beta sum: 1.6428625583648682, worst -0.04726988077163696
Time: prepare 0.0093    bound 0.1462    transfer 0.0008    finalize 0.0024    func 0.1617    
Accumulated time: func 1.6228    prepare 0.1081    bound 1.4679    transfer 0.0099    finalize 0.0230    
all_split False
======================Cut inference begins======================
max lb tensor(0.65011030) min lb tensor(-0.04724222)
Number of Verified Splits: 274 of 466
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.04286527633666992 
BICCOS Cumulative time: 0.5076355934143066
Preprocessing time: 0.013467550277709961 Inference time: 0.027378082275390625 Add cuts time: 0.00183868408203125 Cut analysis time: 0.00018095970153808594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04724 (12), -0.04704 (12), -0.04380 (12), -0.04369 (12), -0.04230 (12), -0.04184 (12), -0.04047 (12), -0.03987 (12), -0.03823 (12), -0.03811 (12), -0.03799 (12), -0.03782 (12), -0.03665 (12), -0.03558 (12), -0.03480 (12), -0.03452 (12), -0.03351 (12), -0.03331 (12), -0.03322 (12), -0.03306 (12), 
Length of domains: 192
Time: pickout 0.0030    decision 0.0271    set_bounds 0.0207    solve 0.1619    add 0.0047    
Accumulated time: pickout 0.0154    decision 0.7233    set_bounds 0.1677    solve 1.4321    add 0.6080    
Current (lb-rhs): -0.04724222421646118
1088 domains visited
Cumulative time: 3.70119047164917

BaB round 6
batch: 192
splitting decisions: 
split level 0: [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1932] [/input-8, 1932] [/input-8, 860] [/input-8, 860] [/input-8, 1932] [/input-8, 860] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05229438841342926

all verified at 2th iter
Time: prepare 0.0077    bound 0.0156    transfer 0.0008    finalize 0.0020    func 0.0285    
Accumulated time: func 1.6513    prepare 0.1160    bound 1.4836    transfer 0.0107    finalize 0.0251    
all_split False
======================Cut inference begins======================
max lb tensor(0.09111714) min lb tensor(0.00300077)
Number of Verified Splits: 384 of 384
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011007308959960938 
BICCOS Cumulative time: 0.5186429023742676
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0038    decision 0.0280    set_bounds 0.0175    solve 0.0286    add 0.0001    
Accumulated time: pickout 0.0193    decision 0.7513    set_bounds 0.1853    solve 1.4607    add 0.6081    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1088 domains visited
Cumulative time: 3.7921905517578125


Properties batch 5, size 1
Remaining timeout: 193.40578603744507
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 193.4056978225708
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 193.40567302703857
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 193.40564918518066
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 6.5944 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 192, vnnlib ID: 192 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.11565208, -26.29471397, -20.11076927, -23.31661606, -21.61720848,
         -22.97149086, -21.28172302, -23.18593788, -27.03968811, -25.88165855]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [697]; unstable size 697; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 312, 1, 697] with unstable size 311 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 697] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 697] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [311]; unstable size 311; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 311] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 311] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.78565812, 4.27323294, 2.01961493, 0.27245522, 1.55622101, 0.05097032,
         1.07475865, 5.46636105, 4.11699867]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0668 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 193, vnnlib ID: 193 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-33.48653412, -28.85784149, -33.36421204, -32.71415710, -32.16485214,
         -32.94163132, -33.09236145, -31.24285507, -33.00304794, -27.07908058]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [755]; unstable size 755; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 755] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 755] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 755] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 272] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.82790470, 0.86489129, 4.30059624, 3.81733036, 3.25241184, 3.89844656,
         3.96334553, 2.53978395, 4.38356400]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0725 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 194, vnnlib ID: 194 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.57879448, -25.87275887, -18.40335464, -22.53392982, -18.78349113,
         -22.35590553, -20.82909393, -22.13958931, -23.90252686, -25.55131340]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [942]; unstable size 942; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 299, 1, 942] with unstable size 298 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 942] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 942] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [298]; unstable size 298; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 298] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 298] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.78787947,  5.47186089,  3.06105757, -0.50585973,  2.82687855,
          1.17288113,  2.26738644,  3.64541507,  5.32217216]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.57879448, -25.87275887, -18.40335464, -22.53392982, -18.78349113,
         -22.35590553, -20.82909393, -22.13958931, -23.90252686, -25.55131340]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.35269165, -26.69282150, -19.10937881, -23.07330704, -19.10766220,
          -22.84299278, -21.32702637, -22.39660072, -24.61823463, -26.29825020]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00171661]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0074 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0548 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 195, vnnlib ID: 195 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.54196358, -20.82349014, -15.98302746, -15.75083733, -17.00555420,
         -16.15604782, -17.53281975, -17.70917892, -21.04745102, -20.12406921]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [787]; unstable size 787; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 787] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 787] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 787] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 259] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.29445934,  2.55111361, -1.20112324,  0.14969748, -0.85841608,
          0.26714224,  0.60579431,  3.49371576,  1.95312881]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.54196358, -20.82349014, -15.98302746, -15.75083733, -17.00555420,
         -16.15604782, -17.53281975, -17.70917892, -21.04745102, -20.12406921]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.54196358, -20.82349205, -15.98302746, -15.75083637, -17.00555229,
          -16.15604591, -17.53282166, -17.70917892, -21.04744911, -20.12407112],
         [-19.54196358, -20.82349205, -15.98302746, -15.75083637, -17.00555229,
          -16.15604591, -17.53282166, -17.70917892, -21.04744911, -20.12407112]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.23219109,  0.17301846]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.03650784, -1.03650784, -1.02063489,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           [-1.06825387, -1.05238092, -1.03650784,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           [-1.09999990, -1.06825387, -1.06825387,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           ...,
           [-1.29047608, -1.17936504, -1.16349196,  ..., -1.13174593,
            -1.13174593, -1.13174593],
           [-1.35396814, -1.27460313, -1.24285710,  ..., -1.11587298,
            -1.13174593, -1.13174593],
           [-1.32222211, -1.32222211, -1.22698402,  ..., -1.11587298,
            -1.13174593, -1.13174593]],

          [[-1.14331722, -1.14331722, -1.11111104,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           [-1.15942025, -1.14331722, -1.12721407,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           [-1.17552328, -1.14331722, -1.14331722,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           ...,
           [-1.27214170, -1.20772946, -1.20772946,  ..., -1.20772946,
            -1.19162631, -1.19162631],
           [-1.35265696, -1.28824472, -1.25603855,  ..., -1.20772946,
            -1.19162631, -1.19162631],
           [-1.33655393, -1.32045078, -1.23993552,  ..., -1.20772946,
            -1.19162631, -1.19162631]],

          [[-1.16791618, -1.18290865, -1.16791618,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           [-1.22788620, -1.21289361, -1.19790113,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           [-1.25787115, -1.21289361, -1.18290865,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           ...,
           [-1.09295356, -1.04797614, -1.06296861,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.15292358, -1.10794616, -1.07796109,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.12293863, -1.12293863, -1.01799107,  ..., -1.25787115,
            -1.25787115, -1.25787115]]],


         [[[-1.03650784, -1.03650784, -1.02063489,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           [-1.06825387, -1.05238092, -1.03650784,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           [-1.09999990, -1.06825387, -1.06825387,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           ...,
           [-1.29047608, -1.17936504, -1.16349196,  ..., -1.13174593,
            -1.13174593, -1.13174593],
           [-1.35396814, -1.27460313, -1.24285710,  ..., -1.11587298,
            -1.13174593, -1.13174593],
           [-1.32222211, -1.32222211, -1.22698402,  ..., -1.11587298,
            -1.13174593, -1.13174593]],

          [[-1.14331722, -1.14331722, -1.11111104,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           [-1.15942025, -1.14331722, -1.12721407,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           [-1.17552328, -1.14331722, -1.14331722,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           ...,
           [-1.27214170, -1.20772946, -1.20772946,  ..., -1.20772946,
            -1.19162631, -1.19162631],
           [-1.35265696, -1.28824472, -1.25603855,  ..., -1.20772946,
            -1.19162631, -1.19162631],
           [-1.33655393, -1.32045078, -1.23993552,  ..., -1.20772946,
            -1.19162631, -1.19162631]],

          [[-1.16791618, -1.18290865, -1.16791618,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           [-1.22788620, -1.21289361, -1.19790113,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           [-1.25787115, -1.21289361, -1.18290865,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           ...,
           [-1.09295356, -1.04797614, -1.06296861,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.15292358, -1.10794616, -1.07796109,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.12293863, -1.12293863, -1.01799107,  ..., -1.25787115,
            -1.25787115, -1.25787115]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1040 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 196, vnnlib ID: 196 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.03269768, -23.39742851, -19.98416901, -18.36516571, -20.57546043,
         -19.22831917, -18.52441025, -21.12701797, -21.40182495, -21.89733315]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [675]; unstable size 675; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 330, 1, 675] with unstable size 329 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 675] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 675] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [329]; unstable size 329; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 329] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 329] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.27801943,  2.64099765,  0.07614517,  0.77937651,  0.49395740,
         -0.89621031,  1.17210162,  0.74582744,  1.35976243]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.03269768, -23.39742851, -19.98416901, -18.36516571, -20.57546043,
         -19.22831917, -18.52441025, -21.12701797, -21.40182495, -21.89733315]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.68633461, -23.94194031, -20.53064346, -19.07315063, -21.10494423,
          -19.94137764, -18.70578766, -21.84820747, -22.05760574, -22.51838303]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.36736298]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0749 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 197, vnnlib ID: 197 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.98860359, -29.81665421, -22.90506172, -26.87357140, -25.76964569,
         -27.17270279, -26.79407501, -29.03504753, -24.31199837, -29.65661049]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 508] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 508] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 139] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[7.01010895, 0.43884709, 4.07559109, 3.17350554, 4.33794880, 3.97197676,
         6.33449554, 1.59434080, 6.97273016]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0646 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 198, vnnlib ID: 198 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.75551414, -26.88309479, -22.24279404, -22.79791832, -24.11035538,
         -23.30415535, -24.49540329, -25.17525864, -25.53401184, -26.56663895]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [796]; unstable size 796; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 161, 1, 796] with unstable size 160 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 796] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 796] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [160]; unstable size 160; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 160] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 160] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.89236927, -0.28250706, -0.08627716,  1.25970435,  0.33654177,
          1.56063485,  2.24391031,  2.57144308,  3.82517886]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.75551414, -26.88309479, -22.24279404, -22.79791832, -24.11035538,
         -23.30415535, -24.49540329, -25.17525864, -25.53401184, -26.56663895]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.69it/s]100%|██████████| 1/1 [00:00<00:00,  8.68it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.14734077, -27.13224411, -22.18392181, -22.67267036, -24.06332588,
          -23.14534950, -24.43538666, -25.13541222, -25.67602921, -26.70593071],
         [-22.14734077, -27.13224411, -22.18392181, -22.67267036, -24.06332588,
          -23.14534950, -24.43538666, -25.13541222, -25.67602921, -26.70593071]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.03658104, 0.52532959]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1179 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 15.66608715057373
alpha/beta optimization time: 1.2335374355316162
initial alpha-crown bounds: tensor([[ 3.92945385, -0.25881767, -0.04859740,  1.30887067,  0.37676349,
          1.59917855,  2.28565121,  2.62420321,  3.84938145]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.2588176727294922
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5785994529724
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5785608291626
Verifying property 1 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.25881767]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.75551414, -26.88309479, -22.24279404, -22.79791832, -24.11035538,
        -23.30415535, -24.49540329, -25.17525864, -25.53401184, -26.56663895],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.25881767]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 796
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 160
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 971
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010037422180175781
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2588174343109131
10 lb beta sum: 0.0, worst -0.2588181495666504
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0566    transfer 0.0001    finalize 0.0001    func 0.0571    
Accumulated time: func 0.0571    prepare 0.0002    bound 0.0566    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] 
split level 1: [/input-12, 12] 
split level 2: [/input-12, 59] 
split level 3: [/input-12, 0] 
split level 4: [/input-8, 1819] 
split level 5: [/input-12, 10] 
split level 6: [/input-8, 1578] 
split level 7: [/input-8, 1571] 
split level 8: [/input-8, 595] 
split level 9: [/input-8, 283] 
split level 10: [/input-8, 796] 
split level 11: [/input-12, 58] 
split level 12: [/input-8, 1197] 
split level 13: [/input-8, 1182] 
split level 14: [/input-8, 1590] 
split level 15: [/input-8, 794] 
split level 16: [/input-8, 1573] 
split level 17: [/input-8, 1581] 
split level 18: [/input-8, 470] 
split level 19: [/input-8, 461] 
split level 20: [/input-8, 1612] 
split level 21: [/input-8, 166] 
split level 22: [/input-8, 1637] 
split level 23: [/input, 662] 
split level 24: [/input-8, 1598] 
split level 25: [/input-8, 174] 
split level 26: [/input-8, 460] 
split level 27: [/input, 3528] 
split level 28: [/input-8, 309] 
split level 29: [/input-8, 1206] 
split level 30: [/input, 3292] 
split level 31: [/input, 661] 
split level 32: [/input, 3259] 
split level 33: [/input, 954] 
split level 34: [/input, 3513] 
split level 35: [/input, 963] 
split level 36: [/input-8, 1613] 
split level 37: [/input-12, 6] 
split level 38: [/input, 3432] 
split level 39: [/input, 2980] 
split level 40: [/input, 935] 
split level 41: [/input-8, 951] 
split level 42: [/input, 2764] 
split level 43: [/input-8, 246] 
split level 44: [/input, 2762] 
split level 45: [/input, 967] 
split level 46: [/input-8, 473] 
split level 47: [/input, 979] 
split level 48: [/input, 3257] 
split level 49: [/input-8, 274] 
split level 50: [/input, 951] 
split level 51: [/input-8, 1045] 
split level 52: [/input, 2729] 
split level 53: [/input, 3416] 
split level 54: [/input, 420] 
split level 55: [/input, 922] 
split level 56: [/input, 983] 
split level 57: [/input-8, 1622] 
split level 58: [/input, 3244] 
split level 59: [/input, 3399] 
split level 60: [/input, 2780] 
split level 61: [/input, 980] 
split level 62: [/input, 2246] 
split level 63: [/input, 659] 
split level 64: [/input-8, 1804] 
split level 65: [/input-8, 589] 
split level 66: [/input, 971] 
split level 67: [/input, 2231] 
split level 68: [/input, 2104] 
split level 69: [/input, 2120] 
split level 70: [/input, 1942] 
split level 71: [/input-8, 1597] 
split level 72: [/input, 988] 
split level 73: [/input-8, 1614] 
split level 74: [/input-8, 238] 
split level 75: [/input, 972] 
split level 76: [/input, 949] 
split level 77: [/input, 2779] 
split level 78: [/input, 989] 
split level 79: [/input, 583] 
split level 80: [/input, 948] 
split level 81: [/input, 1304] 
split level 82: [/input, 2727] 
split level 83: [/input, 2599] 
split level 84: [/input-8, 1805] 
split level 85: [/input, 2731] 
split level 86: [/input, 2121] 
split level 87: [/input, 379] 
split level 88: [/input-8, 457] 
split level 89: [/input, 3546] 
split level 90: [/input, 990] 
split level 91: [/input-8, 959] 
split level 92: [/input, 332] 
split level 93: [/input, 2796] 
split level 94: [/input, 2520] 
split level 95: [/input, 2135] 
split level 96: [/input-8, 508] 
split level 97: [/input-8, 1921] 
split level 98: [/input, 2486] 
split level 99: [/input, 200] 
split level 100: [/input, 2503] 
split level 101: [/input, 3533] 
split level 102: [/input, 2122] 
split level 103: [/input, 2517] 
split level 104: [/input, 1001] 
split level 105: [/input, 1941] 
split level 106: [/input, 1303] 
split level 107: [/input-8, 1833] 
split level 108: [/input, 228] 
split level 109: [/input, 3564] 
split level 110: [/input, 3256] 
split level 111: [/input, 919] 
split level 112: [/input, 1457] 
split level 113: [/input, 2247] 
split level 114: [/input, 1006] 
split level 115: [/input, 3105] 
split level 116: [/input, 973] 
split level 117: [/input-8, 428] 
split level 118: [/input-8, 369] 
split level 119: [/input, 3563] 
split level 120: [/input-8, 507] 
split level 121: [/input, 2152] 
split level 122: [/input-8, 1604] 
split level 123: [/input, 1963] 
split level 124: [/input, 3467] 
split level 125: [/input, 1944] 
split level 126: [/input, 999] 
split level 127: [/input, 924] 
split level 128: [/input, 2245] 
split level 129: [/input, 3384] 
split level 130: [/input, 2261] 
split level 131: [/input, 193] 
split level 132: [/input, 2504] 
split level 133: [/input, 201] 
split level 134: [/input, 2264] 
split level 135: [/input, 646] 
split level 136: [/input-8, 916] 
split level 137: [/input, 3255] 
split level 138: [/input, 2518] 
split level 139: [/input, 2230] 
split level 140: [/input, 2600] 
split level 141: [/input-8, 61] 
split level 142: [/input, 1322] 
split level 143: [/input, 199] 
split level 144: [/input, 182] 
split level 145: [/input, 2049] 
split level 146: [/input, 232] 
split level 147: [/input, 3032] 
split level 148: [/input, 3089] 
split level 149: [/input, 2501] 
split level 150: [/input, 2734] 
split level 151: [/input, 1943] 
split level 152: [/input, 2249] 
split level 153: [/input, 231] 
split level 154: [/input, 781] 
split level 155: [/input, 892] 
split level 156: [/input, 3452] 
split level 157: [/input, 2153] 
split level 158: [/input, 234] 
split level 159: [/input, 2117] 
split level 160: [/input-8, 1951] 
split level 161: [/input, 2537] 
split level 162: [/input, 2215] 
split level 163: [/input, 2279] 
split level 164: [/input, 2280] 
split level 165: [/input, 3090] 
split level 166: [/input, 227] 
split level 167: [/input, 2357] 
split level 168: [/input, 2343] 
split level 169: [/input, 2515] 
split level 170: [/input, 165] 
split level 171: [/input, 660] 
split level 172: [/input, 676] 
split level 173: [/input, 233] 
split level 174: [/input, 2134] 
split level 175: [/input, 2262] 
split level 176: [/input, 668] 
split level 177: [/input, 3358] 
split level 178: [/input, 3106] 
split level 179: [/input, 2050] 
split level 180: [/input, 2514] 
split level 181: [/input, 230] 
split level 182: [/input, 2535] 
split level 183: [/input, 2761] 
split level 184: [/input, 3289] 
split level 185: [/input, 3373] 
split level 186: [/input, 2051] 
split level 187: [/input, 2232] 
split level 188: [/input, 2061] 
split level 189: [/input, 2052] 
split level 190: [/input, 2521] 
split level 191: [/input, 508] 
split level 192: [/input, 675] 
split level 193: [/input, 2149] 
split level 194: [/input, 2094] 
split level 195: [/input, 2282] 
split level 196: [/input, 3374] 
split level 197: [/input, 1948] 
split level 198: [/input, 2333] 
split level 199: [/input, 2075] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.25867629051208496
10 lb beta sum: 0.0, worst -0.2586773633956909
Time: prepare 0.0114    bound 0.1007    transfer 0.0012    finalize 0.0027    func 0.1186    
Accumulated time: func 0.1757    prepare 0.0218    bound 0.1573    transfer 0.0013    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.15740848) min lb tensor(-0.25867522)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.0107421875 
BICCOS Cumulative time: 0.0107421875
Preprocessing time: 0.010046720504760742 Inference time: 0.0004019737243652344 Add cuts time: 7.152557373046875e-05 Cut analysis time: 0.0002219676971435547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25248 (1), -0.25241 (1), -0.25232 (1), -0.25226 (1), -0.25213 (1), -0.25183 (1), -0.25180 (1), -0.25179 (1), -0.25179 (1), -0.25166 (1), -0.25146 (1), -0.25112 (1), -0.25061 (1), -0.25037 (1), -0.25018 (1), -0.25011 (1), -0.25003 (1), -0.24996 (1), -0.24988 (1), -0.24896 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5334    set_bounds 0.0087    solve 0.1187    add 0.0675    
Accumulated time: pickout 0.0004    decision 0.5334    set_bounds 0.0087    solve 0.1187    add 0.0675    
Current (lb-rhs): -0.2524799108505249
50 domains visited
Cumulative time: 0.815338134765625

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 12] [/input-12, 12] [/input-12, 59] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 1: [/input-12, 59] [/input-12, 0] [/input-12, 0] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
split level 2: [/input-12, 0] [/input-12, 10] [/input-12, 10] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 10] [/input-12, 0] 
split level 3: [/input-8, 283] [/input-8, 470] [/input-12, 58] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 58] [/input-12, 58] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23920559883117676
10 lb beta sum: 0.19286824762821198, worst -0.2378232479095459
Time: prepare 0.0074    bound 0.1196    transfer 0.0008    finalize 0.0024    func 0.1328    
Accumulated time: func 0.3085    prepare 0.0295    bound 0.2769    transfer 0.0020    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.09562588) min lb tensor(-0.23767471)
Number of Verified Splits: 12 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.012711286544799805 
BICCOS Cumulative time: 0.023453474044799805
Preprocessing time: 0.01172184944152832 Inference time: 0.0005047321319580078 Add cuts time: 0.00019693374633789062 Cut analysis time: 0.00028777122497558594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07722 (2), -0.07687 (2), -0.07681 (2), -0.07625 (2), -0.07604 (2), -0.07550 (2), -0.07527 (2), -0.07482 (2), -0.07477 (2), -0.07476 (2), -0.07329 (2), -0.07276 (2), -0.07263 (2), -0.07161 (2), -0.07060 (2), -0.07018 (2), -0.06987 (2), -0.06900 (2), -0.06805 (2), -0.06773 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0197    set_bounds 0.0120    solve 0.1329    add 0.0769    
Accumulated time: pickout 0.0015    decision 0.5531    set_bounds 0.0207    solve 0.2515    add 0.1444    
Current (lb-rhs): -0.07721710205078125
100 domains visited
Cumulative time: 1.070821762084961

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 12] [/input-12, 12] [/input-12, 59] [/input-12, 59] [/input-12, 12] [/input-12, 12] [/input-12, 59] [/input-12, 0] [/input-12, 12] 
split level 1: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 10] [/input-12, 0] 
split level 2: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-8, 1573] [/input-8, 470] 
split level 3: [/input-12, 58] [/input-8, 470] [/input-8, 470] [/input-12, 58] [/input-12, 58] [/input-8, 470] [/input-8, 470] [/input-12, 58] [/input-8, 470] [/input-8, 461] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07463884353637695
10 lb beta sum: 0.3701664209365845, worst -0.09714767336845398
Time: prepare 0.0077    bound 0.1434    transfer 0.0007    finalize 0.0026    func 0.1570    
Accumulated time: func 0.4655    prepare 0.0375    bound 0.4203    transfer 0.0028    finalize 0.0078    
all_split False
======================Cut inference begins======================
max lb tensor(0.07089895) min lb tensor(-0.05598032)
Number of Verified Splits: 120 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 16
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.019920825958251953 
BICCOS Cumulative time: 0.04337430000305176
Preprocessing time: 0.011959314346313477 Inference time: 0.005451202392578125 Add cuts time: 0.0019268989562988281 Cut analysis time: 0.0005834102630615234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02275 (3), -0.02255 (3), -0.02248 (3), -0.02215 (3), -0.02106 (3), -0.02090 (3), -0.02084 (3), -0.02068 (3), -0.02062 (3), -0.02034 (3), -0.01987 (3), -0.01976 (3), -0.01962 (3), -0.01954 (3), -0.01913 (3), -0.01896 (3), -0.01852 (3), -0.01836 (3), -0.01807 (3), -0.01791 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0149    solve 0.1571    add 0.0924    
Accumulated time: pickout 0.0025    decision 0.5725    set_bounds 0.0356    solve 0.4086    add 0.2368    
Current (lb-rhs): -0.02274686098098755
150 domains visited
Cumulative time: 1.3758354187011719

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 0] [/input-12, 10] [/input-12, 10] [/input-12, 0] 
split level 1: [/input-12, 10] [/input-12, 10] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 10] [/input-12, 58] [/input-12, 58] [/input-12, 10] 
split level 2: [/input-12, 58] [/input-12, 58] [/input-8, 1581] [/input-8, 1637] [/input-8, 461] [/input-8, 1637] [/input-8, 1573] [/input-8, 1573] [/input-8, 1573] [/input-8, 1573] 
split level 3: [/input-8, 309] [/input-8, 309] [/input-8, 1637] [/input-8, 309] [/input-8, 1637] [/input-8, 309] [/input-8, 470] [/input-8, 470] [/input-8, 470] [/input-8, 470] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03354811668395996
10 lb beta sum: 0.35573333501815796, worst -0.1270454078912735
Time: prepare 0.0077    bound 0.1404    transfer 0.0007    finalize 0.0024    func 0.1539    
Accumulated time: func 0.6194    prepare 0.0454    bound 0.5608    transfer 0.0035    finalize 0.0102    
all_split False
======================Cut inference begins======================
max lb tensor(0.06036949) min lb tensor(-0.01487350)
Number of Verified Splits: 302 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.03358578681945801 
BICCOS Cumulative time: 0.07696008682250977
Preprocessing time: 0.011682748794555664 Inference time: 0.013511180877685547 Add cuts time: 0.007242679595947266 Cut analysis time: 0.0011491775512695312
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0194    set_bounds 0.0150    solve 0.1540    add 0.0260    
Accumulated time: pickout 0.0036    decision 0.5919    set_bounds 0.0505    solve 0.5627    add 0.2628    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12]), tensor([-1., -1.]), tensor([0, 0]), tensor([5.75661872e-20, 8.83421153e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12,  0, 10]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([5.75661872e-20, 4.91178483e-02, 3.01991571e-02, 2.31304038e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12,  0, 10]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.75661872e-20, 4.91178483e-02, 3.01991571e-02, 1.29998792e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12,  0]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([5.75661872e-20, 4.91178483e-02, 4.03584242e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.75661872e-20, 1.63814232e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12]), tensor([1., 1.]), tensor([0, 0]), tensor([5.75661872e-20, 3.43114585e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21267199516296387
10 lb beta sum: 0.4787251949310303, worst -0.21098080277442932
Time: prepare 0.0004    bound 0.1474    transfer 0.0002    finalize 0.0002    func 0.1481    
Accumulated time: func 0.7676    prepare 0.0458    bound 0.7082    transfer 0.0037    finalize 0.0104    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 10] [/input-12, 0] [/input-12, 0] 
split level 1: [/input-8, 1573] [/input-12, 58] [/input-12, 10] [/input-12, 10] 
split level 2: [/input-8, 1581] [/input-8, 1581] [/input-12, 58] [/input-8, 283] 
split level 3: [/input-8, 470] [/input-8, 1573] [/input-8, 470] [/input-12, 58] 
split level 4: [/input-8, 461] [/input-8, 470] [/input-8, 461] [/input-8, 470] 
split level 5: [/input-8, 174] [/input-8, 174] [/input-8, 309] [/input-8, 461] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6101257801055908, worst -0.14884190261363983
10 lb beta sum: 0.610084056854248, worst -0.14864401519298553
Time: prepare 0.0112    bound 0.1518    transfer 0.0015    finalize 0.0015    func 0.1677    
Accumulated time: func 0.9353    prepare 0.0574    bound 0.8600    transfer 0.0052    finalize 0.0118    
all_split False
======================Cut inference begins======================
max lb tensor(0.07210401) min lb tensor(-0.14858167)
Number of Verified Splits: 186 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.6589412093162537, worst -0.49394845962524414
10 lb beta sum: 0.6809229850769043, worst -0.08846884965896606
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 45.
#cuts 1-3: 21
#cuts 4-6: 22
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.4360623359680176 
BICCOS Cumulative time: 0.5130224227905273
Preprocessing time: 0.0070955753326416016 Inference time: 0.42110300064086914 Add cuts time: 0.00653529167175293 Cut analysis time: 0.0013284683227539062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14858 (6), -0.14641 (6), -0.14633 (6), -0.14357 (6), -0.14326 (6), -0.14240 (6), -0.14114 (6), -0.14070 (6), -0.14052 (6), -0.14026 (6), -0.13773 (6), -0.13734 (6), -0.13549 (6), -0.13373 (6), -0.13293 (6), -0.13012 (6), -0.12525 (6), -0.12449 (6), -0.12302 (6), -0.12281 (6), 
Length of domains: 70
Time: pickout 0.0005    decision 0.0182    set_bounds 0.0212    solve 0.1678    add 0.0015    
Accumulated time: pickout 0.0041    decision 0.6102    set_bounds 0.0717    solve 0.7305    add 0.2643    
Current (lb-rhs): -0.14858166873455048
220 domains visited
Cumulative time: 2.434812068939209

BaB round 2
batch: 70
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 794] [/input-8, 794] [/input-8, 796] [/input-8, 796] [/input-8, 794] [/input-8, 794] [/input-8, 796] [/input-8, 796] [/input-8, 794] [/input-8, 794] 
split level 1: [/input-8, 1612] [/input-8, 1612] [/input-8, 794] [/input-8, 1581] [/input-8, 1612] [/input-8, 1612] [/input-8, 794] [/input-8, 1581] [/input-8, 1612] [/input-8, 1612] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14495420455932617
10 lb beta sum: 0.3767719566822052, worst -0.14338380098342896
Time: prepare 0.0054    bound 0.1534    transfer 0.0024    finalize 0.0015    func 0.1647    
Accumulated time: func 1.1000    prepare 0.0630    bound 1.0133    transfer 0.0076    finalize 0.0134    
all_split False
======================Cut inference begins======================
max lb tensor(0.00908715) min lb tensor(-0.14334269)
Number of Verified Splits: 24 of 280
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 12
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.012863397598266602 
BICCOS Cumulative time: 0.525885820388794
Preprocessing time: 0.00835871696472168 Inference time: 0.002005338668823242 Add cuts time: 0.0015463829040527344 Cut analysis time: 0.0009529590606689453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14334 (8), -0.14110 (8), -0.14107 (8), -0.13804 (8), -0.13794 (8), -0.13689 (8), -0.13555 (8), -0.13512 (8), -0.13497 (8), -0.13473 (8), -0.13461 (8), -0.13236 (8), -0.13234 (8), -0.13216 (8), -0.13176 (8), -0.12960 (8), -0.12920 (8), -0.12859 (8), -0.12795 (8), -0.12743 (8), 
Length of domains: 256
Time: pickout 0.0019    decision 0.0147    set_bounds 0.0131    solve 0.1647    add 0.0014    
Accumulated time: pickout 0.0060    decision 0.6248    set_bounds 0.0848    solve 0.8952    add 0.2658    
Current (lb-rhs): -0.14334268867969513
476 domains visited
Cumulative time: 2.6438794136047363

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1581] [/input-8, 1581] [/input-8, 1573] [/input-8, 794] [/input-8, 796] [/input-8, 1581] [/input-8, 1573] [/input-8, 794] [/input-8, 1581] [/input-8, 1581] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14163482189178467
10 lb beta sum: 0.3946153521537781, worst -0.14005643129348755
Time: prepare 0.0099    bound 0.1548    transfer 0.0019    finalize 0.0021    func 0.1727    
Accumulated time: func 1.2727    prepare 0.0731    bound 1.1682    transfer 0.0096    finalize 0.0155    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02646132) min lb tensor(-0.14002760)
Number of Verified Splits: 0 of 512
No cut inferred: All or none verified.
Total number of valid cuts: 32.
#cuts 1-3: 12
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.014908790588378906 
BICCOS Cumulative time: 0.5407946109771729
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14003 (9), -0.13778 (9), -0.13776 (9), -0.13462 (9), -0.13454 (9), -0.13375 (9), -0.13206 (9), -0.13189 (9), -0.13170 (9), -0.13168 (9), -0.13163 (9), -0.13084 (9), -0.12964 (9), -0.12943 (9), -0.12904 (9), -0.12860 (9), -0.12857 (9), -0.12830 (9), -0.12649 (9), -0.12648 (9), 
Length of domains: 512
Time: pickout 0.0033    decision 0.0229    set_bounds 0.0221    solve 0.1729    add 0.0044    
Accumulated time: pickout 0.0093    decision 0.6477    set_bounds 0.1068    solve 1.0681    add 0.2702    
Current (lb-rhs): -0.14002759754657745
988 domains visited
Cumulative time: 2.884989023208618

BaB round 4
batch: 512
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1571] [/input-8, 1637] [/input-8, 1581] [/input-8, 1573] [/input-8, 1571] [/input-8, 796] [/input-8, 1581] [/input-8, 1573] [/input-8, 1571] [/input-8, 460] 
cut re-enabled after branching node selection
0 lb beta sum: 0.46953368186950684, worst -0.13707764446735382
10 lb beta sum: 0.46953368186950684, worst -0.13704027235507965
Time: prepare 0.0437    bound 0.1644    transfer 0.0080    finalize 0.0042    func 0.2270    
Accumulated time: func 1.4997    prepare 0.1170    bound 1.3325    transfer 0.0176    finalize 0.0197    
all_split False
======================Cut inference begins======================
max lb tensor(0.00448957) min lb tensor(-0.13702251)
Number of Verified Splits: 12 of 1024
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 12
#cuts 4-6: 21
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.03462624549865723 
BICCOS Cumulative time: 0.5754208564758301
Preprocessing time: 0.030756711959838867 Inference time: 0.0013470649719238281 Add cuts time: 0.0013930797576904297 Cut analysis time: 0.0011293888092041016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13702 (10), -0.13478 (10), -0.13475 (10), -0.13171 (10), -0.13161 (10), -0.13125 (10), -0.12931 (10), -0.12921 (10), -0.12907 (10), -0.12882 (10), -0.12825 (10), -0.12769 (10), -0.12747 (10), -0.12648 (10), -0.12601 (10), -0.12598 (10), -0.12545 (10), -0.12544 (10), -0.12541 (10), -0.12536 (10), 
Length of domains: 1012
Time: pickout 0.0058    decision 0.0372    set_bounds 0.0442    solve 0.2280    add 0.1098    
Accumulated time: pickout 0.0151    decision 0.6849    set_bounds 0.1510    solve 1.2961    add 0.3800    
Current (lb-rhs): -0.13702251017093658
2000 domains visited
Cumulative time: 3.3525428771972656

BaB round 5
batch: 1012
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 460] [/input-8, 1612] [/input-8, 1612] [/input-8, 1581] [/input-8, 1637] [/input-8, 1612] [/input-8, 1612] [/input-8, 796] [/input-8, 1571] [/input-8, 1612] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1350259780883789
10 lb beta sum: 0.39087018370628357, worst -0.13350775837898254
Time: prepare 0.0385    bound 0.2321    transfer 0.0134    finalize 0.0097    func 0.3071    
Accumulated time: func 1.8068    prepare 0.1558    bound 1.5646    transfer 0.0310    finalize 0.0294    
all_split False
======================Cut inference begins======================
max lb tensor(0.02287097) min lb tensor(-0.13350061)
Number of Verified Splits: 171 of 2024
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 12
#cuts 4-6: 27
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.08775925636291504 
BICCOS Cumulative time: 0.6631801128387451
Preprocessing time: 0.06209111213684082 Inference time: 0.01987171173095703 Add cuts time: 0.004396915435791016 Cut analysis time: 0.0013995170593261719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13350 (11), -0.13119 (11), -0.13101 (11), -0.12968 (11), -0.12862 (11), -0.12830 (11), -0.12786 (11), -0.12765 (11), -0.12746 (11), -0.12570 (11), -0.12559 (11), -0.12547 (11), -0.12546 (11), -0.12534 (11), -0.12452 (11), -0.12407 (11), -0.12404 (11), -0.12362 (11), -0.12353 (11), -0.12299 (11), 
Length of domains: 1853
Time: pickout 0.0692    decision 0.0714    set_bounds 0.0854    solve 0.3080    add 0.0142    
Accumulated time: pickout 0.0843    decision 0.7564    set_bounds 0.2364    solve 1.6041    add 0.3942    
Current (lb-rhs): -0.1335006058216095
3853 domains visited
Cumulative time: 3.991623878479004

BaB round 6
batch: 1853
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 796] [/input-8, 1571] [/input-8, 1637] [/input-8, 460] [/input-8, 1182] [/input-8, 1571] [/input-8, 1637] [/input-8, 460] [/input-8, 174] [/input-8, 460] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13196587562561035
10 lb beta sum: 0.3899087905883789, worst -0.13044336438179016
Time: prepare 0.0726    bound 0.3600    transfer 0.0281    finalize 0.0170    func 0.5021    
Accumulated time: func 2.3088    prepare 0.2287    bound 1.9246    transfer 0.0592    finalize 0.0464    
all_split False
======================Cut inference begins======================
max lb tensor(0.03378685) min lb tensor(-0.13044007)
Number of Verified Splits: 374 of 3706
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 12
#cuts 4-6: 32
#cuts 7-9: 14
#cuts >= 20: 0
BICCOS time: 0.1771550178527832 
BICCOS Cumulative time: 0.8403351306915283
Preprocessing time: 0.1155543327331543 Inference time: 0.04744553565979004 Add cuts time: 0.011879205703735352 Cut analysis time: 0.0022759437561035156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13044 (12), -0.12809 (12), -0.12754 (12), -0.12752 (12), -0.12616 (12), -0.12561 (12), -0.12539 (12), -0.12532 (12), -0.12522 (12), -0.12517 (12), -0.12495 (12), -0.12431 (12), -0.12341 (12), -0.12338 (12), -0.12321 (12), -0.12307 (12), -0.12279 (12), -0.12243 (12), -0.12233 (12), -0.12223 (12), 
Length of domains: 3332
Time: pickout 0.0238    decision 0.1156    set_bounds 0.3200    solve 0.5027    add 0.0177    
Accumulated time: pickout 0.1081    decision 0.8719    set_bounds 0.5564    solve 2.1068    add 0.4120    
Current (lb-rhs): -0.13044007122516632
7185 domains visited
Cumulative time: 5.155951499938965

BaB round 7
batch: 3332
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1571] [/input-8, 1571] [/input-8, 174] [/input-8, 1571] [/input-8, 1571] [/input-8, 309] [/input-8, 1637] [/input, 935] [/input-8, 460] [/input-8, 1571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13066160678863525
10 lb beta sum: 0.38762062788009644, worst -0.12913314998149872
Time: prepare 0.1402    bound 0.5883    transfer 0.0548    finalize 0.0376    func 0.8644    
Accumulated time: func 3.1733    prepare 0.3691    bound 2.5129    transfer 0.1140    finalize 0.0840    
all_split False
======================Cut inference begins======================
max lb tensor(0.03464985) min lb tensor(-0.12912506)
Number of Verified Splits: 776 of 6664
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 79.
#cuts 1-3: 12
#cuts 4-6: 31
#cuts 7-9: 35
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.34786415100097656 
BICCOS Cumulative time: 1.1881992816925049
Preprocessing time: 0.20944547653198242 Inference time: 0.10601139068603516 Add cuts time: 0.028720855712890625 Cut analysis time: 0.0036864280700683594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12913 (13), -0.12678 (13), -0.12621 (13), -0.12619 (13), -0.12484 (13), -0.12430 (13), -0.12406 (13), -0.12401 (13), -0.12390 (13), -0.12376 (13), -0.12299 (13), -0.12229 (13), -0.12209 (13), -0.12207 (13), -0.12191 (13), -0.12175 (13), -0.12093 (13), -0.12091 (13), -0.12077 (13), -0.12073 (13), 
Length of domains: 5888
Time: pickout 0.0429    decision 0.1948    set_bounds 0.4280    solve 0.8667    add 0.0235    
Accumulated time: pickout 0.1510    decision 1.0667    set_bounds 0.9844    solve 2.9735    add 0.4354    
Current (lb-rhs): -0.12912505865097046
13073 domains visited
Cumulative time: 7.076016902923584

BaB round 8
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1637] [/input-8, 460] [/input-8, 1571] [/input-8, 460] [/input-8, 1637] [/input-8, 1182] [/input-8, 309] [/input-8, 1571] [/input-8, 174] [/input-8, 1571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12700021266937256
10 lb beta sum: 0.3860361576080322, worst -0.1254226267337799
Time: prepare 0.1773    bound 0.7086    transfer 0.0552    finalize 0.2205    func 1.2158    
Accumulated time: func 4.3891    prepare 0.5466    bound 3.2215    transfer 0.1692    finalize 0.3045    
all_split False
======================Cut inference begins======================
max lb tensor(0.02748562) min lb tensor(-0.12540308)
Number of Verified Splits: 1153 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 106.
#cuts 1-3: 12
#cuts 4-6: 40
#cuts 7-9: 52
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.4753410816192627 
BICCOS Cumulative time: 1.6635403633117676
Preprocessing time: 0.25963258743286133 Inference time: 0.1721658706665039 Add cuts time: 0.03879094123840332 Cut analysis time: 0.004751682281494141
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12913 (13), -0.12678 (13), -0.12619 (13), -0.12540 (14), -0.12430 (13), -0.12407 (14), -0.12376 (13), -0.12328 (14), -0.12324 (14), -0.12313 (14), -0.12299 (13), -0.12229 (13), -0.12209 (13), -0.12207 (13), -0.12113 (14), -0.12098 (14), -0.12093 (13), -0.12073 (13), -0.12013 (14), -0.12011 (13), 
Length of domains: 8831
Time: pickout 0.0543    decision 0.4043    set_bounds 0.3703    solve 1.2172    add 0.0280    
Accumulated time: pickout 0.2054    decision 1.4711    set_bounds 1.3547    solve 4.1908    add 0.4634    
Current (lb-rhs): -0.12912505865097046
20112 domains visited
current_vram/total_varm: 11.0GB/99.9GB, batch_size increase to 8192
Cumulative time: 9.652178764343262

BaB round 9
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1182] [/input-8, 174] [/input-8, 1182] [/input-8, 174] [/input-8, 460] [/input-8, 1571] [/input-8, 1637] [/input-8, 1182] [/input-8, 1613] [/input-8, 1819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12989509105682373
10 lb beta sum: 0.3855254352092743, worst -0.12835314869880676
Time: prepare 0.3473    bound 1.3576    transfer 0.1677    finalize 0.1081    func 2.0898    
Accumulated time: func 6.4789    prepare 0.8943    bound 4.5791    transfer 0.3369    finalize 0.4126    
all_split False
======================Cut inference begins======================
max lb tensor(0.03260261) min lb tensor(-0.12834780)
Number of Verified Splits: 2881 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 154.
#cuts 1-3: 13
#cuts 4-6: 54
#cuts 7-9: 80
#cuts 10-12: 7
#cuts >= 20: 0
BICCOS time: 1.3241868019104004 
BICCOS Cumulative time: 2.987727165222168
Preprocessing time: 0.5210254192352295 Inference time: 0.6935720443725586 Add cuts time: 0.10219645500183105 Cut analysis time: 0.00739288330078125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12835 (14), -0.12600 (14), -0.12540 (14), -0.12351 (14), -0.12219 (14), -0.12160 (15), -0.12131 (14), -0.12130 (14), -0.12098 (14), -0.12086 (15), -0.12028 (15), -0.12022 (14), -0.11954 (15), -0.11950 (15), -0.11945 (15), -0.11934 (15), -0.11879 (14), -0.11875 (15), -0.11871 (15), -0.11870 (14), 
Length of domains: 14142
Time: pickout 0.1044    decision 0.6357    set_bounds 0.9495    solve 2.0933    add 0.0483    
Accumulated time: pickout 0.3098    decision 2.1067    set_bounds 2.3042    solve 6.2841    add 0.5117    
Current (lb-rhs): -0.12834779918193817
33615 domains visited
current_vram/total_varm: 22.2GB/99.9GB, batch_size increase to 16384
Cumulative time: 14.86603331565857

BaB round 10
batch: 14142
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1637] [/input-8, 1182] [/input-8, 1573] [/input-8, 1819] [/input-8, 1637] [/input-8, 174] [/input-8, 1182] [/input-8, 1613] [/input-8, 1819] [/input-8, 1571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12613976001739502
10 lb beta sum: 0.3733602464199066, worst -0.12458080053329468
Time: prepare 0.6319    bound 2.4304    transfer 0.3015    finalize 0.2136    func 4.0596    
Accumulated time: func 10.5385    prepare 1.5265    bound 7.0095    transfer 0.6383    finalize 0.6262    
all_split False
======================Cut inference begins======================
max lb tensor(0.17334628) min lb tensor(-0.12455936)
Number of Verified Splits: 6602 of 28284
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 113.
#cuts 1-3: 17
#cuts 4-6: 59
#cuts 7-9: 33
#cuts 10-12: 4
#cuts >= 20: 0
BICCOS time: 2.43965220451355 
BICCOS Cumulative time: 5.427379369735718
Preprocessing time: 0.9081652164459229 Inference time: 1.3579115867614746 Add cuts time: 0.16867828369140625 Cut analysis time: 0.004897117614746094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12456 (15), -0.12382 (15), -0.12221 (15), -0.12161 (15), -0.12148 (15), -0.12087 (15), -0.12025 (15), -0.11974 (15), -0.11899 (15), -0.11857 (16), -0.11840 (15), -0.11808 (15), -0.11776 (15), -0.11766 (15), -0.11756 (16), -0.11754 (15), -0.11750 (15), -0.11725 (16), -0.11684 (16), -0.11680 (15), 
Length of domains: 21682
Time: pickout 0.2428    decision 0.8015    set_bounds 1.7900    solve 4.0652    add 0.1753    
Accumulated time: pickout 0.5526    decision 2.9083    set_bounds 4.0942    solve 10.3492    add 0.6870    
Current (lb-rhs): -0.12455935776233673
55297 domains visited
Cumulative time: 24.51612687110901

BaB round 11
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1819] [/input-8, 460] [/input, 3259] [/input-8, 174] [/input-8, 309] [/input-8, 1819] [/input-8, 1573] [/input-8, 1637] [/input-8, 1573] [/input-8, 1819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12311893701553345
10 lb beta sum: 0.4630046486854553, worst -0.12155167758464813
Time: prepare 0.7748    bound 2.6816    transfer 0.3503    finalize 0.2487    func 4.2766    
Accumulated time: func 14.8152    prepare 2.3017    bound 9.6911    transfer 0.9886    finalize 0.8749    
all_split False
======================Cut inference begins======================
max lb tensor(0.17817092) min lb tensor(-0.12153310)
Number of Verified Splits: 6703 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 20
#cuts 4-6: 25
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 2.7557010650634766 
BICCOS Cumulative time: 8.183080434799194
Preprocessing time: 1.0825176239013672 Inference time: 1.5296099185943604 Add cuts time: 0.14196205139160156 Cut analysis time: 0.001611471176147461
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12153 (16), -0.12052 (16), -0.11979 (16), -0.11947 (16), -0.11919 (16), -0.11858 (16), -0.11854 (17), -0.11817 (16), -0.11757 (16), -0.11754 (17), -0.11745 (16), -0.11723 (16), -0.11722 (17), -0.11712 (16), -0.11705 (16), -0.11684 (16), -0.11682 (17), -0.11671 (16), -0.11652 (16), -0.11651 (16), 
Length of domains: 31363
Time: pickout 0.2343    decision 1.6467    set_bounds 2.2260    solve 4.2831    add 0.0894    
Accumulated time: pickout 0.7869    decision 4.5550    set_bounds 6.3202    solve 14.6324    add 0.7764    
Current (lb-rhs): -0.1215330958366394
81362 domains visited
Cumulative time: 35.885844230651855

BaB round 12
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 309] [/input-8, 174] [/input-8, 1819] [/input, 935] [/input-8, 1819] [/input-8, 1637] [/input, 935] [/input-8, 1819] [/input-12, 8] [/input-8, 1182] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12175798416137695
10 lb beta sum: 1.0935090780258179, worst -0.1215134859085083
Time: prepare 0.8113    bound 2.5411    transfer 0.3498    finalize 0.7601    func 4.6790    
Accumulated time: func 19.4942    prepare 3.1135    bound 12.2322    transfer 1.3384    finalize 1.6350    
all_split False
======================Cut inference begins======================
max lb tensor(0.64428902) min lb tensor(-0.12150390)
Number of Verified Splits: 27006 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 6.068132400512695 
BICCOS Cumulative time: 14.25121283531189
Preprocessing time: 1.093662977218628 Inference time: 4.548958778381348 Add cuts time: 0.42512035369873047 Cut analysis time: 0.0003902912139892578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12150 (17), -0.12052 (16), -0.11979 (16), -0.11947 (16), -0.11916 (17), -0.11855 (17), -0.11854 (17), -0.11817 (16), -0.11757 (16), -0.11754 (17), -0.11745 (16), -0.11722 (17), -0.11712 (16), -0.11684 (16), -0.11682 (17), -0.11668 (17), -0.11652 (16), -0.11644 (17), -0.11639 (17), -0.11628 (17), 
Length of domains: 20741
Time: pickout 0.2437    decision 1.6559    set_bounds 1.9140    solve 4.6859    add 0.0432    
Accumulated time: pickout 1.0306    decision 6.2109    set_bounds 8.2342    solve 19.3183    add 0.8196    
Current (lb-rhs): -0.12150390446186066
87124 domains visited
Cumulative time: 50.85687208175659

BaB round 13
batch: 16384
splitting decisions: 
split level 0: [/input, 935] [/input, 935] [/input-8, 1819] [/input-8, 589] [/input-8, 1182] [/input, 935] [/input-12, 8] [/input-8, 460] [/input-8, 1613] [/input, 3257] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12074309587478638
10 lb beta sum: 0.19354550540447235, worst -0.006220370531082153
Time: prepare 0.8113    bound 1.3966    transfer 0.3469    finalize 0.2553    func 3.5150    
Accumulated time: func 23.0091    prepare 3.9251    bound 13.6288    transfer 1.6854    finalize 1.8903    
all_split False
======================Cut inference begins======================
max lb tensor(0.33873039) min lb tensor(8.52346420e-06)
Number of Verified Splits: 32768 of 32768
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 1.1071622371673584 
BICCOS Cumulative time: 15.358375072479248
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12150 (17), -0.11916 (17), -0.11855 (17), -0.11668 (17), -0.11534 (17), -0.11447 (17), -0.11445 (17), -0.11302 (17), -0.11261 (17), -0.11185 (17), -0.11137 (17), -0.11080 (17), -0.11048 (17), -0.11020 (17), -0.11010 (17), -0.10995 (17), -0.10969 (17), -0.10951 (17), -0.10892 (17), -0.10887 (17), 
Length of domains: 4357
Time: pickout 0.2693    decision 1.8132    set_bounds 1.8997    solve 3.5221    add 0.0377    
Accumulated time: pickout 1.2999    decision 8.0241    set_bounds 10.1339    solve 22.8404    add 0.8573    
Current (lb-rhs): -0.12150390446186066
87124 domains visited
Cumulative time: 59.85949993133545

BaB round 14
batch: 4357
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 935] [/input-8, 1573] [/input-8, 1182] [/input-8, 174] [/input, 935] [/input-8, 1819] [/input-8, 174] [/input, 935] [/input-8, 1819] [/input, 948] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11967039108276367
10 lb beta sum: 0.18354827165603638, worst -0.0057257115840911865

all verified at 18th iter
Time: prepare 0.2212    bound 0.3926    transfer 0.0684    finalize 0.0543    func 0.7922    
Accumulated time: func 23.8013    prepare 4.1466    bound 14.0215    transfer 1.7538    finalize 1.9446    
all_split False
======================Cut inference begins======================
max lb tensor(0.32402125) min lb tensor(2.11000443e-05)
Number of Verified Splits: 8714 of 8714
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.5245587825775146 
BICCOS Cumulative time: 15.882933855056763
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0773    decision 0.2516    set_bounds 0.3751    solve 0.7947    add 0.0020    
Accumulated time: pickout 1.3772    decision 8.2758    set_bounds 10.5090    solve 23.6350    add 0.8593    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
87124 domains visited
Cumulative time: 61.969398736953735


Properties batch 2, size 1
Remaining timeout: 136.42809319496155
Verifying property 2 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04859740]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.75551414, -26.88309479, -22.24279404, -22.79791832, -24.11035538,
        -23.30415535, -24.49540329, -25.17525864, -25.53401184, -26.56663895],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04859740]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 796
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 160
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 971
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010752677917480469
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04859638214111328
10 lb beta sum: 0.0, worst -0.04860728979110718
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0548    transfer 0.0001    finalize 0.0001    func 0.0553    
Accumulated time: func 0.0553    prepare 0.0002    bound 0.0548    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 12] 
split level 1: [/input-12, 2] 
split level 2: [/input-12, 10] 
split level 3: [/input-12, 59] 
split level 4: [/input-8, 1819] 
split level 5: [/input-12, 58] 
split level 6: [/input-12, 55] 
split level 7: [/input-12, 0] 
split level 8: [/input-12, 6] 
split level 9: [/input-8, 796] 
split level 10: [/input-8, 163] 
split level 11: [/input-8, 1045] 
split level 12: [/input-8, 794] 
split level 13: [/input-8, 166] 
split level 14: [/input-8, 470] 
split level 15: [/input-8, 473] 
split level 16: [/input-8, 465] 
split level 17: [/input-8, 497] 
split level 18: [/input-8, 461] 
split level 19: [/input-8, 1651] 
split level 20: [/input-8, 1614] 
split level 21: [/input, 3259] 
split level 22: [/input-8, 813] 
split level 23: [/input, 2950] 
split level 24: [/input, 420] 
split level 25: [/input-8, 595] 
split level 26: [/input, 398] 
split level 27: [/input-8, 460] 
split level 28: [/input-8, 457] 
split level 29: [/input-8, 1622] 
split level 30: [/input, 2764] 
split level 31: [/input-8, 1182] 
split level 32: [/input-8, 506] 
split level 33: [/input, 3292] 
split level 34: [/input-8, 505] 
split level 35: [/input-8, 1609] 
split level 36: [/input-8, 507] 
split level 37: [/input-8, 1921] 
split level 38: [/input-8, 508] 
split level 39: [/input-8, 1613] 
split level 40: [/input-8, 1197] 
split level 41: [/input, 2729] 
split level 42: [/input-8, 1054] 
split level 43: [/input, 901] 
split level 44: [/input, 900] 
split level 45: [/input, 2966] 
split level 46: [/input-8, 916] 
split level 47: [/input-8, 1637] 
split level 48: [/input-8, 1581] 
split level 49: [/input, 3244] 
split level 50: [/input, 583] 
split level 51: [/input, 2762] 
split level 52: [/input-8, 822] 
split level 53: [/input, 3257] 
split level 54: [/input-8, 1604] 
split level 55: [/input, 2761] 
split level 56: [/input-8, 1642] 
split level 57: [/input-8, 1601] 
split level 58: [/input, 2917] 
split level 59: [/input, 3399] 
split level 60: [/input, 2980] 
split level 61: [/input-8, 1014] 
split level 62: [/input-8, 959] 
split level 63: [/input-8, 1062] 
split level 64: [/input, 967] 
split level 65: [/input-8, 951] 
split level 66: [/input, 662] 
split level 67: [/input, 2731] 
split level 68: [/input-8, 367] 
split level 69: [/input-8, 458] 
split level 70: [/input-8, 283] 
split level 71: [/input, 379] 
split level 72: [/input-8, 340] 
split level 73: [/input, 3089] 
split level 74: [/input-8, 1007] 
split level 75: [/input, 3513] 
split level 76: [/input-8, 589] 
split level 77: [/input, 418] 
split level 78: [/input, 2765] 
split level 79: [/input, 892] 
split level 80: [/input, 903] 
split level 81: [/input, 3533] 
split level 82: [/input-8, 174] 
split level 83: [/input, 2780] 
split level 84: [/input-8, 1922] 
split level 85: [/input, 963] 
split level 86: [/input-8, 1975] 
split level 87: [/input, 1354] 
split level 88: [/input, 2599] 
split level 89: [/input, 3105] 
split level 90: [/input, 2779] 
split level 91: [/input, 332] 
split level 92: [/input, 646] 
split level 93: [/input, 2120] 
split level 94: [/input, 1322] 
split level 95: [/input, 1304] 
split level 96: [/input-8, 348] 
split level 97: [/input, 660] 
split level 98: [/input-8, 982] 
split level 99: [/input-8, 382] 
split level 100: [/input, 2321] 
split level 101: [/input, 2919] 
split level 102: [/input, 3227] 
split level 103: [/input, 2600] 
split level 104: [/input, 3416] 
split level 105: [/input, 2121] 
split level 106: [/input, 3090] 
split level 107: [/input, 3256] 
split level 108: [/input, 2854] 
split level 109: [/input, 661] 
split level 110: [/input, 228] 
split level 111: [/input, 2734] 
split level 112: [/input-8, 274] 
split level 113: [/input, 805] 
split level 114: [/input-8, 1612] 
split level 115: [/input, 2916] 
split level 116: [/input-8, 911] 
split level 117: [/input, 948] 
split level 118: [/input, 1303] 
split level 119: [/input, 949] 
split level 120: [/input, 2122] 
split level 121: [/input, 3255] 
split level 122: [/input, 2049] 
split level 123: [/input, 2247] 
split level 124: [/input, 924] 
split level 125: [/input, 929] 
split level 126: [/input, 25] 
split level 127: [/input-8, 1101] 
split level 128: [/input, 973] 
split level 129: [/input-8, 1805] 
split level 130: [/input, 2053] 
split level 131: [/input, 909] 
split level 132: [/input, 3279] 
split level 133: [/input, 2153] 
split level 134: [/input, 3467] 
split level 135: [/input, 2070] 
split level 136: [/input, 945] 
split level 137: [/input, 2796] 
split level 138: [/input-8, 1573] 
split level 139: [/input, 417] 
split level 140: [/input, 3202] 
split level 141: [/input, 3564] 
split level 142: [/input, 3563] 
split level 143: [/input, 2246] 
split level 144: [/input, 3373] 
split level 145: [/input-8, 1923] 
split level 146: [/input, 2322] 
split level 147: [/input, 328] 
split level 148: [/input, 796] 
split level 149: [/input, 935] 
split level 150: [/input, 1487] 
split level 151: [/input, 2714] 
split level 152: [/input, 300] 
split level 153: [/input, 3106] 
split level 154: [/input, 2117] 
split level 155: [/input, 2051] 
split level 156: [/input, 2373] 
split level 157: [/input, 983] 
split level 158: [/input, 2727] 
split level 159: [/input, 37] 
split level 160: [/input, 3226] 
split level 161: [/input, 676] 
split level 162: [/input, 2323] 
split level 163: [/input, 2334] 
split level 164: [/input, 781] 
split level 165: [/input, 3358] 
split level 166: [/input, 2052] 
split level 167: [/input, 402] 
split level 168: [/input, 919] 
split level 169: [/input, 3091] 
split level 170: [/input, 227] 
split level 171: [/input-8, 2015] 
split level 172: [/input, 2050] 
split level 173: [/input, 22] 
split level 174: [/input, 230] 
split level 175: [/input, 26] 
split level 176: [/input, 2503] 
split level 177: [/input, 1471] 
split level 178: [/input, 77] 
split level 179: [/input, 2152] 
split level 180: [/input, 2337] 
split level 181: [/input, 3107] 
split level 182: [/input, 3289] 
split level 183: [/input, 2884] 
split level 184: [/input, 182] 
split level 185: [/input, 3186] 
split level 186: [/input, 2054] 
split level 187: [/input, 232] 
split level 188: [/input, 2324] 
split level 189: [/input, 2061] 
split level 190: [/input, 668] 
split level 191: [/input, 2372] 
split level 192: [/input, 2341] 
split level 193: [/input, 3374] 
split level 194: [/input, 2075] 
split level 195: [/input, 2333] 
split level 196: [/input, 2330] 
split level 197: [/input, 2883] 
split level 198: [/input-8, 2007] 
split level 199: [/input, 2371] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04850190877914429
10 lb beta sum: 0.0, worst -0.048504531383514404
Time: prepare 0.0118    bound 0.1005    transfer 0.0017    finalize 0.0032    func 0.1199    
Accumulated time: func 0.1752    prepare 0.0221    bound 0.1553    transfer 0.0018    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(0.38106322) min lb tensor(-0.04849863)
Number of Verified Splits: 10 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010594367980957031 
BICCOS Cumulative time: 0.010594367980957031
Preprocessing time: 0.009876012802124023 Inference time: 0.00040984153747558594 Add cuts time: 0.00013875961303710938 Cut analysis time: 0.0001697540283203125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5246    set_bounds 0.0086    solve 0.1200    add 0.0101    
Accumulated time: pickout 0.0003    decision 0.5246    set_bounds 0.0086    solve 0.1200    add 0.0101    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12]), tensor([-1.]), tensor([0]), tensor([8.22557083e-14]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12]), tensor([1.]), tensor([0]), tensor([8.22557083e-14]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.011164844036102295

all verified at 0th iter
Time: prepare 0.0003    bound 0.0041    transfer 0.0001    finalize 0.0001    func 0.0046    
Accumulated time: func 0.1798    prepare 0.0224    bound 0.1594    transfer 0.0019    finalize 0.0035    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 135.43666911125183
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 135.4366044998169
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 135.43658232688904
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 135.43656253814697
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 135.4365429878235
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 135.43652319908142
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 64.5635 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 199, vnnlib ID: 199 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.63621330, -19.31394958, -18.21076202, -17.92309380, -18.10323524,
         -18.31404495, -16.63964081, -19.00939178, -21.36870193, -18.44220543]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [674]; unstable size 674; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 288, 1, 674] with unstable size 287 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 32, 1, 674] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 674] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [287]; unstable size 287; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 32, 1, 287] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 287] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [31]; unstable size 31; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.81797099, -0.16427088,  0.28392196, -0.02352804,  0.05720639,
          0.13988918,  0.34796560,  2.02355862, -0.78494549]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.63621330, -19.31394958, -18.21076202, -17.92309380, -18.10323524,
         -18.31404495, -16.63964081, -19.00939178, -21.36870193, -18.44220543]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.56it/s]100%|██████████| 1/1 [00:00<00:00,  8.55it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.01829529, -19.11191368, -19.11120224, -18.61349297, -18.97978783,
          -19.01415634, -17.75732231, -19.74451256, -21.61842537, -18.24022865],
         [-20.01829529, -19.11191368, -19.11120224, -18.61349297, -18.97978783,
          -19.01415634, -17.75732231, -19.74451256, -21.61842537, -18.24022865]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[1.35459137, 0.85617065, 0.48290634]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1200 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 3.675459623336792
alpha/beta optimization time: 1.2421958446502686
initial alpha-crown bounds: tensor([[ 0.93886644,  0.00690556,  0.35141206,  0.04002106,  0.13587189,
          0.21446013,  0.44984055,  2.16908193, -0.63100004]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.6310000419616699
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5683557987213
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5683147907257
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.56829190254211
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.5682716369629
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.56825280189514
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.56823420524597
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.5682156085968
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.56819605827332
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.56817746162415
Verifying property 8 with 1 instances.
##### Instance 199 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.63100004]], device='cuda:0') need to verify.
Model prediction is: tensor([-19.63621330, -19.31394958, -18.21076202, -17.92309380, -18.10323524,
        -18.31404495, -16.63964081, -19.00939178, -21.36870193, -18.44220543],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.63100004]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 674
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 282
Node /15 input 0: size torch.Size([100]) unstable 31
-----------------
# of unstable neurons: 987
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010013580322265625
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6309976577758789
10 lb beta sum: 0.0, worst -0.6310124397277832
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0541    transfer 0.0001    finalize 0.0001    func 0.0545    
Accumulated time: func 0.0545    prepare 0.0002    bound 0.0541    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] 
split level 1: [/input-12, 18] 
split level 2: [/input-12, 20] 
split level 3: [/input-12, 7] 
split level 4: [/input-12, 68] 
split level 5: [/input-12, 86] 
split level 6: [/input-12, 32] 
split level 7: [/input-12, 59] 
split level 8: [/input-8, 868] 
split level 9: [/input-12, 92] 
split level 10: [/input-12, 15] 
split level 11: [/input-12, 14] 
split level 12: [/input-8, 870] 
split level 13: [/input-8, 36] 
split level 14: [/input-8, 155] 
split level 15: [/input-8, 467] 
split level 16: [/input-8, 1057] 
split level 17: [/input-8, 438] 
split level 18: [/input-8, 877] 
split level 19: [/input-8, 1379] 
split level 20: [/input, 2950] 
split level 21: [/input-8, 1126] 
split level 22: [/input-8, 149] 
split level 23: [/input-8, 430] 
split level 24: [/input-8, 1563] 
split level 25: [/input, 2949] 
split level 26: [/input-8, 35] 
split level 27: [/input-8, 883] 
split level 28: [/input-8, 1380] 
split level 29: [/input-8, 156] 
split level 30: [/input-8, 118] 
split level 31: [/input-8, 466] 
split level 32: [/input-8, 382] 
split level 33: [/input-8, 1571] 
split level 34: [/input-8, 1378] 
split level 35: [/input-8, 461] 
split level 36: [/input-8, 451] 
split level 37: [/input-8, 34] 
split level 38: [/input-8, 1124] 
split level 39: [/input-8, 442] 
split level 40: [/input-8, 1061] 
split level 41: [/input-8, 1044] 
split level 42: [/input-8, 1036] 
split level 43: [/input-8, 1053] 
split level 44: [/input, 2916] 
split level 45: [/input-8, 1388] 
split level 46: [/input-8, 1370] 
split level 47: [/input-8, 1628] 
split level 48: [/input, 389] 
split level 49: [/input-8, 944] 
split level 50: [/input-8, 1387] 
split level 51: [/input-8, 1027] 
split level 52: [/input-8, 1562] 
split level 53: [/input-8, 773] 
split level 54: [/input-8, 413] 
split level 55: [/input-8, 1509] 
split level 56: [/input-8, 1381] 
split level 57: [/input-8, 441] 
split level 58: [/input, 935] 
split level 59: [/input-8, 1382] 
split level 60: [/input-8, 182] 
split level 61: [/input-8, 1738] 
split level 62: [/input-8, 125] 
split level 63: [/input-8, 179] 
split level 64: [/input, 887] 
split level 65: [/input-8, 1358] 
split level 66: [/input-8, 945] 
split level 67: [/input-8, 1620] 
split level 68: [/input-8, 1355] 
split level 69: [/input-8, 884] 
split level 70: [/input-8, 446] 
split level 71: [/input-8, 119] 
split level 72: [/input-8, 1369] 
split level 73: [/input-8, 1386] 
split level 74: [/input-8, 1389] 
split level 75: [/input-12, 56] 
split level 76: [/input-12, 57] 
split level 77: [/input-8, 1109] 
split level 78: [/input, 650] 
split level 79: [/input-8, 955] 
split level 80: [/input, 343] 
split level 81: [/input, 138] 
split level 82: [/input-8, 1390] 
split level 83: [/input-8, 1612] 
split level 84: [/input-8, 410] 
split level 85: [/input-8, 212] 
split level 86: [/input-8, 20] 
split level 87: [/input, 937] 
split level 88: [/input, 155] 
split level 89: [/input-8, 140] 
split level 90: [/input, 134] 
split level 91: [/input, 916] 
split level 92: [/input, 2743] 
split level 93: [/input, 1481] 
split level 94: [/input-8, 1359] 
split level 95: [/input-8, 1621] 
split level 96: [/input, 117] 
split level 97: [/input-8, 585] 
split level 98: [/input-8, 402] 
split level 99: [/input, 1453] 
split level 100: [/input, 1451] 
split level 101: [/input, 156] 
split level 102: [/input-8, 1613] 
split level 103: [/input-8, 1739] 
split level 104: [/input-8, 1385] 
split level 105: [/input-8, 863] 
split level 106: [/input-8, 304] 
split level 107: [/input, 1499] 
split level 108: [/input, 917] 
split level 109: [/input-8, 1247] 
split level 110: [/input, 169] 
split level 111: [/input-8, 403] 
split level 112: [/input, 116] 
split level 113: [/input-8, 1291] 
split level 114: [/input, 1454] 
split level 115: [/input, 3363] 
split level 116: [/input-8, 2027] 
split level 117: [/input, 3009] 
split level 118: [/input-8, 1398] 
split level 119: [/input-8, 1747] 
split level 120: [/input-8, 431] 
split level 121: [/input-8, 412] 
split level 122: [/input-8, 1077] 
split level 123: [/input, 1303] 
split level 124: [/input, 885] 
split level 125: [/input, 3229] 
split level 126: [/input-8, 885] 
split level 127: [/input, 3252] 
split level 128: [/input-8, 1526] 
split level 129: [/input, 181] 
split level 130: [/input-8, 404] 
split level 131: [/input, 2757] 
split level 132: [/input-8, 218] 
split level 133: [/input-8, 235] 
split level 134: [/input-8, 1678] 
split level 135: [/input-8, 733] 
split level 136: [/input-8, 1329] 
split level 137: [/input, 3292] 
split level 138: [/input, 102] 
split level 139: [/input, 3273] 
split level 140: [/input, 1514] 
split level 141: [/input-8, 220] 
split level 142: [/input, 150] 
split level 143: [/input-8, 1670] 
split level 144: [/input, 130] 
split level 145: [/input, 2716] 
split level 146: [/input, 2765] 
split level 147: [/input-8, 447] 
split level 148: [/input-8, 407] 
split level 149: [/input, 2739] 
split level 150: [/input, 857] 
split level 151: [/input-8, 578] 
split level 152: [/input-8, 1622] 
split level 153: [/input-8, 176] 
split level 154: [/input, 2667] 
split level 155: [/input-8, 440] 
split level 156: [/input, 649] 
split level 157: [/input, 648] 
split level 158: [/input-8, 969] 
split level 159: [/input, 2751] 
split level 160: [/input-8, 1331] 
split level 161: [/input-8, 229] 
split level 162: [/input-8, 278] 
split level 163: [/input, 216] 
split level 164: [/input-8, 411] 
split level 165: [/input, 905] 
split level 166: [/input, 165] 
split level 167: [/input-8, 87] 
split level 168: [/input, 876] 
split level 169: [/input, 841] 
split level 170: [/input-8, 1219] 
split level 171: [/input-8, 296] 
split level 172: [/input, 2875] 
split level 173: [/input-8, 59] 
split level 174: [/input-8, 1539] 
split level 175: [/input-8, 961] 
split level 176: [/input, 235] 
split level 177: [/input-8, 174] 
split level 178: [/input-8, 62] 
split level 179: [/input, 1509] 
split level 180: [/input-8, 439] 
split level 181: [/input-8, 909] 
split level 182: [/input, 956] 
split level 183: [/input-8, 211] 
split level 184: [/input-8, 355] 
split level 185: [/input, 2766] 
split level 186: [/input, 2674] 
split level 187: [/input, 844] 
split level 188: [/input, 2720] 
split level 189: [/input, 1767] 
split level 190: [/input-8, 928] 
split level 191: [/input-8, 284] 
split level 192: [/input-8, 14] 
split level 193: [/input, 24] 
split level 194: [/input, 939] 
split level 195: [/input-8, 130] 
split level 196: [/input, 1165] 
split level 197: [/input, 1768] 
split level 198: [/input-8, 1347] 
split level 199: [/input, 1130] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6308536529541016
10 lb beta sum: 0.0, worst -0.6308550834655762
Time: prepare 0.0116    bound 0.1002    transfer 0.0007    finalize 0.0026    func 0.1177    
Accumulated time: func 0.1722    prepare 0.0220    bound 0.1543    transfer 0.0008    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.33893394) min lb tensor(-0.63083839)
Number of Verified Splits: 7 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.010548114776611328 
BICCOS Cumulative time: 0.010548114776611328
Preprocessing time: 0.009883880615234375 Inference time: 0.00028395652770996094 Add cuts time: 0.00010371208190917969 Cut analysis time: 0.0002765655517578125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.60489 (1), -0.60481 (1), -0.60424 (1), -0.60408 (1), -0.60220 (1), -0.60144 (1), -0.60138 (1), -0.60124 (1), -0.60065 (1), -0.59956 (1), -0.59949 (1), -0.59679 (1), -0.59613 (1), -0.59579 (1), -0.59523 (1), -0.59267 (1), -0.59182 (1), -0.59134 (1), -0.59100 (1), -0.59061 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5291    set_bounds 0.0084    solve 0.1178    add 0.0801    
Accumulated time: pickout 0.0003    decision 0.5291    set_bounds 0.0084    solve 0.1178    add 0.0801    
Current (lb-rhs): -0.604888916015625
50 domains visited
Cumulative time: 0.8190512657165527

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 20] [/input-12, 18] 
split level 2: [/input-12, 20] [/input-12, 86] [/input-12, 86] [/input-12, 20] [/input-12, 20] [/input-12, 20] [/input-12, 20] [/input-12, 20] [/input-12, 86] [/input-12, 20] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 86] [/input-12, 86] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5662169456481934
10 lb beta sum: 1.4109927415847778, worst -0.44959282875061035
Time: prepare 0.0073    bound 0.1200    transfer 0.0010    finalize 0.0024    func 0.1334    
Accumulated time: func 0.3055    prepare 0.0295    bound 0.2743    transfer 0.0018    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.56413436) min lb tensor(-0.44908017)
Number of Verified Splits: 152 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.019967317581176758 
BICCOS Cumulative time: 0.030515432357788086
Preprocessing time: 0.011635541915893555 Inference time: 0.005905866622924805 Add cuts time: 0.002101898193359375 Cut analysis time: 0.00032401084899902344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21996 (2), -0.21952 (2), -0.21895 (2), -0.21651 (2), -0.21570 (2), -0.21541 (2), -0.21508 (2), -0.21464 (2), -0.21432 (2), -0.21055 (2), -0.20996 (2), -0.20925 (2), -0.20922 (2), -0.20887 (2), -0.20832 (2), -0.20691 (2), -0.20646 (2), -0.20531 (2), -0.20491 (2), -0.20346 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0120    solve 0.1334    add 0.0844    
Accumulated time: pickout 0.0013    decision 0.5483    set_bounds 0.0204    solve 0.2512    add 0.1645    
Current (lb-rhs): -0.21995973587036133
100 domains visited
Cumulative time: 1.08933424949646

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] 
split level 2: [/input-12, 86] [/input-12, 7] [/input-12, 7] [/input-12, 20] [/input-12, 7] [/input-12, 7] [/input-12, 20] [/input-12, 20] [/input-12, 86] [/input-12, 7] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 7] [/input-12, 7] [/input-12, 32] [/input-12, 86] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3657999038696289
10 lb beta sum: 1.3766350746154785, worst -0.2060389518737793
Time: prepare 0.0070    bound 0.1191    transfer 0.0007    finalize 0.0024    func 0.1318    
Accumulated time: func 0.4373    prepare 0.0367    bound 0.3934    transfer 0.0025    finalize 0.0074    
all_split False
======================Cut inference begins======================
max lb tensor(0.62426007) min lb tensor(-0.20534635)
Number of Verified Splits: 224 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 18
#cuts >= 20: 0
BICCOS time: 0.026048898696899414 
BICCOS Cumulative time: 0.0565643310546875
Preprocessing time: 0.011517524719238281 Inference time: 0.009521961212158203 Add cuts time: 0.004571676254272461 Cut analysis time: 0.00043773651123046875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10091 (3), -0.09691 (3), -0.09672 (3), -0.09536 (3), -0.07721 (3), -0.07668 (3), -0.07480 (3), -0.07458 (3), -0.07423 (3), -0.07399 (3), -0.07382 (3), -0.06945 (3), -0.06889 (3), -0.06865 (3), -0.06779 (3), -0.06768 (3), -0.06607 (3), -0.06457 (3), -0.06450 (3), -0.06291 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0191    set_bounds 0.0154    solve 0.1318    add 0.0954    
Accumulated time: pickout 0.0023    decision 0.5674    set_bounds 0.0358    solve 0.3830    add 0.2600    
Current (lb-rhs): -0.10090959072113037
150 domains visited
Cumulative time: 1.3783204555511475

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] 
split level 2: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
split level 3: [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-8, 868] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2571725845336914
10 lb beta sum: 2.041074752807617, worst -0.07906222343444824
Time: prepare 0.0073    bound 0.1355    transfer 0.0007    finalize 0.0020    func 0.1486    
Accumulated time: func 0.5859    prepare 0.0442    bound 0.5288    transfer 0.0032    finalize 0.0094    
all_split False
======================Cut inference begins======================
max lb tensor(0.44942141) min lb tensor(-0.07731128)
Number of Verified Splits: 347 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 34
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.03886222839355469 
BICCOS Cumulative time: 0.09542655944824219
Preprocessing time: 0.011509418487548828 Inference time: 0.014893054962158203 Add cuts time: 0.011623382568359375 Cut analysis time: 0.0008363723754882812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02959 (4), -0.02958 (4), -0.02957 (4), -0.02957 (4), -0.02955 (4), -0.02954 (4), -0.02952 (4), -0.02949 (4), -0.02921 (4), -0.02921 (4), -0.02919 (4), -0.02914 (4), -0.02894 (4), -0.02893 (4), -0.02891 (4), -0.02883 (4), -0.02701 (4), -0.02701 (4), -0.02700 (4), -0.02699 (4), 
Length of domains: 32
Time: pickout 0.0010    decision 0.0190    set_bounds 0.0153    solve 0.1487    add 0.2273    
Accumulated time: pickout 0.0033    decision 0.5864    set_bounds 0.0511    solve 0.5317    add 0.4873    
Current (lb-rhs): -0.029585599899291992
182 domains visited
Cumulative time: 1.8287508487701416

Shallow-BaB round 5
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 18] [/input-12, 18] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 7] [/input-12, 7] 
split level 2: [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-12, 7] [/input-8, 868] [/input-12, 7] [/input-8, 868] [/input-8, 868] [/input-8, 868] 
split level 3: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 4: [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] 
split level 5: [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23261499404907227

all verified at 5th iter
Time: prepare 0.0068    bound 0.0446    transfer 0.0007    finalize 0.0029    func 0.0573    
Accumulated time: func 0.6432    prepare 0.0514    bound 0.5734    transfer 0.0039    finalize 0.0123    
all_split False
======================Cut inference begins======================
max lb tensor(0.52575684) min lb tensor(0.00087857)
Number of Verified Splits: 384 of 384
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 34
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.038023948669433594 
BICCOS Cumulative time: 0.13345050811767578
Preprocessing time: 0.010909557342529297 Inference time: 0.019044876098632812 Add cuts time: 0.0071125030517578125 Cut analysis time: 0.0009570121765136719
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0246    set_bounds 0.0133    solve 0.0574    add 0.0296    
Accumulated time: pickout 0.0042    decision 0.6110    set_bounds 0.0643    solve 0.5891    add 0.5169    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
182 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 72]), tensor([-1., -1.]), tensor([0, 0]), tensor([5.75662906e-20, 1.89149305e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 72]), tensor([-1.,  1.]), tensor([0, 0]), tensor([5.75662906e-20, 6.27065718e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 72]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 3.64284575e-01, 1.37293804e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 72]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.75662906e-20, 3.64284575e-01, 4.53523695e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72, 18]), tensor([ 1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([5.75662906e-20, 2.65587628e-01, 1.45733997e-01, 1.78820360e-02,
        3.45723689e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72, 18]), tensor([ 1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([5.75662906e-20, 2.65587628e-01, 1.45733997e-01, 1.78820360e-02,
        3.12326420e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 2.65587628e-01, 1.45733997e-01, 4.82242286e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72, 18]), tensor([ 1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([5.75662906e-20, 2.65587628e-01, 1.41786739e-01, 1.91265810e-02,
        3.43750060e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72, 18]), tensor([ 1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([5.75662906e-20, 2.65587628e-01, 1.41786739e-01, 1.91265810e-02,
        3.05243004e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([5.75662906e-20, 2.65587628e-01, 1.41786739e-01, 4.61321056e-01]), tensor([0, 1, 2, 3]))}
Shallow branching resets to n domains:  10
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2752704620361328

all verified at 3th iter
Time: prepare 0.0004    bound 0.0314    transfer 0.0001    finalize 0.0002    func 0.0322    
Accumulated time: func 0.6754    prepare 0.0518    bound 0.6048    transfer 0.0040    finalize 0.0125    
After pruning, left:  0

Back to Regular BaB

Result: safe in 3.7291 seconds
############# Summary #############
Final verified acc: 54.0% (total 200 examples)
Problem instances count: 200 , total verified (safe/unsat): 108 , total falsified (unsafe/sat): 85 , timeout: 7
mean time for ALL instances (total 200):9.216200138860403, max time: 230.3641402721405
mean time for verified SAFE instances(total 108): 2.8750045873500683, max time: 64.56352734565735
mean time for verified (SAFE + UNSAFE) instances (total 193): 1.6423702153517175, max time: [2.3861093521118164, 10.208367347717285, 0.06797409057617188, 0.06656956672668457, 0.07398390769958496, 0.06844258308410645, 0.04196000099182129, 0.27419161796569824, 2.4445910453796387, 0.06925797462463379, 0.0718691349029541, 0.06625628471374512, 4.21414589881897, 0.042334556579589844, 0.06915473937988281, 0.06744909286499023, 0.07401728630065918, 0.06506490707397461, 0.07075119018554688, 0.04749703407287598, 2.4613540172576904, 0.06662940979003906, 0.06542491912841797, 0.07248759269714355, 0.04513096809387207, 0.06972503662109375, 2.797438144683838, 0.06546902656555176, 0.06684660911560059, 0.0713968276977539, 2.4164276123046875, 0.0634148120880127, 16.74747133255005, 0.06902289390563965, 0.0739145278930664, 2.6762216091156006, 54.48413419723511, 2.8309521675109863, 0.07720804214477539, 0.07035160064697266, 0.06864643096923828, 0.06343555450439453, 0.034580230712890625, 0.06340193748474121, 0.06271886825561523, 0.06612157821655273, 0.06333374977111816, 24.268500804901123, 0.06334805488586426, 0.07314229011535645, 0.06319618225097656, 2.5547595024108887, 2.5903234481811523, 0.2368459701538086, 0.06723690032958984, 2.571023941040039, 0.0604252815246582, 0.07055401802062988, 0.0688014030456543, 2.8894660472869873, 0.06802105903625488, 0.05141949653625488, 0.0700223445892334, 0.06661438941955566, 0.07385635375976562, 2.640726327896118, 0.06319046020507812, 42.88512349128723, 0.02837681770324707, 2.4568376541137695, 0.0654747486114502, 3.154860496520996, 0.0725853443145752, 11.852128028869629, 0.0643618106842041, 0.07073593139648438, 0.07734251022338867, 0.06348490715026855, 0.06874990463256836, 0.07571673393249512, 0.0685274600982666, 0.07219505310058594, 0.06376528739929199, 7.6178765296936035, 0.06849884986877441, 2.58908748626709, 0.06325078010559082, 0.06743431091308594, 0.06424951553344727, 0.04500460624694824, 0.07004356384277344, 0.4882214069366455, 0.06657791137695312, 0.030359745025634766, 0.06404399871826172, 3.330573320388794, 0.07432222366333008, 5.1598827838897705, 0.06743621826171875, 5.958589553833008, 3.5545108318328857, 0.07465195655822754, 6.594409465789795, 0.06676936149597168, 0.07249164581298828, 0.06460118293762207, 64.56352734565735, 3.729093074798584]
mean time for verified SAFE + TIMEOUT instances (total 115): 15.971853598304417, max time: [204.30239701271057, 230.09758257865906, 230.3641402721405, 217.16514229774475, 226.40918254852295, 212.44735550880432, 205.4768681526184] 
mean time for verified UNSAFE instances (total 85): 0.07619948387145996, max time: 0.1826944351196289
safe-incomplete (total 79), index: [0, 7, 8, 11, 14, 17, 18, 20, 22, 23, 26, 27, 28, 30, 31, 33, 37, 39, 40, 41, 42, 47, 49, 51, 52, 55, 60, 62, 68, 69, 70, 71, 73, 74, 75, 79, 81, 85, 86, 89, 98, 103, 107, 109, 110, 114, 115, 116, 117, 118, 121, 131, 133, 136, 139, 140, 142, 144, 146, 147, 148, 153, 157, 159, 161, 164, 166, 168, 171, 175, 177, 179, 180, 182, 186, 190, 192, 193, 197]
unsafe-pgd (total 85), index: [1, 3, 4, 5, 6, 9, 10, 12, 15, 16, 21, 25, 29, 32, 34, 35, 36, 43, 44, 45, 46, 50, 53, 56, 58, 61, 63, 65, 72, 78, 80, 82, 84, 87, 88, 90, 91, 92, 94, 95, 96, 99, 100, 101, 102, 105, 106, 108, 112, 113, 119, 122, 123, 124, 125, 126, 128, 129, 130, 134, 138, 141, 143, 145, 149, 150, 151, 152, 155, 156, 163, 165, 167, 169, 170, 173, 174, 176, 178, 183, 184, 188, 194, 195, 196]
safe (total 29), index: [2, 19, 24, 38, 48, 54, 57, 64, 66, 67, 83, 93, 97, 104, 111, 120, 127, 132, 135, 137, 158, 160, 181, 185, 187, 189, 191, 198, 199]
unknown (total 7), index: [13, 59, 76, 77, 154, 162, 172]
