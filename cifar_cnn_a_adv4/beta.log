Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  verify_onnxruntime_output: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  prepare_only: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: ablation_results/cifar_cnn_a_adv4/beta.out
  root_path: ''
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: false
  output_file: out.pkl
  return_optimized_model: false
model:
  name: cnn_4layer_adv4
  path: models/sdp/cifar_cnn_a_adv4.model
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: []
  onnx_vnnlib_joint_optimization_flags: none
  check_optimized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.00784313725
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 4096
  auto_enlarge_batch_size: true
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    relu_option: adaptive
    compare_crown_with_ibp: false
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: []
    max_time: 1.0
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    max_dim: 10000
    reset_threshold: 1.0
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    unstable_neuron_threshold: 0
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
    topk_filter: 1.0
    sliding_window: -1
    extra_constraint: false
    refine_neuron_timeout_increasement: 0
    timeout_neuron_percentage: 0.3
    remaining_timeout_threshold: 1
    remove_unstable_neurons: false
    lp_solver: mip
    output_cut: false
bab:
  initial_max_domains: 1
  backing_up_max_domain: null
  max_domains: .inf
  decision_thresh: 0
  timeout: 200
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: false
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  tree_traversal: depth_first
  cut:
    enabled: false
    cuts_path: /tmp/abcrown_cuts_17305
    implication: false
    bab_cut: true
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 0.99
    iteration: 200
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.05
    number_cuts: 500
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
    biccos:
      enabled: false
      auto_param: true
      constraint_strengthening: true
      recursively_strengthening: false
      merge_cut_enabled: false
      fast_inference_enabled: false
      drop_ratio: 0.5
      max_infer_iter: 40
      heuristic: neuron_influence_score
      save_cuts: false
      multi_tree_branching:
        enabled: false
        restore_best_tree: false
        keep_n_best_domains: 50
        target_batch_size: 200
        iterations: 5
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      filter: false
      filter_beta: false
      filter_clamp: false
      filter_batch_size: 10000
      filter_iterations: 25
      relu_only: false
      loose_tanh_threshold: null
      dynamic_bbps: false
      dynamic_options: [uniform, three_left, three_right]
      branching_point_node: ''
      branching_point_db: []
    input_split:
      enable_clip_domains: false
      split_hint: null
      reorder_bab: false
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_sum: false
      sb_primary_spec: null
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_iters: 1000000000.0
      bf_batch_size: 100000
      bf_zero_crossing_score: false
      touch_zero_score: 0
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 0.001
      sort_index: null
      sort_descending: true
      show_progress: false
      presplit_domains: null
      skip_getting_worst_domain: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: middle
  pgd_steps: 100
  pgd_restarts: 50
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_alpha_scale: false
  pgd_loss_mode: null
  pgd_restart_when_stuck: false
  enable_mip_attack: false
  adv_saver: default_adv_saver
  adv_verifier: default_adv_verifier
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    enabled: auto
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false
  biccos_mip_sanity_check: false
  sanity_check: 0
  z_split_enabled: false

Experiments at Wed Oct 30 16:32:38 2024 on r23g0004.hpc.itc.rwth-aachen.de
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten(start_dim=1, end_dim=-1)
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
Parameters:
  0.weight: shape torch.Size([16, 3, 4, 4])
  0.bias: shape torch.Size([16])
  2.weight: shape torch.Size([32, 16, 4, 4])
  2.bias: shape torch.Size([32])
  5.weight: shape torch.Size([100, 2048])
  5.bias: shape torch.Size([100])
  7.weight: shape torch.Size([10, 100])
  7.bias: shape torch.Size([10])
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308715)
############################
Internal results will be saved to ablation_results/cifar_cnn_a_adv4/beta.out.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.39694118, -4.29481602, -2.76418877, -2.27564764, -2.33342099,
         -2.30766487, -2.16014171, -2.94787169, -5.16796875, -4.44396448]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [149]; unstable size 149; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 96, 1, 149] with unstable size 95 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 149] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [95]; unstable size 95; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 95] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 95] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.88380706,  1.74300122,  0.37986487, -0.05004537,  0.02511473,
         -0.22278094,  0.53882384,  2.69820642,  1.93023586]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.39694118, -4.29481602, -2.76418877, -2.27564764, -2.33342099,
         -2.30766487, -2.16014171, -2.94787169, -5.16796875, -4.44396448]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.39694166, -4.29481649, -2.76418877, -2.27564788, -2.33342123,
          -2.30766511, -2.16014194, -2.94787169, -5.16796970, -4.44396496],
         [-4.39694166, -4.29481649, -2.76418877, -2.27564788, -2.33342123,
          -2.30766511, -2.16014194, -2.94787169, -5.16796970, -4.44396496]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.05777335, -0.11550593]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.97301579, -1.96507931, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.96507931],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.94126987,
            -1.96507931, -1.97301579],
           ...,
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.93236721,
            -1.93236721, -1.96457338],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.95652175,
            -1.95652175, -1.96457338],
           [-1.96457338, -1.95652175, -1.94847023,  ..., -1.96457338,
            -1.96457338, -1.95652175],
           ...,
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.66266882, -1.64767623],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.68515754,
            -1.68515754, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           ...,
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.96507931, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.96507931],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.94126987,
            -1.96507931, -1.97301579],
           ...,
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.93236721,
            -1.93236721, -1.96457338],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.95652175,
            -1.95652175, -1.96457338],
           [-1.96457338, -1.95652175, -1.94847023,  ..., -1.96457338,
            -1.96457338, -1.95652175],
           ...,
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.66266882, -1.64767623],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.68515754,
            -1.68515754, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           ...,
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 2.5343 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.95612621, -10.30323696, -19.92111397, -18.71479988, -19.25238991,
         -18.84130478, -18.81987762, -19.40709114, -16.19555664, -10.55979347]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [560]; unstable size 560; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 560] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 560] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 560] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 164] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.78500080, -0.48810357,  8.46035194,  7.31322861,  7.79788876,
          7.43279171,  7.35444212,  7.89911556,  5.04577732]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.95612621, -10.30323696, -19.92111397, -18.71479988, -19.25238991,
         -18.84130478, -18.81987762, -19.40709114, -16.19555664, -10.55979347]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.95612621, -10.30323696, -19.92111397, -18.71479988, -19.25238991,
          -18.84130478, -18.81987762, -19.40709114, -16.19555664, -10.55979347]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.25655651]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.46507931, -1.30634916, -1.32222211,  ...,  0.10634929,
             0.02698422,  0.04285724],
           [-1.25873005, -1.35396814, -1.40158725,  ...,  0.31269848,
             0.28095245,  0.28095245],
           [ 0.15396833,  0.42380959,  0.29682547,  ..., -0.00476181,
            -0.17936498, -0.24285704],
           ...,
           [-0.86190474, -0.60793650, -0.38571417,  ...,  0.91587305,
             0.82063496,  0.83650798],
           [-0.43333322, -0.30634910, -0.22698402,  ...,  0.90000004,
             0.77301592,  0.75714290],
           [-0.33809513, -0.30634910, -0.27460307,  ...,  0.88412702,
             0.78888893,  0.67777783]],

          [[-1.44927526, -1.28824472, -1.30434775,  ...,  0.20933989,
             0.14492765,  0.20933989],
           [-1.35265696, -1.36875999, -1.33655393,  ...,  0.37037048,
             0.35426742,  0.40257660],
           [-1.32045078, -1.35265696, -1.41706920,  ...,  0.04830930,
            -0.14492741, -0.24154577],
           ...,
           [-0.75684375, -0.51529789, -0.30595800,  ...,  0.91787446,
             0.83735919,  0.90177143],
           [-0.32206106, -0.19323659, -0.14492741,  ...,  0.90177143,
             0.78904998,  0.82125610],
           [-0.17713353, -0.17713353, -0.16103047,  ...,  0.90177143,
             0.78904998,  0.74074084]],

          [[-1.54272878, -1.49775124, -1.49775124,  ...,  0.42128953,
             0.34632701,  0.37631202],
           [-1.51274371, -1.55772126, -1.52773619,  ...,  0.52623707,
             0.49625200,  0.49625200],
           [-1.13793111, -1.09295356, -1.12293863,  ...,  0.09145443,
            -0.08845562, -0.19340314],
           ...,
           [-0.59820086, -0.43328333, -0.28335828,  ...,  0.88605714,
             0.81109464,  0.88605714],
           [-0.23838064, -0.14842562, -0.11844061,  ...,  0.85607213,
             0.76611710,  0.81109464],
           [-0.07346311, -0.10344811, -0.08845562,  ...,  0.75112462,
             0.79610211,  0.73613209]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0681 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.22966528, -2.93601108, -5.89175558, -5.29639721, -5.30219364,
         -5.44004345, -5.44263363, -6.58539677, -3.89646339, -3.77071643]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [779]; unstable size 779; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 779] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 779] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 779] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 180] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.59069538, 1.86671638, 1.25944376, 1.32242680, 1.39030695, 1.32808542,
         2.61486292, 0.20729733, 0.53434551]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0469 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.81480026, -13.08546257,  -5.93704462,  -6.55520630,  -5.17417622,
          -6.50369120,  -7.90147018,  -4.16475153, -13.59602165, -12.16934872]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [408]; unstable size 408; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 408] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 408] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 408] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 166] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.20016575,  7.28631210,  0.47117403,  0.94903362,  0.90004659,
          2.26531672, -1.32159257,  7.77309513,  6.37577629]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.81480026, -13.08546257,  -5.93704462,  -6.55520630,  -5.17417622,
          -6.50369120,  -7.90147018,  -4.16475153, -13.59602165, -12.16934872]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.81480026, -13.08546257,  -5.93704462,  -6.55520630,  -5.17417622,
           -6.50369120,  -7.90147018,  -4.16475153, -13.59602165, -12.16934872]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.00942469]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0497 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 4, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.62150002, -7.81213474, -2.44004679, -4.24660492, -2.49402499,
         -4.36055088, -3.27121401, -4.32307100, -6.43716717, -7.05409288]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [478]; unstable size 478; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 168, 1, 478] with unstable size 167 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 478] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 478] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [167]; unstable size 167; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 167] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 167] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.56216955,  4.48248863, -0.30218950,  1.40200794,  1.50853717,
          0.35172987,  1.49864471,  3.28840876,  3.77214050]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.62150002, -7.81213474, -2.44004679, -4.24660492, -2.49402499,
         -4.36055088, -3.27121401, -4.32307100, -6.43716717, -7.05409288]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.62150002, -7.81213474, -2.44004679, -4.24660492, -2.49402499,
          -4.36055088, -3.27121401, -4.32307100, -6.43716717, -7.05409288]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05397820]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.45555562,  0.47142863,  0.50317466,  ...,  0.23333341,
             0.16984135, -0.06825387],
           [ 0.37619054,  0.55079371,  0.91587305,  ...,  0.39206356,
             0.59841275,  0.21746039],
           [ 0.47142863,  0.64603180,  0.70952386,  ...,  0.58253974,
             0.85238099,  0.82063496],
           ...,
           [ 0.32857150,  0.55079371,  0.18571436,  ..., -0.67142856,
            -1.22698402, -1.06825387],
           [ 0.47142863,  0.47142863,  0.21746039,  ..., -0.00476181,
            -1.14761901, -1.44920623],
           [ 0.45555562,  0.15396833, -0.11587292,  ...,  1.04285717,
             0.34444451, -0.54444444]],

          [[ 1.03059590,  1.09500813,  1.19162667,  ...,  1.12721443,
             0.96618366,  0.70853472],
           [ 1.03059590,  1.14331758,  1.28824508,  ...,  1.27214205,
             1.36876035,  0.98228669],
           [ 1.15942061,  1.22383285,  1.23993587,  ...,  1.38486338,
             1.54589403,  1.44927561],
           ...,
           [ 1.07890511,  1.28824508,  0.86956531,  ..., -0.70853460,
            -1.20772946, -0.96618354],
           [ 1.15942061,  1.22383285,  1.03059590,  ..., -0.19323659,
            -1.12721407, -1.33655393],
           [ 1.07890511,  0.93397754,  0.85346222,  ...,  0.99838978,
             0.28985518, -0.43478248]],

          [[ 0.10644694,  0.19640197,  0.42128953,  ..., -0.01349309,
             0.09145443, -0.31334329],
           [ 0.16641696,  0.45127454,  0.94602716,  ...,  0.19640197,
             0.75112462,  0.28635699],
           [ 0.16641696,  0.39130452,  0.48125952,  ...,  0.36131951,
             0.91604215,  1.03598225],
           ...,
           [ 0.06146942,  0.37631202,  0.07646193,  ..., -0.83808094,
            -1.27286363, -1.09295356],
           [ 0.19640197,  0.37631202, -0.11844061,  ..., -0.43328333,
            -1.27286363, -1.42278874],
           [ 0.25637197, -0.14842562, -0.73313338,  ...,  0.82608712,
            -0.02848560, -0.82308841]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0509 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 5, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.27786207, -6.88116646, -0.89845192, -1.13938844, -1.43722224,
         -1.21051192, -1.90963769, -2.81326365, -5.21822262, -6.45287228]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [544]; unstable size 544; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 158, 1, 544] with unstable size 157 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 544] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 544] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [157]; unstable size 157; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 157] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 157] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.32219422,  4.72163105, -0.79683375, -0.61578476, -0.54585779,
          0.10253280,  1.03042436,  3.03628159,  4.49144125]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.27786207, -6.88116646, -0.89845192, -1.13938844, -1.43722224,
         -1.21051192, -1.90963769, -2.81326365, -5.21822262, -6.45287228]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.27786303, -6.88116646, -0.89845204, -1.13938868, -1.43722200,
          -1.21051180, -1.90963745, -2.81326342, -5.21822357, -6.45287180],
         [-2.27786303, -6.88116646, -0.89845204, -1.13938868, -1.43722200,
          -1.21051180, -1.90963745, -2.81326342, -5.21822357, -6.45287180]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.53876996, -0.29783332, -0.22671020]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]],


         [[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]],


         [[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0483 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 6, vnnlib ID: 6 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.87105656,  -9.24069786, -12.81012917, -14.19307423, -13.00804424,
         -14.29401398, -13.74548244, -12.64065266, -10.14831066, -10.41334629]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [461]; unstable size 461; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 461] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 461] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 461] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 180] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.16120422,  2.30639219,  3.48796988,  2.47389174,  3.57205153,
          3.02852058,  1.96217525, -0.08661658, -0.06133318]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.87105656,  -9.24069786, -12.81012917, -14.19307423, -13.00804424,
         -14.29401398, -13.74548244, -12.64065266, -10.14831066, -10.41334629]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.87105656,  -9.24069881, -12.81012917, -14.19307613, -13.00804520,
          -14.29401493, -13.74548244, -12.64065266, -10.14831066, -10.41334724],
         [ -9.87105656,  -9.24069881, -12.81012917, -14.19307613, -13.00804520,
          -14.29401493, -13.74548244, -12.64065266, -10.14831066, -10.41334724]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.63035774,  0.27725410,  0.54229069]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]],


         [[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]],


         [[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0575 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 7, vnnlib ID: 7 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.80696106, -12.16898727,  -8.71912003,  -9.57566929,  -8.25873089,
          -9.65113735,  -7.55729103,  -9.84239197, -12.61449814, -12.48052692]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 445] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 445] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 445] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 185] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.65562153, 3.64904356, 0.87793177, 1.69124293, 0.44899166, 1.76054668,
         1.83400536, 4.22224331, 4.04899597]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0488 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 8, vnnlib ID: 8 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.20309448, -16.77884865, -16.19422150, -18.35743332, -17.19257736,
         -18.67626762, -18.95268631, -19.17121124, -14.57676315, -17.35821724]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [435]; unstable size 435; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 109, 1, 435] with unstable size 108 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 435] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 435] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [108]; unstable size 108; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 108] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 108] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.19290352, 3.64490747, 5.67161989, 4.61943054, 5.98125458, 6.26108837,
         6.53781796, 2.12617946, 4.84152555]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0619 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 9, vnnlib ID: 9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.81122494, -13.31232357,  -9.44408321,  -9.38682652,  -9.45646095,
          -9.43222713,  -9.70102882, -10.80779362, -10.39734077, -12.81629562]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [536]; unstable size 536; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 536] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 536] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 536] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 186] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.80840868,  3.05787325, -0.29071200, -0.06402752, -0.28085589,
         -0.10329640,  1.11252022,  0.34938395,  2.63984060]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.81122494, -13.31232357,  -9.44408321,  -9.38682652,  -9.45646095,
          -9.43222713,  -9.70102882, -10.80779362, -10.39734077, -12.81629562]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.81122589, -13.31232452,  -9.44408417,  -9.38682556,  -9.45646000,
           -9.43222809,  -9.70102978, -10.80779362, -10.39734077, -12.81629467],
         [-10.81122589, -13.31232452,  -9.44408417,  -9.38682556,  -9.45646000,
           -9.43222809,  -9.70102978, -10.80779362, -10.39734077, -12.81629467]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.01185608, -0.04540253,  0.02423191,  0.26880169]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0683 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 10, vnnlib ID: 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.81260872, -21.71220779, -15.47353172, -14.34746075, -17.37693214,
         -14.11986828, -17.64429283, -15.59352016, -20.41330528, -19.86410522]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [213]; unstable size 213; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 90, 1, 213] with unstable size 89 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 213] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 213] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [89]; unstable size 89; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 89] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 89] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.94948339,  5.68683910, -0.28762674, -1.39250016,  1.63050747,
         -1.61977458,  1.77867985,  4.45255136,  3.87534189]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.81260872, -21.71220779, -15.47353172, -14.34746075, -17.37693214,
         -14.11986828, -17.64429283, -15.59352016, -20.41330528, -19.86410522]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.81260681, -21.71220398, -15.47353172, -14.34746075, -17.37693214,
          -14.11986828, -17.64429092, -15.59352112, -20.41330528, -19.86410332],
         [-17.81260681, -21.71220398, -15.47353172, -14.34746075, -17.37693214,
          -14.11986828, -17.64429092, -15.59352112, -20.41330528, -19.86410332]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11998940, -1.24606037, -1.47365284]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0568 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 11, vnnlib ID: 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.67578030, -10.93076611,  -6.99289465,  -8.49931908,  -6.64460850,
          -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557758]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 527] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 527] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 191] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.17059851,  3.08206749,  1.16293228, -0.63490015,  1.28766203,
         -0.08916250,  1.48330283,  3.14107704,  2.88401651]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.67578030, -10.93076611,  -6.99289465,  -8.49931908,  -6.64460850,
          -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557758]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.67578030, -10.93076611,  -6.99289465,  -8.49932003,  -6.64460754,
           -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557854],
         [ -8.67578030, -10.93076611,  -6.99289465,  -8.49932003,  -6.64460754,
           -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557854]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.34828711,  0.25328970]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.79841268, -0.83015871, -0.84603173,  ..., -0.70317459,
            -0.76666665, -0.73492062],
           [-0.79841268, -0.83015871, -0.87777776,  ..., -0.84603173,
            -0.78253967, -0.75079364],
           [-0.81428570, -0.83015871, -0.89365077,  ..., -0.81428570,
            -0.75079364, -0.75079364],
           ...,
           [ 1.39206374,  1.23333359,  0.50317466,  ...,  0.21746039,
            -0.27460307, -0.63968253],
           [ 0.88412702,  0.43968260, -0.21111101,  ...,  1.45555580,
             1.26507962,  0.70952386],
           [ 0.36031753, -0.24285704, -0.68730158,  ...,  1.45555580,
             1.36031771,  1.67777801]],

          [[-0.16103047, -0.20933965, -0.22544271,  ..., -0.03220600,
            -0.09661824, -0.06441211],
           [-0.17713353, -0.20933965, -0.25764883,  ..., -0.17713353,
            -0.11272129, -0.09661824],
           [-0.19323659, -0.20933965, -0.27375188,  ..., -0.12882435,
            -0.08051517, -0.08051517],
           ...,
           [ 1.41706955,  1.28824508,  0.61191636,  ...,  0.51529801,
             0.14492765, -0.12882435],
           [ 0.99838978,  0.61191636,  0.03220624,  ...,  1.59420323,
             1.48148179,  1.03059590],
           [ 0.59581327,  0.08051541, -0.28985494,  ...,  1.49758482,
             1.40096653,  1.75523376]],

          [[-0.50824583, -0.55322337, -0.56821585,  ..., -0.43328333,
            -0.47826082, -0.40329832],
           [-0.52323836, -0.55322337, -0.59820086,  ..., -0.56821585,
            -0.49325335, -0.43328333],
           [-0.53823084, -0.55322337, -0.61319339,  ..., -0.53823084,
            -0.46326834, -0.41829082],
           ...,
           [ 0.99100471,  0.84107965,  0.21139447,  ...,  0.06146942,
            -0.28335828, -0.43328333],
           [ 0.61619210,  0.27136448, -0.25337315,  ...,  1.06596720,
             0.99100471,  0.63118458],
           [ 0.30134949, -0.14842562, -0.46326834,  ...,  1.03598225,
             0.97601217,  1.32084000]]],


         [[[-0.79841268, -0.83015871, -0.84603173,  ..., -0.70317459,
            -0.76666665, -0.73492062],
           [-0.79841268, -0.83015871, -0.87777776,  ..., -0.84603173,
            -0.78253967, -0.75079364],
           [-0.81428570, -0.83015871, -0.89365077,  ..., -0.81428570,
            -0.75079364, -0.75079364],
           ...,
           [ 1.39206374,  1.23333359,  0.50317466,  ...,  0.21746039,
            -0.27460307, -0.63968253],
           [ 0.88412702,  0.43968260, -0.21111101,  ...,  1.45555580,
             1.26507962,  0.70952386],
           [ 0.36031753, -0.24285704, -0.68730158,  ...,  1.45555580,
             1.36031771,  1.67777801]],

          [[-0.16103047, -0.20933965, -0.22544271,  ..., -0.03220600,
            -0.09661824, -0.06441211],
           [-0.17713353, -0.20933965, -0.25764883,  ..., -0.17713353,
            -0.11272129, -0.09661824],
           [-0.19323659, -0.20933965, -0.27375188,  ..., -0.12882435,
            -0.08051517, -0.08051517],
           ...,
           [ 1.41706955,  1.28824508,  0.61191636,  ...,  0.51529801,
             0.14492765, -0.12882435],
           [ 0.99838978,  0.61191636,  0.03220624,  ...,  1.59420323,
             1.48148179,  1.03059590],
           [ 0.59581327,  0.08051541, -0.28985494,  ...,  1.49758482,
             1.40096653,  1.75523376]],

          [[-0.50824583, -0.55322337, -0.56821585,  ..., -0.43328333,
            -0.47826082, -0.40329832],
           [-0.52323836, -0.55322337, -0.59820086,  ..., -0.56821585,
            -0.49325335, -0.43328333],
           [-0.53823084, -0.55322337, -0.61319339,  ..., -0.53823084,
            -0.46326834, -0.41829082],
           ...,
           [ 0.99100471,  0.84107965,  0.21139447,  ...,  0.06146942,
            -0.28335828, -0.43328333],
           [ 0.61619210,  0.27136448, -0.25337315,  ...,  1.06596720,
             0.99100471,  0.63118458],
           [ 0.30134949, -0.14842562, -0.46326834,  ...,  1.03598225,
             0.97601217,  1.32084000]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0601 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 12, vnnlib ID: 12 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.44387496, -2.72885609, -0.99721217, -1.58509552, -2.43515849,
         -1.54629862, -4.83794689, -0.93704540, -3.84024239, -1.71335077]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [377]; unstable size 377; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 108, 1, 377] with unstable size 107 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 377] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 377] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [107]; unstable size 107; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 107] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 107] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.08005628,  1.21544480, -0.21125829,  0.39911640,  1.30089641,
          0.36341107,  3.49761176,  2.30609941,  0.25215483]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.44387496, -2.72885609, -0.99721217, -1.58509552, -2.43515849,
         -1.54629862, -4.83794689, -0.93704540, -3.84024239, -1.71335077]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.34201694, -2.72922182, -0.92797631, -1.60974824, -2.46359158,
          -1.57565308, -4.80144787, -1.07656217, -3.71189547, -1.76798725]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.14858586]]], device='cuda:0')
number of violation:  1
Attack finished in 0.5361 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.5981 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 13, vnnlib ID: 13 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.19204140, -13.62735748, -16.19686890, -18.63919830, -17.46629143,
         -18.98551178, -17.92122269, -19.29259300, -14.41958141, -14.50180340]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [505]; unstable size 505; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 157, 1, 505] with unstable size 156 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 505] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 505] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [156]; unstable size 156; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 156] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 156] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.97732306,  1.82492733,  4.21384001,  3.08415413,  4.54206800,
          3.54140091,  4.89616060,  0.14590693,  0.62829101]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.19204140, -13.62735748, -16.19686890, -18.63919830, -17.46629143,
         -18.98551178, -17.92122269, -19.29259300, -14.41958141, -14.50180340]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.19204140, -13.62735748, -16.19686890, -18.63919830, -17.46629143,
          -18.98551178, -17.92122269, -19.29259300, -14.41958141, -14.50180340]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.43531609]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[0.45555562, 0.40793657, 0.42380959,  ..., 0.75714290,
            0.74126989, 0.70952386],
           [0.47142863, 0.42380959, 0.43968260,  ..., 0.72539687,
            0.69365084, 0.66190481],
           [0.53492069, 0.50317466, 0.55079371,  ..., 0.70952386,
            0.69365084, 0.66190481],
           ...,
           [0.63015878, 0.64603180, 0.66190481,  ..., 0.64603180,
            0.67777783, 0.66190481],
           [0.64603180, 0.61428577, 0.59841275,  ..., 0.63015878,
            0.64603180, 0.66190481],
           [0.72539687, 0.66190481, 0.63015878,  ..., 0.63015878,
            0.59841275, 0.64603180]],

          [[0.48309189, 0.43478271, 0.45088577,  ..., 0.75684386,
            0.72463775, 0.69243163],
           [0.49919492, 0.45088577, 0.46698883,  ..., 0.70853472,
            0.67632860, 0.64412248],
           [0.56360716, 0.53140104, 0.57971025,  ..., 0.69243163,
            0.67632860, 0.64412248],
           ...,
           [0.61191636, 0.62801939, 0.64412248,  ..., 0.62801939,
            0.66022551, 0.64412248],
           [0.62801939, 0.59581327, 0.57971025,  ..., 0.61191636,
            0.62801939, 0.64412248],
           [0.70853472, 0.64412248, 0.61191636,  ..., 0.61191636,
            0.57971025, 0.62801939]],

          [[0.66116959, 0.61619210, 0.63118458,  ..., 0.76611710,
            0.81109464, 0.79610211],
           [0.67616212, 0.63118458, 0.64617711,  ..., 0.76611710,
            0.78110963, 0.75112462],
           [0.73613209, 0.70614707, 0.75112462,  ..., 0.79610211,
            0.78110963, 0.75112462],
           ...,
           [0.66116959, 0.67616212, 0.72113961,  ..., 0.73613209,
            0.76611710, 0.75112462],
           [0.67616212, 0.64617711, 0.66116959,  ..., 0.72113961,
            0.73613209, 0.75112462],
           [0.75112462, 0.69115460, 0.69115460,  ..., 0.72113961,
            0.69115460, 0.73613209]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0600 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 14, vnnlib ID: 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.37443638, -4.00673676, -7.36628103, -7.49868298, -7.54243469,
         -7.68763971, -6.80421257, -6.88844681, -6.20179558, -2.71405101]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [421]; unstable size 421; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 163, 1, 421] with unstable size 162 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 421] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 421] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [162]; unstable size 162; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 162] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 162] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.00862336, 0.99976742, 3.98278904, 4.17501926, 4.15570545, 4.36021280,
         3.39363956, 3.39964437, 2.97036386]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0378 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 15, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.54657602, -8.36112595, -3.46242666, -2.87187982, -3.89005208,
         -2.88797569, -4.48041725, -3.49748850, -7.86016560, -7.33907175]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 138, 1, 403] with unstable size 137 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 403] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [137]; unstable size 137; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 137] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 137] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.24231577e+00, 4.76083994e+00, 2.99191654e-01, 6.74156666e-01,
         1.52279437e-03, 1.30786681e+00, 2.09971309e-01, 4.47964859e+00,
         3.82559681e+00]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0335 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 16, vnnlib ID: 16 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.45027256, -14.85908413,  -9.90371609, -10.28254223,  -9.57412910,
         -10.25789833,  -9.99507999, -11.03962898, -13.74928951, -14.72655964]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [731]; unstable size 731; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 228, 1, 731] with unstable size 227 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 731] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 731] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [227]; unstable size 227; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 227] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 227] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.43560493,  3.57842565, -0.70241714, -1.03279150, -0.04905008,
         -0.72894013,  0.25918627,  2.60397291,  3.52938461]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.45027256, -14.85908413,  -9.90371609, -10.28254223,  -9.57412910,
         -10.25789833,  -9.99507999, -11.03962898, -13.74928951, -14.72655964]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.45027161, -14.85908413,  -9.90371609, -10.28254223,  -9.57412815,
          -10.25789928,  -9.99507904, -11.03962803, -13.74928951, -14.72655869],
         [-12.45027161, -14.85908413,  -9.90371609, -10.28254223,  -9.57412815,
          -10.25789928,  -9.99507904, -11.03962803, -13.74928951, -14.72655869]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.37882614, -0.70841408, -0.02464294, -0.28746319]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0439 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 17, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.49743176,  -9.17833710, -13.67570496, -15.20650959, -13.95639992,
         -15.42528915, -14.06286907, -16.15926170, -11.69949532, -11.19551754]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [373]; unstable size 373; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 176, 1, 373] with unstable size 175 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 373] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 373] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [175]; unstable size 175; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 175] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 175] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.61845303, 3.61285639, 5.11308956, 3.87147617, 5.31955862, 4.01641226,
         5.91223717, 1.82210541, 1.76377130]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0375 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 18, vnnlib ID: 18 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.34389973,  -9.96172714,  -4.05279398,  -5.78736115,  -3.97068667,
          -5.86786509,  -3.54266286,  -5.87278652, -10.21232128,  -9.72180271]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [483]; unstable size 483; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 483] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 483] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 483] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 208] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.06753778, 5.54263163, 0.10674798, 1.85941625, 0.03022206, 1.92791641,
         1.74811399, 5.96987057, 5.31630135]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0376 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 19, vnnlib ID: 19 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.71088123, -13.29491711,  -7.63611126,  -7.11927986,  -7.38616085,
          -7.11191607,  -7.48660755,  -8.97584915, -11.56023979, -13.25586891]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [539]; unstable size 539; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 221, 1, 539] with unstable size 220 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 539] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 539] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [220]; unstable size 220; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 220] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 220] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.10444069e+00,  5.31401634e+00,  2.42111683e-01, -5.13114929e-02,
         -2.78017223e-02, -2.51579285e-03,  1.45366096e+00,  3.80054927e+00,
          5.33967876e+00]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.71088123, -13.29491711,  -7.63611126,  -7.11927986,  -7.38616085,
          -7.11191607,  -7.48660755,  -8.97584915, -11.56023979, -13.25586891]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.71088123, -13.29491806,  -7.63611174,  -7.11928177,  -7.38616180,
           -7.11191511,  -7.48660755,  -8.97585011, -11.56023979, -13.25586891],
         [-10.71088123, -13.29491806,  -7.63611174,  -7.11928177,  -7.38616180,
           -7.11191511,  -7.48660755,  -8.97585011, -11.56023979, -13.25586891]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.26688004, -0.00736666,  0.36732578]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.79364979e-01, -2.42857039e-01, -2.58730054e-01,  ...,
            -4.96825397e-01, -6.23809516e-01, -8.46031725e-01],
           [-8.77777755e-01, -1.02063489e+00, -1.02063489e+00,  ...,
            -3.38095129e-01, -3.69841158e-01, -5.92063487e-01],
           [-1.02063489e+00, -9.88888860e-01, -9.88888860e-01,  ...,
            -1.79364979e-01, -1.63491964e-01, -4.33333218e-01],
           ...,
           [ 2.49206424e-01,  2.65079439e-01,  3.12698483e-01,  ...,
             2.17460394e-01,  2.33333409e-01,  2.80952454e-01],
           [ 1.38095319e-01,  3.28571498e-01,  3.60317528e-01,  ...,
             3.12698483e-01,  3.28571498e-01,  3.12698483e-01],
           [ 4.55555618e-01,  5.50793707e-01,  6.77777827e-01,  ...,
             5.03174663e-01,  5.03174663e-01,  4.71428633e-01]],

          [[-2.73751885e-01, -3.22061062e-01, -3.54267180e-01,  ...,
            -6.60225391e-01, -7.56843746e-01, -9.66183543e-01],
           [-1.30434775e+00, -1.41706920e+00, -1.41706920e+00,  ...,
            -5.47504008e-01, -5.47504008e-01, -7.24637628e-01],
           [-1.44927526e+00, -1.40096617e+00, -1.40096617e+00,  ...,
            -4.34782475e-01, -4.02576357e-01, -6.28019273e-01],
           ...,
           [-3.22059989e-02, -3.22059989e-02, -1.61029361e-02,  ...,
            -1.61030471e-01, -1.12721294e-01,  1.61031820e-02],
           [-1.93236589e-01, -1.61029361e-02, -3.22059989e-02,  ...,
             1.22934580e-07,  4.83092964e-02,  6.44123554e-02],
           [ 2.25442946e-01,  2.89855182e-01,  3.86473536e-01,  ...,
             3.38164359e-01,  3.38164359e-01,  3.05958241e-01]],

          [[ 4.64769229e-02,  1.49940979e-03, -1.34930937e-02,  ...,
            -8.08095932e-01, -8.38080943e-01, -9.58020985e-01],
           [-8.68065953e-01, -1.04797614e+00, -1.10794616e+00,  ...,
            -8.08095932e-01, -7.48125911e-01, -8.53073418e-01],
           [-1.07796109e+00, -1.09295356e+00, -1.13793111e+00,  ...,
            -7.48125911e-01, -6.43178403e-01, -7.93103397e-01],
           ...,
           [-1.93403140e-01, -2.68365651e-01, -2.98350781e-01,  ...,
            -4.63268340e-01, -4.03298318e-01, -2.68365651e-01],
           [-4.18290824e-01, -3.43328297e-01, -3.28335792e-01,  ...,
            -3.28335792e-01, -2.83358276e-01, -2.23388135e-01],
           [ 3.14844176e-02, -4.34781015e-02,  1.36431947e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.36431947e-01]]],


         [[[-1.79364979e-01, -2.42857039e-01, -2.58730054e-01,  ...,
            -4.96825397e-01, -6.23809516e-01, -8.46031725e-01],
           [-8.77777755e-01, -1.02063489e+00, -1.02063489e+00,  ...,
            -3.38095129e-01, -3.69841158e-01, -5.92063487e-01],
           [-1.02063489e+00, -9.88888860e-01, -9.88888860e-01,  ...,
            -1.79364979e-01, -1.63491964e-01, -4.33333218e-01],
           ...,
           [ 2.49206424e-01,  2.65079439e-01,  3.12698483e-01,  ...,
             2.17460394e-01,  2.33333409e-01,  2.80952454e-01],
           [ 1.38095319e-01,  3.28571498e-01,  3.60317528e-01,  ...,
             3.12698483e-01,  3.28571498e-01,  3.12698483e-01],
           [ 4.55555618e-01,  5.50793707e-01,  6.77777827e-01,  ...,
             5.03174663e-01,  5.03174663e-01,  4.71428633e-01]],

          [[-2.73751885e-01, -3.22061062e-01, -3.54267180e-01,  ...,
            -6.60225391e-01, -7.56843746e-01, -9.66183543e-01],
           [-1.30434775e+00, -1.41706920e+00, -1.41706920e+00,  ...,
            -5.47504008e-01, -5.47504008e-01, -7.24637628e-01],
           [-1.44927526e+00, -1.40096617e+00, -1.40096617e+00,  ...,
            -4.34782475e-01, -4.02576357e-01, -6.28019273e-01],
           ...,
           [-3.22059989e-02, -3.22059989e-02, -1.61029361e-02,  ...,
            -1.61030471e-01, -1.12721294e-01,  1.61031820e-02],
           [-1.93236589e-01, -1.61029361e-02, -3.22059989e-02,  ...,
             1.22934580e-07,  4.83092964e-02,  6.44123554e-02],
           [ 2.25442946e-01,  2.89855182e-01,  3.86473536e-01,  ...,
             3.38164359e-01,  3.38164359e-01,  3.05958241e-01]],

          [[ 4.64769229e-02,  1.49940979e-03, -1.34930937e-02,  ...,
            -8.08095932e-01, -8.38080943e-01, -9.58020985e-01],
           [-8.68065953e-01, -1.04797614e+00, -1.10794616e+00,  ...,
            -8.08095932e-01, -7.48125911e-01, -8.53073418e-01],
           [-1.07796109e+00, -1.09295356e+00, -1.13793111e+00,  ...,
            -7.48125911e-01, -6.43178403e-01, -7.93103397e-01],
           ...,
           [-1.93403140e-01, -2.68365651e-01, -2.98350781e-01,  ...,
            -4.63268340e-01, -4.03298318e-01, -2.68365651e-01],
           [-4.18290824e-01, -3.43328297e-01, -3.28335792e-01,  ...,
            -3.28335792e-01, -2.83358276e-01, -2.23388135e-01],
           [ 3.14844176e-02, -4.34781015e-02,  1.36431947e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.36431947e-01]]],


         [[[-1.79364979e-01, -2.42857039e-01, -2.58730054e-01,  ...,
            -4.96825397e-01, -6.23809516e-01, -8.46031725e-01],
           [-8.77777755e-01, -1.02063489e+00, -1.02063489e+00,  ...,
            -3.38095129e-01, -3.69841158e-01, -5.92063487e-01],
           [-1.02063489e+00, -9.88888860e-01, -9.88888860e-01,  ...,
            -1.79364979e-01, -1.63491964e-01, -4.33333218e-01],
           ...,
           [ 2.49206424e-01,  2.65079439e-01,  3.12698483e-01,  ...,
             2.17460394e-01,  2.33333409e-01,  2.80952454e-01],
           [ 1.38095319e-01,  3.28571498e-01,  3.60317528e-01,  ...,
             3.12698483e-01,  3.28571498e-01,  3.12698483e-01],
           [ 4.55555618e-01,  5.50793707e-01,  6.77777827e-01,  ...,
             5.03174663e-01,  5.03174663e-01,  4.71428633e-01]],

          [[-2.73751885e-01, -3.22061062e-01, -3.54267180e-01,  ...,
            -6.60225391e-01, -7.56843746e-01, -9.66183543e-01],
           [-1.30434775e+00, -1.41706920e+00, -1.41706920e+00,  ...,
            -5.47504008e-01, -5.47504008e-01, -7.24637628e-01],
           [-1.44927526e+00, -1.40096617e+00, -1.40096617e+00,  ...,
            -4.34782475e-01, -4.02576357e-01, -6.28019273e-01],
           ...,
           [-3.22059989e-02, -3.22059989e-02, -1.61029361e-02,  ...,
            -1.61030471e-01, -1.12721294e-01,  1.61031820e-02],
           [-1.93236589e-01, -1.61029361e-02, -3.22059989e-02,  ...,
             1.22934580e-07,  4.83092964e-02,  6.44123554e-02],
           [ 2.25442946e-01,  2.89855182e-01,  3.86473536e-01,  ...,
             3.38164359e-01,  3.38164359e-01,  3.05958241e-01]],

          [[ 4.64769229e-02,  1.49940979e-03, -1.34930937e-02,  ...,
            -8.08095932e-01, -8.38080943e-01, -9.58020985e-01],
           [-8.68065953e-01, -1.04797614e+00, -1.10794616e+00,  ...,
            -8.08095932e-01, -7.48125911e-01, -8.53073418e-01],
           [-1.07796109e+00, -1.09295356e+00, -1.13793111e+00,  ...,
            -7.48125911e-01, -6.43178403e-01, -7.93103397e-01],
           ...,
           [-1.93403140e-01, -2.68365651e-01, -2.98350781e-01,  ...,
            -4.63268340e-01, -4.03298318e-01, -2.68365651e-01],
           [-4.18290824e-01, -3.43328297e-01, -3.28335792e-01,  ...,
            -3.28335792e-01, -2.83358276e-01, -2.23388135e-01],
           [ 3.14844176e-02, -4.34781015e-02,  1.36431947e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.36431947e-01]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0382 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 20, vnnlib ID: 20 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.09629250, -13.56788158,  -9.81583977, -10.23123169,  -9.89592838,
         -10.26214600,  -8.58048058, -11.66953659, -13.15151978, -13.97097874]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [556]; unstable size 556; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 233, 1, 556] with unstable size 232 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 556] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 556] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [232]; unstable size 232; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 232] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.87823057, 4.08753538, 0.91786969, 1.31721747, 0.97389340, 1.33815885,
         2.53606915, 3.77071428, 4.53204918]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0581 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 21, vnnlib ID: 21 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.60548306, -4.32711458, -0.42147765, -0.48017693, -0.49338007,
         -0.45899674, -1.75417352, -0.30924958, -4.08429527, -3.55203962]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [430]; unstable size 430; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 430] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 430] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 430] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 166] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.60546803,  3.26384211, -0.35429406,  0.00655459, -0.27650321,
          0.93680203, -0.40704596,  3.07671976,  2.56389141]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.60548306, -4.32711458, -0.42147765, -0.48017693, -0.49338007,
         -0.45899674, -1.75417352, -0.30924958, -4.08429527, -3.55203962]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.60548258, -4.32711411, -0.42147765, -0.48017645, -0.49337971,
          -0.45899615, -1.75417328, -0.30924922, -4.08429432, -3.55203867],
         [-3.60548258, -4.32711411, -0.42147765, -0.48017645, -0.49337971,
          -0.45899615, -1.75417328, -0.30924922, -4.08429432, -3.55203867]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.03751850,  0.03438357, -0.14974692]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.83015871, -1.79841268, -1.75079370,  ..., -1.79841268,
            -1.76666665, -1.75079370],
           [-1.79841268, -1.78253973, -1.78253973,  ..., -1.78253973,
            -1.73492062, -1.71904767],
           [-1.78253973, -1.73492062, -1.71904767,  ..., -1.81428576,
            -1.81428576, -1.83015871],
           ...,
           [-1.03650784, -1.17936504, -1.29047608,  ..., -1.08412695,
            -1.24285710, -1.08412695],
           [-0.95714283, -1.03650784, -1.09999990,  ..., -0.87777776,
            -0.94126981, -0.86190474],
           [-0.71904761, -0.73492062, -0.63968253,  ..., -0.60793650,
            -0.68730158, -0.67142856]],

          [[-1.78743970, -1.81964576, -1.80354273,  ..., -1.77133656,
            -1.78743970, -1.78743970],
           [-1.78743970, -1.78743970, -1.78743970,  ..., -1.70692432,
            -1.77133656, -1.78743970],
           [-1.80354273, -1.73913050, -1.72302747,  ..., -1.78743970,
            -1.77133656, -1.78743970],
           ...,
           [-0.93397743, -1.04669881, -1.17552328,  ..., -1.25603855,
            -1.28824472, -1.07890499],
           [-0.91787434, -1.01449275, -1.06280184,  ..., -0.95008045,
            -0.91787434, -0.80515295],
           [-0.75684375, -0.80515295, -0.69243151,  ..., -0.64412236,
            -0.66022539, -0.61191624]],

          [[-1.46776617, -1.45277369, -1.39280367,  ..., -1.34782624,
            -1.36281872, -1.34782624],
           [-1.45277369, -1.39280367, -1.33283365,  ..., -1.33283365,
            -1.31784117, -1.31784117],
           [-1.45277369, -1.33283365, -1.27286363,  ..., -1.46776617,
            -1.39280367, -1.37781119],
           ...,
           [-1.07796109, -1.07796109, -1.13793111,  ..., -1.22788620,
            -1.28785622, -1.12293863],
           [-1.15292358, -1.18290865, -1.18290865,  ..., -1.10794616,
            -1.13793111, -1.06296861],
           [-1.07796109, -1.07796109, -0.94302845,  ..., -0.95802099,
            -1.01799107, -1.00299859]]],


         [[[-1.83015871, -1.79841268, -1.75079370,  ..., -1.79841268,
            -1.76666665, -1.75079370],
           [-1.79841268, -1.78253973, -1.78253973,  ..., -1.78253973,
            -1.73492062, -1.71904767],
           [-1.78253973, -1.73492062, -1.71904767,  ..., -1.81428576,
            -1.81428576, -1.83015871],
           ...,
           [-1.03650784, -1.17936504, -1.29047608,  ..., -1.08412695,
            -1.24285710, -1.08412695],
           [-0.95714283, -1.03650784, -1.09999990,  ..., -0.87777776,
            -0.94126981, -0.86190474],
           [-0.71904761, -0.73492062, -0.63968253,  ..., -0.60793650,
            -0.68730158, -0.67142856]],

          [[-1.78743970, -1.81964576, -1.80354273,  ..., -1.77133656,
            -1.78743970, -1.78743970],
           [-1.78743970, -1.78743970, -1.78743970,  ..., -1.70692432,
            -1.77133656, -1.78743970],
           [-1.80354273, -1.73913050, -1.72302747,  ..., -1.78743970,
            -1.77133656, -1.78743970],
           ...,
           [-0.93397743, -1.04669881, -1.17552328,  ..., -1.25603855,
            -1.28824472, -1.07890499],
           [-0.91787434, -1.01449275, -1.06280184,  ..., -0.95008045,
            -0.91787434, -0.80515295],
           [-0.75684375, -0.80515295, -0.69243151,  ..., -0.64412236,
            -0.66022539, -0.61191624]],

          [[-1.46776617, -1.45277369, -1.39280367,  ..., -1.34782624,
            -1.36281872, -1.34782624],
           [-1.45277369, -1.39280367, -1.33283365,  ..., -1.33283365,
            -1.31784117, -1.31784117],
           [-1.45277369, -1.33283365, -1.27286363,  ..., -1.46776617,
            -1.39280367, -1.37781119],
           ...,
           [-1.07796109, -1.07796109, -1.13793111,  ..., -1.22788620,
            -1.28785622, -1.12293863],
           [-1.15292358, -1.18290865, -1.18290865,  ..., -1.10794616,
            -1.13793111, -1.06296861],
           [-1.07796109, -1.07796109, -0.94302845,  ..., -0.95802099,
            -1.01799107, -1.00299859]]],


         [[[-1.83015871, -1.79841268, -1.75079370,  ..., -1.79841268,
            -1.76666665, -1.75079370],
           [-1.79841268, -1.78253973, -1.78253973,  ..., -1.78253973,
            -1.73492062, -1.71904767],
           [-1.78253973, -1.73492062, -1.71904767,  ..., -1.81428576,
            -1.81428576, -1.83015871],
           ...,
           [-1.03650784, -1.17936504, -1.29047608,  ..., -1.08412695,
            -1.24285710, -1.08412695],
           [-0.95714283, -1.03650784, -1.09999990,  ..., -0.87777776,
            -0.94126981, -0.86190474],
           [-0.71904761, -0.73492062, -0.63968253,  ..., -0.60793650,
            -0.68730158, -0.67142856]],

          [[-1.78743970, -1.81964576, -1.80354273,  ..., -1.77133656,
            -1.78743970, -1.78743970],
           [-1.78743970, -1.78743970, -1.78743970,  ..., -1.70692432,
            -1.77133656, -1.78743970],
           [-1.80354273, -1.73913050, -1.72302747,  ..., -1.78743970,
            -1.77133656, -1.78743970],
           ...,
           [-0.93397743, -1.04669881, -1.17552328,  ..., -1.25603855,
            -1.28824472, -1.07890499],
           [-0.91787434, -1.01449275, -1.06280184,  ..., -0.95008045,
            -0.91787434, -0.80515295],
           [-0.75684375, -0.80515295, -0.69243151,  ..., -0.64412236,
            -0.66022539, -0.61191624]],

          [[-1.46776617, -1.45277369, -1.39280367,  ..., -1.34782624,
            -1.36281872, -1.34782624],
           [-1.45277369, -1.39280367, -1.33283365,  ..., -1.33283365,
            -1.31784117, -1.31784117],
           [-1.45277369, -1.33283365, -1.27286363,  ..., -1.46776617,
            -1.39280367, -1.37781119],
           ...,
           [-1.07796109, -1.07796109, -1.13793111,  ..., -1.22788620,
            -1.28785622, -1.12293863],
           [-1.15292358, -1.18290865, -1.18290865,  ..., -1.10794616,
            -1.13793111, -1.06296861],
           [-1.07796109, -1.07796109, -0.94302845,  ..., -0.95802099,
            -1.01799107, -1.00299859]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0649 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 22, vnnlib ID: 22 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.63814020, -7.09170341, -5.93957424, -7.54413128, -6.39586449,
         -7.70300293, -8.28325272, -8.31898880, -2.61777067, -6.41391087]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [452]; unstable size 452; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 159, 1, 452] with unstable size 158 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 452] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 452] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [158]; unstable size 158; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 158] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 158] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.56345719, 3.82402468, 2.68081284, 4.30023146, 3.12777853, 4.44676113,
         5.01942205, 4.85944176, 3.30816436]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0443 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 23, vnnlib ID: 23 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.14455748, -5.84289455, -2.86230087, -2.12573886, -3.17329073,
         -2.12218904, -4.42577553, -2.79664421, -3.31719923, -4.93841982]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 157, 1, 427] with unstable size 156 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 427] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [156]; unstable size 156; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 156] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 156] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.56514984,  3.04386854,  0.44034660, -0.01067108,  0.67077875,
          1.90764415,  0.08044988,  0.57008010,  2.19504976]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.14455748, -5.84289455, -2.86230087, -2.12573886, -3.17329073,
         -2.12218904, -4.42577553, -2.79664421, -3.31719923, -4.93841982]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.16760874, -5.79149437, -2.92998362, -2.25009131, -3.25186229,
          -2.25700569, -4.37982655, -2.96575403, -3.27511168, -4.89296436]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00691438]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0061 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0457 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 24, vnnlib ID: 24 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.53025484,  -6.93467522,  -8.63117790, -10.59670353,  -8.79525089,
         -10.72763157,  -9.39887810, -10.28261948,  -8.60503674,  -7.72983885]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [710]; unstable size 710; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 224, 1, 710] with unstable size 223 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 710] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 710] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [223]; unstable size 223; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 223] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 223] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.10017061,  0.81654787,  2.80445528,  0.97049618,  2.92300081,
          1.57911110,  2.45411777,  1.05910563,  0.55258167]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.53025484,  -6.93467522,  -8.63117790, -10.59670353,  -8.79525089,
         -10.72763157,  -9.39887810, -10.28261948,  -8.60503674,  -7.72983885]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.44it/s]100%|██████████| 1/1 [00:00<00:00,  9.43it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.62336159,  -7.42845249,  -8.70991421, -10.74260235,  -8.88674164,
          -10.87233353,  -9.51017857, -10.43375587,  -8.81735802,  -8.17679691]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.19490910]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1084 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.264001846313477
alpha/beta optimization time: 3.6203625202178955
initial alpha-crown bounds: tensor([[-0.06242037,  0.84010792,  2.82575011,  0.99328089,  2.94463897,
          1.60075760,  2.47774124,  1.08523822,  0.55890679]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.06242036819458008
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 196.2221360206604
Verifying property 0 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.06242037]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.53025484,  -6.93467522,  -8.63117790, -10.59670353,  -8.79525089,
        -10.72763157,  -9.39887810, -10.28261948,  -8.60503674,  -7.72983885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.06242037]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 710
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 216
Node /15 input 0: size torch.Size([100]) unstable 4
-----------------
# of unstable neurons: 930
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 90] 
split level 2: [/input-8, 45] 
split level 3: [/input-8, 1875] 
split level 4: [/input-8, 1881] 
split level 5: [/input-8, 1130] 
split level 6: [/input-8, 1769] 
split level 7: [/input-8, 1710] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 4.8160552978515625e-05
Time: prepare 0.0030    bound 0.0068    transfer 0.0017    finalize 0.0014    func 0.0129    
Accumulated time: func 0.0129    prepare 0.0034    bound 0.0068    transfer 0.0017    finalize 0.0014    
all_split False
Length of domains: 0
Time: pickout 0.0004    decision 0.2602    set_bounds 0.0168    solve 0.0130    add 0.0021    
Accumulated time: pickout 0.0004    decision 0.2602    set_bounds 0.0168    solve 0.0130    add 0.0021    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.3213334083557129


Properties batch 1, size 1
Remaining timeout: 195.73859906196594
Verifying property 1 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.8401079177856445.

Properties batch 2, size 1
Remaining timeout: 195.6372148990631
Verifying property 2 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.8257501125335693.

Properties batch 3, size 1
Remaining timeout: 195.54757404327393
Verifying property 3 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9932808876037598.

Properties batch 4, size 1
Remaining timeout: 195.45918464660645
Verifying property 4 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.944638967514038.

Properties batch 5, size 1
Remaining timeout: 195.37108254432678
Verifying property 5 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.6007575988769531.

Properties batch 6, size 1
Remaining timeout: 195.28319096565247
Verifying property 6 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.477741241455078.

Properties batch 7, size 1
Remaining timeout: 195.19504237174988
Verifying property 7 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0852382183074951.

Properties batch 8, size 1
Remaining timeout: 195.10703372955322
Verifying property 8 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5589067935943604.
Result: safe in 4.9809 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 25, vnnlib ID: 25 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.18077564, -5.20051479, -2.12253857, -2.36523008, -1.95707440,
         -2.48700714, -1.75185084, -2.55259371, -4.91013861, -3.94676566]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [653]; unstable size 653; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 205, 1, 653] with unstable size 204 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 653] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 653] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [204]; unstable size 204; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 204] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 204] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.29296613, -1.59309256, -1.48934960, -1.80449438, -1.37909257,
         -2.13179350, -1.44039249,  1.14391530, -0.00782704]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.18077564, -5.20051479, -2.12253857, -2.36523008, -1.95707440,
         -2.48700714, -1.75185084, -2.55259371, -4.91013861, -3.94676566]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.18077517, -5.20051384, -2.12253881, -2.36523008, -1.95707417,
          -2.48700714, -1.75185037, -2.55259418, -4.91013765, -3.94676566],
         [-3.18077517, -5.20051384, -2.12253881, -2.36523008, -1.95707417,
          -2.48700714, -1.75185037, -2.55259418, -4.91013765, -3.94676566]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.05823636, -0.81554508, -1.22370100, -0.69376802, -1.42892480,
          -0.62818098,  0.76599050]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         ...,


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0475 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 26, vnnlib ID: 26 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.89522552, -12.50763512, -11.44470501, -10.71474552, -11.76819897,
         -10.88390923, -11.10462856, -10.95513725, -12.58380413, -11.60862064]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [382]; unstable size 382; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 122, 1, 382] with unstable size 121 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 382] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 382] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [121]; unstable size 121; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 121] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 121] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.28878093,  0.57599193, -0.86663389, -1.54129553, -0.57239199,
         -1.38458633, -1.21227455, -1.42654026,  0.52066183]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.89522552, -12.50763512, -11.44470501, -10.71474552, -11.76819897,
         -10.88390923, -11.10462856, -10.95513725, -12.58380413, -11.60862064]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.89522552, -12.50763512, -11.44470310, -10.71474457, -11.76819706,
          -10.88390827, -11.10462856, -10.95513630, -12.58380413, -11.60861969],
         [-10.89522552, -12.50763512, -11.44470310, -10.71474457, -11.76819706,
          -10.88390827, -11.10462856, -10.95513630, -12.58380413, -11.60861969]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.71339417, -0.16391659, -0.89387512,  0.15957737, -0.72471142,
          -0.50399113, -0.65348339]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         ...,


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0621 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 27, vnnlib ID: 27 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.43655968, -7.86374569, -4.02158070, -5.24551868, -3.37242651,
         -5.30696249, -5.20856190, -1.00180030, -7.81787586, -6.36246300]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [515]; unstable size 515; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 161, 1, 515] with unstable size 160 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 515] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 515] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [160]; unstable size 160; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 160] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 160] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.54672909, 5.77573013, 2.48532724, 3.64926195, 1.99377513, 3.71493435,
         3.49136114, 5.76536751, 4.38623142]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0483 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 28, vnnlib ID: 28 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.78016090, -14.31425953, -12.11413383, -13.61369610, -13.22554588,
         -13.89419746, -13.81897068, -15.55597496, -11.84562683, -14.04191494]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [440]; unstable size 440; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 110, 1, 440] with unstable size 109 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 440] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 440] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [109]; unstable size 109; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 109] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 109] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.06631994, 1.97255528, 3.32466221, 3.00493073, 3.59111643, 3.54375243,
         5.13309097, 1.75885546, 3.87197638]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0448 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 29, vnnlib ID: 29 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.58011818, -16.93579865, -13.35176086, -12.33354282, -12.53640938,
         -12.27129459, -12.42931461, -13.10805130, -16.13471413, -17.27034378]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [468]; unstable size 468; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 468] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 468] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 468] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 159] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.95476007,  3.13256741, -0.12001920, -1.12539411, -0.82774329,
         -1.18586886, -1.15729165,  2.37652373,  3.54983139]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.58011818, -16.93579865, -13.35176086, -12.33354282, -12.53640938,
         -12.27129459, -12.42931461, -13.10805130, -16.13471413, -17.27034378]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.58012009, -16.93579865, -13.35176182, -12.33354473, -12.53641129,
          -12.27129650, -12.42931652, -13.10805321, -16.13471413, -17.27034378],
         [-15.58012009, -16.93579865, -13.35176182, -12.33354473, -12.53641129,
          -12.27129650, -12.42931652, -13.10805321, -16.13471413, -17.27034378]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.24370861, -0.77450848, -0.57164192, -0.83675671, -0.67873669]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0578 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 30, vnnlib ID: 30 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.56713295, -10.98260689,  -8.09094048,  -9.93765926,  -9.26453114,
         -10.17694187,  -9.82418156, -11.28379536,  -9.40003777, -10.42401791]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [530]; unstable size 530; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 122, 1, 530] with unstable size 121 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 530] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 530] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [121]; unstable size 121; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 121] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 121] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.92235827, 1.25571513, 2.97574449, 2.32010770, 3.20374870, 2.90414071,
         4.19674826, 2.57079268, 3.44977427]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0422 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 31, vnnlib ID: 31 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.24266052, -9.05385590, -4.63273811, -6.82860374, -4.25593948,
         -6.95034361, -6.54124737, -4.92567825, -7.73889160, -7.98849154]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [484]; unstable size 484; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 199, 1, 484] with unstable size 198 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 484] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 484] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [198]; unstable size 198; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 198] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 198] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.37995422, 3.76833582, 0.10083741, 2.16897559, 2.29998064, 1.78575850,
         0.35607696, 2.66335344, 2.83313727]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0541 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 32, vnnlib ID: 32 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.89239407, -6.05108643, -2.55554962, -3.76616883, -2.11981702,
         -3.83909178, -3.28839850, -3.06943870, -4.45051193, -5.43191195]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [594]; unstable size 594; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 594] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 594] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 594] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 191] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.09662652,  2.10026312, -1.01723409,  0.09384108, -1.30339622,
          0.17089653, -0.43055606,  0.45394611,  1.56536627]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.89239407, -6.05108643, -2.55554962, -3.76616883, -2.11981702,
         -3.83909178, -3.28839850, -3.06943870, -4.45051193, -5.43191195]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.89239454, -6.05108738, -2.55554962, -3.76616931, -2.11981726,
          -3.83909178, -3.28839874, -3.06943822, -4.45051241, -5.43191242],
         [-3.89239454, -6.05108738, -2.55554962, -3.76616931, -2.11981726,
          -3.83909178, -3.28839874, -3.06943822, -4.45051241, -5.43191242]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.51388860, -0.94962096,  0.21896052]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0612 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 33, vnnlib ID: 33 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.06789207, -13.08512020, -11.95641899, -14.25201702, -13.24593544,
         -14.51348209, -14.12713146, -14.87085629, -10.82266903, -12.98229504]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [591]; unstable size 591; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 125, 1, 591] with unstable size 124 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 591] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 591] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [124]; unstable size 124; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 124] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 124] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.60616136, 2.43306828, 4.57036257, 3.65054798, 4.81807995, 4.45948219,
         5.13743353, 1.49430251, 3.58136392]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0430 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 34, vnnlib ID: 34 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.87295246,  -9.77221680,  -7.06542158,  -6.92552090,  -6.61218357,
          -6.98795938,  -6.45421982,  -7.64116573, -10.70925426,  -9.26054478]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [514]; unstable size 514; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 255, 1, 514] with unstable size 254 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 514] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 514] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [254]; unstable size 254; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 254] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 254] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.37700796,  1.93588448, -0.13754916, -0.62001419,  0.04202433,
         -0.79881167,  0.29987144,  3.01180029,  1.52556324]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.87295246,  -9.77221680,  -7.06542158,  -6.92552090,  -6.61218357,
          -6.98795938,  -6.45421982,  -7.64116573, -10.70925426,  -9.26054478]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.87295151,  -9.77221584,  -7.06542110,  -6.92552185,  -6.61218452,
           -6.98795891,  -6.45422077,  -7.64116478, -10.70925331,  -9.26054478],
         [ -9.87295151,  -9.77221584,  -7.06542110,  -6.92552185,  -6.61218452,
           -6.98795891,  -6.45422077,  -7.64116478, -10.70925331,  -9.26054478]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.13989925, -0.31333733, -0.47130108]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.79841268, -1.94126987, -1.67142856,  ..., -1.56031740,
            -1.75079370, -1.76666665],
           [-1.62380958, -1.92539680, -1.78253973,  ..., -1.57619035,
            -1.71904767, -1.75079370],
           [-1.38571417, -1.86190474, -1.86190474,  ..., -1.56031740,
            -1.68730164, -1.73492062],
           ...,
           [-0.14761895, -0.52857143, -0.63968253,  ..., -0.25873005,
            -0.32222211, -0.38571417],
           [-0.00476181, -0.36984116, -0.67142856,  ..., -0.33809513,
            -0.38571417, -0.48095238],
           [ 0.01111121, -0.03650784, -0.25873005,  ..., -0.35396814,
            -0.33809513, -0.41746020]],

          [[-1.80354273, -1.90016103, -1.75523353,  ..., -1.65861523,
            -1.81964576, -1.78743970],
           [-1.69082129, -1.88405800, -1.83574879,  ..., -1.67471826,
            -1.77133656, -1.77133656],
           [-1.54589367, -1.86795497, -1.91626418,  ..., -1.64251208,
            -1.75523353, -1.77133656],
           ...,
           [-0.40257636, -0.83735907, -0.91787434,  ..., -0.49919480,
            -0.54750401, -0.61191624],
           [-0.22544271, -0.64412236, -0.90177131,  ..., -0.61191624,
            -0.66022539, -0.74074072],
           [-0.16103047, -0.25764883, -0.46698871,  ..., -0.67632848,
            -0.66022539, -0.74074072]],

          [[-1.39280367, -1.58770621, -1.34782624,  ..., -1.28785622,
            -1.45277369, -1.43778121],
           [-1.25787115, -1.55772126, -1.43778121,  ..., -1.30284870,
            -1.40779614, -1.40779614],
           [-1.04797614, -1.48275876, -1.51274371,  ..., -1.28785622,
            -1.39280367, -1.40779614],
           ...,
           [ 0.13643195, -0.49325335, -0.83808094,  ...,  0.19640197,
             0.15142445,  0.09145443],
           [ 0.33133450, -0.19340314, -0.61319339,  ...,  0.07646193,
             0.03148442, -0.04347810],
           [ 0.52623707,  0.39130452,  0.13643195,  ...,  0.01649191,
             0.01649191, -0.05847061]]],


         [[[-1.79841268, -1.94126987, -1.67142856,  ..., -1.56031740,
            -1.75079370, -1.76666665],
           [-1.62380958, -1.92539680, -1.78253973,  ..., -1.57619035,
            -1.71904767, -1.75079370],
           [-1.38571417, -1.86190474, -1.86190474,  ..., -1.56031740,
            -1.68730164, -1.73492062],
           ...,
           [-0.14761895, -0.52857143, -0.63968253,  ..., -0.25873005,
            -0.32222211, -0.38571417],
           [-0.00476181, -0.36984116, -0.67142856,  ..., -0.33809513,
            -0.38571417, -0.48095238],
           [ 0.01111121, -0.03650784, -0.25873005,  ..., -0.35396814,
            -0.33809513, -0.41746020]],

          [[-1.80354273, -1.90016103, -1.75523353,  ..., -1.65861523,
            -1.81964576, -1.78743970],
           [-1.69082129, -1.88405800, -1.83574879,  ..., -1.67471826,
            -1.77133656, -1.77133656],
           [-1.54589367, -1.86795497, -1.91626418,  ..., -1.64251208,
            -1.75523353, -1.77133656],
           ...,
           [-0.40257636, -0.83735907, -0.91787434,  ..., -0.49919480,
            -0.54750401, -0.61191624],
           [-0.22544271, -0.64412236, -0.90177131,  ..., -0.61191624,
            -0.66022539, -0.74074072],
           [-0.16103047, -0.25764883, -0.46698871,  ..., -0.67632848,
            -0.66022539, -0.74074072]],

          [[-1.39280367, -1.58770621, -1.34782624,  ..., -1.28785622,
            -1.45277369, -1.43778121],
           [-1.25787115, -1.55772126, -1.43778121,  ..., -1.30284870,
            -1.40779614, -1.40779614],
           [-1.04797614, -1.48275876, -1.51274371,  ..., -1.28785622,
            -1.39280367, -1.40779614],
           ...,
           [ 0.13643195, -0.49325335, -0.83808094,  ...,  0.19640197,
             0.15142445,  0.09145443],
           [ 0.33133450, -0.19340314, -0.61319339,  ...,  0.07646193,
             0.03148442, -0.04347810],
           [ 0.52623707,  0.39130452,  0.13643195,  ...,  0.01649191,
             0.01649191, -0.05847061]]],


         [[[-1.79841268, -1.94126987, -1.67142856,  ..., -1.56031740,
            -1.75079370, -1.76666665],
           [-1.62380958, -1.92539680, -1.78253973,  ..., -1.57619035,
            -1.71904767, -1.75079370],
           [-1.38571417, -1.86190474, -1.86190474,  ..., -1.56031740,
            -1.68730164, -1.73492062],
           ...,
           [-0.14761895, -0.52857143, -0.63968253,  ..., -0.25873005,
            -0.32222211, -0.38571417],
           [-0.00476181, -0.36984116, -0.67142856,  ..., -0.33809513,
            -0.38571417, -0.48095238],
           [ 0.01111121, -0.03650784, -0.25873005,  ..., -0.35396814,
            -0.33809513, -0.41746020]],

          [[-1.80354273, -1.90016103, -1.75523353,  ..., -1.65861523,
            -1.81964576, -1.78743970],
           [-1.69082129, -1.88405800, -1.83574879,  ..., -1.67471826,
            -1.77133656, -1.77133656],
           [-1.54589367, -1.86795497, -1.91626418,  ..., -1.64251208,
            -1.75523353, -1.77133656],
           ...,
           [-0.40257636, -0.83735907, -0.91787434,  ..., -0.49919480,
            -0.54750401, -0.61191624],
           [-0.22544271, -0.64412236, -0.90177131,  ..., -0.61191624,
            -0.66022539, -0.74074072],
           [-0.16103047, -0.25764883, -0.46698871,  ..., -0.67632848,
            -0.66022539, -0.74074072]],

          [[-1.39280367, -1.58770621, -1.34782624,  ..., -1.28785622,
            -1.45277369, -1.43778121],
           [-1.25787115, -1.55772126, -1.43778121,  ..., -1.30284870,
            -1.40779614, -1.40779614],
           [-1.04797614, -1.48275876, -1.51274371,  ..., -1.28785622,
            -1.39280367, -1.40779614],
           ...,
           [ 0.13643195, -0.49325335, -0.83808094,  ...,  0.19640197,
             0.15142445,  0.09145443],
           [ 0.33133450, -0.19340314, -0.61319339,  ...,  0.07646193,
             0.03148442, -0.04347810],
           [ 0.52623707,  0.39130452,  0.13643195,  ...,  0.01649191,
             0.01649191, -0.05847061]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0699 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 35, vnnlib ID: 35 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.22711134, -6.61452389, -3.28024340, -3.07715249, -3.65528822,
         -3.21469426, -1.80790162, -3.44135714, -7.19001961, -5.18115664]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 427] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 427] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 192] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.43010712,  2.73373127, -0.20912015,  0.11641049,  0.11481588,
         -1.58735895, -0.18466640,  3.42027807,  1.36505175]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.22711134, -6.61452389, -3.28024340, -3.07715249, -3.65528822,
         -3.21469426, -1.80790162, -3.44135714, -7.19001961, -5.18115664]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.22711134, -6.61452293, -3.28024387, -3.07715273, -3.65528846,
          -3.21469450, -1.80790162, -3.44135761, -7.19001865, -5.18115664],
         [-6.22711134, -6.61452293, -3.28024387, -3.07715273, -3.65528846,
          -3.21469450, -1.80790162, -3.44135761, -7.19001865, -5.18115664]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.20309114, -1.26925111,  0.36420488]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]],


         [[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]],


         [[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0524 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 36, vnnlib ID: 36 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.63098383, -5.91123009, -1.57904100, -1.50031447, -3.17599440,
         -1.57833910, -2.31312609, -2.17043972, -5.16499329, -4.05005884]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [429]; unstable size 429; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 115, 1, 429] with unstable size 114 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 429] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 429] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [114]; unstable size 114; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 114] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 114] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.02613151,  3.04000378, -0.86533880, -0.93197477,  0.78377461,
         -0.84204757, -0.27393401,  2.37316942,  1.32241917]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.63098383, -5.91123009, -1.57904100, -1.50031447, -3.17599440,
         -1.57833910, -2.31312609, -2.17043972, -5.16499329, -4.05005884]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.63098431, -5.91123009, -1.57904124, -1.50031507, -3.17599440,
          -1.57833958, -2.31312585, -2.17043996, -5.16499329, -4.05005884],
         [-2.63098431, -5.91123009, -1.57904124, -1.50031507, -3.17599440,
          -1.57833958, -2.31312585, -2.17043996, -5.16499329, -4.05005884]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.59139872, -0.67012489, -0.59210038,  0.14268589]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0575 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 37, vnnlib ID: 37 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.53942776,  -7.02883530,  -7.54472733, -10.47971630,  -7.86964130,
         -10.67128658, -10.97943497,  -9.78617668,  -5.69757843,  -6.90828276]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [473]; unstable size 473; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 141, 1, 473] with unstable size 140 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 1, 1, 473] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 473] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [140]; unstable size 140; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 1, 1, 140] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 140] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.97586250,  1.62177134,  4.44206476,  1.95841980,  4.61180305,
          4.90358877,  3.71702051, -0.18866634,  0.87091970]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.53942776,  -7.02883530,  -7.54472733, -10.47971630,  -7.86964130,
         -10.67128658, -10.97943497,  -9.78617668,  -5.69757843,  -6.90828276]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.34467602,  -6.78079128,  -7.36285162, -10.22102642,  -7.63834572,
          -10.41161633, -10.81610203,  -9.54494476,  -5.22521114,  -6.57947111]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11946487]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0365 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 38, vnnlib ID: 38 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.99526882, -8.88451767, -3.74724054, -4.25434780, -3.80330396,
         -4.31974983, -2.96723056, -5.10482168, -9.22820282, -7.71018076]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [442]; unstable size 442; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 442] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 442] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 442] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 188] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.31716251, 5.14074612, 0.38760489, 0.92174959, 0.43740427, 0.97805083,
         1.55073762, 5.43588734, 3.94455695]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0477 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 39, vnnlib ID: 39 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.29222870,  -9.06495857,  -5.48218775,  -5.67955399,  -5.15304756,
          -5.78769970,  -4.06756973,  -5.97489452, -10.72794914,  -8.75968742]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [344]; unstable size 344; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 344] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 344] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 344] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 166] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.44414186, 4.29334497, 0.94329739, 1.21160614, 0.62566423, 1.30977690,
         1.30732989, 5.79046440, 4.05936003]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0380 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 40, vnnlib ID: 40 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.00760698, -10.36704826,  -7.93206787,  -9.08809185,  -9.34877014,
          -9.23899841, -10.37455654,  -9.37908459,  -8.12404442, -10.51943302]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [377]; unstable size 377; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 159, 1, 377] with unstable size 158 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 377] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 377] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [158]; unstable size 158; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 158] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 158] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.70369077, 1.60599136, 2.61762953, 2.92221189, 2.76581216, 3.82137728,
         2.85164285, 1.76453435, 4.06818771]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0277 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 41, vnnlib ID: 41 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.83257341, -6.46854591, -5.99145317, -5.71124935, -5.55805302,
         -5.72428894, -7.17641068, -6.33211374, -1.95075095, -5.86147213]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [468]; unstable size 468; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 468] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 468] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 468] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 180] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.54666638, 3.82981730, 3.37250423, 2.99276829, 2.92181730, 2.99155474,
         4.37545872, 3.59890223, 3.20619917]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0317 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 42, vnnlib ID: 42 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.92135620, -9.33125305, -5.36672211, -5.52371502, -5.86994457,
         -5.72914362, -4.85611820, -7.33439922, -7.56188965, -8.56555939]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [544]; unstable size 544; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 184, 1, 544] with unstable size 183 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 544] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 544] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [183]; unstable size 183; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 183] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 183] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.39630246, 3.45109224, 0.09545040, 0.32944334, 0.53940821, 0.51911551,
         1.82263875, 1.84724045, 2.81309271]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0351 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 43, vnnlib ID: 43 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.31921101, -8.17862988, -3.92548275, -4.37522030, -3.57966661,
         -4.41261387, -3.19976306, -4.81196594, -8.46736908, -7.38388491]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [501]; unstable size 501; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 223, 1, 501] with unstable size 222 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 501] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 501] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [222]; unstable size 222; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 222] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 222] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.06676197,  2.64715958, -0.83596253, -0.06112341, -1.19111884,
         -1.62031984, -0.01587462,  3.07019162,  2.02515364]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.31921101, -8.17862988, -3.92548275, -4.37522030, -3.57966661,
         -4.41261387, -3.19976306, -4.81196594, -8.46736908, -7.38388491]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.31921053, -8.17862988, -3.92548323, -4.37522030, -3.57966733,
          -4.41261482, -3.19976282, -4.81196690, -8.46736908, -7.38388443],
         [-7.31921053, -8.17862988, -3.92548323, -4.37522030, -3.57966733,
          -4.41261482, -3.19976282, -4.81196690, -8.46736908, -7.38388443]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.48713160, -0.03739452, -0.83294749, -1.21285200,  0.39935207]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0452 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 44, vnnlib ID: 44 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.73774433, -9.38230991, -5.25654364, -6.28954697, -4.75454044,
         -6.38296413, -5.13899040, -6.38740015, -9.45212460, -9.40668297]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [644]; unstable size 644; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 233, 1, 644] with unstable size 232 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 644] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 644] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [232]; unstable size 232; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 232] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.87710190,  3.18848801,  0.69205022, -0.69066864,  0.77880287,
         -0.48637587,  0.73772764,  3.31828928,  3.26127863]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.73774433, -9.38230991, -5.25654364, -6.28954697, -4.75454044,
         -6.38296413, -5.13899040, -6.38740015, -9.45212460, -9.40668297]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.73774529, -9.38231087, -5.25654459, -6.28954792, -4.75454140,
          -6.38296461, -5.13899136, -6.38740110, -9.45212364, -9.40668201],
         [-7.73774529, -9.38231087, -5.25654459, -6.28954792, -4.75454140,
          -6.38296461, -5.13899136, -6.38740110, -9.45212364, -9.40668201]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.50200319, -0.11755323]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.84603173, -0.87777776, -0.86190474,  ..., -0.36984116,
            -0.36984116, -0.36984116],
           [-0.86190474, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           [-0.84603173, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           ...,
           [-0.52857143, -0.49682540, -0.48095238,  ..., -0.16349196,
            -0.13174593, -0.32222211],
           [-0.46507925, -0.48095238, -0.48095238,  ..., -0.30634910,
            -0.22698402, -0.27460307],
           [-0.43333322, -0.43333322, -0.48095238,  ..., -0.38571417,
            -0.27460307, -0.16349196]],

          [[-0.96618354, -0.99838966, -0.98228657,  ..., -0.45088565,
            -0.45088565, -0.45088565],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           ...,
           [-0.80515295, -0.82125598, -0.83735907,  ..., -0.51529789,
            -0.51529789, -0.74074072],
           [-0.78904986, -0.80515295, -0.82125598,  ..., -0.64412236,
            -0.57971013, -0.64412236],
           [-0.77294683, -0.78904986, -0.78904986,  ..., -0.72463763,
            -0.62801927, -0.54750401]],

          [[-1.00299859, -1.01799107, -1.01799107,  ..., -0.71814090,
            -0.73313338, -0.71814090],
           [-1.01799107, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           [-1.00299859, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           ...,
           [-0.98800600, -0.98800600, -0.97301346,  ..., -0.52323836,
            -0.47826082, -0.67316341],
           [-0.95802099, -0.97301346, -0.97301346,  ..., -0.64317840,
            -0.55322337, -0.61319339],
           [-0.95802099, -0.98800600, -1.01799107,  ..., -0.71814090,
            -0.59820086, -0.50824583]]],


         [[[-0.84603173, -0.87777776, -0.86190474,  ..., -0.36984116,
            -0.36984116, -0.36984116],
           [-0.86190474, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           [-0.84603173, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           ...,
           [-0.52857143, -0.49682540, -0.48095238,  ..., -0.16349196,
            -0.13174593, -0.32222211],
           [-0.46507925, -0.48095238, -0.48095238,  ..., -0.30634910,
            -0.22698402, -0.27460307],
           [-0.43333322, -0.43333322, -0.48095238,  ..., -0.38571417,
            -0.27460307, -0.16349196]],

          [[-0.96618354, -0.99838966, -0.98228657,  ..., -0.45088565,
            -0.45088565, -0.45088565],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           ...,
           [-0.80515295, -0.82125598, -0.83735907,  ..., -0.51529789,
            -0.51529789, -0.74074072],
           [-0.78904986, -0.80515295, -0.82125598,  ..., -0.64412236,
            -0.57971013, -0.64412236],
           [-0.77294683, -0.78904986, -0.78904986,  ..., -0.72463763,
            -0.62801927, -0.54750401]],

          [[-1.00299859, -1.01799107, -1.01799107,  ..., -0.71814090,
            -0.73313338, -0.71814090],
           [-1.01799107, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           [-1.00299859, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           ...,
           [-0.98800600, -0.98800600, -0.97301346,  ..., -0.52323836,
            -0.47826082, -0.67316341],
           [-0.95802099, -0.97301346, -0.97301346,  ..., -0.64317840,
            -0.55322337, -0.61319339],
           [-0.95802099, -0.98800600, -1.01799107,  ..., -0.71814090,
            -0.59820086, -0.50824583]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0407 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 45, vnnlib ID: 45 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.38197994, -10.24376202,  -8.79766655,  -9.01879883,  -8.99937153,
          -9.13003254,  -9.50150967, -10.35948181,  -9.91758919, -10.61350632]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 508] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 508] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 197] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.60292768, -2.29249477, -2.02272058, -2.05514479, -1.91961026,
         -1.48416090, -0.73623490, -1.02746439,  0.09661853]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.38197994, -10.24376202,  -8.79766655,  -9.01879883,  -8.99937153,
          -9.13003254,  -9.50150967, -10.35948181,  -9.91758919, -10.61350632]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.38197994, -10.24376202,  -8.79766655,  -9.01879978,  -8.99937153,
           -9.13003254,  -9.50150967, -10.35948181,  -9.91758823, -10.61350632],
         [ -9.38197994, -10.24376202,  -8.79766655,  -9.01879978,  -8.99937153,
           -9.13003254,  -9.50150967, -10.35948181,  -9.91758823, -10.61350632]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.86178207, -1.44609547, -1.22496223, -1.24439049, -1.11372948,
          -0.74225235,  0.11571980, -0.32617378]]], device='cuda:0')
number of violation:  7
clean attack image tensor([[[[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         ...,


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0661 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 46, vnnlib ID: 46 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.77434063, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670811,
          -6.53051615,  -7.14518929,  -8.42440701, -10.45952797, -10.54728985]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [695]; unstable size 695; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 695] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 695] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 695] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 199] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.70145547,  3.44708157, -0.32370079, -0.09620176,  0.17705202,
          0.33821183,  1.44863999,  3.27855802,  3.35601616]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.77434063, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670811,
          -6.53051615,  -7.14518929,  -8.42440701, -10.45952797, -10.54728985]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.77434158, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670906,
           -6.53051615,  -7.14519024,  -8.42440796, -10.45952892, -10.54729080],
         [ -8.77434158, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670906,
           -6.53051615,  -7.14519024,  -8.42440796, -10.45952892, -10.54729080]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01167870, -0.07961607]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0525 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 47, vnnlib ID: 47 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.38532257, -6.06158733, -5.10214949, -7.15757179, -4.90412474,
         -7.31758070, -7.94371891, -6.91108131, -0.65056217, -5.11655426]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [488]; unstable size 488; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 137, 1, 488] with unstable size 136 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 488] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 488] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [136]; unstable size 136; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 136] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 136] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.34641826, 4.86730671, 3.89913702, 5.95862532, 3.74042487, 6.11034727,
         6.67927361, 5.60504532, 3.94073153]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0413 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 48, vnnlib ID: 48 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.23477888, -5.68500996, -2.55144548, -1.29489720, -2.30533838,
         -1.34893715, -1.73671746, -2.07432318, -6.50224018, -4.89857721]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [425]; unstable size 425; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 425] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 425] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 425] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 199] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.02166891,  3.21041369,  0.75644493, -0.07432845,  0.52634180,
          0.06094778,  0.40918589,  4.12974262,  2.57223129]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.23477888, -5.68500996, -2.55144548, -1.29489720, -2.30533838,
         -1.34893715, -1.73671746, -2.07432318, -6.50224018, -4.89857721]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.23477888, -5.68500996, -2.55144548, -1.29489720, -2.30533838,
          -1.34893715, -1.73671746, -2.07432318, -6.50224018, -4.89857721]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05403996]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.82063496,  0.82063496,  0.88412702,  ..., -0.89365077,
            -0.86190474, -0.83015871],
           [ 0.99523818,  1.12222254,  1.43968284,  ..., -0.89365077,
            -0.90952379, -0.90952379],
           [ 1.47142887,  1.72539711,  1.93174624,  ..., -0.84603173,
            -0.90952379, -0.94126981],
           ...,
           [ 0.96349210,  0.70952386,  0.48730165,  ...,  0.04285724,
             0.16984135,  0.15396833],
           [ 1.07460344,  0.77301592,  0.58253974,  ...,  0.72539687,
             0.20158738,  0.29682547],
           [ 1.01111114,  0.78888893,  0.45555562,  ...,  1.63015902,
             1.05873048,  0.86825401]],

          [[-0.32206106, -0.41867942, -0.40257636,  ..., -1.22383249,
            -1.14331722, -1.04669881],
           [-0.19323659, -0.03220600,  0.46698883,  ..., -1.30434775,
            -1.27214170, -1.22383249],
           [ 0.56360716,  1.01449287,  1.23993587,  ..., -1.41706920,
            -1.44927526, -1.43317223],
           ...,
           [-0.43478248, -0.66022539, -0.85346210,  ..., -0.75684375,
            -0.66022539, -0.64412236],
           [-0.24154577, -0.51529789, -0.77294683,  ..., -0.45088565,
            -0.80515295, -0.85346210],
           [-0.22544271, -0.41867942, -0.80515295,  ..., -0.03220600,
            -0.45088565, -0.74074072]],

          [[-0.64317840, -0.74812591, -0.79310340,  ..., -1.06296861,
            -0.95802099, -0.85307342],
           [-0.55322337, -0.41829082, -0.04347810,  ..., -1.15292358,
            -1.10794616, -1.06296861],
           [ 0.31634200,  0.58620709,  0.55622208,  ..., -1.30284870,
            -1.30284870, -1.30284870],
           ...,
           [-0.91304344, -1.04797614, -1.13793111,  ..., -0.98800600,
            -0.89805096, -0.86806595],
           [-0.77811092, -0.98800600, -1.09295356,  ..., -0.88305843,
            -1.03298354, -1.10794616],
           [-0.74812591, -0.91304344, -1.12293863,  ..., -0.73313338,
            -0.98800600, -1.18290865]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0520 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 49, vnnlib ID: 49 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.14186001,  -7.07143116, -10.46663189, -11.16532612, -10.33747673,
         -11.26323891, -10.40632534, -10.15031719,  -8.55157280,  -8.28031540]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [538]; unstable size 538; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 538] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 538] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 538] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 206] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.38833761, 2.48165607, 3.18024349, 2.31973934, 3.26281786, 2.38422155,
         2.02770853, 0.85605979, 0.95938039]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0231 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 50, vnnlib ID: 50 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.38072777, -8.34097099, -7.53324938, -7.26011181, -6.91416168,
         -7.30822277, -7.39192200, -8.73349857, -8.18290806, -9.00568867]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [791]; unstable size 791; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 190, 1, 791] with unstable size 189 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 791] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 791] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [189]; unstable size 189; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 189] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 189] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.38350561,  0.14631462, -0.09611964, -0.06322639, -0.81499481,
         -0.28940237,  0.85859978,  0.09628773,  0.96366215]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.38072777, -8.34097099, -7.53324938, -7.26011181, -6.91416168,
         -7.30822277, -7.39192200, -8.73349857, -8.18290806, -9.00568867]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.38072777, -8.34097099, -7.53324986, -7.26011276, -6.91416264,
          -7.30822325, -7.39192200, -8.73349953, -8.18290710, -9.00568962],
         [-8.38072777, -8.34097099, -7.53324986, -7.26011276, -6.91416264,
          -7.30822325, -7.39192200, -8.73349953, -8.18290710, -9.00568962]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.22502661, -0.04811049, -0.39406061,  0.08369875]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0503 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 51, vnnlib ID: 51 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -4.23172474, -11.22384930,  -5.34106207,  -9.06499481,  -7.32086372,
          -9.25464153, -10.79966545, -10.12152672,  -6.76570702, -10.71261692]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [459]; unstable size 459; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 131, 1, 459] with unstable size 130 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 459] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 459] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [130]; unstable size 130; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 130] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 130] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.35711384, 0.89513063, 4.55454159, 2.81934166, 4.73727655, 6.20088959,
         5.47830963, 2.08739543, 5.85482788]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0328 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 52, vnnlib ID: 52 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.30221272, -11.14697456,  -6.05900908,  -5.33924294,  -5.99430466,
          -5.30768108,  -5.64619446,  -7.31474876, -10.63627148, -10.70530987]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [504]; unstable size 504; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 504] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 504] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 504] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 199] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.36880398,  5.11926937,  0.38846803,  0.01013416,  0.33952868,
         -0.05993855,  1.64709651,  4.65361881,  4.72898006]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.30221272, -11.14697456,  -6.05900908,  -5.33924294,  -5.99430466,
          -5.30768108,  -5.64619446,  -7.31474876, -10.63627148, -10.70530987]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.23it/s]100%|██████████| 1/1 [00:00<00:00,  9.23it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.49543190, -11.39906597,  -6.25923395,  -5.68034649,  -6.18490219,
           -5.65740013,  -5.70066929,  -7.64016151, -10.87086868, -11.04580212]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04326916]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1110 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 20.356842041015625
alpha/beta optimization time: 1.1035118103027344
initial alpha-crown bounds: tensor([[ 3.39546919,  5.14681530,  0.40474594,  0.01093243,  0.35315633,
         -0.05082333,  1.65623391,  4.68375587,  4.75655651]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.050823330879211426
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.7326202392578
Verifying property 0 with 1 instances.
##### Instance 52 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.3954691886901855.

Properties batch 1, size 1
Remaining timeout: 198.60492372512817
Verifying property 1 with 1 instances.
##### Instance 52 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.146815299987793.

Properties batch 2, size 1
Remaining timeout: 198.51445245742798
Verifying property 2 with 1 instances.
##### Instance 52 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.4047459363937378.

Properties batch 3, size 1
Remaining timeout: 198.42525553703308
Verifying property 3 with 1 instances.
##### Instance 52 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.010932430624961853.

Properties batch 4, size 1
Remaining timeout: 198.33620977401733
Verifying property 4 with 1 instances.
##### Instance 52 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.35315632820129395.

Properties batch 5, size 1
Remaining timeout: 198.24724578857422
Verifying property 5 with 1 instances.
##### Instance 52 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.05082333]], device='cuda:0') need to verify.
Model prediction is: tensor([ -9.30221272, -11.14697456,  -6.05900908,  -5.33924294,  -5.99430466,
         -5.30768108,  -5.64619446,  -7.31474876, -10.63627148, -10.70530987],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.05082333]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 504
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 196
Node /15 input 0: size torch.Size([100]) unstable 5
-----------------
# of unstable neurons: 705
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 76] 
split level 1: [/input-8, 1820] 
split level 2: [/input-8, 531] 
split level 3: [/input-8, 1890] 
split level 4: [/input-8, 1819] 
split level 5: [/input-8, 1876] 
split level 6: [/input-8, 1945] 
split level 7: [/input-8, 1889] 
pruning_in_iteration open status: True
ratio of positive domain = 137 / 256 = 0.53515625
pruning-in-iteration extra time: 0.004772663116455078
Time: prepare 0.0030    bound 0.4740    transfer 0.0025    finalize 0.0013    func 0.4810    
Accumulated time: func 0.4810    prepare 0.0034    bound 0.4740    transfer 0.0025    finalize 0.0013    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02992 (8), -0.02894 (8), -0.02858 (8), -0.02652 (8), -0.02642 (8), -0.02601 (8), -0.02544 (8), -0.02512 (8), -0.02491 (8), -0.02448 (8), -0.02442 (8), -0.02430 (8), -0.02344 (8), -0.02307 (8), -0.02305 (8), -0.02279 (8), -0.02261 (8), -0.02229 (8), -0.02209 (8), -0.02203 (8), 
Length of domains: 119
Time: pickout 0.0004    decision 0.0218    set_bounds 0.0168    solve 0.4810    add 0.0125    
Accumulated time: pickout 0.0004    decision 0.0218    set_bounds 0.0168    solve 0.4810    add 0.0125    
Current (lb-rhs): -0.02991783618927002
119 domains visited
Cumulative time: 0.5369694232940674

BaB round 2
batch: 119
splitting decisions: 
split level 0: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
pruning_in_iteration open status: True
ratio of positive domain = 122 / 238 = 0.5126050420168067
pruning-in-iteration extra time: 0.004302978515625
Time: prepare 0.0053    bound 0.1189    transfer 0.0023    finalize 0.0011    func 0.1276    
Accumulated time: func 0.6086    prepare 0.0089    bound 0.5930    transfer 0.0049    finalize 0.0024    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02845 (9), -0.02750 (9), -0.02712 (9), -0.02503 (9), -0.02496 (9), -0.02454 (9), -0.02400 (9), -0.02366 (9), -0.02346 (9), -0.02300 (9), -0.02285 (9), -0.02273 (9), -0.02199 (9), -0.02159 (9), -0.02142 (9), -0.02131 (9), -0.02091 (9), -0.02060 (9), -0.02048 (9), -0.02042 (9), 
Length of domains: 116
Time: pickout 0.0018    decision 0.1261    set_bounds 0.0057    solve 0.1277    add 0.0011    
Accumulated time: pickout 0.0022    decision 0.1480    set_bounds 0.0225    solve 0.6087    add 0.0137    
Current (lb-rhs): -0.028451085090637207
235 domains visited
Cumulative time: 0.7999413013458252

BaB round 3
batch: 116
splitting decisions: 
split level 0: [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] 
pruning_in_iteration open status: True
ratio of positive domain = 56 / 232 = 0.24137931034482762
pruning-in-iteration extra time: 0.004047393798828125
Time: prepare 0.0049    bound 0.1295    transfer 0.0007    finalize 0.0012    func 0.1363    
Accumulated time: func 0.7449    prepare 0.0140    bound 0.7225    transfer 0.0055    finalize 0.0036    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02798 (10), -0.02714 (10), -0.02667 (10), -0.02465 (10), -0.02451 (10), -0.02408 (10), -0.02366 (10), -0.02322 (10), -0.02312 (10), -0.02255 (10), -0.02238 (10), -0.02165 (10), -0.02158 (10), -0.02121 (10), -0.02085 (10), -0.02078 (10), -0.02009 (10), -0.01995 (10), -0.01992 (10), -0.01984 (10), 
Length of domains: 176
Time: pickout 0.0016    decision 0.0163    set_bounds 0.0047    solve 0.1364    add 0.0011    
Accumulated time: pickout 0.0038    decision 0.1642    set_bounds 0.0271    solve 0.7451    add 0.0148    
Current (lb-rhs): -0.027983903884887695
411 domains visited
Cumulative time: 0.9602682590484619

BaB round 4
batch: 176
splitting decisions: 
split level 0: [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] 
pruning_in_iteration open status: True
ratio of positive domain = 107 / 352 = 0.3039772727272727
pruning-in-iteration extra time: 0.003893136978149414
Time: prepare 0.0072    bound 0.1420    transfer 0.0025    finalize 0.0018    func 0.1535    
Accumulated time: func 0.8985    prepare 0.0213    bound 0.8644    transfer 0.0081    finalize 0.0054    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02724 (11), -0.02640 (11), -0.02593 (11), -0.02388 (11), -0.02377 (11), -0.02334 (11), -0.02294 (11), -0.02250 (11), -0.02241 (11), -0.02183 (11), -0.02161 (11), -0.02097 (11), -0.02092 (11), -0.02048 (11), -0.02012 (11), -0.01984 (11), -0.01958 (11), -0.01907 (11), -0.01902 (11), -0.01899 (11), 
Length of domains: 245
Time: pickout 0.0023    decision 0.0196    set_bounds 0.0075    solve 0.1536    add 0.0013    
Accumulated time: pickout 0.0060    decision 0.1838    set_bounds 0.0347    solve 0.8987    add 0.0161    
Current (lb-rhs): -0.027242302894592285
656 domains visited
Cumulative time: 1.1452250480651855

BaB round 5
batch: 245
splitting decisions: 
split level 0: [/input-8, 1877] [/input, 1992] [/input-8, 1877] [/input, 1992] [/input, 1941] [/input, 1941] [/input, 1941] [/input, 1941] [/input-8, 1877] [/input, 1992] 
pruning_in_iteration open status: False
ratio of positive domain = 95 / 490 = 0.19387755102040816
pruning-in-iteration extra time: 7.009506225585938e-05
Time: prepare 0.0111    bound 0.0987    transfer 0.0027    finalize 0.0025    func 0.1151    
Accumulated time: func 1.0135    prepare 0.0326    bound 0.9631    transfer 0.0108    finalize 0.0078    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02587 (12), -0.02508 (12), -0.02499 (12), -0.02387 (12), -0.02372 (12), -0.02319 (12), -0.02305 (12), -0.02239 (12), -0.02226 (12), -0.02169 (12), -0.02152 (12), -0.02128 (12), -0.02125 (12), -0.02076 (12), -0.02072 (12), -0.02041 (12), -0.02012 (12), -0.01974 (12), -0.01970 (12), -0.01963 (12), 
Length of domains: 393
Time: pickout 0.0030    decision 0.0230    set_bounds 0.0078    solve 0.1152    add 0.0037    
Accumulated time: pickout 0.0090    decision 0.2068    set_bounds 0.0425    solve 1.0139    add 0.0198    
Current (lb-rhs): -0.02586948871612549
1049 domains visited
Cumulative time: 1.2984561920166016

BaB round 6
batch: 393
splitting decisions: 
split level 0: [/input, 1992] [/input-8, 1877] [/input, 1992] [/input-8, 1877] [/input-8, 1877] [/input, 1992] [/input-8, 1877] [/input, 1992] [/input, 1992] [/input-8, 1877] 
pruning_in_iteration open status: False
ratio of positive domain = 143 / 786 = 0.18193384223918574
pruning-in-iteration extra time: 7.510185241699219e-05
Time: prepare 0.0187    bound 0.0982    transfer 0.0050    finalize 0.0039    func 0.1259    
Accumulated time: func 1.1394    prepare 0.0515    bound 1.0613    transfer 0.0158    finalize 0.0118    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02502 (13), -0.02415 (13), -0.02388 (13), -0.02368 (13), -0.02300 (13), -0.02282 (13), -0.02248 (13), -0.02245 (13), -0.02235 (13), -0.02185 (13), -0.02170 (13), -0.02137 (13), -0.02119 (13), -0.02107 (13), -0.02094 (13), -0.02049 (13), -0.02044 (13), -0.02040 (13), -0.02036 (13), -0.02032 (13), 
Length of domains: 636
Time: pickout 0.0046    decision 0.0311    set_bounds 0.0138    solve 0.1260    add 0.0031    
Accumulated time: pickout 0.0136    decision 0.2379    set_bounds 0.0563    solve 1.1399    add 0.0229    
Current (lb-rhs): -0.02502262592315674
1685 domains visited
Cumulative time: 1.477933645248413

BaB round 7
batch: 636
splitting decisions: 
split level 0: [/input-8, 1969] [/input-8, 1893] [/input-8, 1969] [/input-8, 1969] [/input, 1992] [/input-8, 1877] [/input, 1992] [/input-8, 1877] [/input-8, 1893] [/input-8, 1893] 
pruning_in_iteration open status: False
ratio of positive domain = 200 / 1272 = 0.1572327044025157
pruning-in-iteration extra time: 7.534027099609375e-05
Time: prepare 0.0301    bound 0.1085    transfer 0.0064    finalize 0.0071    func 0.1527    
Accumulated time: func 1.2921    prepare 0.0817    bound 1.1698    transfer 0.0222    finalize 0.0189    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02382 (14), -0.02295 (14), -0.02240 (14), -0.02240 (14), -0.02239 (14), -0.02228 (14), -0.02180 (14), -0.02165 (14), -0.02159 (14), -0.02156 (14), -0.02155 (14), -0.02115 (14), -0.02110 (14), -0.02087 (14), -0.02045 (14), -0.02043 (14), -0.02034 (14), -0.02014 (14), -0.02003 (14), -0.02000 (14), 
Length of domains: 1065
Time: pickout 0.0075    decision 0.0445    set_bounds 0.0248    solve 0.1528    add 0.0149    
Accumulated time: pickout 0.0212    decision 0.2823    set_bounds 0.0811    solve 1.2927    add 0.0378    
Current (lb-rhs): -0.02382481098175049
2750 domains visited
Cumulative time: 1.7239084243774414

BaB round 8
batch: 1065
splitting decisions: 
split level 0: [/input-8, 1893] [/input-8, 1969] [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1893] 
pruning_in_iteration open status: False
ratio of positive domain = 392 / 2130 = 0.18403755868544602
pruning-in-iteration extra time: 0.00011038780212402344
Time: prepare 0.0516    bound 0.1265    transfer 0.0133    finalize 0.0118    func 0.2033    
Accumulated time: func 1.4953    prepare 0.1335    bound 1.2963    transfer 0.0355    finalize 0.0307    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02306 (15), -0.02219 (15), -0.02163 (15), -0.02156 (15), -0.02152 (15), -0.02151 (15), -0.02104 (15), -0.02102 (15), -0.02089 (15), -0.02072 (15), -0.02068 (15), -0.02039 (15), -0.02020 (15), -0.02018 (15), -0.01999 (15), -0.01995 (15), -0.01994 (15), -0.01987 (15), -0.01963 (15), -0.01962 (15), 
Length of domains: 1713
Time: pickout 0.0130    decision 0.0664    set_bounds 0.0391    solve 0.2036    add 0.0086    
Accumulated time: pickout 0.0342    decision 0.3487    set_bounds 0.1203    solve 1.4963    add 0.0464    
Current (lb-rhs): -0.023059487342834473
4463 domains visited
Cumulative time: 2.0580201148986816

BaB round 9
batch: 1713
splitting decisions: 
split level 0: [/input, 1912] [/input-8, 802] [/input, 1891] [/input-8, 1969] [/input, 421] [/input, 421] [/input, 1941] [/input, 1941] [/input, 1941] [/input, 1941] 
pruning_in_iteration open status: False
ratio of positive domain = 549 / 3426 = 0.16024518388791598
pruning-in-iteration extra time: 5.888938903808594e-05
Time: prepare 0.0827    bound 0.1765    transfer 0.0162    finalize 0.0182    func 0.4382    
Accumulated time: func 1.9335    prepare 0.2165    bound 1.4728    transfer 0.0517    finalize 0.0489    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02265 (16), -0.02178 (16), -0.02118 (16), -0.02110 (16), -0.02106 (16), -0.02081 (16), -0.02070 (16), -0.02066 (16), -0.02061 (16), -0.02026 (16), -0.02021 (16), -0.02012 (16), -0.02001 (16), -0.02000 (16), -0.01993 (16), -0.01976 (16), -0.01969 (16), -0.01966 (16), -0.01945 (16), -0.01939 (16), 
Length of domains: 2852
Time: pickout 0.0235    decision 0.1005    set_bounds 0.0662    solve 0.4387    add 0.0312    
Accumulated time: pickout 0.0577    decision 0.4492    set_bounds 0.1865    solve 1.9350    add 0.0776    
Current (lb-rhs): -0.022649288177490234
7315 domains visited
Cumulative time: 2.7223944664001465

BaB round 10
batch: 2852
splitting decisions: 
split level 0: [/input-8, 802] [/input, 1977] [/input, 1977] [/input-8, 1893] [/input-8, 1893] [/input-8, 802] [/input-8, 802] [/input-8, 802] [/input-8, 802] [/input-8, 1893] 
pruning_in_iteration open status: False
ratio of positive domain = 1040 / 5704 = 0.18232819074333806
pruning-in-iteration extra time: 6.0558319091796875e-05
Time: prepare 0.1398    bound 0.2653    transfer 0.0311    finalize 0.0313    func 0.4680    
Accumulated time: func 2.4016    prepare 0.3565    bound 1.7382    transfer 0.0828    finalize 0.0802    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02115 (17), -0.02104 (17), -0.02029 (17), -0.02017 (17), -0.01995 (17), -0.01983 (17), -0.01969 (17), -0.01966 (17), -0.01958 (17), -0.01947 (17), -0.01941 (17), -0.01935 (17), -0.01918 (17), -0.01918 (17), -0.01910 (17), -0.01907 (17), -0.01906 (17), -0.01899 (17), -0.01898 (17), -0.01890 (17), 
Length of domains: 4639
Time: pickout 0.0356    decision 0.1604    set_bounds 0.1110    solve 0.4688    add 0.0580    
Accumulated time: pickout 0.0932    decision 0.6097    set_bounds 0.2975    solve 2.4038    add 0.1356    
Current (lb-rhs): -0.02115333080291748
11954 domains visited
Cumulative time: 3.5637619495391846

BaB round 11
batch: 4096
splitting decisions: 
split level 0: [/input-8, 802] [/input, 1891] [/input, 1977] [/input, 1977] [/input-8, 802] [/input-8, 802] [/input, 1977] [/input, 1977] [/input-8, 802] [/input, 1891] 
pruning_in_iteration open status: True
ratio of positive domain = 1720 / 8192 = 0.2099609375
pruning-in-iteration extra time: 0.0008287429809570312
Time: prepare 0.2116    bound 0.3607    transfer 0.0455    finalize 0.0480    func 0.6664    
Accumulated time: func 3.0679    prepare 0.5684    bound 2.0989    transfer 0.1282    finalize 0.1281    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02115 (17), -0.02029 (17), -0.02021 (18), -0.01947 (17), -0.01937 (18), -0.01936 (18), -0.01929 (18), -0.01918 (17), -0.01912 (18), -0.01912 (18), -0.01886 (18), -0.01884 (18), -0.01875 (18), -0.01866 (17), -0.01860 (18), -0.01860 (18), -0.01857 (18), -0.01853 (17), -0.01852 (17), -0.01851 (18), 
Length of domains: 7015
Time: pickout 0.0529    decision 0.3485    set_bounds 0.1627    solve 0.6677    add 0.0228    
Accumulated time: pickout 0.1462    decision 0.9582    set_bounds 0.4603    solve 3.0715    add 0.1583    
Current (lb-rhs): -0.02115333080291748
18426 domains visited
current_vram/total_varm: 9.6GB/99.9GB, batch_size increase to 8192
Cumulative time: 4.830443620681763

BaB round 12
batch: 7015
splitting decisions: 
split level 0: [/input, 1978] [/input, 1978] [/input-8, 802] [/input, 1912] [/input, 2712] [/input, 421] [/input, 1977] [/input-8, 802] [/input-8, 802] [/input-8, 802] 
pruning_in_iteration open status: True
ratio of positive domain = 3409 / 14030 = 0.24297933000712757
pruning-in-iteration extra time: 0.004436969757080078
Time: prepare 0.3644    bound 0.5384    transfer 0.0793    finalize 0.2364    func 1.2195    
Accumulated time: func 4.2875    prepare 0.9331    bound 2.6373    transfer 0.2076    finalize 0.3646    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02031 (18), -0.01966 (19), -0.01948 (18), -0.01923 (18), -0.01884 (19), -0.01882 (19), -0.01876 (19), -0.01871 (18), -0.01855 (19), -0.01833 (19), -0.01830 (18), -0.01827 (19), -0.01823 (19), -0.01822 (19), -0.01819 (18), -0.01807 (19), -0.01802 (19), -0.01802 (18), -0.01799 (19), -0.01798 (19), 
Length of domains: 10621
Time: pickout 0.0936    decision 0.5372    set_bounds 0.2821    solve 1.2217    add 0.1083    
Accumulated time: pickout 0.2398    decision 1.4953    set_bounds 0.7424    solve 4.2932    add 0.2666    
Current (lb-rhs): -0.020314693450927734
29047 domains visited
Cumulative time: 7.098440647125244

BaB round 13
batch: 8192
splitting decisions: 
split level 0: [/input, 421] [/input-8, 1309] [/input-8, 1309] [/input, 1978] [/input, 1978] [/input-8, 1309] [/input-8, 1309] [/input-8, 802] [/input-8, 1309] [/input-8, 1309] 
pruning_in_iteration open status: True
ratio of positive domain = 5224 / 16384 = 0.31884765625
pruning-in-iteration extra time: 0.004683256149291992
Time: prepare 0.4191    bound 0.5746    transfer 0.0892    finalize 0.0925    func 1.1766    
Accumulated time: func 5.4641    prepare 1.3525    bound 3.2119    transfer 0.2967    finalize 0.4571    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01977 (19), -0.01933 (20), -0.01923 (18), -0.01894 (19), -0.01849 (20), -0.01848 (20), -0.01840 (20), -0.01835 (19), -0.01819 (18), -0.01802 (18), -0.01797 (20), -0.01796 (18), -0.01787 (20), -0.01785 (19), -0.01775 (20), -0.01772 (19), -0.01770 (20), -0.01767 (20), -0.01765 (20), -0.01762 (20), 
Length of domains: 13589
Time: pickout 0.1145    decision 0.4488    set_bounds 0.4851    solve 1.3791    add 0.0368    
Accumulated time: pickout 0.3543    decision 1.9441    set_bounds 1.2275    solve 5.6723    add 0.3034    
Current (lb-rhs): -0.019774198532104492
40207 domains visited
current_vram/total_varm: 21.9GB/99.9GB, batch_size increase to 16384
Cumulative time: 9.591929912567139

BaB round 14
batch: 13589
splitting decisions: 
split level 0: [/input, 1941] [/input-8, 1309] [/input, 1977] [/input, 1977] [/input, 1977] [/input, 1978] [/input, 2712] [/input, 1977] [/input, 1977] [/input, 1977] 
pruning_in_iteration open status: True
ratio of positive domain = 8637 / 27178 = 0.3177938038119067
pruning-in-iteration extra time: 0.004927635192871094
Time: prepare 0.7201    bound 0.9165    transfer 0.1541    finalize 0.3779    func 2.1701    
Accumulated time: func 7.6342    prepare 2.0729    bound 4.1284    transfer 0.4509    finalize 0.8350    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01943 (20), -0.01867 (19), -0.01860 (20), -0.01839 (21), -0.01814 (21), -0.01807 (21), -0.01796 (21), -0.01777 (21), -0.01768 (20), -0.01761 (19), -0.01751 (20), -0.01749 (19), -0.01740 (21), -0.01734 (21), -0.01731 (19), -0.01722 (19), -0.01720 (21), -0.01719 (20), -0.01705 (21), -0.01703 (21), 
Length of domains: 18541
Time: pickout 0.1963    decision 0.9417    set_bounds 0.5875    solve 2.1756    add 0.2123    
Accumulated time: pickout 0.5506    decision 2.8857    set_bounds 1.8150    solve 7.8479    add 0.5157    
Current (lb-rhs): -0.019434213638305664
58748 domains visited
Cumulative time: 13.755395412445068

BaB round 15
batch: 16384
splitting decisions: 
split level 0: [/input, 1978] [/input, 1978] [/input, 2712] [/input, 2712] [/input, 1955] [/input, 1978] [/input, 1978] [/input, 2712] [/input, 2712] [/input, 1978] 
pruning_in_iteration open status: True
ratio of positive domain = 10232 / 32768 = 0.312255859375
pruning-in-iteration extra time: 0.005309104919433594
Time: prepare 0.8752    bound 1.0899    transfer 0.1768    finalize 0.4572    func 2.6007    
Accumulated time: func 10.2349    prepare 2.9484    bound 5.2183    transfer 0.6276    finalize 1.2922    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01849 (21), -0.01808 (20), -0.01787 (21), -0.01786 (22), -0.01766 (21), -0.01732 (22), -0.01732 (21), -0.01725 (22), -0.01723 (22), -0.01722 (19), -0.01709 (20), -0.01703 (21), -0.01703 (22), -0.01696 (20), -0.01692 (20), -0.01675 (22), -0.01670 (22), -0.01668 (22), -0.01665 (22), -0.01657 (21), 
Length of domains: 24693
Time: pickout 0.2482    decision 1.6765    set_bounds 0.9179    solve 2.6066    add 0.0747    
Accumulated time: pickout 0.7988    decision 4.5623    set_bounds 2.7329    solve 10.4545    add 0.5904    
Current (lb-rhs): -0.018491029739379883
81284 domains visited
current_vram/total_varm: 33.1GB/99.9GB, batch_size increase to 32768
Cumulative time: 19.342084646224976

BaB round 16
batch: 24693
splitting decisions: 
split level 0: [/input-8, 1309] [/input, 1941] [/input-8, 1309] [/input, 1978] [/input-8, 1309] [/input-8, 1309] [/input, 2712] [/input, 2712] [/input, 1978] [/input-8, 1309] 
pruning_in_iteration open status: True
ratio of positive domain = 13077 / 49386 = 0.26479164135584987
pruning-in-iteration extra time: 0.0051038265228271484
Time: prepare 1.3194    bound 1.7111    transfer 0.2788    finalize 0.5927    func 3.9044    
Accumulated time: func 14.1393    prepare 4.2682    bound 6.9294    transfer 0.9064    finalize 1.8850    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01794 (22), -0.01730 (22), -0.01712 (21), -0.01710 (22), -0.01705 (23), -0.01673 (22), -0.01658 (20), -0.01645 (21), -0.01644 (22), -0.01642 (23), -0.01641 (23), -0.01639 (23), -0.01639 (21), -0.01626 (21), -0.01621 (23), -0.01619 (23), -0.01601 (22), -0.01599 (21), -0.01593 (22), -0.01589 (22), 
Length of domains: 36309
Time: pickout 0.3869    decision 2.4996    set_bounds 1.3443    solve 3.9133    add 0.4036    
Accumulated time: pickout 1.1856    decision 7.0619    set_bounds 4.0771    solve 14.3678    add 0.9940    
Current (lb-rhs): -0.01793539524078369
117593 domains visited
Cumulative time: 27.98076105117798

BaB round 17
batch: 32768
splitting decisions: 
split level 0: [/input, 2441] [/input, 2441] [/input, 1979] [/input, 1912] [/input, 1978] [/input, 1979] [/input, 1955] [/input-8, 1957] [/input, 1978] [/input, 1979] 
pruning_in_iteration open status: True
ratio of positive domain = 17026 / 65536 = 0.259796142578125
pruning-in-iteration extra time: 0.005491018295288086
Time: prepare 1.7612    bound 2.7602    transfer 0.3543    finalize 0.7315    func 5.6099    
Accumulated time: func 19.7492    prepare 6.0298    bound 9.6896    transfer 1.2607    finalize 2.6165    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01716 (23), -0.01677 (22), -0.01665 (23), -0.01651 (23), -0.01639 (23), -0.01632 (23), -0.01627 (24), -0.01609 (22), -0.01602 (23), -0.01592 (22), -0.01589 (21), -0.01583 (23), -0.01576 (23), -0.01575 (24), -0.01566 (23), -0.01565 (22), -0.01563 (24), -0.01560 (23), -0.01556 (22), -0.01553 (23), 
Length of domains: 52051
Time: pickout 0.5218    decision 3.6015    set_bounds 1.7714    solve 6.0024    add 0.1592    
Accumulated time: pickout 1.7075    decision 10.6634    set_bounds 5.8486    solve 20.3702    add 1.1532    
Current (lb-rhs): -0.01716029644012451
166103 domains visited
Cumulative time: 40.15273714065552

BaB round 18
batch: 32768
splitting decisions: 
split level 0: [/input, 1979] [/input-8, 1957] [/input, 1891] [/input, 1912] [/input, 1972] [/input-8, 1908] [/input-8, 1957] [/input, 1972] [/input-8, 1908] [/input-8, 1705] 
pruning_in_iteration open status: True
ratio of positive domain = 21379 / 65536 = 0.3262176513671875
pruning-in-iteration extra time: 0.005339145660400391
Time: prepare 1.7620    bound 2.6027    transfer 0.3589    finalize 0.8897    func 5.6165    
Accumulated time: func 25.3657    prepare 7.7922    bound 12.2923    transfer 1.6196    finalize 3.5061    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01677 (22), -0.01665 (23), -0.01647 (24), -0.01639 (23), -0.01592 (22), -0.01583 (23), -0.01582 (24), -0.01565 (22), -0.01563 (24), -0.01560 (23), -0.01553 (24), -0.01553 (23), -0.01552 (22), -0.01552 (25), -0.01550 (24), -0.01547 (23), -0.01530 (24), -0.01528 (23), -0.01509 (22), -0.01504 (24), 
Length of domains: 63440
Time: pickout 0.5551    decision 3.3389    set_bounds 1.8919    solve 5.6285    add 0.1458    
Accumulated time: pickout 2.2625    decision 14.0023    set_bounds 7.7405    solve 25.9987    add 1.2990    
Current (lb-rhs): -0.016768693923950195
210260 domains visited
Cumulative time: 51.84123635292053

BaB round 19
batch: 32768
splitting decisions: 
split level 0: [/input-8, 1957] [/input, 1972] [/input, 1972] [/input, 2024] [/input, 1979] [/input, 2024] [/input-8, 1957] [/input, 1972] [/input, 1979] [/input-8, 1957] 
pruning_in_iteration open status: True
ratio of positive domain = 22790 / 65536 = 0.347747802734375
pruning-in-iteration extra time: 0.005339145660400391
Time: prepare 1.7787    bound 2.5482    transfer 0.3539    finalize 0.9855    func 5.6692    
Accumulated time: func 31.0348    prepare 9.5712    bound 14.8406    transfer 1.9735    finalize 4.4916    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01677 (22), -0.01665 (23), -0.01639 (23), -0.01602 (25), -0.01592 (22), -0.01583 (23), -0.01565 (22), -0.01560 (23), -0.01553 (23), -0.01550 (24), -0.01547 (23), -0.01545 (25), -0.01535 (25), -0.01510 (26), -0.01509 (22), -0.01505 (25), -0.01492 (23), -0.01490 (24), -0.01490 (23), -0.01489 (23), 
Length of domains: 73418
Time: pickout 0.5644    decision 3.4161    set_bounds 1.9966    solve 5.6815    add 16.1847    
Accumulated time: pickout 2.8269    decision 17.4184    set_bounds 9.7371    solve 31.6802    add 17.4838    
Current (lb-rhs): -0.016768693923950195
253006 domains visited
Cumulative time: 79.84507250785828

BaB round 20
batch: 32768
splitting decisions: 
split level 0: [/input, 1979] [/input, 2024] [/input, 1972] [/input, 2024] [/input, 1972] [/input-8, 1957] [/input, 1972] [/input, 2024] [/input, 1972] [/input, 1979] 
pruning_in_iteration open status: True
ratio of positive domain = 23543 / 65536 = 0.3592376708984375
pruning-in-iteration extra time: 0.0054569244384765625
Time: prepare 1.7922    bound 2.5225    transfer 0.3530    finalize 0.4104    func 5.0809    
Accumulated time: func 36.1157    prepare 11.3638    bound 17.3631    transfer 2.3265    finalize 4.9020    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01677 (22), -0.01665 (23), -0.01639 (23), -0.01592 (22), -0.01583 (23), -0.01565 (22), -0.01560 (23), -0.01555 (26), -0.01553 (23), -0.01550 (24), -0.01547 (23), -0.01509 (22), -0.01505 (25), -0.01500 (26), -0.01492 (23), -0.01490 (24), -0.01490 (23), -0.01489 (23), -0.01489 (26), -0.01483 (23), 
Length of domains: 82643
Time: pickout 0.5836    decision 3.5640    set_bounds 2.1819    solve 5.0939    add 0.1302    
Accumulated time: pickout 3.4105    decision 20.9824    set_bounds 11.9190    solve 36.7741    add 17.6139    
Current (lb-rhs): -0.016768693923950195
294999 domains visited
Cumulative time: 91.55320835113525

BaB round 21
batch: 32768
splitting decisions: 
split level 0: [/input, 1972] [/input, 1972] [/input, 2024] [/input, 1972] [/input, 1972] [/input-8, 1957] [/input, 1972] [/input, 1972] [/input, 2024] [/input-8, 1957] 
pruning_in_iteration open status: True
ratio of positive domain = 22210 / 65536 = 0.338897705078125
pruning-in-iteration extra time: 0.0062046051025390625
Time: prepare 1.8542    bound 2.5788    transfer 0.3585    finalize 1.2233    func 6.0173    
Accumulated time: func 42.1330    prepare 13.2184    bound 19.9419    transfer 2.6850    finalize 6.1253    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01677 (22), -0.01665 (23), -0.01639 (23), -0.01592 (22), -0.01583 (23), -0.01565 (22), -0.01560 (23), -0.01555 (26), -0.01553 (23), -0.01550 (24), -0.01547 (23), -0.01509 (22), -0.01505 (25), -0.01492 (23), -0.01490 (24), -0.01490 (23), -0.01489 (23), -0.01483 (23), -0.01466 (24), -0.01464 (23), 
Length of domains: 93201
Time: pickout 0.5939    decision 4.1083    set_bounds 2.3581    solve 6.0311    add 0.1570    
Accumulated time: pickout 4.0044    decision 25.0907    set_bounds 14.2771    solve 42.8052    add 17.7709    
Current (lb-rhs): -0.016768693923950195
338325 domains visited
Cumulative time: 104.98860502243042

BaB round 22
batch: 32768
splitting decisions: 
split level 0: [/input, 2773] [/input, 1972] [/input, 2460] [/input-8, 1908] [/input, 1972] [/input, 1972] [/input, 1972] [/input, 1972] [/input, 2773] [/input, 1972] 
pruning_in_iteration open status: True
ratio of positive domain = 20756 / 65536 = 0.31671142578125
pruning-in-iteration extra time: 0.006278514862060547
Time: prepare 1.8460    bound 2.6369    transfer 0.3534    finalize 0.4590    func 5.2984    
Accumulated time: func 47.4315    prepare 15.0649    bound 22.5788    transfer 3.0383    finalize 6.5843    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01677 (22), -0.01665 (23), -0.01639 (23), -0.01592 (22), -0.01583 (23), -0.01565 (22), -0.01560 (23), -0.01555 (26), -0.01553 (23), -0.01550 (24), -0.01547 (23), -0.01509 (22), -0.01505 (25), -0.01492 (23), -0.01490 (24), -0.01490 (23), -0.01489 (23), -0.01483 (23), -0.01466 (24), -0.01464 (23), 
Length of domains: 105213
Time: pickout 0.6178    decision 3.8356    set_bounds 2.5018    solve 5.3155    add 0.1360    
Accumulated time: pickout 4.6222    decision 28.9263    set_bounds 16.7789    solve 48.1207    add 17.9069    
Current (lb-rhs): -0.016768693923950195
383105 domains visited
Cumulative time: 117.56621360778809

BaB round 23
batch: 32768
splitting decisions: 
split level 0: [/input, 1972] [/input, 1972] [/input, 2441] [/input, 421] [/input, 2441] [/input-8, 1957] [/input-8, 1957] [/input, 2024] [/input-8, 1705] [/input, 1972] 
pruning_in_iteration open status: True
ratio of positive domain = 22033 / 65536 = 0.3361968994140625
pruning-in-iteration extra time: 0.006425619125366211
Time: prepare 1.8410    bound 2.5857    transfer 0.3560    finalize 1.4761    func 6.2617    
Accumulated time: func 53.6932    prepare 16.9064    bound 25.1645    transfer 3.3944    finalize 8.0604    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01677 (22), -0.01665 (23), -0.01639 (23), -0.01592 (22), -0.01583 (23), -0.01565 (22), -0.01560 (23), -0.01555 (26), -0.01553 (23), -0.01550 (24), -0.01547 (23), -0.01509 (22), -0.01505 (25), -0.01492 (23), -0.01490 (24), -0.01490 (23), -0.01489 (23), -0.01483 (23), -0.01466 (24), -0.01464 (23), 
Length of domains: 115948
Time: pickout 0.6603    decision 4.4093    set_bounds 2.5298    solve 6.2758    add 0.1272    
Accumulated time: pickout 5.2825    decision 33.3356    set_bounds 19.3087    solve 54.3965    add 18.0341    
Current (lb-rhs): -0.016768693923950195
426608 domains visited
Cumulative time: 131.76601338386536

BaB round 24
batch: 32768
splitting decisions: 
split level 0: [/input, 1972] [/input, 2773] [/input, 2773] [/input, 2773] [/input, 2773] [/input, 2773] [/input-8, 1705] [/input-8, 1908] [/input, 2773] [/input, 2460] 
pruning_in_iteration open status: True
ratio of positive domain = 24431 / 65536 = 0.3727874755859375
pruning-in-iteration extra time: 0.006160259246826172
Time: prepare 1.8845    bound 2.4959    transfer 0.3757    finalize 1.5706    func 6.3293    
Accumulated time: func 60.0225    prepare 18.7914    bound 27.6604    transfer 3.7701    finalize 9.6310    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01677 (22), -0.01665 (23), -0.01639 (23), -0.01592 (22), -0.01583 (23), -0.01565 (22), -0.01560 (23), -0.01555 (26), -0.01553 (23), -0.01550 (24), -0.01547 (23), -0.01509 (22), -0.01505 (25), -0.01492 (23), -0.01490 (24), -0.01490 (23), -0.01489 (23), -0.01483 (23), -0.01466 (24), -0.01464 (23), 
Length of domains: 124285
Time: pickout 0.6861    decision 3.4203    set_bounds 2.7170    solve 6.3432    add 0.1703    
Accumulated time: pickout 5.9687    decision 36.7559    set_bounds 22.0256    solve 60.7397    add 18.2044    
Current (lb-rhs): -0.016768693923950195
467713 domains visited
Cumulative time: 145.29361128807068

BaB round 25
batch: 32768
splitting decisions: 
split level 0: [/input, 1891] [/input-8, 797] [/input-8, 797] [/input, 1978] [/input-8, 797] [/input, 1978] [/input-8, 797] [/input-8, 797] [/input-8, 797] [/input-8, 797] 
pruning_in_iteration open status: True
ratio of positive domain = 25401 / 65536 = 0.3875885009765625
pruning-in-iteration extra time: 0.0060482025146484375
Time: prepare 1.8767    bound 2.4634    transfer 0.3866    finalize 1.6575    func 6.3875    
Accumulated time: func 66.4100    prepare 20.6686    bound 30.1239    transfer 4.1566    finalize 11.2885    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01677 (22), -0.01665 (23), -0.01639 (23), -0.01592 (22), -0.01583 (23), -0.01565 (22), -0.01560 (23), -0.01555 (26), -0.01553 (23), -0.01550 (24), -0.01547 (23), -0.01509 (22), -0.01505 (25), -0.01492 (23), -0.01490 (24), -0.01490 (23), -0.01489 (23), -0.01483 (23), -0.01466 (24), -0.01464 (23), 
Length of domains: 131652
Time: pickout 0.6579    decision 3.4120    set_bounds 2.8190    solve 6.4012    add 0.1601    
Accumulated time: pickout 6.6265    decision 40.1679    set_bounds 24.8446    solve 67.1408    add 18.3646    
Current (lb-rhs): -0.016768693923950195
507848 domains visited
Cumulative time: 158.95530080795288

BaB round 26
batch: 32768
splitting decisions: 
split level 0: [/input, 2005] [/input, 1978] [/input-8, 1705] [/input, 2451] [/input, 1978] [/input-8, 797] [/input, 1978] [/input, 166] [/input, 1978] [/input-8, 1705] 
pruning_in_iteration open status: True
ratio of positive domain = 22944 / 65536 = 0.35009765625
pruning-in-iteration extra time: 0.006165027618408203
Time: prepare 1.8599    bound 2.5552    transfer 0.4003    finalize 0.4875    func 5.3056    
Accumulated time: func 71.7156    prepare 22.5289    bound 32.6791    transfer 4.5569    finalize 11.7760    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01677 (22), -0.01665 (23), -0.01639 (23), -0.01592 (22), -0.01583 (23), -0.01565 (22), -0.01560 (23), -0.01555 (26), -0.01553 (23), -0.01550 (24), -0.01547 (23), -0.01509 (22), -0.01505 (25), -0.01492 (23), -0.01490 (24), -0.01490 (23), -0.01489 (23), -0.01483 (23), -0.01466 (24), -0.01464 (23), 
Length of domains: 141476
Time: pickout 0.6727    decision 3.4271    set_bounds 2.9980    solve 6.5581    add 0.1756    
Accumulated time: pickout 7.2992    decision 43.5950    set_bounds 27.8426    solve 73.6989    add 18.5402    
Current (lb-rhs): -0.016768693923950195
550440 domains visited
Cumulative time: 172.99904417991638

BaB round 27
batch: 32768
splitting decisions: 
split level 0: [/input-8, 797] [/input-8, 1908] [/input, 2005] [/input-8, 797] [/input-8, 797] [/input-8, 1908] [/input, 1978] [/input-8, 1908] [/input-8, 1705] [/input, 2005] 
pruning_in_iteration open status: True
ratio of positive domain = 20417 / 65536 = 0.3115386962890625
pruning-in-iteration extra time: 0.006113767623901367
Time: prepare 1.8295    bound 2.6533    transfer 0.4147    finalize 0.4733    func 5.3733    
Accumulated time: func 77.0889    prepare 24.3589    bound 35.3324    transfer 4.9716    finalize 12.2493    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01677 (22), -0.01665 (23), -0.01639 (23), -0.01592 (22), -0.01583 (23), -0.01565 (22), -0.01560 (23), -0.01555 (26), -0.01553 (23), -0.01550 (24), -0.01547 (23), -0.01509 (22), -0.01505 (25), -0.01492 (23), -0.01490 (24), -0.01490 (23), -0.01489 (23), -0.01483 (23), -0.01466 (24), -0.01464 (23), 
Length of domains: 153827
Time: pickout 0.6884    decision 3.4228    set_bounds 3.1443    solve 5.3917    add 0.1627    
Accumulated time: pickout 7.9876    decision 47.0178    set_bounds 30.9869    solve 79.0906    add 18.7028    
Current (lb-rhs): -0.016768693923950195
595559 domains visited
Cumulative time: 186.04254126548767

BaB round 28
batch: 32768
splitting decisions: 
split level 0: [/input, 2505] [/input, 2005] [/input, 2505] [/input, 2505] [/input, 2505] [/input, 2505] [/input, 2005] [/input, 2005] [/input, 2005] [/input, 2005] 
pruning_in_iteration open status: True
ratio of positive domain = 20442 / 65536 = 0.311920166015625
pruning-in-iteration extra time: 0.006213665008544922
Time: prepare 1.8722    bound 2.6592    transfer 0.4359    finalize 1.8536    func 6.8240    
Accumulated time: func 83.9129    prepare 26.2317    bound 37.9915    transfer 5.4075    finalize 14.1030    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01677 (22), -0.01665 (23), -0.01639 (23), -0.01592 (22), -0.01583 (23), -0.01565 (22), -0.01560 (23), -0.01555 (26), -0.01553 (23), -0.01550 (24), -0.01547 (23), -0.01509 (22), -0.01505 (25), -0.01492 (23), -0.01490 (24), -0.01490 (23), -0.01489 (23), -0.01483 (23), -0.01466 (24), -0.01464 (23), 
Length of domains: 166153
Time: pickout 0.6924    decision 4.4529    set_bounds 1.6986    solve 6.8389    add 0.3426    
Accumulated time: pickout 8.6800    decision 51.4708    set_bounds 32.6855    solve 85.9295    add 19.0454    
Current (lb-rhs): -0.016768693923950195
640653 domains visited
Time out!!!!!!!!
Result: unknown in 203.0801 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 53, vnnlib ID: 53 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.67231560, -12.31690121,  -9.13868904,  -9.91203594, -10.08119774,
         -10.03050518, -10.11687660,  -9.52802277, -13.05829144, -11.58372593]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [415]; unstable size 415; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 143, 1, 415] with unstable size 142 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 415] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 415] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [142]; unstable size 142; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 142] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.06250882,  1.38609815, -1.36709857, -0.49393952, -0.48505709,
         -0.38832188, -1.14975965,  2.17636299,  0.71444821]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.67231560, -12.31690121,  -9.13868904,  -9.91203594, -10.08119774,
         -10.03050518, -10.11687660,  -9.52802277, -13.05829144, -11.58372593]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.67231464, -12.31690121,  -9.13868713,  -9.91203594, -10.08119774,
          -10.03050327, -10.11687565,  -9.52802277, -13.05829048, -11.58372498],
         [ -9.67231464, -12.31690121,  -9.13868713,  -9.91203594, -10.08119774,
          -10.03050327, -10.11687565,  -9.52802277, -13.05829048, -11.58372498]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44456100, -0.97818851, -0.20483971, -0.03567791, -0.08637238,
          -0.58885288]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0686 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 54, vnnlib ID: 54 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.22662783, -5.64782429, -2.60211635, -3.16177058, -3.14393139,
         -3.25724936, -3.03231645, -2.89354324, -3.41767120, -4.93730450]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [530]; unstable size 530; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 530] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 530] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 530] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 159] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.37045440,  1.62804031, -1.37615538, -0.83468586, -0.86788654,
         -0.74519169, -0.99820888, -1.20427895,  0.93063784]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.22662783, -5.64782429, -2.60211635, -3.16177058, -3.14393139,
         -3.25724936, -3.03231645, -2.89354324, -3.41767120, -4.93730450]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.22662783, -5.64782429, -2.60211611, -3.16177034, -3.14393115,
          -3.25724936, -3.03231645, -2.89354324, -3.41767168, -4.93730497],
         [-4.22662783, -5.64782429, -2.60211611, -3.16177034, -3.14393115,
          -3.25724936, -3.03231645, -2.89354324, -3.41767168, -4.93730497]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.81555557, -0.25590134, -0.27374053, -0.16042233, -0.38535523,
          -0.52412844]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0766 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 55, vnnlib ID: 55 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.00991821, -13.35237980,  -9.67140388, -10.73055935,  -9.20372391,
         -10.78434086,  -8.77386570, -10.62020874, -14.29128361, -13.35895061]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [545]; unstable size 545; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 545] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 545] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 545] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 249] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.56179905, 3.63847423, 0.57008624, 1.61158323, 0.13146019, 1.65996575,
         1.35068655, 4.52710819, 3.71646428]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0624 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 56, vnnlib ID: 56 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.58841896, -12.71182537, -12.23468971, -14.64789867, -12.31371975,
         -14.90933514, -14.82857895, -13.46736908,  -7.97204685, -11.84747696]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [520]; unstable size 520; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 520] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 520] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 520] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 171] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.49318433,  3.10641050,  5.37454414,  3.09507990,  5.62251949,
          5.56271124,  4.11786795, -0.92750764,  2.68375874]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.58841896, -12.71182537, -12.23468971, -14.64789867, -12.31371975,
         -14.90933514, -14.82857895, -13.46736908,  -7.97204685, -11.84747696]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.58841896, -12.71182537, -12.23468971, -14.64789867, -12.31371975,
          -14.90933514, -14.82857895, -13.46736908,  -7.97204685, -11.84747696]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.61637211]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.24920666e+00,  1.67777801e+00,  1.32857168e+00,  ...,
             2.80952454e-01,  1.06349289e-01, -5.23808524e-02],
           [ 9.79365110e-01,  1.39206374e+00,  1.24920666e+00,  ...,
            -1.95237994e-01, -1.79364979e-01, -1.31745934e-01],
           [ 1.28095269e+00,  1.39206374e+00,  9.15873051e-01,  ...,
            -2.06348225e-02,  1.11112073e-02,  2.17460394e-01],
           ...,
           [-4.96825397e-01, -4.80952382e-01, -4.33333218e-01,  ...,
            -4.80952382e-01, -4.96825397e-01, -4.96825397e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.80952382e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.96825397e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01]],

          [[ 1.91626441e+00,  2.06119204e+00,  1.70692456e+00,  ...,
             1.27214205e+00,  1.15942061e+00,  1.06280196e+00],
           [ 1.72302771e+00,  1.88405824e+00,  1.83574903e+00,  ...,
             1.07890511e+00,  1.06280196e+00,  1.04669893e+00],
           [ 1.94847047e+00,  1.91626441e+00,  1.69082153e+00,  ...,
             1.19162667e+00,  1.20772982e+00,  1.30434811e+00],
           ...,
           [-3.22059989e-02, -4.83090580e-02, -3.22059989e-02,  ...,
            -6.44121096e-02, -8.05151686e-02, -8.05151686e-02],
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -3.22059989e-02],
           [-6.44121096e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -1.61029361e-02]],

          [[ 2.10045004e+00,  2.08545780e+00,  1.81559265e+00,  ...,
             1.84557760e+00,  1.80060017e+00,  1.74063015e+00],
           [ 1.96551764e+00,  1.92054021e+00,  1.96551764e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.81559265e+00],
           [ 2.08545780e+00,  1.96551764e+00,  1.96551764e+00,  ...,
             1.95052516e+00,  1.95052516e+00,  1.96551764e+00],
           ...,
           [ 2.11394474e-01,  1.21439442e-01,  1.81409463e-01,  ...,
             2.11394474e-01,  2.11394474e-01,  2.11394474e-01],
           [ 2.26386964e-01,  1.51424453e-01,  1.81409463e-01,  ...,
             2.26386964e-01,  2.26386964e-01,  2.41379470e-01],
           [ 1.81409463e-01,  1.66416958e-01,  1.96401969e-01,  ...,
             1.96401969e-01,  2.11394474e-01,  2.26386964e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0523 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 57, vnnlib ID: 57 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.31217670, -8.42142200, -4.16140318, -3.79582143, -4.46238518,
         -3.77659655, -4.79564857, -4.59870291, -8.33152199, -7.22583532]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [542]; unstable size 542; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 202, 1, 542] with unstable size 201 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 542] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 542] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [201]; unstable size 201; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 201] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 201] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.90671444e+00,  3.71085143e+00,  5.54726124e-02, -9.76629555e-04,
          3.31381559e-01,  5.89845061e-01,  4.14882898e-01,  3.71298981e+00,
          2.61608958e+00]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.31217670, -8.42142200, -4.16140318, -3.79582143, -4.46238518,
         -3.77659655, -4.79564857, -4.59870291, -8.33152199, -7.22583532]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.08it/s]100%|██████████| 1/1 [00:00<00:00,  9.07it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.24166107, -8.22013760, -4.23363972, -3.89632154, -4.55042458,
          -3.89160490, -4.79965591, -4.76971054, -8.16572952, -7.05139542]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00471663]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1131 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.498357772827148
alpha/beta optimization time: 1.1122605800628662
initial alpha-crown bounds: tensor([[ 2.93031216e+00,  3.74855924e+00,  6.38692379e-02, -3.64601612e-04,
          3.41101885e-01,  5.96957803e-01,  4.24151421e-01,  3.74315929e+00,
          2.65061140e+00]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.00036460161209106445
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.7404637336731
Verifying property 0 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.930312156677246.

Properties batch 1, size 1
Remaining timeout: 198.59312438964844
Verifying property 1 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.7485592365264893.

Properties batch 2, size 1
Remaining timeout: 198.4980456829071
Verifying property 2 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.06386923789978027.

Properties batch 3, size 1
Remaining timeout: 198.40859723091125
Verifying property 3 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.00036460]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.31217670, -8.42142200, -4.16140318, -3.79582143, -4.46238518,
        -3.77659655, -4.79564857, -4.59870291, -8.33152199, -7.22583532],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.00036460]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 542
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 197
Node /15 input 0: size torch.Size([100]) unstable 6
-----------------
# of unstable neurons: 745
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 47] 
split level 1: [/input-12, 10] 
split level 2: [/input-12, 62] 
split level 3: [/input-8, 1192] 
split level 4: [/input-12, 33] 
split level 5: [/input-8, 174] 
split level 6: [/input-8, 1184] 
split level 7: [/input-8, 1300] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 4.315376281738281e-05
Time: prepare 0.0031    bound 0.0042    transfer 0.0011    finalize 0.0016    func 0.0100    
Accumulated time: func 0.0100    prepare 0.0035    bound 0.0042    transfer 0.0011    finalize 0.0016    
all_split False
Length of domains: 0
Time: pickout 0.0004    decision 0.0224    set_bounds 0.0177    solve 0.0100    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0224    set_bounds 0.0177    solve 0.0100    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.05849623680114746


Properties batch 4, size 1
Remaining timeout: 198.22397804260254
Verifying property 4 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.34110188484191895.

Properties batch 5, size 1
Remaining timeout: 198.12025690078735
Verifying property 5 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.596957802772522.

Properties batch 6, size 1
Remaining timeout: 198.02441573143005
Verifying property 6 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.4241514205932617.

Properties batch 7, size 1
Remaining timeout: 197.93389511108398
Verifying property 7 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.743159294128418.

Properties batch 8, size 1
Remaining timeout: 197.84446120262146
Verifying property 8 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.650611400604248.
Result: safe in 2.2450 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 58, vnnlib ID: 58 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.68161011, -4.31493664, -3.29749870, -3.86696267, -4.55905437,
         -4.00861025, -3.69984698, -5.91490364, -4.24547005, -4.16366720]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 183, 1, 403] with unstable size 182 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 403] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 182] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.68392742, -0.33067036, -0.84067488,  0.38051927,  0.12290451,
         -0.46707964,  1.54917371, -0.29823148, -0.40686059]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.68161011, -4.31493664, -3.29749870, -3.86696267, -4.55905437,
         -4.00861025, -3.69984698, -5.91490364, -4.24547005, -4.16366720]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.68161011, -4.31493664, -3.29749966, -3.86696267, -4.55905437,
          -4.00861073, -3.69984746, -5.91490364, -4.24547005, -4.16366720],
         [-3.68161011, -4.31493664, -3.29749966, -3.86696267, -4.55905437,
          -4.00861073, -3.69984746, -5.91490364, -4.24547005, -4.16366720]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.18535256,  0.44797397, -0.56946301, -0.16711521,  0.37850738,
           0.29670453]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0658 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 59, vnnlib ID: 59 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.26414204, -10.67618656,  -7.14083195,  -7.60558414,  -6.94402504,
          -7.67818594,  -6.53135300,  -8.68149567,  -9.88610840, -10.70594692]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [538]; unstable size 538; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 196, 1, 538] with unstable size 195 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 538] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 538] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [195]; unstable size 195; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 195] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 195] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.35335922, 3.54954576, 0.39658886, 0.85085702, 0.24288118, 0.91747463,
         1.88348365, 2.84460545, 3.62032771]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0481 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 60, vnnlib ID: 60 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.17061424, -20.50812531, -23.04294586, -24.22522926, -25.19203758,
         -24.61592484, -24.87892914, -26.22239113, -21.59410477, -22.00157738]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [511]; unstable size 511; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 89, 1, 511] with unstable size 88 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 511] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 511] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [88]; unstable size 88; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 88] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 88] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.22561836, 1.90276670, 3.01938915, 3.98550987, 3.39302921, 3.71364927,
         4.93401432, 0.62228298, 1.22355115]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0625 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 61, vnnlib ID: 61 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.76015854, -4.19035864, -4.85114622, -5.85322762, -4.73305225,
         -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916135]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [653]; unstable size 653; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 223, 1, 653] with unstable size 222 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 653] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 653] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [222]; unstable size 222; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 222] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 222] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.30759096,  0.50324678,  1.35600114,  0.23959923,  1.49378920,
          0.62164307,  0.94105089, -0.94007611, -0.65508509]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.76015854, -4.19035864, -4.85114622, -5.85322762, -4.73305225,
         -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916135]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.76015854, -4.19035912, -4.85114622, -5.85322952, -4.73305321,
          -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916230],
         [-3.76015854, -4.19035912, -4.85114622, -5.85322952, -4.73305321,
          -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916230]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.43020058, -0.47531414,  0.12900376]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0432 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 62, vnnlib ID: 62 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.28970528, -10.67957401, -10.33640766, -13.22579098, -10.36513615,
         -13.49066448, -14.18056297, -12.48040295,  -5.26089621, -10.53180790]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [564]; unstable size 564; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 123, 1, 564] with unstable size 122 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 564] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 564] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [122]; unstable size 122; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 122] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 122] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.76197678, 4.99777508, 4.48139000, 7.34546137, 4.49978971, 7.59466982,
         8.32230759, 6.48773861, 4.83865166]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0312 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 63, vnnlib ID: 63 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.66796303, -10.52346611,  -3.42282248,  -5.06743813,  -4.46258068,
          -5.11582899,  -5.54765797,  -6.57940102,  -9.65262794, -10.61189556]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 133, 1, 403] with unstable size 132 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 403] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [132]; unstable size 132; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 132] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 132] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.52602577,  4.36306667, -2.47155905, -0.77068269, -1.39496112,
         -0.72536492,  0.64461362,  3.49572945,  4.39420080]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.66796303, -10.52346611,  -3.42282248,  -5.06743813,  -4.46258068,
          -5.11582899,  -5.54765797,  -6.57940102,  -9.65262794, -10.61189556]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.66796207, -10.52346516,  -3.42282248,  -5.06743717,  -4.46258068,
           -5.11582804,  -5.54765701,  -6.57940102,  -9.65262604, -10.61189556],
         [ -7.66796207, -10.52346516,  -3.42282248,  -5.06743717,  -4.46258068,
           -5.11582804,  -5.54765701,  -6.57940102,  -9.65262604, -10.61189556]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-2.12483454, -0.48021984, -1.08507633, -0.43182898]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0455 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 64, vnnlib ID: 64 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.00622368, -8.74640179, -1.57641745, -3.12036347, -1.72908556,
         -3.21535397, -2.39184046, -4.51465273, -6.92866707, -8.24733448]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [728]; unstable size 728; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 728] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 728] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 728] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 186] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.92469168,  6.41981840,  1.23279631, -0.06353921,  1.31932342,
          0.44406343,  2.49051285,  4.72230053,  5.96450901]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.00622368, -8.74640179, -1.57641745, -3.12036347, -1.72908556,
         -3.21535397, -2.39184046, -4.51465273, -6.92866707, -8.24733448]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.10it/s]100%|██████████| 1/1 [00:00<00:00,  9.09it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.11066437, -8.78367043, -1.73745489, -3.23712897, -1.76644242,
          -3.33225727, -2.47211003, -4.53414059, -7.01842499, -8.31025410]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02898753]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1126 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 25.59933853149414
alpha/beta optimization time: 1.100639820098877
initial alpha-crown bounds: tensor([[ 2.93429875,  6.45055294,  1.23612046, -0.05334760,  1.32261014,
          0.45382124,  2.50835919,  4.75239944,  5.99452400]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.05334760248661041
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.73889136314392
Verifying property 0 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.9342987537384033.

Properties batch 1, size 1
Remaining timeout: 198.6033492088318
Verifying property 1 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.450552940368652.

Properties batch 2, size 1
Remaining timeout: 198.51359844207764
Verifying property 2 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2361204624176025.

Properties batch 3, size 1
Remaining timeout: 198.42509007453918
Verifying property 3 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.05334760]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.00622368, -8.74640179, -1.57641745, -3.12036347, -1.72908556,
        -3.21535397, -2.39184046, -4.51465273, -6.92866707, -8.24733448],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.05334760]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 728
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 184
Node /15 input 0: size torch.Size([100]) unstable 4
-----------------
# of unstable neurons: 916
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 50] 
split level 1: [/input-8, 545] 
split level 2: [/input-8, 541] 
split level 3: [/input-8, 941] 
split level 4: [/input-8, 559] 
split level 5: [/input-8, 534] 
split level 6: [/input-8, 530] 
split level 7: [/input-8, 1258] 
pruning_in_iteration open status: False
ratio of positive domain = 18 / 256 = 0.0703125
pruning-in-iteration extra time: 6.556510925292969e-05
Time: prepare 0.0031    bound 0.0897    transfer 0.0012    finalize 0.0016    func 0.0957    
Accumulated time: func 0.0957    prepare 0.0035    bound 0.0897    transfer 0.0012    finalize 0.0016    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02603 (8), -0.02538 (8), -0.02517 (8), -0.02506 (8), -0.02452 (8), -0.02443 (8), -0.02441 (8), -0.02420 (8), -0.02378 (8), -0.02358 (8), -0.02356 (8), -0.02346 (8), -0.02298 (8), -0.02293 (8), -0.02282 (8), -0.02266 (8), -0.02260 (8), -0.02260 (8), -0.02232 (8), -0.02201 (8), 
Length of domains: 238
Time: pickout 0.0004    decision 0.0219    set_bounds 0.0178    solve 0.0957    add 0.0024    
Accumulated time: pickout 0.0004    decision 0.0219    set_bounds 0.0178    solve 0.0957    add 0.0024    
Current (lb-rhs): -0.026025831699371338
238 domains visited
Cumulative time: 0.1418170928955078

BaB round 2
batch: 238
splitting decisions: 
split level 0: [/input-8, 1465] [/input-8, 1470] [/input-8, 1465] [/input-8, 1470] [/input-8, 1465] [/input-8, 1470] [/input-8, 1465] [/input-8, 1452] [/input-8, 1470] [/input-8, 1452] 
pruning_in_iteration open status: False
ratio of positive domain = 71 / 476 = 0.14915966386554624
pruning-in-iteration extra time: 5.14984130859375e-05
Time: prepare 0.0093    bound 0.0951    transfer 0.0011    finalize 0.0023    func 0.1082    
Accumulated time: func 0.2038    prepare 0.0129    bound 0.1848    transfer 0.0023    finalize 0.0038    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02549 (9), -0.02484 (9), -0.02464 (9), -0.02452 (9), -0.02398 (9), -0.02389 (9), -0.02384 (9), -0.02367 (9), -0.02319 (9), -0.02303 (9), -0.02299 (9), -0.02287 (9), -0.02282 (9), -0.02250 (9), -0.02235 (9), -0.02232 (9), -0.02225 (9), -0.02216 (9), -0.02202 (9), -0.02184 (9), 
Length of domains: 402
Time: pickout 0.0028    decision 0.0241    set_bounds 0.0104    solve 0.1083    add 0.0027    
Accumulated time: pickout 0.0032    decision 0.0461    set_bounds 0.0282    solve 0.2040    add 0.0051    
Current (lb-rhs): -0.025489121675491333
640 domains visited
Cumulative time: 0.29058408737182617

BaB round 3
batch: 402
splitting decisions: 
split level 0: [/input-8, 1470] [/input-8, 1465] [/input-8, 1452] [/input-8, 1465] [/input-8, 1452] [/input-8, 1465] [/input-8, 1452] [/input-8, 1465] [/input-8, 1465] [/input-8, 1465] 
pruning_in_iteration open status: False
ratio of positive domain = 99 / 804 = 0.12313432835820892
pruning-in-iteration extra time: 5.245208740234375e-05
Time: prepare 0.0157    bound 0.0972    transfer 0.0034    finalize 0.0035    func 0.1200    
Accumulated time: func 0.3238    prepare 0.0289    bound 0.2821    transfer 0.0058    finalize 0.0073    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02530 (10), -0.02464 (10), -0.02445 (10), -0.02428 (10), -0.02378 (10), -0.02365 (10), -0.02361 (10), -0.02343 (10), -0.02298 (10), -0.02279 (10), -0.02277 (10), -0.02262 (10), -0.02261 (10), -0.02229 (10), -0.02216 (10), -0.02212 (10), -0.02198 (10), -0.02195 (10), -0.02177 (10), -0.02161 (10), 
Length of domains: 696
Time: pickout 0.0051    decision 0.0323    set_bounds 0.0171    solve 0.1207    add 0.0043    
Accumulated time: pickout 0.0082    decision 0.0784    set_bounds 0.0453    solve 0.3247    add 0.0094    
Current (lb-rhs): -0.02529766410589218
1336 domains visited
Cumulative time: 0.4709906578063965

BaB round 4
batch: 696
splitting decisions: 
split level 0: [/input-8, 1452] [/input-8, 1266] [/input-8, 1470] [/input-8, 1266] [/input-8, 1470] [/input-8, 1266] [/input-8, 1470] [/input-8, 1470] [/input-8, 1266] [/input-8, 1470] 
pruning_in_iteration open status: False
ratio of positive domain = 201 / 1392 = 0.1443965517241379
pruning-in-iteration extra time: 5.364418029785156e-05
Time: prepare 0.0269    bound 0.1105    transfer 0.0053    finalize 0.0066    func 0.1495    
Accumulated time: func 0.4733    prepare 0.0560    bound 0.3925    transfer 0.0111    finalize 0.0140    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02521 (11), -0.02456 (11), -0.02436 (11), -0.02416 (11), -0.02370 (11), -0.02352 (11), -0.02351 (11), -0.02331 (11), -0.02289 (11), -0.02267 (11), -0.02266 (11), -0.02244 (11), -0.02203 (11), -0.02182 (11), -0.02159 (11), -0.02129 (11), -0.02103 (11), -0.02098 (11), -0.02091 (11), -0.02087 (11), 
Length of domains: 1182
Time: pickout 0.0076    decision 0.0475    set_bounds 0.0296    solve 0.1497    add 0.0043    
Accumulated time: pickout 0.0158    decision 0.1259    set_bounds 0.0749    solve 0.4744    add 0.0138    
Current (lb-rhs): -0.0252121239900589
2518 domains visited
Cumulative time: 0.7112383842468262

BaB round 5
batch: 1182
splitting decisions: 
split level 0: [/input-8, 306] [/input-8, 1452] [/input-8, 306] [/input-8, 1452] [/input-8, 306] [/input-8, 1452] [/input-8, 306] [/input-8, 306] [/input-8, 1452] [/input-8, 306] 
pruning_in_iteration open status: False
ratio of positive domain = 416 / 2364 = 0.17597292724196278
pruning-in-iteration extra time: 7.891654968261719e-05
Time: prepare 0.0448    bound 0.1369    transfer 0.0067    finalize 0.0106    func 0.1992    
Accumulated time: func 0.6725    prepare 0.1010    bound 0.5294    transfer 0.0178    finalize 0.0245    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02470 (12), -0.02403 (12), -0.02385 (12), -0.02364 (12), -0.02317 (12), -0.02301 (12), -0.02300 (12), -0.02278 (12), -0.02251 (12), -0.02235 (12), -0.02216 (12), -0.02214 (12), -0.02195 (12), -0.02185 (12), -0.02166 (12), -0.02151 (12), -0.02134 (12), -0.02108 (12), -0.02099 (12), -0.02099 (12), 
Length of domains: 1922
Time: pickout 0.0131    decision 0.0742    set_bounds 0.0503    solve 0.2000    add 0.0074    
Accumulated time: pickout 0.0290    decision 0.2001    set_bounds 0.1251    solve 0.6745    add 0.0212    
Current (lb-rhs): -0.024698272347450256
4440 domains visited
Cumulative time: 1.0593504905700684

BaB round 6
batch: 1922
splitting decisions: 
split level 0: [/input-8, 544] [/input-8, 1261] [/input-8, 544] [/input-8, 1261] [/input-8, 544] [/input-8, 1261] [/input-8, 544] [/input-8, 544] [/input-8, 1261] [/input-8, 544] 
pruning_in_iteration open status: False
ratio of positive domain = 729 / 3844 = 0.18964620187304893
pruning-in-iteration extra time: 7.677078247070312e-05
Time: prepare 0.0738    bound 0.1950    transfer 0.0227    finalize 0.0172    func 0.3098    
Accumulated time: func 0.9823    prepare 0.1751    bound 0.7245    transfer 0.0405    finalize 0.0418    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02444 (13), -0.02378 (13), -0.02359 (13), -0.02337 (13), -0.02292 (13), -0.02274 (13), -0.02273 (13), -0.02251 (13), -0.02221 (13), -0.02209 (13), -0.02190 (13), -0.02188 (13), -0.02167 (13), -0.02156 (13), -0.02136 (13), -0.02125 (13), -0.02107 (13), -0.02079 (13), -0.02070 (13), -0.02068 (13), 
Length of domains: 3088
Time: pickout 0.0234    decision 0.1145    set_bounds 0.2135    solve 0.3106    add 0.0135    
Accumulated time: pickout 0.0524    decision 0.3146    set_bounds 0.3387    solve 0.9850    add 0.0347    
Current (lb-rhs): -0.02443903684616089
7528 domains visited
Cumulative time: 1.740778923034668

BaB round 7
batch: 3088
splitting decisions: 
split level 0: [/input-8, 310] [/input-8, 1265] [/input-8, 310] [/input-8, 540] [/input-8, 310] [/input-8, 1265] [/input-8, 310] [/input-8, 540] [/input-8, 310] [/input-8, 540] 
pruning_in_iteration open status: False
ratio of positive domain = 1026 / 6176 = 0.16612694300518138
pruning-in-iteration extra time: 5.555152893066406e-05
Time: prepare 0.1197    bound 0.2858    transfer 0.0283    finalize 0.0286    func 0.4632    
Accumulated time: func 1.4456    prepare 0.2950    bound 1.0103    transfer 0.0688    finalize 0.0704    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02380 (14), -0.02314 (14), -0.02295 (14), -0.02295 (14), -0.02273 (14), -0.02230 (14), -0.02228 (14), -0.02212 (14), -0.02211 (14), -0.02208 (14), -0.02188 (14), -0.02188 (14), -0.02156 (14), -0.02146 (14), -0.02144 (14), -0.02128 (14), -0.02128 (14), -0.02126 (14), -0.02124 (14), -0.02103 (14), 
Length of domains: 5080
Time: pickout 0.0352    decision 0.1772    set_bounds 0.2608    solve 0.4645    add 0.0212    
Accumulated time: pickout 0.0876    decision 0.4918    set_bounds 0.5995    solve 1.4496    add 0.0559    
Current (lb-rhs): -0.023804157972335815
12608 domains visited
Cumulative time: 2.7094638347625732

BaB round 8
batch: 4096
splitting decisions: 
split level 0: [/input-8, 1266] [/input-8, 540] [/input-8, 1266] [/input-8, 1266] [/input-8, 540] [/input-8, 1266] [/input, 648] [/input-8, 1266] [/input-8, 540] [/input-8, 1266] 
pruning_in_iteration open status: True
ratio of positive domain = 1753 / 8192 = 0.2139892578125
pruning-in-iteration extra time: 0.0018050670623779297
Time: prepare 0.1764    bound 0.3608    transfer 0.0460    finalize 0.0456    func 0.6300    
Accumulated time: func 2.0756    prepare 0.4716    bound 1.3711    transfer 0.1148    finalize 0.1161    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02281 (15), -0.02278 (15), -0.02215 (15), -0.02211 (15), -0.02196 (15), -0.02195 (15), -0.02193 (15), -0.02192 (15), -0.02192 (15), -0.02137 (15), -0.02130 (15), -0.02129 (15), -0.02127 (15), -0.02126 (15), -0.02125 (15), -0.02112 (15), -0.02110 (15), -0.02110 (15), -0.02108 (15), -0.02107 (15), 
Length of domains: 7423
Time: pickout 0.0469    decision 0.2298    set_bounds 0.2927    solve 0.6317    add 0.0241    
Accumulated time: pickout 0.1345    decision 0.7217    set_bounds 0.8923    solve 2.0813    add 0.0801    
Current (lb-rhs): -0.02280554175376892
19047 domains visited
current_vram/total_varm: 11.0GB/99.9GB, batch_size increase to 8192
Cumulative time: 3.949126720428467

BaB round 9
batch: 7423
splitting decisions: 
split level 0: [/input-8, 1266] [/input-8, 540] [/input-8, 1266] [/input-8, 540] [/input-8, 1266] [/input, 1208] [/input-8, 1266] [/input, 1208] [/input-8, 540] [/input-8, 1265] 
pruning_in_iteration open status: False
ratio of positive domain = 2640 / 14846 = 0.17782567695002016
pruning-in-iteration extra time: 9.250640869140625e-05
Time: prepare 0.5329    bound 0.6200    transfer 0.0849    finalize 0.0795    func 1.3189    
Accumulated time: func 3.3945    prepare 1.0049    bound 1.9911    transfer 0.1997    finalize 0.1955    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02256 (16), -0.02254 (16), -0.02190 (16), -0.02187 (16), -0.02171 (16), -0.02169 (16), -0.02168 (16), -0.02167 (16), -0.02167 (16), -0.02109 (16), -0.02104 (16), -0.02104 (16), -0.02103 (16), -0.02100 (16), -0.02100 (16), -0.02088 (16), -0.02085 (16), -0.02084 (16), -0.02082 (16), -0.02082 (16), 
Length of domains: 12101
Time: pickout 0.0895    decision 0.5807    set_bounds 0.2108    solve 1.3220    add 0.0438    
Accumulated time: pickout 0.2240    decision 1.3024    set_bounds 1.1031    solve 3.4032    add 0.1238    
Current (lb-rhs): -0.02256111055612564
31148 domains visited
Cumulative time: 6.220554351806641

BaB round 10
batch: 8192
splitting decisions: 
split level 0: [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 1266] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 1266] [/input-8, 309] 
pruning_in_iteration open status: False
ratio of positive domain = 2734 / 16384 = 0.1668701171875
pruning-in-iteration extra time: 0.00010514259338378906
Time: prepare 0.4228    bound 0.6787    transfer 0.0902    finalize 0.3017    func 1.4951    
Accumulated time: func 4.8896    prepare 1.4280    bound 2.6698    transfer 0.2898    finalize 0.4973    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02208 (17), -0.02204 (17), -0.02141 (17), -0.02140 (17), -0.02137 (17), -0.02134 (17), -0.02131 (17), -0.02122 (17), -0.02121 (17), -0.02119 (17), -0.02119 (17), -0.02082 (17), -0.02067 (17), -0.02064 (17), -0.02061 (17), -0.02055 (17), -0.02055 (17), -0.02053 (17), -0.02051 (17), -0.02051 (17), 
Length of domains: 17413
Time: pickout 0.1150    decision 0.6320    set_bounds 0.3324    solve 1.4985    add 0.0549    
Accumulated time: pickout 0.3389    decision 1.9344    set_bounds 1.4354    solve 4.9018    add 0.1788    
Current (lb-rhs): -0.022076182067394257
44652 domains visited
current_vram/total_varm: 22.3GB/99.9GB, batch_size increase to 16384
Cumulative time: 8.877869844436646

BaB round 11
batch: 16384
splitting decisions: 
split level 0: [/input-8, 1175] [/input-8, 1175] [/input-8, 1175] [/input-8, 1175] [/input-8, 1175] [/input-8, 1175] [/input-8, 1175] [/input-8, 540] [/input-8, 1266] [/input-8, 540] 
pruning_in_iteration open status: False
ratio of positive domain = 5117 / 32768 = 0.156158447265625
pruning-in-iteration extra time: 0.00022101402282714844
Time: prepare 0.8778    bound 1.3077    transfer 0.1764    finalize 0.4985    func 2.8624    
Accumulated time: func 7.7520    prepare 2.3062    bound 3.9776    transfer 0.4662    finalize 0.9958    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02181 (18), -0.02177 (18), -0.02114 (18), -0.02110 (18), -0.02107 (18), -0.02103 (18), -0.02094 (18), -0.02092 (18), -0.02090 (18), -0.02050 (18), -0.02047 (18), -0.02041 (18), -0.02036 (18), -0.02034 (18), -0.02031 (18), -0.02027 (18), -0.02027 (18), -0.02026 (18), -0.02025 (18), -0.02022 (18), 
Length of domains: 28441
Time: pickout 0.2347    decision 1.6484    set_bounds 0.9375    solve 2.8686    add 0.0972    
Accumulated time: pickout 0.5737    decision 3.5828    set_bounds 2.3729    solve 7.7703    add 0.2760    
Current (lb-rhs): -0.021811023354530334
72064 domains visited
current_vram/total_varm: 33.3GB/99.9GB, batch_size increase to 32768
Cumulative time: 14.711223363876343

BaB round 12
batch: 28441
splitting decisions: 
split level 0: [/input, 648] [/input, 1208] [/input, 648] [/input, 648] [/input, 648] [/input-8, 1265] [/input, 648] [/input-8, 1265] [/input, 648] [/input, 1208] 
pruning_in_iteration open status: False
ratio of positive domain = 8965 / 56882 = 0.15760697584473116
pruning-in-iteration extra time: 0.0004036426544189453
Time: prepare 1.5274    bound 2.2424    transfer 0.3376    finalize 0.4130    func 4.5233    
Accumulated time: func 12.2753    prepare 3.8339    bound 6.2200    transfer 0.8038    finalize 1.4087    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02158 (19), -0.02154 (19), -0.02090 (19), -0.02086 (19), -0.02079 (19), -0.02070 (19), -0.02064 (19), -0.02055 (19), -0.02042 (19), -0.02027 (19), -0.02024 (19), -0.02016 (19), -0.02012 (19), -0.02007 (19), -0.02004 (19), -0.02004 (19), -0.02001 (19), -0.02001 (19), -0.01997 (19), -0.01997 (19), 
Length of domains: 47442
Time: pickout 0.4060    decision 2.9133    set_bounds 1.8690    solve 4.8877    add 0.1419    
Accumulated time: pickout 0.9797    decision 6.4961    set_bounds 4.2419    solve 12.6581    add 0.4179    
Current (lb-rhs): -0.021575570106506348
119506 domains visited
Cumulative time: 25.02875280380249

BaB round 13
batch: 32768
splitting decisions: 
split level 0: [/input-8, 1261] [/input-8, 1217] [/input-8, 1217] [/input-8, 1217] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 540] 
pruning_in_iteration open status: False
ratio of positive domain = 10641 / 65536 = 0.1623687744140625
pruning-in-iteration extra time: 0.00042557716369628906
Time: prepare 1.7689    bound 7.7665    transfer 0.4240    finalize 0.8874    func 10.8509    
Accumulated time: func 23.1262    prepare 5.6034    bound 13.9865    transfer 1.2278    finalize 2.2961    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02158 (19), -0.02154 (19), -0.02090 (19), -0.02086 (19), -0.02079 (19), -0.02070 (19), -0.02064 (19), -0.02031 (20), -0.02018 (20), -0.02016 (19), -0.02012 (19), -0.02007 (19), -0.02004 (19), -0.02004 (19), -0.02001 (19), -0.01997 (19), -0.01997 (19), -0.01986 (19), -0.01979 (19), -0.01961 (20), 
Length of domains: 68895
Time: pickout 0.5186    decision 3.3818    set_bounds 1.8847    solve 10.8621    add 4.5817    
Accumulated time: pickout 1.4983    decision 9.8779    set_bounds 6.1266    solve 23.5202    add 4.9997    
Current (lb-rhs): -0.021575570106506348
173727 domains visited
Cumulative time: 46.349695920944214

BaB round 14
batch: 32768
splitting decisions: 
split level 0: [/input-8, 540] [/input, 964] [/input, 964] [/input-8, 1175] [/input-8, 1175] [/input-8, 1175] [/input-8, 1175] [/input-8, 1175] [/input-8, 1175] [/input-8, 1261] 
pruning_in_iteration open status: False
ratio of positive domain = 11046 / 65536 = 0.168548583984375
pruning-in-iteration extra time: 0.00042438507080078125
Time: prepare 1.7874    bound 7.7664    transfer 0.4242    finalize 0.4842    func 10.4656    
Accumulated time: func 33.5918    prepare 7.3913    bound 21.7529    transfer 1.6520    finalize 2.7803    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02158 (19), -0.02154 (19), -0.02090 (19), -0.02086 (19), -0.02079 (19), -0.02070 (19), -0.02064 (19), -0.02031 (20), -0.02018 (20), -0.02016 (19), -0.02012 (19), -0.02007 (19), -0.02004 (19), -0.02004 (19), -0.02001 (19), -0.01997 (19), -0.01997 (19), -0.01986 (19), -0.01979 (19), -0.01961 (20), 
Length of domains: 90124
Time: pickout 0.5318    decision 4.3377    set_bounds 2.0906    solve 10.4801    add 0.1701    
Accumulated time: pickout 2.0301    decision 14.2157    set_bounds 8.2172    solve 34.0003    add 5.1698    
Current (lb-rhs): -0.021575570106506348
227724 domains visited
Cumulative time: 64.0905122756958

BaB round 15
batch: 32768
splitting decisions: 
split level 0: [/input-8, 1217] [/input-8, 1217] [/input-8, 1261] [/input-8, 313] [/input-8, 1175] [/input-8, 1217] [/input-8, 1513] [/input-8, 1250] [/input-8, 1217] [/input, 964] 
pruning_in_iteration open status: True
ratio of positive domain = 13831 / 65536 = 0.2110443115234375
pruning-in-iteration extra time: 0.0014884471893310547
Time: prepare 1.8341    bound 7.2442    transfer 0.4297    finalize 1.1230    func 10.6339    
Accumulated time: func 44.2258    prepare 9.2258    bound 28.9971    transfer 2.0816    finalize 3.9033    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02158 (19), -0.02154 (19), -0.02090 (19), -0.02086 (19), -0.02079 (19), -0.02070 (19), -0.02064 (19), -0.02031 (20), -0.02018 (20), -0.02016 (19), -0.02012 (19), -0.02007 (19), -0.02004 (19), -0.02004 (19), -0.02001 (19), -0.01997 (19), -0.01997 (19), -0.01986 (19), -0.01979 (19), -0.01961 (20), 
Length of domains: 109061
Time: pickout 0.5263    decision 3.9975    set_bounds 2.0735    solve 10.6469    add 0.1614    
Accumulated time: pickout 2.5564    decision 18.2132    set_bounds 10.2906    solve 44.6472    add 5.3312    
Current (lb-rhs): -0.021575570106506348
279429 domains visited
Cumulative time: 81.61772894859314

BaB round 16
batch: 32768
splitting decisions: 
split level 0: [/input-8, 1250] [/input, 1208] [/input-8, 1250] [/input-8, 866] [/input-8, 1250] [/input-8, 900] [/input-8, 1250] [/input-8, 1250] [/input-8, 900] [/input-8, 900] 
pruning_in_iteration open status: False
ratio of positive domain = 11169 / 65536 = 0.1704254150390625
pruning-in-iteration extra time: 0.0004315376281738281
Time: prepare 1.8298    bound 7.7674    transfer 0.4223    finalize 0.4981    func 10.5212    
Accumulated time: func 54.7470    prepare 11.0561    bound 36.7645    transfer 2.5039    finalize 4.4013    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02158 (19), -0.02154 (19), -0.02090 (19), -0.02086 (19), -0.02079 (19), -0.02070 (19), -0.02064 (19), -0.02031 (20), -0.02018 (20), -0.02016 (19), -0.02012 (19), -0.02007 (19), -0.02004 (19), -0.02004 (19), -0.02001 (19), -0.01997 (19), -0.01997 (19), -0.01986 (19), -0.01979 (19), -0.01961 (20), 
Length of domains: 130220
Time: pickout 0.5398    decision 3.6983    set_bounds 2.2792    solve 11.3468    add 0.2682    
Accumulated time: pickout 3.0962    decision 21.9115    set_bounds 12.5698    solve 55.9940    add 5.5993    
Current (lb-rhs): -0.021575570106506348
333356 domains visited
Cumulative time: 99.85400772094727

BaB round 17
batch: 32768
splitting decisions: 
split level 0: [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 749] [/input-8, 313] [/input-8, 1242] 
pruning_in_iteration open status: False
ratio of positive domain = 9881 / 65536 = 0.1507720947265625
pruning-in-iteration extra time: 0.00043487548828125
Time: prepare 1.8631    bound 7.7658    transfer 0.4142    finalize 0.4920    func 10.5380    
Accumulated time: func 65.2850    prepare 12.9197    bound 44.5303    transfer 2.9181    finalize 4.8933    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02158 (19), -0.02154 (19), -0.02090 (19), -0.02086 (19), -0.02079 (19), -0.02070 (19), -0.02064 (19), -0.02031 (20), -0.02018 (20), -0.02016 (19), -0.02012 (19), -0.02007 (19), -0.02004 (19), -0.02004 (19), -0.02001 (19), -0.01997 (19), -0.01997 (19), -0.01986 (19), -0.01979 (19), -0.01961 (20), 
Length of domains: 152717
Time: pickout 0.5650    decision 3.4244    set_bounds 2.4841    solve 11.4962    add 0.1810    
Accumulated time: pickout 3.6612    decision 25.3359    set_bounds 15.0539    solve 67.4903    add 5.7803    
Current (lb-rhs): -0.021575570106506348
388621 domains visited
Cumulative time: 118.14187026023865

BaB round 18
batch: 32768
splitting decisions: 
split level 0: [/input-8, 900] [/input-8, 899] [/input-8, 899] [/input-8, 900] [/input-8, 899] [/input-8, 899] [/input-8, 900] [/input-8, 899] [/input-8, 900] [/input-8, 899] 
pruning_in_iteration open status: False
ratio of positive domain = 9036 / 65536 = 0.13787841796875
pruning-in-iteration extra time: 0.0004794597625732422
Time: prepare 1.8551    bound 7.7674    transfer 0.4224    finalize 0.5022    func 10.5503    
Accumulated time: func 75.8353    prepare 14.7753    bound 52.2977    transfer 3.3405    finalize 5.3955    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02158 (19), -0.02154 (19), -0.02090 (19), -0.02086 (19), -0.02079 (19), -0.02070 (19), -0.02064 (19), -0.02031 (20), -0.02018 (20), -0.02016 (19), -0.02012 (19), -0.02007 (19), -0.02004 (19), -0.02004 (19), -0.02001 (19), -0.01997 (19), -0.01997 (19), -0.01986 (19), -0.01979 (19), -0.01961 (20), 
Length of domains: 176095
Time: pickout 0.5917    decision 3.4093    set_bounds 2.7118    solve 10.5662    add 0.1899    
Accumulated time: pickout 4.2529    decision 28.7452    set_bounds 17.7657    solve 78.0564    add 5.9702    
Current (lb-rhs): -0.021575570106506348
444767 domains visited
Cumulative time: 135.73861718177795

BaB round 19
batch: 32768
splitting decisions: 
split level 0: [/input-8, 899] [/input, 661] [/input-8, 866] [/input, 968] [/input, 968] [/input, 968] [/input-8, 899] [/input, 968] [/input, 968] [/input-8, 899] 
pruning_in_iteration open status: False
ratio of positive domain = 8838 / 65536 = 0.134857177734375
pruning-in-iteration extra time: 0.00047397613525390625
Time: prepare 1.8320    bound 7.7662    transfer 0.4366    finalize 0.5261    func 10.5638    
Accumulated time: func 86.3991    prepare 16.6078    bound 60.0638    transfer 3.7770    finalize 5.9216    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02158 (19), -0.02154 (19), -0.02090 (19), -0.02086 (19), -0.02079 (19), -0.02070 (19), -0.02064 (19), -0.02031 (20), -0.02018 (20), -0.02016 (19), -0.02012 (19), -0.02007 (19), -0.02004 (19), -0.02004 (19), -0.02001 (19), -0.01997 (19), -0.01997 (19), -0.01986 (19), -0.01979 (19), -0.01961 (20), 
Length of domains: 199663
Time: pickout 0.5934    decision 4.6209    set_bounds 2.7641    solve 10.5795    add 0.1907    
Accumulated time: pickout 4.8463    decision 33.3661    set_bounds 20.5297    solve 88.6360    add 6.1609    
Current (lb-rhs): -0.021575570106506348
501103 domains visited
Cumulative time: 154.61464643478394

BaB round 20
batch: 32768
splitting decisions: 
split level 0: [/input, 661] [/input-8, 1952] [/input, 661] [/input-8, 1952] [/input, 661] [/input-8, 1952] [/input, 661] [/input-8, 1952] [/input-8, 866] [/input-8, 1952] 
pruning_in_iteration open status: False
ratio of positive domain = 8337 / 65536 = 0.1272125244140625
pruning-in-iteration extra time: 0.0004494190216064453
Time: prepare 1.8234    bound 7.7669    transfer 0.4627    finalize 0.5229    func 10.5788    
Accumulated time: func 96.9780    prepare 18.4316    bound 67.8307    transfer 4.2397    finalize 6.4445    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02158 (19), -0.02154 (19), -0.02090 (19), -0.02086 (19), -0.02079 (19), -0.02070 (19), -0.02064 (19), -0.02031 (20), -0.02018 (20), -0.02016 (19), -0.02012 (19), -0.02007 (19), -0.02004 (19), -0.02004 (19), -0.02001 (19), -0.01997 (19), -0.01997 (19), -0.01986 (19), -0.01979 (19), -0.01961 (20), 
Length of domains: 223708
Time: pickout 0.6032    decision 4.3383    set_bounds 1.5194    solve 10.5951    add 0.1982    
Accumulated time: pickout 5.4495    decision 37.7044    set_bounds 22.0491    solve 99.2311    add 6.3591    
Current (lb-rhs): -0.021575570106506348
557916 domains visited
Cumulative time: 172.00889539718628

BaB round 21
batch: 32768
splitting decisions: 
split level 0: [/input, 661] [/input-8, 866] [/input-8, 866] [/input-8, 866] [/input-8, 866] [/input, 661] [/input-8, 1269] [/input, 3722] [/input-8, 1269] [/input-8, 1269] 
pruning_in_iteration open status: False
ratio of positive domain = 8406 / 65536 = 0.128265380859375
pruning-in-iteration extra time: 0.00043129920959472656
Time: prepare 1.8472    bound 7.7651    transfer 0.4880    finalize 0.5314    func 10.6343    
Accumulated time: func 107.6123    prepare 20.2794    bound 75.5958    transfer 4.7277    finalize 6.9759    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02158 (19), -0.02154 (19), -0.02090 (19), -0.02086 (19), -0.02079 (19), -0.02070 (19), -0.02064 (19), -0.02031 (20), -0.02018 (20), -0.02016 (19), -0.02012 (19), -0.02007 (19), -0.02004 (19), -0.02004 (19), -0.02001 (19), -0.01997 (19), -0.01997 (19), -0.01986 (19), -0.01979 (19), -0.01961 (20), 
Length of domains: 247567
Time: pickout 0.5849    decision 4.8975    set_bounds 2.9318    solve 10.6506    add 0.2027    
Accumulated time: pickout 6.0345    decision 42.6019    set_bounds 24.9810    solve 109.8817    add 6.5618    
Current (lb-rhs): -0.021575570106506348
614543 domains visited
Cumulative time: 191.42937207221985

BaB round 22
batch: 32768
splitting decisions: 
split level 0: [/input-8, 900] [/input-8, 866] [/input, 1212] [/input-8, 900] [/input, 3995] [/input-8, 866] [/input-8, 866] [/input-8, 900] [/input-8, 866] [/input, 1212] 
pruning_in_iteration open status: False
ratio of positive domain = 10394 / 65536 = 0.158599853515625
pruning-in-iteration extra time: 0.0004038810729980469
Time: prepare 1.8118    bound 7.7659    transfer 0.5168    finalize 0.5401    func 10.6379    
Accumulated time: func 118.2502    prepare 22.0917    bound 83.3617    transfer 5.2445    finalize 7.5160    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02158 (19), -0.02154 (19), -0.02090 (19), -0.02086 (19), -0.02079 (19), -0.02070 (19), -0.02064 (19), -0.02031 (20), -0.02018 (20), -0.02016 (19), -0.02012 (19), -0.02007 (19), -0.02004 (19), -0.02004 (19), -0.02001 (19), -0.01997 (19), -0.01997 (19), -0.01986 (19), -0.01979 (19), -0.01961 (20), 
Length of domains: 269389
Time: pickout 0.6478    decision 3.4165    set_bounds 3.2245    solve 10.6537    add 0.2015    
Accumulated time: pickout 6.6822    decision 46.0184    set_bounds 28.2055    solve 120.5353    add 6.7633    
Current (lb-rhs): -0.021575570106506348
669133 domains visited
Time out!!!!!!!!
Result: unknown in 212.7077 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 65, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.25397301, -11.57504463,  -9.66235542,  -8.69976139,  -9.31725407,
          -8.85229206,  -9.17159748,  -9.49390125,  -9.43022537, -10.41604328]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [395]; unstable size 395; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 134, 1, 395] with unstable size 133 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 395] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 395] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [133]; unstable size 133; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 133] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 133] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.46065447,  1.67517161,  0.13809085, -0.74742365, -0.27090013,
         -0.60667473, -0.21644306, -0.32564569,  0.60563874]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.25397301, -11.57504463,  -9.66235542,  -8.69976139,  -9.31725407,
          -8.85229206,  -9.17159748,  -9.49390125,  -9.43022537, -10.41604328]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.25397110, -11.57504368,  -9.66235447,  -8.69975948,  -9.31725216,
           -8.85229015,  -9.17159748,  -9.49389839,  -9.43022156, -10.41604137],
         [ -9.25397110, -11.57504368,  -9.66235447,  -8.69975948,  -9.31725216,
           -8.85229015,  -9.17159748,  -9.49389839,  -9.43022156, -10.41604137]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.08237362, -0.47183800,  0.14565468, -0.31930733,  0.32230091,
           0.25862408]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0721 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 66, vnnlib ID: 66 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.07646894, -7.65943909, -2.80038643, -4.19312286, -2.84907341,
         -4.31067753, -2.97104788, -5.49396992, -5.05455065, -7.49684191]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [412]; unstable size 412; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 412] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 412] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 412] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 191] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.59529108,  3.83634615, -0.28098130,  0.94465262,  1.05693650,
         -0.35508776,  2.21556520,  1.40175962,  3.70545459]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.07646894, -7.65943909, -2.80038643, -4.19312286, -2.84907341,
         -4.31067753, -2.97104788, -5.49396992, -5.05455065, -7.49684191]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.07646942, -7.65943909, -2.80038691, -4.19312382, -2.84907389,
          -4.31067753, -2.97104836, -5.49396992, -5.05455112, -7.49684286],
         [-4.07646942, -7.65943909, -2.80038691, -4.19312382, -2.84907389,
          -4.31067753, -2.97104836, -5.49396992, -5.05455112, -7.49684286]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04868698,  0.12197447]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.08412688,  0.31269848,  1.05873048,  ...,  0.59841275,
             0.75714290,  0.74126989],
           [ 0.13809532,  0.48730165,  0.80476195,  ...,  0.39206356,
             0.42380959,  0.51904768],
           [-0.16349196,  0.29682547,  0.86825401,  ...,  0.78888893,
             0.42380959,  0.83650798],
           ...,
           [-0.76666665, -0.98888886, -1.17936504,  ..., -0.90952379,
            -0.95714283, -0.81428570],
           [-0.86190474, -1.13174593, -1.14761901,  ..., -0.32222211,
            -0.67142856, -0.43333322],
           [-1.00476182, -1.13174593, -1.05238092,  ..., -0.33809513,
            -0.40158719, -0.62380952]],

          [[ 0.37037048,  0.80515307,  1.38486338,  ...,  1.35265732,
             1.69082153,  1.25603890],
           [ 0.62801939,  0.85346222,  0.99838978,  ...,  1.12721443,
             1.22383285,  0.86956531],
           [ 0.53140104,  0.61191636,  0.98228669,  ...,  1.48148179,
             1.04669893,  0.95008057],
           ...,
           [-0.16103047, -0.75684375, -0.98228657,  ..., -0.64412236,
            -0.74074072, -0.46698871],
           [-0.46698871, -0.91787434, -0.96618354,  ...,  0.25764906,
            -0.06441211,  0.20933989],
           [-0.77294683, -0.86956519, -0.88566822,  ...,  0.40257660,
             0.46698883,  0.30595824]],

          [[-0.37331331, -0.26836565,  0.21139447,  ...,  0.12143944,
             0.21139447,  0.07646193],
           [-0.14842562, -0.23838064, -0.13343313,  ...,  0.21139447,
             0.01649191, -0.28335828],
           [-0.19340314, -0.31334329,  0.06146942,  ...,  0.70614707,
             0.13643195, -0.16341813],
           ...,
           [-0.43328333, -0.62818587, -0.88305843,  ..., -0.68815589,
            -0.65817088, -0.61319339],
           [-0.52323836, -0.74812591, -0.77811092,  ..., -0.16341813,
            -0.32833579, -0.11844061],
           [-0.67316341, -0.77811092, -0.68815589,  ..., -0.13343313,
            -0.01349309, -0.05847061]]],


         [[[-0.08412688,  0.31269848,  1.05873048,  ...,  0.59841275,
             0.75714290,  0.74126989],
           [ 0.13809532,  0.48730165,  0.80476195,  ...,  0.39206356,
             0.42380959,  0.51904768],
           [-0.16349196,  0.29682547,  0.86825401,  ...,  0.78888893,
             0.42380959,  0.83650798],
           ...,
           [-0.76666665, -0.98888886, -1.17936504,  ..., -0.90952379,
            -0.95714283, -0.81428570],
           [-0.86190474, -1.13174593, -1.14761901,  ..., -0.32222211,
            -0.67142856, -0.43333322],
           [-1.00476182, -1.13174593, -1.05238092,  ..., -0.33809513,
            -0.40158719, -0.62380952]],

          [[ 0.37037048,  0.80515307,  1.38486338,  ...,  1.35265732,
             1.69082153,  1.25603890],
           [ 0.62801939,  0.85346222,  0.99838978,  ...,  1.12721443,
             1.22383285,  0.86956531],
           [ 0.53140104,  0.61191636,  0.98228669,  ...,  1.48148179,
             1.04669893,  0.95008057],
           ...,
           [-0.16103047, -0.75684375, -0.98228657,  ..., -0.64412236,
            -0.74074072, -0.46698871],
           [-0.46698871, -0.91787434, -0.96618354,  ...,  0.25764906,
            -0.06441211,  0.20933989],
           [-0.77294683, -0.86956519, -0.88566822,  ...,  0.40257660,
             0.46698883,  0.30595824]],

          [[-0.37331331, -0.26836565,  0.21139447,  ...,  0.12143944,
             0.21139447,  0.07646193],
           [-0.14842562, -0.23838064, -0.13343313,  ...,  0.21139447,
             0.01649191, -0.28335828],
           [-0.19340314, -0.31334329,  0.06146942,  ...,  0.70614707,
             0.13643195, -0.16341813],
           ...,
           [-0.43328333, -0.62818587, -0.88305843,  ..., -0.68815589,
            -0.65817088, -0.61319339],
           [-0.52323836, -0.74812591, -0.77811092,  ..., -0.16341813,
            -0.32833579, -0.11844061],
           [-0.67316341, -0.77811092, -0.68815589,  ..., -0.13343313,
            -0.01349309, -0.05847061]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0707 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 67, vnnlib ID: 67 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.55771780, -9.15554237, -1.90561867, -3.81715608, -2.01485729,
         -3.92124176, -2.46277452, -4.73829317, -7.58408260, -8.67660141]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [678]; unstable size 678; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 183, 1, 678] with unstable size 182 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 678] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 678] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 182] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.24960256,  6.38107634,  1.60664821, -0.06612653,  1.70738173,
          0.18758941,  2.45988202,  5.07852507,  5.93349123]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.55771780, -9.15554237, -1.90561867, -3.81715608, -2.01485729,
         -3.92124176, -2.46277452, -4.73829317, -7.58408260, -8.67660141]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.06it/s]100%|██████████| 1/1 [00:00<00:00,  9.05it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.62309074, -9.13611889, -2.05009270, -3.92859149, -2.05051351,
          -4.03291273, -2.54317069, -4.72930622, -7.65253258, -8.69230938]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00042081]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1132 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 26.699169158935547
alpha/beta optimization time: 1.1052091121673584
initial alpha-crown bounds: tensor([[ 3.27143574,  6.42873669,  1.61031735, -0.06354001,  1.71119106,
          0.19428980,  2.46747208,  5.10520887,  5.97405767]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.0635400116443634
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.71656847000122
Verifying property 0 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.2714357376098633.

Properties batch 1, size 1
Remaining timeout: 198.5721151828766
Verifying property 1 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.428736686706543.

Properties batch 2, size 1
Remaining timeout: 198.47904300689697
Verifying property 2 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.610317349433899.

Properties batch 3, size 1
Remaining timeout: 198.38962578773499
Verifying property 3 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.06354001]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.55771780, -9.15554237, -1.90561867, -3.81715608, -2.01485729,
        -3.92124176, -2.46277452, -4.73829317, -7.58408260, -8.67660141],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.06354001]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 678
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 180
Node /15 input 0: size torch.Size([100]) unstable 2
-----------------
# of unstable neurons: 860
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-8, 545] 
split level 1: [/input-8, 538] 
split level 2: [/input-8, 550] 
split level 3: [/input-8, 551] 
split level 4: [/input-8, 541] 
split level 5: [/input-8, 546] 
split level 6: [/input-8, 561] 
split level 7: [/input-8, 547] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 256 = 0.0
pruning-in-iteration extra time: 6.699562072753906e-05
Time: prepare 0.0018    bound 0.0906    transfer 0.0011    finalize 0.0014    func 0.0950    
Accumulated time: func 0.0950    prepare 0.0022    bound 0.0906    transfer 0.0011    finalize 0.0014    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05436 (8), -0.05338 (8), -0.05270 (8), -0.05223 (8), -0.05171 (8), -0.05162 (8), -0.05159 (8), -0.05109 (8), -0.05106 (8), -0.05069 (8), -0.05069 (8), -0.05061 (8), -0.05015 (8), -0.05007 (8), -0.04995 (8), -0.04992 (8), -0.04972 (8), -0.04950 (8), -0.04948 (8), -0.04940 (8), 
Length of domains: 256
Time: pickout 0.0004    decision 0.0222    set_bounds 0.0169    solve 0.0950    add 0.0017    
Accumulated time: pickout 0.0004    decision 0.0222    set_bounds 0.0169    solve 0.0950    add 0.0017    
Current (lb-rhs): -0.054363496601581573
256 domains visited
Cumulative time: 0.1422266960144043

BaB round 2
batch: 256
splitting decisions: 
split level 0: [/input-8, 530] [/input-8, 530] [/input-8, 1453] [/input-8, 1453] [/input-8, 530] [/input-8, 530] [/input-8, 1453] [/input-8, 1453] [/input-8, 530] [/input-8, 530] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 512 = 0.0
pruning-in-iteration extra time: 5.0067901611328125e-05
Time: prepare 0.0073    bound 0.0964    transfer 0.0024    finalize 0.0023    func 0.1085    
Accumulated time: func 0.2035    prepare 0.0097    bound 0.1870    transfer 0.0036    finalize 0.0037    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05348 (9), -0.05247 (9), -0.05175 (9), -0.05127 (9), -0.05073 (9), -0.05073 (9), -0.05070 (9), -0.05019 (9), -0.05009 (9), -0.04981 (9), -0.04979 (9), -0.04970 (9), -0.04969 (9), -0.04920 (9), -0.04900 (9), -0.04897 (9), -0.04890 (9), -0.04884 (9), -0.04870 (9), -0.04853 (9), 
Length of domains: 512
Time: pickout 0.0024    decision 0.0252    set_bounds 0.0119    solve 0.1086    add 0.0039    
Accumulated time: pickout 0.0027    decision 0.0474    set_bounds 0.0288    solve 0.2036    add 0.0057    
Current (lb-rhs): -0.05348365008831024
768 domains visited
Cumulative time: 0.2947838306427002

BaB round 3
batch: 512
splitting decisions: 
split level 0: [/input-8, 1453] [/input-8, 1453] [/input-8, 530] [/input-8, 530] [/input-8, 1453] [/input-8, 1453] [/input-8, 530] [/input-8, 530] [/input-8, 1453] [/input-8, 1453] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1024 = 0.0
pruning-in-iteration extra time: 5.030632019042969e-05
Time: prepare 0.0149    bound 0.0984    transfer 0.0065    finalize 0.0043    func 0.1241    
Accumulated time: func 0.3276    prepare 0.0247    bound 0.2854    transfer 0.0100    finalize 0.0080    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05287 (10), -0.05184 (10), -0.05113 (10), -0.05064 (10), -0.05009 (10), -0.05009 (10), -0.05005 (10), -0.04952 (10), -0.04944 (10), -0.04913 (10), -0.04906 (10), -0.04906 (10), -0.04875 (10), -0.04854 (10), -0.04836 (10), -0.04832 (10), -0.04828 (10), -0.04812 (10), -0.04788 (10), -0.04783 (10), 
Length of domains: 1024
Time: pickout 0.0049    decision 0.0385    set_bounds 0.0230    solve 0.1243    add 0.0091    
Accumulated time: pickout 0.0077    decision 0.0859    set_bounds 0.0517    solve 0.3280    add 0.0148    
Current (lb-rhs): -0.05287066102027893
1792 domains visited
Cumulative time: 0.49547505378723145

BaB round 4
batch: 1024
splitting decisions: 
split level 0: [/input-8, 562] [/input-8, 562] [/input-8, 562] [/input-8, 562] [/input-8, 562] [/input-8, 562] [/input-8, 562] [/input-8, 562] [/input-8, 562] [/input-8, 562] 
pruning_in_iteration open status: False
ratio of positive domain = 1 / 2048 = 0.00048828125
pruning-in-iteration extra time: 5.91278076171875e-05
Time: prepare 0.0288    bound 0.1211    transfer 0.0072    finalize 0.0088    func 0.1669    
Accumulated time: func 0.4945    prepare 0.0538    bound 0.4065    transfer 0.0172    finalize 0.0169    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05256 (11), -0.05153 (11), -0.05082 (11), -0.05032 (11), -0.04978 (11), -0.04971 (11), -0.04957 (11), -0.04917 (11), -0.04912 (11), -0.04878 (11), -0.04869 (11), -0.04853 (11), -0.04842 (11), -0.04818 (11), -0.04797 (11), -0.04796 (11), -0.04783 (11), -0.04775 (11), -0.04747 (11), -0.04743 (11), 
Length of domains: 2047
Time: pickout 0.0087    decision 0.0649    set_bounds 0.0454    solve 0.1672    add 0.0137    
Accumulated time: pickout 0.0164    decision 0.1509    set_bounds 0.0972    solve 0.4952    add 0.0285    
Current (lb-rhs): -0.05256393551826477
3839 domains visited
Cumulative time: 0.797095775604248

BaB round 5
batch: 2047
splitting decisions: 
split level 0: [/input-8, 554] [/input-8, 554] [/input-8, 554] [/input-8, 554] [/input-8, 554] [/input-8, 554] [/input-8, 554] [/input-8, 554] [/input-8, 554] [/input-8, 554] 
pruning_in_iteration open status: False
ratio of positive domain = 162 / 4094 = 0.03957010258915483
pruning-in-iteration extra time: 5.6743621826171875e-05
Time: prepare 0.0591    bound 0.2035    transfer 0.0236    finalize 0.0182    func 0.3054    
Accumulated time: func 0.7999    prepare 0.1132    bound 0.6100    transfer 0.0408    finalize 0.0350    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05175 (12), -0.05071 (12), -0.05000 (12), -0.04950 (12), -0.04895 (12), -0.04890 (12), -0.04879 (12), -0.04872 (12), -0.04830 (12), -0.04826 (12), -0.04789 (12), -0.04786 (12), -0.04780 (12), -0.04774 (12), -0.04772 (12), -0.04766 (12), -0.04727 (12), -0.04715 (12), -0.04709 (12), -0.04704 (12), 
Length of domains: 3932
Time: pickout 0.0209    decision 0.2338    set_bounds 0.0933    solve 0.3061    add 0.0154    
Accumulated time: pickout 0.0373    decision 0.3847    set_bounds 0.1905    solve 0.8013    add 0.0439    
Current (lb-rhs): -0.05175039917230606
7771 domains visited
Cumulative time: 1.4701755046844482

BaB round 6
batch: 3932
splitting decisions: 
split level 0: [/input-8, 1446] [/input-8, 1446] [/input-8, 1446] [/input-8, 1446] [/input-8, 1446] [/input-8, 1446] [/input-8, 1446] [/input-8, 1446] [/input-8, 1446] [/input-8, 1446] 
pruning_in_iteration open status: False
ratio of positive domain = 250 / 7864 = 0.03179043743641907
pruning-in-iteration extra time: 5.7220458984375e-05
Time: prepare 0.1273    bound 0.3481    transfer 0.0370    finalize 0.0353    func 0.5492    
Accumulated time: func 1.3491    prepare 0.2408    bound 0.9581    transfer 0.0778    finalize 0.0703    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05073 (13), -0.04972 (13), -0.04921 (13), -0.04887 (13), -0.04841 (13), -0.04813 (13), -0.04793 (13), -0.04785 (13), -0.04781 (13), -0.04777 (13), -0.04770 (13), -0.04726 (13), -0.04723 (13), -0.04692 (13), -0.04685 (13), -0.04684 (13), -0.04680 (13), -0.04680 (13), -0.04676 (13), -0.04671 (13), 
Length of domains: 7612
Time: pickout 0.0392    decision 0.3675    set_bounds 0.3260    solve 0.5506    add 0.0286    
Accumulated time: pickout 0.0765    decision 0.7521    set_bounds 0.5165    solve 1.3519    add 0.0725    
Current (lb-rhs): -0.05073188245296478
15383 domains visited
Cumulative time: 2.796081304550171

BaB round 7
batch: 4096
splitting decisions: 
split level 0: [/input-8, 542] [/input-8, 542] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] 
pruning_in_iteration open status: False
ratio of positive domain = 1378 / 8192 = 0.168212890625
pruning-in-iteration extra time: 6.67572021484375e-05
Time: prepare 0.1345    bound 0.3584    transfer 0.0489    finalize 0.0384    func 0.5816    
Accumulated time: func 1.9307    prepare 0.3756    bound 1.3166    transfer 0.1268    finalize 0.1087    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05073 (13), -0.04972 (13), -0.04887 (13), -0.04876 (14), -0.04841 (13), -0.04785 (13), -0.04781 (14), -0.04781 (13), -0.04777 (13), -0.04770 (13), -0.04757 (14), -0.04726 (13), -0.04723 (13), -0.04684 (13), -0.04680 (13), -0.04680 (13), -0.04676 (13), -0.04671 (13), -0.04670 (13), -0.04663 (14), 
Length of domains: 10300
Time: pickout 0.0499    decision 0.2462    set_bounds 0.4157    solve 0.5830    add 0.0452    
Accumulated time: pickout 0.1263    decision 0.9983    set_bounds 0.9322    solve 1.9349    add 0.1178    
Current (lb-rhs): -0.05073188245296478
22167 domains visited
current_vram/total_varm: 24.7GB/99.9GB, batch_size increase to 8192
Cumulative time: 4.148227691650391

BaB round 8
batch: 8192
splitting decisions: 
split level 0: [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] 
pruning_in_iteration open status: False
ratio of positive domain = 1701 / 16384 = 0.10382080078125
pruning-in-iteration extra time: 0.00010371208190917969
Time: prepare 0.2646    bound 0.6743    transfer 0.0892    finalize 0.0919    func 1.1215    
Accumulated time: func 3.0522    prepare 0.6405    bound 1.9909    transfer 0.2160    finalize 0.2007    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05073 (13), -0.04972 (13), -0.04887 (13), -0.04841 (13), -0.04787 (15), -0.04785 (13), -0.04777 (13), -0.04770 (13), -0.04737 (14), -0.04737 (15), -0.04726 (13), -0.04723 (13), -0.04692 (15), -0.04680 (13), -0.04676 (13), -0.04671 (13), -0.04670 (13), -0.04668 (15), -0.04653 (14), -0.04641 (15), 
Length of domains: 16748
Time: pickout 0.0886    decision 0.6613    set_bounds 0.5642    solve 1.1248    add 0.0618    
Accumulated time: pickout 0.2149    decision 1.6596    set_bounds 1.4964    solve 3.0597    add 0.1795    
Current (lb-rhs): -0.05073188245296478
36807 domains visited
current_vram/total_varm: 30.3GB/99.9GB, batch_size increase to 16384
Cumulative time: 6.670104265213013

BaB round 9
batch: 16384
splitting decisions: 
split level 0: [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] 
pruning_in_iteration open status: False
ratio of positive domain = 2053 / 32768 = 0.062652587890625
pruning-in-iteration extra time: 0.0002117156982421875
Time: prepare 0.5287    bound 1.3024    transfer 0.1794    finalize 0.1848    func 2.1972    
Accumulated time: func 5.2495    prepare 1.1695    bound 3.2932    transfer 0.3954    finalize 0.3855    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05073 (13), -0.04972 (13), -0.04887 (13), -0.04841 (13), -0.04785 (13), -0.04777 (13), -0.04770 (13), -0.04726 (13), -0.04723 (13), -0.04702 (16), -0.04680 (13), -0.04676 (13), -0.04671 (13), -0.04670 (13), -0.04658 (16), -0.04653 (16), -0.04643 (15), -0.04626 (13), -0.04613 (13), -0.04606 (16), 
Length of domains: 31033
Time: pickout 0.1677    decision 1.8851    set_bounds 1.4644    solve 2.2029    add 0.1043    
Accumulated time: pickout 0.3826    decision 3.5448    set_bounds 2.9607    solve 5.2626    add 0.2839    
Current (lb-rhs): -0.05073188245296478
67476 domains visited
current_vram/total_varm: 30.3GB/99.9GB, batch_size increase to 32768
Cumulative time: 12.528011322021484

BaB round 10
batch: 31033
splitting decisions: 
split level 0: [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] 
pruning_in_iteration open status: False
ratio of positive domain = 2249 / 62066 = 0.03623562014629589
pruning-in-iteration extra time: 0.00040030479431152344
Time: prepare 0.9857    bound 2.4313    transfer 0.4604    finalize 0.7982    func 4.6786    
Accumulated time: func 9.9281    prepare 2.1556    bound 5.7246    transfer 0.8558    finalize 1.1837    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05035 (14), -0.04945 (14), -0.04854 (14), -0.04790 (14), -0.04763 (14), -0.04738 (14), -0.04731 (14), -0.04687 (14), -0.04685 (14), -0.04651 (14), -0.04648 (14), -0.04632 (14), -0.04632 (14), -0.04610 (17), -0.04598 (14), -0.04574 (14), -0.04565 (17), -0.04561 (17), -0.04557 (14), -0.04553 (17), 
Length of domains: 59727
Time: pickout 0.3274    decision 3.4476    set_bounds 2.4113    solve 4.6891    add 0.1866    
Accumulated time: pickout 0.7100    decision 6.9924    set_bounds 5.3720    solve 9.9517    add 0.4705    
Current (lb-rhs): -0.050353869795799255
127203 domains visited
Cumulative time: 23.652388095855713

BaB round 11
batch: 32768
splitting decisions: 
split level 0: [/input-8, 1260] [/input-8, 1260] [/input-8, 1260] [/input-8, 1260] [/input-8, 1260] [/input-8, 1260] [/input-8, 1260] [/input-8, 1260] [/input-8, 1260] [/input-8, 1260] 
pruning_in_iteration open status: False
ratio of positive domain = 2072 / 65536 = 0.0316162109375
pruning-in-iteration extra time: 0.00041866302490234375
Time: prepare 1.0450    bound 7.7542    transfer 0.4899    finalize 0.4361    func 9.7284    
Accumulated time: func 19.6565    prepare 3.2010    bound 13.4788    transfer 1.3457    finalize 1.6198    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05035 (14), -0.04945 (14), -0.04854 (14), -0.04790 (14), -0.04763 (14), -0.04738 (14), -0.04731 (14), -0.04687 (14), -0.04685 (14), -0.04651 (14), -0.04648 (14), -0.04632 (14), -0.04632 (14), -0.04610 (17), -0.04598 (14), -0.04574 (14), -0.04565 (17), -0.04561 (17), -0.04557 (14), -0.04551 (16), 
Length of domains: 90340
Time: pickout 0.3523    decision 3.3193    set_bounds 2.4401    solve 10.3111    add 0.2662    
Accumulated time: pickout 1.0623    decision 10.3116    set_bounds 7.8121    solve 20.2628    add 0.7367    
Current (lb-rhs): -0.050353869795799255
190584 domains visited
Cumulative time: 40.39931631088257

BaB round 12
batch: 32768
splitting decisions: 
split level 0: [/input-8, 933] [/input-8, 933] [/input-8, 933] [/input-8, 933] [/input-8, 933] [/input-8, 933] [/input-8, 933] [/input-8, 933] [/input-8, 933] [/input-8, 933] 
pruning_in_iteration open status: False
ratio of positive domain = 2379 / 65536 = 0.0363006591796875
pruning-in-iteration extra time: 0.0004477500915527344
Time: prepare 1.0660    bound 7.7561    transfer 0.4995    finalize 0.4595    func 9.7840    
Accumulated time: func 29.4405    prepare 4.2674    bound 21.2349    transfer 1.8452    finalize 2.0793    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05035 (14), -0.04945 (14), -0.04854 (14), -0.04790 (14), -0.04763 (14), -0.04738 (14), -0.04731 (14), -0.04687 (14), -0.04685 (14), -0.04651 (14), -0.04648 (14), -0.04632 (14), -0.04632 (14), -0.04610 (17), -0.04598 (14), -0.04574 (14), -0.04565 (17), -0.04561 (17), -0.04557 (14), -0.04551 (16), 
Length of domains: 120623
Time: pickout 0.3564    decision 3.3297    set_bounds 2.8018    solve 9.7942    add 0.2100    
Accumulated time: pickout 1.4187    decision 13.6414    set_bounds 10.6139    solve 30.0570    add 0.9466    
Current (lb-rhs): -0.050353869795799255
253635 domains visited
Cumulative time: 56.97074484825134

BaB round 13
batch: 32768
splitting decisions: 
split level 0: [/input-8, 340] [/input-8, 949] [/input-8, 949] [/input-8, 340] [/input-8, 340] [/input-8, 949] [/input-8, 949] [/input-8, 340] [/input-8, 340] [/input-8, 949] 
pruning_in_iteration open status: False
ratio of positive domain = 2615 / 65536 = 0.0399017333984375
pruning-in-iteration extra time: 0.00040149688720703125
Time: prepare 1.0567    bound 7.7587    transfer 0.4962    finalize 0.4412    func 9.7562    
Accumulated time: func 39.1967    prepare 5.3246    bound 28.9936    transfer 2.3414    finalize 2.5205    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05035 (14), -0.04945 (14), -0.04854 (14), -0.04790 (14), -0.04763 (14), -0.04738 (14), -0.04731 (14), -0.04687 (14), -0.04685 (14), -0.04651 (14), -0.04648 (14), -0.04632 (14), -0.04632 (14), -0.04610 (17), -0.04598 (14), -0.04574 (14), -0.04565 (17), -0.04561 (17), -0.04557 (14), -0.04551 (16), 
Length of domains: 150662
Time: pickout 0.4019    decision 3.7095    set_bounds 2.3596    solve 9.7661    add 0.2136    
Accumulated time: pickout 1.8206    decision 17.3508    set_bounds 12.9735    solve 39.8231    add 1.1602    
Current (lb-rhs): -0.050353869795799255
316442 domains visited
Cumulative time: 73.50648880004883

BaB round 14
batch: 32768
splitting decisions: 
split level 0: [/input-8, 340] [/input-8, 340] [/input-8, 340] [/input-8, 560] [/input-8, 540] [/input-8, 540] [/input-8, 340] [/input-8, 560] [/input-8, 340] [/input-8, 340] 
pruning_in_iteration open status: False
ratio of positive domain = 2869 / 65536 = 0.0437774658203125
pruning-in-iteration extra time: 0.00040531158447265625
Time: prepare 1.0562    bound 7.7544    transfer 0.4975    finalize 0.4500    func 9.7618    
Accumulated time: func 48.9585    prepare 6.3812    bound 36.7480    transfer 2.8389    finalize 2.9705    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05035 (14), -0.04945 (14), -0.04854 (14), -0.04790 (14), -0.04763 (14), -0.04738 (14), -0.04731 (14), -0.04687 (14), -0.04685 (14), -0.04651 (14), -0.04648 (14), -0.04632 (14), -0.04632 (14), -0.04610 (17), -0.04598 (14), -0.04574 (14), -0.04565 (17), -0.04561 (17), -0.04557 (14), -0.04551 (16), 
Length of domains: 180450
Time: pickout 0.4100    decision 3.8932    set_bounds 2.6075    solve 9.7715    add 0.2138    
Accumulated time: pickout 2.2306    decision 21.2440    set_bounds 15.5810    solve 49.5946    add 1.3740    
Current (lb-rhs): -0.050353869795799255
378998 domains visited
Cumulative time: 90.49274325370789

BaB round 15
batch: 32768
splitting decisions: 
split level 0: [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] 
pruning_in_iteration open status: False
ratio of positive domain = 4731 / 65536 = 0.0721893310546875
pruning-in-iteration extra time: 0.00038933753967285156
Time: prepare 1.0728    bound 7.7573    transfer 0.5106    finalize 1.6331    func 10.9762    
Accumulated time: func 59.9347    prepare 7.4546    bound 44.5053    transfer 3.3495    finalize 4.6036    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05035 (14), -0.04945 (14), -0.04854 (14), -0.04790 (14), -0.04763 (14), -0.04738 (14), -0.04731 (14), -0.04687 (14), -0.04685 (14), -0.04651 (14), -0.04648 (14), -0.04632 (14), -0.04632 (14), -0.04610 (17), -0.04598 (14), -0.04574 (14), -0.04565 (17), -0.04561 (17), -0.04557 (14), -0.04551 (16), 
Length of domains: 208230
Time: pickout 0.4394    decision 3.3736    set_bounds 2.7877    solve 10.9844    add 0.3046    
Accumulated time: pickout 2.6700    decision 24.6176    set_bounds 18.3687    solve 60.5790    add 1.6786    
Current (lb-rhs): -0.050353869795799255
439546 domains visited
Cumulative time: 108.48315167427063

BaB round 16
batch: 32768
splitting decisions: 
split level 0: [/input-8, 340] [/input-8, 340] [/input-8, 340] [/input-8, 340] [/input-8, 340] [/input-8, 540] [/input-8, 340] [/input-8, 340] [/input-8, 340] [/input-8, 560] 
pruning_in_iteration open status: False
ratio of positive domain = 2845 / 65536 = 0.0434112548828125
pruning-in-iteration extra time: 0.0004131793975830078
Time: prepare 1.0654    bound 7.7559    transfer 0.5193    finalize 0.4416    func 9.7849    
Accumulated time: func 69.7196    prepare 8.5205    bound 52.2612    transfer 3.8688    finalize 5.0452    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05035 (14), -0.04945 (14), -0.04854 (14), -0.04790 (14), -0.04763 (14), -0.04738 (14), -0.04731 (14), -0.04687 (14), -0.04685 (14), -0.04651 (14), -0.04648 (14), -0.04632 (14), -0.04632 (14), -0.04610 (17), -0.04598 (14), -0.04574 (14), -0.04565 (17), -0.04561 (17), -0.04557 (14), -0.04551 (16), 
Length of domains: 238065
Time: pickout 0.4237    decision 3.3694    set_bounds 3.1100    solve 9.7945    add 0.2202    
Accumulated time: pickout 3.0937    decision 27.9870    set_bounds 21.4787    solve 70.3734    add 1.8988    
Current (lb-rhs): -0.050353869795799255
502149 domains visited
Cumulative time: 125.49996042251587

BaB round 17
batch: 32768
splitting decisions: 
split level 0: [/input-8, 560] [/input, 586] [/input-8, 560] [/input-8, 560] [/input-8, 1252] [/input-8, 1252] [/input-8, 1252] [/input-8, 560] [/input-8, 1252] [/input-8, 560] 
pruning_in_iteration open status: False
ratio of positive domain = 3881 / 65536 = 0.0592193603515625
pruning-in-iteration extra time: 0.0004012584686279297
Time: prepare 1.0847    bound 7.7555    transfer 0.5547    finalize 0.4446    func 9.8427    
Accumulated time: func 79.5623    prepare 9.6056    bound 60.0167    transfer 4.4235    finalize 5.4898    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05035 (14), -0.04945 (14), -0.04854 (14), -0.04790 (14), -0.04763 (14), -0.04738 (14), -0.04731 (14), -0.04687 (14), -0.04685 (14), -0.04651 (14), -0.04648 (14), -0.04632 (14), -0.04632 (14), -0.04610 (17), -0.04598 (14), -0.04574 (14), -0.04565 (17), -0.04561 (17), -0.04557 (14), -0.04551 (16), 
Length of domains: 266703
Time: pickout 0.4483    decision 3.3919    set_bounds 3.1749    solve 9.8531    add 0.2230    
Accumulated time: pickout 3.5421    decision 31.3789    set_bounds 24.6535    solve 80.2265    add 2.1218    
Current (lb-rhs): -0.050353869795799255
563555 domains visited
Cumulative time: 142.69766092300415

BaB round 18
batch: 32768
splitting decisions: 
split level 0: [/input, 586] [/input-8, 560] [/input, 586] [/input-8, 560] [/input, 586] [/input-8, 560] [/input, 586] [/input-8, 1183] [/input-8, 1183] [/input-8, 1183] 
pruning_in_iteration open status: False
ratio of positive domain = 3370 / 65536 = 0.051422119140625
pruning-in-iteration extra time: 0.0004210472106933594
Time: prepare 1.1088    bound 7.7538    transfer 0.5712    finalize 0.4870    func 9.9276    
Accumulated time: func 89.4898    prepare 10.7149    bound 67.7705    transfer 4.9947    finalize 5.9768    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05035 (14), -0.04945 (14), -0.04854 (14), -0.04790 (14), -0.04763 (14), -0.04738 (14), -0.04731 (14), -0.04687 (14), -0.04685 (14), -0.04651 (14), -0.04648 (14), -0.04632 (14), -0.04632 (14), -0.04610 (17), -0.04598 (14), -0.04574 (14), -0.04565 (17), -0.04561 (17), -0.04557 (14), -0.04551 (16), 
Length of domains: 295878
Time: pickout 0.4640    decision 4.6587    set_bounds 1.5032    solve 9.9377    add 0.2249    
Accumulated time: pickout 4.0061    decision 36.0377    set_bounds 26.1567    solve 90.1642    add 2.3467    
Current (lb-rhs): -0.050353869795799255
625498 domains visited
Cumulative time: 159.5992841720581

BaB round 19
batch: 32768
splitting decisions: 
split level 0: [/input-8, 1252] [/input-8, 560] [/input-8, 1252] [/input-8, 1183] [/input-8, 560] [/input-8, 1252] [/input-8, 560] [/input-8, 1252] [/input-8, 560] [/input-8, 1252] 
pruning_in_iteration open status: False
ratio of positive domain = 2746 / 65536 = 0.041900634765625
pruning-in-iteration extra time: 0.00044798851013183594
Time: prepare 1.2133    bound 7.7553    transfer 0.5996    finalize 0.4919    func 10.0626    
Accumulated time: func 99.5524    prepare 11.9286    bound 75.5258    transfer 5.5942    finalize 6.4686    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05035 (14), -0.04945 (14), -0.04854 (14), -0.04790 (14), -0.04763 (14), -0.04738 (14), -0.04731 (14), -0.04687 (14), -0.04685 (14), -0.04651 (14), -0.04648 (14), -0.04632 (14), -0.04632 (14), -0.04610 (17), -0.04598 (14), -0.04574 (14), -0.04565 (17), -0.04561 (17), -0.04557 (14), -0.04551 (16), 
Length of domains: 325743
Time: pickout 0.4977    decision 5.3037    set_bounds 1.4679    solve 10.0731    add 0.2319    
Accumulated time: pickout 4.5038    decision 41.3413    set_bounds 27.6246    solve 100.2373    add 2.5787    
Current (lb-rhs): -0.050353869795799255
688131 domains visited
Cumulative time: 177.3231074810028

BaB round 20
batch: 32768
splitting decisions: 
split level 0: [/input, 586] [/input-8, 560] [/input, 586] [/input-8, 560] [/input, 586] [/input-8, 560] [/input, 586] [/input-8, 560] [/input, 586] [/input-8, 1183] 
pruning_in_iteration open status: False
ratio of positive domain = 2913 / 65536 = 0.0444488525390625
pruning-in-iteration extra time: 0.0003573894500732422
Time: prepare 1.4614    bound 7.7581    transfer 0.6335    finalize 0.4886    func 10.3462    
Accumulated time: func 109.8986    prepare 13.3905    bound 83.2839    transfer 6.2277    finalize 6.9572    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05035 (14), -0.04945 (14), -0.04854 (14), -0.04790 (14), -0.04763 (14), -0.04738 (14), -0.04731 (14), -0.04687 (14), -0.04685 (14), -0.04651 (14), -0.04648 (14), -0.04632 (14), -0.04632 (14), -0.04610 (17), -0.04598 (14), -0.04574 (14), -0.04565 (17), -0.04561 (17), -0.04557 (14), -0.04551 (16), 
Length of domains: 355409
Time: pickout 0.5515    decision 5.5665    set_bounds 1.1442    solve 10.3566    add 0.2396    
Accumulated time: pickout 5.0553    decision 46.9078    set_bounds 28.7688    solve 110.5940    add 2.8182    
Current (lb-rhs): -0.050353869795799255
750565 domains visited
Cumulative time: 195.32053780555725

BaB round 21
batch: 32768
splitting decisions: 
split level 0: [/input, 586] [/input-8, 1945] [/input-8, 1945] [/input-8, 1244] [/input-8, 1945] [/input-8, 1945] [/input-8, 1244] [/input-8, 1183] [/input-8, 1945] [/input-8, 1945] 
pruning_in_iteration open status: False
ratio of positive domain = 3176 / 65536 = 0.0484619140625
pruning-in-iteration extra time: 0.0004074573516845703
Time: prepare 1.4673    bound 7.7547    transfer 0.6737    finalize 0.4695    func 10.3699    
Accumulated time: func 120.2685    prepare 14.8581    bound 91.0386    transfer 6.9014    finalize 7.4267    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05035 (14), -0.04945 (14), -0.04854 (14), -0.04790 (14), -0.04763 (14), -0.04738 (14), -0.04731 (14), -0.04687 (14), -0.04685 (14), -0.04651 (14), -0.04648 (14), -0.04632 (14), -0.04632 (14), -0.04610 (17), -0.04598 (14), -0.04574 (14), -0.04565 (17), -0.04561 (17), -0.04557 (14), -0.04551 (16), 
Length of domains: 384812
Time: pickout 0.6339    decision 5.3687    set_bounds 1.4361    solve 10.3812    add 0.2435    
Accumulated time: pickout 5.6892    decision 52.2765    set_bounds 30.2050    solve 120.9751    add 3.0617    
Current (lb-rhs): -0.050353869795799255
812736 domains visited
Time out!!!!!!!!
Result: unknown in 217.0129 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 68, vnnlib ID: 68 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.71828079, -12.07358360,  -7.51085901,  -7.73513126,  -5.85087204,
          -7.76494551,  -8.30688477,  -4.66740465, -11.87115002, -11.40974522]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [561]; unstable size 561; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 561] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 561] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 561] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 170] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.23245525, 6.33307791, 2.35018516, 2.53250074, 0.82198715, 2.56909728,
         2.92734623, 6.26307011, 5.81518650]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0655 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 69, vnnlib ID: 69 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.44977188,  -9.06816578,  -8.76676846, -10.00036716,  -8.16498661,
         -10.20727444, -10.19177628,  -9.06856728,  -5.60935688,  -8.05991840]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [446]; unstable size 446; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 151, 1, 446] with unstable size 150 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 446] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 446] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [150]; unstable size 150; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 150] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 150] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.39624709, 2.77556896, 2.57724094, 3.80850053, 2.01538920, 4.00958395,
         3.97526073, 2.81353402, 1.83315921]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0652 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 70, vnnlib ID: 70 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.04652691, -11.10261822,  -7.86249161,  -8.90385628,  -7.35591507,
          -8.96246243,  -6.67423820,  -9.53345776, -12.04738331, -11.83759594]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [415]; unstable size 415; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 415] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 415] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 415] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 139] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.83799791, 3.77172470, 0.92177504, 1.93019569, 0.40763259, 1.98125422,
         2.40290666, 4.67680836, 4.50188541]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0263 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 71, vnnlib ID: 71 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.33996439, -6.41871643, -5.27160645, -5.78144073, -5.19606686,
         -5.95623350, -5.03869438, -5.45932245, -5.23290539, -6.04166842]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [442]; unstable size 442; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 147, 1, 442] with unstable size 146 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 442] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 442] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 146] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.31949663, 1.40748453, 1.74333322, 1.23676848, 1.91310024, 1.10932422,
         1.36478341, 1.55591130, 2.01130962]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0589 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 72, vnnlib ID: 72 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.12939644, -9.72904682, -5.54302311, -6.04563618, -5.96231461,
         -6.23193979, -5.71355343, -6.85170698, -7.76404381, -8.90234089]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [423]; unstable size 423; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 202, 1, 423] with unstable size 201 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 423] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 423] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [201]; unstable size 201; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 201] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 201] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.53611326,  2.83135986, -0.80475771, -0.42034233,  0.15137629,
         -0.61510229,  0.28265774,  0.83452570,  1.97465420]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.12939644, -9.72904682, -5.54302311, -6.04563618, -5.96231461,
         -6.23193979, -5.71355343, -6.85170698, -7.76404381, -8.90234089]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.12939644, -9.72904778, -5.54302359, -6.04563808, -5.96231556,
          -6.23194075, -5.71355438, -6.85170746, -7.76404476, -8.90234089],
         [-6.12939644, -9.72904778, -5.54302359, -6.04563808, -5.96231556,
          -6.23194075, -5.71355438, -6.85170746, -7.76404476, -8.90234089]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.08375835, -0.50261450, -0.08332253, -0.33208370]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]],


         [[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]],


         [[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]],


         [[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0617 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 73, vnnlib ID: 73 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.04236412, -15.83466625, -11.57055759, -12.04814053, -11.33596802,
         -12.07632923, -10.29791260, -13.00263977, -15.47680664, -15.46460438]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [504]; unstable size 504; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 504] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 504] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 504] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 239] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.98187876, 4.42113018, 0.88485694, 1.34177840, 0.68826008, 1.36417818,
         2.12291312, 4.03281116, 4.06385612]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0304 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 74, vnnlib ID: 74 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.82596016, -8.01462746, -5.61366749, -5.94512081, -4.99872208,
         -6.00526476, -5.77766132, -3.03901243, -9.93118095, -6.94092846]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [450]; unstable size 450; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 450] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 450] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 450] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 141] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.08748531, 3.92924929, 2.12131405, 2.35519171, 1.63135076, 2.42033029,
         2.09290028, 5.92347908, 2.98009205]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0625 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 75, vnnlib ID: 75 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.71775055, -8.71694279, -8.45971107, -9.68828869, -8.52095413,
         -9.86249352, -9.58036518, -8.48355675, -7.19637108, -7.55859327]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [433]; unstable size 433; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 433] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 433] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 433] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 170] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.48584533, 1.32305861, 2.39883709, 1.24146867, 2.56375122, 2.28119946,
         1.11799204, 0.07952994, 0.28410673]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0582 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 76, vnnlib ID: 76 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.67823887, -8.79199886, -4.26914644, -4.69909000, -4.87025404,
         -4.79431295, -5.06131744, -5.80675077, -8.86075783, -8.01763248]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [469]; unstable size 469; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 469] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 469] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 469] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 153] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.32742643,  3.28234124, -0.82947564, -0.11151652, -0.27848172,
         -0.02716172,  0.58209586,  3.50851631,  2.55930853]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.67823887, -8.79199886, -4.26914644, -4.69909000, -4.87025404,
         -4.79431295, -5.06131744, -5.80675077, -8.86075783, -8.01763248]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.67823887, -8.79199982, -4.26914644, -4.69909000, -4.87025356,
          -4.79431295, -5.06131649, -5.80675030, -8.86075783, -8.01763248],
         [-6.67823887, -8.79199982, -4.26914644, -4.69909000, -4.87025356,
          -4.79431295, -5.06131649, -5.80675030, -8.86075783, -8.01763248]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.52516651, -0.09522295,  0.07594061,  0.26700354]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]],


         [[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]],


         [[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]],


         [[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0706 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 77, vnnlib ID: 77 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.94152546,  -9.43132877, -11.42302418, -12.00805473, -11.48972893,
         -12.21064949, -12.50059700, -12.93048859,  -7.66620636,  -8.89758873]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [513]; unstable size 513; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 162, 1, 513] with unstable size 161 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 513] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 513] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [161]; unstable size 161; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 161] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 161] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.39024830,  0.27186391,  1.95888186,  2.51927996,  2.04223776,
          2.70385861,  2.90191841,  3.45087051, -1.63618660]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.94152546,  -9.43132877, -11.42302418, -12.00805473, -11.48972893,
         -12.21064949, -12.50059700, -12.93048859,  -7.66620636,  -8.89758873]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.94152737,  -9.43132782, -11.42302322, -12.00805569, -11.48972893,
          -12.21065044, -12.50059700, -12.93048954,  -7.66620636,  -8.89758873],
         [ -8.94152737,  -9.43132782, -11.42302322, -12.00805569, -11.48972893,
          -12.21065044, -12.50059700, -12.93048954,  -7.66620636,  -8.89758873]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.04393864, -1.23138237]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.32222211e+00, -1.32222211e+00, -1.29047608e+00,  ...,
            -1.33809519e+00, -1.33809519e+00, -1.33809519e+00],
           [-1.27460313e+00, -1.27460313e+00, -1.25873005e+00,  ...,
            -1.29047608e+00, -1.29047608e+00, -1.29047608e+00],
           [-1.22698402e+00, -1.24285710e+00, -1.24285710e+00,  ...,
            -1.25873005e+00, -1.25873005e+00, -1.27460313e+00],
           ...,
           [ 9.04762819e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.69841349e-01,  1.06349289e-01,  7.46032670e-02],
           [ 7.46032670e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.06349289e-01,  7.46032670e-02, -5.23808524e-02],
           [-4.76180762e-03,  1.11112073e-02,  4.28572372e-02,  ...,
            -4.76180762e-03, -3.65078375e-02, -1.47618949e-01]],

          [[-2.41545767e-01, -2.73751885e-01, -2.41545767e-01,  ...,
            -2.89854944e-01, -2.89854944e-01, -2.89854944e-01],
           [-1.93236589e-01, -2.09339648e-01, -1.93236589e-01,  ...,
            -2.25442708e-01, -2.25442708e-01, -2.25442708e-01],
           [-1.61030471e-01, -1.93236589e-01, -1.61030471e-01,  ...,
            -2.09339648e-01, -2.09339648e-01, -2.09339648e-01],
           ...,
           [ 1.44927651e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             8.05154145e-02,  3.22062373e-02,  3.22062373e-02],
           [ 1.28824592e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             1.61031820e-02,  1.22934580e-07, -3.22059989e-02],
           [ 3.22062373e-02,  4.83092964e-02,  8.05154145e-02,  ...,
            -4.83090580e-02, -6.44121096e-02, -1.12721294e-01]],

          [[ 7.21139610e-01,  6.91154599e-01,  7.06147075e-01,  ...,
             6.76162124e-01,  6.76162124e-01,  6.76162124e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.81109631e-01,  ...,
             7.36132085e-01,  7.36132085e-01,  7.36132085e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.66117096e-01,  ...,
             7.51124620e-01,  7.36132085e-01,  7.36132085e-01],
           ...,
           [ 6.14694245e-02,  3.14844176e-02,  6.14694245e-02,  ...,
             1.64919142e-02, -1.34930937e-02,  1.49940979e-03],
           [ 4.64769229e-02,  3.14844176e-02,  6.14694245e-02,  ...,
            -2.84855980e-02, -4.34781015e-02, -7.34631121e-02],
           [-2.84855980e-02, -1.34930937e-02,  1.64919142e-02,  ...,
            -8.84556174e-02, -1.18440613e-01, -1.63418129e-01]]],


         [[[-1.32222211e+00, -1.32222211e+00, -1.29047608e+00,  ...,
            -1.33809519e+00, -1.33809519e+00, -1.33809519e+00],
           [-1.27460313e+00, -1.27460313e+00, -1.25873005e+00,  ...,
            -1.29047608e+00, -1.29047608e+00, -1.29047608e+00],
           [-1.22698402e+00, -1.24285710e+00, -1.24285710e+00,  ...,
            -1.25873005e+00, -1.25873005e+00, -1.27460313e+00],
           ...,
           [ 9.04762819e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.69841349e-01,  1.06349289e-01,  7.46032670e-02],
           [ 7.46032670e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.06349289e-01,  7.46032670e-02, -5.23808524e-02],
           [-4.76180762e-03,  1.11112073e-02,  4.28572372e-02,  ...,
            -4.76180762e-03, -3.65078375e-02, -1.47618949e-01]],

          [[-2.41545767e-01, -2.73751885e-01, -2.41545767e-01,  ...,
            -2.89854944e-01, -2.89854944e-01, -2.89854944e-01],
           [-1.93236589e-01, -2.09339648e-01, -1.93236589e-01,  ...,
            -2.25442708e-01, -2.25442708e-01, -2.25442708e-01],
           [-1.61030471e-01, -1.93236589e-01, -1.61030471e-01,  ...,
            -2.09339648e-01, -2.09339648e-01, -2.09339648e-01],
           ...,
           [ 1.44927651e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             8.05154145e-02,  3.22062373e-02,  3.22062373e-02],
           [ 1.28824592e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             1.61031820e-02,  1.22934580e-07, -3.22059989e-02],
           [ 3.22062373e-02,  4.83092964e-02,  8.05154145e-02,  ...,
            -4.83090580e-02, -6.44121096e-02, -1.12721294e-01]],

          [[ 7.21139610e-01,  6.91154599e-01,  7.06147075e-01,  ...,
             6.76162124e-01,  6.76162124e-01,  6.76162124e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.81109631e-01,  ...,
             7.36132085e-01,  7.36132085e-01,  7.36132085e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.66117096e-01,  ...,
             7.51124620e-01,  7.36132085e-01,  7.36132085e-01],
           ...,
           [ 6.14694245e-02,  3.14844176e-02,  6.14694245e-02,  ...,
             1.64919142e-02, -1.34930937e-02,  1.49940979e-03],
           [ 4.64769229e-02,  3.14844176e-02,  6.14694245e-02,  ...,
            -2.84855980e-02, -4.34781015e-02, -7.34631121e-02],
           [-2.84855980e-02, -1.34930937e-02,  1.64919142e-02,  ...,
            -8.84556174e-02, -1.18440613e-01, -1.63418129e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0519 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 78, vnnlib ID: 78 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.31059456, -9.19869709, -6.36061764, -5.86587429, -6.10512066,
         -5.87761021, -5.44350815, -7.33536816, -9.65457726, -9.34368134]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [529]; unstable size 529; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 279, 1, 529] with unstable size 278 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 529] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 529] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [278]; unstable size 278; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 278] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 278] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.59141195,  2.18968081,  0.02786517, -0.24016380, -0.01105538,
         -0.84800041,  0.91358447,  2.79599810,  2.43839049]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.31059456, -9.19869709, -6.36061764, -5.86587429, -6.10512066,
         -5.87761021, -5.44350815, -7.33536816, -9.65457726, -9.34368134]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.31059361, -9.19869709, -6.36061716, -5.86587334, -6.10511971,
          -5.87760925, -5.44350719, -7.33536768, -9.65457630, -9.34368038],
         [-8.31059361, -9.19869709, -6.36061716, -5.86587334, -6.10511971,
          -5.87760925, -5.44350719, -7.33536768, -9.65457630, -9.34368038]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.23924637,  0.01173592, -0.42236614]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0588 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 79, vnnlib ID: 79 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.56623745, -11.41576767, -10.07493591,  -9.61873627,  -8.49861526,
          -9.59471893, -10.02411652,  -5.97250652, -15.06334496, -10.70611000]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [380]; unstable size 380; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 380] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 380] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 380] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 170] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.77624798, 4.21953011, 3.57391572, 2.98815489, 2.16194510, 2.97055149,
         3.34188223, 7.80460072, 3.62507772]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0504 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 80, vnnlib ID: 80 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965576,
         -7.48542309, -5.95269966, -6.55542850, -6.95760822, -7.28021479]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [718]; unstable size 718; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 226, 1, 718] with unstable size 225 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 718] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 718] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [225]; unstable size 225; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 225] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 225] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.73039460, -0.79011106,  0.57272565, -1.24159360,  0.72255599,
         -0.83794022, -0.30544665,  0.50340199,  0.65051746]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965576,
         -7.48542309, -5.95269966, -6.55542850, -6.95760822, -7.28021479]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965672,
          -7.48542261, -5.95269966, -6.55542803, -6.95760727, -7.28021431],
         [-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965672,
          -7.48542261, -5.95269966, -6.55542803, -6.95760727, -7.28021431]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.17822742, -0.57796001, -0.08491707,  0.51781130]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0440 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 81, vnnlib ID: 81 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.97952795, -8.99672222, -2.56834173, -6.00308132, -2.85744190,
         -6.12038279, -4.47296047, -6.33899212, -7.67273140, -9.32237816]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [671]; unstable size 671; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 139, 1, 671] with unstable size 138 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 671] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 671] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [138]; unstable size 138; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 138] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.03369808, 5.73617172, 3.16968560, 0.11967242, 3.28296471, 1.49780846,
         3.40163088, 4.61310005, 6.06763172]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0437 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 82, vnnlib ID: 82 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.72943306, -13.36404133, -10.46452236, -10.18775558, -10.67775059,
         -10.31442547, -10.42091751, -12.09385109, -14.04162884, -12.43282795]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [519]; unstable size 519; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 208, 1, 519] with unstable size 207 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 519] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 519] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [207]; unstable size 207; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 207] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 207] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.77904427,  2.09425759, -0.17746937, -0.14749081, -0.04247403,
         -0.25705299,  1.25096059,  2.87834263,  1.30093026]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.72943306, -13.36404133, -10.46452236, -10.18775558, -10.67775059,
         -10.31442547, -10.42091751, -12.09385109, -14.04162884, -12.43282795]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.72943401, -13.36404228, -10.46452332, -10.18775558, -10.67775154,
          -10.31442547, -10.42091846, -12.09385109, -14.04162884, -12.43282604],
         [-12.72943401, -13.36404228, -10.46452332, -10.18775558, -10.67775154,
          -10.31442547, -10.42091846, -12.09385109, -14.04162884, -12.43282604]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.15009785, -0.12666988,  0.36332607,  0.10649300]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0481 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 83, vnnlib ID: 83 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.06531239,  -7.74203110,  -9.88070679,  -9.82949257,  -9.60023689,
          -9.98339939, -10.37213230,  -9.42480564,  -7.49855232,  -6.63923311]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [475]; unstable size 475; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 176, 1, 475] with unstable size 175 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 475] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 475] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [175]; unstable size 175; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 175] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 175] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.84191799, 0.84316355, 2.53841209, 2.50968981, 2.26216412, 2.65042353,
         3.05267382, 2.06743336, 0.15342236]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0334 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 84, vnnlib ID: 84 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.73141861, -11.30915737,  -4.88030291,  -7.12666321,  -4.79732800,
          -7.23894691,  -4.88668823,  -8.34137917, -11.50362206, -11.30148792]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [430]; unstable size 430; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 148, 1, 430] with unstable size 147 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 430] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 430] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [147]; unstable size 147; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 147] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.51234388,  5.89082623, -0.09712327,  2.02813911,  2.13893557,
         -0.29849374,  3.28444505,  6.09165335,  5.92712975]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.73141861, -11.30915737,  -4.88030291,  -7.12666321,  -4.79732800,
          -7.23894691,  -4.88668823,  -8.34137917, -11.50362206, -11.30148792]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.57346249, -11.22899342,  -4.74797535,  -7.02396488,  -4.79112053,
           -7.14028025,  -4.77940559,  -8.43676853, -11.36150742, -11.23217297],
         [ -8.57346249, -11.22899342,  -4.74797535,  -7.02396488,  -4.79112053,
           -7.14028025,  -4.77940559,  -8.43676853, -11.36150742, -11.23217297]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04314518, -0.01171494]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0138 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0749 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 85, vnnlib ID: 85 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.23663616,  -7.30285454, -10.59052181, -11.18651009,  -9.79314327,
         -11.32224941, -10.81732941, -10.63050747,  -8.28581619,  -8.59702969]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [473]; unstable size 473; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 473] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 473] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 473] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 188] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.20088053, 2.32582426, 2.93002009, 1.51514006, 3.04989552, 2.44549084,
         2.25616550, 0.37113976, 1.01464093]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0589 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 86, vnnlib ID: 86 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.20327091, -13.29206181, -10.09174442, -10.56737804, -10.67555809,
         -10.55320644, -10.67248249, -11.32285500, -14.20694542, -13.81692600]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 540] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 540] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 159] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.68249464, 2.60424280, 0.24534416, 0.40565336, 0.23199639, 0.28501642,
         0.98760176, 3.62160492, 3.12635517]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0441 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 87, vnnlib ID: 87 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.88856792, -8.49503231, -5.36369038, -4.94106483, -4.84540939,
         -4.91523314, -4.41490841, -5.03733397, -9.81567383, -8.20178318]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [406]; unstable size 406; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 406] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 406] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 406] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 177] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.21111035,  2.55126286, -0.03250980, -0.36227441, -0.47769570,
         -0.38185108, -1.15160513,  3.89880323,  2.32914209]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.88856792, -8.49503231, -5.36369038, -4.94106483, -4.84540939,
         -4.91523314, -4.41490841, -5.03733397, -9.81567383, -8.20178318]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.88856697, -8.49503231, -5.36369038, -4.94106483, -4.84540987,
          -4.91523314, -4.41490841, -5.03733492, -9.81567383, -8.20178318],
         [-8.88856697, -8.49503231, -5.36369038, -4.94106483, -4.84540987,
          -4.91523314, -4.41490841, -5.03733492, -9.81567383, -8.20178318]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.32635546, -0.09627008, -0.19192505, -0.12210178, -0.62242651]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0703 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 88, vnnlib ID: 88 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.65746784, -6.18078041, -1.80823123, -1.86352706, -2.33689523,
         -1.93374062, -3.13896918, -1.17628169, -6.39098358, -3.11623693]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [313]; unstable size 313; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 117, 1, 313] with unstable size 116 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 313] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 313] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [116]; unstable size 116; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 116] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 116] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.51907623,  3.67257833, -0.19120371,  0.28516862, -0.12094021,
          0.99198157, -0.98088288,  3.95130277,  0.65798235]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.65746784, -6.18078041, -1.80823123, -1.86352706, -2.33689523,
         -1.93374062, -3.13896918, -1.17628169, -6.39098358, -3.11623693]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.65746784, -6.18078041, -1.80823135, -1.86352754, -2.33689499,
          -1.93374085, -3.13896894, -1.17628217, -6.39098454, -3.11623693],
         [-3.65746784, -6.18078041, -1.80823135, -1.86352754, -2.33689499,
          -1.93374085, -3.13896894, -1.17628217, -6.39098454, -3.11623693]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.05529618,  0.12550950, -0.63194919]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0402 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 89, vnnlib ID: 89 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.67684555, -4.17685509, -7.04651976, -7.85120487, -7.47941399,
         -7.95128965, -7.51899147, -8.40921116, -3.84111595, -5.26576757]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [462]; unstable size 462; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 180, 1, 462] with unstable size 179 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 462] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 462] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [179]; unstable size 179; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 179] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 179] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.67029428,  1.91223335,  2.76860142,  2.38123465,  2.85544062,
          2.41773987,  3.34567499, -0.93968225,  0.84438074]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.67684555, -4.17685509, -7.04651976, -7.85120487, -7.47941399,
         -7.95128965, -7.51899147, -8.40921116, -3.84111595, -5.26576757]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.67684555, -4.17685509, -7.04651976, -7.85120487, -7.47941399,
          -7.95128965, -7.51899147, -8.40921116, -3.84111595, -5.26576757]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.33573914]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.73492062, -1.67142856, -1.65555561,  ..., -0.27460307,
            -0.32222211, -0.24285704],
           [-1.09999990, -0.90952379, -0.89365077,  ...,  0.02698422,
            -0.22698402, -0.35396814],
           [-0.70317459, -0.57619047, -0.73492062,  ...,  0.09047628,
            -0.08412688, -0.16349196],
           ...,
           [ 0.64603180,  0.61428577,  0.63015878,  ..., -1.86190474,
            -1.81428576, -1.52857137],
           [ 0.61428577,  0.55079371,  0.56666672,  ..., -1.70317459,
            -1.36984122, -0.87777776],
           [ 0.01111121, -0.17936498, -0.24285704,  ..., -0.98888886,
            -0.78253967, -0.62380952]],

          [[-1.64251208, -1.57809973, -1.56199670,  ..., -0.70853460,
            -0.77294683, -0.67632848],
           [-0.86956519, -0.67632848, -0.66022539,  ..., -0.59581316,
            -0.78904986, -0.83735907],
           [-0.33816412, -0.20933965, -0.35426718,  ..., -0.62801927,
            -0.74074072, -0.69243151],
           ...,
           [ 0.64412248,  0.62801939,  0.64412248,  ..., -1.77133656,
            -1.72302747, -1.44927526],
           [ 0.64412248,  0.57971025,  0.59581327,  ..., -1.64251208,
            -1.32045078, -0.80515295],
           [ 0.11272153, -0.08051517, -0.16103047,  ..., -0.95008045,
            -0.74074072, -0.59581316]],

          [[-1.28785622, -1.22788620, -1.21289361,  ..., -0.56821585,
            -0.67316341, -0.59820086],
           [-0.43328333, -0.25337315, -0.23838064,  ..., -0.47826082,
            -0.70314842, -0.76311839],
           [ 0.16641696,  0.28635699,  0.13643195,  ..., -0.56821585,
            -0.68815589, -0.62818587],
           ...,
           [ 0.61619210,  0.60119957,  0.61619210,  ..., -1.46776617,
            -1.40779614, -1.15292358],
           [ 0.66116959,  0.60119957,  0.61619210,  ..., -1.36281872,
            -1.04797614, -0.58320838],
           [ 0.24137947,  0.06146942, -0.01349309,  ..., -0.73313338,
            -0.53823084, -0.40329832]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0543 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 90, vnnlib ID: 90 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.84198666, -4.72074509, -2.69757771, -2.34419656, -2.72111034,
         -2.42904544, -2.38987303, -3.45313597, -5.43384743, -4.25232363]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [597]; unstable size 597; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 597] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 597] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 597] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 203] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.79418397,  1.27176428, -0.11254001, -0.41002411, -0.13396978,
         -0.34127313,  0.48139536,  2.23571205,  0.95288706]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.84198666, -4.72074509, -2.69757771, -2.34419656, -2.72111034,
         -2.42904544, -2.38987303, -3.45313597, -5.43384743, -4.25232363]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.84198666, -4.72074509, -2.69757748, -2.34419608, -2.72111011,
          -2.42904544, -2.38987303, -3.45313621, -5.43384695, -4.25232363],
         [-4.84198666, -4.72074509, -2.69757748, -2.34419608, -2.72111011,
          -2.42904544, -2.38987303, -3.45313621, -5.43384695, -4.25232363]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.30770445, -0.04567695,  0.33123708,  0.03917241]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0588 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 91, vnnlib ID: 91 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.19456577,  -8.36557293, -13.55558205, -13.23456478, -12.32262707,
         -13.37201500, -13.57000160, -12.17472267, -11.16325188,  -8.78851414]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [588]; unstable size 588; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 143, 1, 588] with unstable size 142 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 588] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 588] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [142]; unstable size 142; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 142] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.16457844, 4.29507446, 3.98237896, 3.06007886, 4.11273384, 4.28068447,
         2.84930611, 2.22545958, 0.24410954]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0623 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 92, vnnlib ID: 92 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.71225262, -12.01007652,  -8.29110718,  -7.58899784,  -8.32572460,
          -7.52227640,  -8.05987549,  -8.91144371, -14.67064476, -11.80937672]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [458]; unstable size 458; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 458] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 458] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 458] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 141] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.67991829, 3.77827597, 0.47558534, 0.04749578, 0.50099075, 0.13609672,
         1.01967597, 6.51381016, 3.67172718]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0460 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 93, vnnlib ID: 93 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.25923347,  -8.93387318, -12.07442665, -12.36280155, -11.61011887,
         -12.40742683, -12.73714542, -11.05641937,  -9.61292076, -10.40355968]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [515]; unstable size 515; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 139, 1, 515] with unstable size 138 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 515] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 515] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [138]; unstable size 138; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 138] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.75624776, 2.35665655, 2.62816501, 1.91056156, 2.66094518, 2.94464588,
         1.34808493, 0.20877779, 1.29339409]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0498 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 94, vnnlib ID: 94 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-0.12398815, -7.37717056, -1.18167615, -3.64735293, -2.90664721,
         -3.76087618, -4.92453289, -5.42116880, -1.31887615, -6.85669994]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [515]; unstable size 515; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 128, 1, 515] with unstable size 127 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 515] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 515] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [127]; unstable size 127; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 127] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 127] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.24615037,  5.69084597,  2.23981595,  1.54952383,  2.35145092,
          3.44640017,  3.95842123, -0.23636389,  5.13023138]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.12398815, -7.37717056, -1.18167615, -3.64735293, -2.90664721,
         -3.76087618, -4.92453289, -5.42116880, -1.31887615, -6.85669994]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.12398925, -7.37717152, -1.18167734, -3.64735389, -2.90664840,
          -3.76087666, -4.92453480, -5.42116880, -1.31887758, -6.85670042],
         [-0.12398925, -7.37717152, -1.18167734, -3.64735389, -2.90664840,
          -3.76087666, -4.92453480, -5.42116880, -1.31887758, -6.85670042]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.05768812,  0.13720024]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]],


         [[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0639 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 95, vnnlib ID: 95 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.27392960, -10.40883446, -10.95635605, -11.48171997, -11.53870010,
         -11.52956009, -10.56092262, -12.92515469, -12.09226036, -11.58665943]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [407]; unstable size 407; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 156, 1, 407] with unstable size 155 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 407] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 407] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [155]; unstable size 155; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 155] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 155] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.79021215, -0.15416002,  0.34587622,  0.41858768,  0.38338351,
         -0.53462267,  1.75449777,  0.91765881,  0.82849890]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.27392960, -10.40883446, -10.95635605, -11.48171997, -11.53870010,
         -11.52956009, -10.56092262, -12.92515469, -12.09226036, -11.58665943]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.27393055, -10.40883350, -10.95635605, -11.48171997, -11.53870010,
          -11.52956009, -10.56092167, -12.92515469, -12.09225941, -11.58665943],
         [-10.27393055, -10.40883350, -10.95635605, -11.48171997, -11.53870010,
          -11.52956009, -10.56092167, -12.92515469, -12.09225941, -11.58665943]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.13490295,  0.54752254,  0.15208817]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.73492062, -1.73492062, -1.71904767,  ..., -0.19523799,
             0.29682547,  0.23333341],
           [-1.75079370, -1.71904767, -1.65555561,  ..., -0.17936498,
             0.26507944,  0.20158738],
           [-1.75079370, -1.63968253, -1.48095226,  ..., -0.21111101,
             0.18571436,  0.12222230],
           ...,
           [-0.75079364, -0.75079364, -0.63968253,  ..., -0.86190474,
            -0.89365077, -0.90952379],
           [-0.76666665, -0.73492062, -0.60793650,  ..., -0.86190474,
            -0.90952379, -0.92539680],
           [-0.71904761, -0.65555555, -0.54444444,  ..., -0.81428570,
            -0.90952379, -0.90952379]],

          [[-1.88405800, -1.88405800, -1.85185194,  ..., -0.27375188,
             0.24154601,  0.24154601],
           [-1.90016103, -1.85185194, -1.80354273,  ..., -0.25764883,
             0.24154601,  0.24154601],
           [-1.88405800, -1.77133656, -1.61030602,  ..., -0.25764883,
             0.20933989,  0.19323683],
           ...,
           [-0.53140092, -0.53140092, -0.41867942,  ..., -0.64412236,
            -0.67632848, -0.69243151],
           [-0.56360704, -0.53140092, -0.38647330,  ..., -0.64412236,
            -0.69243151, -0.69243151],
           [-0.51529789, -0.45088565, -0.32206106,  ..., -0.61191624,
            -0.67632848, -0.69243151]],

          [[-1.60269880, -1.66266882, -1.66266882,  ...,  0.45127454,
             0.79610211,  0.79610211],
           [-1.67766130, -1.67766130, -1.61769128,  ...,  0.45127454,
             0.81109464,  0.79610211],
           [-1.69265378, -1.60269880, -1.45277369,  ...,  0.40629703,
             0.78110963,  0.75112462],
           ...,
           [ 0.25637197,  0.25637197,  0.36131951,  ...,  0.12143944,
             0.13643195,  0.12143944],
           [ 0.28635699,  0.31634200,  0.43628204,  ...,  0.10644694,
             0.12143944,  0.10644694],
           [ 0.33133450,  0.37631202,  0.49625200,  ...,  0.15142445,
             0.13643195,  0.10644694]]],


         [[[-1.73492062, -1.73492062, -1.71904767,  ..., -0.19523799,
             0.29682547,  0.23333341],
           [-1.75079370, -1.71904767, -1.65555561,  ..., -0.17936498,
             0.26507944,  0.20158738],
           [-1.75079370, -1.63968253, -1.48095226,  ..., -0.21111101,
             0.18571436,  0.12222230],
           ...,
           [-0.75079364, -0.75079364, -0.63968253,  ..., -0.86190474,
            -0.89365077, -0.90952379],
           [-0.76666665, -0.73492062, -0.60793650,  ..., -0.86190474,
            -0.90952379, -0.92539680],
           [-0.71904761, -0.65555555, -0.54444444,  ..., -0.81428570,
            -0.90952379, -0.90952379]],

          [[-1.88405800, -1.88405800, -1.85185194,  ..., -0.27375188,
             0.24154601,  0.24154601],
           [-1.90016103, -1.85185194, -1.80354273,  ..., -0.25764883,
             0.24154601,  0.24154601],
           [-1.88405800, -1.77133656, -1.61030602,  ..., -0.25764883,
             0.20933989,  0.19323683],
           ...,
           [-0.53140092, -0.53140092, -0.41867942,  ..., -0.64412236,
            -0.67632848, -0.69243151],
           [-0.56360704, -0.53140092, -0.38647330,  ..., -0.64412236,
            -0.69243151, -0.69243151],
           [-0.51529789, -0.45088565, -0.32206106,  ..., -0.61191624,
            -0.67632848, -0.69243151]],

          [[-1.60269880, -1.66266882, -1.66266882,  ...,  0.45127454,
             0.79610211,  0.79610211],
           [-1.67766130, -1.67766130, -1.61769128,  ...,  0.45127454,
             0.81109464,  0.79610211],
           [-1.69265378, -1.60269880, -1.45277369,  ...,  0.40629703,
             0.78110963,  0.75112462],
           ...,
           [ 0.25637197,  0.25637197,  0.36131951,  ...,  0.12143944,
             0.13643195,  0.12143944],
           [ 0.28635699,  0.31634200,  0.43628204,  ...,  0.10644694,
             0.12143944,  0.10644694],
           [ 0.33133450,  0.37631202,  0.49625200,  ...,  0.15142445,
             0.13643195,  0.10644694]]],


         [[[-1.73492062, -1.73492062, -1.71904767,  ..., -0.19523799,
             0.29682547,  0.23333341],
           [-1.75079370, -1.71904767, -1.65555561,  ..., -0.17936498,
             0.26507944,  0.20158738],
           [-1.75079370, -1.63968253, -1.48095226,  ..., -0.21111101,
             0.18571436,  0.12222230],
           ...,
           [-0.75079364, -0.75079364, -0.63968253,  ..., -0.86190474,
            -0.89365077, -0.90952379],
           [-0.76666665, -0.73492062, -0.60793650,  ..., -0.86190474,
            -0.90952379, -0.92539680],
           [-0.71904761, -0.65555555, -0.54444444,  ..., -0.81428570,
            -0.90952379, -0.90952379]],

          [[-1.88405800, -1.88405800, -1.85185194,  ..., -0.27375188,
             0.24154601,  0.24154601],
           [-1.90016103, -1.85185194, -1.80354273,  ..., -0.25764883,
             0.24154601,  0.24154601],
           [-1.88405800, -1.77133656, -1.61030602,  ..., -0.25764883,
             0.20933989,  0.19323683],
           ...,
           [-0.53140092, -0.53140092, -0.41867942,  ..., -0.64412236,
            -0.67632848, -0.69243151],
           [-0.56360704, -0.53140092, -0.38647330,  ..., -0.64412236,
            -0.69243151, -0.69243151],
           [-0.51529789, -0.45088565, -0.32206106,  ..., -0.61191624,
            -0.67632848, -0.69243151]],

          [[-1.60269880, -1.66266882, -1.66266882,  ...,  0.45127454,
             0.79610211,  0.79610211],
           [-1.67766130, -1.67766130, -1.61769128,  ...,  0.45127454,
             0.81109464,  0.79610211],
           [-1.69265378, -1.60269880, -1.45277369,  ...,  0.40629703,
             0.78110963,  0.75112462],
           ...,
           [ 0.25637197,  0.25637197,  0.36131951,  ...,  0.12143944,
             0.13643195,  0.12143944],
           [ 0.28635699,  0.31634200,  0.43628204,  ...,  0.10644694,
             0.12143944,  0.10644694],
           [ 0.33133450,  0.37631202,  0.49625200,  ...,  0.15142445,
             0.13643195,  0.10644694]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0627 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 96, vnnlib ID: 96 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.03281784, -8.23260021, -1.84217274, -3.97030663, -2.07109594,
         -4.04030323, -2.67588925, -4.08758450, -7.76276398, -8.17520523]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [391]; unstable size 391; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 170, 1, 391] with unstable size 169 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 391] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 391] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [169]; unstable size 169; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 169] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 169] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.71139061,  4.86629915, -1.22754908,  0.94557458, -1.01543295,
          1.00673783,  0.82872880,  4.49218941,  4.77490425]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.03281784, -8.23260021, -1.84217274, -3.97030663, -2.07109594,
         -4.04030323, -2.67588925, -4.08758450, -7.76276398, -8.17520523]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.03281879, -8.23260021, -1.84217358, -3.97030759, -2.07109690,
          -4.04030418, -2.67589021, -4.08758593, -7.76276398, -8.17520523],
         [-5.03281879, -8.23260021, -1.84217358, -3.97030759, -2.07109690,
          -4.04030418, -2.67589021, -4.08758593, -7.76276398, -8.17520523]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.83371663, -0.60479331]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0314 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 97, vnnlib ID: 97 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.72495699, -5.89168453, -0.38030732, -1.11891258, -0.52149594,
         -1.21352100, -0.91386914, -2.07719803, -3.71372318, -4.84915781]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [746]; unstable size 746; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 746] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 746] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 746] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 260] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.64249659,  4.36007452,  0.44215167, -0.09383832,  0.53698558,
          0.11810207,  1.25011325,  2.22731781,  3.35412121]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.72495699, -5.89168453, -0.38030732, -1.11891258, -0.52149594,
         -1.21352100, -0.91386914, -2.07719803, -3.71372318, -4.84915781]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.11it/s]100%|██████████| 1/1 [00:00<00:00,  9.11it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.02882814, -6.13730335, -0.72621405, -1.43307424, -0.73920232,
          -1.52886283, -1.13457453, -2.27671862, -4.01522541, -5.08771849]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.01298827]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1123 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.183822631835938
alpha/beta optimization time: 1.1057591438293457
initial alpha-crown bounds: tensor([[ 1.68035626,  4.42552042,  0.46530277, -0.08068599,  0.55969679,
          0.14187571,  1.27987528,  2.29280448,  3.41907692]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.08068598806858063
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.71289563179016
Verifying property 0 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.6803562641143799.

Properties batch 1, size 1
Remaining timeout: 198.54925513267517
Verifying property 1 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.425520420074463.

Properties batch 2, size 1
Remaining timeout: 198.44092631340027
Verifying property 2 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.4653027653694153.

Properties batch 3, size 1
Remaining timeout: 198.3339500427246
Verifying property 3 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08068599]], device='cuda:0') need to verify.
Model prediction is: tensor([-2.72495699, -5.89168453, -0.38030732, -1.11891258, -0.52149594,
        -1.21352100, -0.91386914, -2.07719803, -3.71372318, -4.84915781],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08068599]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 746
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 254
Node /15 input 0: size torch.Size([100]) unstable 9
-----------------
# of unstable neurons: 1009
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 61] 
split level 1: [/input-12, 69] 
split level 2: [/input-8, 549] 
split level 3: [/input-8, 545] 
split level 4: [/input-8, 546] 
split level 5: [/input-8, 537] 
split level 6: [/input-8, 1467] 
split level 7: [/input-8, 547] 
pruning_in_iteration open status: True
ratio of positive domain = 128 / 256 = 0.5
pruning-in-iteration extra time: 0.004602670669555664
Time: prepare 0.0030    bound 0.1113    transfer 0.0013    finalize 0.0015    func 0.1172    
Accumulated time: func 0.1172    prepare 0.0034    bound 0.1113    transfer 0.0013    finalize 0.0015    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05332 (8), -0.05290 (8), -0.05277 (8), -0.05234 (8), -0.05218 (8), -0.05177 (8), -0.05162 (8), -0.05139 (8), -0.05133 (8), -0.05125 (8), -0.05121 (8), -0.05083 (8), -0.05077 (8), -0.05077 (8), -0.05070 (8), -0.05043 (8), -0.05038 (8), -0.05024 (8), -0.05021 (8), -0.04987 (8), 
Length of domains: 128
Time: pickout 0.0004    decision 0.0221    set_bounds 0.0176    solve 0.1172    add 0.0028    
Accumulated time: pickout 0.0004    decision 0.0221    set_bounds 0.0176    solve 0.1172    add 0.0028    
Current (lb-rhs): -0.05332251638174057
128 domains visited
Cumulative time: 0.16480493545532227

BaB round 2
batch: 128
splitting decisions: 
split level 0: [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 256 = 0.0
pruning-in-iteration extra time: 4.9591064453125e-05
Time: prepare 0.0053    bound 0.0901    transfer 0.0007    finalize 0.0014    func 0.0975    
Accumulated time: func 0.2147    prepare 0.0089    bound 0.2014    transfer 0.0020    finalize 0.0029    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05228 (9), -0.05199 (9), -0.05173 (9), -0.05144 (9), -0.05138 (9), -0.05121 (9), -0.05097 (9), -0.05084 (9), -0.05078 (9), -0.05065 (9), -0.05044 (9), -0.05040 (9), -0.05035 (9), -0.05023 (9), -0.05021 (9), -0.05013 (9), -0.04987 (9), -0.04985 (9), -0.04980 (9), -0.04968 (9), 
Length of domains: 256
Time: pickout 0.0021    decision 0.0160    set_bounds 0.0060    solve 0.0976    add 0.0016    
Accumulated time: pickout 0.0025    decision 0.0381    set_bounds 0.0236    solve 0.2148    add 0.0043    
Current (lb-rhs): -0.05227721482515335
384 domains visited
Cumulative time: 0.2883477210998535

BaB round 3
batch: 256
splitting decisions: 
split level 0: [/input-8, 949] [/input, 715] [/input-8, 949] [/input, 715] [/input-8, 949] [/input, 715] [/input-8, 949] [/input, 715] [/input-8, 949] [/input, 715] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 512 = 0.0
pruning-in-iteration extra time: 5.030632019042969e-05
Time: prepare 0.0112    bound 0.0921    transfer 0.0024    finalize 0.0028    func 0.1086    
Accumulated time: func 0.3233    prepare 0.0203    bound 0.2936    transfer 0.0044    finalize 0.0057    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05120 (10), -0.05095 (10), -0.05065 (10), -0.05065 (10), -0.05040 (10), -0.05040 (10), -0.05030 (10), -0.05019 (10), -0.05010 (10), -0.04995 (10), -0.04985 (10), -0.04976 (10), -0.04976 (10), -0.04975 (10), -0.04964 (10), -0.04961 (10), -0.04943 (10), -0.04941 (10), -0.04940 (10), -0.04932 (10), 
Length of domains: 512
Time: pickout 0.0037    decision 0.0220    set_bounds 0.0090    solve 0.1087    add 0.0023    
Accumulated time: pickout 0.0062    decision 0.0601    set_bounds 0.0326    solve 0.3236    add 0.0066    
Current (lb-rhs): -0.05120324343442917
896 domains visited
Cumulative time: 0.43457722663879395

BaB round 4
batch: 512
splitting decisions: 
split level 0: [/input-8, 941] [/input-8, 548] [/input-8, 941] [/input-8, 548] [/input-8, 941] [/input-8, 548] [/input-8, 941] [/input-8, 548] [/input-8, 941] [/input-8, 548] 
pruning_in_iteration open status: False
ratio of positive domain = 2 / 1024 = 0.001953125
pruning-in-iteration extra time: 5.078315734863281e-05
Time: prepare 0.0225    bound 0.0969    transfer 0.0047    finalize 0.0057    func 0.1299    
Accumulated time: func 0.4532    prepare 0.0430    bound 0.3905    transfer 0.0091    finalize 0.0114    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05044 (11), -0.05014 (11), -0.04989 (11), -0.04988 (11), -0.04959 (11), -0.04958 (11), -0.04955 (11), -0.04945 (11), -0.04933 (11), -0.04916 (11), -0.04903 (11), -0.04902 (11), -0.04900 (11), -0.04900 (11), -0.04890 (11), -0.04885 (11), -0.04868 (11), -0.04863 (11), -0.04861 (11), -0.04854 (11), 
Length of domains: 1018
Time: pickout 0.0060    decision 0.0352    set_bounds 0.0221    solve 0.1301    add 0.0042    
Accumulated time: pickout 0.0122    decision 0.0953    set_bounds 0.0547    solve 0.4536    add 0.0108    
Current (lb-rhs): -0.05043845623731613
1914 domains visited
Cumulative time: 0.632788896560669

BaB round 5
batch: 1018
splitting decisions: 
split level 0: [/input-8, 1470] [/input-8, 1470] [/input-8, 731] [/input-8, 1470] [/input-8, 731] [/input-8, 1470] [/input-8, 731] [/input-8, 1470] [/input-8, 1470] [/input-8, 932] 
pruning_in_iteration open status: False
ratio of positive domain = 154 / 2036 = 0.07563850687622786
pruning-in-iteration extra time: 5.340576171875e-05
Time: prepare 0.0450    bound 0.1233    transfer 0.0138    finalize 0.0105    func 0.1934    
Accumulated time: func 0.6466    prepare 0.0882    bound 0.5138    transfer 0.0229    finalize 0.0219    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04943 (12), -0.04917 (12), -0.04913 (12), -0.04888 (12), -0.04887 (12), -0.04883 (12), -0.04862 (12), -0.04860 (12), -0.04858 (12), -0.04858 (12), -0.04856 (12), -0.04845 (12), -0.04832 (12), -0.04830 (12), -0.04828 (12), -0.04820 (12), -0.04818 (12), -0.04811 (12), -0.04805 (12), -0.04803 (12), 
Length of domains: 1856
Time: pickout 0.0120    decision 0.0663    set_bounds 0.0410    solve 0.1937    add 0.0076    
Accumulated time: pickout 0.0242    decision 0.1616    set_bounds 0.0956    solve 0.6474    add 0.0184    
Current (lb-rhs): -0.0494292676448822
3770 domains visited
Cumulative time: 0.9554851055145264

BaB round 6
batch: 1856
splitting decisions: 
split level 0: [/input-8, 731] [/input-8, 330] [/input-8, 1470] [/input-8, 330] [/input-8, 1470] [/input-8, 330] [/input-8, 330] [/input-8, 731] [/input-8, 330] [/input-8, 330] 
pruning_in_iteration open status: False
ratio of positive domain = 462 / 3712 = 0.12446120689655171
pruning-in-iteration extra time: 5.5789947509765625e-05
Time: prepare 0.0822    bound 0.1902    transfer 0.0215    finalize 0.1465    func 0.4409    
Accumulated time: func 1.0875    prepare 0.1706    bound 0.7040    transfer 0.0444    finalize 0.1683    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04893 (13), -0.04867 (13), -0.04863 (13), -0.04838 (13), -0.04836 (13), -0.04833 (13), -0.04813 (13), -0.04811 (13), -0.04808 (13), -0.04808 (13), -0.04806 (13), -0.04796 (13), -0.04781 (13), -0.04779 (13), -0.04778 (13), -0.04768 (13), -0.04767 (13), -0.04760 (13), -0.04756 (13), -0.04752 (13), 
Length of domains: 3169
Time: pickout 0.0235    decision 0.1103    set_bounds 0.0765    solve 0.4417    add 0.0146    
Accumulated time: pickout 0.0477    decision 0.2719    set_bounds 0.1721    solve 1.0891    add 0.0330    
Current (lb-rhs): -0.04893049597740173
6939 domains visited
Cumulative time: 1.6267879009246826

BaB round 7
batch: 3169
splitting decisions: 
split level 0: [/input-8, 1515] [/input-8, 1453] [/input-8, 1453] [/input-8, 1515] [/input-8, 1453] [/input-8, 1453] [/input-8, 1453] [/input-8, 1453] [/input-8, 1453] [/input-8, 1453] 
pruning_in_iteration open status: True
ratio of positive domain = 1458 / 6338 = 0.23004102240454405
pruning-in-iteration extra time: 0.00428462028503418
Time: prepare 0.1439    bound 0.2954    transfer 0.0210    finalize 0.0328    func 0.4944    
Accumulated time: func 1.5819    prepare 0.3147    bound 0.9994    transfer 0.0654    finalize 0.2012    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04844 (14), -0.04818 (14), -0.04813 (14), -0.04788 (14), -0.04786 (14), -0.04784 (14), -0.04763 (14), -0.04761 (14), -0.04759 (14), -0.04758 (14), -0.04756 (14), -0.04746 (14), -0.04731 (14), -0.04729 (14), -0.04727 (14), -0.04720 (14), -0.04716 (14), -0.04711 (14), -0.04706 (14), -0.04700 (14), 
Length of domains: 4880
Time: pickout 0.0401    decision 0.1858    set_bounds 0.1334    solve 0.4956    add 0.0225    
Accumulated time: pickout 0.0878    decision 0.4577    set_bounds 0.3055    solve 1.5847    add 0.0554    
Current (lb-rhs): -0.04843538999557495
11819 domains visited
Cumulative time: 2.5211431980133057

BaB round 8
batch: 4096
splitting decisions: 
split level 0: [/input-8, 941] [/input-8, 932] [/input-8, 941] [/input-8, 2003] [/input-8, 1470] [/input-8, 1470] [/input-8, 1453] [/input-8, 1470] [/input-8, 1470] [/input-8, 2003] 
pruning_in_iteration open status: False
ratio of positive domain = 784 / 8192 = 0.095703125
pruning-in-iteration extra time: 8.845329284667969e-05
Time: prepare 0.2009    bound 0.3703    transfer 0.0168    finalize 0.0666    func 0.6564    
Accumulated time: func 2.2384    prepare 0.5160    bound 1.3698    transfer 0.0822    finalize 0.2677    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04748 (15), -0.04718 (15), -0.04717 (15), -0.04713 (15), -0.04697 (15), -0.04693 (15), -0.04690 (15), -0.04683 (15), -0.04683 (15), -0.04671 (15), -0.04663 (15), -0.04663 (15), -0.04662 (15), -0.04661 (15), -0.04660 (15), -0.04658 (15), -0.04658 (15), -0.04650 (15), -0.04642 (15), -0.04641 (15), 
Length of domains: 8133
Time: pickout 0.0611    decision 0.4426    set_bounds 0.1821    solve 0.6581    add 0.0307    
Accumulated time: pickout 0.1490    decision 0.9003    set_bounds 0.4875    solve 2.2428    add 0.0862    
Current (lb-rhs): -0.04748072475194931
19168 domains visited
current_vram/total_varm: 30.3GB/99.9GB, batch_size increase to 8192
Cumulative time: 3.9155771732330322

BaB round 9
batch: 8133
splitting decisions: 
split level 0: [/input-8, 2003] [/input-8, 932] [/input-8, 932] [/input-8, 932] [/input-8, 932] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 2003] 
pruning_in_iteration open status: False
ratio of positive domain = 809 / 16266 = 0.0497356449034797
pruning-in-iteration extra time: 0.00011610984802246094
Time: prepare 0.4201    bound 0.6765    transfer 0.0895    finalize 0.1059    func 1.2931    
Accumulated time: func 3.5315    prepare 0.9364    bound 2.0463    transfer 0.1716    finalize 0.3736    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04691 (16), -0.04657 (16), -0.04657 (16), -0.04656 (16), -0.04637 (16), -0.04636 (16), -0.04634 (16), -0.04622 (16), -0.04622 (16), -0.04606 (16), -0.04603 (16), -0.04602 (16), -0.04602 (16), -0.04601 (16), -0.04601 (16), -0.04600 (16), -0.04599 (16), -0.04591 (16), -0.04582 (16), -0.04580 (16), 
Length of domains: 15403
Time: pickout 0.1355    decision 0.6549    set_bounds 0.5601    solve 1.2965    add 0.0579    
Accumulated time: pickout 0.2845    decision 1.5552    set_bounds 1.0476    solve 3.5393    add 0.1440    
Current (lb-rhs): -0.04691189527511597
34571 domains visited
Cumulative time: 6.641167163848877

BaB round 10
batch: 8192
splitting decisions: 
split level 0: [/input-8, 1470] [/input-8, 941] [/input-8, 932] [/input-8, 941] [/input-8, 932] [/input-8, 941] [/input-8, 1470] [/input-8, 941] [/input-8, 1470] [/input-8, 941] 
pruning_in_iteration open status: False
ratio of positive domain = 733 / 16384 = 0.04473876953125
pruning-in-iteration extra time: 0.00010418891906738281
Time: prepare 0.5562    bound 0.6805    transfer 0.0916    finalize 0.1094    func 1.4388    
Accumulated time: func 4.9702    prepare 1.4928    bound 2.7268    transfer 0.2633    finalize 0.4830    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04597 (17), -0.04566 (17), -0.04563 (17), -0.04562 (17), -0.04559 (17), -0.04542 (17), -0.04541 (17), -0.04540 (17), -0.04534 (17), -0.04533 (17), -0.04532 (17), -0.04529 (17), -0.04528 (17), -0.04525 (17), -0.04512 (17), -0.04511 (17), -0.04511 (17), -0.04509 (17), -0.04508 (17), -0.04507 (17), 
Length of domains: 22840
Time: pickout 0.1106    decision 0.6325    set_bounds 0.3561    solve 1.4428    add 0.0749    
Accumulated time: pickout 0.3951    decision 2.1878    set_bounds 1.4037    solve 4.9820    add 0.2190    
Current (lb-rhs): -0.045966893434524536
50200 domains visited
current_vram/total_varm: 41.5GB/99.9GB, batch_size increase to 16384
Cumulative time: 9.27390718460083

BaB round 11
batch: 16384
splitting decisions: 
split level 0: [/input-8, 939] [/input-8, 941] [/input-8, 939] [/input-8, 941] [/input-8, 932] [/input-8, 941] [/input-8, 932] [/input-8, 941] [/input-8, 939] [/input-8, 941] 
pruning_in_iteration open status: False
ratio of positive domain = 1073 / 32768 = 0.032745361328125
pruning-in-iteration extra time: 0.0002391338348388672
Time: prepare 0.8463    bound 1.3205    transfer 0.2385    finalize 0.4144    func 2.8224    
Accumulated time: func 7.7927    prepare 2.3396    bound 4.0473    transfer 0.5018    finalize 0.8974    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04553 (18), -0.04523 (18), -0.04519 (18), -0.04518 (18), -0.04515 (18), -0.04498 (18), -0.04498 (18), -0.04497 (18), -0.04491 (18), -0.04489 (18), -0.04487 (18), -0.04486 (18), -0.04484 (18), -0.04482 (18), -0.04468 (18), -0.04468 (18), -0.04468 (18), -0.04464 (18), -0.04464 (18), -0.04464 (18), 
Length of domains: 38124
Time: pickout 0.2367    decision 1.6532    set_bounds 0.9069    solve 2.8287    add 0.1284    
Accumulated time: pickout 0.6318    decision 3.8409    set_bounds 2.3106    solve 7.8107    add 0.3473    
Current (lb-rhs): -0.045529887080192566
81868 domains visited
current_vram/total_varm: 41.5GB/99.9GB, batch_size increase to 32768
Cumulative time: 15.06257677078247

BaB round 12
batch: 32768
splitting decisions: 
split level 0: [/input, 937] [/input-8, 933] [/input, 937] [/input-8, 941] [/input, 3771] [/input-8, 932] [/input, 937] [/input-8, 941] [/input, 2201] [/input-8, 941] 
pruning_in_iteration open status: False
ratio of positive domain = 1245 / 65536 = 0.0189971923828125
pruning-in-iteration extra time: 0.0005636215209960938
Time: prepare 1.6713    bound 7.7786    transfer 0.5976    finalize 0.8064    func 10.8618    
Accumulated time: func 18.6545    prepare 4.0117    bound 11.8259    transfer 1.0993    finalize 1.7039    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04500 (19), -0.04471 (19), -0.04471 (19), -0.04467 (19), -0.04463 (19), -0.04451 (19), -0.04445 (19), -0.04445 (19), -0.04443 (19), -0.04438 (19), -0.04437 (19), -0.04436 (19), -0.04435 (19), -0.04430 (19), -0.04421 (19), -0.04420 (19), -0.04417 (16), -0.04417 (19), -0.04416 (19), -0.04416 (19), 
Length of domains: 69623
Time: pickout 0.4675    decision 3.5881    set_bounds 1.6769    solve 10.8761    add 16.9311    
Accumulated time: pickout 1.0993    decision 7.4290    set_bounds 3.9875    solve 18.6868    add 17.2784    
Current (lb-rhs): -0.045001834630966187
146135 domains visited
Cumulative time: 48.735893964767456

BaB round 13
batch: 32768
splitting decisions: 
split level 0: [/input-8, 1252] [/input-8, 1243] [/input-8, 1252] [/input-8, 1243] [/input-8, 1252] [/input-8, 1243] [/input-8, 1252] [/input-8, 1252] [/input-8, 933] [/input-8, 1252] 
pruning_in_iteration open status: False
ratio of positive domain = 549 / 65536 = 0.0083770751953125
pruning-in-iteration extra time: 0.0004897117614746094
Time: prepare 1.7355    bound 7.7957    transfer 0.6020    finalize 0.9614    func 11.0981    
Accumulated time: func 29.7526    prepare 5.7478    bound 19.6216    transfer 1.7014    finalize 2.6652    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04500 (19), -0.04471 (19), -0.04471 (19), -0.04467 (19), -0.04463 (19), -0.04451 (19), -0.04445 (19), -0.04445 (19), -0.04443 (19), -0.04438 (19), -0.04437 (19), -0.04436 (19), -0.04435 (19), -0.04430 (19), -0.04421 (19), -0.04420 (19), -0.04417 (16), -0.04417 (19), -0.04416 (19), -0.04416 (19), 
Length of domains: 101833
Time: pickout 0.5513    decision 3.4443    set_bounds 1.9455    solve 11.1098    add 0.2482    
Accumulated time: pickout 1.6506    decision 10.8733    set_bounds 5.9330    solve 29.7966    add 17.5266    
Current (lb-rhs): -0.045001834630966187
211113 domains visited
Cumulative time: 66.1213104724884

BaB round 14
batch: 32768
splitting decisions: 
split level 0: [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] 
pruning_in_iteration open status: False
ratio of positive domain = 211 / 65536 = 0.0032196044921875
pruning-in-iteration extra time: 0.0005242824554443359
Time: prepare 1.7065    bound 7.7810    transfer 0.6017    finalize 1.0211    func 11.1131    
Accumulated time: func 40.8657    prepare 7.4547    bound 27.4026    transfer 2.3031    finalize 3.6863    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04500 (19), -0.04471 (19), -0.04471 (19), -0.04467 (19), -0.04463 (19), -0.04451 (19), -0.04445 (19), -0.04445 (19), -0.04443 (19), -0.04438 (19), -0.04437 (19), -0.04436 (19), -0.04435 (19), -0.04430 (19), -0.04421 (19), -0.04420 (19), -0.04417 (16), -0.04417 (19), -0.04416 (19), -0.04416 (19), 
Length of domains: 134387
Time: pickout 0.4867    decision 3.9086    set_bounds 1.9723    solve 11.1232    add 0.2651    
Accumulated time: pickout 2.1373    decision 14.7819    set_bounds 7.9053    solve 40.9198    add 17.7916    
Current (lb-rhs): -0.045001834630966187
276435 domains visited
Cumulative time: 83.93506860733032

BaB round 15
batch: 32768
splitting decisions: 
split level 0: [/input-8, 942] [/input, 1861] [/input-8, 942] [/input, 1861] [/input-8, 942] [/input-8, 925] [/input-8, 942] [/input-8, 925] [/input-8, 942] [/input-8, 925] 
pruning_in_iteration open status: False
ratio of positive domain = 699 / 65536 = 0.0106658935546875
pruning-in-iteration extra time: 0.00047850608825683594
Time: prepare 1.6961    bound 7.7834    transfer 0.6065    finalize 1.0773    func 11.1667    
Accumulated time: func 52.0324    prepare 9.1513    bound 35.1860    transfer 2.9096    finalize 4.7636    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04500 (19), -0.04471 (19), -0.04471 (19), -0.04467 (19), -0.04463 (19), -0.04451 (19), -0.04445 (19), -0.04445 (19), -0.04443 (19), -0.04438 (19), -0.04437 (19), -0.04436 (19), -0.04435 (19), -0.04430 (19), -0.04421 (19), -0.04420 (19), -0.04417 (16), -0.04417 (19), -0.04416 (19), -0.04416 (19), 
Length of domains: 166450
Time: pickout 0.4908    decision 3.4908    set_bounds 1.4360    solve 11.1760    add 0.2698    
Accumulated time: pickout 2.6281    decision 18.2727    set_bounds 9.3413    solve 52.0958    add 18.0614    
Current (lb-rhs): -0.045001834630966187
341266 domains visited
Cumulative time: 100.86099052429199

BaB round 16
batch: 32768
splitting decisions: 
split level 0: [/input, 1193] [/input-8, 520] [/input, 1193] [/input-8, 925] [/input, 1861] [/input-8, 925] [/input, 1193] [/input-8, 520] [/input, 2201] [/input-8, 1243] 
pruning_in_iteration open status: False
ratio of positive domain = 447 / 65536 = 0.0068206787109375
pruning-in-iteration extra time: 0.0004780292510986328
Time: prepare 1.7040    bound 7.7819    transfer 0.6033    finalize 1.2115    func 11.3036    
Accumulated time: func 63.3360    prepare 10.8558    bound 42.9679    transfer 3.5129    finalize 5.9751    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04500 (19), -0.04471 (19), -0.04471 (19), -0.04467 (19), -0.04463 (19), -0.04451 (19), -0.04445 (19), -0.04445 (19), -0.04443 (19), -0.04438 (19), -0.04437 (19), -0.04436 (19), -0.04435 (19), -0.04430 (19), -0.04421 (19), -0.04420 (19), -0.04417 (16), -0.04417 (19), -0.04416 (19), -0.04416 (19), 
Length of domains: 198761
Time: pickout 0.5189    decision 3.6292    set_bounds 1.4686    solve 11.3130    add 0.2439    
Accumulated time: pickout 3.1470    decision 21.9019    set_bounds 10.8099    solve 63.4087    add 18.3053    
Current (lb-rhs): -0.045001834630966187
406345 domains visited
Cumulative time: 118.10378956794739

BaB round 17
batch: 32768
splitting decisions: 
split level 0: [/input-8, 942] [/input-8, 1235] [/input-8, 942] [/input-8, 1235] [/input-8, 942] [/input-8, 1235] [/input-8, 942] [/input-8, 1235] [/input-8, 942] [/input-8, 1235] 
pruning_in_iteration open status: False
ratio of positive domain = 1093 / 65536 = 0.0166778564453125
pruning-in-iteration extra time: 0.0004634857177734375
Time: prepare 1.7398    bound 7.7845    transfer 0.6025    finalize 0.4690    func 10.5984    
Accumulated time: func 73.9345    prepare 12.5961    bound 50.7524    transfer 4.1153    finalize 6.4442    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04500 (19), -0.04471 (19), -0.04471 (19), -0.04467 (19), -0.04463 (19), -0.04451 (19), -0.04445 (19), -0.04445 (19), -0.04443 (19), -0.04438 (19), -0.04437 (19), -0.04436 (19), -0.04435 (19), -0.04430 (19), -0.04421 (19), -0.04420 (19), -0.04417 (16), -0.04417 (19), -0.04416 (19), -0.04416 (19), 
Length of domains: 230390
Time: pickout 0.5106    decision 3.7758    set_bounds 1.4251    solve 11.4860    add 0.2509    
Accumulated time: pickout 3.6576    decision 25.6777    set_bounds 12.2350    solve 74.8947    add 18.5563    
Current (lb-rhs): -0.045001834630966187
470742 domains visited
Cumulative time: 135.62243700027466

BaB round 18
batch: 32768
splitting decisions: 
split level 0: [/input-8, 1944] [/input-8, 1235] [/input-8, 1235] [/input-8, 942] [/input-8, 1944] [/input-8, 1944] [/input-8, 1944] [/input-8, 1944] [/input-8, 1944] [/input-8, 1944] 
pruning_in_iteration open status: False
ratio of positive domain = 1355 / 65536 = 0.0206756591796875
pruning-in-iteration extra time: 0.00047516822814941406
Time: prepare 1.6932    bound 7.7815    transfer 0.6059    finalize 1.5010    func 11.5853    
Accumulated time: func 85.5197    prepare 14.2896    bound 58.5339    transfer 4.7212    finalize 7.9451    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04500 (19), -0.04471 (19), -0.04471 (19), -0.04467 (19), -0.04463 (19), -0.04451 (19), -0.04445 (19), -0.04445 (19), -0.04443 (19), -0.04438 (19), -0.04437 (19), -0.04436 (19), -0.04435 (19), -0.04430 (19), -0.04421 (19), -0.04420 (19), -0.04417 (16), -0.04417 (19), -0.04416 (19), -0.04416 (19), 
Length of domains: 261745
Time: pickout 0.5007    decision 3.3967    set_bounds 1.4290    solve 11.5942    add 0.2489    
Accumulated time: pickout 4.1584    decision 29.0744    set_bounds 13.6640    solve 86.4889    add 18.8052    
Current (lb-rhs): -0.045001834630966187
534865 domains visited
Cumulative time: 152.86781406402588

BaB round 19
batch: 32768
splitting decisions: 
split level 0: [/input, 1061] [/input-8, 731] [/input, 807] [/input-8, 1235] [/input, 1061] [/input-8, 331] [/input, 1061] [/input, 3656] [/input, 1061] [/input, 3656] 
pruning_in_iteration open status: False
ratio of positive domain = 1002 / 65536 = 0.015289306640625
pruning-in-iteration extra time: 0.00048732757568359375
Time: prepare 1.7212    bound 7.7818    transfer 0.6187    finalize 0.4733    func 10.5983    
Accumulated time: func 96.1180    prepare 16.0112    bound 66.3157    transfer 5.3399    finalize 8.4185    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04500 (19), -0.04471 (19), -0.04471 (19), -0.04467 (19), -0.04463 (19), -0.04451 (19), -0.04445 (19), -0.04445 (19), -0.04443 (19), -0.04438 (19), -0.04437 (19), -0.04436 (19), -0.04435 (19), -0.04430 (19), -0.04421 (19), -0.04420 (19), -0.04417 (16), -0.04417 (19), -0.04416 (19), -0.04416 (19), 
Length of domains: 293460
Time: pickout 0.5250    decision 3.4055    set_bounds 2.5350    solve 10.6088    add 0.2529    
Accumulated time: pickout 4.6834    decision 32.4800    set_bounds 16.1991    solve 97.0977    add 19.0580    
Current (lb-rhs): -0.045001834630966187
599348 domains visited
Cumulative time: 170.28612089157104

BaB round 20
batch: 32768
splitting decisions: 
split level 0: [/input, 807] [/input, 3656] [/input, 807] [/input-8, 331] [/input, 807] [/input-8, 1944] [/input, 807] [/input-8, 331] [/input, 807] [/input, 1861] 
pruning_in_iteration open status: False
ratio of positive domain = 1174 / 65536 = 0.017913818359375
pruning-in-iteration extra time: 0.00051116943359375
Time: prepare 1.7518    bound 7.7823    transfer 0.6192    finalize 0.4790    func 10.6358    
Accumulated time: func 106.7538    prepare 17.7635    bound 74.0980    transfer 5.9591    finalize 8.8975    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04500 (19), -0.04471 (19), -0.04471 (19), -0.04467 (19), -0.04463 (19), -0.04451 (19), -0.04445 (19), -0.04445 (19), -0.04443 (19), -0.04438 (19), -0.04437 (19), -0.04436 (19), -0.04435 (19), -0.04430 (19), -0.04421 (19), -0.04420 (19), -0.04417 (16), -0.04417 (19), -0.04416 (19), -0.04416 (19), 
Length of domains: 324969
Time: pickout 0.5795    decision 4.1656    set_bounds 1.4536    solve 10.6491    add 0.2604    
Accumulated time: pickout 5.2628    decision 36.6455    set_bounds 17.6526    solve 107.7468    add 19.3184    
Current (lb-rhs): -0.045001834630966187
663625 domains visited
Cumulative time: 187.49285316467285

BaB round 21
batch: 32768
splitting decisions: 
split level 0: [/input-8, 266] [/input, 924] [/input-8, 266] [/input-8, 266] [/input, 3656] [/input-8, 266] [/input, 3656] [/input-8, 266] [/input, 924] [/input-8, 266] 
pruning_in_iteration open status: False
ratio of positive domain = 1537 / 65536 = 0.0234527587890625
pruning-in-iteration extra time: 0.0004839897155761719
Time: prepare 1.7159    bound 7.7814    transfer 0.6250    finalize 1.8761    func 12.0013    
Accumulated time: func 118.7551    prepare 19.4798    bound 81.8795    transfer 6.5841    finalize 10.7736    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04500 (19), -0.04471 (19), -0.04471 (19), -0.04467 (19), -0.04463 (19), -0.04451 (19), -0.04445 (19), -0.04445 (19), -0.04443 (19), -0.04438 (19), -0.04437 (19), -0.04436 (19), -0.04435 (19), -0.04430 (19), -0.04421 (19), -0.04420 (19), -0.04417 (16), -0.04417 (19), -0.04416 (19), -0.04416 (19), 
Length of domains: 356082
Time: pickout 0.6024    decision 4.7905    set_bounds 1.4445    solve 12.0109    add 0.2562    
Accumulated time: pickout 5.8652    decision 41.4361    set_bounds 19.0971    solve 119.7577    add 19.5746    
Current (lb-rhs): -0.045001834630966187
727506 domains visited
Time out!!!!!!!!
Result: unknown in 209.8011 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 98, vnnlib ID: 98 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.37744045, -10.80906868,  -8.33961296,  -7.23910141,  -7.87373829,
          -7.23198557,  -8.77867413,  -8.54426098,  -8.87928581, -11.17584705]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [575]; unstable size 575; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 575] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 575] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 575] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 203] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.58143532,  2.85189366,  0.84675455, -0.01254817,  0.32769108,
          1.16247284,  0.93366623,  1.05069137,  3.29250598]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.37744045, -10.80906868,  -8.33961296,  -7.23910141,  -7.87373829,
          -7.23198557,  -8.77867413,  -8.54426098,  -8.87928581, -11.17584705]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.25428486, -10.69138241,  -8.43463802,  -7.42673492,  -7.95977592,
           -7.43381834,  -8.90330410,  -8.69818687,  -8.78907394, -11.06161213]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00708342]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0062 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0762 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 99, vnnlib ID: 99 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.58199978, -10.54873943,  -7.14900303,  -7.91397190,  -7.28075123,
          -7.99828959,  -6.68323803,  -8.80146408, -10.43879700, -10.40846443]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [399]; unstable size 399; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 399] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 399] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 399] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 148] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.51980472, 3.39100218, 0.25737524, 1.03178000, 0.39332831, 1.10958445,
         1.78996480, 3.33789563, 3.28931856]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0453 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 100, vnnlib ID: 100 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.83844137, -7.17797089, -2.05605650, -2.00732827, -2.00628233,
         -2.03319240, -2.81610751, -2.43622375, -6.60829258, -6.27670431]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [528]; unstable size 528; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 528] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 528] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 528] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 219] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.83865035,  4.03018141, -0.40402746, -0.52554798,  0.00620086,
          0.34507668, -0.21024579,  3.40293145,  3.30322194]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.83844137, -7.17797089, -2.05605650, -2.00732827, -2.00628233,
         -2.03319240, -2.81610751, -2.43622375, -6.60829258, -6.27670431]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.83844137, -7.17797089, -2.05605650, -2.00732780, -2.00628185,
          -2.03319216, -2.81610799, -2.43622375, -6.60829067, -6.27670383],
         [-4.83844137, -7.17797089, -2.05605650, -2.00732780, -2.00628185,
          -2.03319216, -2.81610799, -2.43622375, -6.60829067, -6.27670383]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.04872870, -0.00104594,  0.42889595]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0529 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 101, vnnlib ID: 101 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.07705116,  -8.48606205,  -8.37792206, -10.12561226,  -8.12428093,
         -10.33940601, -10.15317154,  -9.66516113,  -4.95619965,  -7.79425383]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [671]; unstable size 671; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 129, 1, 671] with unstable size 128 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 671] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 671] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [128]; unstable size 128; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 128] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 128] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.19773501,  2.97831368,  2.78014827,  4.45424080,  2.49679518,
          4.66083670,  4.47122526,  3.93926191,  2.36554980]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.07705116,  -8.48606205,  -8.37792206, -10.12561226,  -8.12428093,
         -10.33940601, -10.15317154,  -9.66516113,  -4.95619965,  -7.79425383]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.05900955,  -8.47574997,  -8.22770882,  -9.97550106,  -7.97159195,
          -10.18599319,  -9.99292660,  -9.50112343,  -5.14422226,  -7.78701639]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.08521271]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0054 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0478 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 102, vnnlib ID: 102 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.02811790, -5.76409245,  0.56327426, -0.35700279, -0.37683630,
         -0.41983262, -1.42136240, -0.92577142, -3.90326118, -3.97468066]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [607]; unstable size 607; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 194, 1, 607] with unstable size 193 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 607] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 607] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [193]; unstable size 193; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 193] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.11923015,  4.51170063, -1.18529081, -0.36719000, -0.30698466,
          0.61107695,  0.20735407,  2.80999255,  2.81428099]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.02811790, -5.76409245,  0.56327426, -0.35700279, -0.37683630,
         -0.41983262, -1.42136240, -0.92577142, -3.90326118, -3.97468066]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.02811766, -5.76409245,  0.56327415, -0.35700274, -0.37683612,
          -0.41983256, -1.42136264, -0.92577130, -3.90326071, -3.97468066],
         [-2.02811766, -5.76409245,  0.56327415, -0.35700274, -0.37683612,
          -0.41983256, -1.42136264, -0.92577130, -3.90326071, -3.97468066]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.94011027, -0.01983339,  0.04299644]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0718 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 103, vnnlib ID: 103 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.43231535, -10.02100658,  -4.30439758,  -6.53697205,  -3.91013026,
          -6.62372160,  -5.03309059,  -6.37713289, -10.00526237, -10.26388931]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [627]; unstable size 627; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 151, 1, 627] with unstable size 150 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 627] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 627] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [150]; unstable size 150; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 150] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 150] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.15813851, 5.56159449, 0.26368931, 2.36857629, 2.45099640, 0.80457848,
         2.22993994, 5.61817694, 5.84348679]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0618 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 104, vnnlib ID: 104 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.93001795, -6.11589432, -2.52689791, -2.70035768, -2.83776188,
         -2.69209170, -3.78257012, -3.50543237, -5.88740206, -5.34398603]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [636]; unstable size 636; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 636] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 636] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 636] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 174] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.56663644,  2.53126144, -0.52419901, -0.01101996, -0.24716020,
          0.67172003,  0.37379932,  2.27085948,  1.89936161]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.93001795, -6.11589432, -2.52689791, -2.70035768, -2.83776188,
         -2.69209170, -3.78257012, -3.50543237, -5.88740206, -5.34398603]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.93001842, -6.11589527, -2.52689838, -2.70035863, -2.83776259,
          -2.69209194, -3.78257155, -3.50543332, -5.88740253, -5.34398603],
         [-4.93001842, -6.11589527, -2.52689838, -2.70035863, -2.83776259,
          -2.69209194, -3.78257155, -3.50543332, -5.88740253, -5.34398603]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16519356,  0.00826669,  0.14567065]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.24920642,  0.20158738,  0.21746039,  ..., -0.57619047,
            -0.57619047, -0.63968253],
           [ 0.29682547,  0.24920642,  0.23333341,  ..., -0.71904761,
            -0.94126981, -0.81428570],
           [ 0.23333341,  0.16984135,  0.20158738,  ..., -0.67142856,
            -1.05238092, -0.71904761],
           ...,
           [-0.30634910, -0.30634910, -0.27460307,  ..., -0.35396814,
            -0.29047608, -0.29047608],
           [-0.30634910, -0.30634910, -0.36984116,  ..., -0.36984116,
            -0.32222211, -0.22698402],
           [-0.25873005, -0.22698402, -0.43333322,  ..., -0.41746020,
            -0.35396814, -0.29047608]],

          [[-0.14492741, -0.14492741, -0.12882435,  ..., -0.59581316,
            -0.59581316, -0.64412236],
           [-0.09661824, -0.11272129, -0.12882435,  ..., -0.75684375,
            -0.99838966, -0.82125598],
           [-0.16103047, -0.17713353, -0.14492741,  ..., -0.70853460,
            -1.11111104, -0.75684375],
           ...,
           [-0.40257636, -0.40257636, -0.38647330,  ..., -0.74074072,
            -0.62801927, -0.66022539],
           [-0.40257636, -0.40257636, -0.48309177,  ..., -0.72463763,
            -0.67632848, -0.57971013],
           [-0.35426718, -0.32206106, -0.54750401,  ..., -0.72463763,
            -0.69243151, -0.61191624]],

          [[-0.05847061, -0.07346311, -0.04347810,  ..., -0.25337315,
            -0.31334329, -0.32833579],
           [-0.01349309, -0.04347810, -0.04347810,  ..., -0.43328333,
            -0.71814090, -0.53823084],
           [-0.07346311, -0.10344811, -0.05847061,  ..., -0.43328333,
            -0.88305843, -0.46326834],
           ...,
           [-0.41829082, -0.38830581, -0.37331331,  ..., -0.59820086,
            -0.52323836, -0.53823084],
           [-0.40329832, -0.40329832, -0.44827583,  ..., -0.59820086,
            -0.55322337, -0.47826082],
           [-0.35832080, -0.31334329, -0.50824583,  ..., -0.58320838,
            -0.55322337, -0.50824583]]],


         [[[ 0.24920642,  0.20158738,  0.21746039,  ..., -0.57619047,
            -0.57619047, -0.63968253],
           [ 0.29682547,  0.24920642,  0.23333341,  ..., -0.71904761,
            -0.94126981, -0.81428570],
           [ 0.23333341,  0.16984135,  0.20158738,  ..., -0.67142856,
            -1.05238092, -0.71904761],
           ...,
           [-0.30634910, -0.30634910, -0.27460307,  ..., -0.35396814,
            -0.29047608, -0.29047608],
           [-0.30634910, -0.30634910, -0.36984116,  ..., -0.36984116,
            -0.32222211, -0.22698402],
           [-0.25873005, -0.22698402, -0.43333322,  ..., -0.41746020,
            -0.35396814, -0.29047608]],

          [[-0.14492741, -0.14492741, -0.12882435,  ..., -0.59581316,
            -0.59581316, -0.64412236],
           [-0.09661824, -0.11272129, -0.12882435,  ..., -0.75684375,
            -0.99838966, -0.82125598],
           [-0.16103047, -0.17713353, -0.14492741,  ..., -0.70853460,
            -1.11111104, -0.75684375],
           ...,
           [-0.40257636, -0.40257636, -0.38647330,  ..., -0.74074072,
            -0.62801927, -0.66022539],
           [-0.40257636, -0.40257636, -0.48309177,  ..., -0.72463763,
            -0.67632848, -0.57971013],
           [-0.35426718, -0.32206106, -0.54750401,  ..., -0.72463763,
            -0.69243151, -0.61191624]],

          [[-0.05847061, -0.07346311, -0.04347810,  ..., -0.25337315,
            -0.31334329, -0.32833579],
           [-0.01349309, -0.04347810, -0.04347810,  ..., -0.43328333,
            -0.71814090, -0.53823084],
           [-0.07346311, -0.10344811, -0.05847061,  ..., -0.43328333,
            -0.88305843, -0.46326834],
           ...,
           [-0.41829082, -0.38830581, -0.37331331,  ..., -0.59820086,
            -0.52323836, -0.53823084],
           [-0.40329832, -0.40329832, -0.44827583,  ..., -0.59820086,
            -0.55322337, -0.47826082],
           [-0.35832080, -0.31334329, -0.50824583,  ..., -0.58320838,
            -0.55322337, -0.50824583]]],


         [[[ 0.24920642,  0.20158738,  0.21746039,  ..., -0.57619047,
            -0.57619047, -0.63968253],
           [ 0.29682547,  0.24920642,  0.23333341,  ..., -0.71904761,
            -0.94126981, -0.81428570],
           [ 0.23333341,  0.16984135,  0.20158738,  ..., -0.67142856,
            -1.05238092, -0.71904761],
           ...,
           [-0.30634910, -0.30634910, -0.27460307,  ..., -0.35396814,
            -0.29047608, -0.29047608],
           [-0.30634910, -0.30634910, -0.36984116,  ..., -0.36984116,
            -0.32222211, -0.22698402],
           [-0.25873005, -0.22698402, -0.43333322,  ..., -0.41746020,
            -0.35396814, -0.29047608]],

          [[-0.14492741, -0.14492741, -0.12882435,  ..., -0.59581316,
            -0.59581316, -0.64412236],
           [-0.09661824, -0.11272129, -0.12882435,  ..., -0.75684375,
            -0.99838966, -0.82125598],
           [-0.16103047, -0.17713353, -0.14492741,  ..., -0.70853460,
            -1.11111104, -0.75684375],
           ...,
           [-0.40257636, -0.40257636, -0.38647330,  ..., -0.74074072,
            -0.62801927, -0.66022539],
           [-0.40257636, -0.40257636, -0.48309177,  ..., -0.72463763,
            -0.67632848, -0.57971013],
           [-0.35426718, -0.32206106, -0.54750401,  ..., -0.72463763,
            -0.69243151, -0.61191624]],

          [[-0.05847061, -0.07346311, -0.04347810,  ..., -0.25337315,
            -0.31334329, -0.32833579],
           [-0.01349309, -0.04347810, -0.04347810,  ..., -0.43328333,
            -0.71814090, -0.53823084],
           [-0.07346311, -0.10344811, -0.05847061,  ..., -0.43328333,
            -0.88305843, -0.46326834],
           ...,
           [-0.41829082, -0.38830581, -0.37331331,  ..., -0.59820086,
            -0.52323836, -0.53823084],
           [-0.40329832, -0.40329832, -0.44827583,  ..., -0.59820086,
            -0.55322337, -0.47826082],
           [-0.35832080, -0.31334329, -0.50824583,  ..., -0.58320838,
            -0.55322337, -0.50824583]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0517 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 105, vnnlib ID: 105 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.00338268, -10.28219223,  -7.15202951,  -7.92889309,  -7.82962704,
          -8.00282669,  -8.39284706,  -8.90988731,  -9.23245716,  -9.69780827]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [521]; unstable size 521; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 239, 1, 521] with unstable size 238 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 521] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 521] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [238]; unstable size 238; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 238] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 238] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.72178566,  0.36531395, -2.17974448, -1.32797313, -1.40488386,
         -1.24957299, -1.02663422, -0.66461658, -0.09302038]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.00338268, -10.28219223,  -7.15202951,  -7.92889309,  -7.82962704,
          -8.00282669,  -8.39284706,  -8.90988731,  -9.23245716,  -9.69780827]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.00338173, -10.28219318,  -7.15202951,  -7.92889309,  -7.82962799,
           -8.00282669,  -8.39284611,  -8.90988731,  -9.23245621,  -9.69780731],
         [ -8.00338173, -10.28219318,  -7.15202951,  -7.92889309,  -7.82962799,
           -8.00282669,  -8.39284611,  -8.90988731,  -9.23245621,  -9.69780731]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.90650558, -1.75785780, -0.98099422, -1.08025932, -0.90706062,
          -0.51704121,  0.32256889,  0.78792000]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         ...,


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0775 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 106, vnnlib ID: 106 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.55728149, -3.29340839, -5.60895300, -5.84854221, -5.21763039,
         -5.96553278, -5.89570904, -5.05772591, -2.31981516, -3.37378526]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [503]; unstable size 503; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 503] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 503] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 503] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 171] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.30047584,  1.62997246,  1.88469386,  1.13955164,  1.99374676,
          1.89228344,  0.82793856, -1.50930858, -0.16130120]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.55728149, -3.29340839, -5.60895300, -5.84854221, -5.21763039,
         -5.96553278, -5.89570904, -5.05772591, -2.31981516, -3.37378526]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.55728054, -3.29340792, -5.60895252, -5.84854126, -5.21762943,
          -5.96553278, -5.89570808, -5.05772543, -2.31981421, -3.37378430],
         [-3.55728054, -3.29340792, -5.60895252, -5.84854126, -5.21762943,
          -5.96553278, -5.89570808, -5.05772543, -2.31981421, -3.37378430]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.26387262, -0.97359371,  0.08037639]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]],


         [[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]],


         [[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0667 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 107, vnnlib ID: 107 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.40574551, -9.71419811, -7.44596434, -8.90537739, -7.12733173,
         -9.08124161, -9.19281673, -8.36250019, -6.23399162, -9.56327915]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [557]; unstable size 557; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 190, 1, 557] with unstable size 189 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 557] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 557] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [189]; unstable size 189; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 189] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 189] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.60150981, 1.47714353, 2.81160688, 1.12638485, 2.97082520, 2.97414351,
         2.26859903, 0.29780391, 3.46658897]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0636 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 108, vnnlib ID: 108 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.84473133, -10.54042339,  -8.17759705,  -8.29182148,  -7.74204731,
          -8.36287403,  -7.75897408,  -9.04864311, -11.14440346, -10.47354794]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [585]; unstable size 585; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 585] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 585] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 585] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 216] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.04735827,  1.40457797, -0.36931920, -0.89572740,  0.04944561,
         -0.85430741,  0.22342527,  2.20092130,  1.37345695]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.84473133, -10.54042339,  -8.17759705,  -8.29182148,  -7.74204731,
          -8.36287403,  -7.75897408,  -9.04864311, -11.14440346, -10.47354794]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.84472942, -10.54042244,  -8.17759705,  -8.29182243,  -7.74204826,
           -8.36287403,  -7.75897312,  -9.04864311, -11.14440155, -10.47354794],
         [ -9.84472942, -10.54042244,  -8.17759705,  -8.29182243,  -7.74204826,
           -8.36287403,  -7.75897312,  -9.04864311, -11.14440155, -10.47354794]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11422539, -0.54977417, -0.53284931]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0721 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 109, vnnlib ID: 109 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.50140810, -11.02397823,  -8.54122639, -10.14165115,  -9.63691139,
         -10.37123966, -10.39661026, -10.64028358,  -9.73715496, -10.65245342]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [237]; unstable size 237; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 100, 1, 237] with unstable size 99 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 237] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 237] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [99]; unstable size 99; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 99] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 99] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.88083529, 1.77790594, 3.23222136, 2.73587108, 3.45677829, 3.48044467,
         3.60492182, 2.78642964, 3.66938210]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0647 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 110, vnnlib ID: 110 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.10360909, -14.90222263, -10.64630795, -10.67387867, -10.32881927,
         -10.73543262,  -8.65091515, -12.13699913, -14.77171898, -15.26986790]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [377]; unstable size 377; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 242, 1, 377] with unstable size 241 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 377] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 377] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [241]; unstable size 241; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 241] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 241] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.91985512, 5.48559284, 1.68281054, 1.66879570, 1.33047318, 1.72007763,
         2.92767096, 5.54262400, 5.84726381]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0431 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 111, vnnlib ID: 111 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.24005079, -9.04290104, -4.47385645, -6.15989971, -3.75543547,
         -6.18814945, -5.15722942, -4.77376652, -9.54131126, -8.83624268]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [550]; unstable size 550; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 550] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 550] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 550] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 203] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.75045252, 4.26294136, 0.44944513, 1.99260759, 2.02144289, 0.96410072,
         0.68850255, 4.72861576, 4.22467422]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0657 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 112, vnnlib ID: 112 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.06766558, -6.83603859, -6.95109749, -7.23270035, -7.89028740,
         -7.38764238, -7.01568794, -7.03979397, -5.81813335, -5.25799608]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 147, 1, 509] with unstable size 146 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 509] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 146] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.27733994, 1.24176240, 0.94732475, 1.20107555, 1.83796215, 1.33658981,
         1.02798796, 0.93377829, 0.00646114]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0319 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 113, vnnlib ID: 113 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.44208622,  -9.75026035,  -7.34684753,  -6.16673279,  -7.47608280,
          -6.11000681,  -7.20957756,  -7.78478622, -11.07736111,  -9.72049713]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [596]; unstable size 596; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 596] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 596] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 596] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 200] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.83063006,  2.85584259,  0.91094625,  1.03836179, -0.07551450,
          0.71604705,  1.38741755,  4.26548767,  2.89728880]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.44208622,  -9.75026035,  -7.34684753,  -6.16673279,  -7.47608280,
          -6.11000681,  -7.20957756,  -7.78478622, -11.07736111,  -9.72049713]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.44208622,  -9.75026035,  -7.34684753,  -6.16673279,  -7.47608280,
           -6.11000681,  -7.20957756,  -7.78478622, -11.07736111,  -9.72049713]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05672598]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.03650784, -1.00476182, -0.75079364,  ..., -0.68730158,
            -0.90952379, -1.62380958],
           [-0.44920623, -0.95714283, -0.67142856,  ..., -0.32222211,
            -0.65555555, -1.62380958],
           [-0.09999990, -0.92539680, -0.63968253,  ..., -0.22698402,
            -0.57619047, -1.63968253],
           ...,
           [-0.27460307, -0.29047608, -0.33809513,  ..., -0.87777776,
            -0.51269841, -0.48095238],
           [-0.30634910, -0.30634910, -0.33809513,  ..., -1.09999990,
            -0.65555555, -0.49682540],
           [-0.40158719, -0.40158719, -0.41746020,  ..., -1.29047608,
            -0.87777776, -0.62380952]],

          [[-1.62640905, -1.72302747, -1.65861523,  ..., -1.49758446,
            -1.57809973, -1.75523353],
           [-1.38486302, -1.77133656, -1.61030602,  ..., -1.35265696,
            -1.49758446, -1.75523353],
           [-1.09500802, -1.80354273, -1.62640905,  ..., -1.22383249,
            -1.40096617, -1.75523353],
           ...,
           [-1.25603855, -1.25603855, -1.28824472,  ..., -0.72463763,
            -0.43478248, -0.51529789],
           [-1.28824472, -1.25603855, -1.28824472,  ..., -0.88566822,
            -0.48309177, -0.45088565],
           [-1.33655393, -1.33655393, -1.33655393,  ..., -1.12721407,
            -0.67632848, -0.46698871]],

          [[-1.48275876, -1.52773619, -1.49775124,  ..., -1.28785622,
            -1.34782624, -1.42278874],
           [-1.15292358, -1.55772126, -1.54272878,  ..., -1.12293863,
            -1.19790113, -1.42278874],
           [-0.89805096, -1.54272878, -1.51274371,  ..., -1.06296861,
            -1.13793111, -1.43778121],
           ...,
           [-0.94302845, -0.94302845, -0.95802099,  ..., -0.61319339,
            -0.38830581, -0.52323836],
           [-0.94302845, -0.94302845, -0.94302845,  ..., -0.70314842,
            -0.34332830, -0.38830581],
           [-0.98800600, -1.00299859, -1.00299859,  ..., -0.89805096,
            -0.52323836, -0.31334329]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0570 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 114, vnnlib ID: 114 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.65542030, -10.12491035,  -9.28998947, -10.89940071,  -9.46046829,
         -11.02120876, -10.39476299, -11.24895477,  -7.53916931, -10.56444263]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 197, 1, 509] with unstable size 196 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 509] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [196]; unstable size 196; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 196] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 196] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.85671949, 2.11677980, 3.61477709, 2.21671772, 3.72679400, 3.03719997,
         3.80708671, 0.44335449, 3.26269913]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0518 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 115, vnnlib ID: 115 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.92224836, -9.30357933, -4.86471462, -5.74703979, -3.76322746,
         -5.79184532, -4.91436577, -5.34334707, -8.45374775, -9.23935318]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 509] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 509] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 239] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.55012679, 4.69829416, 0.87078327, 1.70267868, 1.74382305, 0.83639115,
         1.21680462, 3.97037983, 4.71871233]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0604 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 116, vnnlib ID: 116 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.46497631, -11.33358383,  -8.85467815,  -7.44927025,  -9.22317123,
          -7.37944174,  -9.60250664,  -8.70856094, -10.32826042, -10.40810776]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 161, 1, 540] with unstable size 160 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 540] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [160]; unstable size 160; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 160] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 160] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.58313560, 3.18968081, 1.22978044, 0.05482835, 1.50812221, 1.89584732,
         0.94890082, 2.30877233, 2.35839391]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0456 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 117, vnnlib ID: 117 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.46045923, -4.62828922, -5.05963278, -6.18664169, -5.28851128,
         -6.36921692, -6.12083912, -6.04943180, -0.93621290, -3.70123649]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [537]; unstable size 537; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 537] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 537] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 537] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 159] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.17089832, 3.15421629, 3.54188728, 4.60494947, 3.75584602, 4.77829933,
         4.57753897, 4.42675829, 2.20462656]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0548 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 118, vnnlib ID: 118 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.41606951, -3.73614860, -5.60977221, -6.62537479, -6.33034801,
         -6.65032578, -8.53272724, -6.92770529, -4.97527218, -5.08467150]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [406]; unstable size 406; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 137, 1, 406] with unstable size 136 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 406] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 406] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [136]; unstable size 136; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 136] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 136] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.06374431, 1.19116235, 2.15339351, 1.93855977, 2.16962671, 4.05398321,
         2.44965172, 0.61252117, 1.12175798]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0365 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 119, vnnlib ID: 119 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.60672903, -5.77713490, -1.78710592, -1.64563823, -1.64935160,
         -1.71567798, -2.18223453, -2.02389979, -4.62978458, -4.60459995]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [778]; unstable size 778; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 219, 1, 778] with unstable size 218 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 778] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 778] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [218]; unstable size 218; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 218] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 218] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.25424361,  3.26128483, -0.22337794, -0.42366970,  0.04887801,
          0.13689768, -0.16968268,  2.10664535,  2.17941141]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.60672903, -5.77713490, -1.78710592, -1.64563823, -1.64935160,
         -1.71567798, -2.18223453, -2.02389979, -4.62978458, -4.60459995]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.61329794, -5.77425766, -1.79143727, -1.65318608, -1.64977872,
          -1.72312260, -2.18866110, -2.02094007, -4.63334703, -4.60565472],
         [-3.61329794, -5.77425766, -1.79143727, -1.65318608, -1.64977872,
          -1.72312260, -2.18866110, -2.02094007, -4.63334703, -4.60565472]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.13825119, -0.00340736,  0.36775398]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0121 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0725 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 120, vnnlib ID: 120 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -4.54532385, -11.30416203,  -4.10411549,  -4.39919186,  -6.40133953,
          -4.42965555,  -6.84690285,  -5.18702269, -10.52285004, -10.39758968]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [314]; unstable size 314; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 97, 1, 314] with unstable size 96 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 314] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 314] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [96]; unstable size 96; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 96] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 96] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 6.35177326, -0.66230345, -0.42160916,  1.53926945, -0.39580536,
          1.98930943,  0.27601612,  5.74486685,  5.50957298]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -4.54532385, -11.30416203,  -4.10411549,  -4.39919186,  -6.40133953,
          -4.42965555,  -6.84690285,  -5.18702269, -10.52285004, -10.39758968]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -4.54532337, -11.30416203,  -4.10411406,  -4.39919186,  -6.40133953,
           -4.42965508,  -6.84690189,  -5.18702173, -10.52284813, -10.39758873],
         [ -4.54532337, -11.30416203,  -4.10411406,  -4.39919186,  -6.40133953,
           -4.42965508,  -6.84690189,  -5.18702173, -10.52284813, -10.39758873]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44120932, -0.14613152, -0.11566830]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0698 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 121, vnnlib ID: 121 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.59993410, -4.38716555, -7.01152945, -7.42306519, -6.37219429,
         -7.47539234, -7.27996445, -6.98678732, -7.51602745, -5.72939539]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [503]; unstable size 503; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 202, 1, 503] with unstable size 201 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 503] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 503] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [201]; unstable size 201; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 201] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 201] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.36779022, 1.58436394, 2.04665852, 0.99501896, 2.08592701, 1.87148952,
         1.65961552, 2.34397459, 1.09861779]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0618 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 122, vnnlib ID: 122 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.81995726, -5.13494205, -8.06528854, -7.87783623, -8.02696037,
         -7.91830969, -8.81726456, -7.94001102, -5.16691113, -6.43881178]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [420]; unstable size 420; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 420] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 420] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 420] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 174] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.08343577,  2.05495071,  1.84661865,  2.02149105,  1.87067533,
          2.72653341,  1.89364648, -0.51825690,  1.03387237]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.81995726, -5.13494205, -8.06528854, -7.87783623, -8.02696037,
         -7.91830969, -8.81726456, -7.94001102, -5.16691113, -6.43881178]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.81014204, -5.15443516, -8.05149078, -7.86225891, -8.01039028,
          -7.90261698, -8.80574799, -7.92409134, -5.15398884, -6.44848347]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00044632]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0043 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0409 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 123, vnnlib ID: 123 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.01406145,  -9.83653736,  -7.83681726,  -8.95063114,  -9.15734291,
          -9.10310364,  -9.02663040, -11.03872871,  -5.68331051, -10.27965927]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [384]; unstable size 384; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 188, 1, 384] with unstable size 187 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 384] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 384] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 187] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.17096865,  3.39843321,  1.51453519,  2.57439899,  2.68033481,
          2.71090770,  2.60011578,  4.45497847,  4.01961613]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.01406145,  -9.83653736,  -7.83681726,  -8.95063114,  -9.15734291,
          -9.10310364,  -9.02663040, -11.03872871,  -5.68331051, -10.27965927]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.25it/s]100%|██████████| 1/1 [00:00<00:00,  9.24it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.24572372, -10.14930725,  -8.09828663,  -9.24239445,  -9.37958050,
           -9.39315701,  -9.30120564, -11.22938156,  -6.21674156, -10.66067028]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02898216]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1107 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 23.99014663696289
alpha/beta optimization time: 1.10105562210083
initial alpha-crown bounds: tensor([[-0.16154689,  3.43210244,  1.52814198,  2.59574938,  2.69813728,
          2.73191309,  2.61713958,  4.47211838,  4.07639122]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.16154688596725464
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.73306727409363
Verifying property 0 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.16154689]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.01406145,  -9.83653736,  -7.83681726,  -8.95063114,  -9.15734291,
         -9.10310364,  -9.02663040, -11.03872871,  -5.68331051, -10.27965927],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.16154689]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 384
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 185
Node /15 input 0: size torch.Size([100]) unstable 5
-----------------
# of unstable neurons: 574
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 10] 
split level 2: [/input-12, 50] 
split level 3: [/input-8, 1707] 
split level 4: [/input-8, 693] 
split level 5: [/input-8, 949] 
split level 6: [/input-8, 691] 
split level 7: [/input-8, 685] 
pruning_in_iteration open status: True
ratio of positive domain = 192 / 256 = 0.75
pruning-in-iteration extra time: 0.005253314971923828
Time: prepare 0.0031    bound 0.1162    transfer 0.0020    finalize 0.0015    func 0.1229    
Accumulated time: func 0.1229    prepare 0.0035    bound 0.1162    transfer 0.0020    finalize 0.0015    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03840 (8), -0.03768 (8), -0.03710 (8), -0.03681 (8), -0.03668 (8), -0.03652 (8), -0.03643 (8), -0.03601 (8), -0.03551 (8), -0.03519 (8), -0.03510 (8), -0.03485 (8), -0.03477 (8), -0.03456 (8), -0.03439 (8), -0.03418 (8), -0.03328 (8), -0.03322 (8), -0.03322 (8), -0.03298 (8), 
Length of domains: 64
Time: pickout 0.0004    decision 0.0219    set_bounds 0.0175    solve 0.1230    add 0.0018    
Accumulated time: pickout 0.0004    decision 0.0219    set_bounds 0.0175    solve 0.1230    add 0.0018    
Current (lb-rhs): -0.03840219974517822
64 domains visited
Cumulative time: 0.1734626293182373

BaB round 2
batch: 64
splitting decisions: 
split level 0: [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] 
split level 1: [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] 
pruning_in_iteration open status: True
ratio of positive domain = 144 / 256 = 0.5625
pruning-in-iteration extra time: 0.003887176513671875
Time: prepare 0.0050    bound 0.1564    transfer 0.0008    finalize 0.0013    func 0.1636    
Accumulated time: func 0.2865    prepare 0.0087    bound 0.2726    transfer 0.0028    finalize 0.0028    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03650 (10), -0.03580 (10), -0.03517 (10), -0.03496 (10), -0.03483 (10), -0.03467 (10), -0.03450 (10), -0.03418 (10), -0.03361 (10), -0.03333 (10), -0.03332 (10), -0.03308 (10), -0.03308 (10), -0.03273 (10), -0.03271 (10), -0.03217 (10), -0.03169 (10), -0.03164 (10), -0.03149 (10), -0.03124 (10), 
Length of domains: 112
Time: pickout 0.0015    decision 0.0139    set_bounds 0.0070    solve 0.1636    add 0.0028    
Accumulated time: pickout 0.0019    decision 0.0358    set_bounds 0.0245    solve 0.2866    add 0.0046    
Current (lb-rhs): -0.036496758460998535
176 domains visited
Cumulative time: 0.363114595413208

BaB round 3
batch: 112
splitting decisions: 
split level 0: [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] 
pruning_in_iteration open status: True
ratio of positive domain = 67 / 224 = 0.2991071428571429
pruning-in-iteration extra time: 0.0047185420989990234
Time: prepare 0.0044    bound 0.1369    transfer 0.0008    finalize 0.0013    func 0.1435    
Accumulated time: func 0.4300    prepare 0.0132    bound 0.4095    transfer 0.0036    finalize 0.0042    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03398 (11), -0.03329 (11), -0.03275 (11), -0.03246 (11), -0.03239 (11), -0.03211 (11), -0.03206 (11), -0.03171 (11), -0.03122 (11), -0.03090 (11), -0.03088 (11), -0.03073 (11), -0.03054 (11), -0.03036 (11), -0.03034 (11), -0.02992 (11), -0.02928 (11), -0.02926 (11), -0.02922 (11), -0.02920 (11), 
Length of domains: 157
Time: pickout 0.0018    decision 0.0169    set_bounds 0.0051    solve 0.1436    add 0.0037    
Accumulated time: pickout 0.0037    decision 0.0527    set_bounds 0.0296    solve 0.4302    add 0.0083    
Current (lb-rhs): -0.03398418426513672
333 domains visited
Cumulative time: 0.534740686416626

BaB round 4
batch: 157
splitting decisions: 
split level 0: [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] 
pruning_in_iteration open status: False
ratio of positive domain = 46 / 314 = 0.14649681528662417
pruning-in-iteration extra time: 7.319450378417969e-05
Time: prepare 0.0062    bound 0.0980    transfer 0.0024    finalize 0.0017    func 0.1083    
Accumulated time: func 0.5383    prepare 0.0196    bound 0.5075    transfer 0.0061    finalize 0.0059    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03310 (12), -0.03241 (12), -0.03199 (12), -0.03153 (12), -0.03152 (12), -0.03131 (12), -0.03122 (12), -0.03085 (12), -0.03047 (12), -0.03011 (12), -0.03003 (12), -0.02994 (12), -0.02966 (12), -0.02958 (12), -0.02956 (12), -0.02907 (12), -0.02854 (12), -0.02848 (12), -0.02845 (12), -0.02811 (12), 
Length of domains: 265
Time: pickout 0.0023    decision 0.0187    set_bounds 0.0071    solve 0.1084    add 0.0017    
Accumulated time: pickout 0.0060    decision 0.0714    set_bounds 0.0367    solve 0.5385    add 0.0100    
Current (lb-rhs): -0.0331038236618042
598 domains visited
Cumulative time: 0.673499345779419

BaB round 5
batch: 265
splitting decisions: 
split level 0: [/input-8, 948] [/input-8, 357] [/input-8, 948] [/input-8, 357] [/input-8, 948] [/input-8, 357] [/input-8, 948] [/input-8, 357] [/input-8, 948] [/input-8, 357] 
pruning_in_iteration open status: False
ratio of positive domain = 86 / 530 = 0.1622641509433962
pruning-in-iteration extra time: 5.030632019042969e-05
Time: prepare 0.0103    bound 0.0974    transfer 0.0017    finalize 0.0026    func 0.1121    
Accumulated time: func 0.6504    prepare 0.0300    bound 0.6049    transfer 0.0078    finalize 0.0085    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03090 (13), -0.03026 (13), -0.02988 (13), -0.02952 (13), -0.02936 (13), -0.02929 (13), -0.02928 (13), -0.02868 (13), -0.02855 (13), -0.02834 (13), -0.02796 (13), -0.02778 (13), -0.02767 (13), -0.02741 (13), -0.02739 (13), -0.02698 (13), -0.02651 (13), -0.02646 (13), -0.02623 (13), -0.02600 (13), 
Length of domains: 441
Time: pickout 0.0037    decision 0.0248    set_bounds 0.0117    solve 0.1122    add 0.0051    
Accumulated time: pickout 0.0096    decision 0.0962    set_bounds 0.0485    solve 0.6508    add 0.0151    
Current (lb-rhs): -0.030902981758117676
1039 domains visited
Cumulative time: 0.8317849636077881

BaB round 6
batch: 441
splitting decisions: 
split level 0: [/input-8, 2011] [/input-8, 942] [/input-8, 2011] [/input-8, 942] [/input-8, 2011] [/input-8, 942] [/input-8, 2011] [/input-8, 942] [/input-8, 2011] [/input-8, 942] 
pruning_in_iteration open status: True
ratio of positive domain = 194 / 882 = 0.21995464852607705
pruning-in-iteration extra time: 0.004590511322021484
Time: prepare 0.0168    bound 0.1505    transfer 0.0037    finalize 0.0041    func 0.1751    
Accumulated time: func 0.8255    prepare 0.0470    bound 0.7554    transfer 0.0115    finalize 0.0125    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02896 (14), -0.02833 (14), -0.02794 (14), -0.02760 (14), -0.02743 (14), -0.02734 (14), -0.02731 (14), -0.02675 (14), -0.02660 (14), -0.02639 (14), -0.02601 (14), -0.02584 (14), -0.02574 (14), -0.02548 (14), -0.02545 (14), -0.02498 (14), -0.02477 (14), -0.02458 (14), -0.02454 (14), -0.02431 (14), 
Length of domains: 688
Time: pickout 0.0054    decision 0.0342    set_bounds 0.0191    solve 0.1753    add 0.0037    
Accumulated time: pickout 0.0150    decision 0.1304    set_bounds 0.0676    solve 0.8261    add 0.0188    
Current (lb-rhs): -0.02896428108215332
1727 domains visited
Cumulative time: 1.0709233283996582

BaB round 7
batch: 688
splitting decisions: 
split level 0: [/input-8, 692] [/input-8, 692] [/input-8, 692] [/input-8, 692] [/input-8, 2010] [/input-8, 692] [/input-8, 692] [/input-8, 2010] [/input-8, 692] [/input-8, 2010] 
pruning_in_iteration open status: True
ratio of positive domain = 560 / 1376 = 0.40697674418604646
pruning-in-iteration extra time: 0.004673957824707031
Time: prepare 0.0268    bound 0.1757    transfer 0.0066    finalize 0.0064    func 0.2156    
Accumulated time: func 1.0410    prepare 0.0739    bound 0.9311    transfer 0.0181    finalize 0.0189    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02656 (15), -0.02593 (15), -0.02554 (15), -0.02519 (15), -0.02502 (15), -0.02493 (15), -0.02491 (15), -0.02433 (15), -0.02415 (15), -0.02414 (15), -0.02398 (15), -0.02358 (15), -0.02344 (15), -0.02334 (15), -0.02309 (15), -0.02304 (15), -0.02298 (15), -0.02295 (15), -0.02263 (15), -0.02253 (15), 
Length of domains: 816
Time: pickout 0.0085    decision 0.0481    set_bounds 0.0293    solve 0.2165    add 0.0057    
Accumulated time: pickout 0.0235    decision 0.1785    set_bounds 0.0969    solve 1.0426    add 0.0246    
Current (lb-rhs): -0.026563167572021484
2543 domains visited
Cumulative time: 1.3815391063690186

BaB round 8
batch: 816
splitting decisions: 
split level 0: [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] 
pruning_in_iteration open status: False
ratio of positive domain = 315 / 1632 = 0.19301470588235292
pruning-in-iteration extra time: 5.269050598144531e-05
Time: prepare 0.0316    bound 0.1142    transfer 0.0044    finalize 0.0067    func 0.1578    
Accumulated time: func 1.1989    prepare 0.1057    bound 1.0453    transfer 0.0225    finalize 0.0257    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02495 (16), -0.02431 (16), -0.02366 (16), -0.02358 (16), -0.02346 (16), -0.02341 (16), -0.02303 (16), -0.02287 (16), -0.02226 (16), -0.02212 (16), -0.02210 (16), -0.02205 (16), -0.02197 (16), -0.02172 (16), -0.02145 (16), -0.02123 (16), -0.02113 (16), -0.02099 (16), -0.02095 (16), -0.02071 (16), 
Length of domains: 1313
Time: pickout 0.0112    decision 0.0545    set_bounds 0.0346    solve 0.1581    add 0.0087    
Accumulated time: pickout 0.0348    decision 0.2330    set_bounds 0.1315    solve 1.2008    add 0.0333    
Current (lb-rhs): -0.024948954582214355
3856 domains visited
Cumulative time: 1.6508281230926514

BaB round 9
batch: 1313
splitting decisions: 
split level 0: [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] 
pruning_in_iteration open status: True
ratio of positive domain = 606 / 2626 = 0.23076923076923073
pruning-in-iteration extra time: 0.004786491394042969
Time: prepare 0.0588    bound 0.2117    transfer 0.0123    finalize 0.0138    func 0.2967    
Accumulated time: func 1.4956    prepare 0.1647    bound 1.2569    transfer 0.0348    finalize 0.0395    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02266 (17), -0.02202 (17), -0.02137 (17), -0.02129 (17), -0.02128 (17), -0.02119 (17), -0.02117 (17), -0.02112 (17), -0.02074 (17), -0.02056 (17), -0.02024 (17), -0.01996 (17), -0.01990 (17), -0.01982 (17), -0.01982 (17), -0.01981 (17), -0.01970 (17), -0.01967 (17), -0.01966 (17), -0.01966 (17), 
Length of domains: 2020
Time: pickout 0.0164    decision 0.0812    set_bounds 0.2174    solve 0.2977    add 0.0124    
Accumulated time: pickout 0.0512    decision 0.3142    set_bounds 0.3489    solve 1.4984    add 0.0457    
Current (lb-rhs): -0.022655487060546875
5876 domains visited
Cumulative time: 2.2799899578094482

BaB round 10
batch: 2020
splitting decisions: 
split level 0: [/input, 2250] [/input, 2250] [/input, 2250] [/input, 2250] [/input, 2250] [/input, 2250] [/input, 2250] [/input, 2250] [/input, 2250] [/input, 2250] 
pruning_in_iteration open status: True
ratio of positive domain = 1026 / 4040 = 0.25396039603960396
pruning-in-iteration extra time: 0.0047566890716552734
Time: prepare 0.0854    bound 0.2503    transfer 0.0315    finalize 0.0235    func 0.3911    
Accumulated time: func 1.8867    prepare 0.2503    bound 1.5073    transfer 0.0663    finalize 0.0630    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02104 (18), -0.02041 (18), -0.01975 (18), -0.01967 (18), -0.01961 (18), -0.01954 (18), -0.01950 (18), -0.01913 (18), -0.01900 (18), -0.01892 (18), -0.01854 (18), -0.01836 (18), -0.01826 (18), -0.01819 (18), -0.01818 (18), -0.01814 (18), -0.01812 (18), -0.01809 (18), -0.01803 (18), -0.01798 (18), 
Length of domains: 3014
Time: pickout 0.0273    decision 0.1195    set_bounds 0.0816    solve 0.3923    add 0.0161    
Accumulated time: pickout 0.0785    decision 0.4337    set_bounds 0.4305    solve 1.8907    add 0.0619    
Current (lb-rhs): -0.021042346954345703
8890 domains visited
Cumulative time: 2.924158811569214

BaB round 11
batch: 3014
splitting decisions: 
split level 0: [/input-8, 2011] [/input-8, 2011] [/input-8, 2011] [/input-8, 2011] [/input-8, 2011] [/input-8, 2011] [/input-8, 2011] [/input, 1240] [/input-8, 2011] [/input-8, 2011] 
pruning_in_iteration open status: True
ratio of positive domain = 1761 / 6028 = 0.292136695421367
pruning-in-iteration extra time: 0.005042552947998047
Time: prepare 0.1334    bound 0.2856    transfer 0.0281    finalize 0.0356    func 0.4833    
Accumulated time: func 2.3700    prepare 0.3840    bound 1.7929    transfer 0.0944    finalize 0.0985    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01910 (19), -0.01846 (19), -0.01799 (19), -0.01779 (19), -0.01765 (19), -0.01762 (19), -0.01759 (19), -0.01745 (19), -0.01744 (19), -0.01739 (19), -0.01702 (19), -0.01698 (19), -0.01696 (19), -0.01678 (19), -0.01677 (19), -0.01655 (19), -0.01654 (19), -0.01649 (19), -0.01643 (19), -0.01637 (19), 
Length of domains: 4267
Time: pickout 0.0410    decision 0.3318    set_bounds 0.1286    solve 0.4847    add 0.0275    
Accumulated time: pickout 0.1194    decision 0.7655    set_bounds 0.5591    solve 2.3754    add 0.0894    
Current (lb-rhs): -0.019096970558166504
13157 domains visited
Cumulative time: 3.9485738277435303

BaB round 12
batch: 4096
splitting decisions: 
split level 0: [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] 
pruning_in_iteration open status: True
ratio of positive domain = 2769 / 8192 = 0.3380126953125
pruning-in-iteration extra time: 0.004937887191772461
Time: prepare 0.1879    bound 0.3179    transfer 0.0393    finalize 0.0452    func 0.5920    
Accumulated time: func 2.9620    prepare 0.5721    bound 2.1108    transfer 0.1337    finalize 0.1437    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01807 (20), -0.01745 (20), -0.01698 (20), -0.01664 (20), -0.01663 (20), -0.01660 (20), -0.01657 (20), -0.01655 (19), -0.01642 (20), -0.01642 (20), -0.01637 (20), -0.01634 (19), -0.01600 (20), -0.01596 (20), -0.01581 (20), -0.01580 (20), -0.01576 (20), -0.01569 (20), -0.01563 (20), -0.01552 (20), 
Length of domains: 5594
Time: pickout 0.0575    decision 0.4019    set_bounds 0.1669    solve 0.5936    add 0.0230    
Accumulated time: pickout 0.1769    decision 1.1674    set_bounds 0.7259    solve 2.9690    add 0.1123    
Current (lb-rhs): -0.01807403564453125
18580 domains visited
current_vram/total_varm: 22.2GB/99.9GB, batch_size increase to 8192
Cumulative time: 5.210663080215454

BaB round 13
batch: 5594
splitting decisions: 
split level 0: [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input, 1240] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] 
pruning_in_iteration open status: True
ratio of positive domain = 4378 / 11188 = 0.3913121201287093
pruning-in-iteration extra time: 0.005148887634277344
Time: prepare 0.2622    bound 0.4066    transfer 0.0619    finalize 0.0635    func 0.7956    
Accumulated time: func 3.7576    prepare 0.8345    bound 2.5174    transfer 0.1956    finalize 0.2072    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01657 (21), -0.01615 (21), -0.01579 (21), -0.01565 (21), -0.01553 (21), -0.01547 (21), -0.01538 (20), -0.01527 (21), -0.01519 (20), -0.01509 (21), -0.01509 (21), -0.01508 (21), -0.01506 (21), -0.01492 (21), -0.01489 (21), -0.01484 (21), -0.01467 (21), -0.01465 (21), -0.01465 (21), -0.01464 (21), 
Length of domains: 6810
Time: pickout 0.0777    decision 0.4615    set_bounds 0.3960    solve 0.7981    add 0.0292    
Accumulated time: pickout 0.2546    decision 1.6289    set_bounds 1.1219    solve 3.7671    add 0.1415    
Current (lb-rhs): -0.016566991806030273
25390 domains visited
Cumulative time: 6.998234748840332

BaB round 14
batch: 6810
splitting decisions: 
split level 0: [/input, 1996] [/input, 1996] [/input-8, 947] [/input-8, 947] [/input, 1240] [/input-8, 947] [/input, 1996] [/input, 1996] [/input, 1996] [/input, 1996] 
pruning_in_iteration open status: True
ratio of positive domain = 5362 / 13620 = 0.39368575624082236
pruning-in-iteration extra time: 0.005052328109741211
Time: prepare 0.3291    bound 0.4715    transfer 0.0405    finalize 0.2509    func 1.0935    
Accumulated time: func 4.8511    prepare 1.1639    bound 2.9889    transfer 0.2361    finalize 0.4580    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01556 (22), -0.01549 (22), -0.01517 (21), -0.01495 (22), -0.01468 (22), -0.01449 (22), -0.01446 (22), -0.01435 (22), -0.01427 (21), -0.01425 (22), -0.01413 (21), -0.01408 (22), -0.01405 (22), -0.01405 (22), -0.01401 (22), -0.01397 (22), -0.01391 (22), -0.01388 (22), -0.01376 (22), -0.01373 (21), 
Length of domains: 8258
Time: pickout 0.1053    decision 0.3870    set_bounds 0.4666    solve 1.0964    add 0.0299    
Accumulated time: pickout 0.3599    decision 2.0159    set_bounds 1.5885    solve 4.8635    add 0.1714    
Current (lb-rhs): -0.015556097030639648
33648 domains visited
Cumulative time: 9.115224838256836

BaB round 15
batch: 8192
splitting decisions: 
split level 0: [/input-8, 1709] [/input-8, 1709] [/input-8, 1709] [/input-8, 947] [/input-8, 947] [/input-8, 1709] [/input-8, 1709] [/input, 1996] [/input-8, 947] [/input-8, 956] 
pruning_in_iteration open status: True
ratio of positive domain = 7533 / 16384 = 0.45977783203125
pruning-in-iteration extra time: 0.00499415397644043
Time: prepare 0.4104    bound 0.5073    transfer 0.0948    finalize 0.2763    func 1.2906    
Accumulated time: func 6.1417    prepare 1.5746    bound 3.4962    transfer 0.3309    finalize 0.7344    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01487 (23), -0.01440 (23), -0.01423 (22), -0.01406 (22), -0.01405 (23), -0.01386 (23), -0.01374 (23), -0.01366 (23), -0.01334 (23), -0.01329 (23), -0.01314 (23), -0.01309 (23), -0.01302 (23), -0.01300 (23), -0.01294 (23), -0.01293 (23), -0.01292 (21), -0.01289 (23), -0.01285 (22), -0.01280 (23), 
Length of domains: 8917
Time: pickout 0.1250    decision 0.4593    set_bounds 0.5258    solve 1.2939    add 0.0500    
Accumulated time: pickout 0.4849    decision 2.4752    set_bounds 2.1143    solve 6.1575    add 0.2214    
Current (lb-rhs): -0.014865756034851074
42499 domains visited
current_vram/total_varm: 36.4GB/99.9GB, batch_size increase to 16384
Cumulative time: 11.611433267593384

BaB round 16
batch: 8917
splitting decisions: 
split level 0: [/input-8, 947] [/input-8, 947] [/input, 1240] [/input, 1240] [/input, 1240] [/input-8, 947] [/input, 1240] [/input, 1240] [/input, 1996] [/input, 1996] 
pruning_in_iteration open status: True
ratio of positive domain = 8884 / 17834 = 0.49814960188404167
pruning-in-iteration extra time: 0.004987478256225586
Time: prepare 0.4376    bound 0.5231    transfer 0.0800    finalize 0.3109    func 1.3531    
Accumulated time: func 7.4948    prepare 2.0125    bound 4.0194    transfer 0.4109    finalize 1.0453    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01438 (24), -0.01356 (23), -0.01347 (24), -0.01339 (23), -0.01325 (24), -0.01321 (24), -0.01296 (24), -0.01288 (22), -0.01288 (24), -0.01266 (24), -0.01253 (24), -0.01238 (22), -0.01237 (24), -0.01230 (24), -0.01229 (24), -0.01229 (24), -0.01225 (24), -0.01217 (23), -0.01215 (24), -0.01209 (24), 
Length of domains: 8950
Time: pickout 0.1347    decision 0.5095    set_bounds 0.5773    solve 1.3565    add 0.0355    
Accumulated time: pickout 0.6196    decision 2.9847    set_bounds 2.6916    solve 7.5139    add 0.2569    
Current (lb-rhs): -0.014383792877197266
51449 domains visited
Cumulative time: 14.272562265396118

BaB round 17
batch: 8950
splitting decisions: 
split level 0: [/input-8, 1709] [/input-8, 1709] [/input-8, 1709] [/input-8, 1709] [/input-8, 1709] [/input-8, 1709] [/input-8, 1709] [/input-8, 956] [/input-8, 1709] [/input-8, 1709] 
pruning_in_iteration open status: True
ratio of positive domain = 8241 / 17900 = 0.46039106145251396
pruning-in-iteration extra time: 0.00504612922668457
Time: prepare 0.4437    bound 0.5492    transfer 0.0830    finalize 0.0999    func 1.3716    
Accumulated time: func 8.8663    prepare 2.4566    bound 4.5686    transfer 0.4938    finalize 1.1452    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01377 (25), -0.01304 (25), -0.01281 (24), -0.01279 (24), -0.01268 (25), -0.01260 (25), -0.01230 (25), -0.01224 (23), -0.01205 (25), -0.01197 (25), -0.01194 (25), -0.01193 (25), -0.01171 (23), -0.01171 (25), -0.01168 (25), -0.01165 (25), -0.01160 (24), -0.01157 (25), -0.01152 (25), -0.01149 (25), 
Length of domains: 9659
Time: pickout 0.1409    decision 0.5105    set_bounds 0.5785    solve 1.3752    add 0.0387    
Accumulated time: pickout 0.7604    decision 3.4952    set_bounds 3.2701    solve 8.8891    add 0.2956    
Current (lb-rhs): -0.013774126768112183
61108 domains visited
Cumulative time: 16.964553594589233

BaB round 18
batch: 9659
splitting decisions: 
split level 0: [/input-8, 956] [/input-8, 956] [/input-8, 956] [/input-8, 956] [/input-8, 956] [/input-8, 956] [/input-8, 956] [/input-8, 956] [/input-8, 1451] [/input-8, 956] 
pruning_in_iteration open status: True
ratio of positive domain = 10420 / 19318 = 0.5393933119370535
pruning-in-iteration extra time: 0.005023956298828125
Time: prepare 0.4900    bound 0.5340    transfer 0.1075    finalize 0.3173    func 1.4502    
Accumulated time: func 10.3165    prepare 2.9469    bound 5.1026    transfer 0.6013    finalize 1.4625    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01295 (26), -0.01221 (26), -0.01220 (25), -0.01211 (25), -0.01187 (26), -0.01178 (26), -0.01149 (24), -0.01147 (26), -0.01121 (26), -0.01118 (26), -0.01113 (26), -0.01103 (26), -0.01097 (24), -0.01096 (26), -0.01091 (25), -0.01088 (26), -0.01085 (26), -0.01078 (26), -0.01071 (26), -0.01059 (25), 
Length of domains: 8898
Time: pickout 0.1557    decision 0.5517    set_bounds 0.6100    solve 1.4541    add 0.0409    
Accumulated time: pickout 0.9161    decision 4.0469    set_bounds 3.8801    solve 10.3433    add 0.3365    
Current (lb-rhs): -0.012947887182235718
70006 domains visited
Cumulative time: 19.836515188217163

BaB round 19
batch: 8898
splitting decisions: 
split level 0: [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] 
pruning_in_iteration open status: True
ratio of positive domain = 9088 / 17796 = 0.5106765565295572
pruning-in-iteration extra time: 0.0049970149993896484
Time: prepare 0.4547    bound 0.5111    transfer 0.0793    finalize 0.0994    func 1.1465    
Accumulated time: func 11.4631    prepare 3.4019    bound 5.6138    transfer 0.6806    finalize 1.5619    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01196 (27), -0.01137 (26), -0.01128 (26), -0.01123 (27), -0.01096 (27), -0.01084 (25), -0.01079 (27), -0.01049 (27), -0.01036 (25), -0.01028 (27), -0.01023 (27), -0.01023 (27), -0.01020 (27), -0.01020 (27), -0.01014 (27), -0.01010 (26), -0.00990 (27), -0.00987 (27), -0.00987 (27), -0.00981 (27), 
Length of domains: 8708
Time: pickout 0.1495    decision 0.5051    set_bounds 0.5921    solve 1.3590    add 0.0281    
Accumulated time: pickout 1.0656    decision 4.5520    set_bounds 4.4722    solve 11.7023    add 0.3647    
Current (lb-rhs): -0.011962860822677612
78714 domains visited
Cumulative time: 22.523984670639038

BaB round 20
batch: 8708
splitting decisions: 
split level 0: [/input-8, 1723] [/input-8, 1723] [/input-8, 1723] [/input-8, 1723] [/input-8, 1723] [/input-8, 1723] [/input-8, 1723] [/input-8, 1723] [/input-8, 1723] [/input-8, 1723] 
pruning_in_iteration open status: True
ratio of positive domain = 9114 / 17416 = 0.5233118971061093
pruning-in-iteration extra time: 0.00505518913269043
Time: prepare 0.4465    bound 0.4955    transfer 0.0776    finalize 0.0983    func 1.1189    
Accumulated time: func 12.5819    prepare 3.8488    bound 6.1093    transfer 0.7581    finalize 1.6602    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01126 (28), -0.01052 (28), -0.01038 (27), -0.01029 (27), -0.01013 (28), -0.01009 (28), -0.01003 (26), -0.00978 (28), -0.00966 (28), -0.00953 (28), -0.00950 (28), -0.00949 (26), -0.00940 (28), -0.00929 (28), -0.00920 (28), -0.00919 (27), -0.00919 (28), -0.00917 (28), -0.00903 (28), -0.00898 (28), 
Length of domains: 8302
Time: pickout 0.1470    decision 0.4951    set_bounds 0.5720    solve 1.1230    add 0.0306    
Accumulated time: pickout 1.2126    decision 5.0472    set_bounds 5.0442    solve 12.8253    add 0.3953    
Current (lb-rhs): -0.01126091182231903
87016 domains visited
Cumulative time: 24.94473910331726

BaB round 21
batch: 8302
splitting decisions: 
split level 0: [/input, 2205] [/input, 2205] [/input-8, 2044] [/input-8, 2044] [/input-8, 1584] [/input-8, 1584] [/input-8, 1584] [/input-8, 1584] [/input, 2205] [/input, 2205] 
pruning_in_iteration open status: True
ratio of positive domain = 8688 / 16604 = 0.5232474102625873
pruning-in-iteration extra time: 0.004985332489013672
Time: prepare 0.4333    bound 0.4757    transfer 0.0917    finalize 0.1033    func 1.1061    
Accumulated time: func 13.6880    prepare 4.2824    bound 6.5850    transfer 0.8498    finalize 1.7635    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01043 (29), -0.01009 (29), -0.00969 (29), -0.00954 (28), -0.00946 (28), -0.00936 (29), -0.00926 (29), -0.00912 (27), -0.00899 (29), -0.00895 (29), -0.00894 (29), -0.00883 (29), -0.00872 (29), -0.00870 (29), -0.00865 (29), -0.00862 (29), -0.00856 (29), -0.00855 (27), -0.00846 (29), -0.00837 (29), 
Length of domains: 7916
Time: pickout 0.1473    decision 0.6462    set_bounds 0.5491    solve 1.1101    add 0.0293    
Accumulated time: pickout 1.3599    decision 5.6934    set_bounds 5.5933    solve 13.9353    add 0.4246    
Current (lb-rhs): -0.01043008267879486
94932 domains visited
Cumulative time: 27.479137659072876

BaB round 22
batch: 7916
splitting decisions: 
split level 0: [/input-8, 2044] [/input-8, 1584] [/input-8, 1584] [/input-8, 1584] [/input, 2205] [/input, 2168] [/input, 1240] [/input, 1240] [/input-8, 1584] [/input-8, 2044] 
pruning_in_iteration open status: True
ratio of positive domain = 8615 / 15832 = 0.5441510864072764
pruning-in-iteration extra time: 0.00503849983215332
Time: prepare 0.4212    bound 0.4494    transfer 0.0721    finalize 0.2629    func 1.2073    
Accumulated time: func 14.8954    prepare 4.7039    bound 7.0344    transfer 0.9220    finalize 2.0265    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01039 (30), -0.00965 (30), -0.00950 (29), -0.00922 (30), -0.00891 (30), -0.00885 (30), -0.00880 (29), -0.00879 (30), -0.00868 (30), -0.00866 (30), -0.00860 (30), -0.00845 (30), -0.00843 (30), -0.00833 (30), -0.00833 (29), -0.00831 (30), -0.00829 (28), -0.00808 (29), -0.00808 (30), -0.00805 (30), 
Length of domains: 7217
Time: pickout 0.1419    decision 0.6213    set_bounds 0.3579    solve 1.2110    add 0.0417    
Accumulated time: pickout 1.5017    decision 6.3148    set_bounds 5.9512    solve 15.1463    add 0.4663    
Current (lb-rhs): -0.010391652584075928
102149 domains visited
Cumulative time: 29.903436183929443

BaB round 23
batch: 7217
splitting decisions: 
split level 0: [/input, 2168] [/input, 2168] [/input, 2205] [/input-8, 2044] [/input-8, 2044] [/input, 2168] [/input, 2168] [/input, 2168] [/input-8, 1099] [/input, 2168] 
pruning_in_iteration open status: True
ratio of positive domain = 7986 / 14434 = 0.5532769848967716
pruning-in-iteration extra time: 0.00498199462890625
Time: prepare 0.3899    bound 0.4149    transfer 0.0660    finalize 0.0874    func 0.9602    
Accumulated time: func 15.8556    prepare 5.0942    bound 7.4492    transfer 0.9880    finalize 2.1139    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00912 (31), -0.00877 (31), -0.00876 (30), -0.00835 (31), -0.00827 (30), -0.00825 (29), -0.00813 (31), -0.00799 (31), -0.00796 (31), -0.00772 (31), -0.00768 (29), -0.00767 (31), -0.00765 (30), -0.00757 (31), -0.00755 (31), -0.00742 (31), -0.00739 (31), -0.00736 (31), -0.00732 (31), -0.00728 (30), 
Length of domains: 6448
Time: pickout 0.1328    decision 0.6026    set_bounds 0.3216    solve 1.1597    add 0.0283    
Accumulated time: pickout 1.6346    decision 6.9174    set_bounds 6.2728    solve 16.3060    add 0.4946    
Current (lb-rhs): -0.00912313163280487
108597 domains visited
Cumulative time: 32.19842219352722

BaB round 24
batch: 6448
splitting decisions: 
split level 0: [/input-8, 2045] [/input-8, 2044] [/input-8, 2045] [/input-8, 2045] [/input-8, 2045] [/input-8, 2045] [/input-8, 2045] [/input-8, 2045] [/input-8, 1099] [/input-8, 1099] 
pruning_in_iteration open status: True
ratio of positive domain = 7273 / 12896 = 0.5639733250620347
pruning-in-iteration extra time: 0.005007743835449219
Time: prepare 0.3445    bound 0.3968    transfer 0.0359    finalize 0.2380    func 1.0163    
Accumulated time: func 16.8719    prepare 5.4389    bound 7.8460    transfer 1.0239    finalize 2.3519    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00840 (32), -0.00805 (32), -0.00762 (32), -0.00755 (31), -0.00751 (31), -0.00735 (32), -0.00726 (32), -0.00725 (32), -0.00704 (30), -0.00703 (31), -0.00694 (32), -0.00691 (31), -0.00683 (32), -0.00682 (32), -0.00669 (32), -0.00669 (32), -0.00667 (32), -0.00660 (32), -0.00657 (32), -0.00651 (32), 
Length of domains: 5623
Time: pickout 0.1219    decision 0.3697    set_bounds 0.2855    solve 1.0193    add 0.0249    
Accumulated time: pickout 1.7564    decision 7.2871    set_bounds 6.5583    solve 17.3253    add 0.5195    
Current (lb-rhs): -0.00840112566947937
114220 domains visited
Cumulative time: 34.06775188446045

BaB round 25
batch: 5623
splitting decisions: 
split level 0: [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input, 1995] [/input-8, 1825] [/input-8, 1825] [/input, 3765] 
pruning_in_iteration open status: True
ratio of positive domain = 6222 / 11246 = 0.5532633825360128
pruning-in-iteration extra time: 0.004984378814697266
Time: prepare 0.2999    bound 0.3786    transfer 0.0260    finalize 0.0689    func 0.7756    
Accumulated time: func 17.6474    prepare 5.7391    bound 8.2246    transfer 1.0499    finalize 2.4207    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00763 (33), -0.00701 (33), -0.00685 (33), -0.00679 (32), -0.00678 (32), -0.00675 (33), -0.00666 (33), -0.00648 (33), -0.00647 (33), -0.00632 (31), -0.00632 (32), -0.00623 (33), -0.00618 (33), -0.00605 (33), -0.00598 (33), -0.00593 (32), -0.00592 (33), -0.00592 (33), -0.00591 (33), -0.00589 (33), 
Length of domains: 5024
Time: pickout 0.1088    decision 0.3245    set_bounds 0.4007    solve 0.7783    add 0.0174    
Accumulated time: pickout 1.8652    decision 7.6116    set_bounds 6.9591    solve 18.1036    add 0.5369    
Current (lb-rhs): -0.007634803652763367
119244 domains visited
Cumulative time: 35.73684763908386

BaB round 26
batch: 5024
splitting decisions: 
split level 0: [/input, 1240] [/input, 1240] [/input, 1240] [/input-8, 1825] [/input-8, 1825] [/input, 3765] [/input, 1240] [/input, 1240] [/input-8, 1825] [/input-8, 1825] 
pruning_in_iteration open status: True
ratio of positive domain = 5748 / 10048 = 0.5720541401273885
pruning-in-iteration extra time: 0.0049228668212890625
Time: prepare 0.2743    bound 0.3419    transfer 0.0508    finalize 0.0618    func 0.7309    
Accumulated time: func 18.3783    prepare 6.0136    bound 8.5665    transfer 1.1006    finalize 2.4825    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00741 (34), -0.00679 (34), -0.00663 (34), -0.00643 (34), -0.00626 (34), -0.00624 (34), -0.00617 (33), -0.00605 (34), -0.00600 (34), -0.00595 (34), -0.00582 (34), -0.00572 (33), -0.00571 (33), -0.00566 (34), -0.00563 (34), -0.00558 (34), -0.00554 (32), -0.00552 (34), -0.00534 (34), -0.00533 (34), 
Length of domains: 4300
Time: pickout 0.0962    decision 0.4359    set_bounds 0.2174    solve 0.7333    add 0.0191    
Accumulated time: pickout 1.9614    decision 8.0475    set_bounds 7.1764    solve 18.8369    add 0.5560    
Current (lb-rhs): -0.007406890392303467
123544 domains visited
Cumulative time: 37.27333974838257

BaB round 27
batch: 4300
splitting decisions: 
split level 0: [/input-8, 1825] [/input-8, 1825] [/input-8, 567] [/input-8, 1825] [/input-8, 1825] [/input-8, 1750] [/input-8, 1825] [/input, 3765] [/input-8, 1825] [/input, 1240] 
pruning_in_iteration open status: True
ratio of positive domain = 5205 / 8600 = 0.6052325581395348
pruning-in-iteration extra time: 0.004920482635498047
Time: prepare 0.2306    bound 0.3395    transfer 0.0427    finalize 0.0533    func 0.6681    
Accumulated time: func 19.0464    prepare 6.2444    bound 8.9060    transfer 1.1433    finalize 2.5358    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00671 (35), -0.00602 (35), -0.00595 (34), -0.00592 (35), -0.00573 (35), -0.00556 (35), -0.00549 (34), -0.00548 (35), -0.00548 (35), -0.00545 (35), -0.00525 (35), -0.00524 (35), -0.00522 (35), -0.00513 (35), -0.00511 (34), -0.00509 (34), -0.00507 (35), -0.00505 (34), -0.00501 (35), -0.00498 (34), 
Length of domains: 3395
Time: pickout 0.0825    decision 0.3971    set_bounds 0.1855    solve 0.6706    add 0.0173    
Accumulated time: pickout 2.0439    decision 8.4446    set_bounds 7.3619    solve 19.5075    add 0.5733    
Current (lb-rhs): -0.006705492734909058
126939 domains visited
Cumulative time: 38.65715670585632

BaB round 28
batch: 3395
splitting decisions: 
split level 0: [/input-8, 1750] [/input-8, 1750] [/input-8, 1750] [/input-8, 1750] [/input, 2663] [/input, 1240] [/input-8, 1750] [/input, 2663] [/input-8, 1750] [/input-8, 1750] 
pruning_in_iteration open status: True
ratio of positive domain = 4354 / 6790 = 0.6412371134020618
pruning-in-iteration extra time: 0.004883766174316406
Time: prepare 0.1799    bound 0.3226    transfer 0.0201    finalize 0.0427    func 0.5670    
Accumulated time: func 19.6134    prepare 6.4245    bound 9.2286    transfer 1.1634    finalize 2.5785    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00614 (36), -0.00546 (36), -0.00535 (36), -0.00525 (35), -0.00516 (36), -0.00499 (36), -0.00491 (36), -0.00489 (36), -0.00487 (36), -0.00472 (35), -0.00469 (36), -0.00467 (36), -0.00466 (36), -0.00456 (36), -0.00448 (36), -0.00447 (35), -0.00443 (36), -0.00437 (36), -0.00436 (36), -0.00436 (35), 
Length of domains: 2436
Time: pickout 0.0695    decision 0.1988    set_bounds 0.2818    solve 0.5686    add 0.0091    
Accumulated time: pickout 2.1134    decision 8.6433    set_bounds 7.6437    solve 20.0761    add 0.5824    
Current (lb-rhs): -0.006142482161521912
129375 domains visited
Cumulative time: 39.80744910240173

BaB round 29
batch: 2436
splitting decisions: 
split level 0: [/input, 1958] [/input, 1162] [/input, 1162] [/input, 3765] [/input, 1958] [/input, 1240] [/input, 3765] [/input-8, 1825] [/input-8, 1825] [/input-8, 1750] 
pruning_in_iteration open status: True
ratio of positive domain = 3256 / 4872 = 0.6683087027914614
pruning-in-iteration extra time: 0.004834890365600586
Time: prepare 0.1257    bound 0.2915    transfer 0.0127    finalize 0.1860    func 0.6165    
Accumulated time: func 20.2299    prepare 6.5505    bound 9.5202    transfer 1.1761    finalize 2.7645    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00554 (37), -0.00485 (37), -0.00475 (37), -0.00469 (36), -0.00455 (37), -0.00438 (37), -0.00432 (37), -0.00429 (37), -0.00428 (37), -0.00416 (36), -0.00408 (37), -0.00407 (37), -0.00407 (37), -0.00395 (37), -0.00390 (36), -0.00388 (37), -0.00382 (37), -0.00379 (36), -0.00376 (37), -0.00376 (36), 
Length of domains: 1616
Time: pickout 0.0530    decision 0.1469    set_bounds 0.1043    solve 0.6176    add 0.0055    
Accumulated time: pickout 2.1664    decision 8.7902    set_bounds 7.7480    solve 20.6937    add 0.5879    
Current (lb-rhs): -0.005535006523132324
130991 domains visited
Cumulative time: 40.752042055130005

BaB round 30
batch: 1616
splitting decisions: 
split level 0: [/input, 1162] [/input, 1162] [/input, 3765] [/input, 1162] [/input, 1958] [/input, 1958] [/input-8, 2045] [/input, 1240] [/input, 1162] [/input, 1162] 
pruning_in_iteration open status: True
ratio of positive domain = 2155 / 3232 = 0.666769801980198
pruning-in-iteration extra time: 0.004792928695678711
Time: prepare 0.0821    bound 0.2912    transfer 0.0078    finalize 0.0191    func 0.4017    
Accumulated time: func 20.6317    prepare 6.6328    bound 9.8114    transfer 1.1840    finalize 2.7836    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00517 (38), -0.00449 (38), -0.00438 (38), -0.00418 (38), -0.00408 (37), -0.00402 (38), -0.00395 (38), -0.00393 (38), -0.00392 (38), -0.00371 (38), -0.00371 (38), -0.00371 (38), -0.00356 (37), -0.00351 (38), -0.00346 (38), -0.00340 (38), -0.00337 (38), -0.00332 (38), -0.00329 (37), -0.00325 (38), 
Length of domains: 1077
Time: pickout 0.0349    decision 0.1015    set_bounds 0.0677    solve 0.4024    add 0.0063    
Accumulated time: pickout 2.2013    decision 8.8917    set_bounds 7.8157    solve 21.0961    add 0.5941    
Current (lb-rhs): -0.00517156720161438
132068 domains visited
Cumulative time: 41.375288248062134

BaB round 31
batch: 1077
splitting decisions: 
split level 0: [/input, 1958] [/input, 1958] [/input, 1958] [/input, 1958] [/input, 1958] [/input, 1958] [/input, 1958] [/input-8, 2045] [/input, 1958] [/input, 1958] 
pruning_in_iteration open status: True
ratio of positive domain = 1443 / 2154 = 0.66991643454039
pruning-in-iteration extra time: 0.004788637161254883
Time: prepare 0.0545    bound 0.2470    transfer 0.0056    finalize 0.0123    func 0.3196    
Accumulated time: func 20.9513    prepare 6.6876    bound 10.0584    transfer 1.1895    finalize 2.7959    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00458 (39), -0.00390 (39), -0.00379 (39), -0.00372 (38), -0.00360 (39), -0.00343 (39), -0.00337 (39), -0.00337 (39), -0.00333 (39), -0.00319 (38), -0.00313 (39), -0.00312 (39), -0.00312 (39), -0.00301 (39), -0.00293 (38), -0.00292 (39), -0.00287 (39), -0.00281 (39), -0.00281 (38), -0.00280 (39), 
Length of domains: 711
Time: pickout 0.0254    decision 0.0660    set_bounds 0.0447    solve 0.3207    add 0.0039    
Accumulated time: pickout 2.2267    decision 8.9577    set_bounds 7.8603    solve 21.4168    add 0.5980    
Current (lb-rhs): -0.004583865404129028
132779 domains visited
Cumulative time: 41.842994689941406

BaB round 32
batch: 711
splitting decisions: 
split level 0: [/input, 3765] [/input, 3765] [/input, 1958] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input, 1958] 
pruning_in_iteration open status: True
ratio of positive domain = 999 / 1422 = 0.7025316455696202
pruning-in-iteration extra time: 0.004723072052001953
Time: prepare 0.0363    bound 0.2012    transfer 0.0036    finalize 0.0090    func 0.2501    
Accumulated time: func 21.2013    prepare 6.7240    bound 10.2595    transfer 1.1931    finalize 2.8048    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00402 (40), -0.00333 (40), -0.00323 (40), -0.00322 (40), -0.00313 (39), -0.00304 (40), -0.00287 (40), -0.00281 (40), -0.00277 (40), -0.00261 (39), -0.00257 (40), -0.00256 (40), -0.00255 (40), -0.00250 (40), -0.00245 (40), -0.00236 (40), -0.00234 (39), -0.00232 (40), -0.00231 (40), -0.00225 (40), 
Length of domains: 423
Time: pickout 0.0174    decision 0.0529    set_bounds 0.0292    solve 0.2504    add 0.0019    
Accumulated time: pickout 2.2441    decision 9.0106    set_bounds 7.8895    solve 21.6671    add 0.5999    
Current (lb-rhs): -0.004022330045700073
133202 domains visited
Cumulative time: 42.19930553436279

BaB round 33
batch: 423
splitting decisions: 
split level 0: [/input, 3765] [/input, 3765] [/input-8, 662] [/input-8, 662] [/input, 1958] [/input, 1958] [/input, 1958] [/input, 1958] [/input-8, 662] [/input-8, 662] 
pruning_in_iteration open status: True
ratio of positive domain = 616 / 846 = 0.7281323877068557
pruning-in-iteration extra time: 0.004689931869506836
Time: prepare 0.0215    bound 0.1881    transfer 0.0022    finalize 0.0051    func 0.2169    
Accumulated time: func 21.4183    prepare 6.7457    bound 10.4476    transfer 1.1953    finalize 2.8099    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00285 (41), -0.00276 (41), -0.00263 (41), -0.00257 (40), -0.00211 (41), -0.00207 (41), -0.00206 (41), -0.00205 (41), -0.00205 (40), -0.00197 (41), -0.00196 (41), -0.00187 (41), -0.00186 (41), -0.00185 (41), -0.00185 (41), -0.00180 (41), -0.00177 (41), -0.00177 (40), -0.00171 (41), -0.00166 (40), 
Length of domains: 230
Time: pickout 0.0116    decision 0.0378    set_bounds 0.0174    solve 0.2171    add 0.0016    
Accumulated time: pickout 2.2557    decision 9.0483    set_bounds 7.9069    solve 21.8842    add 0.6015    
Current (lb-rhs): -0.002852991223335266
133432 domains visited
Cumulative time: 42.48758029937744

BaB round 34
batch: 230
splitting decisions: 
split level 0: [/input-8, 662] [/input-8, 662] [/input, 2007] [/input, 2007] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] 
pruning_in_iteration open status: True
ratio of positive domain = 355 / 460 = 0.7717391304347826
pruning-in-iteration extra time: 0.004672527313232422
Time: prepare 0.0118    bound 0.1631    transfer 0.0013    finalize 0.0030    func 0.1792    
Accumulated time: func 21.5975    prepare 6.7577    bound 10.6106    transfer 1.1966    finalize 2.8128    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00193 (42), -0.00184 (42), -0.00172 (42), -0.00167 (42), -0.00158 (42), -0.00146 (42), -0.00138 (41), -0.00135 (41), -0.00120 (41), -0.00119 (42), -0.00115 (42), -0.00114 (42), -0.00113 (42), -0.00104 (42), -0.00104 (42), -0.00096 (42), -0.00096 (41), -0.00095 (41), -0.00094 (42), -0.00094 (42), 
Length of domains: 105
Time: pickout 0.0064    decision 0.0266    set_bounds 0.0096    solve 0.1793    add 0.0015    
Accumulated time: pickout 2.2621    decision 9.0750    set_bounds 7.9166    solve 22.0635    add 0.6030    
Current (lb-rhs): -0.001928076148033142
133537 domains visited
Cumulative time: 42.71257829666138

BaB round 35
batch: 105
splitting decisions: 
split level 0: [/input, 2007] [/input, 2007] [/input, 2007] [/input, 2007] [/input, 2007] [/input, 2007] [/input, 2007] [/input, 2007] [/input, 2007] [/input, 2007] 
pruning_in_iteration open status: True
ratio of positive domain = 164 / 210 = 0.780952380952381
pruning-in-iteration extra time: 0.004590749740600586
Time: prepare 0.0055    bound 0.1366    transfer 0.0007    finalize 0.0013    func 0.1442    
Accumulated time: func 21.7416    prepare 6.7634    bound 10.7473    transfer 1.1974    finalize 2.8141    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00120 (43), -0.00110 (43), -0.00096 (43), -0.00094 (43), -0.00085 (43), -0.00080 (43), -0.00071 (43), -0.00071 (43), -0.00061 (43), -0.00060 (43), -0.00055 (43), -0.00051 (43), -0.00047 (42), -0.00046 (43), -0.00043 (42), -0.00042 (43), -0.00042 (43), -0.00040 (43), -0.00036 (43), -0.00035 (43), 
Length of domains: 46
Time: pickout 0.0034    decision 0.0199    set_bounds 0.0046    solve 0.1443    add 0.0014    
Accumulated time: pickout 2.2655    decision 9.0949    set_bounds 7.9211    solve 22.2078    add 0.6044    
Current (lb-rhs): -0.001196160912513733
133583 domains visited
Cumulative time: 42.88703775405884

BaB round 36
batch: 46
splitting decisions: 
split level 0: [/input-8, 267] [/input-8, 267] [/input-8, 267] [/input-8, 267] [/input-8, 267] [/input-8, 267] [/input-8, 267] [/input-8, 267] [/input-8, 267] [/input, 2007] 
split level 1: [/input-8, 2030] [/input-8, 2030] [/input-8, 2030] [/input-8, 2030] [/input-8, 2030] [/input-8, 2030] [/input-8, 2030] [/input-8, 2030] [/input-8, 2030] [/input-8, 2030] 
split level 2: [/input-8, 1056] [/input-8, 1056] [/input-8, 1056] [/input-8, 1056] [/input-8, 1056] [/input-8, 1056] [/input-8, 1056] [/input-8, 1056] [/input-8, 1056] [/input-8, 1056] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 368 / 368 = 1.0
pruning-in-iteration extra time: 4.100799560546875e-05
Time: prepare 0.0094    bound 0.0095    transfer 0.0015    finalize 0.0022    func 0.0226    
Accumulated time: func 21.7642    prepare 6.7730    bound 10.7567    transfer 1.1989    finalize 2.8163    
all_split False
Length of domains: 0
Time: pickout 0.0019    decision 0.0141    set_bounds 0.0127    solve 0.0227    add 0.0001    
Accumulated time: pickout 2.2674    decision 9.1089    set_bounds 7.9338    solve 22.2304    add 0.6045    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
133583 domains visited
Cumulative time: 42.93937587738037


Properties batch 1, size 1
Remaining timeout: 155.5955832004547
Verifying property 1 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.4321024417877197.

Properties batch 2, size 1
Remaining timeout: 155.4565658569336
Verifying property 2 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.528141975402832.

Properties batch 3, size 1
Remaining timeout: 155.3490490913391
Verifying property 3 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.5957493782043457.

Properties batch 4, size 1
Remaining timeout: 155.24237036705017
Verifying property 4 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.6981372833251953.

Properties batch 5, size 1
Remaining timeout: 155.13572669029236
Verifying property 5 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.7319130897521973.

Properties batch 6, size 1
Remaining timeout: 155.0289134979248
Verifying property 6 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.6171395778656006.

Properties batch 7, size 1
Remaining timeout: 154.92222595214844
Verifying property 7 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.472118377685547.

Properties batch 8, size 1
Remaining timeout: 154.81569981575012
Verifying property 8 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.076391220092773.
Result: safe in 45.2908 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 124, vnnlib ID: 124 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.69559193, -7.96780491, -6.96483183, -7.45871067, -6.68889904,
         -7.58828831, -6.67497444, -6.98177767, -8.06610775, -8.63962460]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [547]; unstable size 547; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 228, 1, 547] with unstable size 227 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 547] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 547] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [227]; unstable size 227; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 227] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 227] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.58523273, -0.92486894, -2.40603924, -1.88837290, -2.64663839,
         -1.76642704, -2.72795200, -2.38057590, -1.24313211]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.69559193, -7.96780491, -6.96483183, -7.45871067, -6.68889904,
         -7.58828831, -6.67497444, -6.98177767, -8.06610775, -8.63962460]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.69559193, -7.96780586, -6.96483278, -7.45871067, -6.68889999,
          -7.58828878, -6.67497540, -6.98177910, -8.06610775, -8.63962555],
         [-7.69559193, -7.96780586, -6.96483278, -7.45871067, -6.68889999,
          -7.58828878, -6.67497540, -6.98177910, -8.06610775, -8.63962555]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.94403362, -0.67181969, -1.67479277, -1.18091488, -1.95072556,
          -1.05133677, -1.96465015, -1.65784645, -0.57351780]]],
       device='cuda:0')
number of violation:  9
clean attack image tensor([[[[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         ...,


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0815 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 125, vnnlib ID: 125 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.45314455,  -7.18863773,  -8.37823200,  -9.04793167,  -9.03023815,
          -9.23170471, -10.10972786, -10.12581825,  -6.64005661,  -7.36846209]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [564]; unstable size 564; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 564] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 564] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 564] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 148] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.44336748, -0.41944873,  0.41273689,  1.05374670,  1.06570005,
          1.21813250,  2.11687565,  2.11616516, -1.28266501]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.45314455,  -7.18863773,  -8.37823200,  -9.04793167,  -9.03023815,
          -9.23170471, -10.10972786, -10.12581825,  -6.64005661,  -7.36846209]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.45314312,  -7.18863678,  -8.37823296,  -9.04792976,  -9.03023720,
           -9.23170471, -10.10972786, -10.12581825,  -6.64005566,  -7.36846113],
         [ -7.45314312,  -7.18863678,  -8.37823296,  -9.04792976,  -9.03023720,
           -9.23170471, -10.10972786, -10.12581825,  -6.64005566,  -7.36846113]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.08468199, -0.17982435, -0.72840548]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0730 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 126, vnnlib ID: 126 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.54385185, -7.41220284, -2.34506559, -2.95553207, -2.41963601,
         -3.01310992, -2.81382346, -2.59146428, -7.24296570, -5.83741570]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [396]; unstable size 396; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 396] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 396] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 396] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 177] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.65073180,  4.21796751, -0.26915115,  0.22882652,  0.28623378,
         -0.01064329, -0.09029388,  4.20063686,  2.69216037]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.54385185, -7.41220284, -2.34506559, -2.95553207, -2.41963601,
         -3.01310992, -2.81382346, -2.59146428, -7.24296570, -5.83741570]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.54385185, -7.41220379, -2.34506559, -2.95553231, -2.41963625,
          -3.01311040, -2.81382322, -2.59146428, -7.24296570, -5.83741570],
         [-5.54385185, -7.41220379, -2.34506559, -2.95553231, -2.41963625,
          -3.01311040, -2.81382322, -2.59146428, -7.24296570, -5.83741570]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07457066,  0.39418697,  0.17182803]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]],


         [[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]],


         [[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0410 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 127, vnnlib ID: 127 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.39800262, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
         -5.32085514, -5.70522690, -5.39239740, -4.68354988, -5.44279432]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [602]; unstable size 602; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 137, 1, 602] with unstable size 136 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 602] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 602] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [136]; unstable size 136; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 136] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 136] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.73008388,  1.05035102, -0.48766088, -0.22834897, -0.77157784,
         -0.10954219,  0.24981642, -0.21459514,  0.21009302]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.39800262, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
         -5.32085514, -5.70522690, -5.39239740, -4.68354988, -5.44279432]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.39800215, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
          -5.32085562, -5.70522690, -5.39239693, -4.68354988, -5.44279432],
         [-4.39800215, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
          -5.32085562, -5.70522690, -5.39239693, -4.68354988, -5.44279432]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.28554773,  0.22653723,  0.50871849, -0.00213194,  0.63730574,
           0.70884705]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0796 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 128, vnnlib ID: 128 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.41261196, -10.11622715,  -6.97528791,  -7.70427608,  -6.80372143,
          -7.77790976,  -6.57194042,  -8.02606297,  -9.93407154,  -9.15845585]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [471]; unstable size 471; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 210, 1, 471] with unstable size 209 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 471] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 471] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [209]; unstable size 209; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 209] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 209] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.17617607,  2.53004360,  0.03650129,  0.78286886, -0.09084690,
          0.84507632,  0.92964882,  2.50925636,  1.68634844]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.41261196, -10.11622715,  -6.97528791,  -7.70427608,  -6.80372143,
          -7.77790976,  -6.57194042,  -8.02606297,  -9.93407154,  -9.15845585]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.13it/s]100%|██████████| 1/1 [00:00<00:00,  9.12it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.12287617, -9.92002869, -6.60754442, -7.37705517, -6.42930222,
          -7.44449568, -6.38382149, -7.65928459, -9.62154961, -8.92986012]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04548073]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1122 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.553852081298828
alpha/beta optimization time: 1.1175391674041748
initial alpha-crown bounds: tensor([[ 1.19834328,  2.55369520,  0.05347490,  0.79098034, -0.08158422,
          0.85336864,  0.94275761,  2.53685713,  1.70595884]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.08158421516418457
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.71430659294128
Verifying property 0 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.198343276977539.

Properties batch 1, size 1
Remaining timeout: 198.59971809387207
Verifying property 1 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.5536952018737793.

Properties batch 2, size 1
Remaining timeout: 198.49326539039612
Verifying property 2 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.05347490310668945.

Properties batch 3, size 1
Remaining timeout: 198.3865931034088
Verifying property 3 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.790980339050293.

Properties batch 4, size 1
Remaining timeout: 198.2807261943817
Verifying property 4 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08158422]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.41261196, -10.11622715,  -6.97528791,  -7.70427608,  -6.80372143,
         -7.77790976,  -6.57194042,  -8.02606297,  -9.93407154,  -9.15845585],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08158422]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 471
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 206
Node /15 input 0: size torch.Size([100]) unstable 4
-----------------
# of unstable neurons: 681
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 50] 
split level 1: [/input-12, 5] 
split level 2: [/input-8, 555] 
split level 3: [/input-8, 1457] 
split level 4: [/input-8, 28] 
split level 5: [/input-8, 1451] 
split level 6: [/input-8, 1437] 
split level 7: [/input-8, 313] 
pruning_in_iteration open status: True
ratio of positive domain = 162 / 256 = 0.6328125
pruning-in-iteration extra time: 0.004898548126220703
Time: prepare 0.0030    bound 0.2243    transfer 0.0021    finalize 0.0017    func 0.2313    
Accumulated time: func 0.2313    prepare 0.0035    bound 0.2243    transfer 0.0021    finalize 0.0017    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00922 (8), -0.00839 (8), -0.00819 (8), -0.00795 (8), -0.00781 (8), -0.00756 (8), -0.00754 (8), -0.00739 (8), -0.00739 (8), -0.00713 (8), -0.00693 (8), -0.00689 (8), -0.00666 (8), -0.00662 (8), -0.00649 (8), -0.00613 (8), -0.00592 (8), -0.00575 (8), -0.00556 (8), -0.00552 (8), 
Length of domains: 94
Time: pickout 0.0003    decision 0.0223    set_bounds 0.0179    solve 0.2313    add 0.0069    
Accumulated time: pickout 0.0003    decision 0.0223    set_bounds 0.0179    solve 0.2313    add 0.0069    
Current (lb-rhs): -0.009217381477355957
94 domains visited
Cumulative time: 0.2844836711883545

BaB round 2
batch: 94
splitting decisions: 
split level 0: [/input-8, 1628] [/input-8, 1458] [/input-8, 19] [/input-8, 796] [/input-8, 1628] [/input-8, 1458] [/input-8, 19] [/input-8, 796] [/input-8, 1628] [/input-8, 1458] 
split level 1: [/input-8, 19] [/input-8, 19] [/input-8, 1134] [/input-8, 1458] [/input-8, 19] [/input-8, 19] [/input-8, 1134] [/input-8, 1458] [/input-8, 19] [/input-8, 19] 
pruning_in_iteration open status: True
ratio of positive domain = 270 / 376 = 0.7180851063829787
pruning-in-iteration extra time: 0.0052564144134521484
Time: prepare 0.0075    bound 0.1789    transfer 0.0025    finalize 0.0027    func 0.1917    
Accumulated time: func 0.4229    prepare 0.0112    bound 0.4032    transfer 0.0046    finalize 0.0045    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00608 (10), -0.00530 (10), -0.00491 (10), -0.00488 (10), -0.00470 (10), -0.00438 (10), -0.00411 (10), -0.00407 (10), -0.00405 (10), -0.00404 (10), -0.00382 (10), -0.00382 (10), -0.00371 (10), -0.00369 (10), -0.00363 (10), -0.00363 (10), -0.00349 (10), -0.00324 (10), -0.00320 (10), -0.00306 (10), 
Length of domains: 106
Time: pickout 0.0047    decision 0.0283    set_bounds 0.0112    solve 0.1918    add 0.0029    
Accumulated time: pickout 0.0051    decision 0.0506    set_bounds 0.0291    solve 0.4231    add 0.0098    
Current (lb-rhs): -0.006075382232666016
200 domains visited
Cumulative time: 0.5247087478637695

BaB round 3
batch: 106
splitting decisions: 
split level 0: [/input-8, 1134] [/input-8, 148] [/input-8, 19] [/input-8, 1134] [/input-8, 1134] [/input-8, 148] [/input-8, 19] [/input-8, 1134] [/input-8, 148] [/input-8, 19] 
pruning_in_iteration open status: True
ratio of positive domain = 144 / 212 = 0.679245283018868
pruning-in-iteration extra time: 0.00532221794128418
Time: prepare 0.0044    bound 0.2635    transfer 0.0020    finalize 0.0012    func 0.2712    
Accumulated time: func 0.6942    prepare 0.0158    bound 0.6667    transfer 0.0066    finalize 0.0057    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00449 (11), -0.00371 (11), -0.00369 (11), -0.00333 (11), -0.00332 (11), -0.00310 (11), -0.00296 (11), -0.00278 (11), -0.00255 (11), -0.00254 (11), -0.00253 (11), -0.00242 (11), -0.00241 (11), -0.00231 (11), -0.00230 (11), -0.00216 (11), -0.00207 (11), -0.00207 (11), -0.00203 (11), -0.00201 (11), 
Length of domains: 68
Time: pickout 0.0020    decision 0.0155    set_bounds 0.0048    solve 0.2713    add 0.0014    
Accumulated time: pickout 0.0071    decision 0.0661    set_bounds 0.0339    solve 0.6944    add 0.0111    
Current (lb-rhs): -0.004485011100769043
268 domains visited
Cumulative time: 0.8205149173736572

BaB round 4
batch: 68
splitting decisions: 
split level 0: [/input-8, 52] [/input-8, 52] [/input-8, 52] [/input-8, 52] [/input-8, 757] [/input-8, 52] [/input-8, 52] [/input-8, 757] [/input-8, 52] [/input-8, 52] 
split level 1: [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1195] [/input-8, 1674] [/input-8, 1674] [/input-8, 1195] [/input-8, 1674] [/input-8, 1674] 
pruning_in_iteration open status: True
ratio of positive domain = 258 / 272 = 0.9485294117647058
pruning-in-iteration extra time: 0.005228757858276367
Time: prepare 0.0054    bound 0.1620    transfer 0.0013    finalize 0.0015    func 0.1703    
Accumulated time: func 0.8645    prepare 0.0213    bound 0.8287    transfer 0.0080    finalize 0.0072    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00123 (13), -0.00111 (13), -0.00095 (13), -0.00076 (13), -0.00050 (13), -0.00043 (13), -0.00037 (13), -0.00031 (13), -0.00021 (13), -0.00015 (13), -0.00011 (13), -0.00006 (13), -0.00002 (13), -0.00001 (13), 
Length of domains: 14
Time: pickout 0.0015    decision 0.0216    set_bounds 0.0074    solve 0.1704    add 0.0011    
Accumulated time: pickout 0.0086    decision 0.0878    set_bounds 0.0413    solve 0.8649    add 0.0122    
Current (lb-rhs): -0.0012316703796386719
282 domains visited
Cumulative time: 1.0237212181091309

BaB round 5
batch: 14
splitting decisions: 
split level 0: [/input-8, 1443] [/input-8, 1443] [/input-8, 1443] [/input-8, 1443] [/input-8, 1443] [/input-8, 1443] [/input-8, 1443] [/input-8, 1443] [/input-8, 1443] [/input-8, 1443] 
split level 1: [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] 
split level 2: [/input-8, 1458] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1458] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] 
split level 3: [/input-8, 148] [/input-8, 148] [/input-8, 148] [/input-8, 148] [/input-8, 148] [/input-8, 148] [/input-8, 148] [/input-8, 148] [/input-8, 148] [/input-8, 148] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 224 / 224 = 1.0
pruning-in-iteration extra time: 4.315376281738281e-05
Time: prepare 0.0044    bound 0.0040    transfer 0.0007    finalize 0.0011    func 0.0103    
Accumulated time: func 0.8748    prepare 0.0260    bound 0.8328    transfer 0.0087    finalize 0.0083    
all_split False
Length of domains: 0
Time: pickout 0.0011    decision 0.0214    set_bounds 0.0090    solve 0.0104    add 0.0001    
Accumulated time: pickout 0.0098    decision 0.1092    set_bounds 0.0503    solve 0.8752    add 0.0123    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
282 domains visited
Cumulative time: 1.0662288665771484


Properties batch 5, size 1
Remaining timeout: 197.08345222473145
Verifying property 5 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.8533686399459839.

Properties batch 6, size 1
Remaining timeout: 196.87638306617737
Verifying property 6 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9427576065063477.

Properties batch 7, size 1
Remaining timeout: 196.76680636405945
Verifying property 7 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.5368571281433105.

Properties batch 8, size 1
Remaining timeout: 196.66197991371155
Verifying property 8 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.7059588432312012.
Result: safe in 3.4424 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 129, vnnlib ID: 129 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.83963740, -5.78964806, -1.83691561, -1.95573735, -1.63162184,
         -2.07016230, -3.15051937, -3.26623225, -1.61969507, -4.62280273]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [452]; unstable size 452; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 452] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 452] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 452] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 203] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.03636277,  2.65717649, -0.59098852, -0.13531050, -0.81601834,
          0.63781679,  0.66199231, -1.23648870,  1.56749058]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.83963740, -5.78964806, -1.83691561, -1.95573735, -1.63162184,
         -2.07016230, -3.15051937, -3.26623225, -1.61969507, -4.62280273]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.83963752, -5.78964806, -1.83691537, -1.95573735, -1.63162184,
          -2.07016230, -3.15051913, -3.26623249, -1.61969483, -4.62280178],
         [-1.83963752, -5.78964806, -1.83691537, -1.95573735, -1.63162184,
          -2.07016230, -3.15051913, -3.26623249, -1.61969483, -4.62280178]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.23052478, -0.23324692, -0.11442494, -0.43854046, -0.45046747]]],
       device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0821 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 130, vnnlib ID: 130 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.94819498, -10.50515652,  -5.49739599,  -6.42426491,  -5.53212261,
          -6.49647903,  -6.45488739,  -5.53136778, -11.77412796,  -9.99837017]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [381]; unstable size 381; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 381] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 381] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 381] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 139] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.93346745,  3.23019981, -1.30597436, -0.08756115, -1.34070396,
         -0.31846690, -1.51010025,  4.62571049,  2.77353907]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.94819498, -10.50515652,  -5.49739599,  -6.42426491,  -5.53212261,
          -6.49647903,  -6.45488739,  -5.53136778, -11.77412796,  -9.99837017]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.94819546, -10.50515652,  -5.49739647,  -6.42426586,  -5.53212261,
           -6.49647903,  -6.45488739,  -5.53136826, -11.77412796,  -9.99836922],
         [ -7.94819546, -10.50515652,  -5.49739647,  -6.42426586,  -5.53212261,
           -6.49647903,  -6.45488739,  -5.53136826, -11.77412796,  -9.99836922]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.99908257, -0.07221317, -0.96435642, -0.04159164, -0.96511078]]],
       device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0826 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 131, vnnlib ID: 131 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.40095615,  -9.83375263,  -7.76689386,  -9.66946220,  -8.91213799,
          -9.84124184, -11.04437828, -10.26787376,  -3.98419762,  -9.49902916]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [464]; unstable size 464; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 155, 1, 464] with unstable size 154 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 464] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 464] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [154]; unstable size 154; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 154] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 154] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.04108191, 5.15906715, 3.08301497, 4.88842583, 4.12479210, 5.03533173,
         6.29986477, 5.32776594, 4.85973024]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0646 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 132, vnnlib ID: 132 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.95324135, -15.74180508, -20.80966187, -22.22572708, -21.19065666,
         -22.59031105, -22.29429626, -21.67894745, -16.55251884, -15.91638851]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [432]; unstable size 432; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 132, 1, 432] with unstable size 131 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 432] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 432] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [131]; unstable size 131; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 131] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 131] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.68451166,  4.31257486,  5.69330406,  4.56155634,  6.04201603,
          5.73533583,  5.05597782,  0.24247551, -0.06809056]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.95324135, -15.74180508, -20.80966187, -22.22572708, -21.19065666,
         -22.59031105, -22.29429626, -21.67894745, -16.55251884, -15.91638851]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.31996536, -15.27309704, -20.08948708, -21.46234131, -20.40325928,
          -21.81718063, -21.57792282, -20.87321854, -15.90462685, -15.27287483]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00022221]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0719 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 133, vnnlib ID: 133 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -3.23170614, -10.46739864,  -2.10017300,  -3.30273414,  -5.96899986,
          -3.33501148,  -5.76224136,  -4.57778931,  -9.25406361,  -8.82499790]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [286]; unstable size 286; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 61, 1, 286] with unstable size 60 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 286] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 286] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [60]; unstable size 60; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 60] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 60] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93707120, 8.02992725, 1.03405452, 3.70453072, 1.06637478, 3.43099546,
         2.30599809, 6.81841040, 6.35690212]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0650 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 134, vnnlib ID: 134 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.79958057, -6.86547184, -6.03746557, -7.86904621, -6.47844791,
         -8.08712673, -6.96507740, -7.95197964, -3.79648733, -6.57416487]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [608]; unstable size 608; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 164, 1, 608] with unstable size 163 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 608] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 608] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [163]; unstable size 163; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 163] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 163] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.48984337,  1.58062875,  3.18308425,  1.96417892,  3.38943863,
          2.37361073,  3.29370785, -0.33310568,  2.16880035]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.79958057, -6.86547184, -6.03746557, -7.86904621, -6.47844791,
         -8.08712673, -6.96507740, -7.95197964, -3.79648733, -6.57416487]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.79958057, -6.86547184, -6.03746557, -7.86904621, -6.47844791,
          -8.08712673, -6.96507740, -7.95197964, -3.79648733, -6.57416487]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00309324]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.15396857,  1.01111114,  1.01111114,  ...,  1.02698421,
             1.04285717,  1.10634947],
           [ 1.02698421,  0.94761908,  0.94761908,  ...,  1.12222254,
             1.12222254,  1.16984153],
           [ 0.99523818,  0.91587305,  0.86825401,  ...,  1.12222254,
             1.13809550,  1.16984153],
           ...,
           [-0.14761895, -0.41746020, -0.43333322,  ..., -0.36984116,
            -0.33809513, -0.41746020],
           [-0.30634910, -0.56031746, -0.57619047,  ..., -0.68730158,
            -0.54444444, -0.36984116],
           [-0.22698402, -0.33809513, -0.40158719,  ..., -0.59206349,
            -0.32222211, -0.14761895]],

          [[ 1.20772982,  1.06280196,  1.06280196,  ...,  1.07890511,
             1.09500813,  1.15942061],
           [ 1.07890511,  0.99838978,  0.99838978,  ...,  1.17552364,
             1.17552364,  1.22383285],
           [ 1.04669893,  0.96618366,  0.91787446,  ...,  1.17552364,
             1.19162667,  1.22383285],
           ...,
           [-0.11272129, -0.38647330, -0.40257636,  ..., -0.33816412,
            -0.30595800, -0.38647330],
           [-0.27375188, -0.53140092, -0.54750401,  ..., -0.66022539,
            -0.51529789, -0.33816412],
           [-0.19323659, -0.30595800, -0.37037024,  ..., -0.56360704,
            -0.28985494, -0.11272129]],

          [[ 1.26086998,  1.12593722,  1.12593722,  ...,  1.14092970,
             1.15592217,  1.21589243],
           [ 1.14092970,  1.06596720,  1.06596720,  ...,  1.23088503,
             1.23088503,  1.27586246],
           [ 1.11094475,  1.03598225,  0.99100471,  ...,  1.23088503,
             1.24587750,  1.27586246],
           ...,
           [ 0.03148442, -0.22338814, -0.23838064,  ..., -0.17841063,
            -0.14842562, -0.22338814],
           [-0.11844061, -0.35832080, -0.37331331,  ..., -0.47826082,
            -0.34332830, -0.17841063],
           [-0.04347810, -0.14842562, -0.20839565,  ..., -0.38830581,
            -0.13343313,  0.03148442]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0541 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 135, vnnlib ID: 135 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.85584545,  -6.89210796, -11.20330238, -10.48305511, -10.31528664,
         -10.58248711, -11.25512695, -10.38301277,  -8.54595566,  -7.81960535]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [417]; unstable size 417; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 417] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 417] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 417] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 171] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.35080290, 3.51902580, 2.76685762, 2.67035389, 2.85706902, 3.53440428,
         2.64734840, 1.17310023, 0.69272709]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0585 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 136, vnnlib ID: 136 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.31404114, -11.99935341,  -8.52472019,  -9.11652184,  -8.93289280,
          -9.32760048, -10.07054329, -10.77766991,  -8.21101475, -11.86982346]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [351]; unstable size 351; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 351] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 351] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 351] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 141] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.09101105, 0.87874758, 1.34494710, 1.28547025, 1.54521215, 2.33845377,
         2.98431873, 0.63081115, 3.98045564]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0473 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 137, vnnlib ID: 137 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.67846966, -11.31667233,  -7.14757013,  -7.76657391,  -7.15691566,
          -7.78410292,  -6.75477409,  -8.83060551, -11.06530190, -10.73754597]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [390]; unstable size 390; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 390] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 390] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 390] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 239] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.07701063,  3.63565087, -0.04559052,  0.64380234, -0.00980759,
          0.65269989,  1.48101175,  3.16953516,  3.15534282]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.67846966, -11.31667233,  -7.14757013,  -7.76657391,  -7.15691566,
          -7.78410292,  -6.75477409,  -8.83060551, -11.06530190, -10.73754597]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.96it/s]100%|██████████| 1/1 [00:00<00:00,  8.95it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.36132240, -11.14967251,  -6.83248758,  -7.53480721,  -6.91983700,
           -7.54735374,  -6.71112919,  -8.56491947, -10.71888256, -10.59876251],
         [ -9.36132240, -11.14967251,  -6.83248758,  -7.53480721,  -6.91983700,
           -7.54735374,  -6.71112919,  -8.56491947, -10.71888256, -10.59876251]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.12135839, 0.20870781]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1154 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.945514678955078
alpha/beta optimization time: 1.114513874053955
initial alpha-crown bounds: tensor([[ 2.10259414,  3.66781878, -0.03308129,  0.65345073,  0.00669551,
          0.66249573,  1.49558306,  3.20632124,  3.18363595]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.0330812931060791
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.71696186065674
Verifying property 0 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.1025941371917725.

Properties batch 1, size 1
Remaining timeout: 198.59432077407837
Verifying property 1 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.667818784713745.

Properties batch 2, size 1
Remaining timeout: 198.49025416374207
Verifying property 2 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03308129]], device='cuda:0') need to verify.
Model prediction is: tensor([ -9.67846966, -11.31667233,  -7.14757013,  -7.76657391,  -7.15691566,
         -7.78410292,  -6.75477409,  -8.83060551, -11.06530190, -10.73754597],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03308129]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 390
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 237
Node /15 input 0: size torch.Size([100]) unstable 9
-----------------
# of unstable neurons: 636
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 62] 
split level 2: [/input-12, 5] 
split level 3: [/input-12, 61] 
split level 4: [/input-8, 20] 
split level 5: [/input-12, 27] 
split level 6: [/input-8, 1114] 
split level 7: [/input-8, 310] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 4.315376281738281e-05
Time: prepare 0.0031    bound 0.0039    transfer 0.0013    finalize 0.0017    func 0.0101    
Accumulated time: func 0.0101    prepare 0.0035    bound 0.0039    transfer 0.0013    finalize 0.0017    
all_split False
Length of domains: 0
Time: pickout 0.0003    decision 0.0224    set_bounds 0.0181    solve 0.0101    add 0.0001    
Accumulated time: pickout 0.0003    decision 0.0224    set_bounds 0.0181    solve 0.0101    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.0550844669342041


Properties batch 3, size 1
Remaining timeout: 198.29525709152222
Verifying property 3 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6534507274627686.

Properties batch 4, size 1
Remaining timeout: 198.18784165382385
Verifying property 4 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.00669550895690918.

Properties batch 5, size 1
Remaining timeout: 198.08395504951477
Verifying property 5 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6624957323074341.

Properties batch 6, size 1
Remaining timeout: 197.98043775558472
Verifying property 6 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.4955830574035645.

Properties batch 7, size 1
Remaining timeout: 197.8771951198578
Verifying property 7 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.2063212394714355.

Properties batch 8, size 1
Remaining timeout: 197.77404880523682
Verifying property 8 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.183635950088501.
Result: safe in 2.3288 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 138, vnnlib ID: 138 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.78461742, -7.78471851, -6.68574715, -7.54008961, -6.71664238,
         -7.68185663, -7.60335922, -7.74536133, -7.44903946, -7.66552782]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [390]; unstable size 390; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 390] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 390] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 390] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 164] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.46082914, 0.41245508, 1.06713569, 0.36194956, 1.19837415, 1.11187410,
         1.25493622, 1.29937768, 1.30356181]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0523 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 139, vnnlib ID: 139 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.36590004, -7.92974758, -3.18712282, -4.35600662, -3.02723885,
         -4.45325327, -2.34703112, -4.90892315, -8.33985519, -7.64006281]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [432]; unstable size 432; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 432] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 432] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 432] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 188] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.30574846, 4.53140736, 0.46472597, 1.64646149, 0.30628800, 1.73555946,
         2.01324773, 5.01047850, 4.32014751]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0727 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 140, vnnlib ID: 140 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.67068291,  -8.63208675, -12.35949326, -11.84118938, -12.90088081,
         -12.06089878, -11.65532017, -11.34745598, -11.09524727,  -7.12381601]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [439]; unstable size 439; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 439] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 1, 1, 439] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 439] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 1, 1, 166] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.93782830, 1.22470021, 4.46517467, 4.00368023, 4.95243645, 4.21050644,
         3.68815327, 3.40154791, 3.39086056]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0551 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 141, vnnlib ID: 141 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.23027992, -5.59671307, -8.10045242, -8.03788757, -7.89279747,
         -8.14015102, -7.49874401, -7.77289391, -6.25006390, -5.63300037]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [449]; unstable size 449; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 164, 1, 449] with unstable size 163 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 449] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 449] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [163]; unstable size 163; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 163] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 163] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.13565826,  1.81420422,  1.73954272,  1.59858227,  1.83115482,
          1.20980740,  1.41279840,  0.24144965, -0.16323665]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.23027992, -5.59671307, -8.10045242, -8.03788757, -7.89279747,
         -8.14015102, -7.49874401, -7.77289391, -6.25006390, -5.63300037]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.93233824, -5.38019562, -7.65612125, -7.53466606, -7.42454910,
          -7.63522720, -7.07436752, -7.25748777, -5.98633766, -5.26369810]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11649752]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0722 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 142, vnnlib ID: 142 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.83678341, -8.62305260, -5.57152319, -6.19232559, -5.90445709,
         -6.32129097, -3.83951640, -7.52650928, -9.32637024, -8.57943630]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [435]; unstable size 435; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 435] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 435] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 435] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 216] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.17719889, 3.78496766, 1.30179667, 1.96983409, 1.59501207, 2.08713460,
         2.99926043, 4.44833374, 3.73394632]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0638 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 143, vnnlib ID: 143 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.34092617, -10.46391487,  -3.21198559,  -4.69258404,  -3.26048160,
          -4.79305887,  -3.97019267,  -4.88587332,  -9.88317490,  -9.55619907]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 145, 1, 527] with unstable size 144 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 527] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [144]; unstable size 144; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 144] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 144] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.59060431,  6.26868439, -0.24463530,  1.11096752,  1.21317482,
          0.31436083,  1.29949212,  6.03089809,  5.42754269]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.34092617, -10.46391487,  -3.21198559,  -4.69258404,  -3.26048160,
          -4.79305887,  -3.97019267,  -4.88587332,  -9.88317490,  -9.55619907]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.34092617, -10.46391487,  -3.21198559,  -4.69258404,  -3.26048160,
           -4.79305887,  -3.97019267,  -4.88587332,  -9.88317490,  -9.55619907]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04849601]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.31269872e+00,  1.32857168e+00,  5.98412752e-01,  ...,
             5.03174663e-01,  8.68254006e-01,  1.13809550e+00],
           [ 1.40793681e+00,  1.28095269e+00,  1.13809550e+00,  ...,
             1.26507962e+00,  1.42380977e+00,  1.23333359e+00],
           [ 1.10634947e+00,  1.47142887e+00,  1.47142887e+00,  ...,
             1.39206374e+00,  1.40793681e+00,  1.37619078e+00],
           ...,
           [ 1.42380977e+00,  1.09047651e+00,  9.79365110e-01,  ...,
             1.26507962e+00,  1.28095269e+00,  1.21746063e+00],
           [ 1.29682565e+00,  1.04285717e+00,  1.20158756e+00,  ...,
             9.63492095e-01,  8.68254006e-01,  8.20634961e-01],
           [ 1.10634947e+00,  1.36031771e+00,  1.32857168e+00,  ...,
             9.15873051e-01,  6.14285767e-01,  6.46031797e-01]],

          [[ 9.33977544e-01,  1.17552364e+00,  5.79710245e-01,  ...,
             4.34782714e-01,  7.89049983e-01,  9.66183662e-01],
           [ 1.40096653e+00,  1.27214205e+00,  1.06280196e+00,  ...,
             1.14331758e+00,  1.28824508e+00,  1.09500813e+00],
           [ 1.28824508e+00,  1.56199706e+00,  1.44927561e+00,  ...,
             1.09500813e+00,  1.17552364e+00,  1.28824508e+00],
           ...,
           [ 1.17552364e+00,  9.82286692e-01,  8.85668337e-01,  ...,
             1.30434811e+00,  1.33655429e+00,  1.28824508e+00],
           [ 1.06280196e+00,  8.21256101e-01,  9.01771426e-01,  ...,
             1.12721443e+00,  1.04669893e+00,  1.03059590e+00],
           [ 8.69565308e-01,  1.12721443e+00,  9.98389781e-01,  ...,
             1.09500813e+00,  8.21256101e-01,  9.01771426e-01]],

          [[ 3.14844176e-02,  3.01349491e-01,  1.06446937e-01,  ...,
             9.14544314e-02,  1.21439442e-01,  1.51424453e-01],
           [ 1.36431947e-01,  1.64919142e-02,  1.81409463e-01,  ...,
             5.11244535e-01,  4.51274544e-01,  1.21439442e-01],
           [-1.48425624e-01,  1.51424453e-01,  2.26386964e-01,  ...,
             2.56371975e-01,  1.51424453e-01,  6.14694245e-02],
           ...,
           [ 3.16341996e-01,  1.49940979e-03, -1.33433133e-01,  ...,
            -2.84855980e-02,  1.64919142e-02, -2.84855980e-02],
           [ 1.36431947e-01, -1.18440613e-01,  1.49940979e-03,  ...,
            -2.83358276e-01, -3.28335792e-01, -3.58320802e-01],
           [ 1.64919142e-02,  2.26386964e-01,  1.51424453e-01,  ...,
            -2.38380641e-01, -5.23238361e-01, -5.23238361e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0685 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 144, vnnlib ID: 144 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.79352665, -12.23771381,  -9.42079353,  -8.18088913,  -9.67141724,
          -8.12612629,  -9.56548309,  -9.96920204, -11.10543823, -11.25221634]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 170, 1, 427] with unstable size 169 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 427] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [169]; unstable size 169; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 169] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 169] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.20623183, 3.44203901, 1.05065644, 0.04120035, 1.25533807, 1.08397412,
         1.56545269, 2.38391018, 2.54189849]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0652 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 145, vnnlib ID: 145 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.00209332, -8.59088707, -2.82365561, -3.22743535, -3.59733486,
         -3.29684186, -4.70374870, -4.82936382, -7.53730106, -8.04424858]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [667]; unstable size 667; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 667] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 667] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 667] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 174] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.19111562,  4.58325720, -0.76220047, -0.08250546, -0.05808830,
          1.11135769,  1.00770712,  3.64658070,  4.12331247]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.00209332, -8.59088707, -2.82365561, -3.22743535, -3.59733486,
         -3.29684186, -4.70374870, -4.82936382, -7.53730106, -8.04424858]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.00209332, -8.59088707, -2.82365608, -3.22743607, -3.59733486,
          -3.29684305, -4.70374966, -4.82936430, -7.53730202, -8.04424763],
         [-5.00209332, -8.59088707, -2.82365608, -3.22743607, -3.59733486,
          -3.29684305, -4.70374966, -4.82936430, -7.53730202, -8.04424763]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.47318697, -0.06940699,  0.30049181]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]],


         [[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]],


         [[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0572 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 146, vnnlib ID: 146 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.50118589,  -9.62631321, -11.06040764, -11.60052204, -11.25030899,
         -11.77759075, -11.48435974, -10.44144726,  -6.63968658,  -9.16156864]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [439]; unstable size 439; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 439] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 439] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 439] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 153] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.49919498, 2.48104453, 3.67119646, 4.11645269, 3.79514456, 4.28060246,
         4.02054405, 2.84020495, 1.95948529]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0635 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 147, vnnlib ID: 147 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.61050510, -18.19259834, -14.86876678, -16.21520042, -15.81747723,
         -16.15572166, -15.55497742, -15.71164322, -17.60300827, -19.53060722]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 540] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 540] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 185] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.21178174, 2.48818874, 0.96625054, 0.66403449, 0.90339839, 0.26163757,
         0.41980028, 1.96595526, 3.83946896]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0596 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 148, vnnlib ID: 148 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.16096544, -5.40149117, -3.63111496, -3.02717566, -3.77620387,
         -3.01623964, -4.59425926, -2.84824109, -5.91380119, -4.83607054]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [455]; unstable size 455; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 145, 1, 455] with unstable size 144 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 455] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 455] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [144]; unstable size 144; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 144] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 144] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.78772736,  1.81875539,  0.45767808, -0.11035323,  0.65982580,
         -0.12342572,  1.28189731,  2.28518844,  1.34910381]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.16096544, -5.40149117, -3.63111496, -3.02717566, -3.77620387,
         -3.01623964, -4.59425926, -2.84824109, -5.91380119, -4.83607054]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.40923071, -5.67548466, -3.81281948, -3.15027142, -4.00697517,
          -3.13820839, -4.74294853, -3.15190148, -6.05144215, -5.10408592],
         [-6.40923071, -5.67548466, -3.81281948, -3.15027142, -4.00697517,
          -3.13820839, -4.74294853, -3.15190148, -6.05144215, -5.10408592]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00163007, -0.01369309]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0060 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0742 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 149, vnnlib ID: 149 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.46979618, -12.58957005,  -7.37592888,  -8.55527401,  -7.20859337,
          -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046116]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 527] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 527] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 256] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.46516275,  4.14436626,  0.83085942, -0.49284071,  0.88343525,
         -0.76752174,  1.28632259,  3.93838763,  3.79598117]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.46979618, -12.58957005,  -7.37592888,  -8.55527401,  -7.20859337,
          -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046116]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.46979618, -12.58956909,  -7.37592793,  -8.55527496,  -7.20859337,
           -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046211],
         [-10.46979618, -12.58956909,  -7.37592793,  -8.55527496,  -7.20859337,
           -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046211]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16733456, -0.39017296]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.32222211, -1.13174593, -1.17936504,  ..., -0.68730158,
            -0.81428570, -0.54444444],
           [-1.24285710, -1.09999990, -1.38571417,  ..., -0.68730158,
            -0.78253967, -0.79841268],
           [-1.08412695, -0.90952379, -1.13174593,  ..., -0.49682540,
            -0.84603173, -0.87777776],
           ...,
           [-0.19523799,  1.31269872,  0.43968260,  ..., -0.95714283,
            -0.84603173, -0.68730158],
           [ 0.07460327,  1.37619078,  0.90000004,  ..., -0.95714283,
            -0.75079364, -0.84603173],
           [ 0.26507944,  0.78888893,  0.43968260,  ..., -0.97301590,
            -0.92539680, -0.97301590]],

          [[-1.30434775, -1.01449275, -0.98228657,  ..., -0.51529789,
            -0.45088565, -0.25764883],
           [-1.06280184, -0.83735907, -1.19162631,  ..., -0.43478248,
            -0.41867942, -0.30595800],
           [-0.93397743, -0.67632848, -0.93397743,  ..., -0.35426718,
            -0.38647330, -0.41867942],
           ...,
           [-0.24154577,  0.62801939,  0.12882459,  ..., -0.98228657,
            -0.85346210, -0.70853460],
           [-0.09661824,  0.70853472,  0.43478271,  ..., -0.99838966,
            -0.78904986, -0.91787434],
           [ 0.04830930,  0.51529801,  0.28985518,  ..., -0.95008045,
            -0.90177131, -0.98228657]],

          [[-1.16791618, -0.98800600, -1.03298354,  ..., -0.70314842,
            -0.65817088, -0.28335828],
           [-1.00299859, -0.92803597, -1.16791618,  ..., -0.58320838,
            -0.53823084, -0.49325335],
           [-0.92803597, -0.86806595, -1.06296861,  ..., -0.26836565,
            -0.53823084, -0.55322337],
           ...,
           [-0.35832080,  0.45127454, -0.05847061,  ..., -0.85307342,
            -0.74812591, -0.56821585],
           [-0.26836565,  0.48125952,  0.33133450,  ..., -0.85307342,
            -0.70314842, -0.76311839],
           [ 0.03148442,  0.51124454,  0.42128953,  ..., -0.83808094,
            -0.79310340, -0.82308841]]],


         [[[-1.32222211, -1.13174593, -1.17936504,  ..., -0.68730158,
            -0.81428570, -0.54444444],
           [-1.24285710, -1.09999990, -1.38571417,  ..., -0.68730158,
            -0.78253967, -0.79841268],
           [-1.08412695, -0.90952379, -1.13174593,  ..., -0.49682540,
            -0.84603173, -0.87777776],
           ...,
           [-0.19523799,  1.31269872,  0.43968260,  ..., -0.95714283,
            -0.84603173, -0.68730158],
           [ 0.07460327,  1.37619078,  0.90000004,  ..., -0.95714283,
            -0.75079364, -0.84603173],
           [ 0.26507944,  0.78888893,  0.43968260,  ..., -0.97301590,
            -0.92539680, -0.97301590]],

          [[-1.30434775, -1.01449275, -0.98228657,  ..., -0.51529789,
            -0.45088565, -0.25764883],
           [-1.06280184, -0.83735907, -1.19162631,  ..., -0.43478248,
            -0.41867942, -0.30595800],
           [-0.93397743, -0.67632848, -0.93397743,  ..., -0.35426718,
            -0.38647330, -0.41867942],
           ...,
           [-0.24154577,  0.62801939,  0.12882459,  ..., -0.98228657,
            -0.85346210, -0.70853460],
           [-0.09661824,  0.70853472,  0.43478271,  ..., -0.99838966,
            -0.78904986, -0.91787434],
           [ 0.04830930,  0.51529801,  0.28985518,  ..., -0.95008045,
            -0.90177131, -0.98228657]],

          [[-1.16791618, -0.98800600, -1.03298354,  ..., -0.70314842,
            -0.65817088, -0.28335828],
           [-1.00299859, -0.92803597, -1.16791618,  ..., -0.58320838,
            -0.53823084, -0.49325335],
           [-0.92803597, -0.86806595, -1.06296861,  ..., -0.26836565,
            -0.53823084, -0.55322337],
           ...,
           [-0.35832080,  0.45127454, -0.05847061,  ..., -0.85307342,
            -0.74812591, -0.56821585],
           [-0.26836565,  0.48125952,  0.33133450,  ..., -0.85307342,
            -0.70314842, -0.76311839],
           [ 0.03148442,  0.51124454,  0.42128953,  ..., -0.83808094,
            -0.79310340, -0.82308841]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0552 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 150, vnnlib ID: 150 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.71911144, -10.78857327, -13.80652714, -15.57193089, -13.78481674,
         -15.82200527, -15.45771599, -13.88326550,  -9.93582153, -10.41513634]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [582]; unstable size 582; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 582] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 582] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 582] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 186] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.74895859,  1.97158289,  3.71107578,  1.79468775,  3.93884897,
          3.53552580,  1.82552505, -1.48514700, -0.67360955]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.71911144, -10.78857327, -13.80652714, -15.57193089, -13.78481674,
         -15.82200527, -15.45771599, -13.88326550,  -9.93582153, -10.41513634]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.71911335, -10.78857327, -13.80652618, -15.57193279, -13.78481674,
          -15.82200718, -15.45771790, -13.88326550,  -9.93582153, -10.41513634],
         [ -9.71911335, -10.78857327, -13.80652618, -15.57193279, -13.78481674,
          -15.82200718, -15.45771790, -13.88326550,  -9.93582153, -10.41513634]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.06945992, -0.85275173, -0.37343693]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0720 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 151, vnnlib ID: 151 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.55974388, -10.00794888,  -5.61042452,  -4.45638180,  -5.72507191,
          -4.47629452,  -6.00398064,  -5.42168999,  -9.52786255,  -9.51117516]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [436]; unstable size 436; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 436] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 436] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 436] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 170] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.49995518,  4.81325483,  0.79489255, -0.03725125,  0.90810907,
          1.23507929,  0.64367199,  4.26866436,  4.34728575]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.55974388, -10.00794888,  -5.61042452,  -4.45638180,  -5.72507191,
          -4.47629452,  -6.00398064,  -5.42168999,  -9.52786255,  -9.51117516]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.55974388, -10.00794888,  -5.61042452,  -4.45638180,  -5.72507191,
           -4.47629452,  -6.00398064,  -5.42168999,  -9.52786255,  -9.51117516]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01991272]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0429 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 152, vnnlib ID: 152 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.10573387, -12.44030190,  -8.55103970,  -9.26790047,  -7.95741177,
          -9.40282917,  -8.36335182, -10.19440269, -12.55924797, -12.84323978]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [434]; unstable size 434; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 157, 1, 434] with unstable size 156 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 434] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 434] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [156]; unstable size 156; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 156] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 156] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.99604273,  3.13732767,  0.34504730, -0.83755285,  0.47180045,
         -0.58407068,  1.10311317,  3.33464861,  3.55361891]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.10573387, -12.44030190,  -8.55103970,  -9.26790047,  -7.95741177,
          -9.40282917,  -8.36335182, -10.19440269, -12.55924797, -12.84323978]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.10573483, -12.44030285,  -8.55103970,  -9.26790047,  -7.95741272,
           -9.40283012,  -8.36335182, -10.19440365, -12.55924892, -12.84324265],
         [-10.10573483, -12.44030285,  -8.55103970,  -9.26790047,  -7.95741272,
           -9.40283012,  -8.36335182, -10.19440365, -12.55924892, -12.84324265]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.59362698, -0.18768787]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-9.41269815e-01, -9.09523785e-01, -1.33809519e+00,  ...,
            -6.39682531e-01,  7.46032670e-02,  1.85714364e-01],
           [-5.28571427e-01, -7.98412681e-01, -1.25873005e+00,  ...,
            -5.76190472e-01, -2.42857039e-01,  1.06349289e-01],
           [-4.65079248e-01, -4.01587188e-01, -7.66666651e-01,  ...,
            -3.85714173e-01, -3.53968143e-01, -1.63491964e-01],
           ...,
           [ 1.97936535e+00,  1.10634947e+00,  1.42380977e+00,  ...,
             1.94761932e+00,  1.94761932e+00,  1.97936535e+00],
           [ 1.94761932e+00,  1.47142887e+00,  1.37619078e+00,  ...,
             1.96349227e+00,  1.82063520e+00,  1.80476213e+00],
           [ 1.99523830e+00,  1.78888917e+00,  1.85238123e+00,  ...,
             1.99523830e+00,  1.99523830e+00,  1.94761932e+00]],

          [[-1.12721294e-01, -1.44927412e-01, -6.28019273e-01,  ...,
            -2.25442708e-01,  3.54267418e-01,  6.28019392e-01],
           [ 2.09339887e-01, -1.12721294e-01, -5.47504008e-01,  ...,
            -2.89854944e-01,  1.22934580e-07,  5.47504127e-01],
           [ 1.93236828e-01,  2.25442946e-01, -1.61029361e-02,  ...,
            -8.05151686e-02, -8.05151686e-02,  2.89855182e-01],
           ...,
           [ 1.70692456e+00,  8.37359190e-01,  1.14331758e+00,  ...,
             1.75523376e+00,  1.73913074e+00,  1.78743994e+00],
           [ 1.73913074e+00,  1.20772982e+00,  1.04669893e+00,  ...,
             1.72302771e+00,  1.57810009e+00,  1.61030626e+00],
           [ 1.85185218e+00,  1.57810009e+00,  1.56199706e+00,  ...,
             1.75523376e+00,  1.75523376e+00,  1.73913074e+00]],

          [[-1.39280367e+00, -1.30284870e+00, -1.61769128e+00,  ...,
            -1.27286363e+00, -7.48125911e-01, -3.73313308e-01],
           [-1.19790113e+00, -1.39280367e+00, -1.60269880e+00,  ...,
            -1.25787115e+00, -1.03298354e+00, -4.33283329e-01],
           [-1.13793111e+00, -1.21289361e+00, -1.45277369e+00,  ...,
            -1.18290865e+00, -1.03298354e+00, -7.18140900e-01],
           ...,
           [ 1.84557760e+00,  9.76012170e-01,  1.24587750e+00,  ...,
             1.87556267e+00,  1.84557760e+00,  1.87556267e+00],
           [ 1.87556267e+00,  1.33583248e+00,  1.15592217e+00,  ...,
             1.83058512e+00,  1.69565260e+00,  1.69565260e+00],
           [ 1.96551764e+00,  1.69565260e+00,  1.68066013e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.84557760e+00]]],


         [[[-9.41269815e-01, -9.09523785e-01, -1.33809519e+00,  ...,
            -6.39682531e-01,  7.46032670e-02,  1.85714364e-01],
           [-5.28571427e-01, -7.98412681e-01, -1.25873005e+00,  ...,
            -5.76190472e-01, -2.42857039e-01,  1.06349289e-01],
           [-4.65079248e-01, -4.01587188e-01, -7.66666651e-01,  ...,
            -3.85714173e-01, -3.53968143e-01, -1.63491964e-01],
           ...,
           [ 1.97936535e+00,  1.10634947e+00,  1.42380977e+00,  ...,
             1.94761932e+00,  1.94761932e+00,  1.97936535e+00],
           [ 1.94761932e+00,  1.47142887e+00,  1.37619078e+00,  ...,
             1.96349227e+00,  1.82063520e+00,  1.80476213e+00],
           [ 1.99523830e+00,  1.78888917e+00,  1.85238123e+00,  ...,
             1.99523830e+00,  1.99523830e+00,  1.94761932e+00]],

          [[-1.12721294e-01, -1.44927412e-01, -6.28019273e-01,  ...,
            -2.25442708e-01,  3.54267418e-01,  6.28019392e-01],
           [ 2.09339887e-01, -1.12721294e-01, -5.47504008e-01,  ...,
            -2.89854944e-01,  1.22934580e-07,  5.47504127e-01],
           [ 1.93236828e-01,  2.25442946e-01, -1.61029361e-02,  ...,
            -8.05151686e-02, -8.05151686e-02,  2.89855182e-01],
           ...,
           [ 1.70692456e+00,  8.37359190e-01,  1.14331758e+00,  ...,
             1.75523376e+00,  1.73913074e+00,  1.78743994e+00],
           [ 1.73913074e+00,  1.20772982e+00,  1.04669893e+00,  ...,
             1.72302771e+00,  1.57810009e+00,  1.61030626e+00],
           [ 1.85185218e+00,  1.57810009e+00,  1.56199706e+00,  ...,
             1.75523376e+00,  1.75523376e+00,  1.73913074e+00]],

          [[-1.39280367e+00, -1.30284870e+00, -1.61769128e+00,  ...,
            -1.27286363e+00, -7.48125911e-01, -3.73313308e-01],
           [-1.19790113e+00, -1.39280367e+00, -1.60269880e+00,  ...,
            -1.25787115e+00, -1.03298354e+00, -4.33283329e-01],
           [-1.13793111e+00, -1.21289361e+00, -1.45277369e+00,  ...,
            -1.18290865e+00, -1.03298354e+00, -7.18140900e-01],
           ...,
           [ 1.84557760e+00,  9.76012170e-01,  1.24587750e+00,  ...,
             1.87556267e+00,  1.84557760e+00,  1.87556267e+00],
           [ 1.87556267e+00,  1.33583248e+00,  1.15592217e+00,  ...,
             1.83058512e+00,  1.69565260e+00,  1.69565260e+00],
           [ 1.96551764e+00,  1.69565260e+00,  1.68066013e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.84557760e+00]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0561 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 153, vnnlib ID: 153 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.04411221,  -6.56294537, -10.49686623, -10.71459293, -10.65121841,
         -10.91873455, -10.75874615, -10.58030510,  -7.05852127,  -5.32773304]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [560]; unstable size 560; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 560] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 560] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 560] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 159] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.93047810, 0.90146828, 4.35855293, 4.67746639, 4.44866705, 4.86577225,
         4.63572979, 4.36071682, 1.07372713]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0621 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 154, vnnlib ID: 154 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.33148384, -10.59604359,  -6.13104391,  -5.15102005,  -5.68771362,
          -5.06781912,  -6.22119141,  -6.70600891,  -8.64515400, -10.90875530]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [554]; unstable size 554; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 150, 1, 554] with unstable size 149 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 554] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 554] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [149]; unstable size 149; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 149] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.75479293, 4.87106228, 0.82534432, 0.06818698, 0.31933570, 0.85642600,
         1.17236519, 2.96178889, 5.26937962]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0655 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 155, vnnlib ID: 155 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.94084406, -4.36918736, -2.39931107, -2.66348886, -2.53788948,
         -2.76773334, -2.43246198, -3.65804195, -1.78550899, -3.21363306]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [458]; unstable size 458; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 225, 1, 458] with unstable size 224 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 458] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 458] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [224]; unstable size 224; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 224] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 224] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.23604941,  1.11150885, -0.46573174, -0.15052679, -0.32735431,
         -0.05409914,  0.68027079, -1.50479603, -0.02969646]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.94084406, -4.36918736, -2.39931107, -2.66348886, -2.53788948,
         -2.76773334, -2.43246198, -3.65804195, -1.78550899, -3.21363306]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.94084358, -4.36918688, -2.39931107, -2.66348863, -2.53788924,
          -2.76773310, -2.43246150, -3.65804195, -1.78550875, -3.21363282],
         [-2.94084358, -4.36918688, -2.39931107, -2.66348863, -2.53788924,
          -2.76773310, -2.43246150, -3.65804195, -1.78550875, -3.21363282]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.50838208, -0.03315043,  0.23102713,  0.10542774,  0.33527160,
          -0.64695275,  0.78117132]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         ...,


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0713 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 156, vnnlib ID: 156 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-9.18817234, -8.52420235, -6.17824697, -5.90761089, -6.00881290,
         -5.93657160, -5.09397602, -7.20189238, -9.47287750, -8.95226574]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [492]; unstable size 492; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 492] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 492] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 492] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 177] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.78877187e+00,  1.95449328e+00,  8.94069672e-04, -4.40961272e-02,
         -1.61327600e-01, -1.15325046e+00,  1.05116034e+00,  3.01431775e+00,
          2.46340609e+00]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-9.18817234, -8.52420235, -6.17824697, -5.90761089, -6.00881290,
         -5.93657160, -5.09397602, -7.20189238, -9.47287750, -8.95226574]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-9.18817234, -8.52420330, -6.17824793, -5.90761185, -6.00881290,
          -5.93657255, -5.09397602, -7.20189381, -9.47287750, -8.95226765],
         [-9.18817234, -8.52420330, -6.17824793, -5.90761185, -6.00881290,
          -5.93657255, -5.09397602, -7.20189381, -9.47287750, -8.95226765]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02896070,  0.07224035, -0.84259653]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0615 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 157, vnnlib ID: 157 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.42523384, -13.67537022, -17.12404442, -17.76034546, -18.02211761,
         -18.14136124, -17.20537567, -17.92313957, -14.93622971, -12.06187916]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 118, 1, 403] with unstable size 117 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 403] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [117]; unstable size 117; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 117] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 117] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.82648945, 1.30361056, 4.42907476, 5.04763651, 5.31513500, 5.40978765,
         4.49749613, 5.15742683, 2.39878798]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0485 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 158, vnnlib ID: 158 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.89985514, -8.20181656, -7.95871973, -6.18419170, -7.78199673,
         -6.14752007, -7.65328979, -6.98220968, -6.28924084, -8.29117870]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 445] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 445] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 445] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 170] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.18119693,  1.26755655,  0.96031857, -0.95989799,  0.70830917,
         -1.01292610,  0.53413916, -0.22250199,  1.41924679]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.89985514, -8.20181656, -7.95871973, -6.18419170, -7.78199673,
         -6.14752007, -7.65328979, -6.98220968, -6.28924084, -8.29117870]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.89985371, -8.20181370, -7.95871830, -6.18419075, -7.78199673,
          -6.14751959, -7.65328884, -6.98220921, -6.28923941, -8.29117870],
         [-7.89985371, -8.20181370, -7.95871830, -6.18419075, -7.78199673,
          -6.14751959, -7.65328884, -6.98220921, -6.28923941, -8.29117870]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.10504866, -0.14171982,  0.69296980]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 6.46031797e-01,  5.82539737e-01,  6.30158782e-01,  ...,
             9.15873051e-01,  8.84127021e-01,  8.68254006e-01],
           [ 8.52380991e-01,  8.36507976e-01,  8.04761946e-01,  ...,
             4.71428633e-01,  3.60317528e-01,  3.28571498e-01],
           [ 7.41269886e-01,  5.19047678e-01,  6.93650842e-01,  ...,
            -6.55555546e-01, -7.98412681e-01, -7.98412681e-01],
           ...,
           [ 1.48730183e+00,  1.36031771e+00,  1.21746063e+00,  ...,
            -1.25873005e+00, -1.24285710e+00, -1.25873005e+00],
           [ 1.12222254e+00,  1.07460344e+00,  9.63492095e-01,  ...,
            -1.27460313e+00, -1.25873005e+00, -1.29047608e+00],
           [ 6.30158782e-01,  5.66666722e-01,  5.19047678e-01,  ...,
            -1.40158725e+00, -1.40158725e+00, -1.41746020e+00]],

          [[ 2.41546005e-01,  1.61030710e-01,  2.09339887e-01,  ...,
             6.44122481e-01,  5.79710245e-01,  5.63607156e-01],
           [ 4.18679655e-01,  4.02576596e-01,  3.70370477e-01,  ...,
             2.09339887e-01,  3.22062373e-02,  1.22934580e-07],
           [ 2.57649064e-01,  1.61031820e-02,  2.09339887e-01,  ...,
            -1.07890499e+00, -1.27214170e+00, -1.27214170e+00],
           ...,
           [ 1.07890511e+00,  9.50080574e-01,  8.05153072e-01,  ...,
            -1.33655393e+00, -1.32045078e+00, -1.33655393e+00],
           [ 7.40740836e-01,  6.92431629e-01,  5.79710245e-01,  ...,
            -1.35265696e+00, -1.33655393e+00, -1.36875999e+00],
           [ 2.89855182e-01,  2.25442946e-01,  1.93236828e-01,  ...,
            -1.48148143e+00, -1.48148143e+00, -1.49758446e+00]],

          [[ 6.01199567e-01,  5.26237071e-01,  5.71214557e-01,  ...,
             9.01049674e-01,  7.96102107e-01,  7.66117096e-01],
           [ 7.36132085e-01,  7.21139610e-01,  6.91154599e-01,  ...,
             5.11244535e-01,  3.61319512e-01,  3.16341996e-01],
           [ 5.41229546e-01,  3.16341996e-01,  4.96252000e-01,  ...,
            -7.33133376e-01, -8.83058429e-01, -8.83058429e-01],
           ...,
           [ 1.41079497e+00,  1.29085493e+00,  1.15592217e+00,  ...,
            -9.28035975e-01, -9.13043439e-01, -9.28035975e-01],
           [ 1.08095968e+00,  1.03598225e+00,  9.31034684e-01,  ...,
            -9.43028450e-01, -9.28035975e-01, -9.58020985e-01],
           [ 6.46177113e-01,  5.86207092e-01,  5.41229546e-01,  ...,
            -1.06296861e+00, -1.06296861e+00, -1.07796109e+00]]],


         [[[ 6.46031797e-01,  5.82539737e-01,  6.30158782e-01,  ...,
             9.15873051e-01,  8.84127021e-01,  8.68254006e-01],
           [ 8.52380991e-01,  8.36507976e-01,  8.04761946e-01,  ...,
             4.71428633e-01,  3.60317528e-01,  3.28571498e-01],
           [ 7.41269886e-01,  5.19047678e-01,  6.93650842e-01,  ...,
            -6.55555546e-01, -7.98412681e-01, -7.98412681e-01],
           ...,
           [ 1.48730183e+00,  1.36031771e+00,  1.21746063e+00,  ...,
            -1.25873005e+00, -1.24285710e+00, -1.25873005e+00],
           [ 1.12222254e+00,  1.07460344e+00,  9.63492095e-01,  ...,
            -1.27460313e+00, -1.25873005e+00, -1.29047608e+00],
           [ 6.30158782e-01,  5.66666722e-01,  5.19047678e-01,  ...,
            -1.40158725e+00, -1.40158725e+00, -1.41746020e+00]],

          [[ 2.41546005e-01,  1.61030710e-01,  2.09339887e-01,  ...,
             6.44122481e-01,  5.79710245e-01,  5.63607156e-01],
           [ 4.18679655e-01,  4.02576596e-01,  3.70370477e-01,  ...,
             2.09339887e-01,  3.22062373e-02,  1.22934580e-07],
           [ 2.57649064e-01,  1.61031820e-02,  2.09339887e-01,  ...,
            -1.07890499e+00, -1.27214170e+00, -1.27214170e+00],
           ...,
           [ 1.07890511e+00,  9.50080574e-01,  8.05153072e-01,  ...,
            -1.33655393e+00, -1.32045078e+00, -1.33655393e+00],
           [ 7.40740836e-01,  6.92431629e-01,  5.79710245e-01,  ...,
            -1.35265696e+00, -1.33655393e+00, -1.36875999e+00],
           [ 2.89855182e-01,  2.25442946e-01,  1.93236828e-01,  ...,
            -1.48148143e+00, -1.48148143e+00, -1.49758446e+00]],

          [[ 6.01199567e-01,  5.26237071e-01,  5.71214557e-01,  ...,
             9.01049674e-01,  7.96102107e-01,  7.66117096e-01],
           [ 7.36132085e-01,  7.21139610e-01,  6.91154599e-01,  ...,
             5.11244535e-01,  3.61319512e-01,  3.16341996e-01],
           [ 5.41229546e-01,  3.16341996e-01,  4.96252000e-01,  ...,
            -7.33133376e-01, -8.83058429e-01, -8.83058429e-01],
           ...,
           [ 1.41079497e+00,  1.29085493e+00,  1.15592217e+00,  ...,
            -9.28035975e-01, -9.13043439e-01, -9.28035975e-01],
           [ 1.08095968e+00,  1.03598225e+00,  9.31034684e-01,  ...,
            -9.43028450e-01, -9.28035975e-01, -9.58020985e-01],
           [ 6.46177113e-01,  5.86207092e-01,  5.41229546e-01,  ...,
            -1.06296861e+00, -1.06296861e+00, -1.07796109e+00]]],


         [[[ 6.46031797e-01,  5.82539737e-01,  6.30158782e-01,  ...,
             9.15873051e-01,  8.84127021e-01,  8.68254006e-01],
           [ 8.52380991e-01,  8.36507976e-01,  8.04761946e-01,  ...,
             4.71428633e-01,  3.60317528e-01,  3.28571498e-01],
           [ 7.41269886e-01,  5.19047678e-01,  6.93650842e-01,  ...,
            -6.55555546e-01, -7.98412681e-01, -7.98412681e-01],
           ...,
           [ 1.48730183e+00,  1.36031771e+00,  1.21746063e+00,  ...,
            -1.25873005e+00, -1.24285710e+00, -1.25873005e+00],
           [ 1.12222254e+00,  1.07460344e+00,  9.63492095e-01,  ...,
            -1.27460313e+00, -1.25873005e+00, -1.29047608e+00],
           [ 6.30158782e-01,  5.66666722e-01,  5.19047678e-01,  ...,
            -1.40158725e+00, -1.40158725e+00, -1.41746020e+00]],

          [[ 2.41546005e-01,  1.61030710e-01,  2.09339887e-01,  ...,
             6.44122481e-01,  5.79710245e-01,  5.63607156e-01],
           [ 4.18679655e-01,  4.02576596e-01,  3.70370477e-01,  ...,
             2.09339887e-01,  3.22062373e-02,  1.22934580e-07],
           [ 2.57649064e-01,  1.61031820e-02,  2.09339887e-01,  ...,
            -1.07890499e+00, -1.27214170e+00, -1.27214170e+00],
           ...,
           [ 1.07890511e+00,  9.50080574e-01,  8.05153072e-01,  ...,
            -1.33655393e+00, -1.32045078e+00, -1.33655393e+00],
           [ 7.40740836e-01,  6.92431629e-01,  5.79710245e-01,  ...,
            -1.35265696e+00, -1.33655393e+00, -1.36875999e+00],
           [ 2.89855182e-01,  2.25442946e-01,  1.93236828e-01,  ...,
            -1.48148143e+00, -1.48148143e+00, -1.49758446e+00]],

          [[ 6.01199567e-01,  5.26237071e-01,  5.71214557e-01,  ...,
             9.01049674e-01,  7.96102107e-01,  7.66117096e-01],
           [ 7.36132085e-01,  7.21139610e-01,  6.91154599e-01,  ...,
             5.11244535e-01,  3.61319512e-01,  3.16341996e-01],
           [ 5.41229546e-01,  3.16341996e-01,  4.96252000e-01,  ...,
            -7.33133376e-01, -8.83058429e-01, -8.83058429e-01],
           ...,
           [ 1.41079497e+00,  1.29085493e+00,  1.15592217e+00,  ...,
            -9.28035975e-01, -9.13043439e-01, -9.28035975e-01],
           [ 1.08095968e+00,  1.03598225e+00,  9.31034684e-01,  ...,
            -9.43028450e-01, -9.28035975e-01, -9.58020985e-01],
           [ 6.46177113e-01,  5.86207092e-01,  5.41229546e-01,  ...,
            -1.06296861e+00, -1.06296861e+00, -1.07796109e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0723 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 159, vnnlib ID: 159 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.52948380, -15.95086575, -15.35674667, -15.15391731, -16.55455399,
         -15.45511055, -13.96408749, -17.77251816, -16.15048790, -15.88832951]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [381]; unstable size 381; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 146, 1, 381] with unstable size 145 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 381] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 381] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [145]; unstable size 145; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 145] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 145] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.04605162,  1.32969475,  1.10167611,  0.96962839,  2.23392868,
          1.26165545,  3.33647346,  1.48339975,  1.25178409]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.52948380, -15.95086575, -15.35674667, -15.15391731, -16.55455399,
         -15.45511055, -13.96408749, -17.77251816, -16.15048790, -15.88832951]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.14it/s]100%|██████████| 1/1 [00:00<00:00,  9.13it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.66336918, -16.24439430, -15.76870918, -15.69548130, -16.94470787,
          -16.00302887, -14.51145744, -18.16604233, -16.27715111, -16.16013527]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.15191174]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1121 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.085124969482422
alpha/beta optimization time: 1.118166208267212
initial alpha-crown bounds: tensor([[-0.02563977,  1.36090136,  1.10909176,  0.97797728,  2.24304676,
          1.27068949,  3.34929538,  1.51245975,  1.28730273]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.025639772415161133
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.71310877799988
Verifying property 0 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02563977]], device='cuda:0') need to verify.
Model prediction is: tensor([-14.52948380, -15.95086575, -15.35674667, -15.15391731, -16.55455399,
        -15.45511055, -13.96408749, -17.77251816, -16.15048790, -15.88832951],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02563977]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 381
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 144
Node /15 input 0: size torch.Size([100]) unstable 6
-----------------
# of unstable neurons: 531
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 27] 
split level 1: [/input-12, 33] 
split level 2: [/input-8, 988] 
split level 3: [/input-8, 989] 
split level 4: [/input-8, 987] 
split level 5: [/input-8, 997] 
split level 6: [/input-8, 738] 
split level 7: [/input-8, 731] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 4.4345855712890625e-05
Time: prepare 0.0030    bound 0.0039    transfer 0.0014    finalize 0.0017    func 0.0101    
Accumulated time: func 0.0101    prepare 0.0035    bound 0.0039    transfer 0.0014    finalize 0.0017    
all_split False
Length of domains: 0
Time: pickout 0.0003    decision 0.0221    set_bounds 0.0178    solve 0.0102    add 0.0001    
Accumulated time: pickout 0.0003    decision 0.0221    set_bounds 0.0178    solve 0.0102    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.054618120193481445


Properties batch 1, size 1
Remaining timeout: 198.47356700897217
Verifying property 1 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.3609013557434082.

Properties batch 2, size 1
Remaining timeout: 198.36619210243225
Verifying property 2 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.1090917587280273.

Properties batch 3, size 1
Remaining timeout: 198.26284742355347
Verifying property 3 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9779772758483887.

Properties batch 4, size 1
Remaining timeout: 198.1597876548767
Verifying property 4 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.243046760559082.

Properties batch 5, size 1
Remaining timeout: 198.05636548995972
Verifying property 5 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2706894874572754.

Properties batch 6, size 1
Remaining timeout: 197.95345544815063
Verifying property 6 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.3492953777313232.

Properties batch 7, size 1
Remaining timeout: 197.85084128379822
Verifying property 7 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.5124597549438477.

Properties batch 8, size 1
Remaining timeout: 197.74841356277466
Verifying property 8 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2873027324676514.
Result: safe in 2.3541 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 160, vnnlib ID: 160 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.49879074, -9.55830097, -5.11135626, -6.59453297, -4.63026714,
         -6.67742062, -5.16739082, -6.71435833, -9.42285538, -9.37638187]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [669]; unstable size 669; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 669] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 669] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 669] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 192] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.34096289, 4.10190248, 0.30777764, 1.68400633, 1.76496542, 0.30022144,
         1.81714153, 4.01539278, 3.94053698]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0727 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 161, vnnlib ID: 161 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.87970066, -14.66562939,  -9.85256958,  -8.82474613, -10.40148449,
          -8.68280125,  -9.99558353, -10.62414360, -13.25842571, -14.81057453]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [425]; unstable size 425; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 169, 1, 425] with unstable size 168 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 425] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 425] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [168]; unstable size 168; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 168] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 168] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.58588171, 5.25564861, 0.84904134, 0.12145445, 1.39071870, 0.90202570,
         1.64734638, 3.90297651, 5.47198582]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0645 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 162, vnnlib ID: 162 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.87640285, -12.87582302,  -8.50058079, -10.47419071,  -8.70230770,
         -10.56670856,  -8.81984520, -11.36477280, -11.69618988, -13.20551491]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [477]; unstable size 477; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 162, 1, 477] with unstable size 161 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 477] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 477] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [161]; unstable size 161; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 161] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 161] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.86706161,  3.64629698,  1.61399448, -0.01080489,  1.69744182,
          0.02841198,  2.42314339,  2.43144679,  3.97708631]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.87640285, -12.87582302,  -8.50058079, -10.47419071,  -8.70230770,
         -10.56670856,  -8.81984520, -11.36477280, -11.69618988, -13.20551491]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.15it/s]100%|██████████| 1/1 [00:00<00:00,  9.14it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.73246670, -12.68345451,  -8.39245701, -10.23877811,  -8.46293736,
          -10.33113194,  -8.62541771, -11.11933708, -11.50778389, -12.95249939]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.07048035]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1120 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 12th iter
best_l after optimization: 16.799541473388672
alpha/beta optimization time: 0.1482868194580078
initial alpha-crown bounds: tensor([[8.82856965e-01, 3.66166162e+00, 1.62423420e+00, 3.00407410e-05,
         1.70782292e+00, 3.46810222e-02, 2.44014645e+00, 2.45263219e+00,
         3.99547553e+00]], device='cuda:0')
Number of class (without rhs): 0 ; Worst class: (+ rhs) 3.0040740966796875e-05
verified with init bound!
Result: safe-incomplete in 0.3065 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 163, vnnlib ID: 163 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.01543331,  -8.50793934,  -8.28173351,  -8.84521961,  -8.12535572,
          -8.88524437,  -8.74754906,  -8.41619205, -10.82264996,  -8.60353184]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [616]; unstable size 616; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 616] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 616] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 616] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 159] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-8.43452215e-02, -8.76670837e-01, -5.83441019e-01, -4.16054726e-02,
         -5.99727631e-01,  1.43563747e-03, -2.22274065e-01,  1.54696393e+00,
         -7.14367151e-01]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.01543331,  -8.50793934,  -8.28173351,  -8.84521961,  -8.12535572,
          -8.88524437,  -8.74754906,  -8.41619205, -10.82264996,  -8.60353184]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.01543331,  -8.50793839,  -8.28173351,  -8.84521961,  -8.12535477,
           -8.88524532,  -8.74754715,  -8.41619205, -10.82264996,  -8.60353088],
         [ -9.01543331,  -8.50793839,  -8.28173351,  -8.84521961,  -8.12535477,
           -8.88524532,  -8.74754715,  -8.41619205, -10.82264996,  -8.60353088]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.59924126,  0.09174633, -0.13445854,  0.42902756, -0.29083729,
           0.33135509,  0.18733883]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         ...,


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0669 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 164, vnnlib ID: 164 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.65704536, -8.06795883, -5.25074387, -4.81809998, -5.40738297,
         -4.78305626, -5.53884125, -6.33654642, -8.16578388, -7.93662977]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [599]; unstable size 599; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 177, 1, 599] with unstable size 176 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 599] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 599] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [176]; unstable size 176; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 176] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 176] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.34938383, 2.50165510, 0.22862637, 0.01722104, 0.35063827, 0.36827111,
         1.27956557, 2.61070561, 2.51747704]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0665 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 165, vnnlib ID: 165 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.43569374, -7.82689762, -6.75649071, -7.24614143, -7.06519032,
         -7.31342793, -8.26335907, -8.11638641, -7.34807396, -7.95840502]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [552]; unstable size 552; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 552] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 552] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 552] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 203] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.37668681, -1.05399323, -1.66841125, -1.10696745, -1.28876460,
         -1.03613186, -0.23888946, -1.47692060, -0.85666394]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.43569374, -7.82689762, -6.75649071, -7.24614143, -7.06519032,
         -7.31342793, -8.26335907, -8.11638641, -7.34807396, -7.95840502]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.43569374, -7.82689667, -6.75648975, -7.24613953, -7.06518936,
          -7.31342697, -8.26335716, -8.11638546, -7.34807396, -7.95840406],
         [-7.43569374, -7.82689667, -6.75648975, -7.24613953, -7.06518936,
          -7.31342697, -8.26335716, -8.11638546, -7.34807396, -7.95840406]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.68069172, -0.28948879, -1.35989571, -0.87024593, -1.05119610,
          -0.80295849,  0.14697170, -0.76831150, -0.15798140]]],
       device='cuda:0')
number of violation:  8
clean attack image tensor([[[[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         ...,


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0604 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 166, vnnlib ID: 166 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.11932993, -4.82532978, -2.47477031, -2.84284973, -2.40484571,
         -3.00597310, -1.59280419, -3.88199234, -4.35127544, -4.01034117]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [458]; unstable size 458; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 244, 1, 458] with unstable size 243 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 458] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 458] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [243]; unstable size 243; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 243] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 243] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.65978765, 2.30001354, 0.46589649, 0.87081158, 0.39240420, 1.02510440,
         1.69761920, 1.67752409, 1.51655388]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0516 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 167, vnnlib ID: 167 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.35463643, -5.18449020, -1.74321675, -3.12308002, -2.89075232,
         -3.26917696, -3.89859080, -4.40411377, -1.31181729, -4.41958570]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [510]; unstable size 510; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 213, 1, 510] with unstable size 212 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 510] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 510] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [212]; unstable size 212; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 212] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 212] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.16538978,  0.02639782,  1.23263621,  1.06774688,  1.37462723,
          1.93852639,  2.49895382, -0.35096419,  2.43112779]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.35463643, -5.18449020, -1.74321675, -3.12308002, -2.89075232,
         -3.26917696, -3.89859080, -4.40411377, -1.31181729, -4.41958570]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.35463643, -5.18449020, -1.74321675, -3.12308002, -2.89075232,
          -3.26917696, -3.89859080, -4.40411377, -1.31181729, -4.41958570]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04281914]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[1.90000021, 1.80476213, 1.74127007,  ..., 1.40793681,
            1.55079389, 1.55079389],
           [1.96349227, 1.85238123, 1.85238123,  ..., 1.09047651,
            1.39206374, 1.45555580],
           [1.88412726, 1.80476213, 1.80476213,  ..., 0.64603180,
            1.07460344, 1.18571460],
           ...,
           [1.64603198, 1.47142887, 1.34444475,  ..., 0.42380959,
            0.55079371, 0.64603180],
           [1.67777801, 1.53492093, 1.26507962,  ..., 0.47142863,
            0.59841275, 0.72539687],
           [1.59841299, 1.26507962, 0.88412702,  ..., 0.63015878,
            0.77301592, 0.86825401]],

          [[1.99677968, 1.85185218, 1.73913074,  ..., 1.20772982,
            1.23993587, 1.22383285],
           [2.04508877, 1.88405824, 1.81964600,  ..., 0.93397754,
            1.14331758, 1.17552364],
           [1.94847047, 1.83574903, 1.75523376,  ..., 0.51529801,
            0.88566834, 0.96618366],
           ...,
           [1.65861547, 1.41706955, 1.28824508,  ..., 0.28985518,
            0.30595824, 0.35426742],
           [1.67471850, 1.44927561, 1.25603890,  ..., 0.28985518,
            0.35426742, 0.43478271],
           [1.65861547, 1.30434811, 0.98228669,  ..., 0.38647354,
            0.48309189, 0.53140104]],

          [[2.02548766, 1.89055514, 1.81559265,  ..., 1.29085493,
            1.38081002, 1.42578757],
           [2.07046509, 1.93553269, 1.87556267,  ..., 1.12593722,
            1.35082495, 1.42578757],
           [1.98051023, 1.87556267, 1.80060017,  ..., 0.84107965,
            1.18590748, 1.27586246],
           ...,
           [1.60569763, 1.41079497, 1.35082495,  ..., 0.58620709,
            0.63118458, 0.67616212],
           [1.65067506, 1.48575759, 1.23088503,  ..., 0.57121456,
            0.63118458, 0.70614707],
           [1.68066013, 1.39580250, 0.94602716,  ..., 0.64617711,
            0.72113961, 0.76611710]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0499 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 168, vnnlib ID: 168 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.77010298, -9.56792831, -3.51737452, -7.98014259, -4.43413353,
         -8.13228130, -7.63488007, -7.35559034, -9.32965469, -9.84434509]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [608]; unstable size 608; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 93, 1, 608] with unstable size 92 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 608] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 608] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [92]; unstable size 92; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 92] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 92] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.91945076, 5.40677547, 4.21947527, 0.74099821, 4.36890173, 3.83588839,
         3.49529505, 5.35575104, 5.79974031]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0652 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 169, vnnlib ID: 169 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.65607166, -10.35036945,  -8.06762981,  -9.21998215,  -7.83191204,
          -9.32909298,  -9.04870224,  -8.23802948,  -9.66316414, -10.29120541]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [442]; unstable size 442; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 152, 1, 442] with unstable size 151 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 442] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 442] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [151]; unstable size 151; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 151] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 151] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.31049490,  1.82715464, -0.04293865,  1.07361531,  1.18260849,
          0.86679059,  0.03638697,  1.20158589,  1.79956198]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.65607166, -10.35036945,  -8.06762981,  -9.21998215,  -7.83191204,
          -9.32909298,  -9.04870224,  -8.23802948,  -9.66316414, -10.29120541]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.20it/s]100%|██████████| 1/1 [00:00<00:00,  9.20it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.67833710, -10.47902393,  -8.10711384,  -9.37081242,  -8.07628441,
           -9.48413372,  -9.13742447,  -8.56529427,  -9.67664242, -10.46873760]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.03082943]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1118 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 8.407693862915039
alpha/beta optimization time: 1.11460280418396
initial alpha-crown bounds: tensor([[ 0.32534051,  1.84551048, -0.02267277,  1.09125662,  1.19872820,
          0.89233649,  0.04136038,  1.21694779,  1.81888652]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.02267277240753174
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.70941352844238
Verifying property 0 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.32534050941467285.

Properties batch 1, size 1
Remaining timeout: 198.5437343120575
Verifying property 1 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.845510482788086.

Properties batch 2, size 1
Remaining timeout: 198.41624355316162
Verifying property 2 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02267277]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.65607166, -10.35036945,  -8.06762981,  -9.21998215,  -7.83191204,
         -9.32909298,  -9.04870224,  -8.23802948,  -9.66316414, -10.29120541],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02267277]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 442
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 149
Node /15 input 0: size torch.Size([100]) unstable 2
-----------------
# of unstable neurons: 593
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 57] 
split level 1: [/input-8, 1835] 
split level 2: [/input-8, 1877] 
split level 3: [/input-8, 1898] 
split level 4: [/input-8, 1843] 
split level 5: [/input-8, 1842] 
split level 6: [/input, 2455] 
split level 7: [/input-8, 1148] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 4.363059997558594e-05
Time: prepare 0.0042    bound 0.0039    transfer 0.0013    finalize 0.0022    func 0.0118    
Accumulated time: func 0.0118    prepare 0.0046    bound 0.0039    transfer 0.0013    finalize 0.0022    
all_split False
Length of domains: 0
Time: pickout 0.0004    decision 0.0223    set_bounds 0.0190    solve 0.0118    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0223    set_bounds 0.0190    solve 0.0118    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.05781435966491699


Properties batch 3, size 1
Remaining timeout: 198.20433282852173
Verifying property 3 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0912566184997559.

Properties batch 4, size 1
Remaining timeout: 198.08466053009033
Verifying property 4 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.1987282037734985.

Properties batch 5, size 1
Remaining timeout: 197.98151564598083
Verifying property 5 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.8923364877700806.

Properties batch 6, size 1
Remaining timeout: 197.87895560264587
Verifying property 6 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.04136037826538086.

Properties batch 7, size 1
Remaining timeout: 197.77656030654907
Verifying property 7 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2169477939605713.

Properties batch 8, size 1
Remaining timeout: 197.67421102523804
Verifying property 8 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.8188865184783936.
Result: safe in 2.4279 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 170, vnnlib ID: 170 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.08461761, -10.51277637,  -1.99679935,  -5.48344898,  -2.58635473,
          -5.56198025,  -5.39356422,  -4.27136040,  -8.85855103,  -9.92981434]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [631]; unstable size 631; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 139, 1, 631] with unstable size 138 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 631] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 631] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [138]; unstable size 138; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 138] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.05669761,  7.12348557, -0.81237477,  2.57512522,  2.65363836,
          2.42923689,  1.37826777,  5.74696732,  6.64974642]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.08461761, -10.51277637,  -1.99679935,  -5.48344898,  -2.58635473,
          -5.56198025,  -5.39356422,  -4.27136040,  -8.85855103,  -9.92981434]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.08461761, -10.51277637,  -1.99679935,  -5.48344898,  -2.58635473,
           -5.56198025,  -5.39356422,  -4.27136040,  -8.85855103,  -9.92981434]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.58955538]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.84603173, -0.94126981, -0.86190474,  ..., -0.33809513,
            -0.48095238, -0.51269841],
           [-0.25873005, -0.30634910, -0.27460307,  ..., -0.29047608,
            -0.33809513, -0.43333322],
           [ 0.42380959,  0.36031753,  0.39206356,  ..., -0.08412688,
            -0.14761895, -0.32222211],
           ...,
           [ 0.47142863,  0.48730165,  0.55079371,  ...,  0.05873025,
             0.01111121,  0.12222230],
           [ 0.12222230,  0.10634929,  0.23333341,  ..., -0.02063482,
            -0.02063482,  0.16984135],
           [-0.19523799, -0.41746020, -0.29047608,  ...,  0.16984135,
             0.31269848,  0.58253974]],

          [[-0.67632848, -0.78904986, -0.72463763,  ..., -0.03220600,
            -0.17713353, -0.20933965],
           [ 0.04830930, -0.01610294,  0.01610318,  ...,  0.03220624,
            -0.01610294, -0.11272129],
           [ 0.88566834,  0.82125610,  0.85346222,  ...,  0.24154601,
             0.19323683, -0.01610294],
           ...,
           [ 0.95008057,  0.98228669,  1.03059590,  ...,  0.62801939,
             0.56360716,  0.61191636],
           [ 0.70853472,  0.72463775,  0.85346222,  ...,  0.66022551,
             0.62801939,  0.77294695],
           [ 0.46698883,  0.22544295,  0.40257660,  ...,  0.77294695,
             0.85346222,  1.14331758]],

          [[-0.01349309, -0.07346311,  0.03148442,  ...,  0.76611710,
             0.66116959,  0.64617711],
           [-0.02848560, -0.04347810,  0.00149941,  ...,  0.78110963,
             0.78110963,  0.78110963],
           [-0.14842562, -0.19340314, -0.14842562,  ...,  0.81109464,
             0.81109464,  0.76611710],
           ...,
           [-0.53823084, -0.56821585, -0.50824583,  ..., -0.68815589,
            -0.65817088, -0.49325335],
           [-0.58320838, -0.73313338, -0.61319339,  ..., -0.83808094,
            -0.83808094, -0.65817088],
           [-0.80809593, -1.04797614, -0.85307342,  ..., -0.74812591,
            -0.67316341, -0.43328333]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0822 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 171, vnnlib ID: 171 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.63988018, -11.70766258, -10.72140884, -10.78502178, -10.30626678,
         -10.96242046,  -9.89720917, -10.94630241, -13.04552364, -11.00957012]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [493]; unstable size 493; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 493] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 493] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 493] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 177] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.11123228, 1.11106300, 0.48803031, 0.63042784, 0.00368500, 0.79707956,
         0.55721867, 2.39154506, 0.42870808]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0615 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 172, vnnlib ID: 172 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.49745131, -8.20798206, -6.12458706, -8.36979198, -6.27434921,
         -8.58381653, -8.11138153, -7.94669247, -4.75123119, -7.89815950]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [561]; unstable size 561; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 148, 1, 561] with unstable size 147 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 561] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 561] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [147]; unstable size 147; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 147] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.08015418,  1.10043252,  3.16933250,  1.15053511,  3.37255001,
          2.91000962,  2.77714443, -0.19217908,  2.78871393]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.49745131, -8.20798206, -6.12458706, -8.36979198, -6.27434921,
         -8.58381653, -8.11138153, -7.94669247, -4.75123119, -7.89815950]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.70938110, -8.28709698, -6.37382412, -8.52355671, -6.53355598,
          -8.73983860, -8.32157516, -8.20209694, -4.68664932, -7.95726824]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02273178]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0072 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0621 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 173, vnnlib ID: 173 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.48213387, -8.01494122, -6.49922419, -6.44987583, -6.58213425,
         -6.60465574, -5.89261341, -7.75944138, -8.76826668, -7.64277458]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [608]; unstable size 608; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 608] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 608] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 608] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 216] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.16914642,  0.51496029, -0.35071123, -0.32186103,  0.12535101,
         -1.02238894,  0.66660726,  1.28926659,  0.21741581]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.48213387, -8.01494122, -6.49922419, -6.44987583, -6.58213425,
         -6.60465574, -5.89261341, -7.75944138, -8.76826668, -7.64277458]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.48213339, -8.01494217, -6.49922466, -6.44987679, -6.58213520,
          -6.60465670, -5.89261341, -7.75944233, -8.76826763, -7.64277506],
         [-7.48213339, -8.01494217, -6.49922466, -6.44987679, -6.58213520,
          -6.60465670, -5.89261341, -7.75944233, -8.76826763, -7.64277506]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.04934788,  0.13225842, -0.55726337]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0775 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 174, vnnlib ID: 174 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.71844196, -6.83214664, -1.22474170, -2.20203090, -1.30234599,
         -2.27594328, -2.31035209, -2.35291529, -4.83945274, -6.00620031]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [588]; unstable size 588; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 199, 1, 588] with unstable size 198 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 588] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 588] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [198]; unstable size 198; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 198] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 198] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.61178446,  4.32750082, -0.36567211,  0.41240415,  0.48770013,
          0.50044870,  0.68070054,  2.37939548,  3.58202147]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.71844196, -6.83214664, -1.22474170, -2.20203090, -1.30234599,
         -2.27594328, -2.31035209, -2.35291529, -4.83945274, -6.00620031]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.71844196, -6.83214664, -1.22474170, -2.20203090, -1.30234599,
          -2.27594328, -2.31035209, -2.35291529, -4.83945274, -6.00620031]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07760429]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.32222211, -0.29047608, -0.17936498,  ...,  0.67777783,
             0.83650798,  1.15396857],
           [-0.33809513, -0.08412688,  0.16984135,  ...,  0.70952386,
             0.94761908,  1.29682565],
           [-0.13174593,  0.16984135,  0.39206356,  ...,  0.70952386,
             0.94761908,  1.45555580],
           ...,
           [-0.06825387, -0.08412688, -0.08412688,  ..., -0.14761895,
            -0.09999990, -0.02063482],
           [-0.05238085, -0.09999990, -0.06825387,  ..., -0.13174593,
            -0.02063482,  0.10634929],
           [-0.13174593, -0.17936498, -0.09999990,  ...,  0.07460327,
             0.16984135,  0.23333341]],

          [[-0.45088565, -0.43478248, -0.38647330,  ...,  0.48309189,
             0.62801939,  0.93397754],
           [-0.48309177, -0.25764883, -0.06441211,  ...,  0.49919492,
             0.70853472,  1.01449287],
           [-0.28985494, -0.03220600,  0.16103071,  ...,  0.48309189,
             0.67632860,  1.12721443],
           ...,
           [-0.22544271, -0.24154577, -0.24154577,  ..., -0.30595800,
            -0.27375188, -0.17713353],
           [-0.20933965, -0.24154577, -0.22544271,  ..., -0.32206106,
            -0.19323659, -0.03220600],
           [-0.28985494, -0.33816412, -0.25764883,  ..., -0.12882435,
            -0.03220600,  0.08051541]],

          [[-0.55322337, -0.52323836, -0.46326834,  ...,  0.25637197,
             0.45127454,  0.79610211],
           [-0.59820086, -0.37331331, -0.17841063,  ...,  0.19640197,
             0.43628204,  0.76611710],
           [-0.43328333, -0.17841063,  0.00149941,  ...,  0.13643195,
             0.34632701,  0.79610211],
           ...,
           [-0.29835078, -0.31334329, -0.31334329,  ..., -0.32833579,
            -0.29835078, -0.20839565],
           [-0.26836565, -0.31334329, -0.28335828,  ..., -0.32833579,
            -0.22338814, -0.08845562],
           [-0.32833579, -0.35832080, -0.29835078,  ..., -0.14842562,
            -0.05847061,  0.04647692]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0699 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 175, vnnlib ID: 175 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.66825104, -7.97197151, -6.85186052, -7.69482708, -6.41166210,
         -7.79411554, -7.01330566, -7.14677095, -7.18919182, -7.63720417]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [604]; unstable size 604; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 604] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 604] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 604] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 186] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.53241515, 0.56145525, 1.23012352, 0.07895291, 1.31490338, 0.48338461,
         0.64640123, 1.02218068, 1.28158712]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0673 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 176, vnnlib ID: 176 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.87314558, -8.19042587, -4.13985491, -4.64103413, -4.94530869,
         -4.76780462, -4.91272449, -6.20926189, -6.63870811, -7.66739511]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [597]; unstable size 597; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 597] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 597] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 597] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 153] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.23613933,  2.79050183, -0.77878702, -0.04329717,  0.11112864,
          0.04540646,  1.03802991,  1.36925066,  2.36230254]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.87314558, -8.19042587, -4.13985491, -4.64103413, -4.94530869,
         -4.76780462, -4.91272449, -6.20926189, -6.63870811, -7.66739511]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.87314510, -8.19042587, -4.13985491, -4.64103413, -4.94530916,
          -4.76780462, -4.91272354, -6.20926237, -6.63870811, -7.66739511],
         [-4.87314510, -8.19042587, -4.13985491, -4.64103413, -4.94530916,
          -4.76780462, -4.91272354, -6.20926237, -6.63870811, -7.66739511]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.23211098, -0.50117922,  0.30427504]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]],


         [[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]],


         [[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0709 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 177, vnnlib ID: 177 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.53732777, -16.52824783, -10.35078621, -13.07399178, -13.29616356,
         -13.26419640, -14.66434383, -13.61211491, -15.27535629, -16.57476234]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [276]; unstable size 276; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 76, 1, 276] with unstable size 75 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 276] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 276] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [75]; unstable size 75; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 75] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 75] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.01606524, 5.64310694, 2.54551029, 2.74233055, 2.73602724, 4.06365871,
         3.03769207, 4.63138247, 5.85097408]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0667 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 178, vnnlib ID: 178 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.18358374, -9.98720455, -4.51179361, -6.18973541, -4.68899345,
         -6.30690002, -6.33994198, -4.82446098, -9.05756760, -9.00955582]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [453]; unstable size 453; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 141, 1, 453] with unstable size 140 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 453] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 453] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [140]; unstable size 140; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 140] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 140] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 5.29551125, -0.05402613,  1.48138261,  0.06260347,  1.59185386,
          1.62150860,  0.04656303,  4.47954321,  4.37859154]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.18358374, -9.98720455, -4.51179361, -6.18973541, -4.68899345,
         -6.30690002, -6.33994198, -4.82446098, -9.05756760, -9.00955582]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.90it/s]100%|██████████| 1/1 [00:00<00:00,  8.89it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -4.25827217, -10.05697727,  -4.28648949,  -5.97811222,  -4.47851419,
           -6.09019661,  -6.11976624,  -4.58179903,  -9.12149048,  -9.06482506]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02821732]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1151 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.004981994628906
alpha/beta optimization time: 1.1214826107025146
initial alpha-crown bounds: tensor([[ 5.31580877, -0.04664278,  1.49123216,  0.07164550,  1.60213888,
          1.62858009,  0.05958915,  4.48958111,  4.39304733]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.04664278030395508
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.69687032699585
Verifying property 0 with 1 instances.
##### Instance 178 first 10 spec matrices: 
tensor([[[ 1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.3158087730407715.

Properties batch 1, size 1
Remaining timeout: 198.55181503295898
Verifying property 1 with 1 instances.
##### Instance 178 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04664278]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.18358374, -9.98720455, -4.51179361, -6.18973541, -4.68899345,
        -6.30690002, -6.33994198, -4.82446098, -9.05756760, -9.00955582],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04664278]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 453
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 138
Node /15 input 0: size torch.Size([100]) unstable 3
-----------------
# of unstable neurons: 594
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-8, 653] 
split level 1: [/input-8, 1102] 
split level 2: [/input-8, 61] 
split level 3: [/input-8, 956] 
split level 4: [/input-8, 1525] 
split level 5: [/input-8, 1139] 
split level 6: [/input-8, 1116] 
split level 7: [/input-8, 213] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 256 = 0.0
pruning-in-iteration extra time: 4.863739013671875e-05
Time: prepare 0.0018    bound 0.0897    transfer 0.0014    finalize 0.0015    func 0.0945    
Accumulated time: func 0.0945    prepare 0.0022    bound 0.0897    transfer 0.0014    finalize 0.0015    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03427 (8), -0.03425 (8), -0.03396 (8), -0.03393 (8), -0.03390 (8), -0.03388 (8), -0.03359 (8), -0.03356 (8), -0.03347 (8), -0.03345 (8), -0.03317 (8), -0.03312 (8), -0.03311 (8), -0.03309 (8), -0.03281 (8), -0.03277 (8), -0.03246 (8), -0.03244 (8), -0.03216 (8), -0.03214 (8), 
Length of domains: 256
Time: pickout 0.0003    decision 0.0222    set_bounds 0.0170    solve 0.0946    add 0.0021    
Accumulated time: pickout 0.0003    decision 0.0222    set_bounds 0.0170    solve 0.0946    add 0.0021    
Current (lb-rhs): -0.03427004814147949
256 domains visited
Cumulative time: 0.13993239402770996

BaB round 2
batch: 256
splitting decisions: 
split level 0: [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 512 = 0.0
pruning-in-iteration extra time: 6.413459777832031e-05
Time: prepare 0.0075    bound 0.0956    transfer 0.0046    finalize 0.0027    func 0.1105    
Accumulated time: func 0.2050    prepare 0.0099    bound 0.1854    transfer 0.0060    finalize 0.0042    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03300 (9), -0.03298 (9), -0.03268 (9), -0.03266 (9), -0.03262 (9), -0.03260 (9), -0.03231 (9), -0.03229 (9), -0.03219 (9), -0.03217 (9), -0.03189 (9), -0.03185 (9), -0.03183 (9), -0.03181 (9), -0.03152 (9), -0.03150 (9), -0.03118 (9), -0.03116 (9), -0.03086 (9), -0.03085 (9), 
Length of domains: 512
Time: pickout 0.0025    decision 0.0288    set_bounds 0.0126    solve 0.1106    add 0.0022    
Accumulated time: pickout 0.0028    decision 0.0510    set_bounds 0.0296    solve 0.2052    add 0.0043    
Current (lb-rhs): -0.03299713134765625
768 domains visited
Cumulative time: 0.2970712184906006

BaB round 3
batch: 512
splitting decisions: 
split level 0: [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 9] [/input-8, 9] [/input-8, 9] [/input-8, 9] [/input-8, 1099] [/input-8, 1099] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1024 = 0.0
pruning-in-iteration extra time: 5.841255187988281e-05
Time: prepare 0.0152    bound 0.0998    transfer 0.0035    finalize 0.0046    func 0.1232    
Accumulated time: func 0.3282    prepare 0.0253    bound 0.2852    transfer 0.0095    finalize 0.0088    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03246 (10), -0.03244 (10), -0.03215 (10), -0.03212 (10), -0.03208 (10), -0.03206 (10), -0.03177 (10), -0.03174 (10), -0.03166 (10), -0.03164 (10), -0.03136 (10), -0.03131 (10), -0.03130 (10), -0.03128 (10), -0.03099 (10), -0.03095 (10), -0.03011 (10), -0.03009 (10), -0.02989 (10), -0.02986 (10), 
Length of domains: 1024
Time: pickout 0.0046    decision 0.0364    set_bounds 0.0235    solve 0.1234    add 0.0038    
Accumulated time: pickout 0.0074    decision 0.0873    set_bounds 0.0532    solve 0.3286    add 0.0081    
Current (lb-rhs): -0.03246021270751953
1792 domains visited
Cumulative time: 0.48952698707580566

BaB round 4
batch: 1024
splitting decisions: 
split level 0: [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1325] [/input-8, 1325] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 7.724761962890625e-05
Time: prepare 0.0289    bound 0.1198    transfer 0.0136    finalize 0.0103    func 0.1737    
Accumulated time: func 0.5019    prepare 0.0544    bound 0.4050    transfer 0.0231    finalize 0.0191    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03156 (11), -0.03154 (11), -0.03139 (11), -0.03137 (11), -0.03125 (11), -0.03122 (11), -0.03108 (11), -0.03105 (11), -0.03081 (11), -0.03079 (11), -0.03058 (11), -0.03057 (11), -0.03051 (11), -0.03047 (11), -0.03030 (11), -0.03024 (11), -0.03012 (11), -0.03011 (11), -0.02984 (11), -0.02979 (11), 
Length of domains: 2048
Time: pickout 0.0083    decision 0.0676    set_bounds 0.0465    solve 0.1741    add 0.0913    
Accumulated time: pickout 0.0156    decision 0.1549    set_bounds 0.0997    solve 0.5026    add 0.0994    
Current (lb-rhs): -0.031560420989990234
3840 domains visited
Cumulative time: 0.8858585357666016

BaB round 5
batch: 2048
splitting decisions: 
split level 0: [/input, 547] [/input, 547] [/input, 547] [/input, 547] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input, 547] [/input, 547] 
pruning_in_iteration open status: False
ratio of positive domain = 21 / 4096 = 0.005126953125
pruning-in-iteration extra time: 0.00010752677917480469
Time: prepare 0.0762    bound 0.2056    transfer 0.0335    finalize 0.0253    func 0.3417    
Accumulated time: func 0.8436    prepare 0.1309    bound 0.6106    transfer 0.0566    finalize 0.0445    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03141 (12), -0.03139 (12), -0.03109 (12), -0.03107 (12), -0.03086 (12), -0.03084 (12), -0.03066 (12), -0.03064 (12), -0.03055 (12), -0.03053 (12), -0.03035 (12), -0.03032 (12), -0.03010 (12), -0.03008 (12), -0.02979 (12), -0.02976 (12), -0.02960 (12), -0.02958 (12), -0.02928 (12), -0.02926 (12), 
Length of domains: 4072
Time: pickout 0.0179    decision 0.5348    set_bounds 0.0787    solve 0.3424    add 0.0317    
Accumulated time: pickout 0.0335    decision 0.6897    set_bounds 0.1783    solve 0.8450    add 0.1310    
Current (lb-rhs): -0.03140664100646973
7912 domains visited
Cumulative time: 1.895320177078247

BaB round 6
batch: 4072
splitting decisions: 
split level 0: [/input-8, 9] [/input-8, 9] [/input-8, 9] [/input-8, 9] [/input, 547] [/input, 547] [/input, 547] [/input, 547] [/input-8, 9] [/input-8, 9] 
pruning_in_iteration open status: False
ratio of positive domain = 254 / 8144 = 0.03118860510805499
pruning-in-iteration extra time: 6.937980651855469e-05
Time: prepare 0.1729    bound 0.3612    transfer 0.0380    finalize 0.2187    func 0.7921    
Accumulated time: func 1.6357    prepare 0.3040    bound 0.9718    transfer 0.0946    finalize 0.2632    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03069 (13), -0.03067 (13), -0.03038 (13), -0.03036 (13), -0.03032 (13), -0.03030 (13), -0.03001 (13), -0.02998 (13), -0.02993 (13), -0.02990 (13), -0.02962 (13), -0.02959 (13), -0.02957 (13), -0.02955 (13), -0.02953 (13), -0.02951 (13), -0.02928 (13), -0.02924 (13), -0.02923 (13), -0.02918 (13), 
Length of domains: 7862
Time: pickout 0.0441    decision 0.3753    set_bounds 0.1328    solve 0.7934    add 0.0483    
Accumulated time: pickout 0.0777    decision 1.0649    set_bounds 0.3111    solve 1.6384    add 0.1794    
Current (lb-rhs): -0.030694007873535156
15774 domains visited
Cumulative time: 3.304403066635132

BaB round 7
batch: 4096
splitting decisions: 
split level 0: [/input-8, 1] [/input-8, 1] [/input-8, 1] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] 
pruning_in_iteration open status: False
ratio of positive domain = 689 / 8192 = 0.0841064453125
pruning-in-iteration extra time: 7.152557373046875e-05
Time: prepare 0.1864    bound 0.3567    transfer 0.0443    finalize 0.0368    func 0.6258    
Accumulated time: func 2.2615    prepare 0.4907    bound 1.3284    transfer 0.1389    finalize 0.3000    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03069 (13), -0.03067 (13), -0.03038 (13), -0.03036 (13), -0.03032 (13), -0.03030 (13), -0.03001 (13), -0.02998 (13), -0.02993 (13), -0.02990 (13), -0.02962 (13), -0.02959 (13), -0.02957 (13), -0.02955 (13), -0.02953 (13), -0.02951 (13), -0.02928 (13), -0.02924 (13), -0.02923 (13), -0.02918 (13), 
Length of domains: 11230
Time: pickout 0.0798    decision 0.2585    set_bounds 0.3972    solve 0.6273    add 0.0560    
Accumulated time: pickout 0.1575    decision 1.3235    set_bounds 0.7083    solve 2.2658    add 0.2353    
Current (lb-rhs): -0.030694007873535156
23238 domains visited
current_vram/total_varm: 14.7GB/99.9GB, batch_size increase to 8192
Cumulative time: 4.737882137298584

BaB round 8
batch: 8192
splitting decisions: 
split level 0: [/input-8, 698] [/input-8, 698] [/input-8, 1] [/input-8, 1] [/input-8, 1] [/input-8, 1] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] 
pruning_in_iteration open status: False
ratio of positive domain = 1480 / 16384 = 0.09033203125
pruning-in-iteration extra time: 6.246566772460938e-05
Time: prepare 0.3613    bound 0.6648    transfer 0.0909    finalize 0.0980    func 1.2163    
Accumulated time: func 3.4778    prepare 0.8523    bound 1.9932    transfer 0.2298    finalize 0.3980    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03069 (13), -0.03067 (13), -0.03038 (13), -0.03036 (13), -0.03032 (13), -0.03030 (13), -0.03001 (13), -0.02998 (13), -0.02993 (13), -0.02990 (13), -0.02962 (13), -0.02959 (13), -0.02957 (13), -0.02955 (13), -0.02953 (13), -0.02951 (13), -0.02928 (13), -0.02924 (13), -0.02923 (13), -0.02918 (13), 
Length of domains: 17878
Time: pickout 0.1082    decision 0.6815    set_bounds 0.5868    solve 1.2195    add 0.0939    
Accumulated time: pickout 0.2657    decision 2.0049    set_bounds 1.2951    solve 3.4853    add 0.3293    
Current (lb-rhs): -0.030694007873535156
38078 domains visited
current_vram/total_varm: 20.3GB/99.9GB, batch_size increase to 16384
Cumulative time: 7.447254180908203

BaB round 9
batch: 16384
splitting decisions: 
split level 0: [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] 
pruning_in_iteration open status: False
ratio of positive domain = 4140 / 32768 = 0.1263427734375
pruning-in-iteration extra time: 0.0001285076141357422
Time: prepare 0.9062    bound 1.2863    transfer 0.2372    finalize 0.1782    func 2.6099    
Accumulated time: func 6.0877    prepare 1.7589    bound 3.2794    transfer 0.4670    finalize 0.5761    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03069 (13), -0.03067 (13), -0.03038 (13), -0.03036 (13), -0.03032 (13), -0.03030 (13), -0.03001 (13), -0.02998 (13), -0.02993 (13), -0.02990 (13), -0.02962 (13), -0.02959 (13), -0.02957 (13), -0.02955 (13), -0.02951 (13), -0.02928 (13), -0.02924 (13), -0.02923 (13), -0.02918 (13), -0.02876 (13), 
Length of domains: 29926
Time: pickout 0.1989    decision 1.6528    set_bounds 0.9641    solve 2.6165    add 0.1016    
Accumulated time: pickout 0.4646    decision 3.6578    set_bounds 2.2592    solve 6.1019    add 0.4308    
Current (lb-rhs): -0.030694007873535156
66510 domains visited
current_vram/total_varm: 25.7GB/99.9GB, batch_size increase to 32768
Cumulative time: 13.034191131591797

BaB round 10
batch: 29926
splitting decisions: 
split level 0: [/input-8, 1] [/input-8, 1] [/input-8, 1] [/input-8, 1] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] 
pruning_in_iteration open status: False
ratio of positive domain = 6761 / 59852 = 0.11296197286640375
pruning-in-iteration extra time: 0.0002486705780029297
Time: prepare 1.2689    bound 2.3170    transfer 0.5436    finalize 0.3282    func 4.4609    
Accumulated time: func 10.5486    prepare 3.0281    bound 5.5965    transfer 1.0106    finalize 0.9043    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02960 (14), -0.02958 (14), -0.02929 (14), -0.02926 (14), -0.02925 (14), -0.02923 (14), -0.02894 (14), -0.02891 (14), -0.02883 (14), -0.02881 (14), -0.02859 (14), -0.02857 (14), -0.02852 (14), -0.02850 (14), -0.02850 (14), -0.02848 (14), -0.02840 (14), -0.02828 (14), -0.02825 (14), -0.02821 (14), 
Length of domains: 52738
Time: pickout 0.3610    decision 3.3329    set_bounds 1.9918    solve 4.8419    add 0.1734    
Accumulated time: pickout 0.8256    decision 6.9906    set_bounds 4.2510    solve 10.9438    add 0.6042    
Current (lb-rhs): -0.029598236083984375
119248 domains visited
Cumulative time: 23.820251941680908

BaB round 11
batch: 32768
splitting decisions: 
split level 0: [/input-8, 62] [/input-8, 62] [/input-8, 62] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 62] [/input-8, 62] [/input-8, 62] 
pruning_in_iteration open status: False
ratio of positive domain = 10283 / 65536 = 0.1569061279296875
pruning-in-iteration extra time: 0.0002980232238769531
Time: prepare 1.4257    bound 7.7238    transfer 0.6035    finalize 0.8666    func 10.6229    
Accumulated time: func 21.1715    prepare 4.4542    bound 13.3203    transfer 1.6141    finalize 1.7709    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02960 (14), -0.02958 (14), -0.02929 (14), -0.02926 (14), -0.02925 (14), -0.02923 (14), -0.02894 (14), -0.02891 (14), -0.02883 (14), -0.02881 (14), -0.02852 (14), -0.02850 (14), -0.02850 (14), -0.02848 (14), -0.02840 (14), -0.02821 (14), -0.02817 (14), -0.02812 (14), -0.02808 (14), -0.02797 (15), 
Length of domains: 74688
Time: pickout 0.4069    decision 3.3393    set_bounds 1.8919    solve 10.6314    add 0.2186    
Accumulated time: pickout 1.2325    decision 10.3299    set_bounds 6.1429    solve 21.5752    add 0.8228    
Current (lb-rhs): -0.029598236083984375
173966 domains visited
Cumulative time: 40.41067051887512

BaB round 12
batch: 32768
splitting decisions: 
split level 0: [/input-8, 1829] [/input-8, 1829] [/input-8, 54] [/input, 1001] [/input, 1001] [/input, 1001] [/input, 1001] [/input-8, 1829] [/input-8, 1829] [/input-8, 1829] 
pruning_in_iteration open status: False
ratio of positive domain = 11095 / 65536 = 0.1692962646484375
pruning-in-iteration extra time: 0.0002956390380859375
Time: prepare 1.4179    bound 7.7187    transfer 0.6046    finalize 0.4009    func 10.1458    
Accumulated time: func 31.3173    prepare 5.8725    bound 21.0390    transfer 2.2188    finalize 2.1718    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02960 (14), -0.02958 (14), -0.02929 (14), -0.02926 (14), -0.02925 (14), -0.02923 (14), -0.02894 (14), -0.02891 (14), -0.02883 (14), -0.02881 (14), -0.02852 (14), -0.02850 (14), -0.02850 (14), -0.02848 (14), -0.02840 (14), -0.02821 (14), -0.02817 (14), -0.02812 (14), -0.02808 (14), -0.02777 (14), 
Length of domains: 95888
Time: pickout 0.4175    decision 3.4404    set_bounds 2.6968    solve 10.1581    add 0.1926    
Accumulated time: pickout 1.6499    decision 13.7703    set_bounds 8.8396    solve 31.7333    add 1.0154    
Current (lb-rhs): -0.029598236083984375
227934 domains visited
Cumulative time: 57.44765257835388

BaB round 13
batch: 32768
splitting decisions: 
split level 0: [/input-8, 54] [/input-8, 54] [/input-8, 54] [/input-8, 54] [/input-8, 838] [/input, 998] [/input, 998] [/input, 998] [/input, 3815] [/input, 3815] 
pruning_in_iteration open status: True
ratio of positive domain = 14142 / 65536 = 0.215789794921875
pruning-in-iteration extra time: 0.0016214847564697266
Time: prepare 1.4329    bound 6.9325    transfer 0.6053    finalize 0.4061    func 9.3798    
Accumulated time: func 40.6971    prepare 7.3058    bound 27.9715    transfer 2.8241    finalize 2.5780    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02960 (14), -0.02958 (14), -0.02929 (14), -0.02926 (14), -0.02925 (14), -0.02923 (14), -0.02894 (14), -0.02891 (14), -0.02883 (14), -0.02881 (14), -0.02852 (14), -0.02850 (14), -0.02850 (14), -0.02848 (14), -0.02840 (14), -0.02821 (14), -0.02817 (14), -0.02812 (14), -0.02808 (14), -0.02777 (14), 
Length of domains: 114514
Time: pickout 0.4514    decision 3.6787    set_bounds 2.2747    solve 10.2169    add 0.1795    
Accumulated time: pickout 2.1014    decision 17.4490    set_bounds 11.1143    solve 41.9502    add 1.1949    
Current (lb-rhs): -0.029598236083984375
279328 domains visited
Cumulative time: 74.36249566078186

BaB round 14
batch: 32768
splitting decisions: 
split level 0: [/input, 2025] [/input-8, 1329] [/input-8, 838] [/input-8, 838] [/input-8, 838] [/input-8, 838] [/input-8, 54] [/input-8, 1329] [/input-8, 1329] [/input, 1017] 
pruning_in_iteration open status: True
ratio of positive domain = 16368 / 65536 = 0.249755859375
pruning-in-iteration extra time: 0.005309343338012695
Time: prepare 1.4676    bound 3.3330    transfer 0.6080    finalize 1.3994    func 6.8107    
Accumulated time: func 47.5078    prepare 8.7740    bound 31.3045    transfer 3.4321    finalize 3.9774    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02960 (14), -0.02958 (14), -0.02929 (14), -0.02926 (14), -0.02925 (14), -0.02923 (14), -0.02894 (14), -0.02891 (14), -0.02883 (14), -0.02881 (14), -0.02852 (14), -0.02850 (14), -0.02850 (14), -0.02848 (14), -0.02840 (14), -0.02821 (14), -0.02817 (14), -0.02812 (14), -0.02808 (14), -0.02777 (14), 
Length of domains: 130914
Time: pickout 0.4633    decision 3.4006    set_bounds 2.5692    solve 6.8225    add 0.2170    
Accumulated time: pickout 2.5646    decision 20.8496    set_bounds 13.6835    solve 48.7727    add 1.4118    
Current (lb-rhs): -0.029598236083984375
328496 domains visited
Cumulative time: 87.95912981033325

BaB round 15
batch: 32768
splitting decisions: 
split level 0: [/input, 1017] [/input, 3815] [/input, 3815] [/input, 3815] [/input, 3815] [/input, 1001] [/input, 1001] [/input, 1001] [/input, 1001] [/input-8, 1829] 
pruning_in_iteration open status: True
ratio of positive domain = 18465 / 65536 = 0.2817535400390625
pruning-in-iteration extra time: 0.005545139312744141
Time: prepare 1.4849    bound 2.9851    transfer 0.6048    finalize 1.5602    func 6.6375    
Accumulated time: func 54.1453    prepare 10.2593    bound 34.2896    transfer 4.0370    finalize 5.5377    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02960 (14), -0.02958 (14), -0.02929 (14), -0.02926 (14), -0.02925 (14), -0.02923 (14), -0.02894 (14), -0.02891 (14), -0.02883 (14), -0.02881 (14), -0.02852 (14), -0.02850 (14), -0.02850 (14), -0.02848 (14), -0.02840 (14), -0.02821 (14), -0.02817 (14), -0.02812 (14), -0.02808 (14), -0.02777 (14), 
Length of domains: 145217
Time: pickout 0.5109    decision 3.4270    set_bounds 2.8142    solve 6.6501    add 0.1693    
Accumulated time: pickout 3.0755    decision 24.2766    set_bounds 16.4977    solve 55.4228    add 1.5812    
Current (lb-rhs): -0.029598236083984375
375567 domains visited
Cumulative time: 101.68732261657715

BaB round 16
batch: 32768
splitting decisions: 
split level 0: [/input-8, 1316] [/input-8, 1316] [/input-8, 1326] [/input-8, 1316] [/input-8, 1316] [/input-8, 1316] [/input-8, 1326] [/input-8, 1326] [/input, 998] [/input-8, 1326] 
pruning_in_iteration open status: True
ratio of positive domain = 22272 / 65536 = 0.33984375
pruning-in-iteration extra time: 0.005715370178222656
Time: prepare 1.5319    bound 2.5687    transfer 0.6044    finalize 0.4329    func 5.1399    
Accumulated time: func 59.2852    prepare 11.7917    bound 36.8583    transfer 4.6414    finalize 5.9705    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02960 (14), -0.02958 (14), -0.02929 (14), -0.02926 (14), -0.02925 (14), -0.02923 (14), -0.02894 (14), -0.02891 (14), -0.02883 (14), -0.02881 (14), -0.02852 (14), -0.02850 (14), -0.02850 (14), -0.02848 (14), -0.02840 (14), -0.02821 (14), -0.02817 (14), -0.02812 (14), -0.02808 (14), -0.02777 (14), 
Length of domains: 155713
Time: pickout 0.5008    decision 3.4211    set_bounds 3.0147    solve 5.1547    add 0.1596    
Accumulated time: pickout 3.5763    decision 27.6977    set_bounds 19.5124    solve 60.5775    add 1.7408    
Current (lb-rhs): -0.029598236083984375
418831 domains visited
Cumulative time: 114.11458826065063

BaB round 17
batch: 32768
splitting decisions: 
split level 0: [/input-8, 1326] [/input-8, 1326] [/input-8, 1326] [/input-8, 1326] [/input, 1017] [/input-8, 1316] [/input-8, 1316] [/input, 1017] [/input-8, 1316] [/input-8, 1316] 
pruning_in_iteration open status: True
ratio of positive domain = 26023 / 65536 = 0.3970794677734375
pruning-in-iteration extra time: 0.005880117416381836
Time: prepare 1.4943    bound 2.4325    transfer 0.6046    finalize 0.4430    func 4.9798    
Accumulated time: func 64.2650    prepare 13.2864    bound 39.2909    transfer 5.2460    finalize 6.4135    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02960 (14), -0.02958 (14), -0.02929 (14), -0.02926 (14), -0.02925 (14), -0.02923 (14), -0.02894 (14), -0.02891 (14), -0.02883 (14), -0.02881 (14), -0.02852 (14), -0.02850 (14), -0.02850 (14), -0.02848 (14), -0.02840 (14), -0.02821 (14), -0.02817 (14), -0.02812 (14), -0.02808 (14), -0.02777 (14), 
Length of domains: 162458
Time: pickout 0.5330    decision 4.8519    set_bounds 3.0386    solve 4.9977    add 0.1399    
Accumulated time: pickout 4.1093    decision 32.5496    set_bounds 22.5510    solve 65.5752    add 1.8807    
Current (lb-rhs): -0.029598236083984375
458344 domains visited
Cumulative time: 127.87366509437561

BaB round 18
batch: 32768
splitting decisions: 
split level 0: [/input-8, 1326] [/input-8, 1326] [/input-8, 1326] [/input-8, 1326] [/input-8, 1316] [/input-8, 1316] [/input-8, 838] [/input-8, 838] [/input-8, 838] [/input-8, 838] 
pruning_in_iteration open status: True
ratio of positive domain = 24900 / 65536 = 0.37994384765625
pruning-in-iteration extra time: 0.005821943283081055
Time: prepare 1.5582    bound 2.4728    transfer 0.6053    finalize 1.8898    func 6.5292    
Accumulated time: func 70.7942    prepare 14.8451    bound 41.7636    transfer 5.8513    finalize 8.3033    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02960 (14), -0.02958 (14), -0.02929 (14), -0.02926 (14), -0.02925 (14), -0.02923 (14), -0.02894 (14), -0.02891 (14), -0.02883 (14), -0.02881 (14), -0.02852 (14), -0.02850 (14), -0.02850 (14), -0.02848 (14), -0.02840 (14), -0.02821 (14), -0.02817 (14), -0.02812 (14), -0.02808 (14), -0.02777 (14), 
Length of domains: 170326
Time: pickout 0.5248    decision 4.6194    set_bounds 1.6474    solve 6.5429    add 0.1939    
Accumulated time: pickout 4.6341    decision 37.1690    set_bounds 24.1983    solve 72.1182    add 2.0746    
Current (lb-rhs): -0.029598236083984375
498980 domains visited
Cumulative time: 141.61459350585938

BaB round 19
batch: 32768
splitting decisions: 
split level 0: [/input, 2025] [/input, 924] [/input, 2025] [/input-8, 60] [/input-8, 60] [/input, 2603] [/input, 924] [/input, 924] [/input, 1001] [/input, 2603] 
pruning_in_iteration open status: True
ratio of positive domain = 21620 / 65536 = 0.32989501953125
pruning-in-iteration extra time: 0.00604557991027832
Time: prepare 1.5817    bound 2.5963    transfer 0.6036    finalize 0.4475    func 5.2357    
Accumulated time: func 76.0300    prepare 16.4272    bound 44.3599    transfer 6.4548    finalize 8.7508    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02960 (14), -0.02958 (14), -0.02929 (14), -0.02926 (14), -0.02925 (14), -0.02923 (14), -0.02894 (14), -0.02891 (14), -0.02883 (14), -0.02881 (14), -0.02852 (14), -0.02850 (14), -0.02850 (14), -0.02848 (14), -0.02840 (14), -0.02821 (14), -0.02817 (14), -0.02812 (14), -0.02808 (14), -0.02777 (14), 
Length of domains: 181474
Time: pickout 0.5448    decision 3.4369    set_bounds 3.4146    solve 5.2553    add 0.1701    
Accumulated time: pickout 5.1789    decision 40.6059    set_bounds 27.6129    solve 77.3735    add 2.2447    
Current (lb-rhs): -0.029598236083984375
542896 domains visited
Cumulative time: 154.64540672302246

BaB round 20
batch: 32768
splitting decisions: 
split level 0: [/input, 1001] [/input, 1001] [/input, 1001] [/input, 1001] [/input, 1001] [/input, 1001] [/input, 1001] [/input, 1001] [/input, 1001] [/input, 1001] 
pruning_in_iteration open status: True
ratio of positive domain = 18615 / 65536 = 0.2840423583984375
pruning-in-iteration extra time: 0.0059549808502197266
Time: prepare 1.5688    bound 2.7038    transfer 0.6144    finalize 0.4532    func 5.3438    
Accumulated time: func 81.3738    prepare 17.9965    bound 47.0637    transfer 7.0692    finalize 9.2040    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02960 (14), -0.02958 (14), -0.02929 (14), -0.02926 (14), -0.02925 (14), -0.02923 (14), -0.02894 (14), -0.02891 (14), -0.02883 (14), -0.02881 (14), -0.02852 (14), -0.02850 (14), -0.02850 (14), -0.02848 (14), -0.02840 (14), -0.02821 (14), -0.02817 (14), -0.02812 (14), -0.02808 (14), -0.02777 (14), 
Length of domains: 195627
Time: pickout 0.6112    decision 4.8390    set_bounds 3.4978    solve 5.3643    add 0.1956    
Accumulated time: pickout 5.7901    decision 45.4449    set_bounds 31.1107    solve 82.7378    add 2.4403    
Current (lb-rhs): -0.029598236083984375
589817 domains visited
Cumulative time: 169.35372018814087

BaB round 21
batch: 32768
splitting decisions: 
split level 0: [/input-8, 1329] [/input, 1001] [/input, 1001] [/input, 1017] [/input, 1017] [/input-8, 1326] [/input, 1017] [/input-8, 1329] [/input-8, 1329] [/input-8, 1329] 
pruning_in_iteration open status: True
ratio of positive domain = 18634 / 65536 = 0.284332275390625
pruning-in-iteration extra time: 0.005821943283081055
Time: prepare 1.5712    bound 2.6976    transfer 0.6127    finalize 0.4476    func 5.3323    
Accumulated time: func 86.7061    prepare 19.5682    bound 49.7613    transfer 7.6819    finalize 9.6516    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02960 (14), -0.02958 (14), -0.02929 (14), -0.02926 (14), -0.02925 (14), -0.02923 (14), -0.02894 (14), -0.02891 (14), -0.02883 (14), -0.02881 (14), -0.02852 (14), -0.02850 (14), -0.02850 (14), -0.02848 (14), -0.02840 (14), -0.02821 (14), -0.02817 (14), -0.02812 (14), -0.02808 (14), -0.02777 (14), 
Length of domains: 209761
Time: pickout 0.6098    decision 3.4455    set_bounds 3.7055    solve 5.3537    add 0.1775    
Accumulated time: pickout 6.3999    decision 48.8903    set_bounds 34.8163    solve 88.0915    add 2.6179    
Current (lb-rhs): -0.029598236083984375
636719 domains visited
Cumulative time: 182.86361241340637

BaB round 22
batch: 32768
splitting decisions: 
split level 0: [/input, 1001] [/input, 939] [/input, 939] [/input, 939] [/input, 939] [/input, 2025] [/input, 2025] [/input, 939] [/input, 924] [/input, 924] 
pruning_in_iteration open status: True
ratio of positive domain = 22403 / 65536 = 0.3418426513671875
pruning-in-iteration extra time: 0.00571751594543457
Time: prepare 1.5647    bound 2.5587    transfer 0.6213    finalize 2.3879    func 7.1354    
Accumulated time: func 93.8415    prepare 21.1334    bound 52.3201    transfer 8.3033    finalize 12.0395    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02960 (14), -0.02958 (14), -0.02929 (14), -0.02926 (14), -0.02925 (14), -0.02923 (14), -0.02894 (14), -0.02891 (14), -0.02883 (14), -0.02881 (14), -0.02852 (14), -0.02850 (14), -0.02850 (14), -0.02848 (14), -0.02840 (14), -0.02821 (14), -0.02817 (14), -0.02812 (14), -0.02808 (14), -0.02777 (14), 
Length of domains: 220126
Time: pickout 0.6207    decision 5.1371    set_bounds 1.7248    solve 7.1622    add 0.2357    
Accumulated time: pickout 7.0206    decision 54.0274    set_bounds 36.5410    solve 95.2537    add 2.8536    
Current (lb-rhs): -0.029598236083984375
679852 domains visited
Cumulative time: 197.93993711471558

BaB round 23
batch: 32768
splitting decisions: 
split level 0: [/input, 566] [/input, 566] [/input-8, 60] [/input, 566] [/input-8, 1313] [/input-8, 60] [/input, 939] [/input-8, 1313] [/input-8, 1313] [/input-8, 60] 
pruning_in_iteration open status: True
ratio of positive domain = 25408 / 65536 = 0.3876953125
pruning-in-iteration extra time: 0.005934000015258789
Time: prepare 1.5506    bound 2.4489    transfer 0.6304    finalize 0.4741    func 5.1077    
Accumulated time: func 98.9492    prepare 22.6845    bound 54.7689    transfer 8.9336    finalize 12.5136    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02960 (14), -0.02958 (14), -0.02929 (14), -0.02926 (14), -0.02925 (14), -0.02923 (14), -0.02894 (14), -0.02891 (14), -0.02883 (14), -0.02881 (14), -0.02852 (14), -0.02850 (14), -0.02850 (14), -0.02848 (14), -0.02840 (14), -0.02821 (14), -0.02817 (14), -0.02812 (14), -0.02808 (14), -0.02777 (14), 
Length of domains: 227486
Time: pickout 0.5881    decision 3.4353    set_bounds 4.1641    solve 5.1279    add 0.1485    
Accumulated time: pickout 7.6086    decision 57.4627    set_bounds 40.7051    solve 100.3816    add 3.0021    
Current (lb-rhs): -0.029598236083984375
719980 domains visited
Time out!!!!!!!!
Result: unknown in 214.5667 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 179, vnnlib ID: 179 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.81497240, -9.61914158, -4.37678957, -7.16895294, -6.05048847,
         -7.32035542, -8.58375645, -7.87642765, -5.33914280, -9.25911236]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [423]; unstable size 423; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 423] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 423] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 423] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 139] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.06378555, 1.32269335, 4.03046036, 2.94304752, 4.17913628, 5.32646465,
         4.62639809, 2.15443397, 5.73307467]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0486 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 180, vnnlib ID: 180 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.18043327, -9.67250061, -4.03554153, -4.66885376, -3.01946378,
         -4.69520569, -4.94520855, -1.53955245, -9.21621990, -7.85623407]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [585]; unstable size 585; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 585] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 585] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 585] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 188] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.87333918, 7.17064381, 1.94768238, 2.44880009, 1.09218788, 2.47986412,
         2.62327290, 6.51520348, 5.40360260]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0678 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 181, vnnlib ID: 181 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.40926981, -6.67170429, -3.99747753, -5.40308666, -3.89843845,
         -5.54740763, -3.71680188, -6.10181046, -6.27677917, -6.86830425]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [497]; unstable size 497; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 497] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 497] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 497] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 148] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.14809752,  2.07557392,  0.01328361,  1.37565887, -0.08653343,
          1.50969958,  1.94958782,  1.83056569,  2.30023479]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.40926981, -6.67170429, -3.99747753, -5.40308666, -3.89843845,
         -5.54740763, -3.71680188, -6.10181046, -6.27677917, -6.86830425]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.13it/s]100%|██████████| 1/1 [00:00<00:00,  9.12it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.12310123, -6.43147659, -3.69320679, -5.09748745, -3.54227424,
          -5.23913240, -3.53681922, -5.74136019, -5.95448112, -6.58602953]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00545502]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1125 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.484090805053711
alpha/beta optimization time: 1.1214759349822998
initial alpha-crown bounds: tensor([[ 2.17381620,  2.11342812,  0.04474735,  1.40611637, -0.02632678,
          1.54144168,  2.00770712,  1.88426256,  2.33889866]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.026326775550842285
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.71030521392822
Verifying property 0 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.173816204071045.

Properties batch 1, size 1
Remaining timeout: 198.5466296672821
Verifying property 1 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.1134281158447266.

Properties batch 2, size 1
Remaining timeout: 198.43275499343872
Verifying property 2 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.044747352600097656.

Properties batch 3, size 1
Remaining timeout: 198.3266565799713
Verifying property 3 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.4061163663864136.

Properties batch 4, size 1
Remaining timeout: 198.22080516815186
Verifying property 4 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02632678]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.40926981, -6.67170429, -3.99747753, -5.40308666, -3.89843845,
        -5.54740763, -3.71680188, -6.10181046, -6.27677917, -6.86830425],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02632678]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 497
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 146
Node /15 input 0: size torch.Size([100]) unstable 5
-----------------
# of unstable neurons: 648
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-8, 1445] 
split level 2: [/input-8, 1241] 
split level 3: [/input-8, 1170] 
split level 4: [/input-8, 918] 
split level 5: [/input-8, 1249] 
split level 6: [/input-8, 113] 
split level 7: [/input-8, 1098] 
pruning_in_iteration open status: True
ratio of positive domain = 128 / 256 = 0.5
pruning-in-iteration extra time: 0.005065202713012695
Time: prepare 0.0031    bound 0.1082    transfer 0.0012    finalize 0.0017    func 0.1143    
Accumulated time: func 0.1143    prepare 0.0035    bound 0.1082    transfer 0.0012    finalize 0.0017    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01664 (8), -0.01654 (8), -0.01639 (8), -0.01629 (8), -0.01625 (8), -0.01615 (8), -0.01601 (8), -0.01600 (8), -0.01590 (8), -0.01590 (8), -0.01576 (8), -0.01566 (8), -0.01562 (8), -0.01552 (8), -0.01537 (8), -0.01527 (8), -0.01498 (8), -0.01488 (8), -0.01464 (8), -0.01458 (8), 
Length of domains: 128
Time: pickout 0.0004    decision 0.0231    set_bounds 0.0183    solve 0.1143    add 0.0095    
Accumulated time: pickout 0.0004    decision 0.0231    set_bounds 0.0183    solve 0.1143    add 0.0095    
Current (lb-rhs): -0.01663804054260254
128 domains visited
Cumulative time: 0.17189407348632812

BaB round 2
batch: 128
splitting decisions: 
split level 0: [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 256 = 0.0
pruning-in-iteration extra time: 4.887580871582031e-05
Time: prepare 0.0050    bound 0.0901    transfer 0.0007    finalize 0.0013    func 0.0971    
Accumulated time: func 0.2114    prepare 0.0087    bound 0.1983    transfer 0.0019    finalize 0.0029    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01595 (9), -0.01588 (9), -0.01570 (9), -0.01563 (9), -0.01558 (9), -0.01550 (9), -0.01533 (9), -0.01530 (9), -0.01525 (9), -0.01524 (9), -0.01523 (9), -0.01506 (9), -0.01499 (9), -0.01499 (9), -0.01493 (9), -0.01488 (9), -0.01486 (9), -0.01486 (9), -0.01468 (9), -0.01463 (9), 
Length of domains: 256
Time: pickout 0.0019    decision 0.0157    set_bounds 0.0059    solve 0.0972    add 0.0016    
Accumulated time: pickout 0.0023    decision 0.0388    set_bounds 0.0242    solve 0.2115    add 0.0111    
Current (lb-rhs): -0.015951037406921387
384 domains visited
Cumulative time: 0.294492244720459

BaB round 3
batch: 256
splitting decisions: 
split level 0: [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 512 = 0.0
pruning-in-iteration extra time: 4.982948303222656e-05
Time: prepare 0.0098    bound 0.0921    transfer 0.0047    finalize 0.0025    func 0.1093    
Accumulated time: func 0.3207    prepare 0.0188    bound 0.2904    transfer 0.0066    finalize 0.0054    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01547 (10), -0.01539 (10), -0.01521 (10), -0.01514 (10), -0.01509 (10), -0.01501 (10), -0.01484 (10), -0.01481 (10), -0.01476 (10), -0.01473 (10), -0.01471 (10), -0.01455 (10), -0.01448 (10), -0.01447 (10), -0.01444 (10), -0.01435 (10), -0.01434 (10), -0.01428 (10), -0.01418 (10), -0.01411 (10), 
Length of domains: 512
Time: pickout 0.0030    decision 0.0222    set_bounds 0.0118    solve 0.1094    add 0.0182    
Accumulated time: pickout 0.0053    decision 0.0610    set_bounds 0.0359    solve 0.3209    add 0.0293    
Current (lb-rhs): -0.015466809272766113
896 domains visited
Cumulative time: 0.4595649242401123

BaB round 4
batch: 512
splitting decisions: 
split level 0: [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] 
pruning_in_iteration open status: False
ratio of positive domain = 13 / 1024 = 0.0126953125
pruning-in-iteration extra time: 5.6743621826171875e-05
Time: prepare 0.0218    bound 0.0977    transfer 0.0049    finalize 0.0053    func 0.1298    
Accumulated time: func 0.4505    prepare 0.0409    bound 0.3881    transfer 0.0115    finalize 0.0108    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01493 (11), -0.01484 (11), -0.01467 (11), -0.01459 (11), -0.01455 (11), -0.01447 (11), -0.01431 (11), -0.01426 (11), -0.01422 (11), -0.01420 (11), -0.01416 (11), -0.01400 (11), -0.01394 (11), -0.01391 (11), -0.01388 (11), -0.01383 (11), -0.01380 (11), -0.01371 (11), -0.01364 (11), -0.01358 (11), 
Length of domains: 1007
Time: pickout 0.0061    decision 0.0366    set_bounds 0.0201    solve 0.1307    add 0.0137    
Accumulated time: pickout 0.0115    decision 0.0977    set_bounds 0.0561    solve 0.4516    add 0.0430    
Current (lb-rhs): -0.01492762565612793
1903 domains visited
Cumulative time: 0.6677467823028564

BaB round 5
batch: 1007
splitting decisions: 
split level 0: [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] 
pruning_in_iteration open status: False
ratio of positive domain = 107 / 2014 = 0.05312810327706052
pruning-in-iteration extra time: 5.7220458984375e-05
Time: prepare 0.0507    bound 0.1293    transfer 0.0162    finalize 0.0129    func 0.2092    
Accumulated time: func 0.6597    prepare 0.0918    bound 0.5174    transfer 0.0277    finalize 0.0236    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01456 (12), -0.01447 (12), -0.01431 (12), -0.01421 (12), -0.01419 (12), -0.01410 (12), -0.01394 (12), -0.01389 (12), -0.01385 (12), -0.01383 (12), -0.01379 (12), -0.01363 (12), -0.01356 (12), -0.01354 (12), -0.01354 (12), -0.01347 (12), -0.01344 (12), -0.01332 (12), -0.01327 (12), -0.01321 (12), 
Length of domains: 1898
Time: pickout 0.0126    decision 0.0735    set_bounds 0.0238    solve 0.2096    add 0.0155    
Accumulated time: pickout 0.0240    decision 0.1712    set_bounds 0.0798    solve 0.6612    add 0.0585    
Current (lb-rhs): -0.014562726020812988
3801 domains visited
Cumulative time: 1.005124568939209

BaB round 6
batch: 1898
splitting decisions: 
split level 0: [/input-8, 1099] [/input-8, 1438] [/input-8, 1099] [/input-8, 1438] [/input-8, 1099] [/input-8, 1438] [/input-8, 1099] [/input-8, 1438] [/input-8, 1099] [/input-8, 1438] 
pruning_in_iteration open status: False
ratio of positive domain = 611 / 3796 = 0.16095890410958902
pruning-in-iteration extra time: 6.270408630371094e-05
Time: prepare 0.0947    bound 0.1980    transfer 0.0374    finalize 0.1839    func 0.5152    
Accumulated time: func 1.1749    prepare 0.1867    bound 0.7154    transfer 0.0651    finalize 0.2075    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01424 (13), -0.01416 (13), -0.01398 (13), -0.01391 (13), -0.01387 (13), -0.01379 (13), -0.01361 (13), -0.01357 (13), -0.01355 (13), -0.01349 (13), -0.01345 (13), -0.01331 (13), -0.01324 (13), -0.01320 (13), -0.01319 (13), -0.01312 (13), -0.01309 (13), -0.01300 (13), -0.01295 (13), -0.01288 (13), 
Length of domains: 3151
Time: pickout 0.0304    decision 0.1211    set_bounds 0.0781    solve 0.5159    add 0.0268    
Accumulated time: pickout 0.0545    decision 0.2923    set_bounds 0.1580    solve 1.1771    add 0.0853    
Current (lb-rhs): -0.014235377311706543
6952 domains visited
Cumulative time: 1.7832999229431152

BaB round 7
batch: 3151
splitting decisions: 
split level 0: [/input-8, 1233] [/input-8, 1180] [/input-8, 1233] [/input-8, 1099] [/input-8, 1236] [/input-8, 1180] [/input-8, 1236] [/input-8, 1099] [/input-8, 1233] [/input-8, 1180] 
pruning_in_iteration open status: True
ratio of positive domain = 1561 / 6302 = 0.2476991431291653
pruning-in-iteration extra time: 0.00426483154296875
Time: prepare 0.1615    bound 0.3437    transfer 0.0330    finalize 0.0364    func 0.5758    
Accumulated time: func 1.7507    prepare 0.3485    bound 1.0591    transfer 0.0981    finalize 0.2439    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01389 (14), -0.01381 (14), -0.01369 (14), -0.01362 (14), -0.01352 (14), -0.01345 (14), -0.01333 (14), -0.01326 (14), -0.01322 (14), -0.01313 (14), -0.01311 (14), -0.01302 (14), -0.01295 (14), -0.01291 (14), -0.01286 (14), -0.01278 (14), -0.01274 (14), -0.01268 (14), -0.01260 (14), -0.01260 (14), 
Length of domains: 4741
Time: pickout 0.0466    decision 0.1912    set_bounds 0.1316    solve 0.5771    add 0.0210    
Accumulated time: pickout 0.1011    decision 0.4835    set_bounds 0.2896    solve 1.7542    add 0.1063    
Current (lb-rhs): -0.013891339302062988
11693 domains visited
Cumulative time: 2.760956048965454

BaB round 8
batch: 4096
splitting decisions: 
split level 0: [/input-8, 1236] [/input-8, 1180] [/input-8, 1233] [/input-8, 1233] [/input-8, 1180] [/input-8, 1236] [/input-8, 1236] [/input-8, 1233] [/input-8, 1233] [/input-8, 1438] 
pruning_in_iteration open status: True
ratio of positive domain = 2584 / 8192 = 0.3154296875
pruning-in-iteration extra time: 0.004388332366943359
Time: prepare 0.2131    bound 0.3709    transfer 0.0469    finalize 0.0489    func 0.6811    
Accumulated time: func 2.4318    prepare 0.5618    bound 1.4299    transfer 0.1450    finalize 0.2928    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01389 (14), -0.01381 (14), -0.01369 (14), -0.01362 (14), -0.01352 (14), -0.01345 (14), -0.01333 (14), -0.01326 (14), -0.01322 (14), -0.01313 (14), -0.01311 (14), -0.01302 (14), -0.01295 (14), -0.01291 (14), -0.01286 (14), -0.01278 (14), -0.01274 (14), -0.01268 (14), -0.01260 (14), -0.01255 (14), 
Length of domains: 6253
Time: pickout 0.0554    decision 0.4048    set_bounds 0.1751    solve 0.6826    add 0.0285    
Accumulated time: pickout 0.1565    decision 0.8883    set_bounds 0.4647    solve 2.4369    add 0.1348    
Current (lb-rhs): -0.013891339302062988
17301 domains visited
current_vram/total_varm: 28.1GB/99.9GB, batch_size increase to 8192
Cumulative time: 4.1248862743377686

BaB round 9
batch: 6253
splitting decisions: 
split level 0: [/input-8, 1099] [/input-8, 1438] [/input-8, 1233] [/input-8, 1233] [/input-8, 1233] [/input-8, 1180] [/input-8, 1099] [/input-8, 1438] [/input-8, 1180] [/input-8, 1233] 
pruning_in_iteration open status: True
ratio of positive domain = 4384 / 12506 = 0.3505517351671198
pruning-in-iteration extra time: 0.004778385162353516
Time: prepare 0.3242    bound 0.4767    transfer 0.0614    finalize 0.2515    func 1.1155    
Accumulated time: func 3.5473    prepare 0.8863    bound 1.9066    transfer 0.2064    finalize 0.5443    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01352 (15), -0.01343 (15), -0.01333 (15), -0.01324 (15), -0.01316 (15), -0.01308 (15), -0.01296 (15), -0.01288 (15), -0.01284 (15), -0.01276 (15), -0.01273 (15), -0.01265 (15), -0.01257 (15), -0.01253 (15), -0.01249 (15), -0.01241 (15), -0.01236 (15), -0.01230 (15), -0.01221 (15), -0.01217 (15), 
Length of domains: 8122
Time: pickout 0.0846    decision 0.5064    set_bounds 0.2723    solve 1.1180    add 0.0285    
Accumulated time: pickout 0.2411    decision 1.3948    set_bounds 0.7370    solve 3.5548    add 0.1633    
Current (lb-rhs): -0.013520479202270508
25423 domains visited
Cumulative time: 6.16218900680542

BaB round 10
batch: 8122
splitting decisions: 
split level 0: [/input-8, 1233] [/input-8, 1236] [/input-8, 1180] [/input-8, 1233] [/input-8, 1233] [/input-8, 1236] [/input-8, 1233] [/input-8, 1233] [/input-8, 1233] [/input-8, 1236] 
pruning_in_iteration open status: True
ratio of positive domain = 5409 / 16244 = 0.3329844865796602
pruning-in-iteration extra time: 0.004766941070556641
Time: prepare 0.4277    bound 0.6004    transfer 0.0936    finalize 0.0868    func 1.3810    
Accumulated time: func 4.9283    prepare 1.3143    bound 2.5070    transfer 0.3000    finalize 0.6311    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01301 (16), -0.01292 (16), -0.01283 (16), -0.01283 (16), -0.01275 (16), -0.01275 (16), -0.01264 (16), -0.01240 (16), -0.01233 (16), -0.01225 (16), -0.01222 (16), -0.01221 (16), -0.01216 (16), -0.01207 (16), -0.01204 (16), -0.01203 (16), -0.01190 (16), -0.01187 (16), -0.01185 (16), -0.01181 (16), 
Length of domains: 10835
Time: pickout 0.1109    decision 0.4658    set_bounds 0.5089    solve 1.3848    add 0.0521    
Accumulated time: pickout 0.3520    decision 1.8606    set_bounds 1.2459    solve 4.9396    add 0.2154    
Current (lb-rhs): -0.013007283210754395
36258 domains visited
Cumulative time: 8.719137191772461

BaB round 11
batch: 8192
splitting decisions: 
split level 0: [/input-8, 354] [/input-8, 930] [/input-8, 147] [/input-8, 229] [/input-8, 354] [/input-8, 1233] [/input, 2641] [/input-8, 354] [/input-8, 354] [/input-8, 1233] 
pruning_in_iteration open status: True
ratio of positive domain = 4924 / 16384 = 0.300537109375
pruning-in-iteration extra time: 0.0045320987701416016
Time: prepare 0.4281    bound 0.6300    transfer 0.0906    finalize 0.0959    func 1.2464    
Accumulated time: func 6.1747    prepare 1.7427    bound 3.1369    transfer 0.3907    finalize 0.7269    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01270 (17), -0.01261 (17), -0.01253 (17), -0.01252 (17), -0.01245 (17), -0.01244 (17), -0.01215 (17), -0.01209 (17), -0.01205 (17), -0.01197 (17), -0.01188 (17), -0.01188 (17), -0.01187 (16), -0.01179 (17), -0.01178 (16), -0.01174 (17), -0.01171 (17), -0.01171 (17), -0.01163 (17), -0.01159 (16), 
Length of domains: 14103
Time: pickout 0.1147    decision 0.4631    set_bounds 0.5374    solve 1.2501    add 0.0448    
Accumulated time: pickout 0.4668    decision 2.3237    set_bounds 1.7833    solve 6.1897    add 0.2602    
Current (lb-rhs): -0.012700796127319336
47718 domains visited
current_vram/total_varm: 43.6GB/99.9GB, batch_size increase to 16384
Cumulative time: 11.162244081497192

BaB round 12
batch: 14103
splitting decisions: 
split level 0: [/input-8, 1180] [/input, 2641] [/input-8, 1180] [/input-8, 1236] [/input-8, 1180] [/input-8, 1236] [/input-8, 1180] [/input-8, 1236] [/input-8, 1233] [/input-8, 1180] 
pruning_in_iteration open status: True
ratio of positive domain = 9441 / 28206 = 0.33471601786853866
pruning-in-iteration extra time: 0.004967212677001953
Time: prepare 0.7360    bound 0.9708    transfer 0.2061    finalize 0.3653    func 2.2807    
Accumulated time: func 8.4554    prepare 2.4791    bound 4.1077    transfer 0.5968    finalize 1.0922    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01237 (18), -0.01229 (18), -0.01220 (18), -0.01212 (18), -0.01201 (18), -0.01193 (18), -0.01185 (18), -0.01177 (18), -0.01158 (18), -0.01155 (17), -0.01155 (18), -0.01148 (17), -0.01139 (18), -0.01139 (18), -0.01137 (18), -0.01130 (18), -0.01128 (17), -0.01128 (18), -0.01122 (18), -0.01120 (18), 
Length of domains: 18765
Time: pickout 0.1962    decision 1.0305    set_bounds 0.8039    solve 2.2865    add 0.0611    
Accumulated time: pickout 0.6629    decision 3.3542    set_bounds 2.5872    solve 8.4762    add 0.3213    
Current (lb-rhs): -0.01237499713897705
66483 domains visited
Cumulative time: 15.607454776763916

BaB round 13
batch: 16384
splitting decisions: 
split level 0: [/input-8, 229] [/input-8, 229] [/input-8, 229] [/input-8, 229] [/input-8, 354] [/input-8, 229] [/input-8, 229] [/input-8, 229] [/input-8, 229] [/input-8, 930] 
pruning_in_iteration open status: True
ratio of positive domain = 11155 / 32768 = 0.340423583984375
pruning-in-iteration extra time: 0.0049936771392822266
Time: prepare 0.8614    bound 1.1051    transfer 0.2532    finalize 0.4261    func 2.6489    
Accumulated time: func 11.1043    prepare 3.3409    bound 5.2128    transfer 0.8500    finalize 1.5183    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01171 (19), -0.01162 (19), -0.01152 (19), -0.01144 (19), -0.01135 (19), -0.01129 (19), -0.01127 (19), -0.01119 (19), -0.01118 (19), -0.01116 (19), -0.01109 (19), -0.01108 (19), -0.01105 (19), -0.01096 (19), -0.01093 (19), -0.01093 (19), -0.01088 (18), -0.01086 (19), -0.01085 (19), -0.01083 (19), 
Length of domains: 23994
Time: pickout 0.2379    decision 1.6661    set_bounds 0.9659    solve 2.6554    add 0.0686    
Accumulated time: pickout 0.9008    decision 5.0203    set_bounds 3.5531    solve 11.1315    add 0.3898    
Current (lb-rhs): -0.011707663536071777
88096 domains visited
Cumulative time: 21.27962303161621

BaB round 14
batch: 16384
splitting decisions: 
split level 0: [/input-8, 817] [/input-8, 754] [/input-8, 817] [/input-8, 229] [/input-8, 817] [/input-8, 754] [/input-8, 229] [/input-8, 754] [/input-8, 817] [/input-8, 754] 
pruning_in_iteration open status: True
ratio of positive domain = 12201 / 32768 = 0.372344970703125
pruning-in-iteration extra time: 0.00527644157409668
Time: prepare 0.8460    bound 1.0540    transfer 0.2560    finalize 0.4995    func 2.6579    
Accumulated time: func 13.7622    prepare 4.1872    bound 6.2669    transfer 1.1060    finalize 2.0178    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01096 (20), -0.01089 (20), -0.01088 (18), -0.01087 (20), -0.01082 (20), -0.01079 (18), -0.01077 (20), -0.01074 (20), -0.01072 (20), -0.01067 (20), -0.01065 (20), -0.01064 (20), -0.01061 (20), -0.01059 (18), -0.01059 (20), -0.01056 (20), -0.01053 (20), 
Length of domains: 28177
Time: pickout 0.2512    decision 1.6757    set_bounds 0.9840    solve 2.6647    add 0.0704    
Accumulated time: pickout 1.1520    decision 6.6960    set_bounds 4.5371    solve 13.7962    add 0.4602    
Current (lb-rhs): -0.011157631874084473
108663 domains visited
Cumulative time: 27.005821228027344

BaB round 15
batch: 16384
splitting decisions: 
split level 0: [/input-8, 354] [/input-8, 754] [/input-8, 754] [/input-8, 354] [/input-8, 354] [/input-8, 754] [/input-8, 354] [/input-8, 354] [/input-8, 229] [/input-8, 147] 
pruning_in_iteration open status: True
ratio of positive domain = 13852 / 32768 = 0.4227294921875
pruning-in-iteration extra time: 0.005192756652832031
Time: prepare 0.8688    bound 0.9903    transfer 0.2569    finalize 0.4784    func 2.5968    
Accumulated time: func 16.3590    prepare 5.0564    bound 7.2572    transfer 1.3628    finalize 2.4962    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01058 (21), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01048 (21), -0.01042 (20), -0.01039 (21), -0.01039 (20), -0.01033 (21), -0.01031 (20), 
Length of domains: 30709
Time: pickout 0.2480    decision 1.9423    set_bounds 0.7421    solve 2.6042    add 0.0618    
Accumulated time: pickout 1.4000    decision 8.6383    set_bounds 5.2792    solve 16.4003    add 0.5220    
Current (lb-rhs): -0.011157631874084473
127579 domains visited
Cumulative time: 32.6890435218811

BaB round 16
batch: 16384
splitting decisions: 
split level 0: [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] 
pruning_in_iteration open status: True
ratio of positive domain = 11461 / 32768 = 0.349761962890625
pruning-in-iteration extra time: 0.005267620086669922
Time: prepare 0.8619    bound 1.0824    transfer 0.2527    finalize 0.1864    func 2.3851    
Accumulated time: func 18.7441    prepare 5.9186    bound 8.3396    transfer 1.6155    finalize 2.6826    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 35632
Time: pickout 0.2588    decision 1.7531    set_bounds 1.0635    solve 2.3921    add 0.0980    
Accumulated time: pickout 1.6588    decision 10.3914    set_bounds 6.3428    solve 18.7924    add 0.6200    
Current (lb-rhs): -0.011157631874084473
148886 domains visited
Cumulative time: 38.33879733085632

BaB round 17
batch: 16384
splitting decisions: 
split level 0: [/input, 2217] [/input, 2217] [/input-8, 819] [/input, 2217] [/input, 2217] [/input, 2217] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input, 2217] 
pruning_in_iteration open status: True
ratio of positive domain = 9118 / 32768 = 0.27825927734375
pruning-in-iteration extra time: 0.005303621292114258
Time: prepare 0.8647    bound 1.1656    transfer 0.2559    finalize 0.5520    func 2.8412    
Accumulated time: func 21.5853    prepare 6.7838    bound 9.5052    transfer 1.8714    finalize 3.2345    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 42898
Time: pickout 0.2628    decision 1.9722    set_bounds 1.0601    solve 2.8486    add 0.0761    
Accumulated time: pickout 1.9216    decision 12.3636    set_bounds 7.4029    solve 21.6411    add 0.6962    
Current (lb-rhs): -0.011157631874084473
172536 domains visited
Cumulative time: 44.63875913619995

BaB round 18
batch: 16384
splitting decisions: 
split level 0: [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 754] [/input, 2217] [/input, 2217] [/input, 2217] [/input-8, 754] [/input-8, 819] [/input-8, 819] 
pruning_in_iteration open status: True
ratio of positive domain = 8767 / 32768 = 0.267547607421875
pruning-in-iteration extra time: 0.005295753479003906
Time: prepare 0.8638    bound 1.1794    transfer 0.2557    finalize 0.5957    func 2.8967    
Accumulated time: func 24.4821    prepare 7.6479    bound 10.6846    transfer 2.1271    finalize 3.8302    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 50515
Time: pickout 0.2652    decision 1.8221    set_bounds 0.7591    solve 2.9047    add 0.0868    
Accumulated time: pickout 2.1868    decision 14.1857    set_bounds 8.1620    solve 24.5457    add 0.7830    
Current (lb-rhs): -0.011157631874084473
196537 domains visited
Cumulative time: 50.54548096656799

BaB round 19
batch: 16384
splitting decisions: 
split level 0: [/input-8, 789] [/input-8, 789] [/input-8, 754] [/input-8, 789] [/input-8, 819] [/input-8, 789] [/input, 2217] [/input-8, 754] [/input-8, 789] [/input-8, 789] 
pruning_in_iteration open status: True
ratio of positive domain = 9715 / 32768 = 0.296478271484375
pruning-in-iteration extra time: 0.005198478698730469
Time: prepare 0.8769    bound 1.1460    transfer 0.2555    finalize 0.6398    func 2.9206    
Accumulated time: func 27.4027    prepare 8.5252    bound 11.8305    transfer 2.3826    finalize 4.4701    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 57184
Time: pickout 0.2751    decision 1.8831    set_bounds 0.7519    solve 2.9283    add 0.0702    
Accumulated time: pickout 2.4619    decision 16.0688    set_bounds 8.9139    solve 27.4741    add 0.8531    
Current (lb-rhs): -0.011157631874084473
219590 domains visited
Cumulative time: 56.525036573410034

BaB round 20
batch: 16384
splitting decisions: 
split level 0: [/input-8, 819] [/input-8, 789] [/input-8, 789] [/input-8, 789] [/input-8, 789] [/input-8, 789] [/input-8, 789] [/input-8, 789] [/input-8, 789] [/input-8, 789] 
pruning_in_iteration open status: True
ratio of positive domain = 12841 / 32768 = 0.391876220703125
pruning-in-iteration extra time: 0.005206108093261719
Time: prepare 0.8803    bound 1.0353    transfer 0.2552    finalize 0.6948    func 2.8674    
Accumulated time: func 30.2701    prepare 9.4058    bound 12.8658    transfer 2.6378    finalize 5.1648    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 60727
Time: pickout 0.2842    decision 1.9275    set_bounds 0.7586    solve 2.8750    add 0.0648    
Accumulated time: pickout 2.7461    decision 17.9963    set_bounds 9.6724    solve 30.3491    add 0.9180    
Current (lb-rhs): -0.011157631874084473
239517 domains visited
Cumulative time: 62.51962327957153

BaB round 21
batch: 16384
splitting decisions: 
split level 0: [/input-8, 789] [/input-8, 1331] [/input-8, 1331] [/input-8, 1331] [/input-8, 1331] [/input-8, 1331] [/input-8, 1331] [/input-8, 1331] [/input-8, 1331] [/input-8, 1331] 
pruning_in_iteration open status: True
ratio of positive domain = 15058 / 32768 = 0.45953369140625
pruning-in-iteration extra time: 0.005397319793701172
Time: prepare 0.8790    bound 0.9450    transfer 0.2535    finalize 0.2054    func 2.2855    
Accumulated time: func 32.5556    prepare 10.2852    bound 13.8108    transfer 2.8913    finalize 5.3702    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 62053
Time: pickout 0.2868    decision 1.6768    set_bounds 1.2680    solve 2.8353    add 0.0569    
Accumulated time: pickout 3.0328    decision 19.6730    set_bounds 10.9404    solve 33.1843    add 0.9749    
Current (lb-rhs): -0.011157631874084473
257227 domains visited
Cumulative time: 68.74795007705688

BaB round 22
batch: 16384
splitting decisions: 
split level 0: [/input-8, 1573] [/input-8, 1573] [/input-8, 1573] [/input, 2253] [/input, 2253] [/input-8, 1573] [/input-8, 1573] [/input-8, 1573] [/input-8, 812] [/input-8, 1573] 
pruning_in_iteration open status: True
ratio of positive domain = 13460 / 32768 = 0.4107666015625
pruning-in-iteration extra time: 0.005221366882324219
Time: prepare 0.8815    bound 1.0053    transfer 0.2536    finalize 0.2088    func 2.3513    
Accumulated time: func 34.9068    prepare 11.1671    bound 14.8161    transfer 3.1449    finalize 5.5790    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 64977
Time: pickout 0.2951    decision 1.6705    set_bounds 1.3397    solve 2.3587    add 0.0598    
Accumulated time: pickout 3.3280    decision 21.3436    set_bounds 12.2801    solve 35.5430    add 1.0347    
Current (lb-rhs): -0.011157631874084473
276535 domains visited
Cumulative time: 74.57788038253784

BaB round 23
batch: 16384
splitting decisions: 
split level 0: [/input-8, 315] [/input-8, 315] [/input-8, 315] [/input-8, 315] [/input-8, 315] [/input-8, 315] [/input-8, 2002] [/input-8, 1331] [/input-8, 1331] [/input, 2217] 
pruning_in_iteration open status: True
ratio of positive domain = 11637 / 32768 = 0.355133056640625
pruning-in-iteration extra time: 0.005302906036376953
Time: prepare 0.8967    bound 1.0756    transfer 0.2541    finalize 0.7888    func 3.0174    
Accumulated time: func 37.9243    prepare 12.0642    bound 15.8918    transfer 3.3990    finalize 6.3678    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 69724
Time: pickout 0.3192    decision 2.0256    set_bounds 0.7688    solve 3.0249    add 0.1591    
Accumulated time: pickout 3.6472    decision 23.3692    set_bounds 13.0489    solve 38.5679    add 1.1938    
Current (lb-rhs): -0.011157631874084473
297666 domains visited
Cumulative time: 80.96190762519836

BaB round 24
batch: 16384
splitting decisions: 
split level 0: [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input, 2253] [/input-8, 812] [/input, 1115] [/input-8, 789] [/input-8, 1573] [/input-8, 812] 
pruning_in_iteration open status: True
ratio of positive domain = 11795 / 32768 = 0.359954833984375
pruning-in-iteration extra time: 0.005390644073486328
Time: prepare 0.9176    bound 1.0756    transfer 0.2567    finalize 0.2189    func 2.4707    
Accumulated time: func 40.3950    prepare 12.9821    bound 16.9674    transfer 3.6557    finalize 6.5867    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 74313
Time: pickout 0.3163    decision 2.3184    set_bounds 0.7624    solve 2.4805    add 0.0712    
Accumulated time: pickout 3.9635    decision 25.6876    set_bounds 13.8113    solve 41.0485    add 1.2650    
Current (lb-rhs): -0.011157631874084473
318639 domains visited
Cumulative time: 87.00048422813416

BaB round 25
batch: 16384
splitting decisions: 
split level 0: [/input-8, 2002] [/input-8, 315] [/input-8, 2002] [/input, 2253] [/input-8, 315] [/input-8, 315] [/input-8, 2002] [/input-8, 812] [/input, 2253] [/input, 2253] 
pruning_in_iteration open status: True
ratio of positive domain = 12835 / 32768 = 0.391693115234375
pruning-in-iteration extra time: 0.005328655242919922
Time: prepare 0.9113    bound 1.0343    transfer 0.2567    finalize 0.2208    func 2.4256    
Accumulated time: func 42.8206    prepare 13.8938    bound 18.0016    transfer 3.9124    finalize 6.8075    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 77862
Time: pickout 0.3242    decision 2.3422    set_bounds 1.3870    solve 2.4346    add 0.0713    
Accumulated time: pickout 4.2878    decision 28.0298    set_bounds 15.1983    solve 43.4831    add 1.3363    
Current (lb-rhs): -0.011157631874084473
338572 domains visited
Cumulative time: 93.64972424507141

BaB round 26
batch: 16384
splitting decisions: 
split level 0: [/input, 2253] [/input, 2253] [/input-8, 315] [/input-8, 757] [/input-8, 315] [/input-8, 2002] [/input-8, 315] [/input-8, 315] [/input-8, 2002] [/input-8, 812] 
pruning_in_iteration open status: True
ratio of positive domain = 13621 / 32768 = 0.415679931640625
pruning-in-iteration extra time: 0.00537872314453125
Time: prepare 0.9150    bound 1.0088    transfer 0.2561    finalize 0.2103    func 2.3921    
Accumulated time: func 45.2126    prepare 14.8092    bound 19.0104    transfer 4.1685    finalize 7.0178    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 80625
Time: pickout 0.3264    decision 2.2110    set_bounds 0.7679    solve 3.1228    add 0.0694    
Accumulated time: pickout 4.6142    decision 30.2408    set_bounds 15.9661    solve 46.6058    add 1.4057    
Current (lb-rhs): -0.011157631874084473
357719 domains visited
Cumulative time: 100.24824690818787

BaB round 27
batch: 16384
splitting decisions: 
split level 0: [/input-8, 315] [/input, 1115] [/input-8, 315] [/input-8, 315] [/input, 1114] [/input-8, 315] [/input-8, 315] [/input-8, 315] [/input-8, 315] [/input-8, 315] 
pruning_in_iteration open status: True
ratio of positive domain = 15399 / 32768 = 0.469940185546875
pruning-in-iteration extra time: 0.0054361820220947266
Time: prepare 0.9275    bound 0.9514    transfer 0.2551    finalize 0.9918    func 3.1279    
Accumulated time: func 48.3406    prepare 15.7371    bound 19.9618    transfer 4.4237    finalize 8.0096    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 81610
Time: pickout 0.3368    decision 1.7006    set_bounds 0.7695    solve 3.1360    add 0.1110    
Accumulated time: pickout 4.9510    decision 31.9413    set_bounds 16.7356    solve 49.7418    add 1.5167    
Current (lb-rhs): -0.011157631874084473
375088 domains visited
Cumulative time: 106.40661549568176

BaB round 28
batch: 16384
splitting decisions: 
split level 0: [/input-8, 315] [/input-8, 757] [/input-8, 748] [/input, 2641] [/input-8, 315] [/input, 2641] [/input, 2253] [/input-8, 748] [/input-8, 748] [/input, 2253] 
pruning_in_iteration open status: True
ratio of positive domain = 15995 / 32768 = 0.488128662109375
pruning-in-iteration extra time: 0.005301952362060547
Time: prepare 0.9318    bound 0.9270    transfer 0.2550    finalize 0.2196    func 2.3356    
Accumulated time: func 50.6762    prepare 16.6693    bound 20.8888    transfer 4.6787    finalize 8.2292    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 81999
Time: pickout 0.3535    decision 1.6921    set_bounds 1.5636    solve 2.3442    add 0.0592    
Accumulated time: pickout 5.3046    decision 33.6334    set_bounds 18.2992    solve 52.0861    add 1.5760    
Current (lb-rhs): -0.011157631874084473
391861 domains visited
Cumulative time: 112.5308187007904

BaB round 29
batch: 16384
splitting decisions: 
split level 0: [/input-8, 748] [/input, 2219] [/input-8, 2002] [/input-8, 315] [/input, 2641] [/input, 2238] [/input-8, 2002] [/input, 2238] [/input, 2641] [/input, 2238] 
pruning_in_iteration open status: True
ratio of positive domain = 15748 / 32768 = 0.4805908203125
pruning-in-iteration extra time: 0.005537509918212891
Time: prepare 0.9505    bound 0.9460    transfer 0.2558    finalize 0.9861    func 3.1416    
Accumulated time: func 53.8178    prepare 17.6202    bound 21.8348    transfer 4.9345    finalize 9.2153    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 82635
Time: pickout 0.3578    decision 2.5077    set_bounds 0.8121    solve 3.1494    add 0.0596    
Accumulated time: pickout 5.6623    decision 36.1411    set_bounds 19.1113    solve 55.2355    add 1.6356    
Current (lb-rhs): -0.011157631874084473
408881 domains visited
Cumulative time: 119.54754829406738

BaB round 30
batch: 16384
splitting decisions: 
split level 0: [/input-8, 748] [/input-8, 748] [/input, 2253] [/input-8, 748] [/input, 1115] [/input-8, 748] [/input, 2641] [/input-8, 748] [/input, 2238] [/input, 2238] 
pruning_in_iteration open status: True
ratio of positive domain = 15971 / 32768 = 0.487396240234375
pruning-in-iteration extra time: 0.005435466766357422
Time: prepare 0.9416    bound 0.9405    transfer 0.2562    finalize 0.2181    func 2.3580    
Accumulated time: func 56.1758    prepare 18.5622    bound 22.7753    transfer 5.1907    finalize 9.4334    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 83048
Time: pickout 0.3548    decision 1.6978    set_bounds 1.6386    solve 2.3662    add 0.0606    
Accumulated time: pickout 6.0172    decision 37.8389    set_bounds 20.7498    solve 57.6016    add 1.6962    
Current (lb-rhs): -0.011157631874084473
425678 domains visited
Cumulative time: 125.79416537284851

BaB round 31
batch: 16384
splitting decisions: 
split level 0: [/input, 2238] [/input, 2219] [/input, 2238] [/input, 2238] [/input, 1115] [/input-8, 748] [/input, 2238] [/input, 2219] [/input, 2219] [/input, 2219] 
pruning_in_iteration open status: True
ratio of positive domain = 15672 / 32768 = 0.478271484375
pruning-in-iteration extra time: 0.005341291427612305
Time: prepare 0.9534    bound 0.9561    transfer 0.2561    finalize 0.2258    func 2.3941    
Accumulated time: func 58.5699    prepare 19.5159    bound 23.7314    transfer 5.4467    finalize 9.6592    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 83760
Time: pickout 0.3708    decision 2.2992    set_bounds 0.8111    solve 3.2042    add 0.0658    
Accumulated time: pickout 6.3880    decision 40.1381    set_bounds 21.5609    solve 60.8058    add 1.7620    
Current (lb-rhs): -0.011157631874084473
442774 domains visited
Cumulative time: 132.67665839195251

BaB round 32
batch: 16384
splitting decisions: 
split level 0: [/input, 2219] [/input-8, 1186] [/input-8, 757] [/input, 2219] [/input-8, 1186] [/input-8, 1186] [/input-8, 1186] [/input-8, 1186] [/input-8, 1186] [/input-8, 1186] 
pruning_in_iteration open status: True
ratio of positive domain = 15836 / 32768 = 0.4832763671875
pruning-in-iteration extra time: 0.005511045455932617
Time: prepare 0.9393    bound 0.9328    transfer 0.2576    finalize 1.0618    func 3.1939    
Accumulated time: func 61.7637    prepare 20.4556    bound 24.6642    transfer 5.7043    finalize 10.7210    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 84308
Time: pickout 0.3699    decision 1.6977    set_bounds 0.8331    solve 3.2020    add 0.0593    
Accumulated time: pickout 6.7579    decision 41.8358    set_bounds 22.3940    solve 64.0078    add 1.8212    
Current (lb-rhs): -0.011157631874084473
459706 domains visited
Cumulative time: 138.97555875778198

BaB round 33
batch: 16384
splitting decisions: 
split level 0: [/input-8, 757] [/input-8, 1186] [/input-8, 1186] [/input-8, 748] [/input, 2219] [/input, 2219] [/input, 2219] [/input, 2219] [/input, 2219] [/input, 2219] 
pruning_in_iteration open status: True
ratio of positive domain = 18627 / 32768 = 0.568450927734375
pruning-in-iteration extra time: 0.0053713321685791016
Time: prepare 0.9389    bound 0.8163    transfer 0.2578    finalize 0.2356    func 2.2515    
Accumulated time: func 64.0152    prepare 21.3949    bound 25.4805    transfer 5.9621    finalize 10.9566    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 82065
Time: pickout 0.3758    decision 1.6979    set_bounds 1.6174    solve 2.2613    add 0.0526    
Accumulated time: pickout 7.1336    decision 43.5337    set_bounds 24.0114    solve 66.2691    add 1.8738    
Current (lb-rhs): -0.011157631874084473
473847 domains visited
Cumulative time: 145.11329412460327

BaB round 34
batch: 16384
splitting decisions: 
split level 0: [/input, 2238] [/input-8, 748] [/input, 2238] [/input-8, 748] [/input, 2238] [/input-8, 748] [/input-8, 748] [/input, 2238] [/input, 2238] [/input, 2238] 
pruning_in_iteration open status: True
ratio of positive domain = 19864 / 32768 = 0.606201171875
pruning-in-iteration extra time: 0.005502939224243164
Time: prepare 0.9363    bound 0.7729    transfer 0.2560    finalize 0.9922    func 2.9595    
Accumulated time: func 66.9747    prepare 22.3316    bound 26.2533    transfer 6.2181    finalize 11.9488    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 78585
Time: pickout 0.3725    decision 2.2860    set_bounds 0.8279    solve 2.9676    add 0.1211    
Accumulated time: pickout 7.5061    decision 45.8197    set_bounds 24.8393    solve 69.2367    add 1.9949    
Current (lb-rhs): -0.011157631874084473
486751 domains visited
Cumulative time: 151.84725666046143

BaB round 35
batch: 16384
splitting decisions: 
split level 0: [/input-8, 315] [/input-8, 315] [/input-8, 315] [/input, 1115] [/input-8, 315] [/input-8, 315] [/input-8, 315] [/input-8, 315] [/input, 1115] [/input, 1115] 
pruning_in_iteration open status: True
ratio of positive domain = 18828 / 32768 = 0.5745849609375
pruning-in-iteration extra time: 0.005381584167480469
Time: prepare 0.9543    bound 0.8076    transfer 0.2556    finalize 0.2265    func 2.2459    
Accumulated time: func 69.2206    prepare 23.2863    bound 27.0609    transfer 6.4737    finalize 12.1752    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 76141
Time: pickout 0.3739    decision 1.6992    set_bounds 1.6597    solve 2.2547    add 0.0653    
Accumulated time: pickout 7.8800    decision 47.5189    set_bounds 26.4990    solve 71.4914    add 2.0602    
Current (lb-rhs): -0.011157631874084473
500691 domains visited
Cumulative time: 158.03983759880066

BaB round 36
batch: 16384
splitting decisions: 
split level 0: [/input, 2641] [/input, 2253] [/input, 2253] [/input-8, 757] [/input-8, 757] [/input-8, 315] [/input, 2641] [/input-8, 315] [/input, 2641] [/input-8, 757] 
pruning_in_iteration open status: True
ratio of positive domain = 17724 / 32768 = 0.5408935546875
pruning-in-iteration extra time: 0.0054700374603271484
Time: prepare 0.9518    bound 0.8503    transfer 0.2597    finalize 0.2276    func 2.2923    
Accumulated time: func 71.5129    prepare 24.2386    bound 27.9113    transfer 6.7334    finalize 12.4028    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 74801
Time: pickout 0.3846    decision 1.7085    set_bounds 1.5582    solve 2.3009    add 0.0928    
Accumulated time: pickout 8.2646    decision 49.2274    set_bounds 28.0573    solve 73.7923    add 2.1530    
Current (lb-rhs): -0.011157631874084473
515735 domains visited
Cumulative time: 164.22536301612854

BaB round 37
batch: 16384
splitting decisions: 
split level 0: [/input, 1115] [/input, 2641] [/input, 2217] [/input-8, 2002] [/input-8, 315] [/input, 2641] [/input, 2253] [/input, 2253] [/input, 2253] [/input, 2217] 
pruning_in_iteration open status: True
ratio of positive domain = 16498 / 32768 = 0.50347900390625
pruning-in-iteration extra time: 0.005330801010131836
Time: prepare 1.6102    bound 0.8990    transfer 0.2632    finalize 0.2372    func 3.0120    
Accumulated time: func 74.5249    prepare 25.8493    bound 28.8102    transfer 6.9965    finalize 12.6400    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 74687
Time: pickout 0.3816    decision 2.4329    set_bounds 0.8204    solve 3.0229    add 0.0567    
Accumulated time: pickout 8.6463    decision 51.6603    set_bounds 28.8776    solve 76.8152    add 2.2097    
Current (lb-rhs): -0.011157631874084473
532005 domains visited
Cumulative time: 171.0734190940857

BaB round 38
batch: 16384
splitting decisions: 
split level 0: [/input-8, 2002] [/input-8, 315] [/input-8, 2002] [/input, 2253] [/input, 2253] [/input, 2253] [/input, 2217] [/input, 2253] [/input, 2253] [/input-8, 2002] 
pruning_in_iteration open status: True
ratio of positive domain = 16468 / 32768 = 0.5025634765625
pruning-in-iteration extra time: 0.005390167236328125
Time: prepare 0.9310    bound 0.9073    transfer 0.2613    finalize 0.2281    func 2.3305    
Accumulated time: func 76.8554    prepare 26.7807    bound 29.7176    transfer 7.2578    finalize 12.8681    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 74603
Time: pickout 0.3790    decision 2.4453    set_bounds 0.7892    solve 2.3391    add 0.0618    
Accumulated time: pickout 9.0252    decision 54.1056    set_bounds 29.6668    solve 79.1543    add 2.2715    
Current (lb-rhs): -0.011157631874084473
548305 domains visited
Cumulative time: 177.22163844108582

BaB round 39
batch: 16384
splitting decisions: 
split level 0: [/input-8, 315] [/input-8, 315] [/input-8, 315] [/input-8, 315] [/input, 2253] [/input, 1115] [/input, 1115] [/input, 2253] [/input-8, 315] [/input, 1115] 
pruning_in_iteration open status: True
ratio of positive domain = 17206 / 32768 = 0.52508544921875
pruning-in-iteration extra time: 0.00550079345703125
Time: prepare 0.9266    bound 0.8841    transfer 0.2611    finalize 0.2333    func 2.3075    
Accumulated time: func 79.1629    prepare 27.7077    bound 30.6016    transfer 7.5189    finalize 13.1014    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 73781
Time: pickout 0.3805    decision 2.4467    set_bounds 1.5124    solve 2.3164    add 0.0737    
Accumulated time: pickout 9.4057    decision 56.5524    set_bounds 31.1792    solve 81.4707    add 2.3452    
Current (lb-rhs): -0.011157631874084473
563867 domains visited
Cumulative time: 184.08763360977173

BaB round 40
batch: 16384
splitting decisions: 
split level 0: [/input-8, 2002] [/input, 2641] [/input-8, 2002] [/input, 2641] [/input, 2641] [/input, 2641] [/input, 2253] [/input, 2253] [/input-8, 315] [/input, 2641] 
pruning_in_iteration open status: True
ratio of positive domain = 16817 / 32768 = 0.513214111328125
pruning-in-iteration extra time: 0.0052738189697265625
Time: prepare 0.9481    bound 0.8963    transfer 0.2612    finalize 0.2189    func 2.3274    
Accumulated time: func 81.4903    prepare 28.6563    bound 31.4979    transfer 7.7801    finalize 13.3203    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 73348
Time: pickout 0.3820    decision 2.2294    set_bounds 0.8156    solve 2.3366    add 0.0602    
Accumulated time: pickout 9.7877    decision 58.7817    set_bounds 31.9948    solve 83.8074    add 2.4054    
Current (lb-rhs): -0.011157631874084473
579818 domains visited
Cumulative time: 190.03693985939026

BaB round 41
batch: 16384
splitting decisions: 
split level 0: [/input-8, 2002] [/input, 2641] [/input-8, 2002] [/input, 1115] [/input-8, 315] [/input-8, 315] [/input-8, 315] [/input, 2641] [/input, 2641] [/input, 2641] 
pruning_in_iteration open status: True
ratio of positive domain = 16801 / 32768 = 0.512725830078125
pruning-in-iteration extra time: 0.005314826965332031
Time: prepare 0.9329    bound 0.8942    transfer 0.2618    finalize 0.2347    func 2.3261    
Accumulated time: func 83.8165    prepare 29.5895    bound 32.3921    transfer 8.0419    finalize 13.5550    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 72931
Time: pickout 0.3850    decision 2.3971    set_bounds 1.4542    solve 2.3348    add 0.0617    
Accumulated time: pickout 10.1727    decision 61.1788    set_bounds 33.4491    solve 86.1422    add 2.4671    
Current (lb-rhs): -0.011157631874084473
595785 domains visited
Cumulative time: 196.8113067150116

BaB round 42
batch: 16384
splitting decisions: 
split level 0: [/input, 2217] [/input-8, 315] [/input, 2253] [/input, 1115] [/input, 2253] [/input, 2641] [/input-8, 2002] [/input-8, 315] [/input, 2253] [/input-8, 2002] 
pruning_in_iteration open status: True
ratio of positive domain = 17325 / 32768 = 0.528717041015625
pruning-in-iteration extra time: 0.00521087646484375
Time: prepare 0.9330    bound 0.8726    transfer 0.2616    finalize 0.2355    func 2.3047    
Accumulated time: func 86.1211    prepare 30.5230    bound 33.2647    transfer 8.3034    finalize 13.7904    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01116 (20), -0.01108 (20), -0.01097 (20), -0.01089 (20), -0.01088 (18), -0.01082 (20), -0.01079 (18), -0.01074 (20), -0.01064 (20), -0.01059 (18), -0.01056 (20), -0.01050 (20), -0.01049 (18), -0.01042 (20), -0.01039 (20), -0.01033 (21), -0.01031 (20), -0.01024 (21), -0.01023 (19), -0.01023 (20), 
Length of domains: 71990
Time: pickout 0.3879    decision 2.1899    set_bounds 0.8200    solve 3.0179    add 0.0545    
Accumulated time: pickout 10.5607    decision 63.3687    set_bounds 34.2690    solve 89.1600    add 2.5216    
Current (lb-rhs): -0.011157631874084473
611228 domains visited
Time out!!!!!!!!
Result: unknown in 205.7041 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 182, vnnlib ID: 182 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.81517506, -16.44219780, -14.93947697, -17.08555794, -16.53348160,
         -17.39346313, -16.71439552, -17.35387802, -14.78421783, -16.59263992]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [413]; unstable size 413; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 111, 1, 413] with unstable size 110 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 413] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 413] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [110]; unstable size 110; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 110] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 110] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.18601274, 1.75380206, 3.75133443, 3.26349258, 4.05069065, 3.40995359,
         3.94186592, 1.68227029, 3.44086933]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0770 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 183, vnnlib ID: 183 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.99047518, -8.97643757, -4.09049177, -5.13144016, -3.59326243,
         -5.18095779, -3.94524646, -5.82680273, -8.33982086, -8.93140888]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [769]; unstable size 769; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 283, 1, 769] with unstable size 282 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 769] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 769] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [282]; unstable size 282; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 282] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 282] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.60268474,  4.07875967,  0.22120133,  1.13343310,  1.18244100,
         -0.09481192,  1.85378695,  3.72636437,  4.09831953]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.99047518, -8.97643757, -4.09049177, -5.13144016, -3.59326243,
         -5.18095779, -3.94524646, -5.82680273, -8.33982086, -8.93140888]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.94it/s]100%|██████████| 1/1 [00:00<00:00,  8.94it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.32266092, -9.32172298, -4.42147398, -5.43138981, -3.97195244,
          -5.48412561, -4.08728886, -6.25158787, -8.70373154, -9.29818153]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.11533642]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1150 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.092309951782227
alpha/beta optimization time: 1.1264457702636719
initial alpha-crown bounds: tensor([[ 2.64488888,  4.13461781,  0.23508084,  1.15149260,  1.20023584,
         -0.07920098,  1.87038040,  3.78053093,  4.15428352]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.07920098304748535
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.70500373840332
Verifying property 0 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.6448888778686523.

Properties batch 1, size 1
Remaining timeout: 198.56982803344727
Verifying property 1 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.134617805480957.

Properties batch 2, size 1
Remaining timeout: 198.46324467658997
Verifying property 2 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.23508083820343018.

Properties batch 3, size 1
Remaining timeout: 198.35789489746094
Verifying property 3 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.1514925956726074.

Properties batch 4, size 1
Remaining timeout: 198.25281405448914
Verifying property 4 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2002358436584473.

Properties batch 5, size 1
Remaining timeout: 198.14669227600098
Verifying property 5 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.07920098]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.99047518, -8.97643757, -4.09049177, -5.13144016, -3.59326243,
        -5.18095779, -3.94524646, -5.82680273, -8.33982086, -8.93140888],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.07920098]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 769
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 279
Node /15 input 0: size torch.Size([100]) unstable 8
-----------------
# of unstable neurons: 1056
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 90] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 79] 
split level 3: [/input-12, 47] 
split level 4: [/input-8, 1828] 
split level 5: [/input-8, 1489] 
split level 6: [/input-8, 1836] 
split level 7: [/input-8, 181] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 4.38690185546875e-05
Time: prepare 0.0032    bound 0.0070    transfer 0.0012    finalize 0.0017    func 0.0131    
Accumulated time: func 0.0131    prepare 0.0037    bound 0.0070    transfer 0.0012    finalize 0.0017    
all_split False
Length of domains: 0
Time: pickout 0.0004    decision 0.0287    set_bounds 0.0183    solve 0.0131    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0287    set_bounds 0.0183    solve 0.0131    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.06485724449157715


Properties batch 6, size 1
Remaining timeout: 197.94140434265137
Verifying property 6 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.8703804016113281.

Properties batch 7, size 1
Remaining timeout: 197.83066082000732
Verifying property 7 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.7805309295654297.

Properties batch 8, size 1
Remaining timeout: 197.64276576042175
Verifying property 8 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.15428352355957.
Result: safe in 2.4642 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 184, vnnlib ID: 184 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.30149889, -3.49341011, -6.24541330, -7.76470089, -6.35670853,
         -7.93911409, -8.75611973, -7.13641787, -2.26208448, -2.55497289]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [448]; unstable size 448; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 126, 1, 448] with unstable size 125 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 448] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 448] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [125]; unstable size 125; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 125] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 125] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.26391125,  0.73275733,  3.13852215,  4.64125395,  3.28221655,
          4.80755997,  5.62747574,  4.06410265, -0.90191269]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.30149889, -3.49341011, -6.24541330, -7.76470089, -6.35670853,
         -7.93911409, -8.75611973, -7.13641787, -2.26208448, -2.55497289]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.30149889, -3.49341011, -6.24541330, -7.76470089, -6.35670853,
          -7.93911409, -8.75611973, -7.13641787, -2.26208448, -2.55497289]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.29288840]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.14761901, -0.63968253, -0.56031746,  ...,  0.16984135,
             0.21746039,  0.23333341],
           [-1.32222211, -0.84603173, -0.43333322,  ...,  0.21746039,
             0.26507944,  0.28095245],
           [-1.40158725, -1.27460313, -0.84603173,  ...,  0.24920642,
             0.31269848,  0.34444451],
           ...,
           [-1.32222211, -1.33809519, -1.32222211,  ..., -0.03650784,
            -0.59206349, -1.03650784],
           [-0.59206349, -0.49682540, -0.29047608,  ..., -0.09999990,
            -0.81428570, -1.06825387],
           [ 0.32857150,  0.40793657,  0.47142863,  ...,  0.05873025,
            -0.21111101, -0.40158719]],

          [[-0.78904986, -0.16103047,  0.03220624,  ...,  0.66022551,
             0.66022551,  0.67632860],
           [-1.15942025, -0.54750401, -0.03220600,  ...,  0.72463775,
             0.72463775,  0.74074084],
           [-1.33655393, -1.07890499, -0.57971013,  ...,  0.75684386,
             0.77294695,  0.80515307],
           ...,
           [-1.20772946, -1.20772946, -1.19162631,  ..., -0.06441211,
            -0.51529789, -0.93397743],
           [-0.57971013, -0.48309177, -0.27375188,  ..., -0.12882435,
            -0.72463763, -0.95008045],
           [ 0.28985518,  0.37037048,  0.43478271,  ...,  0.03220624,
            -0.12882435, -0.32206106]],

          [[-0.10344811,  0.72113961,  1.23088503,  ...,  1.56072009,
             1.57571256,  1.59070504],
           [-0.85307342,  0.06146942,  0.96101969,  ...,  1.56072009,
             1.57571256,  1.60569763],
           [-0.92803597, -0.67316341, -0.07346311,  ...,  1.59070504,
             1.62069011,  1.63568258],
           ...,
           [-0.73313338, -0.83808094, -0.88305843,  ...,  0.09145443,
            -0.16341813, -0.26836565],
           [-0.29835078, -0.28335828, -0.11844061,  ...,  0.06146942,
            -0.29835078, -0.32833579],
           [ 0.37631202,  0.42128953,  0.46626705,  ...,  0.16641696,
             0.04647692, -0.04347810]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0754 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 185, vnnlib ID: 185 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.06885719, -5.39221478, -5.41002798, -5.94510174, -5.27591610,
         -6.06000948, -5.04459095, -6.26535511, -7.53897762, -5.24221373]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [444]; unstable size 444; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 173, 1, 444] with unstable size 172 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 444] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 444] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [172]; unstable size 172; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 172] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.17368031, -0.12169065, -0.52097559,  0.06974697, -0.65863132,
          0.17358828, -0.89032507,  0.25720119,  1.71557117]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.06885719, -5.39221478, -5.41002798, -5.94510174, -5.27591610,
         -6.06000948, -5.04459095, -6.26535511, -7.53897762, -5.24221373]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.06885624, -5.39221478, -5.41002798, -5.94510174, -5.27591515,
          -6.06000900, -5.04459095, -6.26535511, -7.53897667, -5.24221325],
         [-7.06885624, -5.39221478, -5.41002798, -5.94510174, -5.27591515,
          -6.06000900, -5.04459095, -6.26535511, -7.53897667, -5.24221325]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.15000153,  0.16781473,  0.03370190, -0.19762230]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]],


         [[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]],


         [[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]],


         [[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0788 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 186, vnnlib ID: 186 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.72309113, -11.37285328, -11.28134155, -12.68495083, -11.58407688,
         -12.91345787, -12.84364223, -12.81871128,  -7.10625744, -11.70213604]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [490]; unstable size 490; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 152, 1, 490] with unstable size 151 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 490] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 490] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [151]; unstable size 151; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 151] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 151] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.24744225, 3.64492726, 3.52347612, 4.82812738, 3.78522539, 5.03832436,
         5.00732327, 4.91135693, 4.00957584]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0649 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 187, vnnlib ID: 187 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.51928949, -5.15087223, -3.22848940, -3.80073190, -3.15746570,
         -3.94839764, -3.82955623, -4.85578012, -2.35027075, -4.11050558]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [721]; unstable size 721; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 721] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 721] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 721] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 190] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.20104569,  2.09830141,  0.14130938,  0.66386670,  0.04208767,
          0.79857552,  0.56520987,  1.63165116,  1.12448716]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.51928949, -5.15087223, -3.22848940, -3.80073190, -3.15746570,
         -3.94839764, -3.82955623, -4.85578012, -2.35027075, -4.11050558]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.53468847, -5.19556904, -3.22439003, -3.86211801, -3.17368507,
          -4.00655746, -3.77223229, -4.88972187, -2.58229876, -4.19417620]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04761028]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0055 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0394 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 188, vnnlib ID: 188 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.97730589, -7.00714970, -4.64439344, -6.27000904, -5.63979816,
         -6.32092857, -6.35750294, -7.77330685, -5.49930382, -6.73936844]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [339]; unstable size 339; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 188, 1, 339] with unstable size 187 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 339] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 339] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 187] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.05137646,  1.62128544,  1.31240141,  0.74176526,  1.35647559,
          1.30591071,  2.72699094,  0.18010390,  1.41348743]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.97730589, -7.00714970, -4.64439344, -6.27000904, -5.63979816,
         -6.32092857, -6.35750294, -7.77330685, -5.49930382, -6.73936844]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.15it/s]100%|██████████| 1/1 [00:00<00:00,  9.15it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.97218704, -7.05845642, -4.88922119, -6.54895496, -5.88330650,
          -6.60418797, -6.63821125, -8.03036880, -5.43032932, -6.83684731]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.08296585]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1118 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.740821838378906
alpha/beta optimization time: 1.1106278896331787
initial alpha-crown bounds: tensor([[-0.04131854,  1.64049292,  1.33070421,  0.74799585,  1.37658334,
          1.32323432,  2.73499823,  0.19743508,  1.43069625]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.041318535804748535
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.7259647846222
Verifying property 0 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04131854]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.97730589, -7.00714970, -4.64439344, -6.27000904, -5.63979816,
        -6.32092857, -6.35750294, -7.77330685, -5.49930382, -6.73936844],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04131854]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 339
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 187
Node /15 input 0: size torch.Size([100]) unstable 6
-----------------
# of unstable neurons: 532
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 62] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 69] 
split level 4: [/input-8, 356] 
split level 5: [/input-8, 2046] 
split level 6: [/input-8, 2026] 
split level 7: [/input-8, 174] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 4.38690185546875e-05
Time: prepare 0.0031    bound 0.0039    transfer 0.0009    finalize 0.0015    func 0.0095    
Accumulated time: func 0.0095    prepare 0.0035    bound 0.0039    transfer 0.0009    finalize 0.0015    
all_split False
Length of domains: 0
Time: pickout 0.0004    decision 0.0226    set_bounds 0.0180    solve 0.0096    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0226    set_bounds 0.0180    solve 0.0096    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.055101633071899414


Properties batch 1, size 1
Remaining timeout: 198.4839997291565
Verifying property 1 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.6404929161071777.

Properties batch 2, size 1
Remaining timeout: 198.37474966049194
Verifying property 2 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.3307042121887207.

Properties batch 3, size 1
Remaining timeout: 198.26786255836487
Verifying property 3 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.7479958534240723.

Properties batch 4, size 1
Remaining timeout: 198.16209959983826
Verifying property 4 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.3765833377838135.

Properties batch 5, size 1
Remaining timeout: 198.0564968585968
Verifying property 5 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.3232343196868896.

Properties batch 6, size 1
Remaining timeout: 197.95096158981323
Verifying property 6 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.7349982261657715.

Properties batch 7, size 1
Remaining timeout: 197.84564638137817
Verifying property 7 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.19743508100509644.

Properties batch 8, size 1
Remaining timeout: 197.72180819511414
Verifying property 8 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.4306962490081787.
Result: safe in 2.3883 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 189, vnnlib ID: 189 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.22406721, -5.09387970, -1.13128150, -2.34915662, -1.20606780,
         -2.44099808, -1.39945912, -3.09898949, -5.70387459, -5.12313890]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [421]; unstable size 421; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 184, 1, 421] with unstable size 183 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 421] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 421] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [183]; unstable size 183; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 183] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 183] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.44431496,  3.10675144, -0.30788946,  0.80543149,  0.89428473,
         -0.24248075,  1.52680278,  3.75318360,  3.18413162]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.22406721, -5.09387970, -1.13128150, -2.34915662, -1.20606780,
         -2.44099808, -1.39945912, -3.09898949, -5.70387459, -5.12313890]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.22406721, -5.09387970, -1.13128197, -2.34915662, -1.20606816,
          -2.44099808, -1.39945936, -3.09898996, -5.70387459, -5.12313890],
         [-4.22406721, -5.09387970, -1.13128197, -2.34915662, -1.20606816,
          -2.44099808, -1.39945936, -3.09898996, -5.70387459, -5.12313890]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07478619,  0.19339120]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.01111121, -0.05238085, -0.14761895,  ...,  0.10634929,
             0.21746039,  0.40793657],
           [-0.35396814, -0.41746020, -0.40158719,  ...,  0.01111121,
             0.29682547,  0.10634929],
           [-0.43333322, -0.32222211,  0.05873025,  ..., -0.13174593,
             0.58253974,  0.63015878],
           ...,
           [-0.67142856, -0.67142856, -0.67142856,  ..., -0.29047608,
            -0.29047608, -0.19523799],
           [-0.54444444, -0.59206349, -0.63968253,  ..., -0.86190474,
            -0.84603173, -0.40158719],
           [-0.60793650, -0.62380952, -0.59206349,  ..., -1.14761901,
            -1.03650784, -0.67142856]],

          [[ 0.61191636,  0.53140104,  0.41867965,  ...,  0.49919492,
             0.61191636,  0.69243163],
           [ 0.30595824,  0.20933989,  0.22544295,  ...,  0.06441236,
             0.35426742,  0.08051541],
           [ 0.09661847,  0.20933989,  0.59581327,  ..., -0.19323659,
             0.28985518,  0.32206130],
           ...,
           [ 0.41867965,  0.38647354,  0.33816436,  ..., -0.59581316,
            -0.59581316, -0.49919480],
           [ 0.57971025,  0.48309189,  0.40257660,  ..., -1.07890499,
            -1.09500802, -0.69243151],
           [ 0.54750413,  0.48309189,  0.48309189,  ..., -1.23993552,
            -1.19162631, -0.88566822]],

          [[-0.47826082, -0.49325335, -0.49325335,  ..., -0.28335828,
            -0.31334329, -0.29835078],
           [-0.68815589, -0.65817088, -0.59820086,  ..., -0.47826082,
            -0.35832080, -0.71814090],
           [-0.77811092, -0.62818587, -0.31334329,  ..., -0.86806595,
            -0.46326834, -0.47826082],
           ...,
           [ 0.55622208,  0.52623707,  0.49625200,  ..., -1.00299859,
            -1.04797614, -1.03298354],
           [ 0.72113961,  0.64617711,  0.58620709,  ..., -1.25787115,
            -1.33283365, -1.04797614],
           [ 0.72113961,  0.66116959,  0.67616212,  ..., -1.28785622,
            -1.28785622, -1.07796109]]],


         [[[ 0.01111121, -0.05238085, -0.14761895,  ...,  0.10634929,
             0.21746039,  0.40793657],
           [-0.35396814, -0.41746020, -0.40158719,  ...,  0.01111121,
             0.29682547,  0.10634929],
           [-0.43333322, -0.32222211,  0.05873025,  ..., -0.13174593,
             0.58253974,  0.63015878],
           ...,
           [-0.67142856, -0.67142856, -0.67142856,  ..., -0.29047608,
            -0.29047608, -0.19523799],
           [-0.54444444, -0.59206349, -0.63968253,  ..., -0.86190474,
            -0.84603173, -0.40158719],
           [-0.60793650, -0.62380952, -0.59206349,  ..., -1.14761901,
            -1.03650784, -0.67142856]],

          [[ 0.61191636,  0.53140104,  0.41867965,  ...,  0.49919492,
             0.61191636,  0.69243163],
           [ 0.30595824,  0.20933989,  0.22544295,  ...,  0.06441236,
             0.35426742,  0.08051541],
           [ 0.09661847,  0.20933989,  0.59581327,  ..., -0.19323659,
             0.28985518,  0.32206130],
           ...,
           [ 0.41867965,  0.38647354,  0.33816436,  ..., -0.59581316,
            -0.59581316, -0.49919480],
           [ 0.57971025,  0.48309189,  0.40257660,  ..., -1.07890499,
            -1.09500802, -0.69243151],
           [ 0.54750413,  0.48309189,  0.48309189,  ..., -1.23993552,
            -1.19162631, -0.88566822]],

          [[-0.47826082, -0.49325335, -0.49325335,  ..., -0.28335828,
            -0.31334329, -0.29835078],
           [-0.68815589, -0.65817088, -0.59820086,  ..., -0.47826082,
            -0.35832080, -0.71814090],
           [-0.77811092, -0.62818587, -0.31334329,  ..., -0.86806595,
            -0.46326834, -0.47826082],
           ...,
           [ 0.55622208,  0.52623707,  0.49625200,  ..., -1.00299859,
            -1.04797614, -1.03298354],
           [ 0.72113961,  0.64617711,  0.58620709,  ..., -1.25787115,
            -1.33283365, -1.04797614],
           [ 0.72113961,  0.66116959,  0.67616212,  ..., -1.28785622,
            -1.28785622, -1.07796109]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0701 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 190, vnnlib ID: 190 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.51938772,  -8.11381626,  -9.00568771, -10.62922859,  -9.08360767,
         -10.80996037, -10.68894196,  -9.68361282,  -4.49052000,  -7.37830973]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [513]; unstable size 513; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 513] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 513] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 513] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 197] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.66284275, 3.05478764, 3.87506914, 5.43707466, 3.87113786, 5.60540581,
         5.39609337, 4.38749218, 2.30119896]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0535 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 191, vnnlib ID: 191 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.14541721, -11.72427464,  -5.83231974,  -5.33568001,  -5.92574120,
          -5.31256008,  -6.40588474,  -6.92540359, -10.06930351, -10.74812031]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [548]; unstable size 548; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 215, 1, 548] with unstable size 214 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 548] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 548] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [214]; unstable size 214; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 214] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 214] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.22616196,  5.41774082,  0.20892346,  0.26687157, -0.04204357,
          0.62771273,  1.19141817,  3.92691207,  4.58853865]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.14541721, -11.72427464,  -5.83231974,  -5.33568001,  -5.92574120,
          -5.31256008,  -6.40588474,  -6.92540359, -10.06930351, -10.74812031]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.14541721, -11.72427464,  -5.83231974,  -5.33568001,  -5.92574120,
           -5.31256008,  -6.40588474,  -6.92540359, -10.06930351, -10.74812031]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02311993]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.06825387, -0.90952379, -0.92539680,  ..., -0.51269841,
            -0.24285704, -0.05238085],
           [-0.98888886, -0.90952379, -0.83015871,  ..., -0.56031746,
            -0.30634910, -0.38571417],
           [-0.98888886, -0.92539680, -0.78253967,  ..., -0.71904761,
            -0.56031746, -0.54444444],
           ...,
           [ 0.18571436,  0.36031753,  0.40793657,  ..., -0.48095238,
            -0.52857143, -0.76666665],
           [ 0.20158738,  0.37619054,  0.42380959,  ..., -0.38571417,
            -0.33809513, -0.59206349],
           [ 0.28095245,  0.28095245,  0.37619054,  ..., -0.65555555,
            -0.57619047, -0.38571417]],

          [[-0.77294683, -0.66022539, -0.67632848,  ..., -0.32206106,
            -0.54750401, -1.54589367],
           [-0.70853460, -0.69243151, -0.56360704,  ..., -0.40257636,
            -0.61191624, -1.61030602],
           [-0.72463763, -0.80515295, -0.61191624,  ..., -0.61191624,
            -0.82125598, -1.67471826],
           ...,
           [-0.08051517,  0.43478271,  0.64412248,  ..., -0.41867942,
            -0.56360704, -0.91787434],
           [ 0.03220624,  0.57971025,  0.82125610,  ..., -0.19323659,
            -0.22544271, -0.64412236],
           [ 0.24154601,  0.61191636,  0.90177143,  ..., -0.33816412,
            -0.28985494, -0.27375188]],

          [[-0.67316341, -0.62818587, -0.61319339,  ..., -0.34332830,
            -0.43328333, -1.00299859],
           [-0.61319339, -0.65817088, -0.55322337,  ..., -0.38830581,
            -0.49325335, -1.13793111],
           [-0.61319339, -0.76311839, -0.59820086,  ..., -0.58320838,
            -0.71814090, -1.24287868],
           ...,
           [-0.01349309,  0.46626705,  0.63118458,  ..., -0.34332830,
            -0.43328333, -0.73313338],
           [ 0.07646193,  0.58620709,  0.76611710,  ..., -0.16341813,
            -0.16341813, -0.50824583],
           [ 0.25637197,  0.60119957,  0.84107965,  ..., -0.32833579,
            -0.28335828, -0.20839565]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0740 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 192, vnnlib ID: 192 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.85122108,  -9.83976269,  -4.36141491,  -6.06150818,  -4.73432350,
          -6.12186289,  -4.43167305,  -5.76936531, -10.48191452,  -9.88933086]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [496]; unstable size 496; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 219, 1, 496] with unstable size 218 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 496] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 496] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [218]; unstable size 218; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 218] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 218] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.02029109,  4.69440079,  1.40866971,  0.14043295,  1.46608901,
         -0.25579298,  0.97369635,  5.52549458,  4.68338776]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.85122108,  -9.83976269,  -4.36141491,  -6.06150818,  -4.73432350,
          -6.12186289,  -4.43167305,  -5.76936531, -10.48191452,  -9.88933086]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.19215965, -10.07285023,  -4.68872547,  -6.33513165,  -5.02730227,
           -6.40092230,  -4.53446865,  -6.08764648, -10.82570934, -10.10628033]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15425682]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0066 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0511 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 193, vnnlib ID: 193 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.92484570, -10.87237930, -13.92814922, -13.33872890, -13.33044052,
         -13.41853333, -13.35081768, -12.54118347, -13.63366699, -10.99636936]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [538]; unstable size 538; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 538] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 538] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 538] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 153] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.15295219, -0.39681900,  2.03169203,  1.50405073,  1.48508930,
          1.57360125,  1.36475945,  0.63238382,  1.97044277]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.92484570, -10.87237930, -13.92814922, -13.33872890, -13.33044052,
         -13.41853333, -13.35081768, -12.54118347, -13.63366699, -10.99636936]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.92484570, -10.87237930, -13.92814922, -13.33872890, -13.33044052,
          -13.41853333, -13.35081768, -12.54118347, -13.63366699, -10.99636936]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12399006]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.00476182e+00, -1.05238092e+00, -7.66666651e-01,  ...,
             1.88412726e+00,  1.86825418e+00,  1.86825418e+00],
           [-8.93650770e-01, -8.93650770e-01, -8.30158710e-01,  ...,
             1.88412726e+00,  1.91587329e+00,  1.94761932e+00],
           [-1.00476182e+00, -9.25396800e-01, -9.25396800e-01,  ...,
             1.82063520e+00,  2.01111126e+00,  2.04285717e+00],
           ...,
           [ 1.53968334e-01,  5.87302521e-02, -3.65078375e-02,  ...,
             2.49206424e-01,  2.65079439e-01,  2.65079439e-01],
           [ 1.22222304e-01,  1.22222304e-01,  1.06349289e-01,  ...,
             2.17460394e-01,  2.17460394e-01,  2.49206424e-01],
           [ 4.87301648e-01,  4.23809588e-01,  4.55555618e-01,  ...,
             2.01587379e-01,  1.85714364e-01,  2.01587379e-01]],

          [[-1.01449275e+00, -1.06280184e+00, -7.72946835e-01,  ...,
             2.06119204e+00,  2.06119204e+00,  2.04508877e+00],
           [-9.01771307e-01, -9.01771307e-01, -8.37359071e-01,  ...,
             2.02898574e+00,  2.06119204e+00,  2.07729483e+00],
           [-1.01449275e+00, -9.33977425e-01, -9.33977425e-01,  ...,
             1.91626441e+00,  2.09339786e+00,  2.10950065e+00],
           ...,
           [ 3.22062373e-02, -6.44121096e-02, -1.61030471e-01,  ...,
             1.61030710e-01,  1.77133769e-01,  1.77133769e-01],
           [ 1.22934580e-07,  1.22934580e-07, -1.61029361e-02,  ...,
             1.28824592e-01,  1.28824592e-01,  1.61030710e-01],
           [ 3.70370477e-01,  3.05958241e-01,  3.38164359e-01,  ...,
             1.12721533e-01,  9.66184735e-02,  1.12721533e-01]],

          [[-1.00299859e+00, -1.04797614e+00, -7.93103397e-01,  ...,
             2.05547261e+00,  2.05547261e+00,  2.09295392e+00],
           [-8.98050964e-01, -8.83058429e-01, -8.53073418e-01,  ...,
             2.02548766e+00,  2.07046509e+00,  2.10045004e+00],
           [-1.01799107e+00, -9.28035975e-01, -9.43028450e-01,  ...,
             1.92054021e+00,  2.10045004e+00,  2.10045004e+00],
           ...,
           [ 9.14544314e-02,  3.14844176e-02, -4.34781015e-02,  ...,
             2.56371975e-01,  2.71364480e-01,  2.71364480e-01],
           [ 1.06446937e-01,  1.06446937e-01,  9.14544314e-02,  ...,
             2.26386964e-01,  2.26386964e-01,  2.56371975e-01],
           [ 4.51274544e-01,  3.91304523e-01,  4.21289533e-01,  ...,
             2.11394474e-01,  1.96401969e-01,  2.11394474e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0461 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 194, vnnlib ID: 194 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.54840231, -10.41300774,  -4.38957787,  -7.00133038,  -4.26655102,
          -7.14465809,  -5.40828037,  -6.95093203,  -9.18996620, -10.25354671]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [698]; unstable size 698; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 162, 1, 698] with unstable size 161 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 698] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 698] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [161]; unstable size 161; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 161] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 161] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.69664466,  5.13874626,  2.27037501, -0.31452271,  2.41091156,
          0.62896550,  2.07980633,  4.13404369,  5.02704430]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.54840231, -10.41300774,  -4.38957787,  -7.00133038,  -4.26655102,
          -7.14465809,  -5.40828037,  -6.95093203,  -9.18996620, -10.25354671]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.54840231, -10.41300774,  -4.38957787,  -7.00133038,  -4.26655102,
           -7.14465809,  -5.40828037,  -6.95093203,  -9.18996620, -10.25354671]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12302685]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.09999990, -0.13174593, -0.09999990,  ...,  0.31269848,
             0.29682547,  0.32857150],
           [-0.09999990, -0.13174593, -0.09999990,  ...,  0.37619054,
             0.34444451,  0.36031753],
           [-0.08412688, -0.09999990, -0.06825387,  ...,  0.43968260,
             0.40793657,  0.40793657],
           ...,
           [ 0.21746039,  0.80476195,  0.31269848,  ...,  0.24920642,
             0.53492069,  0.45555562],
           [ 0.43968260,  0.61428577,  0.04285724,  ..., -0.00476181,
             0.37619054,  0.26507944],
           [ 0.67777783,  0.82063496,  0.34444451,  ...,  0.07460327,
             0.51904768,  0.26507944]],

          [[ 0.14492765,  0.08051541,  0.08051541,  ...,  0.40257660,
             0.40257660,  0.45088577],
           [ 0.16103071,  0.11272153,  0.09661847,  ...,  0.43478271,
             0.41867965,  0.45088577],
           [ 0.19323683,  0.16103071,  0.16103071,  ...,  0.48309189,
             0.46698883,  0.46698883],
           ...,
           [ 0.35426742,  0.95008057,  0.46698883,  ...,  0.35426742,
             0.54750413,  0.40257660],
           [ 0.49919492,  0.64412248,  0.09661847,  ...,  0.09661847,
             0.38647354,  0.19323683],
           [ 0.64412248,  0.72463775,  0.28985518,  ...,  0.11272153,
             0.51529801,  0.16103071]],

          [[-0.56821585, -0.61319339, -0.59820086,  ..., -0.29835078,
            -0.29835078, -0.26836565],
           [-0.52323836, -0.55322337, -0.55322337,  ..., -0.28335828,
            -0.26836565, -0.23838064],
           [-0.46326834, -0.49325335, -0.47826082,  ..., -0.26836565,
            -0.25337315, -0.20839565],
           ...,
           [-0.16341813,  0.28635699, -0.11844061,  ..., -0.35832080,
            -0.19340314, -0.32833579],
           [-0.10344811, -0.01349309, -0.46326834,  ..., -0.65817088,
            -0.40329832, -0.61319339],
           [-0.05847061,  0.10644694, -0.25337315,  ..., -0.74812591,
            -0.40329832, -0.76311839]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0711 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 195, vnnlib ID: 195 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.77076054, -7.62575722, -4.14598608, -4.30755711, -4.49275303,
         -4.30263758, -4.76192760, -5.12311316, -9.43562317, -7.12698030]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [451]; unstable size 451; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 451] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 451] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 451] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 141] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.21912003,  2.78572893, -0.07663596,  0.15777642, -0.08433509,
          0.31483489,  0.74149060,  4.69014692,  2.36162901]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.77076054, -7.62575722, -4.14598608, -4.30755711, -4.49275303,
         -4.30263758, -4.76192760, -5.12311316, -9.43562317, -7.12698030]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.77750111, -7.54761982, -4.16146708, -4.15072727, -4.44591999,
          -4.14375591, -4.69891930, -5.00807619, -9.32279205, -7.01225615],
         [-7.77750111, -7.54761982, -4.16146708, -4.15072727, -4.44591999,
          -4.14375591, -4.69891930, -5.00807619, -9.32279205, -7.01225615]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01073980, -0.01771116]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0078 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0664 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 196, vnnlib ID: 196 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.99589634, -8.26478100, -4.99381447, -4.63861275, -5.23205948,
         -4.79511499, -4.13116074, -5.92502117, -6.71752071, -6.90651417]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 226, 1, 527] with unstable size 225 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 527] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [225]; unstable size 225; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 225] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 225] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.63359308,  2.80945683, -0.02099764,  0.19597054,  0.13199283,
         -0.82713413,  0.77079362,  1.11276019,  1.53818464]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.99589634, -8.26478100, -4.99381447, -4.63861275, -5.23205948,
         -4.79511499, -4.13116074, -5.92502117, -6.71752071, -6.90651417]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.99589586, -8.26478100, -4.99381447, -4.63861370, -5.23206043,
          -4.79511547, -4.13116169, -5.92502165, -6.71752071, -6.90651464],
         [-6.99589586, -8.26478100, -4.99381447, -4.63861370, -5.23206043,
          -4.79511547, -4.13116169, -5.92502165, -6.71752071, -6.90651464]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.35520077, -0.50745201]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]],


         [[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0729 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 197, vnnlib ID: 197 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.43056643, -7.67667961, -2.21826839, -5.13023186, -4.35107708,
         -5.29444695, -6.64366817, -6.71203184, -2.96457338, -7.15871954]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [420]; unstable size 420; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 420] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 420] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 420] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 139] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.68506241, 0.59332943, 3.33365774, 2.62052536, 3.49451232, 4.81873131,
         4.89159966, 1.19089460, 5.18301582]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0637 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 198, vnnlib ID: 198 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.62386703, -13.36399269, -10.09908199, -10.70369053, -11.34663582,
         -10.95080948, -11.28316879, -13.42721939, -11.15745735, -13.38610840]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [426]; unstable size 426; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 133, 1, 426] with unstable size 132 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 426] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 426] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [132]; unstable size 132; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 132] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 132] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.35772896, 0.16254246, 0.66209137, 1.36232615, 0.89922094, 1.23943388,
         3.33602238, 1.22553658, 3.36414480]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0650 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 199, vnnlib ID: 199 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.18024397, -5.98002243, -5.06597948, -4.94513512, -5.08981609,
         -5.01497555, -4.47184467, -5.60709667, -6.87614346, -5.18200159]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [543]; unstable size 543; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 543] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 543] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 543] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 203] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.73734832,  0.50935507,  0.11531389,  0.06424898,  0.13350642,
          0.12348151,  0.50896823,  1.37839460, -0.26445580]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.18024397, -5.98002243, -5.06597948, -4.94513512, -5.08981609,
         -5.01497555, -4.47184467, -5.60709667, -6.87614346, -5.18200159]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.03544331, -5.49160671, -5.23422575, -5.08459759, -5.23702908,
          -5.16129684, -4.69914150, -5.69229412, -6.59322977, -4.69896603]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00017548]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0074 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0559 seconds
############# Summary #############
Final verified acc: 46.5% (total 200 examples)
Problem instances count: 200 , total verified (safe/unsat): 93 , total falsified (unsafe/sat): 101 , timeout: 6
mean time for ALL instances (total 200):6.7230720758604035, max time: 217.01289677619934
mean time for verified SAFE instances(total 93): 0.7805578067738522, max time: 45.29082250595093
mean time for verified (SAFE + UNSAFE) instances (total 194): 0.4213507089418234, max time: [2.534259796142578, 0.06806302070617676, 0.049664974212646484, 0.05093050003051758, 0.04831862449645996, 0.05751752853393555, 0.06830358505249023, 0.0568239688873291, 0.0601496696472168, 0.5981087684631348, 0.05999612808227539, 0.043897390365600586, 0.03822040557861328, 0.06485939025878906, 0.0457305908203125, 0.04745030403137207, 0.062119483947753906, 0.057808637619018555, 0.06121373176574707, 0.06993389129638672, 0.05240607261657715, 0.057534217834472656, 0.03650927543640137, 0.04520392417907715, 0.04072713851928711, 0.06609368324279785, 0.05252265930175781, 0.0520472526550293, 0.05025434494018555, 0.06859970092773438, 0.0766298770904541, 0.052266597747802734, 0.06575417518615723, 0.043244123458862305, 0.045514822006225586, 0.07210779190063477, 0.07072210311889648, 0.06166529655456543, 0.0706477165222168, 0.05190467834472656, 0.05884408950805664, 0.043973445892333984, 0.04811215400695801, 0.07493162155151367, 0.07025146484375, 0.04024815559387207, 0.05428481101989746, 0.05882573127746582, 0.06388068199157715, 0.06274199485778809, 0.0314028263092041, 0.07617759704589844, 0.05292987823486328, 0.04781317710876465, 0.07181763648986816, 0.05170845985412598, 0.07746434211730957, 0.06668710708618164, 0.07206034660339355, 0.057029008865356445, 0.07247257232666016, 0.06977367401123047, 0.040921926498413086, 0.0814664363861084, 0.07302308082580566, 0.04097628593444824, 0.07959604263305664, 0.0821080207824707, 0.08261728286743164, 0.07188200950622559, 0.05409049987792969, 0.07216191291809082, 0.06851506233215332, 0.057233333587646484, 0.0741872787475586, 0.05516505241394043, 0.07201099395751953, 0.04285478591918945, 0.0561213493347168, 0.07125496864318848, 0.061495304107666016, 0.07226371765136719, 0.06693863868713379, 0.06035876274108887, 0.04988288879394531, 0.08216977119445801, 0.06212115287780762, 0.07751965522766113, 0.06992554664611816, 0.07092642784118652, 0.07540488243103027, 0.07877182960510254, 0.039392948150634766, 0.07008743286132812, 0.07403731346130371, 0.05109262466430664, 0.046082258224487305, 0.0710749626159668, 0.06644201278686523, 0.07291960716247559, 0.05591082572937012]
mean time for verified SAFE + TIMEOUT instances (total 99): 13.48953859492986, max time: [203.08009552955627, 212.70766282081604, 217.01289677619934, 209.80105590820312, 214.56665205955505, 205.70408177375793] 
mean time for verified UNSAFE instances (total 101): 0.09059565846282656, max time: 2.534259796142578
unsafe-pgd (total 101), index: [0, 1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 16, 19, 21, 23, 25, 26, 29, 32, 34, 35, 36, 37, 43, 44, 45, 46, 48, 50, 53, 54, 56, 58, 61, 63, 65, 66, 72, 76, 77, 78, 80, 82, 84, 87, 88, 89, 90, 94, 95, 96, 98, 100, 101, 102, 104, 105, 106, 108, 113, 119, 120, 122, 124, 125, 126, 127, 129, 130, 132, 134, 141, 143, 145, 148, 149, 150, 151, 152, 155, 156, 158, 163, 165, 167, 170, 172, 173, 174, 176, 184, 185, 187, 189, 191, 192, 193, 194, 195, 196, 199]
safe-incomplete (total 84), index: [2, 7, 8, 14, 15, 17, 18, 20, 22, 27, 28, 30, 31, 33, 38, 39, 40, 41, 42, 47, 49, 51, 55, 59, 60, 62, 68, 69, 70, 71, 73, 74, 75, 79, 81, 83, 85, 86, 91, 92, 93, 99, 103, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 121, 131, 133, 135, 136, 138, 139, 140, 142, 144, 146, 147, 153, 154, 157, 160, 161, 162, 164, 166, 168, 171, 175, 177, 179, 180, 182, 186, 190, 197, 198]
safe (total 9), index: [24, 57, 123, 128, 137, 159, 169, 183, 188]
unknown (total 6), index: [52, 64, 67, 97, 178, 181]
