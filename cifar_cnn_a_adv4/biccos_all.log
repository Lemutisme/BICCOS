Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  verify_onnxruntime_output: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  prepare_only: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: ablation_results/cifar_cnn_a_adv4/biccos_all.out
  root_path: ''
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: false
  output_file: out.pkl
  return_optimized_model: false
model:
  name: cnn_4layer_adv4
  path: models/sdp/cifar_cnn_a_adv4.model
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: []
  onnx_vnnlib_joint_optimization_flags: none
  check_optimized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.00784313725
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 4096
  auto_enlarge_batch_size: true
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    relu_option: adaptive
    compare_crown_with_ibp: false
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: []
    max_time: 1.0
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    max_dim: 10000
    reset_threshold: 1.0
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    unstable_neuron_threshold: 0
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
    topk_filter: 1.0
    sliding_window: -1
    extra_constraint: false
    refine_neuron_timeout_increasement: 0
    timeout_neuron_percentage: 0.3
    remaining_timeout_threshold: 1
    remove_unstable_neurons: false
    lp_solver: mip
    output_cut: false
bab:
  initial_max_domains: 1
  backing_up_max_domain: null
  max_domains: .inf
  decision_thresh: 0
  timeout: 200
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: false
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  tree_traversal: breadth_first
  cut:
    enabled: true
    cuts_path: /tmp/abcrown_cuts_5193
    implication: false
    bab_cut: true
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 0.99
    iteration: 200
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.05
    number_cuts: 500
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
    biccos:
      enabled: true
      auto_param: false
      constraint_strengthening: true
      recursively_strengthening: false
      merge_cut_enabled: false
      fast_inference_enabled: false
      drop_ratio: 0.5
      max_infer_iter: 40
      heuristic: neuron_influence_score
      save_cuts: false
      multi_tree_branching:
        enabled: true
        restore_best_tree: true
        keep_n_best_domains: 50
        target_batch_size: 200
        iterations: 5
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      filter: false
      filter_beta: false
      filter_clamp: false
      filter_batch_size: 10000
      filter_iterations: 25
      relu_only: false
      loose_tanh_threshold: null
      dynamic_bbps: false
      dynamic_options: [uniform, three_left, three_right]
      branching_point_node: ''
      branching_point_db: []
    input_split:
      enable_clip_domains: false
      split_hint: null
      reorder_bab: false
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_sum: false
      sb_primary_spec: null
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_iters: 1000000000.0
      bf_batch_size: 100000
      bf_zero_crossing_score: false
      touch_zero_score: 0
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 0.001
      sort_index: null
      sort_descending: true
      show_progress: false
      presplit_domains: null
      skip_getting_worst_domain: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: middle
  pgd_steps: 100
  pgd_restarts: 50
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_alpha_scale: false
  pgd_loss_mode: null
  pgd_restart_when_stuck: false
  enable_mip_attack: false
  adv_saver: default_adv_saver
  adv_verifier: default_adv_verifier
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    enabled: auto
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false
  biccos_mip_sanity_check: false
  sanity_check: 0
  z_split_enabled: false

Experiments at Wed Oct 30 06:08:17 2024 on n23g0012.hpc.itc.rwth-aachen.de
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten(start_dim=1, end_dim=-1)
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
Parameters:
  0.weight: shape torch.Size([16, 3, 4, 4])
  0.bias: shape torch.Size([16])
  2.weight: shape torch.Size([32, 16, 4, 4])
  2.bias: shape torch.Size([32])
  5.weight: shape torch.Size([100, 2048])
  5.bias: shape torch.Size([100])
  7.weight: shape torch.Size([10, 100])
  7.bias: shape torch.Size([10])
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308715)
############################
Internal results will be saved to ablation_results/cifar_cnn_a_adv4/biccos_all.out.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.39694118, -4.29481602, -2.76418877, -2.27564764, -2.33342099,
         -2.30766487, -2.16014171, -2.94787169, -5.16796875, -4.44396448]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [149]; unstable size 149; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 96, 1, 149] with unstable size 95 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 149] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [95]; unstable size 95; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 95] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 95] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.88380682,  1.74300051,  0.37986493, -0.05004513,  0.02511473,
         -0.22278094,  0.53882378,  2.69820690,  1.93023586]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.39694118, -4.29481602, -2.76418877, -2.27564764, -2.33342099,
         -2.30766487, -2.16014171, -2.94787169, -5.16796875, -4.44396448]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.39694166, -4.29481649, -2.76418877, -2.27564788, -2.33342123,
          -2.30766511, -2.16014194, -2.94787169, -5.16796970, -4.44396496],
         [-4.39694166, -4.29481649, -2.76418877, -2.27564788, -2.33342123,
          -2.30766511, -2.16014194, -2.94787169, -5.16796970, -4.44396496]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.05777335, -0.11550593]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.97301579, -1.96507931, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.96507931],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.94126987,
            -1.96507931, -1.97301579],
           ...,
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.93236721,
            -1.93236721, -1.96457338],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.95652175,
            -1.95652175, -1.96457338],
           [-1.96457338, -1.95652175, -1.94847023,  ..., -1.96457338,
            -1.96457338, -1.95652175],
           ...,
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.66266882, -1.64767623],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.68515754,
            -1.68515754, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           ...,
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.96507931, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.96507931],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.94126987,
            -1.96507931, -1.97301579],
           ...,
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.93236721,
            -1.93236721, -1.96457338],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.95652175,
            -1.95652175, -1.96457338],
           [-1.96457338, -1.95652175, -1.94847023,  ..., -1.96457338,
            -1.96457338, -1.95652175],
           ...,
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.66266882, -1.64767623],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.68515754,
            -1.68515754, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           ...,
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 1.1907 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.95612621, -10.30323696, -19.92111397, -18.71479988, -19.25238991,
         -18.84130478, -18.81987762, -19.40709114, -16.19555664, -10.55979347]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [560]; unstable size 560; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 560] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 560] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 560] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 164] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.78500080, -0.48810315,  8.46035385,  7.31322861,  7.79788828,
          7.43279171,  7.35444212,  7.89911509,  5.04577732]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.95612621, -10.30323696, -19.92111397, -18.71479988, -19.25238991,
         -18.84130478, -18.81987762, -19.40709114, -16.19555664, -10.55979347]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.95612621, -10.30323696, -19.92111397, -18.71479988, -19.25238991,
          -18.84130478, -18.81987762, -19.40709114, -16.19555664, -10.55979347]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.25655651]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.46507931, -1.30634916, -1.32222211,  ...,  0.10634929,
             0.02698422,  0.04285724],
           [-1.25873005, -1.35396814, -1.40158725,  ...,  0.31269848,
             0.28095245,  0.28095245],
           [ 0.15396833,  0.42380959,  0.29682547,  ..., -0.00476181,
            -0.17936498, -0.24285704],
           ...,
           [-0.86190474, -0.60793650, -0.38571417,  ...,  0.91587305,
             0.82063496,  0.83650798],
           [-0.43333322, -0.30634910, -0.22698402,  ...,  0.90000004,
             0.77301592,  0.75714290],
           [-0.33809513, -0.30634910, -0.27460307,  ...,  0.88412702,
             0.78888893,  0.67777783]],

          [[-1.44927526, -1.28824472, -1.30434775,  ...,  0.20933989,
             0.14492765,  0.20933989],
           [-1.35265696, -1.36875999, -1.33655393,  ...,  0.37037048,
             0.35426742,  0.40257660],
           [-1.32045078, -1.35265696, -1.41706920,  ...,  0.04830930,
            -0.14492741, -0.24154577],
           ...,
           [-0.75684375, -0.51529789, -0.30595800,  ...,  0.91787446,
             0.83735919,  0.90177143],
           [-0.32206106, -0.19323659, -0.14492741,  ...,  0.90177143,
             0.78904998,  0.82125610],
           [-0.17713353, -0.17713353, -0.16103047,  ...,  0.90177143,
             0.78904998,  0.74074084]],

          [[-1.54272878, -1.49775124, -1.49775124,  ...,  0.42128953,
             0.34632701,  0.37631202],
           [-1.51274371, -1.55772126, -1.52773619,  ...,  0.52623707,
             0.49625200,  0.49625200],
           [-1.13793111, -1.09295356, -1.12293863,  ...,  0.09145443,
            -0.08845562, -0.19340314],
           ...,
           [-0.59820086, -0.43328333, -0.28335828,  ...,  0.88605714,
             0.81109464,  0.88605714],
           [-0.23838064, -0.14842562, -0.11844061,  ...,  0.85607213,
             0.76611710,  0.81109464],
           [-0.07346311, -0.10344811, -0.08845562,  ...,  0.75112462,
             0.79610211,  0.73613209]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0778 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.22966528, -2.93601108, -5.89175558, -5.29639721, -5.30219364,
         -5.44004345, -5.44263363, -6.58539677, -3.89646339, -3.77071643]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [779]; unstable size 779; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 779] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 779] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 779] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 180] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.59069538, 1.86671638, 1.25944376, 1.32242680, 1.39030790, 1.32808542,
         2.61486292, 0.20729733, 0.53434551]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0687 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.81480026, -13.08546257,  -5.93704462,  -6.55520630,  -5.17417622,
          -6.50369120,  -7.90147018,  -4.16475153, -13.59602165, -12.16934872]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [408]; unstable size 408; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 408] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 408] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 408] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 166] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.20016575,  7.28631210,  0.47117397,  0.94903362,  0.90004665,
          2.26531672, -1.32159257,  7.77309608,  6.37577629]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.81480026, -13.08546257,  -5.93704462,  -6.55520630,  -5.17417622,
          -6.50369120,  -7.90147018,  -4.16475153, -13.59602165, -12.16934872]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.81480026, -13.08546257,  -5.93704462,  -6.55520630,  -5.17417622,
           -6.50369120,  -7.90147018,  -4.16475153, -13.59602165, -12.16934872]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.00942469]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0781 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 4, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.62150002, -7.81213474, -2.44004679, -4.24660492, -2.49402499,
         -4.36055088, -3.27121401, -4.32307100, -6.43716717, -7.05409288]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [478]; unstable size 478; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 168, 1, 478] with unstable size 167 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 478] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 478] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [167]; unstable size 167; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 167] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 167] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.56217003,  4.48248863, -0.30218950,  1.40200806,  1.50853717,
          0.35172987,  1.49864471,  3.28840876,  3.77214003]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.62150002, -7.81213474, -2.44004679, -4.24660492, -2.49402499,
         -4.36055088, -3.27121401, -4.32307100, -6.43716717, -7.05409288]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.62150002, -7.81213474, -2.44004679, -4.24660492, -2.49402499,
          -4.36055088, -3.27121401, -4.32307100, -6.43716717, -7.05409288]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05397820]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.45555562,  0.47142863,  0.50317466,  ...,  0.23333341,
             0.16984135, -0.06825387],
           [ 0.37619054,  0.55079371,  0.91587305,  ...,  0.39206356,
             0.59841275,  0.21746039],
           [ 0.47142863,  0.64603180,  0.70952386,  ...,  0.58253974,
             0.85238099,  0.82063496],
           ...,
           [ 0.32857150,  0.55079371,  0.18571436,  ..., -0.67142856,
            -1.22698402, -1.06825387],
           [ 0.47142863,  0.47142863,  0.21746039,  ..., -0.00476181,
            -1.14761901, -1.44920623],
           [ 0.45555562,  0.15396833, -0.11587292,  ...,  1.04285717,
             0.34444451, -0.54444444]],

          [[ 1.03059590,  1.09500813,  1.19162667,  ...,  1.12721443,
             0.96618366,  0.70853472],
           [ 1.03059590,  1.14331758,  1.28824508,  ...,  1.27214205,
             1.36876035,  0.98228669],
           [ 1.15942061,  1.22383285,  1.23993587,  ...,  1.38486338,
             1.54589403,  1.44927561],
           ...,
           [ 1.07890511,  1.28824508,  0.86956531,  ..., -0.70853460,
            -1.20772946, -0.96618354],
           [ 1.15942061,  1.22383285,  1.03059590,  ..., -0.19323659,
            -1.12721407, -1.33655393],
           [ 1.07890511,  0.93397754,  0.85346222,  ...,  0.99838978,
             0.28985518, -0.43478248]],

          [[ 0.10644694,  0.19640197,  0.42128953,  ..., -0.01349309,
             0.09145443, -0.31334329],
           [ 0.16641696,  0.45127454,  0.94602716,  ...,  0.19640197,
             0.75112462,  0.28635699],
           [ 0.16641696,  0.39130452,  0.48125952,  ...,  0.36131951,
             0.91604215,  1.03598225],
           ...,
           [ 0.06146942,  0.37631202,  0.07646193,  ..., -0.83808094,
            -1.27286363, -1.09295356],
           [ 0.19640197,  0.37631202, -0.11844061,  ..., -0.43328333,
            -1.27286363, -1.42278874],
           [ 0.25637197, -0.14842562, -0.73313338,  ...,  0.82608712,
            -0.02848560, -0.82308841]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0695 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 5, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.27786207, -6.88116646, -0.89845192, -1.13938844, -1.43722224,
         -1.21051192, -1.90963769, -2.81326365, -5.21822262, -6.45287228]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [544]; unstable size 544; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 158, 1, 544] with unstable size 157 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 544] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 544] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [157]; unstable size 157; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 157] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 157] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.32219422,  4.72163105, -0.79683375, -0.61578476, -0.54585779,
          0.10253280,  1.03042436,  3.03628159,  4.49144125]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.27786207, -6.88116646, -0.89845192, -1.13938844, -1.43722224,
         -1.21051192, -1.90963769, -2.81326365, -5.21822262, -6.45287228]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.27786303, -6.88116646, -0.89845204, -1.13938868, -1.43722200,
          -1.21051180, -1.90963745, -2.81326342, -5.21822357, -6.45287180],
         [-2.27786303, -6.88116646, -0.89845204, -1.13938868, -1.43722200,
          -1.21051180, -1.90963745, -2.81326342, -5.21822357, -6.45287180]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.53876996, -0.29783332, -0.22671020]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]],


         [[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]],


         [[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0899 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 6, vnnlib ID: 6 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.87105656,  -9.24069786, -12.81012917, -14.19307423, -13.00804424,
         -14.29401398, -13.74548244, -12.64065266, -10.14831066, -10.41334629]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [461]; unstable size 461; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 461] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 461] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 461] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 180] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.16120410,  2.30639267,  3.48796988,  2.47389174,  3.57205248,
          3.02852058,  1.96217537, -0.08661658, -0.06133330]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.87105656,  -9.24069786, -12.81012917, -14.19307423, -13.00804424,
         -14.29401398, -13.74548244, -12.64065266, -10.14831066, -10.41334629]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.87105656,  -9.24069881, -12.81012917, -14.19307613, -13.00804520,
          -14.29401493, -13.74548244, -12.64065266, -10.14831066, -10.41334724],
         [ -9.87105656,  -9.24069881, -12.81012917, -14.19307613, -13.00804520,
          -14.29401493, -13.74548244, -12.64065266, -10.14831066, -10.41334724]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.63035774,  0.27725410,  0.54229069]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]],


         [[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]],


         [[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0907 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 7, vnnlib ID: 7 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.80696106, -12.16898727,  -8.71912003,  -9.57566929,  -8.25873089,
          -9.65113735,  -7.55729103,  -9.84239197, -12.61449814, -12.48052692]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 445] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 445] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 445] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 185] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.65562153, 3.64904332, 0.87793177, 1.69124293, 0.44899166, 1.76054668,
         1.83400536, 4.22224379, 4.04899549]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0390 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 8, vnnlib ID: 8 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.20309448, -16.77884865, -16.19422150, -18.35743332, -17.19257736,
         -18.67626762, -18.95268631, -19.17121124, -14.57676315, -17.35821724]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [435]; unstable size 435; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 109, 1, 435] with unstable size 108 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 435] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 435] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [108]; unstable size 108; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 108] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 108] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.19290352, 3.64490747, 5.67161989, 4.61943054, 5.98125410, 6.26108789,
         6.53781796, 2.12617970, 4.84152603]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0723 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 9, vnnlib ID: 9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.81122494, -13.31232357,  -9.44408321,  -9.38682652,  -9.45646095,
          -9.43222713,  -9.70102882, -10.80779362, -10.39734077, -12.81629562]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [536]; unstable size 536; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 536] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 536] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 536] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 186] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.80840868,  3.05787325, -0.29071200, -0.06402752, -0.28085589,
         -0.10329640,  1.11252022,  0.34938395,  2.63984060]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.81122494, -13.31232357,  -9.44408321,  -9.38682652,  -9.45646095,
          -9.43222713,  -9.70102882, -10.80779362, -10.39734077, -12.81629562]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.81122589, -13.31232452,  -9.44408417,  -9.38682556,  -9.45646000,
           -9.43222809,  -9.70102978, -10.80779362, -10.39734077, -12.81629467],
         [-10.81122589, -13.31232452,  -9.44408417,  -9.38682556,  -9.45646000,
           -9.43222809,  -9.70102978, -10.80779362, -10.39734077, -12.81629467]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.01185608, -0.04540253,  0.02423191,  0.26880169]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0850 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 10, vnnlib ID: 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.81260872, -21.71220779, -15.47353172, -14.34746075, -17.37693214,
         -14.11986828, -17.64429283, -15.59352016, -20.41330528, -19.86410522]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [213]; unstable size 213; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 90, 1, 213] with unstable size 89 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 213] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 213] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [89]; unstable size 89; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 89] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 89] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.94948339,  5.68683910, -0.28762674, -1.39250016,  1.63050747,
         -1.61977458,  1.77867985,  4.45255136,  3.87534189]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.81260872, -21.71220779, -15.47353172, -14.34746075, -17.37693214,
         -14.11986828, -17.64429283, -15.59352016, -20.41330528, -19.86410522]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.81260681, -21.71220398, -15.47353172, -14.34746075, -17.37693214,
          -14.11986828, -17.64429092, -15.59352112, -20.41330528, -19.86410332],
         [-17.81260681, -21.71220398, -15.47353172, -14.34746075, -17.37693214,
          -14.11986828, -17.64429092, -15.59352112, -20.41330528, -19.86410332]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11998940, -1.24606037, -1.47365284]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0721 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 11, vnnlib ID: 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.67578030, -10.93076611,  -6.99289465,  -8.49931908,  -6.64460850,
          -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557758]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 527] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 527] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 191] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.17059851,  3.08206797,  1.16293228, -0.63490015,  1.28766203,
         -0.08916250,  1.48330283,  3.14107704,  2.88401604]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.67578030, -10.93076611,  -6.99289465,  -8.49931908,  -6.64460850,
          -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557758]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.67578030, -10.93076611,  -6.99289465,  -8.49932003,  -6.64460754,
           -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557854],
         [ -8.67578030, -10.93076611,  -6.99289465,  -8.49932003,  -6.64460754,
           -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557854]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.34828711,  0.25328970]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.79841268, -0.83015871, -0.84603173,  ..., -0.70317459,
            -0.76666665, -0.73492062],
           [-0.79841268, -0.83015871, -0.87777776,  ..., -0.84603173,
            -0.78253967, -0.75079364],
           [-0.81428570, -0.83015871, -0.89365077,  ..., -0.81428570,
            -0.75079364, -0.75079364],
           ...,
           [ 1.39206374,  1.23333359,  0.50317466,  ...,  0.21746039,
            -0.27460307, -0.63968253],
           [ 0.88412702,  0.43968260, -0.21111101,  ...,  1.45555580,
             1.26507962,  0.70952386],
           [ 0.36031753, -0.24285704, -0.68730158,  ...,  1.45555580,
             1.36031771,  1.67777801]],

          [[-0.16103047, -0.20933965, -0.22544271,  ..., -0.03220600,
            -0.09661824, -0.06441211],
           [-0.17713353, -0.20933965, -0.25764883,  ..., -0.17713353,
            -0.11272129, -0.09661824],
           [-0.19323659, -0.20933965, -0.27375188,  ..., -0.12882435,
            -0.08051517, -0.08051517],
           ...,
           [ 1.41706955,  1.28824508,  0.61191636,  ...,  0.51529801,
             0.14492765, -0.12882435],
           [ 0.99838978,  0.61191636,  0.03220624,  ...,  1.59420323,
             1.48148179,  1.03059590],
           [ 0.59581327,  0.08051541, -0.28985494,  ...,  1.49758482,
             1.40096653,  1.75523376]],

          [[-0.50824583, -0.55322337, -0.56821585,  ..., -0.43328333,
            -0.47826082, -0.40329832],
           [-0.52323836, -0.55322337, -0.59820086,  ..., -0.56821585,
            -0.49325335, -0.43328333],
           [-0.53823084, -0.55322337, -0.61319339,  ..., -0.53823084,
            -0.46326834, -0.41829082],
           ...,
           [ 0.99100471,  0.84107965,  0.21139447,  ...,  0.06146942,
            -0.28335828, -0.43328333],
           [ 0.61619210,  0.27136448, -0.25337315,  ...,  1.06596720,
             0.99100471,  0.63118458],
           [ 0.30134949, -0.14842562, -0.46326834,  ...,  1.03598225,
             0.97601217,  1.32084000]]],


         [[[-0.79841268, -0.83015871, -0.84603173,  ..., -0.70317459,
            -0.76666665, -0.73492062],
           [-0.79841268, -0.83015871, -0.87777776,  ..., -0.84603173,
            -0.78253967, -0.75079364],
           [-0.81428570, -0.83015871, -0.89365077,  ..., -0.81428570,
            -0.75079364, -0.75079364],
           ...,
           [ 1.39206374,  1.23333359,  0.50317466,  ...,  0.21746039,
            -0.27460307, -0.63968253],
           [ 0.88412702,  0.43968260, -0.21111101,  ...,  1.45555580,
             1.26507962,  0.70952386],
           [ 0.36031753, -0.24285704, -0.68730158,  ...,  1.45555580,
             1.36031771,  1.67777801]],

          [[-0.16103047, -0.20933965, -0.22544271,  ..., -0.03220600,
            -0.09661824, -0.06441211],
           [-0.17713353, -0.20933965, -0.25764883,  ..., -0.17713353,
            -0.11272129, -0.09661824],
           [-0.19323659, -0.20933965, -0.27375188,  ..., -0.12882435,
            -0.08051517, -0.08051517],
           ...,
           [ 1.41706955,  1.28824508,  0.61191636,  ...,  0.51529801,
             0.14492765, -0.12882435],
           [ 0.99838978,  0.61191636,  0.03220624,  ...,  1.59420323,
             1.48148179,  1.03059590],
           [ 0.59581327,  0.08051541, -0.28985494,  ...,  1.49758482,
             1.40096653,  1.75523376]],

          [[-0.50824583, -0.55322337, -0.56821585,  ..., -0.43328333,
            -0.47826082, -0.40329832],
           [-0.52323836, -0.55322337, -0.59820086,  ..., -0.56821585,
            -0.49325335, -0.43328333],
           [-0.53823084, -0.55322337, -0.61319339,  ..., -0.53823084,
            -0.46326834, -0.41829082],
           ...,
           [ 0.99100471,  0.84107965,  0.21139447,  ...,  0.06146942,
            -0.28335828, -0.43328333],
           [ 0.61619210,  0.27136448, -0.25337315,  ...,  1.06596720,
             0.99100471,  0.63118458],
           [ 0.30134949, -0.14842562, -0.46326834,  ...,  1.03598225,
             0.97601217,  1.32084000]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0764 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 12, vnnlib ID: 12 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.44387496, -2.72885609, -0.99721217, -1.58509552, -2.43515849,
         -1.54629862, -4.83794689, -0.93704540, -3.84024239, -1.71335077]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [377]; unstable size 377; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 108, 1, 377] with unstable size 107 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 377] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 377] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [107]; unstable size 107; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 107] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 107] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.08005628,  1.21544480, -0.21125805,  0.39911640,  1.30089641,
          0.36341107,  3.49761176,  2.30609989,  0.25215483]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.44387496, -2.72885609, -0.99721217, -1.58509552, -2.43515849,
         -1.54629862, -4.83794689, -0.93704540, -3.84024239, -1.71335077]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.34201694, -2.72922182, -0.92797631, -1.60974824, -2.46359158,
          -1.57565308, -4.80144787, -1.07656217, -3.71189547, -1.76798725]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.14858586]]], device='cuda:0')
number of violation:  1
Attack finished in 0.2543 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.3518 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 13, vnnlib ID: 13 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.19204140, -13.62735748, -16.19686890, -18.63919830, -17.46629143,
         -18.98551178, -17.92122269, -19.29259300, -14.41958141, -14.50180340]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [505]; unstable size 505; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 157, 1, 505] with unstable size 156 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 505] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 505] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [156]; unstable size 156; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 156] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 156] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.97732306,  1.82492638,  4.21384001,  3.08415365,  4.54206657,
          3.54140043,  4.89616013,  0.14590740,  0.62829101]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.19204140, -13.62735748, -16.19686890, -18.63919830, -17.46629143,
         -18.98551178, -17.92122269, -19.29259300, -14.41958141, -14.50180340]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.19204140, -13.62735748, -16.19686890, -18.63919830, -17.46629143,
          -18.98551178, -17.92122269, -19.29259300, -14.41958141, -14.50180340]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.43531609]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[0.45555562, 0.40793657, 0.42380959,  ..., 0.75714290,
            0.74126989, 0.70952386],
           [0.47142863, 0.42380959, 0.43968260,  ..., 0.72539687,
            0.69365084, 0.66190481],
           [0.53492069, 0.50317466, 0.55079371,  ..., 0.70952386,
            0.69365084, 0.66190481],
           ...,
           [0.63015878, 0.64603180, 0.66190481,  ..., 0.64603180,
            0.67777783, 0.66190481],
           [0.64603180, 0.61428577, 0.59841275,  ..., 0.63015878,
            0.64603180, 0.66190481],
           [0.72539687, 0.66190481, 0.63015878,  ..., 0.63015878,
            0.59841275, 0.64603180]],

          [[0.48309189, 0.43478271, 0.45088577,  ..., 0.75684386,
            0.72463775, 0.69243163],
           [0.49919492, 0.45088577, 0.46698883,  ..., 0.70853472,
            0.67632860, 0.64412248],
           [0.56360716, 0.53140104, 0.57971025,  ..., 0.69243163,
            0.67632860, 0.64412248],
           ...,
           [0.61191636, 0.62801939, 0.64412248,  ..., 0.62801939,
            0.66022551, 0.64412248],
           [0.62801939, 0.59581327, 0.57971025,  ..., 0.61191636,
            0.62801939, 0.64412248],
           [0.70853472, 0.64412248, 0.61191636,  ..., 0.61191636,
            0.57971025, 0.62801939]],

          [[0.66116959, 0.61619210, 0.63118458,  ..., 0.76611710,
            0.81109464, 0.79610211],
           [0.67616212, 0.63118458, 0.64617711,  ..., 0.76611710,
            0.78110963, 0.75112462],
           [0.73613209, 0.70614707, 0.75112462,  ..., 0.79610211,
            0.78110963, 0.75112462],
           ...,
           [0.66116959, 0.67616212, 0.72113961,  ..., 0.73613209,
            0.76611710, 0.75112462],
           [0.67616212, 0.64617711, 0.66116959,  ..., 0.72113961,
            0.73613209, 0.75112462],
           [0.75112462, 0.69115460, 0.69115460,  ..., 0.72113961,
            0.69115460, 0.73613209]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0711 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 14, vnnlib ID: 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.37443638, -4.00673676, -7.36628103, -7.49868298, -7.54243469,
         -7.68763971, -6.80421257, -6.88844681, -6.20179558, -2.71405101]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [421]; unstable size 421; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 163, 1, 421] with unstable size 162 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 421] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 421] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [162]; unstable size 162; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 162] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 162] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.00862336, 0.99976742, 3.98278904, 4.17501926, 4.15570545, 4.36021328,
         3.39363956, 3.39964390, 2.97036386]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0678 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 15, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.54657602, -8.36112595, -3.46242666, -2.87187982, -3.89005208,
         -2.88797569, -4.48041725, -3.49748850, -7.86016560, -7.33907175]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 138, 1, 403] with unstable size 137 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 403] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [137]; unstable size 137; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 137] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 137] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.24231577e+00, 4.76083994e+00, 2.99191415e-01, 6.74156666e-01,
         1.52279437e-03, 1.30786681e+00, 2.09971309e-01, 4.47964859e+00,
         3.82559681e+00]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0654 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 16, vnnlib ID: 16 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.45027256, -14.85908413,  -9.90371609, -10.28254223,  -9.57412910,
         -10.25789833,  -9.99507999, -11.03962898, -13.74928951, -14.72655964]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [731]; unstable size 731; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 228, 1, 731] with unstable size 227 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 731] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 731] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [227]; unstable size 227; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 227] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 227] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.43560493,  3.57842565, -0.70241714, -1.03279150, -0.04905008,
         -0.72894001,  0.25918615,  2.60397291,  3.52938485]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.45027256, -14.85908413,  -9.90371609, -10.28254223,  -9.57412910,
         -10.25789833,  -9.99507999, -11.03962898, -13.74928951, -14.72655964]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.45027161, -14.85908413,  -9.90371609, -10.28254223,  -9.57412815,
          -10.25789928,  -9.99507904, -11.03962803, -13.74928951, -14.72655869],
         [-12.45027161, -14.85908413,  -9.90371609, -10.28254223,  -9.57412815,
          -10.25789928,  -9.99507904, -11.03962803, -13.74928951, -14.72655869]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.37882614, -0.70841408, -0.02464294, -0.28746319]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0738 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 17, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.49743176,  -9.17833710, -13.67570496, -15.20650959, -13.95639992,
         -15.42528915, -14.06286907, -16.15926170, -11.69949532, -11.19551754]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [373]; unstable size 373; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 176, 1, 373] with unstable size 175 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 373] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 373] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [175]; unstable size 175; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 175] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 175] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.61845303, 3.61285543, 5.11308956, 3.87147617, 5.31955910, 4.01641273,
         5.91223764, 1.82210541, 1.76377130]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0678 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 18, vnnlib ID: 18 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.34389973,  -9.96172714,  -4.05279398,  -5.78736115,  -3.97068667,
          -5.86786509,  -3.54266286,  -5.87278652, -10.21232128,  -9.72180271]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [483]; unstable size 483; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 483] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 483] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 483] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 208] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.06753755, 5.54263258, 0.10674787, 1.85941625, 0.03022194, 1.92791629,
         1.74811339, 5.96987152, 5.31630135]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0653 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 19, vnnlib ID: 19 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.71088123, -13.29491711,  -7.63611126,  -7.11927986,  -7.38616085,
          -7.11191607,  -7.48660755,  -8.97584915, -11.56023979, -13.25586891]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [539]; unstable size 539; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 221, 1, 539] with unstable size 220 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 539] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 539] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [220]; unstable size 220; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 220] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 220] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.10444093e+00,  5.31401730e+00,  2.42111683e-01, -5.13114929e-02,
         -2.78017223e-02, -2.51591206e-03,  1.45366096e+00,  3.80054927e+00,
          5.33967876e+00]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.71088123, -13.29491711,  -7.63611126,  -7.11927986,  -7.38616085,
          -7.11191607,  -7.48660755,  -8.97584915, -11.56023979, -13.25586891]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.71088123, -13.29491806,  -7.63611174,  -7.11928177,  -7.38616180,
           -7.11191511,  -7.48660755,  -8.97585011, -11.56023979, -13.25586891],
         [-10.71088123, -13.29491806,  -7.63611174,  -7.11928177,  -7.38616180,
           -7.11191511,  -7.48660755,  -8.97585011, -11.56023979, -13.25586891]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.26688004, -0.00736666,  0.36732578]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.79364979e-01, -2.42857039e-01, -2.58730054e-01,  ...,
            -4.96825397e-01, -6.23809516e-01, -8.46031725e-01],
           [-8.77777755e-01, -1.02063489e+00, -1.02063489e+00,  ...,
            -3.38095129e-01, -3.69841158e-01, -5.92063487e-01],
           [-1.02063489e+00, -9.88888860e-01, -9.88888860e-01,  ...,
            -1.79364979e-01, -1.63491964e-01, -4.33333218e-01],
           ...,
           [ 2.49206424e-01,  2.65079439e-01,  3.12698483e-01,  ...,
             2.17460394e-01,  2.33333409e-01,  2.80952454e-01],
           [ 1.38095319e-01,  3.28571498e-01,  3.60317528e-01,  ...,
             3.12698483e-01,  3.28571498e-01,  3.12698483e-01],
           [ 4.55555618e-01,  5.50793707e-01,  6.77777827e-01,  ...,
             5.03174663e-01,  5.03174663e-01,  4.71428633e-01]],

          [[-2.73751885e-01, -3.22061062e-01, -3.54267180e-01,  ...,
            -6.60225391e-01, -7.56843746e-01, -9.66183543e-01],
           [-1.30434775e+00, -1.41706920e+00, -1.41706920e+00,  ...,
            -5.47504008e-01, -5.47504008e-01, -7.24637628e-01],
           [-1.44927526e+00, -1.40096617e+00, -1.40096617e+00,  ...,
            -4.34782475e-01, -4.02576357e-01, -6.28019273e-01],
           ...,
           [-3.22059989e-02, -3.22059989e-02, -1.61029361e-02,  ...,
            -1.61030471e-01, -1.12721294e-01,  1.61031820e-02],
           [-1.93236589e-01, -1.61029361e-02, -3.22059989e-02,  ...,
             1.22934580e-07,  4.83092964e-02,  6.44123554e-02],
           [ 2.25442946e-01,  2.89855182e-01,  3.86473536e-01,  ...,
             3.38164359e-01,  3.38164359e-01,  3.05958241e-01]],

          [[ 4.64769229e-02,  1.49940979e-03, -1.34930937e-02,  ...,
            -8.08095932e-01, -8.38080943e-01, -9.58020985e-01],
           [-8.68065953e-01, -1.04797614e+00, -1.10794616e+00,  ...,
            -8.08095932e-01, -7.48125911e-01, -8.53073418e-01],
           [-1.07796109e+00, -1.09295356e+00, -1.13793111e+00,  ...,
            -7.48125911e-01, -6.43178403e-01, -7.93103397e-01],
           ...,
           [-1.93403140e-01, -2.68365651e-01, -2.98350781e-01,  ...,
            -4.63268340e-01, -4.03298318e-01, -2.68365651e-01],
           [-4.18290824e-01, -3.43328297e-01, -3.28335792e-01,  ...,
            -3.28335792e-01, -2.83358276e-01, -2.23388135e-01],
           [ 3.14844176e-02, -4.34781015e-02,  1.36431947e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.36431947e-01]]],


         [[[-1.79364979e-01, -2.42857039e-01, -2.58730054e-01,  ...,
            -4.96825397e-01, -6.23809516e-01, -8.46031725e-01],
           [-8.77777755e-01, -1.02063489e+00, -1.02063489e+00,  ...,
            -3.38095129e-01, -3.69841158e-01, -5.92063487e-01],
           [-1.02063489e+00, -9.88888860e-01, -9.88888860e-01,  ...,
            -1.79364979e-01, -1.63491964e-01, -4.33333218e-01],
           ...,
           [ 2.49206424e-01,  2.65079439e-01,  3.12698483e-01,  ...,
             2.17460394e-01,  2.33333409e-01,  2.80952454e-01],
           [ 1.38095319e-01,  3.28571498e-01,  3.60317528e-01,  ...,
             3.12698483e-01,  3.28571498e-01,  3.12698483e-01],
           [ 4.55555618e-01,  5.50793707e-01,  6.77777827e-01,  ...,
             5.03174663e-01,  5.03174663e-01,  4.71428633e-01]],

          [[-2.73751885e-01, -3.22061062e-01, -3.54267180e-01,  ...,
            -6.60225391e-01, -7.56843746e-01, -9.66183543e-01],
           [-1.30434775e+00, -1.41706920e+00, -1.41706920e+00,  ...,
            -5.47504008e-01, -5.47504008e-01, -7.24637628e-01],
           [-1.44927526e+00, -1.40096617e+00, -1.40096617e+00,  ...,
            -4.34782475e-01, -4.02576357e-01, -6.28019273e-01],
           ...,
           [-3.22059989e-02, -3.22059989e-02, -1.61029361e-02,  ...,
            -1.61030471e-01, -1.12721294e-01,  1.61031820e-02],
           [-1.93236589e-01, -1.61029361e-02, -3.22059989e-02,  ...,
             1.22934580e-07,  4.83092964e-02,  6.44123554e-02],
           [ 2.25442946e-01,  2.89855182e-01,  3.86473536e-01,  ...,
             3.38164359e-01,  3.38164359e-01,  3.05958241e-01]],

          [[ 4.64769229e-02,  1.49940979e-03, -1.34930937e-02,  ...,
            -8.08095932e-01, -8.38080943e-01, -9.58020985e-01],
           [-8.68065953e-01, -1.04797614e+00, -1.10794616e+00,  ...,
            -8.08095932e-01, -7.48125911e-01, -8.53073418e-01],
           [-1.07796109e+00, -1.09295356e+00, -1.13793111e+00,  ...,
            -7.48125911e-01, -6.43178403e-01, -7.93103397e-01],
           ...,
           [-1.93403140e-01, -2.68365651e-01, -2.98350781e-01,  ...,
            -4.63268340e-01, -4.03298318e-01, -2.68365651e-01],
           [-4.18290824e-01, -3.43328297e-01, -3.28335792e-01,  ...,
            -3.28335792e-01, -2.83358276e-01, -2.23388135e-01],
           [ 3.14844176e-02, -4.34781015e-02,  1.36431947e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.36431947e-01]]],


         [[[-1.79364979e-01, -2.42857039e-01, -2.58730054e-01,  ...,
            -4.96825397e-01, -6.23809516e-01, -8.46031725e-01],
           [-8.77777755e-01, -1.02063489e+00, -1.02063489e+00,  ...,
            -3.38095129e-01, -3.69841158e-01, -5.92063487e-01],
           [-1.02063489e+00, -9.88888860e-01, -9.88888860e-01,  ...,
            -1.79364979e-01, -1.63491964e-01, -4.33333218e-01],
           ...,
           [ 2.49206424e-01,  2.65079439e-01,  3.12698483e-01,  ...,
             2.17460394e-01,  2.33333409e-01,  2.80952454e-01],
           [ 1.38095319e-01,  3.28571498e-01,  3.60317528e-01,  ...,
             3.12698483e-01,  3.28571498e-01,  3.12698483e-01],
           [ 4.55555618e-01,  5.50793707e-01,  6.77777827e-01,  ...,
             5.03174663e-01,  5.03174663e-01,  4.71428633e-01]],

          [[-2.73751885e-01, -3.22061062e-01, -3.54267180e-01,  ...,
            -6.60225391e-01, -7.56843746e-01, -9.66183543e-01],
           [-1.30434775e+00, -1.41706920e+00, -1.41706920e+00,  ...,
            -5.47504008e-01, -5.47504008e-01, -7.24637628e-01],
           [-1.44927526e+00, -1.40096617e+00, -1.40096617e+00,  ...,
            -4.34782475e-01, -4.02576357e-01, -6.28019273e-01],
           ...,
           [-3.22059989e-02, -3.22059989e-02, -1.61029361e-02,  ...,
            -1.61030471e-01, -1.12721294e-01,  1.61031820e-02],
           [-1.93236589e-01, -1.61029361e-02, -3.22059989e-02,  ...,
             1.22934580e-07,  4.83092964e-02,  6.44123554e-02],
           [ 2.25442946e-01,  2.89855182e-01,  3.86473536e-01,  ...,
             3.38164359e-01,  3.38164359e-01,  3.05958241e-01]],

          [[ 4.64769229e-02,  1.49940979e-03, -1.34930937e-02,  ...,
            -8.08095932e-01, -8.38080943e-01, -9.58020985e-01],
           [-8.68065953e-01, -1.04797614e+00, -1.10794616e+00,  ...,
            -8.08095932e-01, -7.48125911e-01, -8.53073418e-01],
           [-1.07796109e+00, -1.09295356e+00, -1.13793111e+00,  ...,
            -7.48125911e-01, -6.43178403e-01, -7.93103397e-01],
           ...,
           [-1.93403140e-01, -2.68365651e-01, -2.98350781e-01,  ...,
            -4.63268340e-01, -4.03298318e-01, -2.68365651e-01],
           [-4.18290824e-01, -3.43328297e-01, -3.28335792e-01,  ...,
            -3.28335792e-01, -2.83358276e-01, -2.23388135e-01],
           [ 3.14844176e-02, -4.34781015e-02,  1.36431947e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.36431947e-01]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0738 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 20, vnnlib ID: 20 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.09629250, -13.56788158,  -9.81583977, -10.23123169,  -9.89592838,
         -10.26214600,  -8.58048058, -11.66953659, -13.15151978, -13.97097874]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [556]; unstable size 556; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 233, 1, 556] with unstable size 232 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 556] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 556] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [232]; unstable size 232; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 232] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.87823057, 4.08753538, 0.91786969, 1.31721747, 0.97389340, 1.33815885,
         2.53606868, 3.77071428, 4.53204918]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0647 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 21, vnnlib ID: 21 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.60548306, -4.32711458, -0.42147765, -0.48017693, -0.49338007,
         -0.45899674, -1.75417352, -0.30924958, -4.08429527, -3.55203962]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [430]; unstable size 430; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 430] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 430] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 430] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 166] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.60546803,  3.26384115, -0.35429394,  0.00655459, -0.27650297,
          0.93680203, -0.40704596,  3.07671976,  2.56389141]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.60548306, -4.32711458, -0.42147765, -0.48017693, -0.49338007,
         -0.45899674, -1.75417352, -0.30924958, -4.08429527, -3.55203962]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.60548258, -4.32711411, -0.42147765, -0.48017645, -0.49337971,
          -0.45899615, -1.75417328, -0.30924922, -4.08429432, -3.55203867],
         [-3.60548258, -4.32711411, -0.42147765, -0.48017645, -0.49337971,
          -0.45899615, -1.75417328, -0.30924922, -4.08429432, -3.55203867]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.03751850,  0.03438357, -0.14974692]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.83015871, -1.79841268, -1.75079370,  ..., -1.79841268,
            -1.76666665, -1.75079370],
           [-1.79841268, -1.78253973, -1.78253973,  ..., -1.78253973,
            -1.73492062, -1.71904767],
           [-1.78253973, -1.73492062, -1.71904767,  ..., -1.81428576,
            -1.81428576, -1.83015871],
           ...,
           [-1.03650784, -1.17936504, -1.29047608,  ..., -1.08412695,
            -1.24285710, -1.08412695],
           [-0.95714283, -1.03650784, -1.09999990,  ..., -0.87777776,
            -0.94126981, -0.86190474],
           [-0.71904761, -0.73492062, -0.63968253,  ..., -0.60793650,
            -0.68730158, -0.67142856]],

          [[-1.78743970, -1.81964576, -1.80354273,  ..., -1.77133656,
            -1.78743970, -1.78743970],
           [-1.78743970, -1.78743970, -1.78743970,  ..., -1.70692432,
            -1.77133656, -1.78743970],
           [-1.80354273, -1.73913050, -1.72302747,  ..., -1.78743970,
            -1.77133656, -1.78743970],
           ...,
           [-0.93397743, -1.04669881, -1.17552328,  ..., -1.25603855,
            -1.28824472, -1.07890499],
           [-0.91787434, -1.01449275, -1.06280184,  ..., -0.95008045,
            -0.91787434, -0.80515295],
           [-0.75684375, -0.80515295, -0.69243151,  ..., -0.64412236,
            -0.66022539, -0.61191624]],

          [[-1.46776617, -1.45277369, -1.39280367,  ..., -1.34782624,
            -1.36281872, -1.34782624],
           [-1.45277369, -1.39280367, -1.33283365,  ..., -1.33283365,
            -1.31784117, -1.31784117],
           [-1.45277369, -1.33283365, -1.27286363,  ..., -1.46776617,
            -1.39280367, -1.37781119],
           ...,
           [-1.07796109, -1.07796109, -1.13793111,  ..., -1.22788620,
            -1.28785622, -1.12293863],
           [-1.15292358, -1.18290865, -1.18290865,  ..., -1.10794616,
            -1.13793111, -1.06296861],
           [-1.07796109, -1.07796109, -0.94302845,  ..., -0.95802099,
            -1.01799107, -1.00299859]]],


         [[[-1.83015871, -1.79841268, -1.75079370,  ..., -1.79841268,
            -1.76666665, -1.75079370],
           [-1.79841268, -1.78253973, -1.78253973,  ..., -1.78253973,
            -1.73492062, -1.71904767],
           [-1.78253973, -1.73492062, -1.71904767,  ..., -1.81428576,
            -1.81428576, -1.83015871],
           ...,
           [-1.03650784, -1.17936504, -1.29047608,  ..., -1.08412695,
            -1.24285710, -1.08412695],
           [-0.95714283, -1.03650784, -1.09999990,  ..., -0.87777776,
            -0.94126981, -0.86190474],
           [-0.71904761, -0.73492062, -0.63968253,  ..., -0.60793650,
            -0.68730158, -0.67142856]],

          [[-1.78743970, -1.81964576, -1.80354273,  ..., -1.77133656,
            -1.78743970, -1.78743970],
           [-1.78743970, -1.78743970, -1.78743970,  ..., -1.70692432,
            -1.77133656, -1.78743970],
           [-1.80354273, -1.73913050, -1.72302747,  ..., -1.78743970,
            -1.77133656, -1.78743970],
           ...,
           [-0.93397743, -1.04669881, -1.17552328,  ..., -1.25603855,
            -1.28824472, -1.07890499],
           [-0.91787434, -1.01449275, -1.06280184,  ..., -0.95008045,
            -0.91787434, -0.80515295],
           [-0.75684375, -0.80515295, -0.69243151,  ..., -0.64412236,
            -0.66022539, -0.61191624]],

          [[-1.46776617, -1.45277369, -1.39280367,  ..., -1.34782624,
            -1.36281872, -1.34782624],
           [-1.45277369, -1.39280367, -1.33283365,  ..., -1.33283365,
            -1.31784117, -1.31784117],
           [-1.45277369, -1.33283365, -1.27286363,  ..., -1.46776617,
            -1.39280367, -1.37781119],
           ...,
           [-1.07796109, -1.07796109, -1.13793111,  ..., -1.22788620,
            -1.28785622, -1.12293863],
           [-1.15292358, -1.18290865, -1.18290865,  ..., -1.10794616,
            -1.13793111, -1.06296861],
           [-1.07796109, -1.07796109, -0.94302845,  ..., -0.95802099,
            -1.01799107, -1.00299859]]],


         [[[-1.83015871, -1.79841268, -1.75079370,  ..., -1.79841268,
            -1.76666665, -1.75079370],
           [-1.79841268, -1.78253973, -1.78253973,  ..., -1.78253973,
            -1.73492062, -1.71904767],
           [-1.78253973, -1.73492062, -1.71904767,  ..., -1.81428576,
            -1.81428576, -1.83015871],
           ...,
           [-1.03650784, -1.17936504, -1.29047608,  ..., -1.08412695,
            -1.24285710, -1.08412695],
           [-0.95714283, -1.03650784, -1.09999990,  ..., -0.87777776,
            -0.94126981, -0.86190474],
           [-0.71904761, -0.73492062, -0.63968253,  ..., -0.60793650,
            -0.68730158, -0.67142856]],

          [[-1.78743970, -1.81964576, -1.80354273,  ..., -1.77133656,
            -1.78743970, -1.78743970],
           [-1.78743970, -1.78743970, -1.78743970,  ..., -1.70692432,
            -1.77133656, -1.78743970],
           [-1.80354273, -1.73913050, -1.72302747,  ..., -1.78743970,
            -1.77133656, -1.78743970],
           ...,
           [-0.93397743, -1.04669881, -1.17552328,  ..., -1.25603855,
            -1.28824472, -1.07890499],
           [-0.91787434, -1.01449275, -1.06280184,  ..., -0.95008045,
            -0.91787434, -0.80515295],
           [-0.75684375, -0.80515295, -0.69243151,  ..., -0.64412236,
            -0.66022539, -0.61191624]],

          [[-1.46776617, -1.45277369, -1.39280367,  ..., -1.34782624,
            -1.36281872, -1.34782624],
           [-1.45277369, -1.39280367, -1.33283365,  ..., -1.33283365,
            -1.31784117, -1.31784117],
           [-1.45277369, -1.33283365, -1.27286363,  ..., -1.46776617,
            -1.39280367, -1.37781119],
           ...,
           [-1.07796109, -1.07796109, -1.13793111,  ..., -1.22788620,
            -1.28785622, -1.12293863],
           [-1.15292358, -1.18290865, -1.18290865,  ..., -1.10794616,
            -1.13793111, -1.06296861],
           [-1.07796109, -1.07796109, -0.94302845,  ..., -0.95802099,
            -1.01799107, -1.00299859]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0707 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 22, vnnlib ID: 22 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.63814020, -7.09170341, -5.93957424, -7.54413128, -6.39586449,
         -7.70300293, -8.28325272, -8.31898880, -2.61777067, -6.41391087]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [452]; unstable size 452; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 159, 1, 452] with unstable size 158 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 452] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 452] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [158]; unstable size 158; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 158] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 158] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.56345731, 3.82402468, 2.68081284, 4.30023193, 3.12777853, 4.44676113,
         5.01942158, 4.85944176, 3.30816436]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0694 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 23, vnnlib ID: 23 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.14455748, -5.84289455, -2.86230087, -2.12573886, -3.17329073,
         -2.12218904, -4.42577553, -2.79664421, -3.31719923, -4.93841982]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 157, 1, 427] with unstable size 156 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 427] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [156]; unstable size 156; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 156] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 156] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.56514984,  3.04386854,  0.44034660, -0.01067106,  0.67077875,
          1.90764391,  0.08044988,  0.57008082,  2.19505000]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.14455748, -5.84289455, -2.86230087, -2.12573886, -3.17329073,
         -2.12218904, -4.42577553, -2.79664421, -3.31719923, -4.93841982]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.16760874, -5.79149437, -2.92998362, -2.25009131, -3.25186229,
          -2.25700569, -4.37982655, -2.96575403, -3.27511168, -4.89296436]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00691438]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0698 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 24, vnnlib ID: 24 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.53025484,  -6.93467522,  -8.63117790, -10.59670353,  -8.79525089,
         -10.72763157,  -9.39887810, -10.28261948,  -8.60503674,  -7.72983885]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [710]; unstable size 710; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 224, 1, 710] with unstable size 223 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 710] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 710] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [223]; unstable size 223; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 223] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 223] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.10017061,  0.81654787,  2.80445457,  0.97049618,  2.92300224,
          1.57911110,  2.45411777,  1.05910635,  0.55258167]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.53025484,  -6.93467522,  -8.63117790, -10.59670353,  -8.79525089,
         -10.72763157,  -9.39887810, -10.28261948,  -8.60503674,  -7.72983885]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.20it/s]100%|██████████| 1/1 [00:00<00:00,  9.20it/s]
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/cuts/infered_cuts.py:406: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(history[3]),
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.62336159,  -7.42845249,  -8.70991421, -10.74260235,  -8.88674164,
          -10.87233353,  -9.51017857, -10.43375587,  -8.81735802,  -8.17679691]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.19490910]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1112 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.264002799987793
alpha/beta optimization time: 3.608212947845459
initial alpha-crown bounds: tensor([[-0.06241941,  0.84011030,  2.82575083,  0.99328089,  2.94463801,
          1.60075665,  2.47774148,  1.08523774,  0.55890656]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.06241941452026367
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 196.21074867248535
Verifying property 0 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.06241941]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.53025484,  -6.93467522,  -8.63117790, -10.59670353,  -8.79525089,
        -10.72763157,  -9.39887810, -10.28261948,  -8.60503674,  -7.72983885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.06241941]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 710
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 216
Node /15 input 0: size torch.Size([100]) unstable 4
-----------------
# of unstable neurons: 930
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001308917999267578
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06241941452026367
10 lb beta sum: 0.0, worst -0.062426090240478516
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.5575    transfer 0.0001    finalize 0.0003    func 0.5581    
Accumulated time: func 0.5581    prepare 0.0002    bound 0.5575    transfer 0.0001    finalize 0.0003    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 90] 
split level 2: [/input-8, 1883] 
split level 3: [/input-8, 1765] 
split level 4: [/input-8, 1764] 
split level 5: [/input-8, 45] 
split level 6: [/input-8, 1829] 
split level 7: [/input-8, 1875] 
split level 8: [/input-8, 1881] 
split level 9: [/input-8, 1766] 
split level 10: [/input-8, 1830] 
split level 11: [/input, 999] 
split level 12: [/input-8, 1206] 
split level 13: [/input-8, 1760] 
split level 14: [/input-8, 53] 
split level 15: [/input-8, 1836] 
split level 16: [/input-8, 1823] 
split level 17: [/input, 965] 
split level 18: [/input-8, 1827] 
split level 19: [/input-8, 1130] 
split level 20: [/input-8, 1522] 
split level 21: [/input-8, 1694] 
split level 22: [/input, 1255] 
split level 23: [/input, 966] 
split level 24: [/input-8, 1769] 
split level 25: [/input-8, 1523] 
split level 26: [/input-8, 1831] 
split level 27: [/input, 1000] 
split level 28: [/input, 1254] 
split level 29: [/input-8, 44] 
split level 30: [/input-8, 274] 
split level 31: [/input-8, 1710] 
split level 32: [/input, 983] 
split level 33: [/input-8, 1884] 
split level 34: [/input, 986] 
split level 35: [/input, 1001] 
split level 36: [/input, 1002] 
split level 37: [/input, 1253] 
split level 38: [/input-8, 140] 
split level 39: [/input, 2457] 
split level 40: [/input, 2693] 
split level 41: [/input, 971] 
split level 42: [/input, 982] 
split level 43: [/input, 744] 
split level 44: [/input-8, 1880] 
split level 45: [/input, 1238] 
split level 46: [/input-8, 1524] 
split level 47: [/input, 1003] 
split level 48: [/input, 2025] 
split level 49: [/input, 2163] 
split level 50: [/input, 2026] 
split level 51: [/input-8, 1757] 
split level 52: [/input, 981] 
split level 53: [/input-8, 22] 
split level 54: [/input-8, 35] 
split level 55: [/input, 985] 
split level 56: [/input, 987] 
split level 57: [/input, 743] 
split level 58: [/input-8, 1444] 
split level 59: [/input, 887] 
split level 60: [/input, 993] 
split level 61: [/input, 2039] 
split level 62: [/input-8, 1778] 
split level 63: [/input-8, 29] 
split level 64: [/input, 1240] 
split level 65: [/input-8, 1899] 
split level 66: [/input, 1226] 
split level 67: [/input, 2022] 
split level 68: [/input-8, 1603] 
split level 69: [/input-8, 123] 
split level 70: [/input-8, 1998] 
split level 71: [/input, 2920] 
split level 72: [/input, 2021] 
split level 73: [/input, 2023] 
split level 74: [/input-8, 745] 
split level 75: [/input, 3218] 
split level 76: [/input-8, 107] 
split level 77: [/input-8, 1214] 
split level 78: [/input, 1261] 
split level 79: [/input-8, 1463] 
split level 80: [/input, 1269] 
split level 81: [/input, 2028] 
split level 82: [/input, 1268] 
split level 83: [/input, 2040] 
split level 84: [/input, 1912] 
split level 85: [/input, 1220] 
split level 86: [/input, 1419] 
split level 87: [/input-8, 766] 
split level 88: [/input-8, 1521] 
split level 89: [/input, 970] 
split level 90: [/input, 741] 
split level 91: [/input, 988] 
split level 92: [/input, 1219] 
split level 93: [/input-8, 1999] 
split level 94: [/input, 2727] 
split level 95: [/input-8, 1215] 
split level 96: [/input-8, 1291] 
split level 97: [/input, 2037] 
split level 98: [/input, 1404] 
split level 99: [/input, 2020] 
split level 100: [/input, 710] 
split level 101: [/input, 676] 
split level 102: [/input-8, 1997] 
split level 103: [/input, 2044] 
split level 104: [/input, 989] 
split level 105: [/input, 1747] 
split level 106: [/input, 4070] 
split level 107: [/input-8, 1572] 
split level 108: [/input, 1386] 
split level 109: [/input, 1204] 
split level 110: [/input, 745] 
split level 111: [/input, 1746] 
split level 112: [/input-8, 1756] 
split level 113: [/input, 1370] 
split level 114: [/input-8, 930] 
split level 115: [/input, 742] 
split level 116: [/input, 4022] 
split level 117: [/input, 2010] 
split level 118: [/input, 4072] 
split level 119: [/input, 2011] 
split level 120: [/input, 950] 
split level 121: [/input, 721] 
split level 122: [/input, 2036] 
split level 123: [/input, 3282] 
split level 124: [/input-8, 116] 
split level 125: [/input-8, 1956] 
split level 126: [/input, 1277] 
split level 127: [/input, 2029] 
split level 128: [/input, 630] 
split level 129: [/input-8, 122] 
split level 130: [/input, 760] 
split level 131: [/input, 2041] 
split level 132: [/input-8, 962] 
split level 133: [/input, 1988] 
split level 134: [/input, 1246] 
split level 135: [/input, 1749] 
split level 136: [/input, 977] 
split level 137: [/input-8, 21] 
split level 138: [/input, 3234] 
split level 139: [/input, 709] 
split level 140: [/input, 1496] 
split level 141: [/input, 2019] 
split level 142: [/input, 2043] 
split level 143: [/input, 747] 
split level 144: [/input, 2009] 
split level 145: [/input, 3132] 
split level 146: [/input, 2042] 
split level 147: [/input, 1987] 
split level 148: [/input, 1420] 
split level 149: [/input, 748] 
split level 150: [/input, 1461] 
split level 151: [/input, 1223] 
split level 152: [/input, 2045] 
split level 153: [/input, 1896] 
split level 154: [/input-8, 964] 
split level 155: [/input-8, 765] 
split level 156: [/input, 2035] 
split level 157: [/input, 1911] 
split level 158: [/input-8, 761] 
split level 159: [/input, 3233] 
split level 160: [/input, 2017] 
split level 161: [/input, 652] 
split level 162: [/input, 2013] 
split level 163: [/input, 1448] 
split level 164: [/input, 1989] 
split level 165: [/input, 1384] 
split level 166: [/input, 746] 
split level 167: [/input, 1245] 
split level 168: [/input, 633] 
split level 169: [/input-8, 1976] 
split level 170: [/input, 491] 
split level 171: [/input-8, 963] 
split level 172: [/input, 724] 
split level 173: [/input, 3281] 
split level 174: [/input, 2145] 
split level 175: [/input, 1506] 
split level 176: [/input, 3261] 
split level 177: [/input, 1349] 
split level 178: [/input, 2674] 
split level 179: [/input, 1334] 
split level 180: [/input-8, 19] 
split level 181: [/input, 1275] 
split level 182: [/input, 1149] 
split level 183: [/input, 1354] 
split level 184: [/input, 2181] 
split level 185: [/input, 2929] 
split level 186: [/input-8, 1105] 
split level 187: [/input, 1677] 
split level 188: [/input, 3693] 
split level 189: [/input-8, 118] 
split level 190: [/input, 1502] 
split level 191: [/input, 1503] 
split level 192: [/input, 1406] 
split level 193: [/input, 689] 
split level 194: [/input, 1479] 
split level 195: [/input, 490] 
split level 196: [/input, 1849] 
split level 197: [/input, 1498] 
split level 198: [/input, 2008] 
split level 199: [/input, 1501] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06234598159790039
10 lb beta sum: 0.0, worst -0.06235313415527344
Time: prepare 0.0115    bound 0.1356    transfer 0.0031    finalize 0.0030    func 0.1559    
Accumulated time: func 0.7140    prepare 0.0217    bound 0.6931    transfer 0.0032    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.19439411) min lb tensor(-0.06234598)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011807918548583984 
BICCOS Cumulative time: 0.011807918548583984
Preprocessing time: 0.01003408432006836 Inference time: 0.0014660358428955078 Add cuts time: 0.000110626220703125 Cut analysis time: 0.0001971721649169922
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5299    set_bounds 0.0083    solve 0.1560    add 0.0097    
Accumulated time: pickout 0.0004    decision 0.5299    set_bounds 0.0083    solve 0.1560    add 0.0097    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10]), tensor([-1.]), tensor([0]), tensor([-1.36608618e+31]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10]), tensor([1.]), tensor([0]), tensor([1.16447902e-42]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.0003058910369873047

all verified at 0th iter
Time: prepare 0.0003    bound 0.0058    transfer 0.0001    finalize 0.0001    func 0.0064    
Accumulated time: func 0.7203    prepare 0.0220    bound 0.6988    transfer 0.0033    finalize 0.0034    
After pruning, left:  0

Back to Regular BaB


Properties batch 1, size 1
Remaining timeout: 194.6856689453125
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 194.68560910224915
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 194.68558621406555
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 194.68556690216064
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 194.68554759025574
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 194.68552803993225
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 194.68549489974976
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 194.6854739189148
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 5.3146 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 25, vnnlib ID: 25 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.18077564, -5.20051479, -2.12253857, -2.36523008, -1.95707440,
         -2.48700714, -1.75185084, -2.55259371, -4.91013861, -3.94676566]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [653]; unstable size 653; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 205, 1, 653] with unstable size 204 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 653] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 653] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [204]; unstable size 204; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 204] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 204] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.29296613, -1.59309268, -1.48934960, -1.80449462, -1.37909269,
         -2.13179302, -1.44039249,  1.14391518, -0.00782704]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.18077564, -5.20051479, -2.12253857, -2.36523008, -1.95707440,
         -2.48700714, -1.75185084, -2.55259371, -4.91013861, -3.94676566]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.18077517, -5.20051384, -2.12253881, -2.36523008, -1.95707417,
          -2.48700714, -1.75185037, -2.55259418, -4.91013765, -3.94676566],
         [-3.18077517, -5.20051384, -2.12253881, -2.36523008, -1.95707417,
          -2.48700714, -1.75185037, -2.55259418, -4.91013765, -3.94676566]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.05823636, -0.81554508, -1.22370100, -0.69376802, -1.42892480,
          -0.62818098,  0.76599050]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         ...,


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0837 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 26, vnnlib ID: 26 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.89522552, -12.50763512, -11.44470501, -10.71474552, -11.76819897,
         -10.88390923, -11.10462856, -10.95513725, -12.58380413, -11.60862064]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [382]; unstable size 382; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 122, 1, 382] with unstable size 121 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 382] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 382] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [121]; unstable size 121; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 121] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 121] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.28878093,  0.57599199, -0.86663389, -1.54129553, -0.57239199,
         -1.38458633, -1.21227455, -1.42654049,  0.52066183]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.89522552, -12.50763512, -11.44470501, -10.71474552, -11.76819897,
         -10.88390923, -11.10462856, -10.95513725, -12.58380413, -11.60862064]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.89522552, -12.50763512, -11.44470310, -10.71474457, -11.76819706,
          -10.88390827, -11.10462856, -10.95513630, -12.58380413, -11.60861969],
         [-10.89522552, -12.50763512, -11.44470310, -10.71474457, -11.76819706,
          -10.88390827, -11.10462856, -10.95513630, -12.58380413, -11.60861969]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.71339417, -0.16391659, -0.89387512,  0.15957737, -0.72471142,
          -0.50399113, -0.65348339]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         ...,


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0762 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 27, vnnlib ID: 27 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.43655968, -7.86374569, -4.02158070, -5.24551868, -3.37242651,
         -5.30696249, -5.20856190, -1.00180030, -7.81787586, -6.36246300]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [515]; unstable size 515; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 161, 1, 515] with unstable size 160 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 515] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 515] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [160]; unstable size 160; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 160] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 160] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.54672956, 5.77573109, 2.48532724, 3.64926147, 1.99377513, 3.71493387,
         3.49136114, 5.76536798, 4.38623095]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0696 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 28, vnnlib ID: 28 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.78016090, -14.31425953, -12.11413383, -13.61369610, -13.22554588,
         -13.89419746, -13.81897068, -15.55597496, -11.84562683, -14.04191494]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [440]; unstable size 440; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 110, 1, 440] with unstable size 109 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 440] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 440] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [109]; unstable size 109; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 109] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 109] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.06631994, 1.97255528, 3.32466173, 3.00493097, 3.59111619, 3.54375315,
         5.13309097, 1.75885570, 3.87197638]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0661 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 29, vnnlib ID: 29 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.58011818, -16.93579865, -13.35176086, -12.33354282, -12.53640938,
         -12.27129459, -12.42931461, -13.10805130, -16.13471413, -17.27034378]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [468]; unstable size 468; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 468] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 468] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 468] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 159] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.95476007,  3.13256645, -0.12001920, -1.12539387, -0.82774329,
         -1.18586910, -1.15729141,  2.37652349,  3.54983091]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.58011818, -16.93579865, -13.35176086, -12.33354282, -12.53640938,
         -12.27129459, -12.42931461, -13.10805130, -16.13471413, -17.27034378]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.58012009, -16.93579865, -13.35176182, -12.33354473, -12.53641129,
          -12.27129650, -12.42931652, -13.10805321, -16.13471413, -17.27034378],
         [-15.58012009, -16.93579865, -13.35176182, -12.33354473, -12.53641129,
          -12.27129650, -12.42931652, -13.10805321, -16.13471413, -17.27034378]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.24370861, -0.77450848, -0.57164192, -0.83675671, -0.67873669]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0775 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 30, vnnlib ID: 30 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.56713295, -10.98260689,  -8.09094048,  -9.93765926,  -9.26453114,
         -10.17694187,  -9.82418156, -11.28379536,  -9.40003777, -10.42401791]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [530]; unstable size 530; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 122, 1, 530] with unstable size 121 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 530] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 530] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [121]; unstable size 121; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 121] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 121] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.92235756, 1.25571513, 2.97574401, 2.32010794, 3.20374870, 2.90414071,
         4.19674778, 2.57079244, 3.44977427]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0651 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 31, vnnlib ID: 31 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.24266052, -9.05385590, -4.63273811, -6.82860374, -4.25593948,
         -6.95034361, -6.54124737, -4.92567825, -7.73889160, -7.98849154]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [484]; unstable size 484; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 199, 1, 484] with unstable size 198 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 484] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 484] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [198]; unstable size 198; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 198] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 198] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.37995452, 3.76833677, 0.10083741, 2.16897559, 2.29998016, 1.78575850,
         0.35607696, 2.66335368, 2.83313775]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0618 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 32, vnnlib ID: 32 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.89239407, -6.05108643, -2.55554962, -3.76616883, -2.11981702,
         -3.83909178, -3.28839850, -3.06943870, -4.45051193, -5.43191195]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [594]; unstable size 594; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 594] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 594] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 594] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 191] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.09662628,  2.10026455, -1.01723385,  0.09384108, -1.30339622,
          0.17089629, -0.43055558,  0.45394588,  1.56536603]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.89239407, -6.05108643, -2.55554962, -3.76616883, -2.11981702,
         -3.83909178, -3.28839850, -3.06943870, -4.45051193, -5.43191195]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.89239454, -6.05108738, -2.55554962, -3.76616931, -2.11981726,
          -3.83909178, -3.28839874, -3.06943822, -4.45051241, -5.43191242],
         [-3.89239454, -6.05108738, -2.55554962, -3.76616931, -2.11981726,
          -3.83909178, -3.28839874, -3.06943822, -4.45051241, -5.43191242]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.51388860, -0.94962096,  0.21896052]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0705 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 33, vnnlib ID: 33 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.06789207, -13.08512020, -11.95641899, -14.25201702, -13.24593544,
         -14.51348209, -14.12713146, -14.87085629, -10.82266903, -12.98229504]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [591]; unstable size 591; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 125, 1, 591] with unstable size 124 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 591] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 591] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [124]; unstable size 124; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 124] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 124] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.60616136, 2.43306828, 4.57036209, 3.65054846, 4.81807995, 4.45948172,
         5.13743353, 1.49430275, 3.58136392]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0672 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 34, vnnlib ID: 34 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.87295246,  -9.77221680,  -7.06542158,  -6.92552090,  -6.61218357,
          -6.98795938,  -6.45421982,  -7.64116573, -10.70925426,  -9.26054478]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [514]; unstable size 514; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 255, 1, 514] with unstable size 254 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 514] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 514] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [254]; unstable size 254; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 254] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 254] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.37700796,  1.93588424, -0.13754916, -0.62001443,  0.04202433,
         -0.79881150,  0.29987121,  3.01180029,  1.52556276]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.87295246,  -9.77221680,  -7.06542158,  -6.92552090,  -6.61218357,
          -6.98795938,  -6.45421982,  -7.64116573, -10.70925426,  -9.26054478]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.87295151,  -9.77221584,  -7.06542110,  -6.92552185,  -6.61218452,
           -6.98795891,  -6.45422077,  -7.64116478, -10.70925331,  -9.26054478],
         [ -9.87295151,  -9.77221584,  -7.06542110,  -6.92552185,  -6.61218452,
           -6.98795891,  -6.45422077,  -7.64116478, -10.70925331,  -9.26054478]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.13989925, -0.31333733, -0.47130108]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.79841268, -1.94126987, -1.67142856,  ..., -1.56031740,
            -1.75079370, -1.76666665],
           [-1.62380958, -1.92539680, -1.78253973,  ..., -1.57619035,
            -1.71904767, -1.75079370],
           [-1.38571417, -1.86190474, -1.86190474,  ..., -1.56031740,
            -1.68730164, -1.73492062],
           ...,
           [-0.14761895, -0.52857143, -0.63968253,  ..., -0.25873005,
            -0.32222211, -0.38571417],
           [-0.00476181, -0.36984116, -0.67142856,  ..., -0.33809513,
            -0.38571417, -0.48095238],
           [ 0.01111121, -0.03650784, -0.25873005,  ..., -0.35396814,
            -0.33809513, -0.41746020]],

          [[-1.80354273, -1.90016103, -1.75523353,  ..., -1.65861523,
            -1.81964576, -1.78743970],
           [-1.69082129, -1.88405800, -1.83574879,  ..., -1.67471826,
            -1.77133656, -1.77133656],
           [-1.54589367, -1.86795497, -1.91626418,  ..., -1.64251208,
            -1.75523353, -1.77133656],
           ...,
           [-0.40257636, -0.83735907, -0.91787434,  ..., -0.49919480,
            -0.54750401, -0.61191624],
           [-0.22544271, -0.64412236, -0.90177131,  ..., -0.61191624,
            -0.66022539, -0.74074072],
           [-0.16103047, -0.25764883, -0.46698871,  ..., -0.67632848,
            -0.66022539, -0.74074072]],

          [[-1.39280367, -1.58770621, -1.34782624,  ..., -1.28785622,
            -1.45277369, -1.43778121],
           [-1.25787115, -1.55772126, -1.43778121,  ..., -1.30284870,
            -1.40779614, -1.40779614],
           [-1.04797614, -1.48275876, -1.51274371,  ..., -1.28785622,
            -1.39280367, -1.40779614],
           ...,
           [ 0.13643195, -0.49325335, -0.83808094,  ...,  0.19640197,
             0.15142445,  0.09145443],
           [ 0.33133450, -0.19340314, -0.61319339,  ...,  0.07646193,
             0.03148442, -0.04347810],
           [ 0.52623707,  0.39130452,  0.13643195,  ...,  0.01649191,
             0.01649191, -0.05847061]]],


         [[[-1.79841268, -1.94126987, -1.67142856,  ..., -1.56031740,
            -1.75079370, -1.76666665],
           [-1.62380958, -1.92539680, -1.78253973,  ..., -1.57619035,
            -1.71904767, -1.75079370],
           [-1.38571417, -1.86190474, -1.86190474,  ..., -1.56031740,
            -1.68730164, -1.73492062],
           ...,
           [-0.14761895, -0.52857143, -0.63968253,  ..., -0.25873005,
            -0.32222211, -0.38571417],
           [-0.00476181, -0.36984116, -0.67142856,  ..., -0.33809513,
            -0.38571417, -0.48095238],
           [ 0.01111121, -0.03650784, -0.25873005,  ..., -0.35396814,
            -0.33809513, -0.41746020]],

          [[-1.80354273, -1.90016103, -1.75523353,  ..., -1.65861523,
            -1.81964576, -1.78743970],
           [-1.69082129, -1.88405800, -1.83574879,  ..., -1.67471826,
            -1.77133656, -1.77133656],
           [-1.54589367, -1.86795497, -1.91626418,  ..., -1.64251208,
            -1.75523353, -1.77133656],
           ...,
           [-0.40257636, -0.83735907, -0.91787434,  ..., -0.49919480,
            -0.54750401, -0.61191624],
           [-0.22544271, -0.64412236, -0.90177131,  ..., -0.61191624,
            -0.66022539, -0.74074072],
           [-0.16103047, -0.25764883, -0.46698871,  ..., -0.67632848,
            -0.66022539, -0.74074072]],

          [[-1.39280367, -1.58770621, -1.34782624,  ..., -1.28785622,
            -1.45277369, -1.43778121],
           [-1.25787115, -1.55772126, -1.43778121,  ..., -1.30284870,
            -1.40779614, -1.40779614],
           [-1.04797614, -1.48275876, -1.51274371,  ..., -1.28785622,
            -1.39280367, -1.40779614],
           ...,
           [ 0.13643195, -0.49325335, -0.83808094,  ...,  0.19640197,
             0.15142445,  0.09145443],
           [ 0.33133450, -0.19340314, -0.61319339,  ...,  0.07646193,
             0.03148442, -0.04347810],
           [ 0.52623707,  0.39130452,  0.13643195,  ...,  0.01649191,
             0.01649191, -0.05847061]]],


         [[[-1.79841268, -1.94126987, -1.67142856,  ..., -1.56031740,
            -1.75079370, -1.76666665],
           [-1.62380958, -1.92539680, -1.78253973,  ..., -1.57619035,
            -1.71904767, -1.75079370],
           [-1.38571417, -1.86190474, -1.86190474,  ..., -1.56031740,
            -1.68730164, -1.73492062],
           ...,
           [-0.14761895, -0.52857143, -0.63968253,  ..., -0.25873005,
            -0.32222211, -0.38571417],
           [-0.00476181, -0.36984116, -0.67142856,  ..., -0.33809513,
            -0.38571417, -0.48095238],
           [ 0.01111121, -0.03650784, -0.25873005,  ..., -0.35396814,
            -0.33809513, -0.41746020]],

          [[-1.80354273, -1.90016103, -1.75523353,  ..., -1.65861523,
            -1.81964576, -1.78743970],
           [-1.69082129, -1.88405800, -1.83574879,  ..., -1.67471826,
            -1.77133656, -1.77133656],
           [-1.54589367, -1.86795497, -1.91626418,  ..., -1.64251208,
            -1.75523353, -1.77133656],
           ...,
           [-0.40257636, -0.83735907, -0.91787434,  ..., -0.49919480,
            -0.54750401, -0.61191624],
           [-0.22544271, -0.64412236, -0.90177131,  ..., -0.61191624,
            -0.66022539, -0.74074072],
           [-0.16103047, -0.25764883, -0.46698871,  ..., -0.67632848,
            -0.66022539, -0.74074072]],

          [[-1.39280367, -1.58770621, -1.34782624,  ..., -1.28785622,
            -1.45277369, -1.43778121],
           [-1.25787115, -1.55772126, -1.43778121,  ..., -1.30284870,
            -1.40779614, -1.40779614],
           [-1.04797614, -1.48275876, -1.51274371,  ..., -1.28785622,
            -1.39280367, -1.40779614],
           ...,
           [ 0.13643195, -0.49325335, -0.83808094,  ...,  0.19640197,
             0.15142445,  0.09145443],
           [ 0.33133450, -0.19340314, -0.61319339,  ...,  0.07646193,
             0.03148442, -0.04347810],
           [ 0.52623707,  0.39130452,  0.13643195,  ...,  0.01649191,
             0.01649191, -0.05847061]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0742 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 35, vnnlib ID: 35 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.22711134, -6.61452389, -3.28024340, -3.07715249, -3.65528822,
         -3.21469426, -1.80790162, -3.44135714, -7.19001961, -5.18115664]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 427] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 427] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 192] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.43010759,  2.73373127, -0.20912063,  0.11641026,  0.11481588,
         -1.58735895, -0.18466669,  3.42027831,  1.36505198]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.22711134, -6.61452389, -3.28024340, -3.07715249, -3.65528822,
         -3.21469426, -1.80790162, -3.44135714, -7.19001961, -5.18115664]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.22711134, -6.61452293, -3.28024387, -3.07715273, -3.65528846,
          -3.21469450, -1.80790162, -3.44135761, -7.19001865, -5.18115664],
         [-6.22711134, -6.61452293, -3.28024387, -3.07715273, -3.65528846,
          -3.21469450, -1.80790162, -3.44135761, -7.19001865, -5.18115664]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.20309114, -1.26925111,  0.36420488]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]],


         [[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]],


         [[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0745 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 36, vnnlib ID: 36 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.63098383, -5.91123009, -1.57904100, -1.50031447, -3.17599440,
         -1.57833910, -2.31312609, -2.17043972, -5.16499329, -4.05005884]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [429]; unstable size 429; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 115, 1, 429] with unstable size 114 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 429] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 429] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [114]; unstable size 114; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 114] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 114] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.02613127,  3.04000330, -0.86533904, -0.93197513,  0.78377438,
         -0.84204745, -0.27393377,  2.37316895,  1.32242012]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.63098383, -5.91123009, -1.57904100, -1.50031447, -3.17599440,
         -1.57833910, -2.31312609, -2.17043972, -5.16499329, -4.05005884]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.63098431, -5.91123009, -1.57904124, -1.50031507, -3.17599440,
          -1.57833958, -2.31312585, -2.17043996, -5.16499329, -4.05005884],
         [-2.63098431, -5.91123009, -1.57904124, -1.50031507, -3.17599440,
          -1.57833958, -2.31312585, -2.17043996, -5.16499329, -4.05005884]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.59139872, -0.67012489, -0.59210038,  0.14268589]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0818 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 37, vnnlib ID: 37 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.53942776,  -7.02883530,  -7.54472733, -10.47971630,  -7.86964130,
         -10.67128658, -10.97943497,  -9.78617668,  -5.69757843,  -6.90828276]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [473]; unstable size 473; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 141, 1, 473] with unstable size 140 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 1, 1, 473] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 473] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [140]; unstable size 140; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 1, 1, 140] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 140] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.97586250,  1.62177134,  4.44206476,  1.95841980,  4.61180305,
          4.90358877,  3.71702051, -0.18866634,  0.87091970]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.53942776,  -7.02883530,  -7.54472733, -10.47971630,  -7.86964130,
         -10.67128658, -10.97943497,  -9.78617668,  -5.69757843,  -6.90828276]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.34467602,  -6.78079128,  -7.36285162, -10.22102642,  -7.63834572,
          -10.41161633, -10.81610203,  -9.54494476,  -5.22521114,  -6.57947111]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11946487]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0062 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0598 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 38, vnnlib ID: 38 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.99526882, -8.88451767, -3.74724054, -4.25434780, -3.80330396,
         -4.31974983, -2.96723056, -5.10482168, -9.22820282, -7.71018076]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [442]; unstable size 442; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 442] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 442] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 442] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 188] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.31716251, 5.14074612, 0.38760489, 0.92174959, 0.43740451, 0.97805083,
         1.55073750, 5.43588781, 3.94455695]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0676 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 39, vnnlib ID: 39 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.29222870,  -9.06495857,  -5.48218775,  -5.67955399,  -5.15304756,
          -5.78769970,  -4.06756973,  -5.97489452, -10.72794914,  -8.75968742]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [344]; unstable size 344; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 344] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 344] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 344] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 166] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.44414234, 4.29334593, 0.94329727, 1.21160614, 0.62566411, 1.30977678,
         1.30732977, 5.79046440, 4.05936241]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0648 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 40, vnnlib ID: 40 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.00760698, -10.36704826,  -7.93206787,  -9.08809185,  -9.34877014,
          -9.23899841, -10.37455654,  -9.37908459,  -8.12404442, -10.51943302]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [377]; unstable size 377; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 159, 1, 377] with unstable size 158 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 377] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 377] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [158]; unstable size 158; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 158] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 158] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.70369148, 1.60599136, 2.61762977, 2.92221189, 2.76581216, 3.82137680,
         2.85164285, 1.76453388, 4.06818771]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0636 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 41, vnnlib ID: 41 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.83257341, -6.46854591, -5.99145317, -5.71124935, -5.55805302,
         -5.72428894, -7.17641068, -6.33211374, -1.95075095, -5.86147213]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [468]; unstable size 468; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 468] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 468] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 468] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 180] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.54666638, 3.82981730, 3.37250423, 2.99276829, 2.92181778, 2.99155474,
         4.37545872, 3.59890270, 3.20619893]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0294 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 42, vnnlib ID: 42 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.92135620, -9.33125305, -5.36672211, -5.52371502, -5.86994457,
         -5.72914362, -4.85611820, -7.33439922, -7.56188965, -8.56555939]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [544]; unstable size 544; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 184, 1, 544] with unstable size 183 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 544] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 544] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [183]; unstable size 183; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 183] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 183] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.39630246, 3.45109224, 0.09545040, 0.32944334, 0.53940821, 0.51911545,
         1.82263875, 1.84724045, 2.81309271]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0685 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 43, vnnlib ID: 43 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.31921101, -8.17862988, -3.92548275, -4.37522030, -3.57966661,
         -4.41261387, -3.19976306, -4.81196594, -8.46736908, -7.38388491]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [501]; unstable size 501; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 223, 1, 501] with unstable size 222 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 501] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 501] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [222]; unstable size 222; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 222] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 222] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.06676173,  2.64715958, -0.83596241, -0.06112343, -1.19111848,
         -1.62031984, -0.01587451,  3.07019234,  2.02515364]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.31921101, -8.17862988, -3.92548275, -4.37522030, -3.57966661,
         -4.41261387, -3.19976306, -4.81196594, -8.46736908, -7.38388491]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.31921053, -8.17862988, -3.92548323, -4.37522030, -3.57966733,
          -4.41261482, -3.19976282, -4.81196690, -8.46736908, -7.38388443],
         [-7.31921053, -8.17862988, -3.92548323, -4.37522030, -3.57966733,
          -4.41261482, -3.19976282, -4.81196690, -8.46736908, -7.38388443]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.48713160, -0.03739452, -0.83294749, -1.21285200,  0.39935207]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0755 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 44, vnnlib ID: 44 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.73774433, -9.38230991, -5.25654364, -6.28954697, -4.75454044,
         -6.38296413, -5.13899040, -6.38740015, -9.45212460, -9.40668297]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [644]; unstable size 644; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 233, 1, 644] with unstable size 232 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 644] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 644] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [232]; unstable size 232; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 232] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.87710166,  3.18848801,  0.69205022, -0.69066864,  0.77880299,
         -0.48637581,  0.73772764,  3.31828928,  3.26127815]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.73774433, -9.38230991, -5.25654364, -6.28954697, -4.75454044,
         -6.38296413, -5.13899040, -6.38740015, -9.45212460, -9.40668297]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.73774529, -9.38231087, -5.25654459, -6.28954792, -4.75454140,
          -6.38296461, -5.13899136, -6.38740110, -9.45212364, -9.40668201],
         [-7.73774529, -9.38231087, -5.25654459, -6.28954792, -4.75454140,
          -6.38296461, -5.13899136, -6.38740110, -9.45212364, -9.40668201]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.50200319, -0.11755323]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.84603173, -0.87777776, -0.86190474,  ..., -0.36984116,
            -0.36984116, -0.36984116],
           [-0.86190474, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           [-0.84603173, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           ...,
           [-0.52857143, -0.49682540, -0.48095238,  ..., -0.16349196,
            -0.13174593, -0.32222211],
           [-0.46507925, -0.48095238, -0.48095238,  ..., -0.30634910,
            -0.22698402, -0.27460307],
           [-0.43333322, -0.43333322, -0.48095238,  ..., -0.38571417,
            -0.27460307, -0.16349196]],

          [[-0.96618354, -0.99838966, -0.98228657,  ..., -0.45088565,
            -0.45088565, -0.45088565],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           ...,
           [-0.80515295, -0.82125598, -0.83735907,  ..., -0.51529789,
            -0.51529789, -0.74074072],
           [-0.78904986, -0.80515295, -0.82125598,  ..., -0.64412236,
            -0.57971013, -0.64412236],
           [-0.77294683, -0.78904986, -0.78904986,  ..., -0.72463763,
            -0.62801927, -0.54750401]],

          [[-1.00299859, -1.01799107, -1.01799107,  ..., -0.71814090,
            -0.73313338, -0.71814090],
           [-1.01799107, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           [-1.00299859, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           ...,
           [-0.98800600, -0.98800600, -0.97301346,  ..., -0.52323836,
            -0.47826082, -0.67316341],
           [-0.95802099, -0.97301346, -0.97301346,  ..., -0.64317840,
            -0.55322337, -0.61319339],
           [-0.95802099, -0.98800600, -1.01799107,  ..., -0.71814090,
            -0.59820086, -0.50824583]]],


         [[[-0.84603173, -0.87777776, -0.86190474,  ..., -0.36984116,
            -0.36984116, -0.36984116],
           [-0.86190474, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           [-0.84603173, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           ...,
           [-0.52857143, -0.49682540, -0.48095238,  ..., -0.16349196,
            -0.13174593, -0.32222211],
           [-0.46507925, -0.48095238, -0.48095238,  ..., -0.30634910,
            -0.22698402, -0.27460307],
           [-0.43333322, -0.43333322, -0.48095238,  ..., -0.38571417,
            -0.27460307, -0.16349196]],

          [[-0.96618354, -0.99838966, -0.98228657,  ..., -0.45088565,
            -0.45088565, -0.45088565],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           ...,
           [-0.80515295, -0.82125598, -0.83735907,  ..., -0.51529789,
            -0.51529789, -0.74074072],
           [-0.78904986, -0.80515295, -0.82125598,  ..., -0.64412236,
            -0.57971013, -0.64412236],
           [-0.77294683, -0.78904986, -0.78904986,  ..., -0.72463763,
            -0.62801927, -0.54750401]],

          [[-1.00299859, -1.01799107, -1.01799107,  ..., -0.71814090,
            -0.73313338, -0.71814090],
           [-1.01799107, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           [-1.00299859, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           ...,
           [-0.98800600, -0.98800600, -0.97301346,  ..., -0.52323836,
            -0.47826082, -0.67316341],
           [-0.95802099, -0.97301346, -0.97301346,  ..., -0.64317840,
            -0.55322337, -0.61319339],
           [-0.95802099, -0.98800600, -1.01799107,  ..., -0.71814090,
            -0.59820086, -0.50824583]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0740 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 45, vnnlib ID: 45 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.38197994, -10.24376202,  -8.79766655,  -9.01879883,  -8.99937153,
          -9.13003254,  -9.50150967, -10.35948181,  -9.91758919, -10.61350632]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 508] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 508] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 197] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.60292721, -2.29249573, -2.02272058, -2.05514574, -1.91961026,
         -1.48416185, -0.73623466, -1.02746487,  0.09661889]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.38197994, -10.24376202,  -8.79766655,  -9.01879883,  -8.99937153,
          -9.13003254,  -9.50150967, -10.35948181,  -9.91758919, -10.61350632]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.38197994, -10.24376202,  -8.79766655,  -9.01879978,  -8.99937153,
           -9.13003254,  -9.50150967, -10.35948181,  -9.91758823, -10.61350632],
         [ -9.38197994, -10.24376202,  -8.79766655,  -9.01879978,  -8.99937153,
           -9.13003254,  -9.50150967, -10.35948181,  -9.91758823, -10.61350632]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.86178207, -1.44609547, -1.22496223, -1.24439049, -1.11372948,
          -0.74225235,  0.11571980, -0.32617378]]], device='cuda:0')
number of violation:  7
clean attack image tensor([[[[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         ...,


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0847 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 46, vnnlib ID: 46 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.77434063, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670811,
          -6.53051615,  -7.14518929,  -8.42440701, -10.45952797, -10.54728985]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [695]; unstable size 695; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 695] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 695] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 695] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 199] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.70145535,  3.44708157, -0.32370079, -0.09620174,  0.17705202,
          0.33821189,  1.44864011,  3.27855873,  3.35601664]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.77434063, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670811,
          -6.53051615,  -7.14518929,  -8.42440701, -10.45952797, -10.54728985]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.77434158, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670906,
           -6.53051615,  -7.14519024,  -8.42440796, -10.45952892, -10.54729080],
         [ -8.77434158, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670906,
           -6.53051615,  -7.14519024,  -8.42440796, -10.45952892, -10.54729080]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01167870, -0.07961607]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0696 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 47, vnnlib ID: 47 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.38532257, -6.06158733, -5.10214949, -7.15757179, -4.90412474,
         -7.31758070, -7.94371891, -6.91108131, -0.65056217, -5.11655426]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [488]; unstable size 488; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 137, 1, 488] with unstable size 136 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 488] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 488] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [136]; unstable size 136; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 136] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 136] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.34641838, 4.86730623, 3.89913678, 5.95862436, 3.74042463, 6.11034679,
         6.67927408, 5.60504436, 3.94073176]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0651 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 48, vnnlib ID: 48 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.23477888, -5.68500996, -2.55144548, -1.29489720, -2.30533838,
         -1.34893715, -1.73671746, -2.07432318, -6.50224018, -4.89857721]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [425]; unstable size 425; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 425] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 425] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 425] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 199] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.02166891,  3.21041274,  0.75644505, -0.07432845,  0.52634156,
          0.06094778,  0.40918589,  4.12974262,  2.57223129]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.23477888, -5.68500996, -2.55144548, -1.29489720, -2.30533838,
         -1.34893715, -1.73671746, -2.07432318, -6.50224018, -4.89857721]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.23477888, -5.68500996, -2.55144548, -1.29489720, -2.30533838,
          -1.34893715, -1.73671746, -2.07432318, -6.50224018, -4.89857721]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05403996]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.82063496,  0.82063496,  0.88412702,  ..., -0.89365077,
            -0.86190474, -0.83015871],
           [ 0.99523818,  1.12222254,  1.43968284,  ..., -0.89365077,
            -0.90952379, -0.90952379],
           [ 1.47142887,  1.72539711,  1.93174624,  ..., -0.84603173,
            -0.90952379, -0.94126981],
           ...,
           [ 0.96349210,  0.70952386,  0.48730165,  ...,  0.04285724,
             0.16984135,  0.15396833],
           [ 1.07460344,  0.77301592,  0.58253974,  ...,  0.72539687,
             0.20158738,  0.29682547],
           [ 1.01111114,  0.78888893,  0.45555562,  ...,  1.63015902,
             1.05873048,  0.86825401]],

          [[-0.32206106, -0.41867942, -0.40257636,  ..., -1.22383249,
            -1.14331722, -1.04669881],
           [-0.19323659, -0.03220600,  0.46698883,  ..., -1.30434775,
            -1.27214170, -1.22383249],
           [ 0.56360716,  1.01449287,  1.23993587,  ..., -1.41706920,
            -1.44927526, -1.43317223],
           ...,
           [-0.43478248, -0.66022539, -0.85346210,  ..., -0.75684375,
            -0.66022539, -0.64412236],
           [-0.24154577, -0.51529789, -0.77294683,  ..., -0.45088565,
            -0.80515295, -0.85346210],
           [-0.22544271, -0.41867942, -0.80515295,  ..., -0.03220600,
            -0.45088565, -0.74074072]],

          [[-0.64317840, -0.74812591, -0.79310340,  ..., -1.06296861,
            -0.95802099, -0.85307342],
           [-0.55322337, -0.41829082, -0.04347810,  ..., -1.15292358,
            -1.10794616, -1.06296861],
           [ 0.31634200,  0.58620709,  0.55622208,  ..., -1.30284870,
            -1.30284870, -1.30284870],
           ...,
           [-0.91304344, -1.04797614, -1.13793111,  ..., -0.98800600,
            -0.89805096, -0.86806595],
           [-0.77811092, -0.98800600, -1.09295356,  ..., -0.88305843,
            -1.03298354, -1.10794616],
           [-0.74812591, -0.91304344, -1.12293863,  ..., -0.73313338,
            -0.98800600, -1.18290865]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0677 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 49, vnnlib ID: 49 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.14186001,  -7.07143116, -10.46663189, -11.16532612, -10.33747673,
         -11.26323891, -10.40632534, -10.15031719,  -8.55157280,  -8.28031540]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [538]; unstable size 538; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 538] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 538] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 538] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 206] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.38833737, 2.48165655, 3.18024445, 2.31973934, 3.26281786, 2.38422155,
         2.02770805, 0.85605979, 0.95938039]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0652 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 50, vnnlib ID: 50 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.38072777, -8.34097099, -7.53324938, -7.26011181, -6.91416168,
         -7.30822277, -7.39192200, -8.73349857, -8.18290806, -9.00568867]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [791]; unstable size 791; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 190, 1, 791] with unstable size 189 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 791] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 791] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [189]; unstable size 189; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 189] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 189] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.38350588,  0.14631557, -0.09611976, -0.06322637, -0.81499445,
         -0.28940237,  0.85859996,  0.09628749,  0.96366215]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.38072777, -8.34097099, -7.53324938, -7.26011181, -6.91416168,
         -7.30822277, -7.39192200, -8.73349857, -8.18290806, -9.00568867]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.38072777, -8.34097099, -7.53324986, -7.26011276, -6.91416264,
          -7.30822325, -7.39192200, -8.73349953, -8.18290710, -9.00568962],
         [-8.38072777, -8.34097099, -7.53324986, -7.26011276, -6.91416264,
          -7.30822325, -7.39192200, -8.73349953, -8.18290710, -9.00568962]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.22502661, -0.04811049, -0.39406061,  0.08369875]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0815 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 51, vnnlib ID: 51 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -4.23172474, -11.22384930,  -5.34106207,  -9.06499481,  -7.32086372,
          -9.25464153, -10.79966545, -10.12152672,  -6.76570702, -10.71261692]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [459]; unstable size 459; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 131, 1, 459] with unstable size 130 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 459] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 459] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [130]; unstable size 130; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 130] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 130] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.35711432, 0.89513063, 4.55454111, 2.81934166, 4.73727655, 6.20088959,
         5.47830963, 2.08739543, 5.85482740]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0654 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 52, vnnlib ID: 52 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.30221272, -11.14697456,  -6.05900908,  -5.33924294,  -5.99430466,
          -5.30768108,  -5.64619446,  -7.31474876, -10.63627148, -10.70530987]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [504]; unstable size 504; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 504] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 504] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 504] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 199] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.36880398,  5.11926937,  0.38846779,  0.01013416,  0.33952856,
         -0.05993855,  1.64709640,  4.65361834,  4.72898006]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.30221272, -11.14697456,  -6.05900908,  -5.33924294,  -5.99430466,
          -5.30768108,  -5.64619446,  -7.31474876, -10.63627148, -10.70530987]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.15it/s]100%|██████████| 1/1 [00:00<00:00,  9.14it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.49543190, -11.39906597,  -6.25923395,  -5.68034649,  -6.18490219,
           -5.65740013,  -5.70066929,  -7.64016151, -10.87086868, -11.04580212]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04326916]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1121 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 20.35684585571289
alpha/beta optimization time: 1.1976432800292969
initial alpha-crown bounds: tensor([[ 3.39546895,  5.14681625,  0.40474582,  0.01093243,  0.35315752,
         -0.05082321,  1.65623379,  4.68375635,  4.75655699]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.050823211669921875
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6213035583496
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6212661266327
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.62123942375183
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6212193965912
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.62120127677917
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.62118291854858
Verifying property 5 with 1 instances.
##### Instance 52 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.05082321]], device='cuda:0') need to verify.
Model prediction is: tensor([ -9.30221272, -11.14697456,  -6.05900908,  -5.33924294,  -5.99430466,
         -5.30768108,  -5.64619446,  -7.31474876, -10.63627148, -10.70530987],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.05082321]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 504
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 196
Node /15 input 0: size torch.Size([100]) unstable 5
-----------------
# of unstable neurons: 705
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011467933654785156
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.050823092460632324
10 lb beta sum: 0.0, worst -0.05082225799560547
Time: prepare 0.0002    bound 0.0859    transfer 0.0001    finalize 0.0001    func 0.0864    
Accumulated time: func 0.0864    prepare 0.0002    bound 0.0859    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 76] 
split level 1: [/input-8, 1820] 
split level 2: [/input-8, 531] 
split level 3: [/input-8, 1890] 
split level 4: [/input-8, 1819] 
split level 5: [/input-8, 1957] 
split level 6: [/input-12, 79] 
split level 7: [/input-8, 1880] 
split level 8: [/input-8, 1876] 
split level 9: [/input-8, 1945] 
split level 10: [/input-8, 1309] 
split level 11: [/input-8, 1900] 
split level 12: [/input-8, 1889] 
split level 13: [/input-8, 797] 
split level 14: [/input, 2712] 
split level 15: [/input, 1941] 
split level 16: [/input, 2764] 
split level 17: [/input, 2020] 
split level 18: [/input-8, 1877] 
split level 19: [/input, 2486] 
split level 20: [/input, 1992] 
split level 21: [/input, 424] 
split level 22: [/input, 1977] 
split level 23: [/input, 1972] 
split level 24: [/input, 2765] 
split level 25: [/input, 1918] 
split level 26: [/input-8, 1969] 
split level 27: [/input, 421] 
split level 28: [/input-8, 1869] 
split level 29: [/input, 2019] 
split level 30: [/input, 2773] 
split level 31: [/input-8, 1893] 
split level 32: [/input-8, 802] 
split level 33: [/input, 1954] 
split level 34: [/input, 2024] 
split level 35: [/input, 2774] 
split level 36: [/input-8, 522] 
split level 37: [/input, 185] 
split level 38: [/input, 1979] 
split level 39: [/input, 1891] 
split level 40: [/input, 1875] 
split level 41: [/input, 2451] 
split level 42: [/input-8, 1908] 
split level 43: [/input, 1912] 
split level 44: [/input, 1400] 
split level 45: [/input, 2003] 
split level 46: [/input, 2028] 
split level 47: [/input, 1367] 
split level 48: [/input, 1879] 
split level 49: [/input, 1978] 
split level 50: [/input, 2441] 
split level 51: [/input-8, 1705] 
split level 52: [/input, 132] 
split level 53: [/input, 2411] 
split level 54: [/input, 2499] 
split level 55: [/input, 1015] 
split level 56: [/input, 1335] 
split level 57: [/input-8, 811] 
split level 58: [/input, 2357] 
split level 59: [/input, 2717] 
split level 60: [/input, 2459] 
split level 61: [/input, 2652] 
split level 62: [/input, 2005] 
split level 63: [/input, 452] 
split level 64: [/input, 1219] 
split level 65: [/input, 1230] 
split level 66: [/input, 2460] 
split level 67: [/input, 2465] 
split level 68: [/input, 2038] 
split level 69: [/input, 166] 
split level 70: [/input-8, 821] 
split level 71: [/input, 3928] 
split level 72: [/input, 2382] 
split level 73: [/input-8, 525] 
split level 74: [/input, 2494] 
split level 75: [/input, 733] 
split level 76: [/input, 2794] 
split level 77: [/input, 1868] 
split level 78: [/input, 2470] 
split level 79: [/input, 748] 
split level 80: [/input, 372] 
split level 81: [/input-8, 1980] 
split level 82: [/input, 2792] 
split level 83: [/input, 1399] 
split level 84: [/input, 598] 
split level 85: [/input, 2505] 
split level 86: [/input, 1014] 
split level 87: [/input, 394] 
split level 88: [/input-8, 1978] 
split level 89: [/input, 860] 
split level 90: [/input, 1414] 
split level 91: [/input, 1169] 
split level 92: [/input, 1997] 
split level 93: [/input-8, 1998] 
split level 94: [/input, 2413] 
split level 95: [/input, 2430] 
split level 96: [/input, 1966] 
split level 97: [/input, 1970] 
split level 98: [/input-8, 342] 
split level 99: [/input, 3709] 
split level 100: [/input, 1885] 
split level 101: [/input-8, 1298] 
split level 102: [/input-8, 1859] 
split level 103: [/input, 2414] 
split level 104: [/input, 1953] 
split level 105: [/input, 1259] 
split level 106: [/input-8, 361] 
split level 107: [/input, 1902] 
split level 108: [/input, 1901] 
split level 109: [/input, 461] 
split level 110: [/input, 979] 
split level 111: [/input, 1412] 
split level 112: [/input, 1830] 
split level 113: [/input, 1220] 
split level 114: [/input, 2404] 
split level 115: [/input, 451] 
split level 116: [/input, 3774] 
split level 117: [/input, 1985] 
split level 118: [/input, 2036] 
split level 119: [/input, 3661] 
split level 120: [/input, 491] 
split level 121: [/input, 1270] 
split level 122: [/input, 1869] 
split level 123: [/input, 3820] 
split level 124: [/input-8, 979] 
split level 125: [/input, 1401] 
split level 126: [/input, 1378] 
split level 127: [/input, 492] 
split level 128: [/input-8, 936] 
split level 129: [/input, 1245] 
split level 130: [/input, 702] 
split level 131: [/input, 1836] 
split level 132: [/input, 1835] 
split level 133: [/input, 1882] 
split level 134: [/input, 377] 
split level 135: [/input, 2013] 
split level 136: [/input-8, 1967] 
split level 137: [/input, 1165] 
split level 138: [/input, 348] 
split level 139: [/input, 1362] 
split level 140: [/input, 1267] 
split level 141: [/input, 3990] 
split level 142: [/input, 2037] 
split level 143: [/input, 2450] 
split level 144: [/input, 2705] 
split level 145: [/input, 399] 
split level 146: [/input, 1843] 
split level 147: [/input, 3805] 
split level 148: [/input, 1842] 
split level 149: [/input, 2374] 
split level 150: [/input, 1275] 
split level 151: [/input, 3797] 
split level 152: [/input, 435] 
split level 153: [/input, 1430] 
split level 154: [/input, 1252] 
split level 155: [/input, 1428] 
split level 156: [/input, 2481] 
split level 157: [/input-8, 1593] 
split level 158: [/input, 2813] 
split level 159: [/input, 1820] 
split level 160: [/input-8, 1203] 
split level 161: [/input, 2798] 
split level 162: [/input, 2671] 
split level 163: [/input, 2043] 
split level 164: [/input, 2633] 
split level 165: [/input, 1815] 
split level 166: [/input, 2044] 
split level 167: [/input, 2355] 
split level 168: [/input, 2812] 
split level 169: [/input, 1243] 
split level 170: [/input, 1379] 
split level 171: [/input-8, 928] 
split level 172: [/input, 433] 
split level 173: [/input-8, 1902] 
split level 174: [/input, 2811] 
split level 175: [/input, 2515] 
split level 176: [/input, 3961] 
split level 177: [/input, 1811] 
split level 178: [/input, 812] 
split level 179: [/input, 2342] 
split level 180: [/input, 1084] 
split level 181: [/input, 1429] 
split level 182: [/input, 1818] 
split level 183: [/input, 3803] 
split level 184: [/input, 2045] 
split level 185: [/input, 1413] 
split level 186: [/input, 1821] 
split level 187: [/input, 1968] 
split level 188: [/input, 1465] 
split level 189: [/input-8, 920] 
split level 190: [/input, 2620] 
split level 191: [/input, 3611] 
split level 192: [/input, 333] 
split level 193: [/input, 1150] 
split level 194: [/input, 589] 
split level 195: [/input, 4006] 
split level 196: [/input, 1838] 
split level 197: [/input, 2237] 
split level 198: [/input, 1837] 
split level 199: [/input, 3621] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05082213878631592
10 lb beta sum: 0.0, worst -0.05082368850708008
Time: prepare 0.0113    bound 0.0957    transfer 0.0031    finalize 0.0026    func 0.1154    
Accumulated time: func 0.2018    prepare 0.0213    bound 0.1816    transfer 0.0032    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.03922474) min lb tensor(-0.05082142)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010141134262084961 
BICCOS Cumulative time: 0.010141134262084961
Preprocessing time: 0.009810924530029297 Inference time: 7.963180541992188e-05 Add cuts time: 4.506111145019531e-05 Cut analysis time: 0.00020551681518554688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04851 (1), -0.04848 (1), -0.04847 (1), -0.04844 (1), -0.04840 (1), -0.04835 (1), -0.04830 (1), -0.04828 (1), -0.04821 (1), -0.04815 (1), -0.04809 (1), -0.04808 (1), -0.04805 (1), -0.04803 (1), -0.04798 (1), -0.04798 (1), -0.04786 (1), -0.04781 (1), -0.04781 (1), -0.04777 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5081    set_bounds 0.0082    solve 0.1155    add 0.1900    
Accumulated time: pickout 0.0003    decision 0.5081    set_bounds 0.0082    solve 0.1155    add 0.1900    
Current (lb-rhs): -0.0485072135925293
50 domains visited
Cumulative time: 0.940657377243042

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 531] [/input-8, 1820] [/input-8, 1820] 
split level 1: [/input-8, 1890] [/input-8, 531] [/input-8, 531] [/input-8, 1890] [/input-8, 531] [/input-8, 531] [/input-8, 531] [/input-8, 1890] [/input-8, 531] [/input-8, 531] 
split level 2: [/input-8, 1819] [/input-8, 1890] [/input-8, 1890] [/input-8, 1819] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1819] [/input-8, 1890] [/input-8, 1890] 
split level 3: [/input-8, 1203] [/input-8, 1819] [/input-8, 1819] [/input-8, 1876] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] [/input-8, 1876] [/input-8, 1819] [/input-8, 1819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04689931869506836
10 lb beta sum: 0.19730766117572784, worst -0.04574429988861084
Time: prepare 0.0070    bound 1.2087    transfer 0.0014    finalize 0.0024    func 1.2222    
Accumulated time: func 1.4239    prepare 0.0286    bound 1.3904    transfer 0.0046    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.00186682) min lb tensor(-0.04544401)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.012423038482666016 
BICCOS Cumulative time: 0.022564172744750977
Preprocessing time: 0.011516094207763672 Inference time: 0.00012946128845214844 Add cuts time: 9.608268737792969e-05 Cut analysis time: 0.0006814002990722656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03087 (2), -0.03081 (2), -0.03061 (2), -0.03048 (2), -0.03047 (2), -0.03033 (2), -0.03021 (2), -0.03010 (2), -0.03004 (2), -0.02991 (2), -0.02974 (2), -0.02971 (2), -0.02958 (2), -0.02950 (2), -0.02925 (2), -0.02912 (2), -0.02901 (2), -0.02839 (2), -0.02805 (2), -0.02802 (2), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0215    set_bounds 0.0128    solve 1.2223    add 0.1414    
Accumulated time: pickout 0.0081    decision 0.5297    set_bounds 0.0210    solve 1.3377    add 0.3314    
Current (lb-rhs): -0.030870795249938965
100 domains visited
Cumulative time: 2.359090805053711

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1820] [/input-8, 531] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 531] [/input-8, 531] 
split level 1: [/input-8, 531] [/input-8, 1819] [/input-8, 531] [/input-8, 531] [/input-8, 531] [/input-8, 531] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] 
split level 2: [/input-8, 1819] [/input-8, 1890] [/input-8, 1819] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] 
split level 3: [/input-8, 1203] [/input-8, 1203] [/input-8, 1203] [/input-8, 1203] [/input-8, 1203] [/input-8, 1819] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03025531768798828
10 lb beta sum: 0.20582382380962372, worst -0.028617501258850098
Time: prepare 0.0066    bound 1.3407    transfer 0.0016    finalize 0.0023    func 1.3547    
Accumulated time: func 2.7787    prepare 0.0354    bound 2.7311    transfer 0.0062    finalize 0.0075    
all_split False
======================Cut inference begins======================
max lb tensor(0.01424670) min lb tensor(-0.02858424)
Number of Verified Splits: 48 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 2
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.014524221420288086 
BICCOS Cumulative time: 0.03708839416503906
Preprocessing time: 0.011335134506225586 Inference time: 0.0020341873168945312 Add cuts time: 0.0008521080017089844 Cut analysis time: 0.0003027915954589844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01397 (3), -0.01393 (3), -0.01363 (3), -0.01356 (3), -0.01347 (3), -0.01344 (3), -0.01344 (3), -0.01325 (3), -0.01286 (3), -0.01285 (3), -0.01235 (3), -0.01234 (3), -0.01234 (3), -0.01224 (3), -0.01199 (3), -0.01196 (3), -0.01162 (3), -0.01160 (3), -0.01157 (3), -0.01122 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0190    set_bounds 0.0150    solve 1.3549    add 0.0776    
Accumulated time: pickout 0.0091    decision 0.5486    set_bounds 0.0360    solve 2.6926    add 0.4090    
Current (lb-rhs): -0.013973116874694824
150 domains visited
Cumulative time: 3.841259479522705

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1890] [/input-8, 1890] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] 
split level 1: [/input-8, 1819] [/input-8, 1819] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] 
split level 2: [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1819] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] 
split level 3: [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23524999618530273, worst -0.02446509525179863
10 lb beta sum: 0.4128359854221344, worst -0.016155129298567772
Time: prepare 0.0148    bound 0.1293    transfer 0.0022    finalize 0.0017    func 0.1505    
Accumulated time: func 2.9292    prepare 0.0505    bound 2.8603    transfer 0.0084    finalize 0.0092    
all_split False
======================Cut inference begins======================
max lb tensor(0.00581644) min lb tensor(-0.01238084)
Number of Verified Splits: 104 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 2
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.018527746200561523 
BICCOS Cumulative time: 0.055616140365600586
Preprocessing time: 0.01126408576965332 Inference time: 0.005132436752319336 Add cuts time: 0.0012814998626708984 Cut analysis time: 0.0008497238159179688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00387 (4), -0.00382 (4), -0.00381 (4), -0.00381 (4), -0.00371 (4), -0.00370 (4), -0.00362 (4), -0.00361 (4), -0.00360 (4), -0.00359 (4), -0.00359 (4), -0.00358 (4), -0.00347 (4), -0.00339 (4), -0.00323 (4), -0.00310 (4), -0.00308 (4), -0.00306 (4), -0.00305 (4), -0.00302 (4), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0189    set_bounds 0.0151    solve 0.1507    add 0.2232    
Accumulated time: pickout 0.0100    decision 0.5676    set_bounds 0.0511    solve 2.8433    add 0.6322    
Current (lb-rhs): -0.003873586654663086
200 domains visited
Cumulative time: 4.268853664398193

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] 
split level 1: [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] [/input-8, 1820] [/input-8, 1820] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] 
split level 2: [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1819] [/input-8, 1819] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] 
split level 3: [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1876] [/input-8, 1876] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.005297422409057617
10 lb beta sum: 0.25413841009140015, worst -0.015234891325235367
Time: prepare 0.0063    bound 0.1290    transfer 0.0019    finalize 0.0024    func 0.1422    
Accumulated time: func 3.0714    prepare 0.0570    bound 2.9894    transfer 0.0103    finalize 0.0116    
all_split False
======================Cut inference begins======================
max lb tensor(0.00746381) min lb tensor(-0.00347316)
Number of Verified Splits: 303 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0318913459777832 
BICCOS Cumulative time: 0.08750748634338379
Preprocessing time: 0.011166572570800781 Inference time: 0.016657590866088867 Add cuts time: 0.003767728805541992 Cut analysis time: 0.0002994537353515625
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0192    set_bounds 0.0139    solve 0.1423    add 0.0259    
Accumulated time: pickout 0.0109    decision 0.5867    set_bounds 0.0650    solve 2.9856    add 0.6581    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([1957, 531, 1890, 1889], [-1.0, -1.0, -1.0, -1.0], [0, 0, 0, 0], [2.5387525604990066e-16, 0.017573760822415352, 0.006037877406924963, 0.0036230518016964197], [0, 1, 2, 3]), '/input-12': (tensor([76]), tensor([-1.]), tensor([0]), tensor([8.45111758e-11]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1957, 531, 1890, 1889], [-1.0, -1.0, -1.0, -1.0], [0, 0, 0, 0], [2.5387525604990066e-16, 0.017573760822415352, 0.006037877406924963, 0.0036230518016964197], [0, 1, 2, 3]), '/input-12': (tensor([76]), tensor([1.]), tensor([0]), tensor([1.46472390e-10]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1957, 531, 1890, 1889], [-1.0, -1.0, -1.0, 1.0], [0, 0, 0, 0], [2.5387525604990066e-16, 0.017573760822415352, 0.006037877406924963, 0.0060090431943535805], [0, 1, 2, 3]), '/input-12': (tensor([76]), tensor([-1.]), tensor([0]), tensor([8.28926261e-10]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1957, 531, 1890, 1889], [-1.0, -1.0, -1.0, 1.0], [0, 0, 0, 0], [2.5387525604990066e-16, 0.017573760822415352, 0.006037877406924963, 0.0060090431943535805], [0, 1, 2, 3]), '/input-12': (tensor([76]), tensor([1.]), tensor([0]), tensor([1.21921362e-10]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1957,  531, 1890, 1820]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.53875256e-16, 1.75737608e-02, 4.26368555e-03, 1.01525057e-02]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1957, 531, 1890, 1820], [-1.0, -1.0, 1.0, 1.0], [0, 0, 0, 0], [2.5387525604990066e-16, 0.017573760822415352, 0.004263685550540686, 0.0065393908880651], [0, 1, 2, 3]), '/input-12': (tensor([76]), tensor([-1.]), tensor([0]), tensor([8.39971648e-10]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1957, 531, 1890, 1820], [-1.0, -1.0, 1.0, 1.0], [0, 0, 0, 0], [2.5387525604990066e-16, 0.017573760822415352, 0.004263685550540686, 0.0065393908880651], [0, 1, 2, 3]), '/input-12': (tensor([76]), tensor([1.]), tensor([0]), tensor([1.23379876e-10]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1957,  531, 1820]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.53875256e-16, 3.09722289e-03, 1.16585959e-02]), tensor([0, 1, 2])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1957,  531, 1820]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([2.53875256e-16, 3.09722289e-03, 5.22975763e-03]), tensor([0, 1, 2])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1957]), tensor([1.]), tensor([0]), tensor([-1.36610939e+31]), tensor([0])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  10
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05039560794830322
10 lb beta sum: 0.3704542815685272, worst -0.04749715328216553
Time: prepare 0.0005    bound 0.1324    transfer 0.0001    finalize 0.0002    func 0.1333    
Accumulated time: func 3.2048    prepare 0.0575    bound 3.1218    transfer 0.0104    finalize 0.0118    
After pruning, left:  6

Back to Regular BaB

BaB round 1
batch: 6
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1820] [/input-8, 1820] [/input-8, 1819] [/input-12, 76] [/input-12, 76] [/input-8, 1820] 
split level 1: [/input-8, 1819] [/input-8, 1819] [/input-12, 79] [/input-8, 1890] [/input-8, 1819] [/input-8, 531] 
split level 2: [/input-12, 79] [/input-12, 79] [/input-8, 1876] [/input-8, 1819] [/input-8, 1890] [/input-8, 1890] 
split level 3: [/input-8, 1876] [/input-8, 1876] [/input-8, 1945] [/input-8, 1876] [/input-8, 1876] [/input-8, 1819] 
split level 4: [/input-8, 1945] [/input-8, 1945] [/input, 1941] [/input-8, 1945] [/input-8, 1945] [/input-8, 1876] 
split level 5: [/input-8, 1900] [/input-8, 1900] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] 
cut re-enabled after branching node selection
0 lb beta sum: 0.35438162088394165, worst -0.029416322708129883
10 lb beta sum: 0.35464906692504883, worst -0.02938389778137207
Time: prepare 0.0165    bound 0.1329    transfer 0.0007    finalize 0.0022    func 0.1547    
Accumulated time: func 3.3595    prepare 0.0743    bound 3.2546    transfer 0.0111    finalize 0.0139    
all_split False
======================Cut inference begins======================
max lb tensor(0.26872504) min lb tensor(-0.02937496)
Number of Verified Splits: 306 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.3260692059993744, worst -0.03650999069213867
10 lb beta sum: 0.38885051012039185, worst -0.021658122539520264
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 4
#cuts 4-6: 2
#cuts 7-9: 12
#cuts >= 20: 0
BICCOS time: 0.3377573490142822 
BICCOS Cumulative time: 0.425264835357666
Preprocessing time: 0.010377645492553711 Inference time: 0.31780362129211426 Add cuts time: 0.00850367546081543 Cut analysis time: 0.0010724067687988281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02937 (6), -0.02842 (6), -0.02801 (6), -0.02590 (6), -0.02590 (6), -0.02548 (6), -0.02495 (6), -0.02457 (6), -0.02436 (6), -0.02398 (6), -0.02370 (6), -0.02284 (6), -0.02251 (6), -0.02245 (6), -0.02220 (6), -0.02174 (6), -0.02156 (6), -0.02150 (6), -0.02138 (6), -0.02118 (6), 
Length of domains: 78
Time: pickout 0.0005    decision 0.0177    set_bounds 0.0372    solve 0.1548    add 0.0011    
Accumulated time: pickout 0.0115    decision 0.6045    set_bounds 0.1022    solve 3.1404    add 0.6592    
Current (lb-rhs): -0.02937495708465576
278 domains visited
Cumulative time: 5.21002197265625

BaB round 2
batch: 78
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 79] [/input-12, 76] [/input-12, 76] [/input-12, 79] [/input-12, 79] [/input-12, 76] [/input-12, 76] [/input-12, 79] [/input-12, 79] [/input-12, 76] 
split level 1: [/input-8, 1880] [/input-12, 79] [/input-12, 79] [/input-8, 1900] [/input-8, 1880] [/input-12, 79] [/input-12, 79] [/input-8, 1880] [/input-8, 1900] [/input-8, 1945] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029508471488952637
10 lb beta sum: 0.18620936572551727, worst -0.028036832809448242
Time: prepare 0.0065    bound 0.1305    transfer 0.0006    finalize 0.0019    func 0.1416    
Accumulated time: func 3.5010    prepare 0.0810    bound 3.3851    transfer 0.0116    finalize 0.0159    
all_split False
======================Cut inference begins======================
max lb tensor(0.54497695) min lb tensor(-0.02802479)
Number of Verified Splits: 206 of 312
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.029042482376098633 
BICCOS Cumulative time: 0.45430731773376465
Preprocessing time: 0.008967399597167969 Inference time: 0.0170285701751709 Add cuts time: 0.0026810169219970703 Cut analysis time: 0.0003654956817626953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02802 (8), -0.02799 (8), -0.02705 (8), -0.02584 (8), -0.02456 (8), -0.02455 (8), -0.02411 (8), -0.02368 (8), -0.02358 (8), -0.02303 (8), -0.02260 (8), -0.02248 (8), -0.02242 (8), -0.02218 (8), -0.02157 (8), -0.02099 (8), -0.02099 (8), -0.02083 (8), -0.02070 (8), -0.02007 (8), 
Length of domains: 106
Time: pickout 0.0015    decision 0.0175    set_bounds 0.0167    solve 0.1416    add 0.0011    
Accumulated time: pickout 0.0130    decision 0.6220    set_bounds 0.1189    solve 3.2820    add 0.6602    
Current (lb-rhs): -0.028024792671203613
384 domains visited
Cumulative time: 5.418670415878296

BaB round 3
batch: 106
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-8, 1880] [/input-8, 1880] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028024911880493164
10 lb beta sum: 0.10999847948551178, worst -0.02801048755645752
Time: prepare 0.0045    bound 0.1323    transfer 0.0004    finalize 0.0016    func 0.1403    
Accumulated time: func 3.6413    prepare 0.0857    bound 3.5174    transfer 0.0121    finalize 0.0175    
all_split False
======================Cut inference begins======================
max lb tensor(0.29028764) min lb tensor(-0.02800035)
Number of Verified Splits: 94 of 212
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 7
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.015834569931030273 
BICCOS Cumulative time: 0.4701418876647949
Preprocessing time: 0.0062024593353271484 Inference time: 0.0077512264251708984 Add cuts time: 0.0015087127685546875 Cut analysis time: 0.00037217140197753906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02800 (9), -0.02754 (9), -0.02704 (9), -0.02547 (9), -0.02454 (9), -0.02412 (9), -0.02409 (9), -0.02358 (9), -0.02323 (9), -0.02303 (9), -0.02258 (9), -0.02225 (9), -0.02205 (9), -0.02171 (9), -0.02156 (9), -0.02080 (9), -0.02048 (9), -0.02047 (9), -0.02037 (9), -0.01990 (9), 
Length of domains: 118
Time: pickout 0.0018    decision 0.0169    set_bounds 0.0090    solve 0.1403    add 0.0011    
Accumulated time: pickout 0.0147    decision 0.6389    set_bounds 0.1279    solve 3.4224    add 0.6613    
Current (lb-rhs): -0.028000354766845703
502 domains visited
Cumulative time: 5.604247570037842

BaB round 4
batch: 118
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027557849884033203
10 lb beta sum: 0.03909473121166229, worst -0.027548551559448242
Time: prepare 0.0051    bound 0.1321    transfer 0.0005    finalize 0.0014    func 0.1407    
Accumulated time: func 3.7820    prepare 0.0910    bound 3.6495    transfer 0.0126    finalize 0.0189    
all_split False
======================Cut inference begins======================
max lb tensor(0.00791617) min lb tensor(-0.02754569)
Number of Verified Splits: 57 of 236
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 7
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.013923883438110352 
BICCOS Cumulative time: 0.4840657711029053
Preprocessing time: 0.006869316101074219 Inference time: 0.005130290985107422 Add cuts time: 0.0013318061828613281 Cut analysis time: 0.0005924701690673828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02755 (10), -0.02670 (10), -0.02623 (10), -0.02419 (10), -0.02409 (10), -0.02363 (10), -0.02325 (10), -0.02281 (10), -0.02266 (10), -0.02213 (10), -0.02194 (10), -0.02121 (10), -0.02112 (10), -0.02079 (10), -0.02046 (10), -0.02014 (10), -0.01966 (10), -0.01934 (10), -0.01934 (10), -0.01929 (10), 
Length of domains: 179
Time: pickout 0.0017    decision 0.0168    set_bounds 0.0091    solve 0.1408    add 0.0012    
Accumulated time: pickout 0.0165    decision 0.6558    set_bounds 0.1370    solve 3.5631    add 0.6625    
Current (lb-rhs): -0.027545690536499023
681 domains visited
Cumulative time: 5.788346529006958

BaB round 5
batch: 179
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1877] [/input-8, 1900] [/input-8, 1900] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026822924613952637
10 lb beta sum: 0.027359258383512497, worst -0.026815295219421387
Time: prepare 0.0075    bound 0.1333    transfer 0.0006    finalize 0.0020    func 0.1458    
Accumulated time: func 3.9278    prepare 0.0987    bound 3.7828    transfer 0.0132    finalize 0.0209    
all_split False
======================Cut inference begins======================
max lb tensor(0.00800371) min lb tensor(-0.02680874)
Number of Verified Splits: 111 of 358
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 8
#cuts 4-6: 17
#cuts >= 20: 0
BICCOS time: 0.0241701602935791 
BICCOS Cumulative time: 0.5082359313964844
Preprocessing time: 0.010092735290527344 Inference time: 0.01081538200378418 Add cuts time: 0.0023610591888427734 Cut analysis time: 0.0009009838104248047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02681 (11), -0.02597 (11), -0.02549 (11), -0.02343 (11), -0.02336 (11), -0.02291 (11), -0.02253 (11), -0.02208 (11), -0.02194 (11), -0.02142 (11), -0.02121 (11), -0.02050 (11), -0.02049 (11), -0.02003 (11), -0.01973 (11), -0.01929 (11), -0.01915 (11), -0.01851 (11), -0.01846 (11), -0.01846 (11), 
Length of domains: 247
Time: pickout 0.0024    decision 0.0198    set_bounds 0.0149    solve 0.1459    add 0.0017    
Accumulated time: pickout 0.0188    decision 0.6756    set_bounds 0.1519    solve 3.7090    add 0.6642    
Current (lb-rhs): -0.026808738708496094
928 domains visited
Cumulative time: 5.998041868209839

BaB round 6
batch: 247
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025449752807617188
10 lb beta sum: 0.024140560999512672, worst -0.025440216064453125
Time: prepare 0.0113    bound 0.1499    transfer 0.0024    finalize 0.0026    func 0.1694    
Accumulated time: func 4.0972    prepare 0.1103    bound 3.9327    transfer 0.0156    finalize 0.0235    
all_split False
======================Cut inference begins======================
max lb tensor(0.00796711) min lb tensor(-0.02543449)
Number of Verified Splits: 111 of 494
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 9
#cuts 4-6: 25
#cuts >= 20: 0
BICCOS time: 0.029160022735595703 
BICCOS Cumulative time: 0.5373959541320801
Preprocessing time: 0.014026641845703125 Inference time: 0.011214733123779297 Add cuts time: 0.002738475799560547 Cut analysis time: 0.0011801719665527344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02543 (12), -0.02465 (12), -0.02455 (12), -0.02344 (12), -0.02328 (12), -0.02276 (12), -0.02260 (12), -0.02198 (12), -0.02182 (12), -0.02125 (12), -0.02111 (12), -0.02088 (12), -0.02079 (12), -0.02034 (12), -0.02031 (12), -0.02000 (12), -0.01969 (12), -0.01935 (12), -0.01928 (12), -0.01924 (12), 
Length of domains: 383
Time: pickout 0.0032    decision 0.0245    set_bounds 0.0175    solve 0.1695    add 0.1023    
Accumulated time: pickout 0.0220    decision 0.7001    set_bounds 0.1694    solve 3.8786    add 0.7665    
Current (lb-rhs): -0.025434494018554688
1311 domains visited
Cumulative time: 6.35250186920166

BaB round 7
batch: 383
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1992] [/input, 1992] [/input, 1992] [/input, 1992] [/input, 1992] [/input, 1992] [/input-8, 1893] [/input, 1992] [/input-8, 1893] [/input, 1955] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02460026741027832
10 lb beta sum: 0.02094125933945179, worst -0.024595141410827637
Time: prepare 0.0181    bound 0.1521    transfer 0.0036    finalize 0.0047    func 0.1834    
Accumulated time: func 4.2807    prepare 0.1286    bound 4.0849    transfer 0.0191    finalize 0.0282    
all_split False
======================Cut inference begins======================
max lb tensor(0.00577712) min lb tensor(-0.02458918)
Number of Verified Splits: 159 of 766
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 9
#cuts 4-6: 32
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.04450106620788574 
BICCOS Cumulative time: 0.5818970203399658
Preprocessing time: 0.02184152603149414 Inference time: 0.01720261573791504 Add cuts time: 0.003971099853515625 Cut analysis time: 0.0014858245849609375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02459 (13), -0.02371 (13), -0.02345 (13), -0.02325 (13), -0.02257 (13), -0.02239 (13), -0.02205 (13), -0.02201 (13), -0.02192 (13), -0.02141 (13), -0.02126 (13), -0.02078 (13), -0.02061 (13), -0.02057 (13), -0.02051 (13), -0.02003 (13), -0.02003 (13), -0.01995 (13), -0.01992 (13), -0.01991 (13), 
Length of domains: 607
Time: pickout 0.0557    decision 0.0321    set_bounds 0.0292    solve 0.1836    add 0.0842    
Accumulated time: pickout 0.0778    decision 0.7323    set_bounds 0.1987    solve 4.0621    add 0.8507    
Current (lb-rhs): -0.024589180946350098
1918 domains visited
Cumulative time: 6.7853851318359375

BaB round 8
batch: 607
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input, 1992] [/input-8, 1893] [/input, 1992] [/input, 1992] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02339911460876465
10 lb beta sum: 0.015010648407042027, worst -0.02339339256286621
Time: prepare 0.0292    bound 0.1666    transfer 0.0061    finalize 0.0064    func 0.2167    
Accumulated time: func 4.4974    prepare 0.1580    bound 4.2515    transfer 0.0252    finalize 0.0346    
all_split False
======================Cut inference begins======================
max lb tensor(0.00376595) min lb tensor(-0.02339232)
Number of Verified Splits: 236 of 1214
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 66.
#cuts 1-3: 9
#cuts 4-6: 51
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 0.07157683372497559 
BICCOS Cumulative time: 0.6534738540649414
Preprocessing time: 0.03641033172607422 Inference time: 0.025230884552001953 Add cuts time: 0.007544040679931641 Cut analysis time: 0.0023915767669677734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02339 (14), -0.02251 (14), -0.02197 (14), -0.02196 (14), -0.02195 (14), -0.02185 (14), -0.02137 (14), -0.02121 (14), -0.02115 (14), -0.02112 (14), -0.02111 (14), -0.02072 (14), -0.02061 (14), -0.02042 (14), -0.02001 (14), -0.02000 (14), -0.01994 (14), -0.01970 (14), -0.01961 (14), -0.01957 (14), 
Length of domains: 978
Time: pickout 0.0086    decision 0.0441    set_bounds 0.0506    solve 0.2170    add 0.0073    
Accumulated time: pickout 0.0864    decision 0.7763    set_bounds 0.2493    solve 4.2791    add 0.8580    
Current (lb-rhs): -0.023392319679260254
2896 domains visited
Cumulative time: 7.189085006713867

BaB round 9
batch: 978
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.022630810737609863
10 lb beta sum: 0.009106199257075787, worst -0.022627949714660645
Time: prepare 0.0478    bound 0.2250    transfer 0.0082    finalize 0.0107    func 0.3044    
Accumulated time: func 4.8018    prepare 0.2061    bound 4.4764    transfer 0.0334    finalize 0.0452    
all_split False
======================Cut inference begins======================
max lb tensor(0.00473177) min lb tensor(-0.02262568)
Number of Verified Splits: 402 of 1956
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 86.
#cuts 1-3: 10
#cuts 4-6: 65
#cuts 7-9: 11
#cuts >= 20: 0
BICCOS time: 0.12069177627563477 
BICCOS Cumulative time: 0.7741656303405762
Preprocessing time: 0.059227705001831055 Inference time: 0.04459095001220703 Add cuts time: 0.013574361801147461 Cut analysis time: 0.0032987594604492188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02263 (15), -0.02175 (15), -0.02117 (15), -0.02111 (15), -0.02109 (15), -0.02107 (15), -0.02061 (15), -0.02059 (15), -0.02042 (15), -0.02030 (15), -0.02025 (15), -0.01997 (15), -0.01974 (15), -0.01973 (15), -0.01952 (15), -0.01952 (15), -0.01948 (15), -0.01944 (15), -0.01919 (15), -0.01917 (15), 
Length of domains: 1554
Time: pickout 0.0169    decision 0.2280    set_bounds 0.0816    solve 0.3053    add 0.0170    
Accumulated time: pickout 0.1032    decision 1.0043    set_bounds 0.3308    solve 4.5844    add 0.8750    
Current (lb-rhs): -0.02262568473815918
4450 domains visited
Cumulative time: 7.962754487991333

BaB round 10
batch: 1554
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1891] [/input, 1891] [/input, 1891] [/input, 1891] [/input, 1891] [/input, 1891] [/input, 1891] [/input, 1891] [/input, 1954] [/input, 1955] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.022216081619262695
10 lb beta sum: 0.0071001723408699036, worst -0.02221810817718506
Time: prepare 0.0771    bound 0.3160    transfer 0.0155    finalize 0.0179    func 0.4467    
Accumulated time: func 5.2484    prepare 0.2834    bound 4.7924    transfer 0.0489    finalize 0.0631    
all_split False
======================Cut inference begins======================
max lb tensor(0.00359141) min lb tensor(-0.02221608)
Number of Verified Splits: 538 of 3108
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 120.
#cuts 1-3: 11
#cuts 4-6: 92
#cuts 7-9: 17
#cuts >= 20: 0
BICCOS time: 0.1902632713317871 
BICCOS Cumulative time: 0.9644289016723633
Preprocessing time: 0.09690666198730469 Inference time: 0.06762337684631348 Add cuts time: 0.021085739135742188 Cut analysis time: 0.004647493362426758
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02222 (16), -0.02134 (16), -0.02075 (16), -0.02066 (16), -0.02062 (16), -0.02036 (16), -0.02027 (16), -0.02023 (16), -0.02017 (16), -0.01984 (16), -0.01978 (16), -0.01968 (16), -0.01958 (16), -0.01958 (16), -0.01952 (16), -0.01932 (16), -0.01924 (16), -0.01922 (16), -0.01896 (16), -0.01893 (16), 
Length of domains: 2570
Time: pickout 0.0218    decision 0.0937    set_bounds 0.1313    solve 0.4476    add 0.0305    
Accumulated time: pickout 0.1250    decision 1.0980    set_bounds 0.4621    solve 5.0320    add 0.9055    
Current (lb-rhs): -0.022216081619262695
7020 domains visited
Cumulative time: 8.884679555892944

BaB round 11
batch: 2570
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1977] [/input, 1977] [/input, 1977] [/input, 1977] [/input-8, 802] [/input, 1912] [/input-8, 802] [/input, 1977] [/input-8, 1893] [/input-8, 1893] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.020711660385131836
10 lb beta sum: 0.005226445384323597, worst -0.020699262619018555
Time: prepare 0.1353    bound 0.4819    transfer 0.0268    finalize 0.0300    func 0.7076    
Accumulated time: func 5.9561    prepare 0.4190    bound 5.2743    transfer 0.0757    finalize 0.0931    
all_split False
======================Cut inference begins======================
max lb tensor(0.22049016) min lb tensor(-0.02069521)
Number of Verified Splits: 948 of 5140
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 153.
#cuts 1-3: 15
#cuts 4-6: 99
#cuts 7-9: 38
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.330380916595459 
BICCOS Cumulative time: 1.2948098182678223
Preprocessing time: 0.16303515434265137 Inference time: 0.1239933967590332 Add cuts time: 0.03710627555847168 Cut analysis time: 0.006246089935302734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02070 (17), -0.02061 (17), -0.01983 (17), -0.01974 (17), -0.01949 (17), -0.01941 (17), -0.01924 (17), -0.01920 (17), -0.01916 (17), -0.01900 (17), -0.01899 (17), -0.01892 (17), -0.01874 (17), -0.01873 (17), -0.01864 (17), -0.01864 (17), -0.01864 (17), -0.01856 (17), -0.01853 (17), -0.01847 (17), 
Length of domains: 4192
Time: pickout 0.0363    decision 0.3050    set_bounds 0.2234    solve 0.7085    add 0.0561    
Accumulated time: pickout 0.1614    decision 1.4030    set_bounds 0.6855    solve 5.7405    add 0.9616    
Current (lb-rhs): -0.020695209503173828
11212 domains visited
Cumulative time: 10.559651136398315

BaB round 12
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1309] [/input, 1978] [/input-8, 1309] [/input-8, 1309] [/input, 1977] [/input, 1941] [/input, 1978] [/input-8, 802] [/input, 1912] [/input-8, 802] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01987016201019287
10 lb beta sum: 0.010996609926223755, worst -0.021146398037672043
Time: prepare 0.2133    bound 0.7433    transfer 0.0408    finalize 0.0480    func 1.0998    
Accumulated time: func 7.0558    prepare 0.6326    bound 6.0176    transfer 0.1165    finalize 0.1411    
all_split False
======================Cut inference begins======================
max lb tensor(0.38438952) min lb tensor(-0.01985514)
Number of Verified Splits: 2080 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 110.
#cuts 1-3: 19
#cuts 4-6: 63
#cuts 7-9: 28
#cuts >= 20: 0
BICCOS time: 0.7780065536499023 
BICCOS Cumulative time: 2.0728163719177246
Preprocessing time: 0.2673490047454834 Inference time: 0.4533507823944092 Add cuts time: 0.05274200439453125 Cut analysis time: 0.004564762115478516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01986 (18), -0.01978 (18), -0.01902 (18), -0.01896 (18), -0.01894 (18), -0.01886 (18), -0.01877 (18), -0.01869 (18), -0.01865 (18), -0.01842 (18), -0.01841 (18), -0.01833 (18), -0.01825 (18), -0.01816 (18), -0.01815 (18), -0.01812 (18), -0.01808 (18), -0.01807 (18), -0.01785 (18), -0.01784 (18), 
Length of domains: 6208
Time: pickout 0.0590    decision 0.3926    set_bounds 0.3719    solve 1.1014    add 0.0204    
Accumulated time: pickout 0.2204    decision 1.7956    set_bounds 1.0574    solve 6.8419    add 0.9820    
Current (lb-rhs): -0.019855141639709473
17324 domains visited
current_vram/total_varm: 9.9GB/99.9GB, batch_size increase to 8192
Cumulative time: 13.316224575042725

BaB round 13
batch: 6208
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1977] [/input, 1977] [/input, 1977] [/input, 1978] [/input, 1891] [/input-8, 802] [/input-8, 802] [/input-8, 1893] [/input-8, 802] [/input, 1977] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.019318699836730957
10 lb beta sum: 0.08864526450634003, worst -0.022674560546875
Time: prepare 0.3436    bound 1.0509    transfer 0.0610    finalize 0.2529    func 1.7912    
Accumulated time: func 8.8471    prepare 0.9766    bound 7.0685    transfer 0.1776    finalize 0.3940    
all_split False
======================Cut inference begins======================
max lb tensor(0.40419173) min lb tensor(-0.01931310)
Number of Verified Splits: 5121 of 12416
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 20
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 1.344484806060791 
BICCOS Cumulative time: 3.4173011779785156
Preprocessing time: 0.38144445419311523 Inference time: 0.8773677349090576 Add cuts time: 0.08488225936889648 Cut analysis time: 0.0007903575897216797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01931 (19), -0.01923 (19), -0.01848 (19), -0.01840 (19), -0.01838 (19), -0.01833 (19), -0.01820 (19), -0.01813 (19), -0.01787 (19), -0.01785 (19), -0.01781 (19), -0.01779 (19), -0.01777 (19), -0.01762 (19), -0.01757 (19), -0.01756 (19), -0.01754 (19), -0.01752 (19), -0.01739 (19), -0.01731 (19), 
Length of domains: 7295
Time: pickout 0.1156    decision 0.3457    set_bounds 0.5576    solve 1.7938    add 0.1219    
Accumulated time: pickout 0.3359    decision 2.1413    set_bounds 1.6150    solve 8.6357    add 1.1039    
Current (lb-rhs): -0.01931309700012207
24619 domains visited
Cumulative time: 17.64930248260498

BaB round 14
batch: 7295
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1309] [/input-8, 1309] [/input, 1978] [/input-8, 1309] [/input, 1978] [/input, 421] [/input, 421] [/input, 421] [/input-8, 1309] [/input, 1978] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018986105918884277
10 lb beta sum: 0.8226915597915649, worst -0.018985509872436523
Time: prepare 0.5841    bound 1.1493    transfer 0.0745    finalize 0.0855    func 1.9903    
Accumulated time: func 10.8374    prepare 1.5610    bound 8.2178    transfer 0.2520    finalize 0.4795    
all_split False
======================Cut inference begins======================
max lb tensor(0.95993549) min lb tensor(-0.01898444)
Number of Verified Splits: 13496 of 14590
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 2.6489298343658447 
BICCOS Cumulative time: 6.06623101234436
Preprocessing time: 0.4659695625305176 Inference time: 2.055233955383301 Add cuts time: 0.12730860710144043 Cut analysis time: 0.0004177093505859375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01898 (20), -0.01891 (20), -0.01815 (20), -0.01807 (20), -0.01769 (20), -0.01765 (20), -0.01742 (20), -0.01723 (20), -0.01696 (20), -0.01692 (20), -0.01692 (20), -0.01692 (20), -0.01688 (20), -0.01684 (20), -0.01675 (20), -0.01663 (20), -0.01662 (20), -0.01657 (20), -0.01642 (20), -0.01642 (20), 
Length of domains: 1094
Time: pickout 0.1434    decision 0.3967    set_bounds 0.6561    solve 1.9955    add 0.0851    
Accumulated time: pickout 0.4794    decision 2.5380    set_bounds 2.2711    solve 10.6312    add 1.1890    
Current (lb-rhs): -0.018984436988830566
25713 domains visited
Cumulative time: 23.699833154678345

BaB round 15
batch: 1094
splitting decisions: 
split level 0: [/input, 1891] [/input, 1891] [/input, 1979] [/input, 1979] [/input, 2441] [/input, 2441] [/input, 1979] [/input, 1912] [/input, 1979] [/input, 2441] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018043041229248047

all verified at 1th iter
Time: prepare 0.0597    bound 0.0195    transfer 0.0083    finalize 0.0122    func 0.1140    
Accumulated time: func 10.9514    prepare 1.6209    bound 8.2373    transfer 0.2603    finalize 0.4917    
all_split False
======================Cut inference begins======================
max lb tensor(0.05279688) min lb tensor(1.85966492e-05)
Number of Verified Splits: 2188 of 2188
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.06887626647949219 
BICCOS Cumulative time: 6.1351072788238525
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0289    decision 0.0683    set_bounds 0.0942    solve 0.1143    add 0.0006    
Accumulated time: pickout 0.5083    decision 2.6064    set_bounds 2.3653    solve 10.7456    add 1.1896    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
25713 domains visited
Cumulative time: 24.088748693466187


Properties batch 6, size 1
Remaining timeout: 174.32455730438232
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 174.32443761825562
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 174.32441210746765
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 25.6757 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 53, vnnlib ID: 53 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.67231560, -12.31690121,  -9.13868904,  -9.91203594, -10.08119774,
         -10.03050518, -10.11687660,  -9.52802277, -13.05829144, -11.58372593]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [415]; unstable size 415; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 143, 1, 415] with unstable size 142 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 415] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 415] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [142]; unstable size 142; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 142] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.06250858,  1.38609862, -1.36709845, -0.49393940, -0.48505685,
         -0.38832164, -1.14975965,  2.17636323,  0.71444750]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.67231560, -12.31690121,  -9.13868904,  -9.91203594, -10.08119774,
         -10.03050518, -10.11687660,  -9.52802277, -13.05829144, -11.58372593]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.67231464, -12.31690121,  -9.13868713,  -9.91203594, -10.08119774,
          -10.03050327, -10.11687565,  -9.52802277, -13.05829048, -11.58372498],
         [ -9.67231464, -12.31690121,  -9.13868713,  -9.91203594, -10.08119774,
          -10.03050327, -10.11687565,  -9.52802277, -13.05829048, -11.58372498]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44456100, -0.97818851, -0.20483971, -0.03567791, -0.08637238,
          -0.58885288]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0884 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 54, vnnlib ID: 54 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.22662783, -5.64782429, -2.60211635, -3.16177058, -3.14393139,
         -3.25724936, -3.03231645, -2.89354324, -3.41767120, -4.93730450]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [530]; unstable size 530; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 530] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 530] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 530] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 159] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.37045440,  1.62803984, -1.37615514, -0.83468586, -0.86788654,
         -0.74519169, -0.99820900, -1.20427883,  0.93063641]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.22662783, -5.64782429, -2.60211635, -3.16177058, -3.14393139,
         -3.25724936, -3.03231645, -2.89354324, -3.41767120, -4.93730450]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.22662783, -5.64782429, -2.60211611, -3.16177034, -3.14393115,
          -3.25724936, -3.03231645, -2.89354324, -3.41767168, -4.93730497],
         [-4.22662783, -5.64782429, -2.60211611, -3.16177034, -3.14393115,
          -3.25724936, -3.03231645, -2.89354324, -3.41767168, -4.93730497]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.81555557, -0.25590134, -0.27374053, -0.16042233, -0.38535523,
          -0.52412844]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0916 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 55, vnnlib ID: 55 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.00991821, -13.35237980,  -9.67140388, -10.73055935,  -9.20372391,
         -10.78434086,  -8.77386570, -10.62020874, -14.29128361, -13.35895061]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [545]; unstable size 545; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 545] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 545] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 545] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 249] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.56180000, 3.63847423, 0.57008624, 1.61158311, 0.13146019, 1.65996587,
         1.35068643, 4.52710819, 3.71646404]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0771 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 56, vnnlib ID: 56 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.58841896, -12.71182537, -12.23468971, -14.64789867, -12.31371975,
         -14.90933514, -14.82857895, -13.46736908,  -7.97204685, -11.84747696]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [520]; unstable size 520; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 520] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 520] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 520] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 171] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.49318433,  3.10641050,  5.37454414,  3.09507990,  5.62251949,
          5.56271124,  4.11786795, -0.92750764,  2.68375826]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.58841896, -12.71182537, -12.23468971, -14.64789867, -12.31371975,
         -14.90933514, -14.82857895, -13.46736908,  -7.97204685, -11.84747696]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.58841896, -12.71182537, -12.23468971, -14.64789867, -12.31371975,
          -14.90933514, -14.82857895, -13.46736908,  -7.97204685, -11.84747696]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.61637211]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.24920666e+00,  1.67777801e+00,  1.32857168e+00,  ...,
             2.80952454e-01,  1.06349289e-01, -5.23808524e-02],
           [ 9.79365110e-01,  1.39206374e+00,  1.24920666e+00,  ...,
            -1.95237994e-01, -1.79364979e-01, -1.31745934e-01],
           [ 1.28095269e+00,  1.39206374e+00,  9.15873051e-01,  ...,
            -2.06348225e-02,  1.11112073e-02,  2.17460394e-01],
           ...,
           [-4.96825397e-01, -4.80952382e-01, -4.33333218e-01,  ...,
            -4.80952382e-01, -4.96825397e-01, -4.96825397e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.80952382e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.96825397e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01]],

          [[ 1.91626441e+00,  2.06119204e+00,  1.70692456e+00,  ...,
             1.27214205e+00,  1.15942061e+00,  1.06280196e+00],
           [ 1.72302771e+00,  1.88405824e+00,  1.83574903e+00,  ...,
             1.07890511e+00,  1.06280196e+00,  1.04669893e+00],
           [ 1.94847047e+00,  1.91626441e+00,  1.69082153e+00,  ...,
             1.19162667e+00,  1.20772982e+00,  1.30434811e+00],
           ...,
           [-3.22059989e-02, -4.83090580e-02, -3.22059989e-02,  ...,
            -6.44121096e-02, -8.05151686e-02, -8.05151686e-02],
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -3.22059989e-02],
           [-6.44121096e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -1.61029361e-02]],

          [[ 2.10045004e+00,  2.08545780e+00,  1.81559265e+00,  ...,
             1.84557760e+00,  1.80060017e+00,  1.74063015e+00],
           [ 1.96551764e+00,  1.92054021e+00,  1.96551764e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.81559265e+00],
           [ 2.08545780e+00,  1.96551764e+00,  1.96551764e+00,  ...,
             1.95052516e+00,  1.95052516e+00,  1.96551764e+00],
           ...,
           [ 2.11394474e-01,  1.21439442e-01,  1.81409463e-01,  ...,
             2.11394474e-01,  2.11394474e-01,  2.11394474e-01],
           [ 2.26386964e-01,  1.51424453e-01,  1.81409463e-01,  ...,
             2.26386964e-01,  2.26386964e-01,  2.41379470e-01],
           [ 1.81409463e-01,  1.66416958e-01,  1.96401969e-01,  ...,
             1.96401969e-01,  2.11394474e-01,  2.26386964e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0707 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 57, vnnlib ID: 57 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.31217670, -8.42142200, -4.16140318, -3.79582143, -4.46238518,
         -3.77659655, -4.79564857, -4.59870291, -8.33152199, -7.22583532]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [542]; unstable size 542; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 202, 1, 542] with unstable size 201 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 542] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 542] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [201]; unstable size 201; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 201] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 201] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.90671444e+00,  3.71085143e+00,  5.54727316e-02, -9.76629555e-04,
          3.31381559e-01,  5.89845061e-01,  4.14883196e-01,  3.71298957e+00,
          2.61608958e+00]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.31217670, -8.42142200, -4.16140318, -3.79582143, -4.46238518,
         -3.77659655, -4.79564857, -4.59870291, -8.33152199, -7.22583532]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.63it/s]100%|██████████| 1/1 [00:00<00:00,  7.62it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.24166107, -8.22013760, -4.23363972, -3.89632154, -4.55042458,
          -3.89160490, -4.79965591, -4.76971054, -8.16572952, -7.05139542]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00471663]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1343 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.498355865478516
alpha/beta optimization time: 1.2602953910827637
initial alpha-crown bounds: tensor([[ 2.93031120e+00,  3.74855733e+00,  6.38687611e-02, -3.64601612e-04,
          3.41102242e-01,  5.96957803e-01,  4.24151361e-01,  3.74316096e+00,
          2.65061092e+00]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.00036460161209106445
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.53438663482666
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5343451499939
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.53431916236877
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.53429889678955
Verifying property 3 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.00036460]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.31217670, -8.42142200, -4.16140318, -3.79582143, -4.46238518,
        -3.77659655, -4.79564857, -4.59870291, -8.33152199, -7.22583532],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.00036460]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 542
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 197
Node /15 input 0: size torch.Size([100]) unstable 6
-----------------
# of unstable neurons: 745
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010824203491210938
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0003645867109298706
10 lb beta sum: 0.0, worst -0.0003647357225418091
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    func 0.0530    
Accumulated time: func 0.0530    prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 47] 
split level 1: [/input-12, 10] 
split level 2: [/input-12, 62] 
split level 3: [/input-8, 1192] 
split level 4: [/input-12, 33] 
split level 5: [/input-8, 174] 
split level 6: [/input-8, 1184] 
split level 7: [/input-8, 1300] 
split level 8: [/input-8, 2018] 
split level 9: [/input, 1683] 
split level 10: [/input-8, 2042] 
split level 11: [/input, 405] 
split level 12: [/input-8, 2047] 
split level 13: [/input-8, 1882] 
split level 14: [/input, 2742] 
split level 15: [/input-8, 1075] 
split level 16: [/input-8, 1592] 
split level 17: [/input-8, 2043] 
split level 18: [/input-8, 25] 
split level 19: [/input-8, 1567] 
split level 20: [/input-8, 814] 
split level 21: [/input-8, 1596] 
split level 22: [/input-8, 1884] 
split level 23: [/input-8, 2044] 
split level 24: [/input, 2858] 
split level 25: [/input-8, 1538] 
split level 26: [/input, 2873] 
split level 27: [/input, 3324] 
split level 28: [/input, 3171] 
split level 29: [/input-8, 806] 
split level 30: [/input, 2881] 
split level 31: [/input, 3088] 
split level 32: [/input, 3104] 
split level 33: [/input, 2872] 
split level 34: [/input, 2844] 
split level 35: [/input, 2848] 
split level 36: [/input-12, 61] 
split level 37: [/input-8, 1433] 
split level 38: [/input-8, 1438] 
split level 39: [/input-8, 1339] 
split level 40: [/input-8, 1427] 
split level 41: [/input-8, 1330] 
split level 42: [/input-8, 296] 
split level 43: [/input-8, 1329] 
split level 44: [/input-8, 1060] 
split level 45: [/input-8, 169] 
split level 46: [/input-8, 1324] 
split level 47: [/input-8, 140] 
split level 48: [/input-8, 177] 
split level 49: [/input-8, 892] 
split level 50: [/input-8, 1146] 
split level 51: [/input-8, 1603] 
split level 52: [/input-8, 1323] 
split level 53: [/input-8, 1428] 
split level 54: [/input-8, 1313] 
split level 55: [/input-8, 162] 
split level 56: [/input-8, 2012] 
split level 57: [/input, 1586] 
split level 58: [/input-8, 1824] 
split level 59: [/input, 1741] 
split level 60: [/input-8, 1331] 
split level 61: [/input-8, 1613] 
split level 62: [/input-8, 1917] 
split level 63: [/input-8, 882] 
split level 64: [/input-8, 1425] 
split level 65: [/input-8, 1851] 
split level 66: [/input-8, 1857] 
split level 67: [/input, 1664] 
split level 68: [/input-8, 1895] 
split level 69: [/input-8, 1302] 
split level 70: [/input-8, 1138] 
split level 71: [/input-8, 1801] 
split level 72: [/input, 2987] 
split level 73: [/input, 1258] 
split level 74: [/input-8, 298] 
split level 75: [/input-8, 1623] 
split level 76: [/input-8, 1145] 
split level 77: [/input, 2646] 
split level 78: [/input-8, 1846] 
split level 79: [/input-8, 1442] 
split level 80: [/input-8, 1420] 
split level 81: [/input-8, 117] 
split level 82: [/input-8, 1332] 
split level 83: [/input-8, 12] 
split level 84: [/input-8, 19] 
split level 85: [/input-8, 21] 
split level 86: [/input, 19] 
split level 87: [/input-8, 32] 
split level 88: [/input-8, 73] 
split level 89: [/input-12, 4] 
split level 90: [/input-8, 77] 
split level 91: [/input-8, 147] 
split level 92: [/input-8, 171] 
split level 93: [/input-8, 262] 
split level 94: [/input, 92] 
split level 95: [/input-8, 320] 
split level 96: [/input-8, 327] 
split level 97: [/input, 98] 
split level 98: [/input, 99] 
split level 99: [/input-8, 328] 
split level 100: [/input, 134] 
split level 101: [/input, 141] 
split level 102: [/input, 157] 
split level 103: [/input-8, 332] 
split level 104: [/input, 185] 
split level 105: [/input, 275] 
split level 106: [/input, 283] 
split level 107: [/input, 289] 
split level 108: [/input-8, 334] 
split level 109: [/input, 290] 
split level 110: [/input-8, 353] 
split level 111: [/input, 297] 
split level 112: [/input-8, 354] 
split level 113: [/input-8, 357] 
split level 114: [/input, 305] 
split level 115: [/input, 320] 
split level 116: [/input-8, 363] 
split level 117: [/input-8, 365] 
split level 118: [/input, 321] 
split level 119: [/input-8, 366] 
split level 120: [/input-8, 372] 
split level 121: [/input, 323] 
split level 122: [/input-8, 373] 
split level 123: [/input, 346] 
split level 124: [/input, 355] 
split level 125: [/input, 356] 
split level 126: [/input-8, 374] 
split level 127: [/input, 366] 
split level 128: [/input, 378] 
split level 129: [/input-8, 380] 
split level 130: [/input, 385] 
split level 131: [/input-8, 525] 
split level 132: [/input-8, 530] 
split level 133: [/input-8, 533] 
split level 134: [/input-8, 538] 
split level 135: [/input-8, 539] 
split level 136: [/input, 402] 
split level 137: [/input-8, 543] 
split level 138: [/input-8, 563] 
split level 139: [/input-8, 709] 
split level 140: [/input-8, 713] 
split level 141: [/input, 410] 
split level 142: [/input, 420] 
split level 143: [/input-8, 715] 
split level 144: [/input-8, 719] 
split level 145: [/input, 427] 
split level 146: [/input-8, 725] 
split level 147: [/input, 432] 
split level 148: [/input-8, 734] 
split level 149: [/input, 433] 
split level 150: [/input-8, 735] 
split level 151: [/input, 452] 
split level 152: [/input, 460] 
split level 153: [/input, 461] 
split level 154: [/input, 463] 
split level 155: [/input-8, 737] 
split level 156: [/input, 475] 
split level 157: [/input, 478] 
split level 158: [/input, 482] 
split level 159: [/input-8, 744] 
split level 160: [/input-8, 747] 
split level 161: [/input, 492] 
split level 162: [/input-8, 789] 
split level 163: [/input-8, 790] 
split level 164: [/input-8, 834] 
split level 165: [/input-8, 847] 
split level 166: [/input-8, 875] 
split level 167: [/input, 494] 
split level 168: [/input-8, 904] 
split level 169: [/input, 522] 
split level 170: [/input-8, 905] 
split level 171: [/input-8, 908] 
split level 172: [/input-8, 937] 
split level 173: [/input-8, 938] 
split level 174: [/input-8, 939] 
split level 175: [/input-8, 941] 
split level 176: [/input, 542] 
split level 177: [/input-8, 945] 
split level 178: [/input, 549] 
split level 179: [/input, 568] 
split level 180: [/input-8, 950] 
split level 181: [/input, 577] 
split level 182: [/input-8, 953] 
split level 183: [/input, 622] 
split level 184: [/input-8, 972] 
split level 185: [/input, 625] 
split level 186: [/input, 660] 
split level 187: [/input-8, 985] 
split level 188: [/input, 663] 
split level 189: [/input, 670] 
split level 190: [/input, 688] 
split level 191: [/input-8, 1005] 
split level 192: [/input-8, 1112] 
split level 193: [/input, 700] 
split level 194: [/input, 705] 
split level 195: [/input, 707] 
split level 196: [/input, 711] 
split level 197: [/input-8, 1128] 
split level 198: [/input, 719] 
split level 199: [/input-8, 1137] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.004057608544826508
10 lb beta sum: 0.0, worst -0.010726451873779297
Time: prepare 0.0113    bound 0.0947    transfer 0.0015    finalize 0.0027    func 0.1129    
Accumulated time: func 0.1659    prepare 0.0213    bound 0.1472    transfer 0.0016    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.00609696) min lb tensor(-0.00036459)
Number of Verified Splits: 41 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.012029886245727539 
BICCOS Cumulative time: 0.012029886245727539
Preprocessing time: 0.0099029541015625 Inference time: 0.0015339851379394531 Add cuts time: 0.0004322528839111328 Cut analysis time: 0.00016069412231445312
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5111    set_bounds 0.0087    solve 0.1130    add 0.0102    
Accumulated time: pickout 0.0003    decision 0.5111    set_bounds 0.0087    solve 0.1130    add 0.0102    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([47]), tensor([-1.]), tensor([0]), tensor([1.69484435e-13]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([47]), tensor([1.]), tensor([0]), tensor([1.69484435e-13]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.0008698776364326477

all verified at 0th iter
Time: prepare 0.0003    bound 0.0039    transfer 0.0001    finalize 0.0001    func 0.0044    
Accumulated time: func 0.1704    prepare 0.0215    bound 0.1511    transfer 0.0017    finalize 0.0030    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 197.5628092288971
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.5627522468567
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.562730550766
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.5627110004425
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.56269192695618
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4374 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 58, vnnlib ID: 58 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.68161011, -4.31493664, -3.29749870, -3.86696267, -4.55905437,
         -4.00861025, -3.69984698, -5.91490364, -4.24547005, -4.16366720]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 183, 1, 403] with unstable size 182 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 403] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 182] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.68392742, -0.33067036, -0.84067464,  0.38051927,  0.12290449,
         -0.46707952,  1.54917383, -0.29823160, -0.40686035]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.68161011, -4.31493664, -3.29749870, -3.86696267, -4.55905437,
         -4.00861025, -3.69984698, -5.91490364, -4.24547005, -4.16366720]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.68161011, -4.31493664, -3.29749966, -3.86696267, -4.55905437,
          -4.00861073, -3.69984746, -5.91490364, -4.24547005, -4.16366720],
         [-3.68161011, -4.31493664, -3.29749966, -3.86696267, -4.55905437,
          -4.00861073, -3.69984746, -5.91490364, -4.24547005, -4.16366720]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.18535256,  0.44797397, -0.56946301, -0.16711521,  0.37850738,
           0.29670453]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0824 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 59, vnnlib ID: 59 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.26414204, -10.67618656,  -7.14083195,  -7.60558414,  -6.94402504,
          -7.67818594,  -6.53135300,  -8.68149567,  -9.88610840, -10.70594692]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [538]; unstable size 538; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 196, 1, 538] with unstable size 195 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 538] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 538] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [195]; unstable size 195; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 195] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 195] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.35335875, 3.54954529, 0.39658910, 0.85085702, 0.24288142, 0.91747469,
         1.88348365, 2.84460521, 3.62032795]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0635 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 60, vnnlib ID: 60 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.17061424, -20.50812531, -23.04294586, -24.22522926, -25.19203758,
         -24.61592484, -24.87892914, -26.22239113, -21.59410477, -22.00157738]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [511]; unstable size 511; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 89, 1, 511] with unstable size 88 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 511] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 511] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [88]; unstable size 88; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 88] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 88] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.22561836, 1.90276670, 3.01938915, 3.98550987, 3.39302874, 3.71364880,
         4.93401432, 0.62228298, 1.22355103]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0657 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 61, vnnlib ID: 61 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.76015854, -4.19035864, -4.85114622, -5.85322762, -4.73305225,
         -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916135]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [653]; unstable size 653; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 223, 1, 653] with unstable size 222 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 653] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 653] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [222]; unstable size 222; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 222] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 222] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.30759096,  0.50324702,  1.35600102,  0.23959804,  1.49378967,
          0.62164283,  0.94105083, -0.94007611, -0.65508509]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.76015854, -4.19035864, -4.85114622, -5.85322762, -4.73305225,
         -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916135]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.76015854, -4.19035912, -4.85114622, -5.85322952, -4.73305321,
          -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916230],
         [-3.76015854, -4.19035912, -4.85114622, -5.85322952, -4.73305321,
          -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916230]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.43020058, -0.47531414,  0.12900376]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0786 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 62, vnnlib ID: 62 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.28970528, -10.67957401, -10.33640766, -13.22579098, -10.36513615,
         -13.49066448, -14.18056297, -12.48040295,  -5.26089621, -10.53180790]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [564]; unstable size 564; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 123, 1, 564] with unstable size 122 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 564] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 564] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [122]; unstable size 122; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 122] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 122] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.76197678, 4.99777508, 4.48139000, 7.34546137, 4.49978971, 7.59466982,
         8.32230759, 6.48773861, 4.83865213]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0834 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 63, vnnlib ID: 63 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.66796303, -10.52346611,  -3.42282248,  -5.06743813,  -4.46258068,
          -5.11582899,  -5.54765797,  -6.57940102,  -9.65262794, -10.61189556]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 133, 1, 403] with unstable size 132 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 403] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [132]; unstable size 132; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 132] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 132] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.52602530,  4.36306620, -2.47155905, -0.77068257, -1.39496124,
         -0.72536504,  0.64461362,  3.49572921,  4.39420080]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.66796303, -10.52346611,  -3.42282248,  -5.06743813,  -4.46258068,
          -5.11582899,  -5.54765797,  -6.57940102,  -9.65262794, -10.61189556]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.66796207, -10.52346516,  -3.42282248,  -5.06743717,  -4.46258068,
           -5.11582804,  -5.54765701,  -6.57940102,  -9.65262604, -10.61189556],
         [ -7.66796207, -10.52346516,  -3.42282248,  -5.06743717,  -4.46258068,
           -5.11582804,  -5.54765701,  -6.57940102,  -9.65262604, -10.61189556]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-2.12483454, -0.48021984, -1.08507633, -0.43182898]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0802 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 64, vnnlib ID: 64 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.00622368, -8.74640179, -1.57641745, -3.12036347, -1.72908556,
         -3.21535397, -2.39184046, -4.51465273, -6.92866707, -8.24733448]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [728]; unstable size 728; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 728] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 728] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 728] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 186] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.92469168,  6.41981840,  1.23279619, -0.06353920,  1.31932342,
          0.44406334,  2.49051285,  4.72230148,  5.96450901]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.00622368, -8.74640179, -1.57641745, -3.12036347, -1.72908556,
         -3.21535397, -2.39184046, -4.51465273, -6.92866707, -8.24733448]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.17it/s]100%|██████████| 1/1 [00:00<00:00,  9.17it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.11066437, -8.78367043, -1.73745489, -3.23712897, -1.76644242,
          -3.33225727, -2.47211003, -4.53414059, -7.01842499, -8.31025410]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02898753]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1116 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 25.59933853149414
alpha/beta optimization time: 1.1800971031188965
initial alpha-crown bounds: tensor([[ 2.93429804,  6.45055294,  1.23611999, -0.05334797,  1.32260978,
          0.45382103,  2.50835967,  4.75239944,  5.99452400]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.05334796756505966
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.63678359985352
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.63674473762512
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6367220878601
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.63670206069946
Verifying property 3 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.05334797]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.00622368, -8.74640179, -1.57641745, -3.12036347, -1.72908556,
        -3.21535397, -2.39184046, -4.51465273, -6.92866707, -8.24733448],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.05334797]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 728
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 184
Node /15 input 0: size torch.Size([100]) unstable 4
-----------------
# of unstable neurons: 916
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010347366333007812
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.053347110748291016
10 lb beta sum: 0.0, worst -0.053347714245319366
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0520    transfer 0.0001    finalize 0.0001    func 0.0525    
Accumulated time: func 0.0525    prepare 0.0002    bound 0.0520    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 50] 
split level 1: [/input-8, 545] 
split level 2: [/input-8, 541] 
split level 3: [/input-8, 544] 
split level 4: [/input-8, 1452] 
split level 5: [/input-8, 941] 
split level 6: [/input-8, 1465] 
split level 7: [/input, 648] 
split level 8: [/input-8, 1470] 
split level 9: [/input-8, 559] 
split level 10: [/input-8, 530] 
split level 11: [/input-8, 534] 
split level 12: [/input-8, 1258] 
split level 13: [/input, 649] 
split level 14: [/input-8, 152] 
split level 15: [/input-8, 306] 
split level 16: [/input-8, 950] 
split level 17: [/input-8, 1945] 
split level 18: [/input-8, 1217] 
split level 19: [/input-8, 531] 
split level 20: [/input-8, 1266] 
split level 21: [/input-8, 900] 
split level 22: [/input-8, 1261] 
split level 23: [/input-8, 1265] 
split level 24: [/input-8, 310] 
split level 25: [/input-8, 540] 
split level 26: [/input-8, 931] 
split level 27: [/input-8, 924] 
split level 28: [/input-8, 160] 
split level 29: [/input-8, 2044] 
split level 30: [/input-8, 1242] 
split level 31: [/input-8, 1175] 
split level 32: [/input-8, 309] 
split level 33: [/input-8, 1199] 
split level 34: [/input-8, 1250] 
split level 35: [/input-8, 68] 
split level 36: [/input, 1208] 
split level 37: [/input, 2437] 
split level 38: [/input, 1081] 
split level 39: [/input-8, 908] 
split level 40: [/input-8, 1269] 
split level 41: [/input-8, 313] 
split level 42: [/input, 1225] 
split level 43: [/input-8, 1417] 
split level 44: [/input-8, 1227] 
split level 45: [/input, 3667] 
split level 46: [/input-8, 375] 
split level 47: [/input-8, 1952] 
split level 48: [/input, 1127] 
split level 49: [/input, 2406] 
split level 50: [/input-8, 379] 
split level 51: [/input-8, 866] 
split level 52: [/input-8, 1241] 
split level 53: [/input, 2421] 
split level 54: [/input, 1065] 
split level 55: [/input, 3160] 
split level 56: [/input-8, 1953] 
split level 57: [/input-8, 899] 
split level 58: [/input, 1924] 
split level 59: [/input, 1129] 
split level 60: [/input, 1891] 
split level 61: [/input, 906] 
split level 62: [/input, 661] 
split level 63: [/input, 1859] 
split level 64: [/input, 1043] 
split level 65: [/input-8, 69] 
split level 66: [/input, 2456] 
split level 67: [/input, 1874] 
split level 68: [/input, 968] 
split level 69: [/input, 2440] 
split level 70: [/input, 3192] 
split level 71: [/input, 586] 
split level 72: [/input, 570] 
split level 73: [/input, 900] 
split level 74: [/input, 3146] 
split level 75: [/input, 935] 
split level 76: [/input-8, 1622] 
split level 77: [/input-8, 850] 
split level 78: [/input, 1845] 
split level 79: [/input, 788] 
split level 80: [/input-8, 1614] 
split level 81: [/input, 1139] 
split level 82: [/input, 3722] 
split level 83: [/input, 1882] 
split level 84: [/input, 1155] 
split level 85: [/input, 1827] 
split level 86: [/input-8, 915] 
split level 87: [/input, 1923] 
split level 88: [/input, 1063] 
split level 89: [/input, 1875] 
split level 90: [/input-8, 1630] 
split level 91: [/input, 1931] 
split level 92: [/input, 940] 
split level 93: [/input, 1873] 
split level 94: [/input, 873] 
split level 95: [/input-8, 1602] 
split level 96: [/input, 3139] 
split level 97: [/input, 2625] 
split level 98: [/input, 1907] 
split level 99: [/input, 3720] 
split level 100: [/input-8, 749] 
split level 101: [/input, 1858] 
split level 102: [/input-8, 1625] 
split level 103: [/input-8, 1597] 
split level 104: [/input, 3203] 
split level 105: [/input, 1890] 
split level 106: [/input, 1881] 
split level 107: [/input, 1163] 
split level 108: [/input, 889] 
split level 109: [/input, 1897] 
split level 110: [/input, 1123] 
split level 111: [/input, 1058] 
split level 112: [/input, 1854] 
split level 113: [/input, 3201] 
split level 114: [/input, 3651] 
split level 115: [/input, 3996] 
split level 116: [/input, 932] 
split level 117: [/input, 3995] 
split level 118: [/input-8, 1639] 
split level 119: [/input, 1086] 
split level 120: [/input, 1866] 
split level 121: [/input, 3128] 
split level 122: [/input, 1906] 
split level 123: [/input-8, 1513] 
split level 124: [/input, 916] 
split level 125: [/input, 1822] 
split level 126: [/input, 1868] 
split level 127: [/input, 3303] 
split level 128: [/input-8, 1617] 
split level 129: [/input, 1898] 
split level 130: [/input, 1057] 
split level 131: [/input, 1869] 
split level 132: [/input, 1171] 
split level 133: [/input, 552] 
split level 134: [/input, 1844] 
split level 135: [/input, 573] 
split level 136: [/input, 3894] 
split level 137: [/input, 1818] 
split level 138: [/input, 1843] 
split level 139: [/input, 1049] 
split level 140: [/input, 1085] 
split level 141: [/input, 2609] 
split level 142: [/input, 1817] 
split level 143: [/input-8, 1608] 
split level 144: [/input, 1074] 
split level 145: [/input, 610] 
split level 146: [/input, 1825] 
split level 147: [/input, 1883] 
split level 148: [/input, 1853] 
split level 149: [/input, 1870] 
split level 150: [/input, 1842] 
split level 151: [/input, 1266] 
split level 152: [/input, 2611] 
split level 153: [/input, 1131] 
split level 154: [/input, 1899] 
split level 155: [/input, 2593] 
split level 156: [/input, 1885] 
split level 157: [/input, 1851] 
split level 158: [/input, 3300] 
split level 159: [/input, 3895] 
split level 160: [/input, 2342] 
split level 161: [/input, 1889] 
split level 162: [/input, 1837] 
split level 163: [/input, 974] 
split level 164: [/input, 1922] 
split level 165: [/input, 1811] 
split level 166: [/input, 1834] 
split level 167: [/input-8, 951] 
split level 168: [/input-8, 1942] 
split level 169: [/input, 2357] 
split level 170: [/input, 1101] 
split level 171: [/input, 1835] 
split level 172: [/input, 1095] 
split level 173: [/input, 1850] 
split level 174: [/input, 1933] 
split level 175: [/input, 2610] 
split level 176: [/input, 978] 
split level 177: [/input, 1905] 
split level 178: [/input, 1852] 
split level 179: [/input, 1836] 
split level 180: [/input, 1915] 
split level 181: [/input, 1089] 
split level 182: [/input, 1867] 
split level 183: [/input, 300] 
split level 184: [/input, 1857] 
split level 185: [/input, 3979] 
split level 186: [/input, 1955] 
split level 187: [/input, 1070] 
split level 188: [/input, 1820] 
split level 189: [/input, 1819] 
split level 190: [/input, 924] 
split level 191: [/input, 4011] 
split level 192: [/input, 594] 
split level 193: [/input, 3602] 
split level 194: [/input, 289] 
split level 195: [/input, 3988] 
split level 196: [/input, 595] 
split level 197: [/input, 1027] 
split level 198: [/input, 1921] 
split level 199: [/input, 3226] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05331100523471832
10 lb beta sum: 0.0, worst -0.05331152677536011
Time: prepare 0.0113    bound 0.0946    transfer 0.0007    finalize 0.0026    func 0.1119    
Accumulated time: func 0.1644    prepare 0.0211    bound 0.1466    transfer 0.0008    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(-0.03076957) min lb tensor(-0.05331101)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.009870290756225586 
BICCOS Cumulative time: 0.009870290756225586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05206 (1), -0.05199 (1), -0.05199 (1), -0.05198 (1), -0.05192 (1), -0.05191 (1), -0.05188 (1), -0.05188 (1), -0.05188 (1), -0.05179 (1), -0.05177 (1), -0.05168 (1), -0.05160 (1), -0.05153 (1), -0.05140 (1), -0.05132 (1), -0.05124 (1), -0.05123 (1), -0.05115 (1), -0.05114 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5032    set_bounds 0.0083    solve 0.1120    add 0.0872    
Accumulated time: pickout 0.0003    decision 0.5032    set_bounds 0.0083    solve 0.1120    add 0.0872    
Current (lb-rhs): -0.052064694464206696
50 domains visited
Cumulative time: 0.7925419807434082

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 541] [/input-8, 545] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 1: [/input-8, 1258] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 545] [/input-8, 545] [/input-8, 541] [/input-8, 541] [/input-8, 541] 
split level 2: [/input-8, 530] [/input-8, 534] [/input-8, 534] [/input-8, 530] [/input-8, 530] [/input-8, 534] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] 
split level 3: [/input-8, 534] [/input-8, 530] [/input-8, 530] [/input-8, 534] [/input-8, 534] [/input-8, 530] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 534] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05146137624979019
10 lb beta sum: 0.0, worst -0.051536232233047485
Time: prepare 0.0121    bound 0.0949    transfer 0.0007    finalize 0.0023    func 0.1125    
Accumulated time: func 0.2769    prepare 0.0335    bound 0.2415    transfer 0.0015    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01685612) min lb tensor(-0.05144438)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.011308431625366211 
BICCOS Cumulative time: 0.021178722381591797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02844 (2), -0.02837 (2), -0.02835 (2), -0.02834 (2), -0.02828 (2), -0.02824 (2), -0.02812 (2), -0.02802 (2), -0.02802 (2), -0.02791 (2), -0.02791 (2), -0.02790 (2), -0.02787 (2), -0.02787 (2), -0.02786 (2), -0.02774 (2), -0.02774 (2), -0.02747 (2), -0.02738 (2), -0.02719 (2), 
Length of domains: 50
Time: pickout 0.0013    decision 0.0189    set_bounds 0.0134    solve 0.1126    add 0.0769    
Accumulated time: pickout 0.0016    decision 0.5222    set_bounds 0.0216    solve 0.2245    add 0.1642    
Current (lb-rhs): -0.028439074754714966
100 domains visited
Cumulative time: 1.0271284580230713

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 545] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 1470] [/input-8, 1470] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 541] 
split level 1: [/input-8, 541] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1465] [/input-8, 1465] [/input-8, 1258] [/input-8, 1470] [/input-8, 1470] [/input-8, 1258] 
split level 2: [/input-8, 534] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] 
split level 3: [/input-8, 530] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 559] [/input-8, 559] [/input-8, 534] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02773769199848175
10 lb beta sum: 0.0, worst -0.02772374451160431
Time: prepare 0.0133    bound 0.0953    transfer 0.0007    finalize 0.0020    func 0.1139    
Accumulated time: func 0.3907    prepare 0.0470    bound 0.3368    transfer 0.0022    finalize 0.0071    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00471099) min lb tensor(-0.02764036)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.011379241943359375 
BICCOS Cumulative time: 0.03255796432495117
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01670 (3), -0.01669 (3), -0.01669 (3), -0.01668 (3), -0.01660 (3), -0.01657 (3), -0.01655 (3), -0.01650 (3), -0.01632 (3), -0.01625 (3), -0.01614 (3), -0.01611 (3), -0.01610 (3), -0.01576 (3), -0.01570 (3), -0.01568 (3), -0.01565 (3), -0.01562 (3), -0.01557 (3), -0.01557 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0188    set_bounds 0.0148    solve 0.1140    add 0.0786    
Accumulated time: pickout 0.0026    decision 0.5409    set_bounds 0.0364    solve 0.3385    add 0.2428    
Current (lb-rhs): -0.016698509454727173
150 domains visited
Cumulative time: 1.265868902206421

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 541] [/input-8, 1470] [/input-8, 545] [/input-8, 1258] [/input-8, 1470] [/input-8, 1470] [/input-8, 541] [/input-8, 545] [/input-8, 541] [/input-8, 1470] 
split level 1: [/input-8, 1465] [/input-8, 1465] [/input-8, 1465] [/input-8, 559] [/input-8, 1465] [/input-8, 1465] [/input-8, 1470] [/input-8, 541] [/input-8, 1258] [/input-8, 1465] 
split level 2: [/input-8, 559] [/input-8, 530] [/input-8, 530] [/input-8, 534] [/input-8, 530] [/input-8, 530] [/input-8, 534] [/input-8, 534] [/input-8, 559] [/input-8, 530] 
split level 3: [/input-8, 530] [/input-8, 534] [/input-8, 534] [/input-8, 1266] [/input-8, 534] [/input-8, 534] [/input-8, 559] [/input-8, 559] [/input-8, 534] [/input-8, 534] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.016517505049705505
10 lb beta sum: 0.0, worst -0.016611017286777496
Time: prepare 0.0132    bound 0.0955    transfer 0.0007    finalize 0.0020    func 0.1139    
Accumulated time: func 0.5046    prepare 0.0605    bound 0.4323    transfer 0.0029    finalize 0.0090    
all_split False
======================Cut inference begins======================
max lb tensor(0.00220996) min lb tensor(-0.01643932)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.012467145919799805 
BICCOS Cumulative time: 0.04502511024475098
Preprocessing time: 0.011529922485351562 Inference time: 0.00017499923706054688 Add cuts time: 8.749961853027344e-05 Cut analysis time: 0.0006747245788574219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00758 (4), -0.00744 (4), -0.00730 (4), -0.00728 (4), -0.00707 (4), -0.00700 (4), -0.00696 (4), -0.00695 (4), -0.00695 (4), -0.00688 (4), -0.00682 (4), -0.00660 (4), -0.00654 (4), -0.00650 (4), -0.00646 (4), -0.00642 (4), -0.00598 (4), -0.00580 (4), -0.00573 (4), -0.00553 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0185    set_bounds 0.0151    solve 0.1139    add 0.0810    
Accumulated time: pickout 0.0036    decision 0.5594    set_bounds 0.0515    solve 0.4524    add 0.3238    
Current (lb-rhs): -0.007581382989883423
200 domains visited
Cumulative time: 1.5080325603485107

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 541] [/input-8, 541] [/input-8, 1258] [/input-8, 1258] [/input-8, 541] [/input-8, 541] [/input-8, 1465] [/input-8, 1465] [/input-8, 545] [/input-8, 545] 
split level 1: [/input-8, 1465] [/input-8, 1465] [/input-8, 559] [/input-8, 559] [/input-8, 1465] [/input-8, 1465] [/input-8, 1470] [/input-8, 1470] [/input-8, 1258] [/input-8, 1258] 
split level 2: [/input-8, 559] [/input-8, 559] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 534] [/input-8, 1258] [/input-8, 559] [/input-8, 559] 
split level 3: [/input-8, 1258] [/input-8, 1258] [/input-8, 534] [/input-8, 534] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 534] [/input-8, 534] [/input-8, 534] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.00722040981054306
10 lb beta sum: 0.006684417370706797, worst -0.007030025124549866
Time: prepare 0.0078    bound 0.1350    transfer 0.0007    finalize 0.0020    func 0.1488    
Accumulated time: func 0.6534    prepare 0.0685    bound 0.5673    transfer 0.0036    finalize 0.0111    
all_split False
======================Cut inference begins======================
max lb tensor(0.00541648) min lb tensor(-0.00657621)
Number of Verified Splits: 104 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.021652698516845703 
BICCOS Cumulative time: 0.06667780876159668
Preprocessing time: 0.01239776611328125 Inference time: 0.004741668701171875 Add cuts time: 0.003561258316040039 Cut analysis time: 0.0009520053863525391
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00149 (5), -0.00149 (5), -0.00149 (5), -0.00144 (5), -0.00144 (5), -0.00142 (5), -0.00142 (5), -0.00141 (5), -0.00137 (5), -0.00133 (5), -0.00130 (5), -0.00130 (5), -0.00129 (5), -0.00122 (5), -0.00122 (5), -0.00122 (5), -0.00121 (5), -0.00118 (5), -0.00115 (5), -0.00114 (5), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0185    set_bounds 0.1324    solve 0.1489    add 0.1004    
Accumulated time: pickout 0.0046    decision 0.5779    set_bounds 0.1839    solve 0.6013    add 0.4242    
Current (lb-rhs): -0.0014943275600671768
250 domains visited
Cumulative time: 1.9311118125915527

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531]), tensor([-1.]), tensor([0]), tensor([2.24207754e-44]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531, 545, 541]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([0.01446290, 0.00109987, 0.00112686]), tensor([0, 2, 3])), '/input-12': ([50], [-1.0], [0], [1.0417566809195478e-10], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531, 545, 541]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([0.01446290, 0.00109987, 0.00759783]), tensor([0, 2, 3])), '/input-12': ([50], [-1.0], [0], [1.0417566809195478e-10], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531, 545, 559, 541]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([0.01446290, 0.01214613, 0.00269634, 0.00134344]), tensor([0, 2, 3, 4])), '/input-12': ([50], [-1.0], [0], [1.0417566809195478e-10], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531, 545, 559, 541]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([0.01446290, 0.01214613, 0.00269634, 0.00549050]), tensor([0, 2, 3, 4])), '/input-12': ([50], [-1.0], [0], [1.0417566809195478e-10], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531, 545, 559, 541]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([0.01446290, 0.01214613, 0.00112166, 0.00129724]), tensor([0, 2, 3, 4])), '/input-12': ([50], [-1.0], [0], [1.0417566809195478e-10], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531, 545, 559, 541]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([0.01446290, 0.01214613, 0.00112166, 0.00556127]), tensor([0, 2, 3, 4])), '/input-12': ([50], [-1.0], [0], [1.0417566809195478e-10], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 531,  541, 1470]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([0.01446290, 0.00127803, 0.00564622]), tensor([0, 2, 3])), '/input-12': ([50], [1.0], [0], [-1.3660997161337107e+31], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 531,  541, 1470]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([0.01446290, 0.00127803, 0.00053139]), tensor([0, 2, 3])), '/input-12': ([50], [1.0], [0], [-1.3660997161337107e+31], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 531,  541, 1470, 1258]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([0.01446290, 0.00991552, 0.00597210, 0.00182845]), tensor([0, 2, 3, 4])), '/input-12': ([50], [1.0], [0], [-1.3660997161337107e+31], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 531,  541, 1470, 1258]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([0.01446290, 0.00991552, 0.00597210, 0.00284633]), tensor([0, 2, 3, 4])), '/input-12': ([50], [1.0], [0], [-1.3660997161337107e+31], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 531,  541, 1470, 1258]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([0.01446290, 0.00991552, 0.00087603, 0.00200159]), tensor([0, 2, 3, 4])), '/input-12': ([50], [1.0], [0], [-1.3660997161337107e+31], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 531,  541, 1470, 1258]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([0.01446290, 0.00991552, 0.00087603, 0.00363735]), tensor([0, 2, 3, 4])), '/input-12': ([50], [1.0], [0], [-1.3660997161337107e+31], [1])}
Shallow branching resets to n domains:  13
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.053198494017124176
10 lb beta sum: 0.2694714069366455, worst -0.10089951753616333
Time: prepare 0.0006    bound 0.1322    transfer 0.0002    finalize 0.0002    func 0.1333    
Accumulated time: func 0.7866    prepare 0.0691    bound 0.6994    transfer 0.0037    finalize 0.0113    
After pruning, left:  9

Back to Regular BaB

BaB round 1
batch: 9
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 50] [/input-8, 1465] [/input-8, 1465] [/input-8, 1465] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] 
split level 1: [/input-8, 545] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 1258] [/input-8, 1258] [/input-8, 1465] [/input-8, 1465] [/input-8, 1465] 
split level 2: [/input-8, 541] [/input-8, 559] [/input-8, 530] [/input-8, 530] [/input-8, 559] [/input-8, 559] [/input-8, 530] [/input-8, 530] [/input-8, 530] 
split level 3: [/input-8, 530] [/input-8, 530] [/input-8, 1258] [/input-8, 1258] [/input-8, 530] [/input-8, 530] [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] 
split level 4: [/input-8, 534] [/input-8, 1258] [/input-8, 534] [/input-8, 306] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 534] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23916853964328766, worst -0.028310537338256836
10 lb beta sum: 0.24259403347969055, worst -0.028202205896377563
Time: prepare 0.0112    bound 0.1340    transfer 0.0007    finalize 0.0016    func 0.1493    
Accumulated time: func 0.9359    prepare 0.0805    bound 0.8335    transfer 0.0044    finalize 0.0128    
all_split False
======================Cut inference begins======================
max lb tensor(0.25136781) min lb tensor(-0.02816866)
Number of Verified Splits: 181 of 288
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.3700658977031708, worst -0.7311724424362183
10 lb beta sum: 0.38773149251937866, worst -0.03032684326171875
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 4-6: 25
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.24598145484924316 
BICCOS Cumulative time: 0.31265926361083984
Preprocessing time: 0.007400035858154297 Inference time: 0.2322983741760254 Add cuts time: 0.004946708679199219 Cut analysis time: 0.0013363361358642578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02817 (5), -0.02751 (5), -0.02731 (5), -0.02665 (5), -0.02567 (5), -0.02535 (5), -0.02500 (5), -0.02468 (5), -0.02105 (5), -0.02080 (5), -0.02040 (5), -0.02016 (5), -0.01775 (5), -0.01725 (5), -0.01690 (5), -0.01659 (5), -0.01658 (5), -0.01636 (5), -0.01594 (5), -0.01589 (5), 
Length of domains: 107
Time: pickout 0.0007    decision 0.0183    set_bounds 0.0201    solve 0.1494    add 0.0013    
Accumulated time: pickout 0.0053    decision 0.5962    set_bounds 0.2040    solve 0.7507    add 0.4254    
Current (lb-rhs): -0.028168663382530212
357 domains visited
Cumulative time: 2.5292792320251465

BaB round 2
batch: 107
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1465] [/input-8, 941] [/input-8, 941] [/input-8, 1470] [/input-8, 941] [/input-8, 1465] [/input-8, 941] [/input-8, 941] [/input-8, 1470] [/input-8, 941] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027994491159915924
10 lb beta sum: 0.007375987712293863, worst -0.027951695024967194
Time: prepare 0.0037    bound 0.1367    transfer 0.0005    finalize 0.0017    func 0.1440    
Accumulated time: func 1.0800    prepare 0.0844    bound 0.9701    transfer 0.0049    finalize 0.0146    
all_split False
======================Cut inference begins======================
max lb tensor(0.00412151) min lb tensor(-0.02794574)
Number of Verified Splits: 67 of 214
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 2
#cuts 4-6: 13
#cuts >= 20: 0
BICCOS time: 0.01590561866760254 
BICCOS Cumulative time: 0.3285648822784424
Preprocessing time: 0.0064661502838134766 Inference time: 0.0064847469329833984 Add cuts time: 0.0022406578063964844 Cut analysis time: 0.0007140636444091797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02795 (6), -0.02729 (6), -0.02709 (6), -0.02643 (6), -0.02551 (6), -0.02519 (6), -0.02482 (6), -0.02451 (6), -0.02372 (6), -0.02308 (6), -0.02287 (6), -0.02222 (6), -0.02041 (6), -0.02035 (6), -0.02023 (6), -0.02002 (6), -0.01974 (6), -0.01965 (6), -0.01956 (6), -0.01934 (6), 
Length of domains: 147
Time: pickout 0.0020    decision 0.0164    set_bounds 0.0097    solve 0.1441    add 0.0014    
Accumulated time: pickout 0.0073    decision 0.6126    set_bounds 0.2137    solve 0.8948    add 0.4268    
Current (lb-rhs): -0.02794574201107025
504 domains visited
Cumulative time: 2.7195701599121094

BaB round 3
batch: 147
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1470] [/input-8, 1452] [/input-8, 1258] [/input-8, 1452] [/input-8, 1470] [/input-8, 534] [/input-8, 1452] [/input-8, 1258] [/input-8, 1452] [/input-8, 1470] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027870073914527893
10 lb beta sum: 0.023348918184638023, worst -0.027862951159477234
Time: prepare 0.0051    bound 0.1355    transfer 0.0010    finalize 0.0017    func 0.1451    
Accumulated time: func 1.2251    prepare 0.0897    bound 1.1056    transfer 0.0059    finalize 0.0163    
all_split False
======================Cut inference begins======================
max lb tensor(0.23657356) min lb tensor(-0.02785766)
Number of Verified Splits: 99 of 294
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 1
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.021026611328125 
BICCOS Cumulative time: 0.3495914936065674
Preprocessing time: 0.008751153945922852 Inference time: 0.009968042373657227 Add cuts time: 0.0018858909606933594 Cut analysis time: 0.0004215240478515625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02786 (7), -0.02720 (7), -0.02701 (7), -0.02634 (7), -0.02407 (7), -0.02374 (7), -0.02352 (7), -0.02347 (7), -0.02338 (7), -0.02304 (7), -0.02285 (7), -0.02279 (7), -0.02267 (7), -0.02261 (7), -0.02255 (7), -0.02223 (7), -0.02199 (7), -0.02193 (7), -0.02188 (7), -0.02157 (7), 
Length of domains: 195
Time: pickout 0.0027    decision 0.0186    set_bounds 0.0129    solve 0.1453    add 0.0019    
Accumulated time: pickout 0.0100    decision 0.6312    set_bounds 0.2267    solve 1.0401    add 0.4287    
Current (lb-rhs): -0.027857661247253418
699 domains visited
Cumulative time: 2.9229257106781006

BaB round 4
batch: 195
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 941] [/input-8, 1465] [/input-8, 941] [/input-8, 534] [/input-8, 941] [/input-8, 1452] [/input-8, 941] [/input-8, 534] [/input-8, 941] [/input-8, 1465] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027307048439979553
10 lb beta sum: 0.0713711753487587, worst -0.027300991117954254
Time: prepare 0.0070    bound 0.1365    transfer 0.0008    finalize 0.0019    func 0.1490    
Accumulated time: func 1.3741    prepare 0.0968    bound 1.2421    transfer 0.0066    finalize 0.0181    
all_split False
======================Cut inference begins======================
max lb tensor(0.23767777) min lb tensor(-0.02729673)
Number of Verified Splits: 172 of 390
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 8
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.03242301940917969 
BICCOS Cumulative time: 0.38201451301574707
Preprocessing time: 0.011310338973999023 Inference time: 0.01857733726501465 Add cuts time: 0.0019063949584960938 Cut analysis time: 0.0006289482116699219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02730 (8), -0.02664 (8), -0.02645 (8), -0.02578 (8), -0.02386 (8), -0.02323 (8), -0.02320 (8), -0.02300 (8), -0.02290 (8), -0.02290 (8), -0.02282 (8), -0.02254 (8), -0.02234 (8), -0.02222 (8), -0.02221 (8), -0.02215 (8), -0.02204 (8), -0.02197 (8), -0.02164 (8), -0.02136 (8), 
Length of domains: 218
Time: pickout 0.0033    decision 0.0214    set_bounds 0.0168    solve 0.1492    add 0.0015    
Accumulated time: pickout 0.0133    decision 0.6527    set_bounds 0.2435    solve 1.1893    add 0.4302    
Current (lb-rhs): -0.027296729385852814
917 domains visited
Cumulative time: 3.1492292881011963

BaB round 5
batch: 218
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 559] [/input-8, 1465] [/input-8, 559] [/input-8, 559] [/input-8, 559] [/input-8, 1465] [/input-8, 559] [/input-8, 1465] [/input-8, 559] [/input-8, 1465] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026660092175006866
10 lb beta sum: 0.048000674694776535, worst -0.0266568660736084
Time: prepare 0.0085    bound 0.1375    transfer 0.0034    finalize 0.0020    func 0.1549    
Accumulated time: func 1.5290    prepare 0.1055    bound 1.3797    transfer 0.0101    finalize 0.0201    
all_split False
======================Cut inference begins======================
max lb tensor(0.45726532) min lb tensor(-0.02665467)
Number of Verified Splits: 60 of 436
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 4
#cuts 4-6: 12
#cuts >= 20: 0
BICCOS time: 0.021968603134155273 
BICCOS Cumulative time: 0.40398311614990234
Preprocessing time: 0.014374494552612305 Inference time: 0.0053560733795166016 Add cuts time: 0.0013742446899414062 Cut analysis time: 0.0008637905120849609
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02665 (9), -0.02598 (9), -0.02581 (9), -0.02512 (9), -0.02501 (9), -0.02436 (9), -0.02419 (9), -0.02352 (9), -0.02314 (9), -0.02305 (9), -0.02271 (9), -0.02248 (9), -0.02236 (9), -0.02227 (9), -0.02222 (9), -0.02212 (9), -0.02202 (9), -0.02162 (9), -0.02154 (9), -0.02152 (9), 
Length of domains: 376
Time: pickout 0.0027    decision 0.0221    set_bounds 0.0188    solve 0.1550    add 0.0025    
Accumulated time: pickout 0.0160    decision 0.6748    set_bounds 0.2623    solve 1.3444    add 0.4328    
Current (lb-rhs): -0.026654668152332306
1293 domains visited
Cumulative time: 3.373814582824707

BaB round 6
batch: 376
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1258] [/input-8, 559] [/input-8, 1258] [/input-8, 1465] [/input-8, 1258] [/input-8, 559] [/input-8, 1258] [/input-8, 1258] [/input-8, 559] [/input-8, 1258] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025610536336898804
10 lb beta sum: 0.11691950261592865, worst -0.025598935782909393
Time: prepare 0.0145    bound 0.1372    transfer 0.0023    finalize 0.0038    func 0.1627    
Accumulated time: func 1.6917    prepare 0.1202    bound 1.5168    transfer 0.0123    finalize 0.0239    
all_split False
======================Cut inference begins======================
max lb tensor(0.65249860) min lb tensor(-0.02559475)
Number of Verified Splits: 327 of 752
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.05688285827636719 
BICCOS Cumulative time: 0.46086597442626953
Preprocessing time: 0.021458864212036133 Inference time: 0.030778884887695312 Add cuts time: 0.004306316375732422 Cut analysis time: 0.0003387928009033203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02559 (10), -0.02492 (10), -0.02475 (10), -0.02458 (10), -0.02406 (10), -0.02394 (10), -0.02373 (10), -0.02327 (10), -0.02310 (10), -0.02291 (10), -0.02243 (10), -0.02237 (10), -0.02227 (10), -0.02208 (10), -0.02203 (10), -0.02167 (10), -0.02141 (10), -0.02138 (10), -0.02133 (10), -0.02120 (10), 
Length of domains: 425
Time: pickout 0.0059    decision 0.0310    set_bounds 0.0318    solve 0.1629    add 0.0460    
Accumulated time: pickout 0.0219    decision 0.7058    set_bounds 0.2941    solve 1.5073    add 0.4787    
Current (lb-rhs): -0.025594748556613922
1718 domains visited
Cumulative time: 3.714224100112915

BaB round 7
batch: 425
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025098830461502075
10 lb beta sum: 0.3360520899295807, worst -0.02509409189224243
Time: prepare 0.0162    bound 0.1368    transfer 0.0013    finalize 0.0035    func 0.1632    
Accumulated time: func 1.8549    prepare 0.1366    bound 1.6536    transfer 0.0136    finalize 0.0275    
all_split False
======================Cut inference begins======================
max lb tensor(0.70449650) min lb tensor(-0.02509160)
Number of Verified Splits: 731 of 850
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 11
#cuts >= 20: 0
BICCOS time: 0.09877347946166992 
BICCOS Cumulative time: 0.5596394538879395
Preprocessing time: 0.02433490753173828 Inference time: 0.06830310821533203 Add cuts time: 0.005743741989135742 Cut analysis time: 0.0003917217254638672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02509 (11), -0.02424 (11), -0.02342 (11), -0.02258 (11), -0.02117 (11), -0.02070 (11), -0.02049 (11), -0.02031 (11), -0.01985 (11), -0.01964 (11), -0.01948 (11), -0.01903 (11), -0.01888 (11), -0.01863 (11), -0.01820 (11), -0.01813 (11), -0.01805 (11), -0.01790 (11), -0.01728 (11), -0.01704 (11), 
Length of domains: 119
Time: pickout 0.0166    decision 0.0337    set_bounds 0.0355    solve 0.1635    add 0.0683    
Accumulated time: pickout 0.0385    decision 0.7395    set_bounds 0.3296    solve 1.6708    add 0.5470    
Current (lb-rhs): -0.02509160339832306
1837 domains visited
Cumulative time: 4.140960216522217

BaB round 8
batch: 119
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 306] [/input-8, 306] [/input-8, 306] [/input-8, 306] [/input-8, 306] [/input-8, 306] [/input-8, 306] [/input-8, 306] [/input-8, 306] [/input-8, 306] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.024592049419879913
10 lb beta sum: 0.5123367309570312, worst -0.024582132697105408
Time: prepare 0.0047    bound 0.1344    transfer 0.0005    finalize 0.0013    func 0.1425    
Accumulated time: func 1.9974    prepare 0.1415    bound 1.7880    transfer 0.0141    finalize 0.0287    
all_split False
======================Cut inference begins======================
max lb tensor(0.22754097) min lb tensor(-0.02458014)
Number of Verified Splits: 110 of 238
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.01952672004699707 
BICCOS Cumulative time: 0.5791661739349365
Preprocessing time: 0.007139444351196289 Inference time: 0.010561227798461914 Add cuts time: 0.0014650821685791016 Cut analysis time: 0.0003609657287597656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02458 (12), -0.02373 (12), -0.02289 (12), -0.02240 (12), -0.02206 (12), -0.02155 (12), -0.02073 (12), -0.02066 (12), -0.02023 (12), -0.01996 (12), -0.01990 (12), -0.01980 (12), -0.01938 (12), -0.01910 (12), -0.01896 (12), -0.01855 (12), -0.01855 (12), -0.01835 (12), -0.01812 (12), -0.01777 (12), 
Length of domains: 128
Time: pickout 0.0135    decision 0.0180    set_bounds 0.0100    solve 0.1425    add 0.0682    
Accumulated time: pickout 0.0519    decision 0.7576    set_bounds 0.3396    solve 1.8133    add 0.6152    
Current (lb-rhs): -0.02458014339208603
1965 domains visited
Cumulative time: 4.42026162147522

BaB round 9
batch: 128
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 544] [/input-8, 544] [/input-8, 544] [/input-8, 544] [/input-8, 544] [/input-8, 544] [/input-8, 544] [/input-8, 544] [/input-8, 544] [/input-8, 544] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.024325639009475708
10 lb beta sum: 0.5834449529647827, worst -0.02432316541671753
Time: prepare 0.0055    bound 0.1367    transfer 0.0005    finalize 0.0012    func 0.1456    
Accumulated time: func 2.1430    prepare 0.1472    bound 1.9247    transfer 0.0146    finalize 0.0300    
all_split False
======================Cut inference begins======================
max lb tensor(0.00360167) min lb tensor(-0.02432154)
Number of Verified Splits: 17 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.010499715805053711 
BICCOS Cumulative time: 0.5896658897399902
Preprocessing time: 0.007749319076538086 Inference time: 0.0019919872283935547 Add cuts time: 0.00041556358337402344 Cut analysis time: 0.0003428459167480469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02432 (13), -0.02347 (13), -0.02263 (13), -0.02209 (13), -0.02179 (13), -0.02124 (13), -0.02042 (13), -0.02039 (13), -0.01997 (13), -0.01968 (13), -0.01961 (13), -0.01953 (13), -0.01912 (13), -0.01883 (13), -0.01868 (13), -0.01830 (13), -0.01817 (13), -0.01806 (13), -0.01784 (13), -0.01746 (13), 
Length of domains: 239
Time: pickout 0.0152    decision 0.0176    set_bounds 0.1734    solve 0.1457    add 0.0902    
Accumulated time: pickout 0.0671    decision 0.7752    set_bounds 0.5130    solve 1.9590    add 0.7054    
Current (lb-rhs): -0.0243215411901474
2204 domains visited
Cumulative time: 4.880229234695435

BaB round 10
batch: 239
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 310] [/input-8, 310] [/input-8, 310] [/input-8, 310] [/input-8, 310] [/input-8, 310] [/input-8, 310] [/input-8, 310] [/input-8, 310] [/input-8, 310] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6515237092971802, worst -0.023688867688179016
10 lb beta sum: 0.6696859002113342, worst -0.02368810772895813
Time: prepare 0.0202    bound 0.1372    transfer 0.0008    finalize 0.0021    func 0.1633    
Accumulated time: func 2.3063    prepare 0.1676    bound 2.0618    transfer 0.0154    finalize 0.0320    
all_split False
======================Cut inference begins======================
max lb tensor(0.00129396) min lb tensor(-0.02368592)
Number of Verified Splits: 32 of 478
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.018876075744628906 
BICCOS Cumulative time: 0.6085419654846191
Preprocessing time: 0.013596534729003906 Inference time: 0.003774881362915039 Add cuts time: 0.0005168914794921875 Cut analysis time: 0.0009877681732177734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02369 (14), -0.02284 (14), -0.02284 (14), -0.02200 (14), -0.02199 (14), -0.02144 (14), -0.02118 (14), -0.02116 (14), -0.02059 (14), -0.02059 (14), -0.02033 (14), -0.01976 (14), -0.01976 (14), -0.01975 (14), -0.01934 (14), -0.01907 (14), -0.01905 (14), -0.01894 (14), -0.01892 (14), -0.01889 (14), 
Length of domains: 446
Time: pickout 0.0524    decision 0.0234    set_bounds 0.0205    solve 0.1634    add 0.0837    
Accumulated time: pickout 0.1195    decision 0.7985    set_bounds 0.5335    solve 2.1224    add 0.7892    
Current (lb-rhs): -0.023685917258262634
2650 domains visited
Cumulative time: 5.251080751419067

BaB round 11
batch: 446
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6445906758308411, worst -0.022707894444465637
10 lb beta sum: 0.6507842540740967, worst -0.022694945335388184
Time: prepare 0.0374    bound 0.1384    transfer 0.0028    finalize 0.0046    func 0.1889    
Accumulated time: func 2.4952    prepare 0.2052    bound 2.2002    transfer 0.0182    finalize 0.0366    
all_split False
======================Cut inference begins======================
max lb tensor(0.00127131) min lb tensor(-0.02268885)
Number of Verified Splits: 41 of 892
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.032497406005859375 
BICCOS Cumulative time: 0.6410393714904785
Preprocessing time: 0.026500463485717773 Inference time: 0.00500798225402832 Add cuts time: 0.000640869140625 Cut analysis time: 0.00034809112548828125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02269 (15), -0.02266 (15), -0.02184 (15), -0.02184 (15), -0.02181 (15), -0.02181 (15), -0.02100 (15), -0.02098 (15), -0.02098 (15), -0.02095 (15), -0.02061 (15), -0.02017 (15), -0.02016 (15), -0.02016 (15), -0.02014 (15), -0.02014 (15), -0.01976 (15), -0.01975 (15), -0.01934 (15), -0.01932 (15), 
Length of domains: 851
Time: pickout 0.0175    decision 0.0360    set_bounds 0.0374    solve 0.1891    add 0.0743    
Accumulated time: pickout 0.1370    decision 0.8346    set_bounds 0.5709    solve 2.3116    add 0.8634    
Current (lb-rhs): -0.0226888507604599
3501 domains visited
Cumulative time: 5.639276504516602

BaB round 12
batch: 851
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 648] [/input, 648] [/input, 648] [/input, 648] [/input, 648] [/input, 648] [/input, 648] [/input, 648] [/input, 648] [/input, 648] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6380478739738464, worst -0.022448405623435974
10 lb beta sum: 0.6401345729827881, worst -0.0224464014172554
Time: prepare 0.0799    bound 0.1589    transfer 0.0035    finalize 0.0081    func 0.2620    
Accumulated time: func 2.7571    prepare 0.2854    bound 2.3591    transfer 0.0217    finalize 0.0447    
all_split False
======================Cut inference begins======================
max lb tensor(0.00238067) min lb tensor(-0.02244489)
Number of Verified Splits: 141 of 1702
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.0759122371673584 
BICCOS Cumulative time: 0.7169516086578369
Preprocessing time: 0.05602574348449707 Inference time: 0.017498016357421875 Add cuts time: 0.0019998550415039062 Cut analysis time: 0.0003886222839355469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02244 (16), -0.02242 (16), -0.02160 (16), -0.02158 (16), -0.02157 (16), -0.02156 (16), -0.02076 (16), -0.02074 (16), -0.02073 (16), -0.02070 (16), -0.02037 (16), -0.01992 (16), -0.01991 (16), -0.01990 (16), -0.01990 (16), -0.01989 (16), -0.01951 (16), -0.01950 (16), -0.01906 (16), -0.01906 (16), 
Length of domains: 1561
Time: pickout 0.0136    decision 0.0575    set_bounds 0.0461    solve 0.2623    add 0.0058    
Accumulated time: pickout 0.1506    decision 0.8920    set_bounds 0.6170    solve 2.5739    add 0.8692    
Current (lb-rhs): -0.022444888949394226
5062 domains visited
Cumulative time: 6.102702379226685

BaB round 13
batch: 1561
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6237539052963257, worst -0.02198055386543274
10 lb beta sum: 0.6243858933448792, worst -0.02196793258190155
Time: prepare 0.1468    bound 0.2320    transfer 0.0121    finalize 0.1737    func 0.5851    
Accumulated time: func 3.3422    prepare 0.4324    bound 2.5910    transfer 0.0338    finalize 0.2184    
all_split False
======================Cut inference begins======================
max lb tensor(0.00202298) min lb tensor(-0.02196357)
Number of Verified Splits: 237 of 3122
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.13018226623535156 
BICCOS Cumulative time: 0.8471338748931885
Preprocessing time: 0.09476637840270996 Inference time: 0.031236886978149414 Add cuts time: 0.0036547183990478516 Cut analysis time: 0.0005242824554443359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02196 (17), -0.02192 (17), -0.02123 (17), -0.02119 (17), -0.02111 (17), -0.02108 (17), -0.02107 (17), -0.02107 (17), -0.02038 (17), -0.02033 (17), -0.02028 (17), -0.02025 (17), -0.02023 (17), -0.02022 (17), -0.01987 (17), -0.01964 (17), -0.01952 (17), -0.01945 (17), -0.01941 (17), -0.01940 (17), 
Length of domains: 2885
Time: pickout 0.0218    decision 0.0936    set_bounds 0.1292    solve 0.5856    add 0.0980    
Accumulated time: pickout 0.1724    decision 0.9856    set_bounds 0.7462    solve 3.1595    add 0.9672    
Current (lb-rhs): -0.021963566541671753
7947 domains visited
Cumulative time: 7.171611309051514

BaB round 14
batch: 2885
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 540] [/input-8, 1175] [/input-8, 540] [/input-8, 1175] [/input-8, 540] [/input-8, 1175] [/input-8, 1175] [/input-8, 540] [/input-8, 1175] [/input-8, 309] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6113829016685486, worst -0.021703489124774933
10 lb beta sum: 0.6115196943283081, worst -0.02169772982597351
Time: prepare 0.2770    bound 0.3707    transfer 0.0285    finalize 0.0247    func 0.7386    
Accumulated time: func 4.0808    prepare 0.7097    bound 2.9617    transfer 0.0623    finalize 0.2431    
all_split False
======================Cut inference begins======================
max lb tensor(0.00264502) min lb tensor(-0.02169456)
Number of Verified Splits: 508 of 5770
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.4081442356109619 
BICCOS Cumulative time: 1.2552781105041504
Preprocessing time: 0.3269827365875244 Inference time: 0.0721597671508789 Add cuts time: 0.008491039276123047 Cut analysis time: 0.0005106925964355469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02169 (18), -0.02166 (18), -0.02096 (18), -0.02092 (18), -0.02082 (18), -0.02078 (18), -0.02039 (18), -0.02036 (18), -0.02019 (18), -0.02015 (18), -0.02013 (18), -0.02010 (18), -0.02001 (18), -0.01998 (18), -0.01966 (18), -0.01962 (18), -0.01960 (18), -0.01953 (18), -0.01951 (18), -0.01945 (18), 
Length of domains: 5262
Time: pickout 0.0523    decision 0.1633    set_bounds 0.2403    solve 0.7395    add 0.1537    
Accumulated time: pickout 0.2247    decision 1.1490    set_bounds 0.9865    solve 3.8990    add 1.1209    
Current (lb-rhs): -0.02169455587863922
13209 domains visited
Cumulative time: 8.94275951385498

BaB round 15
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1217] [/input-8, 1217] [/input-8, 1217] [/input-8, 1217] [/input-8, 1217] [/input-8, 1217] [/input-8, 1217] [/input-8, 1261] [/input-8, 1217] [/input-8, 1217] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5899582505226135, worst -0.021463245153427124
10 lb beta sum: 0.5900545716285706, worst -0.021461814641952515
Time: prepare 0.4089    bound 0.4947    transfer 0.0405    finalize 0.2176    func 1.2148    
Accumulated time: func 5.2956    prepare 1.1189    bound 3.4564    transfer 0.1028    finalize 0.4606    
all_split False
======================Cut inference begins======================
max lb tensor(0.00258851) min lb tensor(-0.02145943)
Number of Verified Splits: 811 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.40381622314453125 
BICCOS Cumulative time: 1.6590943336486816
Preprocessing time: 0.25792813301086426 Inference time: 0.1302347183227539 Add cuts time: 0.015093564987182617 Cut analysis time: 0.0005598068237304688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02146 (19), -0.02142 (19), -0.02068 (19), -0.02057 (19), -0.02052 (19), -0.02045 (19), -0.02039 (18), -0.02036 (18), -0.02013 (18), -0.02010 (18), -0.01996 (19), -0.01992 (19), -0.01985 (19), -0.01974 (19), -0.01966 (18), -0.01962 (18), -0.01951 (19), -0.01940 (18), -0.01936 (19), -0.01935 (18), 
Length of domains: 8547
Time: pickout 0.0698    decision 0.2303    set_bounds 0.3655    solve 1.2167    add 0.2850    
Accumulated time: pickout 0.2945    decision 1.3793    set_bounds 1.3520    solve 5.1157    add 1.4059    
Current (lb-rhs): -0.0214594304561615
20590 domains visited
current_vram/total_varm: 10.3GB/99.9GB, batch_size increase to 8192
Cumulative time: 11.535351037979126

BaB round 16
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 309] [/input-8, 1217] [/input-8, 1217] [/input-8, 1217] [/input-8, 1217] [/input-8, 309] [/input-8, 1217] [/input-8, 1261] [/input-8, 540] [/input, 974] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5808365345001221, worst -0.020543068647384644
10 lb beta sum: 0.5808847546577454, worst -0.020540088415145874
Time: prepare 0.8082    bound 0.9234    transfer 0.0790    finalize 0.3205    func 2.2381    
Accumulated time: func 7.5337    prepare 1.9275    bound 4.3798    transfer 0.1818    finalize 0.7812    
all_split False
======================Cut inference begins======================
max lb tensor(0.00238007) min lb tensor(-0.02053732)
Number of Verified Splits: 1773 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.851433277130127 
BICCOS Cumulative time: 2.5105276107788086
Preprocessing time: 0.5154390335083008 Inference time: 0.28788018226623535 Add cuts time: 0.04754519462585449 Cut analysis time: 0.0005688667297363281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02054 (20), -0.02050 (20), -0.02050 (20), -0.02047 (20), -0.02020 (20), -0.02016 (20), -0.02015 (19), -0.02012 (19), -0.02005 (20), -0.01998 (20), -0.01989 (19), -0.01986 (19), -0.01959 (20), -0.01946 (20), -0.01942 (20), -0.01939 (19), -0.01927 (20), -0.01925 (20), -0.01924 (20), -0.01916 (20), 
Length of domains: 14966
Time: pickout 0.1321    decision 0.6404    set_bounds 0.7294    solve 2.2408    add 0.0527    
Accumulated time: pickout 0.4266    decision 2.0197    set_bounds 2.0814    solve 7.3565    add 1.4587    
Current (lb-rhs): -0.02053731679916382
35201 domains visited
current_vram/total_varm: 19.2GB/99.9GB, batch_size increase to 16384
Cumulative time: 16.21465253829956

BaB round 17
batch: 14966
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 540] [/input-8, 1261] [/input-8, 540] [/input-8, 1261] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5646461844444275, worst -0.0200386643409729
10 lb beta sum: 0.5646725296974182, worst -0.02003583312034607
Time: prepare 1.4587    bound 1.6245    transfer 0.1530    finalize 0.4434    func 3.8727    
Accumulated time: func 11.4064    prepare 3.3866    bound 6.0043    transfer 0.3348    finalize 1.2246    
all_split False
======================Cut inference begins======================
max lb tensor(0.01005256) min lb tensor(-0.02003300)
Number of Verified Splits: 4020 of 29932
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 12
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 1.8899707794189453 
BICCOS Cumulative time: 4.400498390197754
Preprocessing time: 0.8999550342559814 Inference time: 0.9329783916473389 Add cuts time: 0.05639505386352539 Cut analysis time: 0.0006422996520996094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02003 (21), -0.02000 (21), -0.02000 (21), -0.01996 (21), -0.01945 (21), -0.01943 (21), -0.01939 (20), -0.01938 (21), -0.01936 (20), -0.01936 (21), -0.01927 (21), -0.01924 (20), -0.01923 (21), -0.01923 (21), -0.01920 (20), -0.01920 (20), -0.01920 (21), -0.01917 (20), -0.01913 (21), -0.01910 (21), 
Length of domains: 25912
Time: pickout 0.2738    decision 1.0439    set_bounds 1.5832    solve 3.8773    add 0.3889    
Accumulated time: pickout 0.7004    decision 3.0636    set_bounds 3.6646    solve 11.2339    add 1.8475    
Current (lb-rhs): -0.02003300189971924
61113 domains visited
Cumulative time: 25.33696484565735

BaB round 18
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 540] [/input-8, 1175] [/input-8, 540] [/input-8, 1175] [/input-8, 540] [/input-8, 1175] [/input-8, 1261] [/input-8, 1175] [/input-8, 313] [/input-8, 1175] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.019415952265262604
10 lb beta sum: 0.41816484928131104, worst -0.01937420666217804
Time: prepare 0.8803    bound 2.4783    transfer 0.1633    finalize 0.5879    func 4.3204    
Accumulated time: func 15.7267    prepare 4.2673    bound 8.4826    transfer 0.4980    finalize 1.8125    
all_split False
======================Cut inference begins======================
max lb tensor(0.00981826) min lb tensor(-0.01936778)
Number of Verified Splits: 5265 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 12
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 2.2943785190582275 
BICCOS Cumulative time: 6.6948769092559814
Preprocessing time: 0.982978343963623 Inference time: 1.2345612049102783 Add cuts time: 0.07610535621643066 Cut analysis time: 0.0007336139678955078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02000 (21), -0.02000 (21), -0.01996 (21), -0.01937 (22), -0.01923 (21), -0.01920 (21), -0.01917 (22), -0.01910 (21), -0.01903 (21), -0.01886 (21), -0.01882 (21), -0.01875 (22), -0.01874 (21), -0.01872 (22), -0.01870 (21), -0.01870 (21), -0.01867 (21), -0.01863 (22), -0.01861 (22), -0.01860 (21), 
Length of domains: 37031
Time: pickout 0.2666    decision 1.6483    set_bounds 1.8103    solve 4.3262    add 0.5163    
Accumulated time: pickout 0.9670    decision 4.7118    set_bounds 5.4748    solve 15.5600    add 2.3638    
Current (lb-rhs): -0.019996218383312225
88616 domains visited
current_vram/total_varm: 40.0GB/99.9GB, batch_size increase to 32768
Cumulative time: 36.28111743927002

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.019377149641513824
10 lb beta sum: 0.4037318229675293, worst -0.019337140023708344
Time: prepare 1.7708    bound 10.0802    transfer 0.3149    finalize 0.9691    func 13.5563    
Accumulated time: func 29.2830    prepare 6.0385    bound 18.5627    transfer 0.8130    finalize 2.7816    
all_split False
======================Cut inference begins======================
max lb tensor(0.01028693) min lb tensor(-0.01932974)
Number of Verified Splits: 10248 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 12
#cuts 4-6: 2
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 4.447753667831421 
BICCOS Cumulative time: 11.142630577087402
Preprocessing time: 2.6364710330963135 Inference time: 1.654914140701294 Add cuts time: 0.15543818473815918 Cut analysis time: 0.0009303092956542969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01937 (22), -0.01933 (22), -0.01928 (22), -0.01925 (22), -0.01913 (22), -0.01912 (22), -0.01909 (22), -0.01870 (21), -0.01870 (23), -0.01867 (21), -0.01853 (21), -0.01852 (22), -0.01850 (21), -0.01848 (22), -0.01839 (22), -0.01837 (22), -0.01834 (22), -0.01831 (22), -0.01830 (23), -0.01824 (22), 
Length of domains: 59551
Time: pickout 0.5214    decision 3.2866    set_bounds 3.4488    solve 13.5668    add 0.4367    
Accumulated time: pickout 1.4884    decision 7.9984    set_bounds 8.9237    solve 29.1268    add 2.8005    
Current (lb-rhs): -0.019367776811122894
143904 domains visited
Cumulative time: 62.17433476448059

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 900] [/input-8, 900] [/input-8, 900] [/input-8, 900] [/input-8, 900] [/input-8, 900] [/input-8, 900] [/input-8, 900] [/input-8, 313] [/input-8, 313] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018916144967079163
10 lb beta sum: 0.3934250473976135, worst -0.018903210759162903
Time: prepare 1.8157    bound 10.0853    transfer 0.3253    finalize 0.4444    func 13.8662    
Accumulated time: func 43.1492    prepare 7.8547    bound 28.6480    transfer 1.1382    finalize 3.2260    
all_split False
======================Cut inference begins======================
max lb tensor(0.00962776) min lb tensor(-0.01889405)
Number of Verified Splits: 8451 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 12
#cuts 4-6: 4
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 4.5194854736328125 
BICCOS Cumulative time: 15.662116050720215
Preprocessing time: 2.0364861488342285 Inference time: 2.3214380741119385 Add cuts time: 0.16045022010803223 Cut analysis time: 0.0011110305786132812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01933 (22), -0.01928 (22), -0.01925 (22), -0.01889 (23), -0.01870 (23), -0.01867 (23), -0.01867 (23), -0.01864 (23), -0.01852 (22), -0.01850 (23), -0.01848 (22), -0.01839 (22), -0.01831 (22), -0.01828 (23), -0.01828 (23), -0.01825 (23), -0.01824 (23), -0.01820 (23), -0.01815 (22), -0.01814 (23), 
Length of domains: 83868
Time: pickout 0.5525    decision 3.4740    set_bounds 3.7214    solve 13.8786    add 18.3310    
Accumulated time: pickout 2.0408    decision 11.4724    set_bounds 12.6450    solve 43.0055    add 21.1315    
Current (lb-rhs): -0.019329741597175598
200989 domains visited
Cumulative time: 106.88709044456482

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 313] [/input-8, 899] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input, 1208] [/input-8, 313] [/input-8, 313] [/input-8, 313] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018881484866142273
10 lb beta sum: 0.388990581035614, worst -0.018868878483772278
Time: prepare 1.8046    bound 10.1004    transfer 0.3343    finalize 0.4930    func 14.2097    
Accumulated time: func 57.3589    prepare 9.6597    bound 38.7484    transfer 1.4725    finalize 3.7190    
all_split False
======================Cut inference begins======================
max lb tensor(0.00948203) min lb tensor(-0.01886049)
Number of Verified Splits: 8048 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 12
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 3.735304355621338 
BICCOS Cumulative time: 19.397420406341553
Preprocessing time: 2.103414535522461 Inference time: 1.4765291213989258 Add cuts time: 0.15400910377502441 Cut analysis time: 0.0013515949249267578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01889 (23), -0.01886 (23), -0.01882 (23), -0.01879 (23), -0.01867 (23), -0.01867 (23), -0.01864 (23), -0.01846 (23), -0.01842 (23), -0.01839 (23), -0.01828 (23), -0.01825 (23), -0.01815 (24), -0.01805 (23), -0.01802 (23), -0.01799 (22), -0.01796 (22), -0.01795 (24), -0.01793 (23), -0.01791 (24), 
Length of domains: 108588
Time: pickout 0.5622    decision 3.3105    set_bounds 3.9391    solve 14.2224    add 0.2495    
Accumulated time: pickout 2.6030    decision 14.7830    set_bounds 16.5841    solve 57.2279    add 21.3810    
Current (lb-rhs): -0.018894046545028687
258477 domains visited
Cumulative time: 133.14438796043396

BaB round 22
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input, 1208] [/input, 1208] [/input, 1208] [/input, 1208] [/input-8, 313] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018363863229751587
10 lb beta sum: 0.383024126291275, worst -0.01835116744041443
Time: prepare 1.9556    bound 10.0961    transfer 0.3235    finalize 0.5481    func 13.3453    
Accumulated time: func 70.7042    prepare 11.6158    bound 48.8445    transfer 1.7960    finalize 4.2672    
all_split False
======================Cut inference begins======================
max lb tensor(0.01002207) min lb tensor(-0.01834697)
Number of Verified Splits: 6898 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 12
#cuts 4-6: 5
#cuts 7-9: 6
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 4.99700140953064 
BICCOS Cumulative time: 24.394421815872192
Preprocessing time: 3.534397602081299 Inference time: 1.309272050857544 Add cuts time: 0.1515028476715088 Cut analysis time: 0.001828908920288086
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01886 (23), -0.01882 (23), -0.01879 (23), -0.01846 (23), -0.01842 (23), -0.01839 (23), -0.01835 (24), -0.01815 (24), -0.01813 (24), -0.01812 (24), -0.01810 (24), -0.01810 (24), -0.01805 (23), -0.01802 (23), -0.01795 (24), -0.01793 (23), -0.01791 (24), -0.01788 (24), -0.01788 (24), -0.01785 (24), 
Length of domains: 134458
Time: pickout 0.6020    decision 4.5488    set_bounds 4.5758    solve 13.3610    add 0.4328    
Accumulated time: pickout 3.2051    decision 19.3318    set_bounds 21.1599    solve 70.5889    add 21.8138    
Current (lb-rhs): -0.01886048913002014
317115 domains visited
Cumulative time: 161.917311668396

BaB round 23
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 900] [/input-8, 900] [/input-8, 900] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 900] [/input-8, 313] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01793624460697174
10 lb beta sum: 0.38683027029037476, worst -0.01798918843269348
Time: prepare 1.9200    bound 10.1121    transfer 0.3656    finalize 0.5773    func 13.3965    
Accumulated time: func 84.1007    prepare 13.5364    bound 58.9565    transfer 2.1616    finalize 4.8445    
all_split False
======================Cut inference begins======================
max lb tensor(0.00943598) min lb tensor(-0.01792665)
Number of Verified Splits: 6769 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 12
#cuts 4-6: 3
#cuts 7-9: 8
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 5.2697594165802 
BICCOS Cumulative time: 29.664181232452393
Preprocessing time: 3.8301427364349365 Inference time: 1.2886078357696533 Add cuts time: 0.14915013313293457 Cut analysis time: 0.0018587112426757812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01886 (23), -0.01882 (23), -0.01879 (23), -0.01835 (24), -0.01815 (24), -0.01813 (24), -0.01812 (24), -0.01810 (24), -0.01810 (24), -0.01805 (23), -0.01802 (23), -0.01795 (24), -0.01793 (23), -0.01793 (24), -0.01791 (24), -0.01788 (24), -0.01788 (24), -0.01788 (24), -0.01785 (24), -0.01785 (24), 
Length of domains: 160457
Time: pickout 0.6116    decision 3.3770    set_bounds 4.9203    solve 13.4137    add 0.4128    
Accumulated time: pickout 3.8166    decision 22.7088    set_bounds 26.0802    solve 84.0026    add 22.2266    
Current (lb-rhs): -0.01886048913002014
375882 domains visited
Cumulative time: 190.553857088089

BaB round 24
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1269] [/input-8, 899] [/input-8, 1269] [/input-8, 1269] [/input-8, 899] [/input-8, 1269] [/input-8, 1269] [/input-8, 1269] [/input-8, 899] [/input-8, 899] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01833195984363556
10 lb beta sum: 0.38198375701904297, worst -0.018808430060744286
Time: prepare 1.8921    bound 10.1189    transfer 0.4185    finalize 0.5840    func 13.4325    
Accumulated time: func 97.5333    prepare 15.4291    bound 69.0754    transfer 2.5801    finalize 5.4284    
all_split False
======================Cut inference begins======================
max lb tensor(0.00992808) min lb tensor(-0.01831821)
Number of Verified Splits: 6862 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 12
#cuts 4-6: 3
#cuts 7-9: 11
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 5.486964464187622 
BICCOS Cumulative time: 35.151145696640015
Preprocessing time: 2.111682415008545 Inference time: 3.2260825634002686 Add cuts time: 0.14729571342468262 Cut analysis time: 0.0019037723541259766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01835 (24), -0.01832 (24), -0.01828 (24), -0.01825 (24), -0.01813 (24), -0.01812 (24), -0.01810 (24), -0.01810 (24), -0.01807 (24), -0.01803 (24), -0.01799 (24), -0.01793 (24), -0.01789 (25), -0.01788 (24), -0.01788 (24), -0.01788 (24), -0.01785 (24), -0.01785 (24), -0.01774 (24), -0.01771 (24), 
Length of domains: 186363
Time: pickout 0.6715    decision 3.4497    set_bounds 5.7778    solve 13.4504    add 0.4299    
Accumulated time: pickout 4.4882    decision 26.1585    set_bounds 31.8580    solve 97.4530    add 22.6565    
Current (lb-rhs): -0.01834697276353836
434556 domains visited
Time out!!!!!!!!
Result: unknown in 223.3458 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 65, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.25397301, -11.57504463,  -9.66235542,  -8.69976139,  -9.31725407,
          -8.85229206,  -9.17159748,  -9.49390125,  -9.43022537, -10.41604328]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [395]; unstable size 395; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 134, 1, 395] with unstable size 133 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 395] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 395] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [133]; unstable size 133; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 133] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 133] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.46065497,  1.67517138,  0.13809097, -0.74742359, -0.27090001,
         -0.60667485, -0.21644306, -0.32564569,  0.60563874]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.25397301, -11.57504463,  -9.66235542,  -8.69976139,  -9.31725407,
          -8.85229206,  -9.17159748,  -9.49390125,  -9.43022537, -10.41604328]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.25397110, -11.57504368,  -9.66235447,  -8.69975948,  -9.31725216,
           -8.85229015,  -9.17159748,  -9.49389839,  -9.43022156, -10.41604137],
         [ -9.25397110, -11.57504368,  -9.66235447,  -8.69975948,  -9.31725216,
           -8.85229015,  -9.17159748,  -9.49389839,  -9.43022156, -10.41604137]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.08237362, -0.47183800,  0.14565468, -0.31930733,  0.32230091,
           0.25862408]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0843 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 66, vnnlib ID: 66 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.07646894, -7.65943909, -2.80038643, -4.19312286, -2.84907341,
         -4.31067753, -2.97104788, -5.49396992, -5.05455065, -7.49684191]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [412]; unstable size 412; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 412] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 412] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 412] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 191] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.59529054,  3.83634615, -0.28098130,  0.94465244,  1.05693650,
         -0.35508788,  2.21556520,  1.40175998,  3.70545506]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.07646894, -7.65943909, -2.80038643, -4.19312286, -2.84907341,
         -4.31067753, -2.97104788, -5.49396992, -5.05455065, -7.49684191]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.07646942, -7.65943909, -2.80038691, -4.19312382, -2.84907389,
          -4.31067753, -2.97104836, -5.49396992, -5.05455112, -7.49684286],
         [-4.07646942, -7.65943909, -2.80038691, -4.19312382, -2.84907389,
          -4.31067753, -2.97104836, -5.49396992, -5.05455112, -7.49684286]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04868698,  0.12197447]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.08412688,  0.31269848,  1.05873048,  ...,  0.59841275,
             0.75714290,  0.74126989],
           [ 0.13809532,  0.48730165,  0.80476195,  ...,  0.39206356,
             0.42380959,  0.51904768],
           [-0.16349196,  0.29682547,  0.86825401,  ...,  0.78888893,
             0.42380959,  0.83650798],
           ...,
           [-0.76666665, -0.98888886, -1.17936504,  ..., -0.90952379,
            -0.95714283, -0.81428570],
           [-0.86190474, -1.13174593, -1.14761901,  ..., -0.32222211,
            -0.67142856, -0.43333322],
           [-1.00476182, -1.13174593, -1.05238092,  ..., -0.33809513,
            -0.40158719, -0.62380952]],

          [[ 0.37037048,  0.80515307,  1.38486338,  ...,  1.35265732,
             1.69082153,  1.25603890],
           [ 0.62801939,  0.85346222,  0.99838978,  ...,  1.12721443,
             1.22383285,  0.86956531],
           [ 0.53140104,  0.61191636,  0.98228669,  ...,  1.48148179,
             1.04669893,  0.95008057],
           ...,
           [-0.16103047, -0.75684375, -0.98228657,  ..., -0.64412236,
            -0.74074072, -0.46698871],
           [-0.46698871, -0.91787434, -0.96618354,  ...,  0.25764906,
            -0.06441211,  0.20933989],
           [-0.77294683, -0.86956519, -0.88566822,  ...,  0.40257660,
             0.46698883,  0.30595824]],

          [[-0.37331331, -0.26836565,  0.21139447,  ...,  0.12143944,
             0.21139447,  0.07646193],
           [-0.14842562, -0.23838064, -0.13343313,  ...,  0.21139447,
             0.01649191, -0.28335828],
           [-0.19340314, -0.31334329,  0.06146942,  ...,  0.70614707,
             0.13643195, -0.16341813],
           ...,
           [-0.43328333, -0.62818587, -0.88305843,  ..., -0.68815589,
            -0.65817088, -0.61319339],
           [-0.52323836, -0.74812591, -0.77811092,  ..., -0.16341813,
            -0.32833579, -0.11844061],
           [-0.67316341, -0.77811092, -0.68815589,  ..., -0.13343313,
            -0.01349309, -0.05847061]]],


         [[[-0.08412688,  0.31269848,  1.05873048,  ...,  0.59841275,
             0.75714290,  0.74126989],
           [ 0.13809532,  0.48730165,  0.80476195,  ...,  0.39206356,
             0.42380959,  0.51904768],
           [-0.16349196,  0.29682547,  0.86825401,  ...,  0.78888893,
             0.42380959,  0.83650798],
           ...,
           [-0.76666665, -0.98888886, -1.17936504,  ..., -0.90952379,
            -0.95714283, -0.81428570],
           [-0.86190474, -1.13174593, -1.14761901,  ..., -0.32222211,
            -0.67142856, -0.43333322],
           [-1.00476182, -1.13174593, -1.05238092,  ..., -0.33809513,
            -0.40158719, -0.62380952]],

          [[ 0.37037048,  0.80515307,  1.38486338,  ...,  1.35265732,
             1.69082153,  1.25603890],
           [ 0.62801939,  0.85346222,  0.99838978,  ...,  1.12721443,
             1.22383285,  0.86956531],
           [ 0.53140104,  0.61191636,  0.98228669,  ...,  1.48148179,
             1.04669893,  0.95008057],
           ...,
           [-0.16103047, -0.75684375, -0.98228657,  ..., -0.64412236,
            -0.74074072, -0.46698871],
           [-0.46698871, -0.91787434, -0.96618354,  ...,  0.25764906,
            -0.06441211,  0.20933989],
           [-0.77294683, -0.86956519, -0.88566822,  ...,  0.40257660,
             0.46698883,  0.30595824]],

          [[-0.37331331, -0.26836565,  0.21139447,  ...,  0.12143944,
             0.21139447,  0.07646193],
           [-0.14842562, -0.23838064, -0.13343313,  ...,  0.21139447,
             0.01649191, -0.28335828],
           [-0.19340314, -0.31334329,  0.06146942,  ...,  0.70614707,
             0.13643195, -0.16341813],
           ...,
           [-0.43328333, -0.62818587, -0.88305843,  ..., -0.68815589,
            -0.65817088, -0.61319339],
           [-0.52323836, -0.74812591, -0.77811092,  ..., -0.16341813,
            -0.32833579, -0.11844061],
           [-0.67316341, -0.77811092, -0.68815589,  ..., -0.13343313,
            -0.01349309, -0.05847061]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0843 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 67, vnnlib ID: 67 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.55771780, -9.15554237, -1.90561867, -3.81715608, -2.01485729,
         -3.92124176, -2.46277452, -4.73829317, -7.58408260, -8.67660141]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [678]; unstable size 678; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 183, 1, 678] with unstable size 182 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 678] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 678] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 182] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.24960232,  6.38107681,  1.60664821, -0.06612652,  1.70738173,
          0.18758941,  2.45988202,  5.07852507,  5.93349123]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.55771780, -9.15554237, -1.90561867, -3.81715608, -2.01485729,
         -3.92124176, -2.46277452, -4.73829317, -7.58408260, -8.67660141]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.92it/s]100%|██████████| 1/1 [00:00<00:00,  8.91it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.62309074, -9.13611889, -2.05009270, -3.92859149, -2.05051351,
          -4.03291273, -2.54317069, -4.72930622, -7.65253258, -8.69230938]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00042081]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1150 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 26.699169158935547
alpha/beta optimization time: 1.194106101989746
initial alpha-crown bounds: tensor([[ 3.27143621,  6.42873669,  1.61031747, -0.06354005,  1.71119118,
          0.19428855,  2.46747231,  5.10520935,  5.97405910]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.06354004889726639
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.62148213386536
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6214427947998
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6214165687561
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.62139534950256
Verifying property 3 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.06354005]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.55771780, -9.15554237, -1.90561867, -3.81715608, -2.01485729,
        -3.92124176, -2.46277452, -4.73829317, -7.58408260, -8.67660141],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.06354005]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 678
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 180
Node /15 input 0: size torch.Size([100]) unstable 2
-----------------
# of unstable neurons: 860
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011014938354492188
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06354064494371414
10 lb beta sum: 0.0, worst -0.06354182958602905
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    func 0.0530    
Accumulated time: func 0.0530    prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 542] 
split level 1: [/input-8, 553] 
split level 2: [/input-8, 545] 
split level 3: [/input-8, 562] 
split level 4: [/input-8, 538] 
split level 5: [/input-8, 1453] 
split level 6: [/input-8, 550] 
split level 7: [/input-8, 530] 
split level 8: [/input-8, 551] 
split level 9: [/input-8, 563] 
split level 10: [/input-8, 541] 
split level 11: [/input-8, 546] 
split level 12: [/input-8, 561] 
split level 13: [/input-8, 547] 
split level 14: [/input-8, 1191] 
split level 15: [/input-8, 554] 
split level 16: [/input-8, 1446] 
split level 17: [/input-8, 1259] 
split level 18: [/input-8, 1260] 
split level 19: [/input-8, 1183] 
split level 20: [/input-8, 1470] 
split level 21: [/input-8, 88] 
split level 22: [/input-8, 933] 
split level 23: [/input-8, 949] 
split level 24: [/input-8, 539] 
split level 25: [/input-8, 1251] 
split level 26: [/input-8, 1005] 
split level 27: [/input-8, 1252] 
split level 28: [/input-8, 340] 
split level 29: [/input-8, 2044] 
split level 30: [/input-8, 315] 
split level 31: [/input-8, 540] 
split level 32: [/input, 571] 
split level 33: [/input, 1131] 
split level 34: [/input, 569] 
split level 35: [/input, 586] 
split level 36: [/input-8, 555] 
split level 37: [/input, 810] 
split level 38: [/input-8, 378] 
split level 39: [/input-8, 560] 
split level 40: [/input, 2393] 
split level 41: [/input-8, 1244] 
split level 42: [/input, 1227] 
split level 43: [/input-8, 1437] 
split level 44: [/input-8, 1506] 
split level 45: [/input-8, 556] 
split level 46: [/input-8, 520] 
split level 47: [/input-8, 1945] 
split level 48: [/input, 2363] 
split level 49: [/input-8, 2035] 
split level 50: [/input-8, 934] 
split level 51: [/input-8, 1937] 
split level 52: [/input-8, 379] 
split level 53: [/input-8, 1622] 
split level 54: [/input-8, 317] 
split level 55: [/input-8, 946] 
split level 56: [/input, 1126] 
split level 57: [/input, 1209] 
split level 58: [/input, 3911] 
split level 59: [/input, 1243] 
split level 60: [/input, 923] 
split level 61: [/input, 1110] 
split level 62: [/input, 1846] 
split level 63: [/input, 1861] 
split level 64: [/input, 3789] 
split level 65: [/input, 1927] 
split level 66: [/input, 1874] 
split level 67: [/input, 1081] 
split level 68: [/input, 1865] 
split level 69: [/input, 939] 
split level 70: [/input, 1877] 
split level 71: [/input-8, 806] 
split level 72: [/input, 565] 
split level 73: [/input, 1902] 
split level 74: [/input-8, 908] 
split level 75: [/input, 1862] 
split level 76: [/input-8, 2045] 
split level 77: [/input, 842] 
split level 78: [/input, 1829] 
split level 79: [/input, 3653] 
split level 80: [/input-8, 2036] 
split level 81: [/input, 1050] 
split level 82: [/input, 1895] 
split level 83: [/input-8, 1515] 
split level 84: [/input-8, 814] 
split level 85: [/input, 3928] 
split level 86: [/input-8, 574] 
split level 87: [/input, 931] 
split level 88: [/input, 1845] 
split level 89: [/input, 1890] 
split level 90: [/input, 954] 
split level 91: [/input, 1912] 
split level 92: [/input, 1098] 
split level 93: [/input, 699] 
split level 94: [/input-8, 910] 
split level 95: [/input, 1878] 
split level 96: [/input, 1893] 
split level 97: [/input, 581] 
split level 98: [/input-8, 1960] 
split level 99: [/input, 1910] 
split level 100: [/input-8, 926] 
split level 101: [/input, 1816] 
split level 102: [/input, 1844] 
split level 103: [/input, 1892] 
split level 104: [/input-8, 67] 
split level 105: [/input-8, 380] 
split level 106: [/input, 972] 
split level 107: [/input, 3625] 
split level 108: [/input-8, 66] 
split level 109: [/input, 1885] 
split level 110: [/input, 646] 
split level 111: [/input, 1926] 
split level 112: [/input, 1894] 
split level 113: [/input, 901] 
split level 114: [/input, 955] 
split level 115: [/input, 1859] 
split level 116: [/input-8, 1790] 
split level 117: [/input, 795] 
split level 118: [/input, 1925] 
split level 119: [/input, 1814] 
split level 120: [/input, 3686] 
split level 121: [/input, 1145] 
split level 122: [/input-8, 763] 
split level 123: [/input-8, 104] 
split level 124: [/input, 1934] 
split level 125: [/input, 566] 
split level 126: [/input, 1911] 
split level 127: [/input, 1875] 
split level 128: [/input, 1049] 
split level 129: [/input, 3641] 
split level 130: [/input, 1997] 
split level 131: [/input, 1837] 
split level 132: [/input, 582] 
split level 133: [/input, 1162] 
split level 134: [/input, 630] 
split level 135: [/input, 1923] 
split level 136: [/input, 3669] 
split level 137: [/input, 1828] 
split level 138: [/input-8, 1167] 
split level 139: [/input, 899] 
split level 140: [/input, 549] 
split level 141: [/input, 580] 
split level 142: [/input-8, 1630] 
split level 143: [/input, 1149] 
split level 144: [/input-8, 1787] 
split level 145: [/input, 1909] 
split level 146: [/input, 3622] 
split level 147: [/input, 1853] 
split level 148: [/input-8, 1513] 
split level 149: [/input, 1826] 
split level 150: [/input-8, 1652] 
split level 151: [/input-8, 152] 
split level 152: [/input, 1922] 
split level 153: [/input, 1085] 
split level 154: [/input-8, 1623] 
split level 155: [/input-8, 1951] 
split level 156: [/input, 1869] 
split level 157: [/input, 947] 
split level 158: [/input-8, 1625] 
split level 159: [/input, 677] 
split level 160: [/input-8, 1952] 
split level 161: [/input, 714] 
split level 162: [/input, 3201] 
split level 163: [/input, 1083] 
split level 164: [/input, 798] 
split level 165: [/input, 1924] 
split level 166: [/input, 1822] 
split level 167: [/input, 1906] 
split level 168: [/input, 1930] 
split level 169: [/input, 1094] 
split level 170: [/input, 979] 
split level 171: [/input, 1090] 
split level 172: [/input, 603] 
split level 173: [/input, 583] 
split level 174: [/input, 1825] 
split level 175: [/input-8, 1651] 
split level 176: [/input, 678] 
split level 177: [/input, 550] 
split level 178: [/input, 1854] 
split level 179: [/input, 1884] 
split level 180: [/input, 1907] 
split level 181: [/input-8, 890] 
split level 182: [/input, 1129] 
split level 183: [/input, 614] 
split level 184: [/input, 724] 
split level 185: [/input, 1838] 
split level 186: [/input, 1883] 
split level 187: [/input, 1811] 
split level 188: [/input, 534] 
split level 189: [/input, 1190] 
split level 190: [/input, 1870] 
split level 191: [/input, 3662] 
split level 192: [/input, 1950] 
split level 193: [/input, 963] 
split level 194: [/input, 814] 
split level 195: [/input, 693] 
split level 196: [/input, 1905] 
split level 197: [/input, 1174] 
split level 198: [/input, 717] 
split level 199: [/input, 916] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06352940946817398
10 lb beta sum: 0.0, worst -0.06352990865707397
Time: prepare 0.0112    bound 0.0960    transfer 0.0022    finalize 0.0026    func 0.1146    
Accumulated time: func 0.1676    prepare 0.0212    bound 0.1485    transfer 0.0023    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(-0.04591014) min lb tensor(-0.06352837)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.009791851043701172 
BICCOS Cumulative time: 0.009791851043701172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06216 (1), -0.06214 (1), -0.06213 (1), -0.06211 (1), -0.06200 (1), -0.06199 (1), -0.06197 (1), -0.06195 (1), -0.06193 (1), -0.06193 (1), -0.06189 (1), -0.06188 (1), -0.06185 (1), -0.06173 (1), -0.06172 (1), -0.06170 (1), -0.06168 (1), -0.06163 (1), -0.06158 (1), -0.06142 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5127    set_bounds 0.0088    solve 0.1147    add 0.1924    
Accumulated time: pickout 0.0003    decision 0.5127    set_bounds 0.0088    solve 0.1147    add 0.1924    
Current (lb-rhs): -0.06216053664684296
50 domains visited
Cumulative time: 0.9205105304718018

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 1453] [/input-8, 545] [/input-8, 545] 
split level 1: [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] 
split level 2: [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 546] [/input-8, 541] [/input-8, 541] [/input-8, 546] [/input-8, 541] [/input-8, 541] [/input-8, 541] 
split level 3: [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 541] [/input-8, 546] [/input-8, 546] [/input-8, 541] [/input-8, 546] [/input-8, 546] [/input-8, 546] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06174411624670029
10 lb beta sum: 0.0, worst -0.06178249046206474
Time: prepare 0.0115    bound 0.0952    transfer 0.0010    finalize 0.0022    func 0.1125    
Accumulated time: func 0.2801    prepare 0.0329    bound 0.2437    transfer 0.0033    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(-0.03146629) min lb tensor(-0.06172943)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.01156926155090332 
BICCOS Cumulative time: 0.021361112594604492
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05430 (2), -0.05422 (2), -0.05411 (2), -0.05406 (2), -0.05397 (2), -0.05387 (2), -0.05383 (2), -0.05381 (2), -0.05374 (2), -0.05373 (2), -0.05370 (2), -0.05366 (2), -0.05365 (2), -0.05363 (2), -0.05359 (2), -0.05353 (2), -0.05347 (2), -0.05316 (2), -0.05314 (2), -0.05292 (2), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0193    set_bounds 0.0154    solve 0.1126    add 0.1104    
Accumulated time: pickout 0.0082    decision 0.5319    set_bounds 0.0242    solve 0.2273    add 0.3027    
Current (lb-rhs): -0.05430089682340622
100 domains visited
Cumulative time: 1.1977641582489014

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 545] [/input-8, 1453] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 1453] [/input-8, 538] [/input-8, 1453] 
split level 1: [/input-8, 538] [/input-8, 538] [/input-8, 541] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 541] [/input-8, 538] [/input-8, 546] [/input-8, 538] 
split level 2: [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 541] [/input-8, 541] [/input-8, 550] [/input-8, 550] [/input-8, 541] [/input-8, 541] [/input-8, 541] 
split level 3: [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 550] [/input-8, 550] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 550] [/input-8, 546] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05354263633489609
10 lb beta sum: 0.0, worst -0.05366102606058121
Time: prepare 0.0109    bound 0.0947    transfer 0.0007    finalize 0.0022    func 0.1111    
Accumulated time: func 0.3912    prepare 0.0441    bound 0.3384    transfer 0.0040    finalize 0.0072    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02582456) min lb tensor(-0.05347711)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.011348485946655273 
BICCOS Cumulative time: 0.032709598541259766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04164 (3), -0.04163 (3), -0.04161 (3), -0.04161 (3), -0.04138 (3), -0.04113 (3), -0.04109 (3), -0.04081 (3), -0.04069 (3), -0.04064 (3), -0.04018 (3), -0.03982 (3), -0.03974 (3), -0.03973 (3), -0.03950 (3), -0.03946 (3), -0.03941 (3), -0.03940 (3), -0.03939 (3), -0.03923 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0149    solve 0.1112    add 0.0756    
Accumulated time: pickout 0.0091    decision 0.5514    set_bounds 0.0391    solve 0.3385    add 0.3783    
Current (lb-rhs): -0.041640784591436386
150 domains visited
Cumulative time: 1.4315099716186523

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1453] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] 
split level 1: [/input-8, 551] [/input-8, 551] [/input-8, 551] [/input-8, 538] [/input-8, 551] [/input-8, 551] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 551] 
split level 2: [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 551] [/input-8, 538] [/input-8, 538] [/input-8, 551] [/input-8, 551] [/input-8, 551] [/input-8, 550] 
split level 3: [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 550] [/input-8, 546] [/input-8, 550] [/input-8, 546] [/input-8, 550] [/input-8, 550] [/input-8, 546] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04118995741009712
10 lb beta sum: 0.0, worst -0.041193388402462006
Time: prepare 0.0113    bound 0.0952    transfer 0.0007    finalize 0.0020    func 0.1118    
Accumulated time: func 0.5030    prepare 0.0556    bound 0.4336    transfer 0.0047    finalize 0.0091    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00972177) min lb tensor(-0.04113112)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.011437654495239258 
BICCOS Cumulative time: 0.04414725303649902
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02450 (4), -0.02440 (4), -0.02437 (4), -0.02435 (4), -0.02433 (4), -0.02432 (4), -0.02430 (4), -0.02430 (4), -0.02427 (4), -0.02426 (4), -0.02426 (4), -0.02422 (4), -0.02420 (4), -0.02414 (4), -0.02414 (4), -0.02403 (4), -0.02397 (4), -0.02393 (4), -0.02393 (4), -0.02391 (4), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0191    set_bounds 0.0152    solve 0.1119    add 0.0821    
Accumulated time: pickout 0.0100    decision 0.5705    set_bounds 0.0543    solve 0.4504    add 0.4604    
Current (lb-rhs): -0.02450379729270935
200 domains visited
Cumulative time: 1.6723544597625732

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 545] [/input-8, 550] [/input-8, 545] [/input-8, 545] [/input-8, 538] [/input-8, 551] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 550] 
split level 1: [/input-8, 538] [/input-8, 538] [/input-8, 550] [/input-8, 550] [/input-8, 551] [/input-8, 538] [/input-8, 551] [/input-8, 551] [/input-8, 551] [/input-8, 545] 
split level 2: [/input-8, 546] [/input-8, 546] [/input-8, 561] [/input-8, 561] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 538] 
split level 3: [/input-8, 561] [/input-8, 561] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 561] [/input-8, 561] [/input-8, 561] [/input-8, 561] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02395259588956833
10 lb beta sum: 0.0, worst -0.0239008367061615
Time: prepare 0.0110    bound 0.0948    transfer 0.0007    finalize 0.0017    func 0.2929    
Accumulated time: func 0.7959    prepare 0.0669    bound 0.5284    transfer 0.0055    finalize 0.0108    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00214556) min lb tensor(-0.02368800)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.012122392654418945 
BICCOS Cumulative time: 0.05626964569091797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01639 (5), -0.01639 (5), -0.01617 (5), -0.01605 (5), -0.01583 (5), -0.01570 (5), -0.01546 (5), -0.01524 (5), -0.01514 (5), -0.01503 (5), -0.01496 (5), -0.01495 (5), -0.01483 (5), -0.01481 (5), -0.01413 (5), -0.01395 (5), -0.01384 (5), -0.01382 (5), -0.01380 (5), -0.01374 (5), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0152    solve 0.2931    add 0.0852    
Accumulated time: pickout 0.0110    decision 0.5899    set_bounds 0.0695    solve 0.7434    add 0.5457    
Current (lb-rhs): -0.016389191150665283
250 domains visited
Cumulative time: 2.0986993312835693

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542, 541, 545]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.68029002e-13, 1.13621145e-03, 4.74845758e-04]), tensor([0, 1, 2])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 542,  541,  545, 1453]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.68029002e-13, 1.13621145e-03, 5.27558988e-03, 5.79539081e-03]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 542,  541,  545, 1453]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.68029002e-13, 1.13621145e-03, 5.27558988e-03, 8.74744495e-04]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542, 541, 545, 551, 538]), tensor([-1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.68029002e-13, 1.44448522e-02, 8.79334053e-04, 7.06556579e-03,
        4.72940644e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542, 541, 545, 551, 538]), tensor([-1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.68029002e-13, 1.44448522e-02, 8.79334053e-04, 7.06556579e-03,
        1.08765229e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542, 541, 545, 551]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.68029002e-13, 1.44448522e-02, 8.79334053e-04, 7.12999841e-04]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 542,  541,  545,  550, 1453]), tensor([-1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.68029002e-13, 1.44448522e-02, 5.64272841e-03, 2.11331411e-03,
        5.38811227e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 542,  541,  545,  550, 1453]), tensor([-1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.68029002e-13, 1.44448522e-02, 5.64272841e-03, 2.11331411e-03,
        1.08436658e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542, 541, 545, 550, 551]), tensor([-1.,  1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.68029002e-13, 1.44448522e-02, 5.64272841e-03, 2.93775811e-03,
        1.85622219e-02]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542, 541, 545, 550, 551]), tensor([-1.,  1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.68029002e-13, 1.44448522e-02, 5.64272841e-03, 2.93775811e-03,
        5.77354571e-04]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542]), tensor([1.]), tensor([0]), tensor([1.68029002e-13]), tensor([0])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  11
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06321680545806885
10 lb beta sum: 0.0, worst -0.06320852041244507
Time: prepare 0.0007    bound 0.1002    transfer 0.0001    finalize 0.0002    func 0.1013    
Accumulated time: func 0.8973    prepare 0.0675    bound 0.6286    transfer 0.0056    finalize 0.0110    
After pruning, left:  11

Back to Regular BaB

BaB round 1
batch: 11
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 538] [/input-8, 551] [/input-8, 551] [/input-8, 550] [/input-8, 550] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 1453] [/input-8, 1453] 
split level 1: [/input-8, 551] [/input-8, 538] [/input-8, 538] [/input-8, 1453] [/input-8, 1453] [/input-8, 546] [/input-8, 551] [/input-8, 551] [/input-8, 538] [/input-8, 538] 
split level 2: [/input-8, 546] [/input-8, 550] [/input-8, 550] [/input-8, 546] [/input-8, 546] [/input-8, 550] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] 
split level 3: [/input-8, 550] [/input-8, 546] [/input-8, 546] [/input-8, 561] [/input-8, 561] [/input-8, 561] [/input-8, 561] [/input-8, 561] [/input-8, 561] [/input-8, 561] 
split level 4: [/input-8, 561] [/input-8, 561] [/input-8, 561] [/input-8, 547] [/input-8, 547] [/input-8, 547] [/input-8, 547] [/input-8, 547] [/input-8, 547] [/input-8, 547] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05698861926794052
10 lb beta sum: 0.0, worst -0.05697021633386612
Time: prepare 0.0096    bound 0.0991    transfer 0.0014    finalize 0.0018    func 0.1141    
Accumulated time: func 1.0114    prepare 0.0774    bound 0.7277    transfer 0.0070    finalize 0.0128    
all_split False
======================Cut inference begins======================
max lb tensor(0.00876799) min lb tensor(-0.05696055)
Number of Verified Splits: 70 of 352
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.041201747953891754
10 lb beta sum: 0.0, worst -0.013022281229496002
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 7-9: 6
#cuts 10-12: 8
#cuts >= 20: 0
BICCOS time: 0.14701509475708008 
BICCOS Cumulative time: 0.20328474044799805
Preprocessing time: 0.00857090950012207 Inference time: 0.1345527172088623 Add cuts time: 0.002697467803955078 Cut analysis time: 0.001194000244140625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05696 (5), -0.05607 (5), -0.05475 (5), -0.05390 (5), -0.05389 (5), -0.05297 (5), -0.05285 (5), -0.05208 (5), -0.05202 (5), -0.05170 (5), -0.05112 (5), -0.05103 (5), -0.05069 (5), -0.05018 (5), -0.04993 (5), -0.04954 (5), -0.04896 (5), -0.04888 (5), -0.04883 (5), -0.04864 (5), 
Length of domains: 282
Time: pickout 0.0005    decision 0.0183    set_bounds 0.0215    solve 0.1142    add 0.0031    
Accumulated time: pickout 0.0115    decision 0.6082    set_bounds 0.0909    solve 0.8577    add 0.5487    
Current (lb-rhs): -0.05696055293083191
532 domains visited
Cumulative time: 2.528869390487671

BaB round 2
batch: 282
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1453] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 1453] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05608620494604111
10 lb beta sum: 0.0, worst -0.05607670545578003
Time: prepare 0.0082    bound 0.1211    transfer 0.0025    finalize 0.0025    func 0.1381    
Accumulated time: func 1.1494    prepare 0.0859    bound 0.8487    transfer 0.0096    finalize 0.0153    
all_split False
======================Cut inference begins======================
max lb tensor(0.00325926) min lb tensor(-0.05607159)
Number of Verified Splits: 37 of 564
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 4-6: 3
#cuts 7-9: 8
#cuts >= 20: 0
BICCOS time: 0.022693634033203125 
BICCOS Cumulative time: 0.22597837448120117
Preprocessing time: 0.015943527221679688 Inference time: 0.004253387451171875 Add cuts time: 0.0016672611236572266 Cut analysis time: 0.0008294582366943359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05607 (6), -0.05514 (6), -0.05384 (6), -0.05347 (6), -0.05300 (6), -0.05244 (6), -0.05201 (6), -0.05151 (6), -0.05124 (6), -0.05113 (6), -0.05107 (6), -0.05088 (6), -0.05027 (6), -0.05020 (6), -0.05013 (6), -0.04940 (6), -0.04928 (6), -0.04920 (6), -0.04864 (6), -0.04857 (6), 
Length of domains: 527
Time: pickout 0.0035    decision 0.0256    set_bounds 0.0234    solve 0.1382    add 0.0034    
Accumulated time: pickout 0.0151    decision 0.6339    set_bounds 0.1143    solve 0.9959    add 0.5521    
Current (lb-rhs): -0.05607159063220024
1059 domains visited
Cumulative time: 2.747321605682373

BaB round 3
batch: 527
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 530] [/input-8, 547] [/input-8, 547] [/input-8, 562] [/input-8, 562] [/input-8, 1453] [/input-8, 562] [/input-8, 562] [/input-8, 547] [/input-8, 530] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.055067360401153564
10 lb beta sum: 9.671512998465914e-06, worst -0.055054113268852234
Time: prepare 0.0150    bound 0.1249    transfer 0.0020    finalize 0.0052    func 0.1539    
Accumulated time: func 1.3033    prepare 0.1010    bound 0.9736    transfer 0.0115    finalize 0.0205    
all_split False
======================Cut inference begins======================
max lb tensor(0.00500979) min lb tensor(-0.05504584)
Number of Verified Splits: 127 of 1054
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 4-6: 8
#cuts 7-9: 17
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.0522005558013916 
BICCOS Cumulative time: 0.2781789302825928
Preprocessing time: 0.03069448471069336 Inference time: 0.015846967697143555 Add cuts time: 0.0041005611419677734 Cut analysis time: 0.001558542251586914
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05505 (7), -0.05410 (7), -0.05270 (7), -0.05256 (7), -0.05186 (7), -0.05184 (7), -0.05149 (7), -0.05100 (7), -0.05097 (7), -0.05070 (7), -0.05056 (7), -0.05033 (7), -0.05016 (7), -0.04998 (7), -0.04992 (7), -0.04972 (7), -0.04935 (7), -0.04904 (7), -0.04897 (7), -0.04864 (7), 
Length of domains: 927
Time: pickout 0.0073    decision 0.0400    set_bounds 0.0432    solve 0.1541    add 0.0045    
Accumulated time: pickout 0.0224    decision 0.6738    set_bounds 0.1576    solve 1.1500    add 0.5566    
Current (lb-rhs): -0.05504583567380905
1986 domains visited
Cumulative time: 3.050445795059204

BaB round 4
batch: 927
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 547] [/input-8, 562] [/input-8, 562] [/input-8, 554] [/input-8, 554] [/input-8, 562] [/input-8, 1446] [/input-8, 554] [/input-8, 551] [/input-8, 547] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05391569435596466
10 lb beta sum: 7.287397602340207e-05, worst -0.053906604647636414
Time: prepare 0.0268    bound 0.1485    transfer 0.0068    finalize 0.0089    func 0.3368    
Accumulated time: func 1.6401    prepare 0.1280    bound 1.1221    transfer 0.0183    finalize 0.0294    
all_split False
======================Cut inference begins======================
max lb tensor(0.00421645) min lb tensor(-0.05390061)
Number of Verified Splits: 211 of 1854
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 4-6: 9
#cuts 7-9: 30
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.09274482727050781 
BICCOS Cumulative time: 0.3709237575531006
Preprocessing time: 0.05512380599975586 Inference time: 0.027363300323486328 Add cuts time: 0.007727861404418945 Cut analysis time: 0.0025298595428466797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05390 (8), -0.05295 (8), -0.05220 (8), -0.05187 (8), -0.05153 (8), -0.05125 (8), -0.05103 (8), -0.05067 (8), -0.05045 (8), -0.05017 (8), -0.04976 (8), -0.04974 (8), -0.04950 (8), -0.04949 (8), -0.04933 (8), -0.04931 (8), -0.04915 (8), -0.04910 (8), -0.04897 (8), -0.04853 (8), 
Length of domains: 1643
Time: pickout 0.0095    decision 0.0601    set_bounds 0.0753    solve 0.3372    add 0.0092    
Accumulated time: pickout 0.0319    decision 0.7339    set_bounds 0.2329    solve 1.4871    add 0.5659    
Current (lb-rhs): -0.05390060693025589
3629 domains visited
Cumulative time: 3.638129949569702

BaB round 5
batch: 1643
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 562] [/input-8, 554] [/input-8, 554] [/input-8, 1446] [/input-8, 1446] [/input-8, 554] [/input-8, 554] [/input-8, 1446] [/input-8, 530] [/input-8, 562] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05330823361873627
10 lb beta sum: 0.00015100229938980192, worst -0.05330274999141693
Time: prepare 0.0488    bound 0.2308    transfer 0.0140    finalize 0.0159    func 0.3315    
Accumulated time: func 1.9716    prepare 0.1772    bound 1.3529    transfer 0.0323    finalize 0.0453    
all_split False
======================Cut inference begins======================
max lb tensor(0.00783275) min lb tensor(-0.05329729)
Number of Verified Splits: 425 of 3286
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 81.
#cuts 4-6: 11
#cuts 7-9: 65
#cuts 10-12: 5
#cuts >= 20: 0
BICCOS time: 0.1774733066558838 
BICCOS Cumulative time: 0.5483970642089844
Preprocessing time: 0.09699845314025879 Inference time: 0.05737638473510742 Add cuts time: 0.01827526092529297 Cut analysis time: 0.004823207855224609
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05330 (9), -0.05235 (9), -0.05160 (9), -0.05118 (9), -0.05092 (9), -0.05065 (9), -0.05036 (9), -0.04998 (9), -0.04985 (9), -0.04949 (9), -0.04914 (9), -0.04911 (9), -0.04908 (9), -0.04881 (9), -0.04869 (9), -0.04865 (9), -0.04864 (9), -0.04848 (9), -0.04828 (9), -0.04818 (9), 
Length of domains: 2861
Time: pickout 0.0173    decision 0.0987    set_bounds 0.1394    solve 0.3326    add 0.0158    
Accumulated time: pickout 0.0491    decision 0.8327    set_bounds 0.3723    solve 1.8197    add 0.5817    
Current (lb-rhs): -0.053297288715839386
6490 domains visited
Cumulative time: 4.428245306015015

BaB round 6
batch: 2861
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 554] [/input-8, 1446] [/input-8, 1446] [/input-8, 1470] [/input-8, 1470] [/input-8, 1446] [/input-8, 1470] [/input-8, 561] [/input-8, 554] [/input-8, 1446] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05252210795879364
10 lb beta sum: 0.00013585104898083955, worst -0.05250716209411621
Time: prepare 0.0917    bound 0.3634    transfer 0.0338    finalize 0.0305    func 0.5565    
Accumulated time: func 2.5281    prepare 0.2692    bound 1.7164    transfer 0.0661    finalize 0.0758    
all_split False
======================Cut inference begins======================
max lb tensor(0.00957641) min lb tensor(-0.05249633)
Number of Verified Splits: 530 of 5722
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 107.
#cuts 4-6: 15
#cuts 7-9: 86
#cuts 10-12: 6
#cuts >= 20: 0
BICCOS time: 0.27985453605651855 
BICCOS Cumulative time: 0.8282516002655029
Preprocessing time: 0.16938138008117676 Inference time: 0.07911443710327148 Add cuts time: 0.02519845962524414 Cut analysis time: 0.006160259246826172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05250 (10), -0.05156 (10), -0.05080 (10), -0.05012 (10), -0.04986 (10), -0.04971 (10), -0.04969 (10), -0.04917 (10), -0.04904 (10), -0.04885 (10), -0.04878 (10), -0.04868 (10), -0.04835 (10), -0.04827 (10), -0.04802 (10), -0.04800 (10), -0.04786 (10), -0.04784 (10), -0.04747 (10), -0.04737 (10), 
Length of domains: 5192
Time: pickout 0.0317    decision 0.3430    set_bounds 0.2472    solve 0.7148    add 0.0310    
Accumulated time: pickout 0.0808    decision 1.1757    set_bounds 0.6194    solve 2.5345    add 0.6127    
Current (lb-rhs): -0.052496328949928284
11682 domains visited
Cumulative time: 6.087701320648193

BaB round 7
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1446] [/input-8, 539] [/input-8, 539] [/input-8, 539] [/input-8, 539] [/input-8, 1470] [/input-8, 539] [/input-8, 562] [/input-8, 1446] [/input-8, 539] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0522175058722496
10 lb beta sum: 0.00015122430340852588, worst -0.0521957129240036
Time: prepare 0.1335    bound 0.4967    transfer 0.0260    finalize 0.0428    func 0.7532    
Accumulated time: func 3.2812    prepare 0.4029    bound 2.2131    transfer 0.0921    finalize 0.1186    
all_split False
======================Cut inference begins======================
max lb tensor(0.00222921) min lb tensor(-0.05218408)
Number of Verified Splits: 675 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 128.
#cuts 4-6: 26
#cuts 7-9: 92
#cuts 10-12: 10
#cuts >= 20: 0
BICCOS time: 0.40285301208496094 
BICCOS Cumulative time: 1.2311046123504639
Preprocessing time: 0.24686861038208008 Inference time: 0.11546850204467773 Add cuts time: 0.033072710037231445 Cut analysis time: 0.00744318962097168
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05218 (11), -0.05125 (11), -0.05049 (11), -0.04981 (11), -0.04955 (11), -0.04934 (11), -0.04919 (11), -0.04880 (11), -0.04873 (11), -0.04851 (11), -0.04831 (11), -0.04827 (11), -0.04804 (11), -0.04791 (11), -0.04765 (11), -0.04755 (11), -0.04750 (11), -0.04747 (11), -0.04710 (11), -0.04707 (11), 
Length of domains: 8613
Time: pickout 0.0469    decision 0.2330    set_bounds 0.5458    solve 0.7558    add 0.1801    
Accumulated time: pickout 0.1277    decision 1.4087    set_bounds 1.1652    solve 3.2903    add 0.7928    
Current (lb-rhs): -0.0521840825676918
19199 domains visited
current_vram/total_varm: 25.5GB/99.9GB, batch_size increase to 8192
Cumulative time: 8.275245189666748

BaB round 8
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 539] [/input-8, 562] [/input-8, 1446] [/input-8, 1470] [/input-8, 1470] [/input-8, 539] [/input-8, 539] [/input-8, 539] [/input-8, 539] [/input-8, 539] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05139852315187454
10 lb beta sum: 0.0001394543651258573, worst -0.05138175189495087
Time: prepare 0.2692    bound 0.9453    transfer 0.0775    finalize 0.3308    func 1.7292    
Accumulated time: func 5.0104    prepare 0.6725    bound 3.1584    transfer 0.1697    finalize 0.4494    
all_split False
======================Cut inference begins======================
max lb tensor(0.00868225) min lb tensor(-0.05137573)
Number of Verified Splits: 1419 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 154.
#cuts 4-6: 30
#cuts 7-9: 106
#cuts 10-12: 18
#cuts >= 20: 0
BICCOS time: 0.8185372352600098 
BICCOS Cumulative time: 2.0496418476104736
Preprocessing time: 0.4931926727294922 Inference time: 0.25644803047180176 Add cuts time: 0.05958676338195801 Cut analysis time: 0.009309768676757812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05138 (12), -0.05044 (12), -0.04968 (12), -0.04900 (12), -0.04874 (12), -0.04853 (12), -0.04842 (12), -0.04834 (12), -0.04793 (12), -0.04787 (12), -0.04763 (12), -0.04752 (12), -0.04749 (12), -0.04748 (12), -0.04734 (12), -0.04729 (12), -0.04698 (12), -0.04684 (12), -0.04673 (12), -0.04669 (12), 
Length of domains: 15386
Time: pickout 0.0929    decision 0.6734    set_bounds 0.9396    solve 1.7321    add 0.1223    
Accumulated time: pickout 0.2206    decision 2.0821    set_bounds 2.1048    solve 5.0224    add 0.9151    
Current (lb-rhs): -0.05137573182582855
34164 domains visited
current_vram/total_varm: 25.5GB/99.9GB, batch_size increase to 16384
Cumulative time: 12.694631814956665

BaB round 9
batch: 15386
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 554] [/input-8, 1470] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 554] [/input-8, 539] [/input-8, 1470] [/input, 3164] [/input-8, 554] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05037301033735275
10 lb beta sum: 0.00018565737991593778, worst -0.05036607384681702
Time: prepare 0.5068    bound 2.5460    transfer 0.1569    finalize 0.5166    func 3.9265    
Accumulated time: func 8.9369    prepare 1.1796    bound 5.7044    transfer 0.3265    finalize 0.9659    
all_split False
======================Cut inference begins======================
max lb tensor(0.01472993) min lb tensor(-0.05036232)
Number of Verified Splits: 2406 of 30772
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 169.
#cuts 4-6: 27
#cuts 7-9: 116
#cuts 10-12: 26
#cuts >= 20: 0
BICCOS time: 1.9132153987884521 
BICCOS Cumulative time: 3.962857246398926
Preprocessing time: 0.9382798671722412 Inference time: 0.8743135929107666 Add cuts time: 0.09050607681274414 Cut analysis time: 0.010115861892700195
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05036 (13), -0.04946 (13), -0.04877 (13), -0.04855 (13), -0.04791 (13), -0.04782 (13), -0.04764 (13), -0.04758 (13), -0.04745 (13), -0.04740 (13), -0.04732 (13), -0.04688 (13), -0.04686 (13), -0.04663 (13), -0.04660 (13), -0.04652 (13), -0.04649 (13), -0.04643 (13), -0.04642 (13), -0.04633 (13), 
Length of domains: 28366
Time: pickout 0.2493    decision 1.1390    set_bounds 1.9359    solve 3.9323    add 0.1730    
Accumulated time: pickout 0.4699    decision 3.2211    set_bounds 4.0407    solve 8.9547    add 1.0880    
Current (lb-rhs): -0.05036231875419617
62530 domains visited
Cumulative time: 22.101091623306274

BaB round 10
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1446] [/input-8, 949] [/input-8, 1251] [/input-8, 340] [/input-8, 1446] [/input-8, 1470] [/input-8, 1446] [/input-8, 949] [/input-8, 949] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04947638511657715
10 lb beta sum: 0.00019103041267953813, worst -0.04947154223918915
Time: prepare 0.5576    bound 2.7290    transfer 0.1653    finalize 0.2282    func 3.8987    
Accumulated time: func 12.8355    prepare 1.7376    bound 8.4335    transfer 0.4918    finalize 1.1942    
all_split False
======================Cut inference begins======================
max lb tensor(0.00546856) min lb tensor(-0.04946794)
Number of Verified Splits: 2493 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 195.
#cuts 4-6: 39
#cuts 7-9: 126
#cuts 10-12: 30
#cuts >= 20: 0
BICCOS time: 2.1457672119140625 
BICCOS Cumulative time: 6.108624458312988
Preprocessing time: 1.0096442699432373 Inference time: 1.0256788730621338 Add cuts time: 0.09898138046264648 Cut analysis time: 0.011462688446044922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04947 (14), -0.04897 (14), -0.04856 (14), -0.04806 (14), -0.04787 (14), -0.04765 (14), -0.04758 (13), -0.04737 (14), -0.04715 (14), -0.04701 (14), -0.04693 (14), -0.04674 (14), -0.04663 (13), -0.04651 (14), -0.04650 (14), -0.04650 (14), -0.04642 (14), -0.04642 (14), -0.04624 (14), -0.04600 (14), 
Length of domains: 42257
Time: pickout 0.1906    decision 1.6280    set_bounds 2.3567    solve 3.9072    add 0.2247    
Accumulated time: pickout 0.6606    decision 4.8492    set_bounds 6.3974    solve 12.8619    add 1.3127    
Current (lb-rhs): -0.04946793615818024
92805 domains visited
current_vram/total_varm: 41.4GB/99.9GB, batch_size increase to 32768
Cumulative time: 32.63166427612305

BaB round 11
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 949] [/input-8, 1251] [/input-8, 1470] [/input-8, 1251] [/input-8, 1260] [/input-8, 1251] [/input-8, 1260] [/input-8, 539] [/input-8, 949] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04863344132900238
10 lb beta sum: 0.0002348592970520258, worst -0.04862222075462341
Time: prepare 1.0887    bound 10.6222    transfer 0.4173    finalize 0.5128    func 13.0742    
Accumulated time: func 25.9098    prepare 2.8268    bound 19.0557    transfer 0.9091    finalize 1.7070    
all_split False
======================Cut inference begins======================
max lb tensor(0.00629309) min lb tensor(-0.04861675)
Number of Verified Splits: 6165 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 211.
#cuts 4-6: 42
#cuts 7-9: 127
#cuts 10-12: 42
#cuts >= 20: 0
BICCOS time: 3.506002426147461 
BICCOS Cumulative time: 9.61462688446045
Preprocessing time: 2.0596814155578613 Inference time: 1.2274863719940186 Add cuts time: 0.20596718788146973 Cut analysis time: 0.012867450714111328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04862 (15), -0.04816 (15), -0.04813 (15), -0.04771 (15), -0.04764 (15), -0.04737 (14), -0.04726 (15), -0.04723 (15), -0.04702 (15), -0.04681 (15), -0.04674 (15), -0.04668 (14), -0.04658 (15), -0.04642 (14), -0.04633 (15), -0.04633 (15), -0.04618 (15), -0.04618 (14), -0.04608 (15), -0.04599 (14), 
Length of domains: 68860
Time: pickout 0.3852    decision 3.7883    set_bounds 4.2182    solve 13.7566    add 0.3679    
Accumulated time: pickout 1.0458    decision 8.6374    set_bounds 10.6156    solve 26.6185    add 1.6806    
Current (lb-rhs): -0.04861675202846527
152176 domains visited
Cumulative time: 58.83888602256775

BaB round 12
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 554] [/input-8, 1260] [/input-8, 933] [/input-8, 933] [/input, 3164] [/input-8, 1251] [/input-8, 949] [/input-8, 1260] [/input-8, 933] [/input-8, 933] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.047705210745334625
10 lb beta sum: 0.00028064800426363945, worst -0.047701314091682434
Time: prepare 1.1479    bound 10.6586    transfer 0.4147    finalize 0.5493    func 13.2054    
Accumulated time: func 39.1152    prepare 3.9752    bound 29.7142    transfer 1.3238    finalize 2.2563    
all_split False
======================Cut inference begins======================
max lb tensor(0.01123860) min lb tensor(-0.04769870)
Number of Verified Splits: 6571 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 219.
#cuts 4-6: 44
#cuts 7-9: 120
#cuts 10-12: 55
#cuts >= 20: 0
BICCOS time: 4.783866882324219 
BICCOS Cumulative time: 14.398493766784668
Preprocessing time: 2.188805103302002 Inference time: 2.3505094051361084 Add cuts time: 0.2311098575592041 Cut analysis time: 0.013442516326904297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04816 (15), -0.04813 (15), -0.04770 (16), -0.04764 (15), -0.04726 (15), -0.04723 (15), -0.04713 (16), -0.04702 (15), -0.04674 (15), -0.04672 (16), -0.04658 (15), -0.04653 (15), -0.04647 (16), -0.04633 (15), -0.04633 (15), -0.04618 (14), -0.04608 (15), -0.04605 (15), -0.04590 (16), -0.04585 (15), 
Length of domains: 95057
Time: pickout 0.4262    decision 3.5470    set_bounds 4.7029    solve 13.2202    add 0.3879    
Accumulated time: pickout 1.4719    decision 12.1845    set_bounds 15.3185    solve 39.8387    add 2.0685    
Current (lb-rhs): -0.04816240817308426
211141 domains visited
Cumulative time: 86.13660311698914

BaB round 13
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 933] [/input-8, 539] [/input-8, 933] [/input-8, 539] [/input-8, 1260] [/input-8, 340] [/input-8, 540] [/input-8, 933] [/input, 3189] [/input-8, 933] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04725150763988495
10 lb beta sum: 0.00033616763539612293, worst -0.047252342104911804
Time: prepare 1.1616    bound 10.6802    transfer 0.4226    finalize 0.5393    func 13.2410    
Accumulated time: func 52.3562    prepare 5.1372    bound 40.3944    transfer 1.7464    finalize 2.7956    
all_split False
======================Cut inference begins======================
max lb tensor(0.01305456) min lb tensor(-0.04723792)
Number of Verified Splits: 7044 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 255.
#cuts 4-6: 46
#cuts 7-9: 136
#cuts 10-12: 73
#cuts >= 20: 0
BICCOS time: 5.372536897659302 
BICCOS Cumulative time: 19.77103066444397
Preprocessing time: 2.1883785724639893 Inference time: 1.4566385746002197 Add cuts time: 1.7111527919769287 Cut analysis time: 0.016366958618164062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04770 (16), -0.04724 (16), -0.04721 (16), -0.04713 (16), -0.04672 (16), -0.04672 (16), -0.04668 (16), -0.04664 (16), -0.04653 (15), -0.04647 (16), -0.04625 (16), -0.04623 (16), -0.04616 (16), -0.04610 (16), -0.04605 (15), -0.04600 (16), -0.04598 (16), -0.04590 (16), -0.04585 (15), -0.04581 (15), 
Length of domains: 120781
Time: pickout 0.4087    decision 3.3250    set_bounds 5.3232    solve 13.2524    add 0.1849    
Accumulated time: pickout 1.8806    decision 15.5095    set_bounds 20.6418    solve 53.0911    add 2.2535    
Current (lb-rhs): -0.047698698937892914
269633 domains visited
Cumulative time: 114.2058310508728

BaB round 14
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 933] [/input-8, 1251] [/input-8, 933] [/input-8, 949] [/input-8, 933] [/input-8, 949] [/input-8, 1251] [/input-8, 933] [/input-8, 949] [/input-8, 933] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04703757166862488
10 lb beta sum: 0.00030872272327542305, worst -0.04703618586063385
Time: prepare 1.1759    bound 10.7624    transfer 0.4285    finalize 0.5559    func 13.3681    
Accumulated time: func 65.7244    prepare 6.3135    bound 51.1569    transfer 2.1749    finalize 3.3514    
all_split False
======================Cut inference begins======================
max lb tensor(0.01354024) min lb tensor(-0.04703446)
Number of Verified Splits: 6261 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 241.
#cuts 4-6: 46
#cuts 7-9: 131
#cuts 10-12: 63
#cuts 13-15: 1
#cuts >= 20: 0
BICCOS time: 5.428687810897827 
BICCOS Cumulative time: 25.199718475341797
Preprocessing time: 2.2092397212982178 Inference time: 2.832667350769043 Add cuts time: 0.3717679977416992 Cut analysis time: 0.015012741088867188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04724 (16), -0.04721 (16), -0.04713 (16), -0.04703 (17), -0.04672 (16), -0.04668 (16), -0.04664 (16), -0.04647 (16), -0.04625 (16), -0.04623 (16), -0.04616 (16), -0.04610 (16), -0.04606 (17), -0.04605 (15), -0.04600 (16), -0.04598 (16), -0.04573 (16), -0.04571 (17), -0.04565 (16), -0.04561 (16), 
Length of domains: 147288
Time: pickout 0.4259    decision 3.3174    set_bounds 4.6305    solve 13.3878    add 0.2060    
Accumulated time: pickout 2.3065    decision 18.8269    set_bounds 25.2723    solve 66.4789    add 2.4595    
Current (lb-rhs): -0.04723791778087616
328908 domains visited
Cumulative time: 141.8069748878479

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 539] [/input-8, 340] [/input-8, 340] [/input-8, 933] [/input-8, 1251] [/input-8, 340] [/input-8, 340] [/input-8, 340] [/input-8, 1251] [/input-8, 340] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04655229300260544
10 lb beta sum: 0.00028592697344720364, worst -0.04662809520959854
Time: prepare 1.1696    bound 10.7371    transfer 0.4449    finalize 0.5714    func 13.3724    
Accumulated time: func 79.0968    prepare 7.4835    bound 61.8939    transfer 2.6198    finalize 3.9228    
all_split False
======================Cut inference begins======================
max lb tensor(0.01271984) min lb tensor(-0.04655062)
Number of Verified Splits: 5979 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 264.
#cuts 4-6: 50
#cuts 7-9: 140
#cuts 10-12: 74
#cuts >= 20: 0
BICCOS time: 5.745601415634155 
BICCOS Cumulative time: 30.945319890975952
Preprocessing time: 2.3399813175201416 Inference time: 3.0157458782196045 Add cuts time: 0.37312817573547363 Cut analysis time: 0.016746044158935547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04724 (16), -0.04703 (17), -0.04672 (16), -0.04668 (16), -0.04664 (16), -0.04655 (17), -0.04647 (17), -0.04625 (16), -0.04616 (16), -0.04606 (17), -0.04600 (16), -0.04598 (16), -0.04580 (17), -0.04573 (16), -0.04571 (17), -0.04565 (16), -0.04561 (16), -0.04557 (17), -0.04552 (16), -0.04548 (16), 
Length of domains: 174077
Time: pickout 0.4344    decision 3.3208    set_bounds 4.9147    solve 13.3849    add 0.1853    
Accumulated time: pickout 2.7409    decision 22.1477    set_bounds 30.1870    solve 79.8638    add 2.6448    
Current (lb-rhs): -0.04723791778087616
388465 domains visited
Cumulative time: 169.98984479904175

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1260] [/input-8, 539] [/input-8, 340] [/input-8, 540] [/input, 3164] [/input-8, 554] [/input-8, 1260] [/input-8, 1251] [/input-8, 340] [/input-8, 340] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04661305993795395
10 lb beta sum: 0.0002804575487971306, worst -0.04661247134208679
Time: prepare 1.1845    bound 10.8479    transfer 0.4773    finalize 0.6185    func 13.5768    
Accumulated time: func 92.6736    prepare 8.6685    bound 72.7419    transfer 3.0971    finalize 4.5413    
all_split False
======================Cut inference begins======================
max lb tensor(0.01344076) min lb tensor(-0.04660958)
Number of Verified Splits: 5679 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 260.
#cuts 4-6: 47
#cuts 7-9: 147
#cuts 10-12: 66
#cuts >= 20: 0
BICCOS time: 3.617185354232788 
BICCOS Cumulative time: 34.56250524520874
Preprocessing time: 2.1550354957580566 Inference time: 1.1956698894500732 Add cuts time: 0.2503089904785156 Cut analysis time: 0.016170978546142578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04703 (17), -0.04668 (16), -0.04661 (17), -0.04655 (17), -0.04647 (17), -0.04616 (16), -0.04609 (17), -0.04606 (17), -0.04600 (16), -0.04598 (17), -0.04580 (17), -0.04571 (17), -0.04563 (17), -0.04561 (16), -0.04557 (17), -0.04548 (16), -0.04545 (17), -0.04532 (17), -0.04523 (17), -0.04522 (17), 
Length of domains: 201166
Time: pickout 0.4383    decision 3.3163    set_bounds 5.2294    solve 13.5963    add 0.2272    
Accumulated time: pickout 3.1792    decision 25.4640    set_bounds 35.4164    solve 93.4601    add 2.8720    
Current (lb-rhs): -0.047034457325935364
448322 domains visited
Cumulative time: 196.61319756507874

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 340] [/input-8, 1260] [/input-8, 340] [/input-8, 340] [/input-8, 340] [/input-8, 340] [/input-8, 933] [/input-8, 949] [/input-8, 933] [/input-8, 933] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04606517404317856
10 lb beta sum: 0.0002783756353892386, worst -0.046062372624874115
Time: prepare 1.1378    bound 10.8513    transfer 0.5285    finalize 0.6001    func 13.5547    
Accumulated time: func 106.2283    prepare 9.8068    bound 83.5932    transfer 3.6257    finalize 5.1414    
all_split False
======================Cut inference begins======================
max lb tensor(0.01235004) min lb tensor(-0.04605899)
Number of Verified Splits: 5467 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 292.
#cuts 4-6: 48
#cuts 7-9: 168
#cuts 10-12: 76
#cuts >= 20: 0
BICCOS time: 3.6196231842041016 
BICCOS Cumulative time: 38.18212842941284
Preprocessing time: 2.169123649597168 Inference time: 1.156477451324463 Add cuts time: 0.27568507194519043 Cut analysis time: 0.018337011337280273
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04703 (17), -0.04661 (17), -0.04655 (17), -0.04647 (17), -0.04609 (17), -0.04606 (17), -0.04606 (17), -0.04598 (17), -0.04580 (17), -0.04571 (17), -0.04563 (17), -0.04561 (16), -0.04557 (17), -0.04552 (17), -0.04545 (17), -0.04538 (17), -0.04532 (17), -0.04523 (17), -0.04522 (17), -0.04522 (17), 
Length of domains: 228467
Time: pickout 0.4435    decision 5.2276    set_bounds 5.7083    solve 13.5686    add 0.1825    
Accumulated time: pickout 3.6227    decision 30.6917    set_bounds 41.1247    solve 107.0287    add 3.0545    
Current (lb-rhs): -0.047034457325935364
508391 domains visited
Time out!!!!!!!!
Result: unknown in 229.1438 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 68, vnnlib ID: 68 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.71828079, -12.07358360,  -7.51085901,  -7.73513126,  -5.85087204,
          -7.76494551,  -8.30688477,  -4.66740465, -11.87115002, -11.40974522]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [561]; unstable size 561; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 561] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 561] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 561] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 170] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.23245573, 6.33307886, 2.35018468, 2.53250027, 0.82198763, 2.56909752,
         2.92734671, 6.26306963, 5.81518650]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0677 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 69, vnnlib ID: 69 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.44977188,  -9.06816578,  -8.76676846, -10.00036716,  -8.16498661,
         -10.20727444, -10.19177628,  -9.06856728,  -5.60935688,  -8.05991840]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [446]; unstable size 446; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 151, 1, 446] with unstable size 150 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 446] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 446] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [150]; unstable size 150; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 150] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 150] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.39624691, 2.77556849, 2.57724142, 3.80849981, 2.01538920, 4.00958443,
         3.97526121, 2.81353450, 1.83315969]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0683 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 70, vnnlib ID: 70 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.04652691, -11.10261822,  -7.86249161,  -8.90385628,  -7.35591507,
          -8.96246243,  -6.67423820,  -9.53345776, -12.04738331, -11.83759594]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [415]; unstable size 415; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 415] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 415] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 415] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 139] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.83799815, 3.77172470, 0.92177463, 1.93019605, 0.40763223, 1.98125410,
         2.40290666, 4.67680788, 4.50188541]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0623 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 71, vnnlib ID: 71 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.33996439, -6.41871643, -5.27160645, -5.78144073, -5.19606686,
         -5.95623350, -5.03869438, -5.45932245, -5.23290539, -6.04166842]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [442]; unstable size 442; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 147, 1, 442] with unstable size 146 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 442] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 442] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 146] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.31949711, 1.40748429, 1.74333405, 1.23676848, 1.91310000, 1.10932422,
         1.36478341, 1.55591130, 2.01130915]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0695 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 72, vnnlib ID: 72 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.12939644, -9.72904682, -5.54302311, -6.04563618, -5.96231461,
         -6.23193979, -5.71355343, -6.85170698, -7.76404381, -8.90234089]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [423]; unstable size 423; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 202, 1, 423] with unstable size 201 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 423] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 423] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [201]; unstable size 201; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 201] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 201] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.53611326,  2.83135986, -0.80475771, -0.42034248,  0.15137629,
         -0.61510229,  0.28265750,  0.83452523,  1.97465467]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.12939644, -9.72904682, -5.54302311, -6.04563618, -5.96231461,
         -6.23193979, -5.71355343, -6.85170698, -7.76404381, -8.90234089]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.12939644, -9.72904778, -5.54302359, -6.04563808, -5.96231556,
          -6.23194075, -5.71355438, -6.85170746, -7.76404476, -8.90234089],
         [-6.12939644, -9.72904778, -5.54302359, -6.04563808, -5.96231556,
          -6.23194075, -5.71355438, -6.85170746, -7.76404476, -8.90234089]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.08375835, -0.50261450, -0.08332253, -0.33208370]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]],


         [[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]],


         [[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]],


         [[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0802 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 73, vnnlib ID: 73 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.04236412, -15.83466625, -11.57055759, -12.04814053, -11.33596802,
         -12.07632923, -10.29791260, -13.00263977, -15.47680664, -15.46460438]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [504]; unstable size 504; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 504] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 504] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 504] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 239] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.98187876, 4.42113018, 0.88485718, 1.34177840, 0.68826008, 1.36417842,
         2.12291312, 4.03281021, 4.06385612]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0652 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 74, vnnlib ID: 74 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.82596016, -8.01462746, -5.61366749, -5.94512081, -4.99872208,
         -6.00526476, -5.77766132, -3.03901243, -9.93118095, -6.94092846]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [450]; unstable size 450; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 450] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 450] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 450] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 141] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.08748579, 3.92925000, 2.12131405, 2.35519123, 1.63135076, 2.42033052,
         2.09290051, 5.92348003, 2.98009181]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0664 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 75, vnnlib ID: 75 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.71775055, -8.71694279, -8.45971107, -9.68828869, -8.52095413,
         -9.86249352, -9.58036518, -8.48355675, -7.19637108, -7.55859327]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [433]; unstable size 433; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 433] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 433] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 433] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 170] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.48584545, 1.32305884, 2.39883709, 1.24146891, 2.56375098, 2.28119993,
         1.11799204, 0.07952964, 0.28410673]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0680 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 76, vnnlib ID: 76 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.67823887, -8.79199886, -4.26914644, -4.69909000, -4.87025404,
         -4.79431295, -5.06131744, -5.80675077, -8.86075783, -8.01763248]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [469]; unstable size 469; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 469] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 469] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 469] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 153] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.32742643,  3.28234124, -0.82947564, -0.11151652, -0.27848172,
         -0.02716166,  0.58209592,  3.50851631,  2.55930901]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.67823887, -8.79199886, -4.26914644, -4.69909000, -4.87025404,
         -4.79431295, -5.06131744, -5.80675077, -8.86075783, -8.01763248]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.67823887, -8.79199982, -4.26914644, -4.69909000, -4.87025356,
          -4.79431295, -5.06131649, -5.80675030, -8.86075783, -8.01763248],
         [-6.67823887, -8.79199982, -4.26914644, -4.69909000, -4.87025356,
          -4.79431295, -5.06131649, -5.80675030, -8.86075783, -8.01763248]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.52516651, -0.09522295,  0.07594061,  0.26700354]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]],


         [[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]],


         [[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]],


         [[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0742 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 77, vnnlib ID: 77 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.94152546,  -9.43132877, -11.42302418, -12.00805473, -11.48972893,
         -12.21064949, -12.50059700, -12.93048859,  -7.66620636,  -8.89758873]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [513]; unstable size 513; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 162, 1, 513] with unstable size 161 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 513] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 513] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [161]; unstable size 161; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 161] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 161] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.39024830,  0.27186391,  1.95888186,  2.51927996,  2.04223776,
          2.70385861,  2.90191841,  3.45087051, -1.63618660]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.94152546,  -9.43132877, -11.42302418, -12.00805473, -11.48972893,
         -12.21064949, -12.50059700, -12.93048859,  -7.66620636,  -8.89758873]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.94152737,  -9.43132782, -11.42302322, -12.00805569, -11.48972893,
          -12.21065044, -12.50059700, -12.93048954,  -7.66620636,  -8.89758873],
         [ -8.94152737,  -9.43132782, -11.42302322, -12.00805569, -11.48972893,
          -12.21065044, -12.50059700, -12.93048954,  -7.66620636,  -8.89758873]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.04393864, -1.23138237]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.32222211e+00, -1.32222211e+00, -1.29047608e+00,  ...,
            -1.33809519e+00, -1.33809519e+00, -1.33809519e+00],
           [-1.27460313e+00, -1.27460313e+00, -1.25873005e+00,  ...,
            -1.29047608e+00, -1.29047608e+00, -1.29047608e+00],
           [-1.22698402e+00, -1.24285710e+00, -1.24285710e+00,  ...,
            -1.25873005e+00, -1.25873005e+00, -1.27460313e+00],
           ...,
           [ 9.04762819e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.69841349e-01,  1.06349289e-01,  7.46032670e-02],
           [ 7.46032670e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.06349289e-01,  7.46032670e-02, -5.23808524e-02],
           [-4.76180762e-03,  1.11112073e-02,  4.28572372e-02,  ...,
            -4.76180762e-03, -3.65078375e-02, -1.47618949e-01]],

          [[-2.41545767e-01, -2.73751885e-01, -2.41545767e-01,  ...,
            -2.89854944e-01, -2.89854944e-01, -2.89854944e-01],
           [-1.93236589e-01, -2.09339648e-01, -1.93236589e-01,  ...,
            -2.25442708e-01, -2.25442708e-01, -2.25442708e-01],
           [-1.61030471e-01, -1.93236589e-01, -1.61030471e-01,  ...,
            -2.09339648e-01, -2.09339648e-01, -2.09339648e-01],
           ...,
           [ 1.44927651e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             8.05154145e-02,  3.22062373e-02,  3.22062373e-02],
           [ 1.28824592e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             1.61031820e-02,  1.22934580e-07, -3.22059989e-02],
           [ 3.22062373e-02,  4.83092964e-02,  8.05154145e-02,  ...,
            -4.83090580e-02, -6.44121096e-02, -1.12721294e-01]],

          [[ 7.21139610e-01,  6.91154599e-01,  7.06147075e-01,  ...,
             6.76162124e-01,  6.76162124e-01,  6.76162124e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.81109631e-01,  ...,
             7.36132085e-01,  7.36132085e-01,  7.36132085e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.66117096e-01,  ...,
             7.51124620e-01,  7.36132085e-01,  7.36132085e-01],
           ...,
           [ 6.14694245e-02,  3.14844176e-02,  6.14694245e-02,  ...,
             1.64919142e-02, -1.34930937e-02,  1.49940979e-03],
           [ 4.64769229e-02,  3.14844176e-02,  6.14694245e-02,  ...,
            -2.84855980e-02, -4.34781015e-02, -7.34631121e-02],
           [-2.84855980e-02, -1.34930937e-02,  1.64919142e-02,  ...,
            -8.84556174e-02, -1.18440613e-01, -1.63418129e-01]]],


         [[[-1.32222211e+00, -1.32222211e+00, -1.29047608e+00,  ...,
            -1.33809519e+00, -1.33809519e+00, -1.33809519e+00],
           [-1.27460313e+00, -1.27460313e+00, -1.25873005e+00,  ...,
            -1.29047608e+00, -1.29047608e+00, -1.29047608e+00],
           [-1.22698402e+00, -1.24285710e+00, -1.24285710e+00,  ...,
            -1.25873005e+00, -1.25873005e+00, -1.27460313e+00],
           ...,
           [ 9.04762819e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.69841349e-01,  1.06349289e-01,  7.46032670e-02],
           [ 7.46032670e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.06349289e-01,  7.46032670e-02, -5.23808524e-02],
           [-4.76180762e-03,  1.11112073e-02,  4.28572372e-02,  ...,
            -4.76180762e-03, -3.65078375e-02, -1.47618949e-01]],

          [[-2.41545767e-01, -2.73751885e-01, -2.41545767e-01,  ...,
            -2.89854944e-01, -2.89854944e-01, -2.89854944e-01],
           [-1.93236589e-01, -2.09339648e-01, -1.93236589e-01,  ...,
            -2.25442708e-01, -2.25442708e-01, -2.25442708e-01],
           [-1.61030471e-01, -1.93236589e-01, -1.61030471e-01,  ...,
            -2.09339648e-01, -2.09339648e-01, -2.09339648e-01],
           ...,
           [ 1.44927651e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             8.05154145e-02,  3.22062373e-02,  3.22062373e-02],
           [ 1.28824592e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             1.61031820e-02,  1.22934580e-07, -3.22059989e-02],
           [ 3.22062373e-02,  4.83092964e-02,  8.05154145e-02,  ...,
            -4.83090580e-02, -6.44121096e-02, -1.12721294e-01]],

          [[ 7.21139610e-01,  6.91154599e-01,  7.06147075e-01,  ...,
             6.76162124e-01,  6.76162124e-01,  6.76162124e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.81109631e-01,  ...,
             7.36132085e-01,  7.36132085e-01,  7.36132085e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.66117096e-01,  ...,
             7.51124620e-01,  7.36132085e-01,  7.36132085e-01],
           ...,
           [ 6.14694245e-02,  3.14844176e-02,  6.14694245e-02,  ...,
             1.64919142e-02, -1.34930937e-02,  1.49940979e-03],
           [ 4.64769229e-02,  3.14844176e-02,  6.14694245e-02,  ...,
            -2.84855980e-02, -4.34781015e-02, -7.34631121e-02],
           [-2.84855980e-02, -1.34930937e-02,  1.64919142e-02,  ...,
            -8.84556174e-02, -1.18440613e-01, -1.63418129e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0736 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 78, vnnlib ID: 78 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.31059456, -9.19869709, -6.36061764, -5.86587429, -6.10512066,
         -5.87761021, -5.44350815, -7.33536816, -9.65457726, -9.34368134]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [529]; unstable size 529; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 279, 1, 529] with unstable size 278 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 529] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 529] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [278]; unstable size 278; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 278] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 278] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.59141159,  2.18968081,  0.02786541, -0.24016404, -0.01105538,
         -0.84799993,  0.91358447,  2.79599810,  2.43839073]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.31059456, -9.19869709, -6.36061764, -5.86587429, -6.10512066,
         -5.87761021, -5.44350815, -7.33536816, -9.65457726, -9.34368134]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.31059361, -9.19869709, -6.36061716, -5.86587334, -6.10511971,
          -5.87760925, -5.44350719, -7.33536768, -9.65457630, -9.34368038],
         [-8.31059361, -9.19869709, -6.36061716, -5.86587334, -6.10511971,
          -5.87760925, -5.44350719, -7.33536768, -9.65457630, -9.34368038]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.23924637,  0.01173592, -0.42236614]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0753 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 79, vnnlib ID: 79 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.56623745, -11.41576767, -10.07493591,  -9.61873627,  -8.49861526,
          -9.59471893, -10.02411652,  -5.97250652, -15.06334496, -10.70611000]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [380]; unstable size 380; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 380] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 380] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 380] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 170] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.77624750, 4.21952963, 3.57391572, 2.98815560, 2.16194510, 2.97055125,
         3.34188151, 7.80459976, 3.62507820]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0656 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 80, vnnlib ID: 80 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965576,
         -7.48542309, -5.95269966, -6.55542850, -6.95760822, -7.28021479]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [718]; unstable size 718; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 226, 1, 718] with unstable size 225 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 718] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 718] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [225]; unstable size 225; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 225] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 225] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.73039556, -0.79011083,  0.57272565, -1.24159360,  0.72255588,
         -0.83794022, -0.30544654,  0.50340199,  0.65051723]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965576,
         -7.48542309, -5.95269966, -6.55542850, -6.95760822, -7.28021479]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965672,
          -7.48542261, -5.95269966, -6.55542803, -6.95760727, -7.28021431],
         [-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965672,
          -7.48542261, -5.95269966, -6.55542803, -6.95760727, -7.28021431]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.17822742, -0.57796001, -0.08491707,  0.51781130]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0766 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 81, vnnlib ID: 81 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.97952795, -8.99672222, -2.56834173, -6.00308132, -2.85744190,
         -6.12038279, -4.47296047, -6.33899212, -7.67273140, -9.32237816]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [671]; unstable size 671; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 139, 1, 671] with unstable size 138 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 671] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 671] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [138]; unstable size 138; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 138] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.03369808, 5.73617077, 3.16968560, 0.11967242, 3.28296471, 1.49780846,
         3.40163088, 4.61310005, 6.06763220]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0658 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 82, vnnlib ID: 82 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.72943306, -13.36404133, -10.46452236, -10.18775558, -10.67775059,
         -10.31442547, -10.42091751, -12.09385109, -14.04162884, -12.43282795]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [519]; unstable size 519; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 208, 1, 519] with unstable size 207 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 519] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 519] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [207]; unstable size 207; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 207] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 207] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.77904427,  2.09425735, -0.17746937, -0.14749081, -0.04247403,
         -0.25705311,  1.25096059,  2.87834263,  1.30093050]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.72943306, -13.36404133, -10.46452236, -10.18775558, -10.67775059,
         -10.31442547, -10.42091751, -12.09385109, -14.04162884, -12.43282795]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.72943401, -13.36404228, -10.46452332, -10.18775558, -10.67775154,
          -10.31442547, -10.42091846, -12.09385109, -14.04162884, -12.43282604],
         [-12.72943401, -13.36404228, -10.46452332, -10.18775558, -10.67775154,
          -10.31442547, -10.42091846, -12.09385109, -14.04162884, -12.43282604]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.15009785, -0.12666988,  0.36332607,  0.10649300]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0768 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 83, vnnlib ID: 83 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.06531239,  -7.74203110,  -9.88070679,  -9.82949257,  -9.60023689,
          -9.98339939, -10.37213230,  -9.42480564,  -7.49855232,  -6.63923311]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [475]; unstable size 475; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 176, 1, 475] with unstable size 175 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 475] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 475] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [175]; unstable size 175; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 175] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 175] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.84191799, 0.84316367, 2.53841209, 2.50969028, 2.26216412, 2.65042353,
         3.05267286, 2.06743336, 0.15342236]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0623 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 84, vnnlib ID: 84 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.73141861, -11.30915737,  -4.88030291,  -7.12666321,  -4.79732800,
          -7.23894691,  -4.88668823,  -8.34137917, -11.50362206, -11.30148792]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [430]; unstable size 430; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 148, 1, 430] with unstable size 147 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 430] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 430] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [147]; unstable size 147; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 147] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.51234388,  5.89082623, -0.09712331,  2.02813911,  2.13893557,
         -0.29849362,  3.28444505,  6.09165287,  5.92712975]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.73141861, -11.30915737,  -4.88030291,  -7.12666321,  -4.79732800,
          -7.23894691,  -4.88668823,  -8.34137917, -11.50362206, -11.30148792]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.57346249, -11.22899342,  -4.74797535,  -7.02396488,  -4.79112053,
           -7.14028025,  -4.77940559,  -8.43676853, -11.36150742, -11.23217297],
         [ -8.57346249, -11.22899342,  -4.74797535,  -7.02396488,  -4.79112053,
           -7.14028025,  -4.77940559,  -8.43676853, -11.36150742, -11.23217297]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04314518, -0.01171494]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0153 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0816 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 85, vnnlib ID: 85 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.23663616,  -7.30285454, -10.59052181, -11.18651009,  -9.79314327,
         -11.32224941, -10.81732941, -10.63050747,  -8.28581619,  -8.59702969]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [473]; unstable size 473; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 473] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 473] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 473] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 188] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.20088077, 2.32582474, 2.93001986, 1.51514053, 3.04989481, 2.44549131,
         2.25616670, 0.37113976, 1.01464093]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0621 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 86, vnnlib ID: 86 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.20327091, -13.29206181, -10.09174442, -10.56737804, -10.67555809,
         -10.55320644, -10.67248249, -11.32285500, -14.20694542, -13.81692600]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 540] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 540] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 159] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.68249488, 2.60424328, 0.24534428, 0.40565336, 0.23199639, 0.28501642,
         0.98760176, 3.62160587, 3.12635517]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0637 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 87, vnnlib ID: 87 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.88856792, -8.49503231, -5.36369038, -4.94106483, -4.84540939,
         -4.91523314, -4.41490841, -5.03733397, -9.81567383, -8.20178318]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [406]; unstable size 406; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 406] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 406] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 406] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 177] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.21111012,  2.55126286, -0.03250980, -0.36227441, -0.47769618,
         -0.38185108, -1.15160513,  3.89880347,  2.32914209]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.88856792, -8.49503231, -5.36369038, -4.94106483, -4.84540939,
         -4.91523314, -4.41490841, -5.03733397, -9.81567383, -8.20178318]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.88856697, -8.49503231, -5.36369038, -4.94106483, -4.84540987,
          -4.91523314, -4.41490841, -5.03733492, -9.81567383, -8.20178318],
         [-8.88856697, -8.49503231, -5.36369038, -4.94106483, -4.84540987,
          -4.91523314, -4.41490841, -5.03733492, -9.81567383, -8.20178318]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.32635546, -0.09627008, -0.19192505, -0.12210178, -0.62242651]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0757 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 88, vnnlib ID: 88 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.65746784, -6.18078041, -1.80823123, -1.86352706, -2.33689523,
         -1.93374062, -3.13896918, -1.17628169, -6.39098358, -3.11623693]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [313]; unstable size 313; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 117, 1, 313] with unstable size 116 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 313] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 313] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [116]; unstable size 116; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 116] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 116] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.51907635,  3.67257857, -0.19120371,  0.28516850, -0.12094021,
          0.99198157, -0.98088264,  3.95130277,  0.65798187]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.65746784, -6.18078041, -1.80823123, -1.86352706, -2.33689523,
         -1.93374062, -3.13896918, -1.17628169, -6.39098358, -3.11623693]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.65746784, -6.18078041, -1.80823135, -1.86352754, -2.33689499,
          -1.93374085, -3.13896894, -1.17628217, -6.39098454, -3.11623693],
         [-3.65746784, -6.18078041, -1.80823135, -1.86352754, -2.33689499,
          -1.93374085, -3.13896894, -1.17628217, -6.39098454, -3.11623693]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.05529618,  0.12550950, -0.63194919]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0417 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 89, vnnlib ID: 89 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.67684555, -4.17685509, -7.04651976, -7.85120487, -7.47941399,
         -7.95128965, -7.51899147, -8.40921116, -3.84111595, -5.26576757]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [462]; unstable size 462; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 180, 1, 462] with unstable size 179 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 462] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 462] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [179]; unstable size 179; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 179] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 179] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.67029381,  1.91223335,  2.76860046,  2.38123560,  2.85544062,
          2.41773987,  3.34567499, -0.93968201,  0.84438074]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.67684555, -4.17685509, -7.04651976, -7.85120487, -7.47941399,
         -7.95128965, -7.51899147, -8.40921116, -3.84111595, -5.26576757]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.67684555, -4.17685509, -7.04651976, -7.85120487, -7.47941399,
          -7.95128965, -7.51899147, -8.40921116, -3.84111595, -5.26576757]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.33573914]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.73492062, -1.67142856, -1.65555561,  ..., -0.27460307,
            -0.32222211, -0.24285704],
           [-1.09999990, -0.90952379, -0.89365077,  ...,  0.02698422,
            -0.22698402, -0.35396814],
           [-0.70317459, -0.57619047, -0.73492062,  ...,  0.09047628,
            -0.08412688, -0.16349196],
           ...,
           [ 0.64603180,  0.61428577,  0.63015878,  ..., -1.86190474,
            -1.81428576, -1.52857137],
           [ 0.61428577,  0.55079371,  0.56666672,  ..., -1.70317459,
            -1.36984122, -0.87777776],
           [ 0.01111121, -0.17936498, -0.24285704,  ..., -0.98888886,
            -0.78253967, -0.62380952]],

          [[-1.64251208, -1.57809973, -1.56199670,  ..., -0.70853460,
            -0.77294683, -0.67632848],
           [-0.86956519, -0.67632848, -0.66022539,  ..., -0.59581316,
            -0.78904986, -0.83735907],
           [-0.33816412, -0.20933965, -0.35426718,  ..., -0.62801927,
            -0.74074072, -0.69243151],
           ...,
           [ 0.64412248,  0.62801939,  0.64412248,  ..., -1.77133656,
            -1.72302747, -1.44927526],
           [ 0.64412248,  0.57971025,  0.59581327,  ..., -1.64251208,
            -1.32045078, -0.80515295],
           [ 0.11272153, -0.08051517, -0.16103047,  ..., -0.95008045,
            -0.74074072, -0.59581316]],

          [[-1.28785622, -1.22788620, -1.21289361,  ..., -0.56821585,
            -0.67316341, -0.59820086],
           [-0.43328333, -0.25337315, -0.23838064,  ..., -0.47826082,
            -0.70314842, -0.76311839],
           [ 0.16641696,  0.28635699,  0.13643195,  ..., -0.56821585,
            -0.68815589, -0.62818587],
           ...,
           [ 0.61619210,  0.60119957,  0.61619210,  ..., -1.46776617,
            -1.40779614, -1.15292358],
           [ 0.66116959,  0.60119957,  0.61619210,  ..., -1.36281872,
            -1.04797614, -0.58320838],
           [ 0.24137947,  0.06146942, -0.01349309,  ..., -0.73313338,
            -0.53823084, -0.40329832]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0791 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 90, vnnlib ID: 90 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.84198666, -4.72074509, -2.69757771, -2.34419656, -2.72111034,
         -2.42904544, -2.38987303, -3.45313597, -5.43384743, -4.25232363]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [597]; unstable size 597; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 597] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 597] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 597] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 203] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.79418397,  1.27176452, -0.11253977, -0.41002405, -0.13396955,
         -0.34127319,  0.48139536,  2.23571205,  0.95288730]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.84198666, -4.72074509, -2.69757771, -2.34419656, -2.72111034,
         -2.42904544, -2.38987303, -3.45313597, -5.43384743, -4.25232363]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.84198666, -4.72074509, -2.69757748, -2.34419608, -2.72111011,
          -2.42904544, -2.38987303, -3.45313621, -5.43384695, -4.25232363],
         [-4.84198666, -4.72074509, -2.69757748, -2.34419608, -2.72111011,
          -2.42904544, -2.38987303, -3.45313621, -5.43384695, -4.25232363]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.30770445, -0.04567695,  0.33123708,  0.03917241]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0697 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 91, vnnlib ID: 91 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.19456577,  -8.36557293, -13.55558205, -13.23456478, -12.32262707,
         -13.37201500, -13.57000160, -12.17472267, -11.16325188,  -8.78851414]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [588]; unstable size 588; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 143, 1, 588] with unstable size 142 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 588] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 588] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [142]; unstable size 142; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 142] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.16457796, 4.29507446, 3.98237896, 3.06007886, 4.11273384, 4.28068399,
         2.84930611, 2.22545958, 0.24410951]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0696 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 92, vnnlib ID: 92 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.71225262, -12.01007652,  -8.29110718,  -7.58899784,  -8.32572460,
          -7.52227640,  -8.05987549,  -8.91144371, -14.67064476, -11.80937672]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [458]; unstable size 458; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 458] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 458] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 458] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 141] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.67991829, 3.77827573, 0.47558522, 0.04749578, 0.50099051, 0.13609672,
         1.01967585, 6.51381016, 3.67172766]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0699 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 93, vnnlib ID: 93 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.25923347,  -8.93387318, -12.07442665, -12.36280155, -11.61011887,
         -12.40742683, -12.73714542, -11.05641937,  -9.61292076, -10.40355968]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [515]; unstable size 515; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 139, 1, 515] with unstable size 138 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 515] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 515] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [138]; unstable size 138; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 138] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.75624776, 2.35665655, 2.62816501, 1.91056108, 2.66094518, 2.94464588,
         1.34808493, 0.20877779, 1.29339409]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0748 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 94, vnnlib ID: 94 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-0.12398815, -7.37717056, -1.18167615, -3.64735293, -2.90664721,
         -3.76087618, -4.92453289, -5.42116880, -1.31887615, -6.85669994]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [515]; unstable size 515; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 128, 1, 515] with unstable size 127 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 515] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 515] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [127]; unstable size 127; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 127] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 127] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.24615037,  5.69084644,  2.23981595,  1.54952383,  2.35145092,
          3.44640017,  3.95842123, -0.23636389,  5.13023186]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.12398815, -7.37717056, -1.18167615, -3.64735293, -2.90664721,
         -3.76087618, -4.92453289, -5.42116880, -1.31887615, -6.85669994]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.12398925, -7.37717152, -1.18167734, -3.64735389, -2.90664840,
          -3.76087666, -4.92453480, -5.42116880, -1.31887758, -6.85670042],
         [-0.12398925, -7.37717152, -1.18167734, -3.64735389, -2.90664840,
          -3.76087666, -4.92453480, -5.42116880, -1.31887758, -6.85670042]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.05768812,  0.13720024]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]],


         [[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0767 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 95, vnnlib ID: 95 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.27392960, -10.40883446, -10.95635605, -11.48171997, -11.53870010,
         -11.52956009, -10.56092262, -12.92515469, -12.09226036, -11.58665943]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [407]; unstable size 407; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 156, 1, 407] with unstable size 155 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 407] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 407] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [155]; unstable size 155; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 155] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 155] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.79021215, -0.15416002,  0.34587622,  0.41858768,  0.38338351,
         -0.53462267,  1.75449777,  0.91765881,  0.82849890]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.27392960, -10.40883446, -10.95635605, -11.48171997, -11.53870010,
         -11.52956009, -10.56092262, -12.92515469, -12.09226036, -11.58665943]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.27393055, -10.40883350, -10.95635605, -11.48171997, -11.53870010,
          -11.52956009, -10.56092167, -12.92515469, -12.09225941, -11.58665943],
         [-10.27393055, -10.40883350, -10.95635605, -11.48171997, -11.53870010,
          -11.52956009, -10.56092167, -12.92515469, -12.09225941, -11.58665943]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.13490295,  0.54752254,  0.15208817]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.73492062, -1.73492062, -1.71904767,  ..., -0.19523799,
             0.29682547,  0.23333341],
           [-1.75079370, -1.71904767, -1.65555561,  ..., -0.17936498,
             0.26507944,  0.20158738],
           [-1.75079370, -1.63968253, -1.48095226,  ..., -0.21111101,
             0.18571436,  0.12222230],
           ...,
           [-0.75079364, -0.75079364, -0.63968253,  ..., -0.86190474,
            -0.89365077, -0.90952379],
           [-0.76666665, -0.73492062, -0.60793650,  ..., -0.86190474,
            -0.90952379, -0.92539680],
           [-0.71904761, -0.65555555, -0.54444444,  ..., -0.81428570,
            -0.90952379, -0.90952379]],

          [[-1.88405800, -1.88405800, -1.85185194,  ..., -0.27375188,
             0.24154601,  0.24154601],
           [-1.90016103, -1.85185194, -1.80354273,  ..., -0.25764883,
             0.24154601,  0.24154601],
           [-1.88405800, -1.77133656, -1.61030602,  ..., -0.25764883,
             0.20933989,  0.19323683],
           ...,
           [-0.53140092, -0.53140092, -0.41867942,  ..., -0.64412236,
            -0.67632848, -0.69243151],
           [-0.56360704, -0.53140092, -0.38647330,  ..., -0.64412236,
            -0.69243151, -0.69243151],
           [-0.51529789, -0.45088565, -0.32206106,  ..., -0.61191624,
            -0.67632848, -0.69243151]],

          [[-1.60269880, -1.66266882, -1.66266882,  ...,  0.45127454,
             0.79610211,  0.79610211],
           [-1.67766130, -1.67766130, -1.61769128,  ...,  0.45127454,
             0.81109464,  0.79610211],
           [-1.69265378, -1.60269880, -1.45277369,  ...,  0.40629703,
             0.78110963,  0.75112462],
           ...,
           [ 0.25637197,  0.25637197,  0.36131951,  ...,  0.12143944,
             0.13643195,  0.12143944],
           [ 0.28635699,  0.31634200,  0.43628204,  ...,  0.10644694,
             0.12143944,  0.10644694],
           [ 0.33133450,  0.37631202,  0.49625200,  ...,  0.15142445,
             0.13643195,  0.10644694]]],


         [[[-1.73492062, -1.73492062, -1.71904767,  ..., -0.19523799,
             0.29682547,  0.23333341],
           [-1.75079370, -1.71904767, -1.65555561,  ..., -0.17936498,
             0.26507944,  0.20158738],
           [-1.75079370, -1.63968253, -1.48095226,  ..., -0.21111101,
             0.18571436,  0.12222230],
           ...,
           [-0.75079364, -0.75079364, -0.63968253,  ..., -0.86190474,
            -0.89365077, -0.90952379],
           [-0.76666665, -0.73492062, -0.60793650,  ..., -0.86190474,
            -0.90952379, -0.92539680],
           [-0.71904761, -0.65555555, -0.54444444,  ..., -0.81428570,
            -0.90952379, -0.90952379]],

          [[-1.88405800, -1.88405800, -1.85185194,  ..., -0.27375188,
             0.24154601,  0.24154601],
           [-1.90016103, -1.85185194, -1.80354273,  ..., -0.25764883,
             0.24154601,  0.24154601],
           [-1.88405800, -1.77133656, -1.61030602,  ..., -0.25764883,
             0.20933989,  0.19323683],
           ...,
           [-0.53140092, -0.53140092, -0.41867942,  ..., -0.64412236,
            -0.67632848, -0.69243151],
           [-0.56360704, -0.53140092, -0.38647330,  ..., -0.64412236,
            -0.69243151, -0.69243151],
           [-0.51529789, -0.45088565, -0.32206106,  ..., -0.61191624,
            -0.67632848, -0.69243151]],

          [[-1.60269880, -1.66266882, -1.66266882,  ...,  0.45127454,
             0.79610211,  0.79610211],
           [-1.67766130, -1.67766130, -1.61769128,  ...,  0.45127454,
             0.81109464,  0.79610211],
           [-1.69265378, -1.60269880, -1.45277369,  ...,  0.40629703,
             0.78110963,  0.75112462],
           ...,
           [ 0.25637197,  0.25637197,  0.36131951,  ...,  0.12143944,
             0.13643195,  0.12143944],
           [ 0.28635699,  0.31634200,  0.43628204,  ...,  0.10644694,
             0.12143944,  0.10644694],
           [ 0.33133450,  0.37631202,  0.49625200,  ...,  0.15142445,
             0.13643195,  0.10644694]]],


         [[[-1.73492062, -1.73492062, -1.71904767,  ..., -0.19523799,
             0.29682547,  0.23333341],
           [-1.75079370, -1.71904767, -1.65555561,  ..., -0.17936498,
             0.26507944,  0.20158738],
           [-1.75079370, -1.63968253, -1.48095226,  ..., -0.21111101,
             0.18571436,  0.12222230],
           ...,
           [-0.75079364, -0.75079364, -0.63968253,  ..., -0.86190474,
            -0.89365077, -0.90952379],
           [-0.76666665, -0.73492062, -0.60793650,  ..., -0.86190474,
            -0.90952379, -0.92539680],
           [-0.71904761, -0.65555555, -0.54444444,  ..., -0.81428570,
            -0.90952379, -0.90952379]],

          [[-1.88405800, -1.88405800, -1.85185194,  ..., -0.27375188,
             0.24154601,  0.24154601],
           [-1.90016103, -1.85185194, -1.80354273,  ..., -0.25764883,
             0.24154601,  0.24154601],
           [-1.88405800, -1.77133656, -1.61030602,  ..., -0.25764883,
             0.20933989,  0.19323683],
           ...,
           [-0.53140092, -0.53140092, -0.41867942,  ..., -0.64412236,
            -0.67632848, -0.69243151],
           [-0.56360704, -0.53140092, -0.38647330,  ..., -0.64412236,
            -0.69243151, -0.69243151],
           [-0.51529789, -0.45088565, -0.32206106,  ..., -0.61191624,
            -0.67632848, -0.69243151]],

          [[-1.60269880, -1.66266882, -1.66266882,  ...,  0.45127454,
             0.79610211,  0.79610211],
           [-1.67766130, -1.67766130, -1.61769128,  ...,  0.45127454,
             0.81109464,  0.79610211],
           [-1.69265378, -1.60269880, -1.45277369,  ...,  0.40629703,
             0.78110963,  0.75112462],
           ...,
           [ 0.25637197,  0.25637197,  0.36131951,  ...,  0.12143944,
             0.13643195,  0.12143944],
           [ 0.28635699,  0.31634200,  0.43628204,  ...,  0.10644694,
             0.12143944,  0.10644694],
           [ 0.33133450,  0.37631202,  0.49625200,  ...,  0.15142445,
             0.13643195,  0.10644694]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0803 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 96, vnnlib ID: 96 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.03281784, -8.23260021, -1.84217274, -3.97030663, -2.07109594,
         -4.04030323, -2.67588925, -4.08758450, -7.76276398, -8.17520523]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [391]; unstable size 391; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 170, 1, 391] with unstable size 169 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 391] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 391] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [169]; unstable size 169; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 169] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 169] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.71139061,  4.86629915, -1.22754908,  0.94557452, -1.01543295,
          1.00673771,  0.82872874,  4.49218941,  4.77490425]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.03281784, -8.23260021, -1.84217274, -3.97030663, -2.07109594,
         -4.04030323, -2.67588925, -4.08758450, -7.76276398, -8.17520523]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.03281879, -8.23260021, -1.84217358, -3.97030759, -2.07109690,
          -4.04030418, -2.67589021, -4.08758593, -7.76276398, -8.17520523],
         [-5.03281879, -8.23260021, -1.84217358, -3.97030759, -2.07109690,
          -4.04030418, -2.67589021, -4.08758593, -7.76276398, -8.17520523]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.83371663, -0.60479331]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0782 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 97, vnnlib ID: 97 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.72495699, -5.89168453, -0.38030732, -1.11891258, -0.52149594,
         -1.21352100, -0.91386914, -2.07719803, -3.71372318, -4.84915781]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [746]; unstable size 746; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 746] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 746] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 746] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 260] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.64249659,  4.36007452,  0.44215167, -0.09383832,  0.53698552,
          0.11810207,  1.25011325,  2.22731805,  3.35412121]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.72495699, -5.89168453, -0.38030732, -1.11891258, -0.52149594,
         -1.21352100, -0.91386914, -2.07719803, -3.71372318, -4.84915781]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.62it/s]100%|██████████| 1/1 [00:00<00:00,  7.61it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.02882814, -6.13730335, -0.72621405, -1.43307424, -0.73920232,
          -1.52886283, -1.13457453, -2.27671862, -4.01522541, -5.08771849]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.01298827]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1346 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.18382453918457
alpha/beta optimization time: 1.3975844383239746
initial alpha-crown bounds: tensor([[ 1.68035626,  4.42551994,  0.46530294, -0.08068583,  0.55969727,
          0.14187607,  1.27987516,  2.29280519,  3.41907716]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.08068583160638809
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.39943099021912
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.39937615394592
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.3993330001831
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.39930534362793
Verifying property 3 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08068583]], device='cuda:0') need to verify.
Model prediction is: tensor([-2.72495699, -5.89168453, -0.38030732, -1.11891258, -0.52149594,
        -1.21352100, -0.91386914, -2.07719803, -3.71372318, -4.84915781],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08068583]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 746
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 254
Node /15 input 0: size torch.Size([100]) unstable 9
-----------------
# of unstable neurons: 1009
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011968612670898438
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08068560063838959
10 lb beta sum: 0.0, worst -0.08068544417619705
Time: prepare 0.0002    bound 0.0928    transfer 0.0001    finalize 0.0002    func 0.0933    
Accumulated time: func 0.0933    prepare 0.0002    bound 0.0928    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] 
split level 1: [/input-12, 69] 
split level 2: [/input-8, 549] 
split level 3: [/input-8, 545] 
split level 4: [/input-8, 546] 
split level 5: [/input-8, 537] 
split level 6: [/input-8, 1453] 
split level 7: [/input-8, 330] 
split level 8: [/input-8, 548] 
split level 9: [/input-8, 1467] 
split level 10: [/input-8, 547] 
split level 11: [/input-8, 331] 
split level 12: [/input-8, 939] 
split level 13: [/input, 807] 
split level 14: [/input, 715] 
split level 15: [/input-8, 520] 
split level 16: [/input-8, 1470] 
split level 17: [/input-8, 329] 
split level 18: [/input-8, 1259] 
split level 19: [/input-8, 1233] 
split level 20: [/input-8, 1175] 
split level 21: [/input-8, 740] 
split level 22: [/input-8, 1197] 
split level 23: [/input-8, 990] 
split level 24: [/input-8, 900] 
split level 25: [/input-8, 1251] 
split level 26: [/input-8, 1944] 
split level 27: [/input-8, 100] 
split level 28: [/input-8, 925] 
split level 29: [/input-8, 88] 
split level 30: [/input-8, 1243] 
split level 31: [/input, 1079] 
split level 32: [/input-8, 1258] 
split level 33: [/input-8, 266] 
split level 34: [/input-8, 1461] 
split level 35: [/input-8, 1252] 
split level 36: [/input-8, 932] 
split level 37: [/input-8, 949] 
split level 38: [/input-8, 941] 
split level 39: [/input, 2385] 
split level 40: [/input-8, 931] 
split level 41: [/input-8, 1227] 
split level 42: [/input-8, 1217] 
split level 43: [/input-8, 942] 
split level 44: [/input-8, 977] 
split level 45: [/input, 1878] 
split level 46: [/input-8, 1235] 
split level 47: [/input-8, 1218] 
split level 48: [/input, 734] 
split level 49: [/input, 1061] 
split level 50: [/input-8, 2003] 
split level 51: [/input, 1129] 
split level 52: [/input, 1891] 
split level 53: [/input-8, 2004] 
split level 54: [/input, 3052] 
split level 55: [/input-8, 66] 
split level 56: [/input-8, 933] 
split level 57: [/input-8, 1250] 
split level 58: [/input, 1064] 
split level 59: [/input-8, 917] 
split level 60: [/input-8, 1265] 
split level 61: [/input-8, 1514] 
split level 62: [/input, 1892] 
split level 63: [/input, 3656] 
split level 64: [/input, 1893] 
split level 65: [/input, 2243] 
split level 66: [/input, 3620] 
split level 67: [/input, 1046] 
split level 68: [/input, 1877] 
split level 69: [/input-8, 373] 
split level 70: [/input, 1864] 
split level 71: [/input-8, 1952] 
split level 72: [/input, 2276] 
split level 73: [/input-8, 924] 
split level 74: [/input-8, 1204] 
split level 75: [/input-8, 938] 
split level 76: [/input-8, 1242] 
split level 77: [/input, 536] 
split level 78: [/input-8, 1244] 
split level 79: [/input-8, 901] 
split level 80: [/input, 1861] 
split level 81: [/input-8, 1515] 
split level 82: [/input-8, 1257] 
split level 83: [/input-8, 747] 
split level 84: [/input-8, 1006] 
split level 85: [/input, 2788] 
split level 86: [/input-8, 1953] 
split level 87: [/input-8, 367] 
split level 88: [/input, 1813] 
split level 89: [/input-8, 908] 
split level 90: [/input, 613] 
split level 91: [/input-8, 997] 
split level 92: [/input, 2524] 
split level 93: [/input-8, 731] 
split level 94: [/input-8, 989] 
split level 95: [/input, 3641] 
split level 96: [/input, 2508] 
split level 97: [/input-8, 916] 
split level 98: [/input, 650] 
split level 99: [/input, 1032] 
split level 100: [/input-8, 1960] 
split level 101: [/input, 1224] 
split level 102: [/input, 1062] 
split level 103: [/input, 1847] 
split level 104: [/input, 3607] 
split level 105: [/input, 711] 
split level 106: [/input-8, 1567] 
split level 107: [/input, 936] 
split level 108: [/input, 3162] 
split level 109: [/input, 1192] 
split level 110: [/input, 1811] 
split level 111: [/input, 577] 
split level 112: [/input-8, 1211] 
split level 113: [/input, 1846] 
split level 114: [/input, 694] 
split level 115: [/input, 1875] 
split level 116: [/input, 710] 
split level 117: [/input-8, 1241] 
split level 118: [/input, 806] 
split level 119: [/input-8, 1505] 
split level 120: [/input, 1809] 
split level 121: [/input-8, 1601] 
split level 122: [/input, 2386] 
split level 123: [/input, 2756] 
split level 124: [/input, 2363] 
split level 125: [/input-8, 1956] 
split level 126: [/input-8, 1459] 
split level 127: [/input, 1874] 
split level 128: [/input-8, 981] 
split level 129: [/input-8, 730] 
split level 130: [/input, 1125] 
split level 131: [/input, 3617] 
split level 132: [/input-8, 1330] 
split level 133: [/input, 1876] 
split level 134: [/input, 1852] 
split level 135: [/input, 958] 
split level 136: [/input-8, 1955] 
split level 137: [/input-8, 909] 
split level 138: [/input, 1222] 
split level 139: [/input, 1826] 
split level 140: [/input, 2525] 
split level 141: [/input, 1894] 
split level 142: [/input-8, 93] 
split level 143: [/input-8, 359] 
split level 144: [/input, 2613] 
split level 145: [/input, 1930] 
split level 146: [/input, 1114] 
split level 147: [/input, 1914] 
split level 148: [/input, 1860] 
split level 149: [/input, 1160] 
split level 150: [/input-8, 132] 
split level 151: [/input, 1197] 
split level 152: [/input, 1929] 
split level 153: [/input-8, 1962] 
split level 154: [/input, 794] 
split level 155: [/input, 520] 
split level 156: [/input-8, 261] 
split level 157: [/input, 1193] 
split level 158: [/input-8, 1595] 
split level 159: [/input, 789] 
split level 160: [/input, 2220] 
split level 161: [/input-8, 1333] 
split level 162: [/input, 1911] 
split level 163: [/input, 1925] 
split level 164: [/input, 1928] 
split level 165: [/input, 614] 
split level 166: [/input, 537] 
split level 167: [/input, 565] 
split level 168: [/input, 1220] 
split level 169: [/input, 1985] 
split level 170: [/input, 1096] 
split level 171: [/input, 849] 
split level 172: [/input, 2146] 
split level 173: [/input, 2025] 
split level 174: [/input, 2395] 
split level 175: [/input, 1226] 
split level 176: [/input, 1812] 
split level 177: [/input, 3674] 
split level 178: [/input, 1868] 
split level 179: [/input-8, 1583] 
split level 180: [/input, 2677] 
split level 181: [/input, 1922] 
split level 182: [/input, 1912] 
split level 183: [/input, 2614] 
split level 184: [/input, 1835] 
split level 185: [/input, 2387] 
split level 186: [/input, 1836] 
split level 187: [/input, 1969] 
split level 188: [/input, 618] 
split level 189: [/input, 1838] 
split level 190: [/input, 937] 
split level 191: [/input-8, 1596] 
split level 192: [/input, 1350] 
split level 193: [/input, 2390] 
split level 194: [/input, 646] 
split level 195: [/input, 3961] 
split level 196: [/input, 551] 
split level 197: [/input, 1819] 
split level 198: [/input-8, 104] 
split level 199: [/input, 1156] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08065465092658997
10 lb beta sum: 0.0, worst -0.08065543323755264
Time: prepare 0.0115    bound 0.1023    transfer 0.0043    finalize 0.0038    func 0.1245    
Accumulated time: func 0.2178    prepare 0.0221    bound 0.1950    transfer 0.0045    finalize 0.0039    
all_split False
======================Cut inference begins======================
max lb tensor(0.00261265) min lb tensor(-0.08065376)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011321783065795898 
BICCOS Cumulative time: 0.011321783065795898
Preprocessing time: 0.010494470596313477 Inference time: 0.00010180473327636719 Add cuts time: 5.316734313964844e-05 Cut analysis time: 0.0006723403930664062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07899 (1), -0.07895 (1), -0.07890 (1), -0.07887 (1), -0.07886 (1), -0.07881 (1), -0.07878 (1), -0.07872 (1), -0.07867 (1), -0.07867 (1), -0.07860 (1), -0.07859 (1), -0.07858 (1), -0.07847 (1), -0.07842 (1), -0.07840 (1), -0.07837 (1), -0.07833 (1), -0.07826 (1), -0.07821 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5296    set_bounds 0.0102    solve 0.1247    add 0.0763    
Accumulated time: pickout 0.0004    decision 0.5296    set_bounds 0.0102    solve 0.1247    add 0.0763    
Current (lb-rhs): -0.0789862871170044
50 domains visited
Cumulative time: 0.8551416397094727

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 69] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-8, 549] [/input-8, 545] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-8, 549] [/input-12, 69] [/input-12, 69] [/input-12, 69] 
split level 2: [/input-8, 546] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 545] [/input-8, 549] [/input-8, 549] [/input-8, 549] 
split level 3: [/input-8, 1467] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07714323699474335
10 lb beta sum: 0.1686980426311493, worst -0.06837672740221024
Time: prepare 0.0074    bound 0.1195    transfer 0.0009    finalize 0.0029    func 0.1333    
Accumulated time: func 0.3511    prepare 0.0298    bound 0.3145    transfer 0.0053    finalize 0.0068    
all_split False
======================Cut inference begins======================
max lb tensor(0.02423701) min lb tensor(-0.06821023)
Number of Verified Splits: 49 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.015471696853637695 
BICCOS Cumulative time: 0.026793479919433594
Preprocessing time: 0.012204647064208984 Inference time: 0.0017392635345458984 Add cuts time: 0.0012967586517333984 Cut analysis time: 0.00023102760314941406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02293 (2), -0.02287 (2), -0.02277 (2), -0.02274 (2), -0.02271 (2), -0.02260 (2), -0.02245 (2), -0.02235 (2), -0.02231 (2), -0.02219 (2), -0.02218 (2), -0.02218 (2), -0.02211 (2), -0.02204 (2), -0.02190 (2), -0.02183 (2), -0.02167 (2), -0.02163 (2), -0.02160 (2), -0.02158 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0242    set_bounds 0.0136    solve 0.1334    add 0.0822    
Accumulated time: pickout 0.0015    decision 0.5538    set_bounds 0.0238    solve 0.2581    add 0.1585    
Current (lb-rhs): -0.022929668426513672
100 domains visited
Cumulative time: 1.1253924369812012

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-8, 546] [/input-8, 549] [/input-8, 1467] [/input-8, 549] [/input-8, 546] [/input-8, 549] [/input-8, 546] [/input-8, 549] [/input-8, 549] [/input-8, 546] 
split level 2: [/input-8, 1467] [/input-8, 1467] [/input, 901] [/input-8, 546] [/input-8, 1467] [/input-8, 546] [/input-8, 1467] [/input-8, 1467] [/input-8, 546] [/input-8, 1467] 
split level 3: [/input-8, 949] [/input-8, 949] [/input-12, 62] [/input-8, 1467] [/input, 852] [/input-8, 1467] [/input-8, 949] [/input-8, 949] [/input-8, 1467] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2243196815252304, worst -0.02292969822883606
10 lb beta sum: 0.2243196815252304, worst -0.023891761898994446
Time: prepare 0.0177    bound 0.1341    transfer 0.0015    finalize 0.0031    func 0.1593    
Accumulated time: func 0.5104    prepare 0.0478    bound 0.4485    transfer 0.0069    finalize 0.0099    
all_split False
======================Cut inference begins======================
max lb tensor(0.03815790) min lb tensor(-0.02235653)
Number of Verified Splits: 52 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 1
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.016970157623291016 
BICCOS Cumulative time: 0.04376363754272461
Preprocessing time: 0.013092994689941406 Inference time: 0.002171754837036133 Add cuts time: 0.001359701156616211 Cut analysis time: 0.0003457069396972656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01383 (3), -0.01370 (3), -0.01365 (3), -0.01361 (3), -0.01347 (3), -0.01340 (3), -0.01318 (3), -0.01315 (3), -0.01311 (3), -0.01306 (3), -0.01296 (3), -0.01272 (3), -0.01268 (3), -0.01266 (3), -0.01256 (3), -0.01251 (3), -0.01251 (3), -0.01245 (3), -0.01244 (3), -0.01227 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0198    set_bounds 0.0157    solve 0.1594    add 0.2138    
Accumulated time: pickout 0.0025    decision 0.5736    set_bounds 0.0395    solve 0.4175    add 0.3723    
Current (lb-rhs): -0.013833880424499512
150 domains visited
Cumulative time: 1.5592918395996094

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-8, 549] [/input-8, 549] [/input-8, 546] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 546] [/input-8, 549] 
split level 2: [/input-8, 1467] [/input-8, 546] [/input-8, 1467] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 1467] [/input-8, 1467] [/input-8, 1467] [/input-8, 546] 
split level 3: [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 1467] [/input-8, 1467] [/input-8, 949] [/input-8, 547] [/input-8, 949] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03511229157447815
10 lb beta sum: 0.1392764002084732, worst -0.01691173017024994
Time: prepare 0.0084    bound 0.1711    transfer 0.0014    finalize 0.0027    func 0.1868    
Accumulated time: func 0.6972    prepare 0.0565    bound 0.6197    transfer 0.0083    finalize 0.0126    
all_split False
======================Cut inference begins======================
max lb tensor(0.04275954) min lb tensor(-0.01338679)
Number of Verified Splits: 58 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 1
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.016330242156982422 
BICCOS Cumulative time: 0.06009387969970703
Preprocessing time: 0.01177668571472168 Inference time: 0.002328157424926758 Add cuts time: 0.0017898082733154297 Cut analysis time: 0.0004355907440185547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00475 (4), -0.00469 (4), -0.00469 (4), -0.00468 (4), -0.00466 (4), -0.00466 (4), -0.00466 (4), -0.00465 (4), -0.00464 (4), -0.00463 (4), -0.00445 (4), -0.00445 (4), -0.00444 (4), -0.00442 (4), -0.00439 (4), -0.00438 (4), -0.00436 (4), -0.00426 (4), -0.00424 (4), -0.00419 (4), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0210    set_bounds 0.0155    solve 0.1869    add 0.2122    
Accumulated time: pickout 0.0104    decision 0.5946    set_bounds 0.0550    solve 0.6045    add 0.5845    
Current (lb-rhs): -0.004746943712234497
200 domains visited
Cumulative time: 2.026249408721924

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-8, 547] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 1467] [/input-8, 549] [/input-8, 549] [/input-8, 546] [/input-8, 549] 
split level 2: [/input-8, 1467] [/input-8, 547] [/input-8, 1467] [/input-8, 547] [/input-8, 1467] [/input-8, 547] [/input-8, 546] [/input-8, 547] [/input-8, 1467] [/input-8, 547] 
split level 3: [/input-8, 949] [/input-8, 949] [/input-8, 547] [/input-8, 949] [/input-8, 547] [/input-8, 949] [/input-8, 1467] [/input-8, 949] [/input-8, 547] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.017574727535247803
10 lb beta sum: 0.14502112567424774, worst -0.0074350833892822266
Time: prepare 0.0080    bound 0.1757    transfer 0.0014    finalize 0.0031    func 0.1910    
Accumulated time: func 0.8883    prepare 0.0647    bound 0.7954    transfer 0.0097    finalize 0.0157    
all_split False
======================Cut inference begins======================
max lb tensor(0.04656971) min lb tensor(-0.00426906)
Number of Verified Splits: 139 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 1
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.022535085678100586 
BICCOS Cumulative time: 0.08262896537780762
Preprocessing time: 0.011883735656738281 Inference time: 0.007256269454956055 Add cuts time: 0.002723217010498047 Cut analysis time: 0.0006718635559082031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00089 (5), -0.00088 (5), -0.00088 (5), -0.00088 (5), -0.00087 (5), -0.00086 (5), -0.00085 (5), -0.00084 (5), -0.00084 (5), -0.00084 (5), -0.00084 (5), -0.00083 (5), -0.00079 (5), -0.00077 (5), -0.00077 (5), -0.00075 (5), -0.00073 (5), -0.00073 (5), -0.00068 (5), -0.00066 (5), 
Length of domains: 50
Time: pickout 0.0080    decision 0.0209    set_bounds 0.0155    solve 0.1911    add 0.3471    
Accumulated time: pickout 0.0183    decision 0.6155    set_bounds 0.0705    solve 0.7956    add 0.9316    
Current (lb-rhs): -0.0008857548236846924
250 domains visited
Cumulative time: 2.6316850185394287

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1461]), tensor([-1.]), tensor([0]), tensor([-1.36609198e+31]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 549], [1.0, -1.0, -1.0], [0, 0, 0], [0.006089882459491491, 0.0039517744444310665, 0.001700343331322074], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.36610165e+31,  4.28985357e-02]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 549], [1.0, -1.0, -1.0], [0, 0, 0], [0.006089882459491491, 0.0039517744444310665, 0.001700343331322074], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.36610165e+31,  5.50763449e-04]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 549], [1.0, -1.0, 1.0], [0, 0, 0], [0.006089882459491491, 0.0039517744444310665, 0.005884723272174597], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.36610165e+31,  4.32752073e-02]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 549], [1.0, -1.0, 1.0], [0, 0, 0], [0.006089882459491491, 0.0039517744444310665, 0.005884723272174597], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.36610165e+31,  7.88422069e-04]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 546], [1.0, 1.0, -1.0], [0, 0, 0], [0.006089882459491491, 0.003459499916061759, 0.0021491365041583776], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.36610165e+31,  4.27270979e-02]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 546], [1.0, 1.0, -1.0], [0, 0, 0], [0.006089882459491491, 0.003459499916061759, 0.0021491365041583776], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.36610165e+31,  1.00089773e-03]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 546], [1.0, 1.0, 1.0], [0, 0, 0], [0.006089882459491491, 0.003459499916061759, 0.0033340619411319494], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.36610165e+31,  4.31769490e-02]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 546], [1.0, 1.0, 1.0], [0, 0, 0], [0.006089882459491491, 0.003459499916061759, 0.0033340619411319494], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.36610165e+31,  1.01700588e-03]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461], [1.0], [0], [0.006089882459491491], [0]), '/input-12': (tensor([69]), tensor([1.]), tensor([0]), tensor([0.01726379]), tensor([1]))}
Shallow branching resets to n domains:  10
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08054864406585693
10 lb beta sum: 0.06185082718729973, worst -0.0699625015258789
Time: prepare 0.0005    bound 0.1614    transfer 0.0002    finalize 0.0002    func 0.1625    
Accumulated time: func 1.0507    prepare 0.0653    bound 0.9568    transfer 0.0099    finalize 0.0159    
After pruning, left:  6

Back to Regular BaB

BaB round 1
batch: 6
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-8, 546] [/input-8, 546] [/input-8, 549] [/input-8, 549] [/input-12, 61] 
split level 1: [/input-12, 69] [/input-8, 547] [/input-8, 547] [/input-8, 547] [/input-8, 547] [/input-8, 549] 
split level 2: [/input-8, 549] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 545] 
split level 3: [/input-8, 545] [/input-8, 941] [/input-8, 949] [/input-8, 941] [/input-8, 941] [/input-8, 546] 
split level 4: [/input-8, 546] [/input-8, 949] [/input-8, 941] [/input-8, 949] [/input-8, 949] [/input-8, 537] 
split level 5: [/input-8, 537] [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] [/input-8, 547] 
cut re-enabled after branching node selection
0 lb beta sum: 0.11756210029125214, worst -0.05612845718860626
10 lb beta sum: 0.1176312267780304, worst -0.055994972586631775
Time: prepare 0.0176    bound 0.1651    transfer 0.0061    finalize 0.0024    func 0.1937    
Accumulated time: func 1.2445    prepare 0.0832    bound 1.1219    transfer 0.0160    finalize 0.0184    
all_split False
======================Cut inference begins======================
max lb tensor(0.02516358) min lb tensor(-0.05594297)
Number of Verified Splits: 320 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.09360920637845993, worst -0.057835355401039124
10 lb beta sum: 0.27540573477745056, worst -0.057645753026008606
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 49.
#cuts 1-3: 1
#cuts 4-6: 13
#cuts 7-9: 35
#cuts >= 20: 0
BICCOS time: 0.3966488838195801 
BICCOS Cumulative time: 0.4792778491973877
Preprocessing time: 0.010422468185424805 Inference time: 0.3690974712371826 Add cuts time: 0.014214038848876953 Cut analysis time: 0.002914905548095703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05594 (6), -0.05451 (6), -0.05440 (6), -0.05394 (6), -0.05366 (6), -0.05265 (6), -0.05250 (6), -0.05240 (6), -0.05193 (6), -0.05165 (6), -0.05109 (6), -0.05082 (6), -0.05064 (6), -0.04993 (6), -0.04910 (6), -0.04882 (6), -0.04750 (6), -0.04708 (6), -0.04636 (6), -0.04598 (6), 
Length of domains: 64
Time: pickout 0.0007    decision 0.0195    set_bounds 0.0349    solve 0.1939    add 0.0016    
Accumulated time: pickout 0.0190    decision 0.6350    set_bounds 0.1054    solve 0.9895    add 0.9333    
Current (lb-rhs): -0.05594296753406525
314 domains visited
Cumulative time: 3.466611623764038

BaB round 2
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 547] [/input-8, 1467] [/input-8, 547] [/input-8, 1467] [/input-8, 547] [/input-8, 1467] [/input-8, 547] [/input-8, 1467] [/input-8, 547] [/input-8, 1467] 
split level 1: [/input-8, 1467] [/input-8, 1259] [/input-8, 1467] [/input-8, 1259] [/input-8, 1467] [/input-8, 1259] [/input-8, 1467] [/input-8, 1259] [/input-8, 1467] [/input-8, 1259] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.053119778633117676
10 lb beta sum: 0.0015104480553418398, worst -0.05303619056940079
Time: prepare 0.0051    bound 0.1628    transfer 0.0017    finalize 0.0017    func 0.1735    
Accumulated time: func 1.4180    prepare 0.0884    bound 1.2846    transfer 0.0178    finalize 0.0201    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00706130) min lb tensor(-0.05298674)
Number of Verified Splits: 0 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 49.
#cuts 1-3: 1
#cuts 4-6: 13
#cuts 7-9: 35
#cuts >= 20: 0
BICCOS time: 0.007701396942138672 
BICCOS Cumulative time: 0.48697924613952637
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05299 (8), -0.05275 (8), -0.05245 (8), -0.05220 (8), -0.05188 (8), -0.05152 (8), -0.05134 (8), -0.05112 (8), -0.05108 (8), -0.05098 (8), -0.05094 (8), -0.05058 (8), -0.05054 (8), -0.05049 (8), -0.05040 (8), -0.05030 (8), -0.05012 (8), -0.04995 (8), -0.04982 (8), -0.04976 (8), 
Length of domains: 256
Time: pickout 0.0017    decision 0.0156    set_bounds 0.0119    solve 0.1736    add 0.0032    
Accumulated time: pickout 0.0207    decision 0.6506    set_bounds 0.1173    solve 1.1630    add 0.9364    
Current (lb-rhs): -0.052986741065979004
570 domains visited
Cumulative time: 3.6804590225219727

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1259] [/input, 715] [/input-8, 1259] [/input, 715] [/input-8, 1259] [/input, 715] [/input-8, 1259] [/input, 715] [/input-8, 1259] [/input, 715] 
cut re-enabled after branching node selection
0 lb beta sum: 0.001153233228251338, worst -0.05214361101388931
10 lb beta sum: 0.0010991946328431368, worst -0.05209852010011673
Time: prepare 0.0247    bound 0.1702    transfer 0.0040    finalize 0.0035    func 0.2057    
Accumulated time: func 1.6237    prepare 0.1133    bound 1.4549    transfer 0.0218    finalize 0.0236    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00438194) min lb tensor(-0.05208831)
Number of Verified Splits: 0 of 512
No cut inferred: All or none verified.
Total number of valid cuts: 49.
#cuts 1-3: 1
#cuts 4-6: 13
#cuts 7-9: 35
#cuts >= 20: 0
BICCOS time: 0.015116453170776367 
BICCOS Cumulative time: 0.5020956993103027
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05209 (9), -0.05185 (9), -0.05155 (9), -0.05131 (9), -0.05118 (9), -0.05104 (9), -0.05085 (9), -0.05066 (9), -0.05064 (9), -0.05049 (9), -0.05033 (9), -0.05026 (9), -0.05021 (9), -0.05010 (9), -0.05006 (9), -0.04981 (9), -0.04974 (9), -0.04972 (9), -0.04967 (9), -0.04954 (9), 
Length of domains: 512
Time: pickout 0.0036    decision 0.0251    set_bounds 0.0177    solve 0.2059    add 0.0034    
Accumulated time: pickout 0.0243    decision 0.6757    set_bounds 0.1350    solve 1.3689    add 0.9398    
Current (lb-rhs): -0.05208830535411835
1082 domains visited
Cumulative time: 3.9518167972564697

BaB round 4
batch: 512
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 949] [/input-8, 548] [/input, 715] [/input-8, 548] [/input-8, 949] [/input-8, 548] [/input, 715] [/input-8, 548] [/input-8, 949] [/input-8, 548] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0012669197749346495, worst -0.051097653806209564
10 lb beta sum: 0.0012100656749680638, worst -0.0510801300406456
Time: prepare 0.0510    bound 0.1756    transfer 0.0068    finalize 0.0059    func 0.2461    
Accumulated time: func 1.8698    prepare 0.1646    bound 1.6305    transfer 0.0286    finalize 0.0295    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00072829) min lb tensor(-0.05107130)
Number of Verified Splits: 0 of 1024
No cut inferred: All or none verified.
Total number of valid cuts: 49.
#cuts 1-3: 1
#cuts 4-6: 13
#cuts 7-9: 35
#cuts >= 20: 0
BICCOS time: 0.03139138221740723 
BICCOS Cumulative time: 0.53348708152771
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05107 (10), -0.05083 (10), -0.05053 (10), -0.05051 (10), -0.05029 (10), -0.05026 (10), -0.05016 (10), -0.05006 (10), -0.04997 (10), -0.04984 (10), -0.04972 (10), -0.04966 (10), -0.04963 (10), -0.04961 (10), -0.04952 (10), -0.04947 (10), -0.04932 (10), -0.04929 (10), -0.04928 (10), -0.04920 (10), 
Length of domains: 1024
Time: pickout 0.0079    decision 0.0391    set_bounds 0.0399    solve 0.2464    add 0.0043    
Accumulated time: pickout 0.0322    decision 0.7149    set_bounds 0.1749    solve 1.6153    add 0.9441    
Current (lb-rhs): -0.051071301102638245
2106 domains visited
Cumulative time: 4.321570873260498

BaB round 5
batch: 1024
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 941] [/input-8, 1470] [/input-8, 548] [/input-8, 1470] [/input-8, 941] [/input-8, 1470] [/input-8, 548] [/input-8, 1470] [/input-8, 941] [/input-8, 932] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0013609062880277634, worst -0.05034244805574417
10 lb beta sum: 0.001482196617871523, worst -0.050314612686634064
Time: prepare 0.1007    bound 0.2340    transfer 0.0133    finalize 0.0115    func 0.3731    
Accumulated time: func 2.2429    prepare 0.2655    bound 1.8646    transfer 0.0419    finalize 0.0410    
all_split False
======================Cut inference begins======================
max lb tensor(0.00103512) min lb tensor(-0.05031135)
Number of Verified Splits: 38 of 2048
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 51.
#cuts 1-3: 1
#cuts 4-6: 15
#cuts 7-9: 35
#cuts >= 20: 0
BICCOS time: 0.07624697685241699 
BICCOS Cumulative time: 0.609734058380127
Preprocessing time: 0.06431412696838379 Inference time: 0.004307746887207031 Add cuts time: 0.004629850387573242 Cut analysis time: 0.0029952526092529297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05031 (11), -0.05001 (11), -0.04977 (11), -0.04974 (11), -0.04947 (11), -0.04944 (11), -0.04942 (11), -0.04933 (11), -0.04920 (11), -0.04904 (11), -0.04890 (11), -0.04890 (11), -0.04888 (11), -0.04888 (11), -0.04879 (11), -0.04872 (11), -0.04856 (11), -0.04853 (11), -0.04848 (11), -0.04843 (11), 
Length of domains: 2010
Time: pickout 0.0161    decision 0.0695    set_bounds 0.0883    solve 0.3736    add 0.0094    
Accumulated time: pickout 0.0483    decision 0.7844    set_bounds 0.2632    solve 1.9889    add 0.9534    
Current (lb-rhs): -0.05031134933233261
4116 domains visited
Cumulative time: 4.9571075439453125

BaB round 6
batch: 2010
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1470] [/input-8, 330] [/input-8, 1470] [/input-8, 330] [/input-8, 731] [/input-8, 330] [/input-8, 1470] [/input-8, 330] [/input-8, 731] [/input-8, 330] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0493699386715889
10 lb beta sum: 0.0014183640014380217, worst -0.04935730993747711
Time: prepare 0.0953    bound 0.3858    transfer 0.0180    finalize 0.0239    func 0.5495    
Accumulated time: func 2.7925    prepare 0.3611    bound 2.2503    transfer 0.0600    finalize 0.0649    
all_split False
======================Cut inference begins======================
max lb tensor(0.00321776) min lb tensor(-0.04935303)
Number of Verified Splits: 259 of 4020
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 2
#cuts 4-6: 9
#cuts 7-9: 35
#cuts >= 20: 0
BICCOS time: 0.18114829063415527 
BICCOS Cumulative time: 0.7908823490142822
Preprocessing time: 0.1383686065673828 Inference time: 0.032990455627441406 Add cuts time: 0.007178306579589844 Cut analysis time: 0.002610921859741211
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04935 (12), -0.04906 (12), -0.04900 (12), -0.04881 (12), -0.04877 (12), -0.04870 (12), -0.04852 (12), -0.04848 (12), -0.04846 (12), -0.04846 (12), -0.04845 (12), -0.04833 (12), -0.04824 (12), -0.04816 (12), -0.04816 (12), -0.04808 (12), -0.04804 (12), -0.04794 (12), -0.04794 (12), -0.04791 (12), 
Length of domains: 3761
Time: pickout 0.0259    decision 0.2632    set_bounds 0.1707    solve 0.5505    add 0.1416    
Accumulated time: pickout 0.0742    decision 1.0476    set_bounds 0.4339    solve 2.5394    add 1.0950    
Current (lb-rhs): -0.04935302585363388
7877 domains visited
Cumulative time: 6.304529428482056

BaB round 7
batch: 3761
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 731] [/input-8, 1453] [/input-8, 330] [/input-8, 1453] [/input-8, 1470] [/input-8, 1453] [/input-8, 330] [/input-8, 1453] [/input-8, 1470] [/input-8, 1453] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.048867739737033844
10 lb beta sum: 0.006178693380206823, worst -0.04886165261268616
Time: prepare 0.1954    bound 0.6485    transfer 0.0314    finalize 0.0451    func 0.9699    
Accumulated time: func 3.7623    prepare 0.5568    bound 2.8988    transfer 0.0914    finalize 0.1100    
all_split False
======================Cut inference begins======================
max lb tensor(0.00371855) min lb tensor(-0.04885712)
Number of Verified Splits: 511 of 7522
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 3
#cuts 4-6: 9
#cuts 7-9: 18
#cuts >= 20: 0
BICCOS time: 0.33421850204467773 
BICCOS Cumulative time: 1.12510085105896
Preprocessing time: 0.25535058975219727 Inference time: 0.06739974021911621 Add cuts time: 0.009712696075439453 Cut analysis time: 0.0017554759979248047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04886 (13), -0.04856 (13), -0.04851 (13), -0.04832 (13), -0.04828 (13), -0.04821 (13), -0.04802 (13), -0.04799 (13), -0.04797 (13), -0.04797 (13), -0.04795 (13), -0.04784 (13), -0.04775 (13), -0.04767 (13), -0.04766 (13), -0.04758 (13), -0.04755 (13), -0.04745 (13), -0.04745 (13), -0.04742 (13), 
Length of domains: 7011
Time: pickout 0.0543    decision 0.2187    set_bounds 0.5997    solve 0.9718    add 0.0343    
Accumulated time: pickout 0.1285    decision 1.2664    set_bounds 1.0335    solve 3.5112    add 1.1293    
Current (lb-rhs): -0.04885711520910263
14888 domains visited
Cumulative time: 8.53716230392456

BaB round 8
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1515] [/input-8, 932] [/input-8, 1453] [/input-8, 932] [/input-8, 932] [/input-8, 1453] [/input-8, 932] [/input-8, 1470] [/input-8, 1453] [/input-8, 1470] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04837851971387863
10 lb beta sum: 0.004397955723106861, worst -0.08544231951236725
Time: prepare 0.2197    bound 0.6892    transfer 0.0322    finalize 0.0545    func 1.0509    
Accumulated time: func 4.8132    prepare 0.7768    bound 3.5880    transfer 0.1236    finalize 0.1645    
all_split False
======================Cut inference begins======================
max lb tensor(0.00635822) min lb tensor(-0.04836932)
Number of Verified Splits: 688 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 10
#cuts 4-6: 5
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.6411116123199463 
BICCOS Cumulative time: 1.7662124633789062
Preprocessing time: 0.533994197845459 Inference time: 0.09623241424560547 Add cuts time: 0.009794473648071289 Cut analysis time: 0.0010905265808105469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04837 (14), -0.04808 (14), -0.04802 (14), -0.04783 (14), -0.04780 (14), -0.04773 (14), -0.04754 (14), -0.04750 (14), -0.04748 (14), -0.04747 (14), -0.04745 (14), -0.04735 (14), -0.04726 (14), -0.04718 (14), -0.04716 (14), -0.04708 (14), -0.04705 (14), -0.04696 (14), -0.04696 (14), -0.04692 (14), 
Length of domains: 10419
Time: pickout 0.0597    decision 0.4948    set_bounds 0.4093    solve 1.0536    add 0.0388    
Accumulated time: pickout 0.1882    decision 1.7612    set_bounds 1.4428    solve 4.5648    add 1.1681    
Current (lb-rhs): -0.04836931824684143
22392 domains visited
current_vram/total_varm: 39.2GB/99.9GB, batch_size increase to 8192
Cumulative time: 11.266111373901367

BaB round 9
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1453] [/input-8, 1453] [/input-8, 1515] [/input-8, 932] [/input-8, 1453] [/input-8, 330] [/input-8, 1515] [/input-8, 932] [/input-8, 1453] [/input-8, 330] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.047377489507198334
10 lb beta sum: 0.010662405751645565, worst -0.04737067222595215
Time: prepare 0.4460    bound 1.2918    transfer 0.0823    finalize 0.1038    func 2.0349    
Accumulated time: func 6.8481    prepare 1.2231    bound 4.8797    transfer 0.2060    finalize 0.2683    
all_split False
======================Cut inference begins======================
max lb tensor(0.00863849) min lb tensor(-0.04736536)
Number of Verified Splits: 820 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 11
#cuts 4-6: 5
#cuts 7-9: 1
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.7242343425750732 
BICCOS Cumulative time: 2.4904468059539795
Preprocessing time: 0.5723288059234619 Inference time: 0.14119505882263184 Add cuts time: 0.009577035903930664 Cut analysis time: 0.0011334419250488281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04802 (14), -0.04773 (14), -0.04748 (14), -0.04745 (14), -0.04737 (15), -0.04718 (14), -0.04716 (14), -0.04707 (15), -0.04707 (15), -0.04705 (14), -0.04691 (14), -0.04687 (15), -0.04682 (15), -0.04680 (15), -0.04678 (14), -0.04673 (14), -0.04662 (14), -0.04661 (15), -0.04657 (14), -0.04655 (14), 
Length of domains: 17791
Time: pickout 0.1269    decision 0.4668    set_bounds 1.1147    solve 2.3853    add 0.1007    
Accumulated time: pickout 0.3151    decision 2.2280    set_bounds 2.5575    solve 6.9501    add 1.2688    
Current (lb-rhs): -0.04801666736602783
37956 domains visited
current_vram/total_varm: 39.2GB/99.9GB, batch_size increase to 16384
Cumulative time: 16.232327699661255

BaB round 10
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 941] [/input, 1226] [/input-8, 941] [/input-8, 330] [/input, 1226] [/input-8, 941] [/input-8, 932] [/input, 1226] [/input-8, 941] [/input-8, 330] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0470246821641922
10 lb beta sum: 0.004400294274091721, worst -0.04701945185661316
Time: prepare 0.8677    bound 2.4984    transfer 0.1624    finalize 0.2201    func 4.2832    
Accumulated time: func 11.1312    prepare 2.0913    bound 7.3782    transfer 0.3684    finalize 0.4884    
all_split False
======================Cut inference begins======================
max lb tensor(0.00635391) min lb tensor(-0.04701508)
Number of Verified Splits: 903 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 12
#cuts 4-6: 8
#cuts 7-9: 13
#cuts 10-12: 1
#cuts 13-15: 3
#cuts >= 20: 0
BICCOS time: 1.2557730674743652 
BICCOS Cumulative time: 3.7462198734283447
Preprocessing time: 1.0558080673217773 Inference time: 0.1806652545928955 Add cuts time: 0.016678333282470703 Cut analysis time: 0.0026214122772216797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04707 (15), -0.04702 (15), -0.04687 (15), -0.04680 (16), -0.04676 (15), -0.04672 (15), -0.04661 (15), -0.04653 (15), -0.04650 (15), -0.04649 (15), -0.04647 (15), -0.04646 (16), -0.04645 (15), -0.04633 (15), -0.04630 (15), -0.04626 (16), -0.04623 (16), -0.04623 (15), -0.04621 (15), -0.04621 (15), 
Length of domains: 33272
Time: pickout 0.2469    decision 1.7654    set_bounds 1.8969    solve 4.2887    add 0.2441    
Accumulated time: pickout 0.5621    decision 3.9933    set_bounds 4.4544    solve 11.2388    add 1.5129    
Current (lb-rhs): -0.047068752348423004
69821 domains visited
current_vram/total_varm: 39.2GB/99.9GB, batch_size increase to 32768
Cumulative time: 25.97618818283081

BaB round 11
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 939] [/input-8, 939] [/input-8, 939] [/input-8, 939] [/input-8, 939] [/input-8, 939] [/input-8, 941] [/input-8, 939] [/input-8, 939] [/input-8, 939] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.046487048268318176
10 lb beta sum: 0.0011419943766668439, worst -0.04647573083639145
Time: prepare 1.7569    bound 10.1776    transfer 0.4599    finalize 0.9757    func 13.7963    
Accumulated time: func 24.9276    prepare 3.8487    bound 17.5558    transfer 0.8283    finalize 1.4641    
all_split False
======================Cut inference begins======================
max lb tensor(0.00802797) min lb tensor(-0.04646725)
Number of Verified Splits: 2215 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 2
#cuts 4-6: 2
#cuts 7-9: 23
#cuts 10-12: 13
#cuts 13-15: 3
#cuts >= 20: 0
BICCOS time: 3.21539044380188 
BICCOS Cumulative time: 6.961610317230225
Preprocessing time: 2.698000192642212 Inference time: 0.46265578269958496 Add cuts time: 0.05140042304992676 Cut analysis time: 0.00333404541015625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04647 (16), -0.04645 (16), -0.04626 (16), -0.04616 (16), -0.04612 (16), -0.04597 (16), -0.04593 (16), -0.04591 (16), -0.04590 (16), -0.04588 (16), -0.04586 (16), -0.04585 (17), -0.04572 (16), -0.04569 (16), -0.04562 (16), -0.04561 (16), -0.04559 (16), -0.04558 (16), -0.04556 (16), -0.04554 (17), 
Length of domains: 63825
Time: pickout 0.4713    decision 3.7008    set_bounds 3.5065    solve 13.8071    add 0.2181    
Accumulated time: pickout 1.0333    decision 7.6941    set_bounds 7.9609    solve 25.0459    add 1.7309    
Current (lb-rhs): -0.04646725207567215
133142 domains visited
Cumulative time: 50.99905204772949

BaB round 12
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1243] [/input-8, 941] [/input-8, 1243] [/input-8, 1243] [/input-8, 1243] [/input-8, 1243] [/input-8, 1243] [/input-8, 941] [/input-8, 1243] [/input-8, 1243] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04555375874042511
10 lb beta sum: 0.00020138436229899526, worst -0.04552936553955078
Time: prepare 1.7935    bound 10.2073    transfer 0.4746    finalize 1.2836    func 14.1983    
Accumulated time: func 39.1258    prepare 5.6426    bound 27.7631    transfer 1.3030    finalize 2.7477    
all_split False
======================Cut inference begins======================
max lb tensor(0.00931895) min lb tensor(-0.04551344)
Number of Verified Splits: 2948 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 2
#cuts 4-6: 2
#cuts 7-9: 12
#cuts 10-12: 6
#cuts 13-15: 1
#cuts >= 20: 0
BICCOS time: 3.7351367473602295 
BICCOS Cumulative time: 10.696747064590454
Preprocessing time: 2.2134108543395996 Inference time: 1.4554827213287354 Add cuts time: 0.06440544128417969 Cut analysis time: 0.0018377304077148438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04645 (16), -0.04616 (16), -0.04612 (16), -0.04591 (16), -0.04588 (16), -0.04586 (16), -0.04585 (17), -0.04562 (16), -0.04561 (16), -0.04558 (16), -0.04556 (16), -0.04552 (16), -0.04551 (17), -0.04549 (17), -0.04542 (16), -0.04534 (16), -0.04532 (16), -0.04531 (17), -0.04530 (17), -0.04529 (17), 
Length of domains: 93645
Time: pickout 0.4960    decision 3.8747    set_bounds 3.7777    solve 14.2093    add 2.6079    
Accumulated time: pickout 1.5293    decision 11.5688    set_bounds 11.7386    solve 39.2553    add 4.3388    
Current (lb-rhs): -0.04644816368818283
195730 domains visited
Cumulative time: 79.84481954574585

BaB round 13
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1243] [/input-8, 1470] [/input-8, 939] [/input-8, 939] [/input-8, 1470] [/input, 1144] [/input-8, 939] [/input-8, 1470] [/input, 1144] [/input-8, 1243] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.045535773038864136
10 lb beta sum: 0.007112099789083004, worst -0.04552220553159714
Time: prepare 1.8078    bound 10.1838    transfer 0.4836    finalize 0.5747    func 14.4556    
Accumulated time: func 53.5815    prepare 7.4508    bound 37.9469    transfer 1.7866    finalize 3.3224    
all_split False
======================Cut inference begins======================
max lb tensor(0.01077706) min lb tensor(-0.04550975)
Number of Verified Splits: 2854 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 2
#cuts 4-6: 3
#cuts 7-9: 5
#cuts 10-12: 8
#cuts 13-15: 2
#cuts >= 20: 0
BICCOS time: 2.977672576904297 
BICCOS Cumulative time: 13.674419641494751
Preprocessing time: 2.2899081707000732 Inference time: 0.6292040348052979 Add cuts time: 0.05679798126220703 Cut analysis time: 0.00176239013671875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04551 (17), -0.04551 (17), -0.04542 (18), -0.04529 (17), -0.04523 (17), -0.04519 (17), -0.04517 (17), -0.04517 (17), -0.04512 (18), -0.04505 (18), -0.04502 (17), -0.04501 (17), -0.04498 (17), -0.04497 (17), -0.04496 (17), -0.04496 (17), -0.04496 (17), -0.04488 (18), -0.04488 (17), -0.04487 (18), 
Length of domains: 123559
Time: pickout 0.5164    decision 3.3655    set_bounds 4.2935    solve 14.4669    add 0.2469    
Accumulated time: pickout 2.0457    decision 14.9343    set_bounds 16.0321    solve 53.7222    add 4.5857    
Current (lb-rhs): -0.045513443648815155
258412 domains visited
Cumulative time: 105.82194638252258

BaB round 14
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 520] [/input-8, 939] [/input-8, 1243] [/input, 2201] [/input-8, 1243] [/input-8, 1243] [/input, 2201] [/input-8, 1243] [/input, 1144] [/input, 2201] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.044801875948905945
10 lb beta sum: 0.01151341199874878, worst -0.04479597508907318
Time: prepare 1.8248    bound 10.1175    transfer 0.5028    finalize 1.7045    func 14.5831    
Accumulated time: func 68.1646    prepare 9.2761    bound 48.0644    transfer 2.2893    finalize 5.0269    
all_split False
======================Cut inference begins======================
max lb tensor(0.01069397) min lb tensor(-0.04479285)
Number of Verified Splits: 2479 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 2
#cuts 4-6: 3
#cuts 7-9: 10
#cuts 10-12: 5
#cuts 13-15: 3
#cuts >= 20: 0
BICCOS time: 2.921635866165161 
BICCOS Cumulative time: 16.596055507659912
Preprocessing time: 2.2495174407958984 Inference time: 0.5704162120819092 Add cuts time: 0.09969186782836914 Cut analysis time: 0.002010345458984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04551 (17), -0.04551 (17), -0.04542 (18), -0.04529 (17), -0.04519 (17), -0.04517 (17), -0.04517 (17), -0.04505 (18), -0.04498 (17), -0.04497 (17), -0.04496 (17), -0.04496 (17), -0.04496 (17), -0.04488 (18), -0.04488 (17), -0.04487 (18), -0.04486 (17), -0.04479 (18), -0.04476 (17), -0.04474 (17), 
Length of domains: 153848
Time: pickout 0.5204    decision 3.9352    set_bounds 3.2442    solve 14.5941    add 0.2167    
Accumulated time: pickout 2.5662    decision 18.8695    set_bounds 19.2763    solve 68.3163    add 4.8024    
Current (lb-rhs): -0.045513443648815155
321469 domains visited
Cumulative time: 131.4043972492218

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1453] [/input, 1193] [/input-8, 933] [/input-8, 933] [/input-8, 1243] [/input-8, 1243] [/input, 2201] [/input-8, 939] [/input-8, 1243] [/input, 3771] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0011743421200662851, worst -0.24812394380569458
10 lb beta sum: 0.00760067580267787, worst -0.04507599025964737
Time: prepare 3.3232    bound 10.1232    transfer 0.5167    finalize 0.6164    func 15.0172    
Accumulated time: func 83.1818    prepare 12.5997    bound 58.1876    transfer 2.8061    finalize 5.6433    
all_split False
======================Cut inference begins======================
max lb tensor(0.00979352) min lb tensor(-0.04507416)
Number of Verified Splits: 2230 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 2
#cuts 4-6: 3
#cuts 7-9: 14
#cuts 10-12: 5
#cuts 13-15: 6
#cuts >= 20: 0
BICCOS time: 3.0720229148864746 
BICCOS Cumulative time: 19.668078422546387
Preprocessing time: 2.4276204109191895 Inference time: 0.5527338981628418 Add cuts time: 0.0889594554901123 Cut analysis time: 0.0027091503143310547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04551 (17), -0.04542 (18), -0.04517 (17), -0.04517 (17), -0.04507 (18), -0.04505 (18), -0.04497 (17), -0.04496 (17), -0.04496 (17), -0.04488 (18), -0.04488 (17), -0.04487 (18), -0.04487 (18), -0.04479 (18), -0.04477 (18), -0.04466 (17), -0.04463 (17), -0.04463 (17), -0.04462 (17), -0.04461 (17), 
Length of domains: 184386
Time: pickout 0.5230    decision 4.5499    set_bounds 3.3971    solve 15.0324    add 0.4075    
Accumulated time: pickout 3.0892    decision 23.4194    set_bounds 22.6734    solve 83.3488    add 5.2099    
Current (lb-rhs): -0.04550974816083908
384775 domains visited
Cumulative time: 158.54825401306152

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 520] [/input-8, 520] [/input, 2201] [/input-8, 520] [/input-8, 520] [/input-8, 933] [/input-8, 933] [/input, 1193] [/input, 2201] [/input-8, 520] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04508545249700546
10 lb beta sum: 0.005557887256145477, worst -0.04507902264595032
Time: prepare 1.9174    bound 10.1425    transfer 0.5187    finalize 2.2129    func 15.2283    
Accumulated time: func 98.4100    prepare 14.5176    bound 68.3302    transfer 3.3248    finalize 7.8562    
all_split False
======================Cut inference begins======================
max lb tensor(0.01089501) min lb tensor(-0.04507618)
Number of Verified Splits: 1840 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 2
#cuts 4-6: 3
#cuts 7-9: 14
#cuts 10-12: 6
#cuts 13-15: 11
#cuts >= 20: 0
BICCOS time: 2.9505977630615234 
BICCOS Cumulative time: 22.61867618560791
Preprocessing time: 2.4943275451660156 Inference time: 0.41298604011535645 Add cuts time: 0.040213584899902344 Cut analysis time: 0.0030705928802490234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04517 (17), -0.04508 (18), -0.04507 (18), -0.04496 (17), -0.04489 (19), -0.04487 (18), -0.04479 (18), -0.04477 (18), -0.04473 (18), -0.04463 (17), -0.04462 (17), -0.04459 (19), -0.04458 (18), -0.04457 (18), -0.04454 (18), -0.04454 (18), -0.04453 (19), -0.04452 (18), -0.04452 (18), -0.04444 (18), 
Length of domains: 215314
Time: pickout 0.5174    decision 4.8191    set_bounds 3.4542    solve 15.2403    add 0.3339    
Accumulated time: pickout 3.6066    decision 28.2385    set_bounds 26.1276    solve 98.5891    add 5.5438    
Current (lb-rhs): -0.045169904828071594
448471 domains visited
Cumulative time: 186.00214219093323

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1193] [/input-8, 520] [/input-8, 939] [/input, 1226] [/input, 2201] [/input-8, 939] [/input, 1226] [/input-8, 520] [/input-8, 939] [/input, 1226] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04474559426307678
10 lb beta sum: 0.005102835595607758, worst -0.044733718037605286
Time: prepare 1.7978    bound 10.1845    transfer 0.5459    finalize 0.6052    func 13.5592    
Accumulated time: func 111.9692    prepare 16.3158    bound 78.5147    transfer 3.8707    finalize 8.4614    
all_split False
======================Cut inference begins======================
max lb tensor(0.01010144) min lb tensor(-0.04473025)
Number of Verified Splits: 1557 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 2
#cuts 4-6: 3
#cuts 7-9: 13
#cuts 10-12: 12
#cuts 13-15: 16
#cuts >= 20: 0
BICCOS time: 4.608074426651001 
BICCOS Cumulative time: 27.22675061225891
Preprocessing time: 2.2057690620422363 Inference time: 2.358278512954712 Add cuts time: 0.039948463439941406 Cut analysis time: 0.004078388214111328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04508 (18), -0.04507 (18), -0.04489 (19), -0.04487 (18), -0.04479 (18), -0.04477 (18), -0.04473 (18), -0.04473 (18), -0.04459 (19), -0.04458 (18), -0.04457 (18), -0.04454 (18), -0.04454 (18), -0.04453 (19), -0.04453 (18), -0.04452 (18), -0.04452 (18), -0.04444 (18), -0.04441 (18), -0.04435 (19), 
Length of domains: 246525
Time: pickout 0.5326    decision 5.0665    set_bounds 3.2052    solve 13.5741    add 0.2322    
Accumulated time: pickout 4.1391    decision 33.3050    set_bounds 29.3327    solve 112.1632    add 5.7760    
Current (lb-rhs): -0.04507618397474289
512450 domains visited
Time out!!!!!!!!
Result: unknown in 217.6086 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 98, vnnlib ID: 98 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.37744045, -10.80906868,  -8.33961296,  -7.23910141,  -7.87373829,
          -7.23198557,  -8.77867413,  -8.54426098,  -8.87928581, -11.17584705]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [575]; unstable size 575; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 575] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 575] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 575] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 203] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.58143508,  2.85189414,  0.84675455, -0.01254817,  0.32769132,
          1.16247284,  0.93366623,  1.05069137,  3.29250598]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.37744045, -10.80906868,  -8.33961296,  -7.23910141,  -7.87373829,
          -7.23198557,  -8.77867413,  -8.54426098,  -8.87928581, -11.17584705]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.25428486, -10.69138241,  -8.43463802,  -7.42673492,  -7.95977592,
           -7.43381834,  -8.90330410,  -8.69818687,  -8.78907394, -11.06161213]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00708342]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0188 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1658 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 99, vnnlib ID: 99 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.58199978, -10.54873943,  -7.14900303,  -7.91397190,  -7.28075123,
          -7.99828959,  -6.68323803,  -8.80146408, -10.43879700, -10.40846443]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [399]; unstable size 399; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 399] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 399] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 399] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 148] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.51980448, 3.39100170, 0.25737536, 1.03178000, 0.39332831, 1.10958445,
         1.78996491, 3.33789563, 3.28931856]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0906 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 100, vnnlib ID: 100 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.83844137, -7.17797089, -2.05605650, -2.00732827, -2.00628233,
         -2.03319240, -2.81610751, -2.43622375, -6.60829258, -6.27670431]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [528]; unstable size 528; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 528] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 528] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 528] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 219] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.83865047,  4.03018188, -0.40402746, -0.52554810,  0.00620086,
          0.34507680, -0.21024579,  3.40293169,  3.30322194]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.83844137, -7.17797089, -2.05605650, -2.00732827, -2.00628233,
         -2.03319240, -2.81610751, -2.43622375, -6.60829258, -6.27670431]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.83844137, -7.17797089, -2.05605650, -2.00732780, -2.00628185,
          -2.03319216, -2.81610799, -2.43622375, -6.60829067, -6.27670383],
         [-4.83844137, -7.17797089, -2.05605650, -2.00732780, -2.00628185,
          -2.03319216, -2.81610799, -2.43622375, -6.60829067, -6.27670383]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.04872870, -0.00104594,  0.42889595]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0937 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 101, vnnlib ID: 101 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.07705116,  -8.48606205,  -8.37792206, -10.12561226,  -8.12428093,
         -10.33940601, -10.15317154,  -9.66516113,  -4.95619965,  -7.79425383]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [671]; unstable size 671; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 129, 1, 671] with unstable size 128 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 671] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 671] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [128]; unstable size 128; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 128] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 128] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.19773501,  2.97831368,  2.78014851,  4.45424080,  2.49679518,
          4.66083670,  4.47122526,  3.93926191,  2.36554956]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.07705116,  -8.48606205,  -8.37792206, -10.12561226,  -8.12428093,
         -10.33940601, -10.15317154,  -9.66516113,  -4.95619965,  -7.79425383]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.05900955,  -8.47574997,  -8.22770882,  -9.97550106,  -7.97159195,
          -10.18599319,  -9.99292660,  -9.50112343,  -5.14422226,  -7.78701639]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.08521271]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0055 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0709 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 102, vnnlib ID: 102 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.02811790, -5.76409245,  0.56327426, -0.35700279, -0.37683630,
         -0.41983262, -1.42136240, -0.92577142, -3.90326118, -3.97468066]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [607]; unstable size 607; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 194, 1, 607] with unstable size 193 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 607] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 607] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [193]; unstable size 193; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 193] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.11923027,  4.51170063, -1.18529093, -0.36719012, -0.30698454,
          0.61107695,  0.20735407,  2.80999303,  2.81428099]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.02811790, -5.76409245,  0.56327426, -0.35700279, -0.37683630,
         -0.41983262, -1.42136240, -0.92577142, -3.90326118, -3.97468066]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.02811766, -5.76409245,  0.56327415, -0.35700274, -0.37683612,
          -0.41983256, -1.42136264, -0.92577130, -3.90326071, -3.97468066],
         [-2.02811766, -5.76409245,  0.56327415, -0.35700274, -0.37683612,
          -0.41983256, -1.42136264, -0.92577130, -3.90326071, -3.97468066]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.94011027, -0.01983339,  0.04299644]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0797 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 103, vnnlib ID: 103 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.43231535, -10.02100658,  -4.30439758,  -6.53697205,  -3.91013026,
          -6.62372160,  -5.03309059,  -6.37713289, -10.00526237, -10.26388931]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [627]; unstable size 627; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 151, 1, 627] with unstable size 150 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 627] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 627] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [150]; unstable size 150; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 150] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 150] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.15813851, 5.56159401, 0.26368931, 2.36857629, 2.45099640, 0.80457848,
         2.22993994, 5.61817694, 5.84348679]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0850 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 104, vnnlib ID: 104 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.93001795, -6.11589432, -2.52689791, -2.70035768, -2.83776188,
         -2.69209170, -3.78257012, -3.50543237, -5.88740206, -5.34398603]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [636]; unstable size 636; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 636] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 636] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 636] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 174] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.56663609,  2.53126144, -0.52419877, -0.01101995, -0.24716067,
          0.67172003,  0.37379950,  2.27086020,  1.89936161]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.93001795, -6.11589432, -2.52689791, -2.70035768, -2.83776188,
         -2.69209170, -3.78257012, -3.50543237, -5.88740206, -5.34398603]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.93001842, -6.11589527, -2.52689838, -2.70035863, -2.83776259,
          -2.69209194, -3.78257155, -3.50543332, -5.88740253, -5.34398603],
         [-4.93001842, -6.11589527, -2.52689838, -2.70035863, -2.83776259,
          -2.69209194, -3.78257155, -3.50543332, -5.88740253, -5.34398603]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16519356,  0.00826669,  0.14567065]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.24920642,  0.20158738,  0.21746039,  ..., -0.57619047,
            -0.57619047, -0.63968253],
           [ 0.29682547,  0.24920642,  0.23333341,  ..., -0.71904761,
            -0.94126981, -0.81428570],
           [ 0.23333341,  0.16984135,  0.20158738,  ..., -0.67142856,
            -1.05238092, -0.71904761],
           ...,
           [-0.30634910, -0.30634910, -0.27460307,  ..., -0.35396814,
            -0.29047608, -0.29047608],
           [-0.30634910, -0.30634910, -0.36984116,  ..., -0.36984116,
            -0.32222211, -0.22698402],
           [-0.25873005, -0.22698402, -0.43333322,  ..., -0.41746020,
            -0.35396814, -0.29047608]],

          [[-0.14492741, -0.14492741, -0.12882435,  ..., -0.59581316,
            -0.59581316, -0.64412236],
           [-0.09661824, -0.11272129, -0.12882435,  ..., -0.75684375,
            -0.99838966, -0.82125598],
           [-0.16103047, -0.17713353, -0.14492741,  ..., -0.70853460,
            -1.11111104, -0.75684375],
           ...,
           [-0.40257636, -0.40257636, -0.38647330,  ..., -0.74074072,
            -0.62801927, -0.66022539],
           [-0.40257636, -0.40257636, -0.48309177,  ..., -0.72463763,
            -0.67632848, -0.57971013],
           [-0.35426718, -0.32206106, -0.54750401,  ..., -0.72463763,
            -0.69243151, -0.61191624]],

          [[-0.05847061, -0.07346311, -0.04347810,  ..., -0.25337315,
            -0.31334329, -0.32833579],
           [-0.01349309, -0.04347810, -0.04347810,  ..., -0.43328333,
            -0.71814090, -0.53823084],
           [-0.07346311, -0.10344811, -0.05847061,  ..., -0.43328333,
            -0.88305843, -0.46326834],
           ...,
           [-0.41829082, -0.38830581, -0.37331331,  ..., -0.59820086,
            -0.52323836, -0.53823084],
           [-0.40329832, -0.40329832, -0.44827583,  ..., -0.59820086,
            -0.55322337, -0.47826082],
           [-0.35832080, -0.31334329, -0.50824583,  ..., -0.58320838,
            -0.55322337, -0.50824583]]],


         [[[ 0.24920642,  0.20158738,  0.21746039,  ..., -0.57619047,
            -0.57619047, -0.63968253],
           [ 0.29682547,  0.24920642,  0.23333341,  ..., -0.71904761,
            -0.94126981, -0.81428570],
           [ 0.23333341,  0.16984135,  0.20158738,  ..., -0.67142856,
            -1.05238092, -0.71904761],
           ...,
           [-0.30634910, -0.30634910, -0.27460307,  ..., -0.35396814,
            -0.29047608, -0.29047608],
           [-0.30634910, -0.30634910, -0.36984116,  ..., -0.36984116,
            -0.32222211, -0.22698402],
           [-0.25873005, -0.22698402, -0.43333322,  ..., -0.41746020,
            -0.35396814, -0.29047608]],

          [[-0.14492741, -0.14492741, -0.12882435,  ..., -0.59581316,
            -0.59581316, -0.64412236],
           [-0.09661824, -0.11272129, -0.12882435,  ..., -0.75684375,
            -0.99838966, -0.82125598],
           [-0.16103047, -0.17713353, -0.14492741,  ..., -0.70853460,
            -1.11111104, -0.75684375],
           ...,
           [-0.40257636, -0.40257636, -0.38647330,  ..., -0.74074072,
            -0.62801927, -0.66022539],
           [-0.40257636, -0.40257636, -0.48309177,  ..., -0.72463763,
            -0.67632848, -0.57971013],
           [-0.35426718, -0.32206106, -0.54750401,  ..., -0.72463763,
            -0.69243151, -0.61191624]],

          [[-0.05847061, -0.07346311, -0.04347810,  ..., -0.25337315,
            -0.31334329, -0.32833579],
           [-0.01349309, -0.04347810, -0.04347810,  ..., -0.43328333,
            -0.71814090, -0.53823084],
           [-0.07346311, -0.10344811, -0.05847061,  ..., -0.43328333,
            -0.88305843, -0.46326834],
           ...,
           [-0.41829082, -0.38830581, -0.37331331,  ..., -0.59820086,
            -0.52323836, -0.53823084],
           [-0.40329832, -0.40329832, -0.44827583,  ..., -0.59820086,
            -0.55322337, -0.47826082],
           [-0.35832080, -0.31334329, -0.50824583,  ..., -0.58320838,
            -0.55322337, -0.50824583]]],


         [[[ 0.24920642,  0.20158738,  0.21746039,  ..., -0.57619047,
            -0.57619047, -0.63968253],
           [ 0.29682547,  0.24920642,  0.23333341,  ..., -0.71904761,
            -0.94126981, -0.81428570],
           [ 0.23333341,  0.16984135,  0.20158738,  ..., -0.67142856,
            -1.05238092, -0.71904761],
           ...,
           [-0.30634910, -0.30634910, -0.27460307,  ..., -0.35396814,
            -0.29047608, -0.29047608],
           [-0.30634910, -0.30634910, -0.36984116,  ..., -0.36984116,
            -0.32222211, -0.22698402],
           [-0.25873005, -0.22698402, -0.43333322,  ..., -0.41746020,
            -0.35396814, -0.29047608]],

          [[-0.14492741, -0.14492741, -0.12882435,  ..., -0.59581316,
            -0.59581316, -0.64412236],
           [-0.09661824, -0.11272129, -0.12882435,  ..., -0.75684375,
            -0.99838966, -0.82125598],
           [-0.16103047, -0.17713353, -0.14492741,  ..., -0.70853460,
            -1.11111104, -0.75684375],
           ...,
           [-0.40257636, -0.40257636, -0.38647330,  ..., -0.74074072,
            -0.62801927, -0.66022539],
           [-0.40257636, -0.40257636, -0.48309177,  ..., -0.72463763,
            -0.67632848, -0.57971013],
           [-0.35426718, -0.32206106, -0.54750401,  ..., -0.72463763,
            -0.69243151, -0.61191624]],

          [[-0.05847061, -0.07346311, -0.04347810,  ..., -0.25337315,
            -0.31334329, -0.32833579],
           [-0.01349309, -0.04347810, -0.04347810,  ..., -0.43328333,
            -0.71814090, -0.53823084],
           [-0.07346311, -0.10344811, -0.05847061,  ..., -0.43328333,
            -0.88305843, -0.46326834],
           ...,
           [-0.41829082, -0.38830581, -0.37331331,  ..., -0.59820086,
            -0.52323836, -0.53823084],
           [-0.40329832, -0.40329832, -0.44827583,  ..., -0.59820086,
            -0.55322337, -0.47826082],
           [-0.35832080, -0.31334329, -0.50824583,  ..., -0.58320838,
            -0.55322337, -0.50824583]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0775 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 105, vnnlib ID: 105 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.00338268, -10.28219223,  -7.15202951,  -7.92889309,  -7.82962704,
          -8.00282669,  -8.39284706,  -8.90988731,  -9.23245716,  -9.69780827]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [521]; unstable size 521; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 239, 1, 521] with unstable size 238 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 521] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 521] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [238]; unstable size 238; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 238] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 238] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.72178543,  0.36531401, -2.17974424, -1.32797301, -1.40488386,
         -1.24957263, -1.02663398, -0.66461682, -0.09302193]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.00338268, -10.28219223,  -7.15202951,  -7.92889309,  -7.82962704,
          -8.00282669,  -8.39284706,  -8.90988731,  -9.23245716,  -9.69780827]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.00338173, -10.28219318,  -7.15202951,  -7.92889309,  -7.82962799,
           -8.00282669,  -8.39284611,  -8.90988731,  -9.23245621,  -9.69780731],
         [ -8.00338173, -10.28219318,  -7.15202951,  -7.92889309,  -7.82962799,
           -8.00282669,  -8.39284611,  -8.90988731,  -9.23245621,  -9.69780731]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.90650558, -1.75785780, -0.98099422, -1.08025932, -0.90706062,
          -0.51704121,  0.32256889,  0.78792000]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         ...,


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0799 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 106, vnnlib ID: 106 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.55728149, -3.29340839, -5.60895300, -5.84854221, -5.21763039,
         -5.96553278, -5.89570904, -5.05772591, -2.31981516, -3.37378526]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [503]; unstable size 503; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 503] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 503] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 503] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 171] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.30047607,  1.62997246,  1.88469410,  1.13955164,  1.99374580,
          1.89228392,  0.82793808, -1.50930858, -0.16130126]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.55728149, -3.29340839, -5.60895300, -5.84854221, -5.21763039,
         -5.96553278, -5.89570904, -5.05772591, -2.31981516, -3.37378526]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.55728054, -3.29340792, -5.60895252, -5.84854126, -5.21762943,
          -5.96553278, -5.89570808, -5.05772543, -2.31981421, -3.37378430],
         [-3.55728054, -3.29340792, -5.60895252, -5.84854126, -5.21762943,
          -5.96553278, -5.89570808, -5.05772543, -2.31981421, -3.37378430]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.26387262, -0.97359371,  0.08037639]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]],


         [[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]],


         [[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0735 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 107, vnnlib ID: 107 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.40574551, -9.71419811, -7.44596434, -8.90537739, -7.12733173,
         -9.08124161, -9.19281673, -8.36250019, -6.23399162, -9.56327915]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [557]; unstable size 557; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 190, 1, 557] with unstable size 189 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 557] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 557] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [189]; unstable size 189; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 189] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 189] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.60150957, 1.47714353, 2.81160688, 1.12638509, 2.97082520, 2.97414351,
         2.26859927, 0.29780388, 3.46658897]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0609 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 108, vnnlib ID: 108 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.84473133, -10.54042339,  -8.17759705,  -8.29182148,  -7.74204731,
          -8.36287403,  -7.75897408,  -9.04864311, -11.14440346, -10.47354794]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [585]; unstable size 585; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 585] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 585] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 585] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 216] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.04735827,  1.40457797, -0.36931920, -0.89572740,  0.04944561,
         -0.85430741,  0.22342521,  2.20092058,  1.37345743]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.84473133, -10.54042339,  -8.17759705,  -8.29182148,  -7.74204731,
          -8.36287403,  -7.75897408,  -9.04864311, -11.14440346, -10.47354794]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.84472942, -10.54042244,  -8.17759705,  -8.29182243,  -7.74204826,
           -8.36287403,  -7.75897312,  -9.04864311, -11.14440155, -10.47354794],
         [ -9.84472942, -10.54042244,  -8.17759705,  -8.29182243,  -7.74204826,
           -8.36287403,  -7.75897312,  -9.04864311, -11.14440155, -10.47354794]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11422539, -0.54977417, -0.53284931]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0721 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 109, vnnlib ID: 109 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.50140810, -11.02397823,  -8.54122639, -10.14165115,  -9.63691139,
         -10.37123966, -10.39661026, -10.64028358,  -9.73715496, -10.65245342]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [237]; unstable size 237; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 100, 1, 237] with unstable size 99 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 237] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 237] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [99]; unstable size 99; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 99] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 99] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.88083577, 1.77790618, 3.23222160, 2.73587132, 3.45677900, 3.48044491,
         3.60492229, 2.78642988, 3.66938233]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0674 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 110, vnnlib ID: 110 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.10360909, -14.90222263, -10.64630795, -10.67387867, -10.32881927,
         -10.73543262,  -8.65091515, -12.13699913, -14.77171898, -15.26986790]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [377]; unstable size 377; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 242, 1, 377] with unstable size 241 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 377] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 377] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [241]; unstable size 241; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 241] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 241] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.91985512, 5.48559284, 1.68281043, 1.66879582, 1.33047330, 1.72007775,
         2.92767143, 5.54262400, 5.84726429]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0660 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 111, vnnlib ID: 111 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.24005079, -9.04290104, -4.47385645, -6.15989971, -3.75543547,
         -6.18814945, -5.15722942, -4.77376652, -9.54131126, -8.83624268]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [550]; unstable size 550; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 550] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 550] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 550] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 203] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.75045252, 4.26294231, 0.44944501, 1.99260736, 2.02144241, 0.96410054,
         0.68850255, 4.72861576, 4.22467422]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0699 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 112, vnnlib ID: 112 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.06766558, -6.83603859, -6.95109749, -7.23270035, -7.89028740,
         -7.38764238, -7.01568794, -7.03979397, -5.81813335, -5.25799608]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 147, 1, 509] with unstable size 146 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 509] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 146] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.27733994, 1.24176264, 0.94732475, 1.20107603, 1.83796215, 1.33658981,
         1.02798796, 0.93377829, 0.00646114]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0680 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 113, vnnlib ID: 113 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.44208622,  -9.75026035,  -7.34684753,  -6.16673279,  -7.47608280,
          -6.11000681,  -7.20957756,  -7.78478622, -11.07736111,  -9.72049713]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [596]; unstable size 596; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 596] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 596] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 596] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 200] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.83063102,  2.85584402,  0.91094625,  1.03836179, -0.07551450,
          0.71604657,  1.38741755,  4.26548862,  2.89728928]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.44208622,  -9.75026035,  -7.34684753,  -6.16673279,  -7.47608280,
          -6.11000681,  -7.20957756,  -7.78478622, -11.07736111,  -9.72049713]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.44208622,  -9.75026035,  -7.34684753,  -6.16673279,  -7.47608280,
           -6.11000681,  -7.20957756,  -7.78478622, -11.07736111,  -9.72049713]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05672598]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.03650784, -1.00476182, -0.75079364,  ..., -0.68730158,
            -0.90952379, -1.62380958],
           [-0.44920623, -0.95714283, -0.67142856,  ..., -0.32222211,
            -0.65555555, -1.62380958],
           [-0.09999990, -0.92539680, -0.63968253,  ..., -0.22698402,
            -0.57619047, -1.63968253],
           ...,
           [-0.27460307, -0.29047608, -0.33809513,  ..., -0.87777776,
            -0.51269841, -0.48095238],
           [-0.30634910, -0.30634910, -0.33809513,  ..., -1.09999990,
            -0.65555555, -0.49682540],
           [-0.40158719, -0.40158719, -0.41746020,  ..., -1.29047608,
            -0.87777776, -0.62380952]],

          [[-1.62640905, -1.72302747, -1.65861523,  ..., -1.49758446,
            -1.57809973, -1.75523353],
           [-1.38486302, -1.77133656, -1.61030602,  ..., -1.35265696,
            -1.49758446, -1.75523353],
           [-1.09500802, -1.80354273, -1.62640905,  ..., -1.22383249,
            -1.40096617, -1.75523353],
           ...,
           [-1.25603855, -1.25603855, -1.28824472,  ..., -0.72463763,
            -0.43478248, -0.51529789],
           [-1.28824472, -1.25603855, -1.28824472,  ..., -0.88566822,
            -0.48309177, -0.45088565],
           [-1.33655393, -1.33655393, -1.33655393,  ..., -1.12721407,
            -0.67632848, -0.46698871]],

          [[-1.48275876, -1.52773619, -1.49775124,  ..., -1.28785622,
            -1.34782624, -1.42278874],
           [-1.15292358, -1.55772126, -1.54272878,  ..., -1.12293863,
            -1.19790113, -1.42278874],
           [-0.89805096, -1.54272878, -1.51274371,  ..., -1.06296861,
            -1.13793111, -1.43778121],
           ...,
           [-0.94302845, -0.94302845, -0.95802099,  ..., -0.61319339,
            -0.38830581, -0.52323836],
           [-0.94302845, -0.94302845, -0.94302845,  ..., -0.70314842,
            -0.34332830, -0.38830581],
           [-0.98800600, -1.00299859, -1.00299859,  ..., -0.89805096,
            -0.52323836, -0.31334329]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0640 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 114, vnnlib ID: 114 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.65542030, -10.12491035,  -9.28998947, -10.89940071,  -9.46046829,
         -11.02120876, -10.39476299, -11.24895477,  -7.53916931, -10.56444263]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 197, 1, 509] with unstable size 196 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 509] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [196]; unstable size 196; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 196] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 196] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.85671949, 2.11677980, 3.61477685, 2.21671772, 3.72679424, 3.03720021,
         3.80708671, 0.44335449, 3.26269913]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0676 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 115, vnnlib ID: 115 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.92224836, -9.30357933, -4.86471462, -5.74703979, -3.76322746,
         -5.79184532, -4.91436577, -5.34334707, -8.45374775, -9.23935318]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 509] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 509] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 239] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.55012679, 4.69829416, 0.87078291, 1.70267844, 1.74382305, 0.83639139,
         1.21680450, 3.97037983, 4.71871185]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0663 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 116, vnnlib ID: 116 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.46497631, -11.33358383,  -8.85467815,  -7.44927025,  -9.22317123,
          -7.37944174,  -9.60250664,  -8.70856094, -10.32826042, -10.40810776]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 161, 1, 540] with unstable size 160 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 540] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [160]; unstable size 160; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 160] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 160] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.58313560, 3.18968081, 1.22978044, 0.05482836, 1.50812185, 1.89584780,
         0.94890094, 2.30877233, 2.35839391]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0586 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 117, vnnlib ID: 117 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.46045923, -4.62828922, -5.05963278, -6.18664169, -5.28851128,
         -6.36921692, -6.12083912, -6.04943180, -0.93621290, -3.70123649]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [537]; unstable size 537; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 537] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 537] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 537] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 159] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.17089856, 3.15421653, 3.54188681, 4.60494995, 3.75584626, 4.77829981,
         4.57753944, 4.42675829, 2.20462656]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0648 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 118, vnnlib ID: 118 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.41606951, -3.73614860, -5.60977221, -6.62537479, -6.33034801,
         -6.65032578, -8.53272724, -6.92770529, -4.97527218, -5.08467150]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [406]; unstable size 406; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 137, 1, 406] with unstable size 136 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 406] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 406] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [136]; unstable size 136; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 136] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 136] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.06374383, 1.19116187, 2.15339327, 1.93856001, 2.16962671, 4.05398226,
         2.44965196, 0.61252069, 1.12175798]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0622 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 119, vnnlib ID: 119 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.60672903, -5.77713490, -1.78710592, -1.64563823, -1.64935160,
         -1.71567798, -2.18223453, -2.02389979, -4.62978458, -4.60459995]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [778]; unstable size 778; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 219, 1, 778] with unstable size 218 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 778] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 778] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [218]; unstable size 218; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 218] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 218] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.25424409,  3.26128554, -0.22337759, -0.42366934,  0.04887801,
          0.13689733, -0.16968274,  2.10664511,  2.17941141]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.60672903, -5.77713490, -1.78710592, -1.64563823, -1.64935160,
         -1.71567798, -2.18223453, -2.02389979, -4.62978458, -4.60459995]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.61329794, -5.77425766, -1.79143727, -1.65318608, -1.64977872,
          -1.72312260, -2.18866110, -2.02094007, -4.63334703, -4.60565472],
         [-3.61329794, -5.77425766, -1.79143727, -1.65318608, -1.64977872,
          -1.72312260, -2.18866110, -2.02094007, -4.63334703, -4.60565472]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.13825119, -0.00340736,  0.36775398]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0306 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0984 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 120, vnnlib ID: 120 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -4.54532385, -11.30416203,  -4.10411549,  -4.39919186,  -6.40133953,
          -4.42965555,  -6.84690285,  -5.18702269, -10.52285004, -10.39758968]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [314]; unstable size 314; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 97, 1, 314] with unstable size 96 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 314] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 314] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [96]; unstable size 96; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 96] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 96] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 6.35177374, -0.66230357, -0.42160916,  1.53926945, -0.39580524,
          1.98930943,  0.27601612,  5.74486685,  5.50957346]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -4.54532385, -11.30416203,  -4.10411549,  -4.39919186,  -6.40133953,
          -4.42965555,  -6.84690285,  -5.18702269, -10.52285004, -10.39758968]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -4.54532337, -11.30416203,  -4.10411406,  -4.39919186,  -6.40133953,
           -4.42965508,  -6.84690189,  -5.18702173, -10.52284813, -10.39758873],
         [ -4.54532337, -11.30416203,  -4.10411406,  -4.39919186,  -6.40133953,
           -4.42965508,  -6.84690189,  -5.18702173, -10.52284813, -10.39758873]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44120932, -0.14613152, -0.11566830]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0838 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 121, vnnlib ID: 121 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.59993410, -4.38716555, -7.01152945, -7.42306519, -6.37219429,
         -7.47539234, -7.27996445, -6.98678732, -7.51602745, -5.72939539]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [503]; unstable size 503; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 202, 1, 503] with unstable size 201 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 503] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 503] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [201]; unstable size 201; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 201] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 201] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.36778975, 1.58436394, 2.04665852, 0.99501610, 2.08592606, 1.87148952,
         1.65961504, 2.34397459, 1.09861779]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0790 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 122, vnnlib ID: 122 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.81995726, -5.13494205, -8.06528854, -7.87783623, -8.02696037,
         -7.91830969, -8.81726456, -7.94001102, -5.16691113, -6.43881178]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [420]; unstable size 420; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 420] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 420] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 420] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 174] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.08343554,  2.05495071,  1.84661818,  2.02149105,  1.87067604,
          2.72653294,  1.89364624, -0.51825690,  1.03387260]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.81995726, -5.13494205, -8.06528854, -7.87783623, -8.02696037,
         -7.91830969, -8.81726456, -7.94001102, -5.16691113, -6.43881178]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.81014204, -5.15443516, -8.05149078, -7.86225891, -8.01039028,
          -7.90261698, -8.80574799, -7.92409134, -5.15398884, -6.44848347]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00044632]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0041 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0702 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 123, vnnlib ID: 123 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.01406145,  -9.83653736,  -7.83681726,  -8.95063114,  -9.15734291,
          -9.10310364,  -9.02663040, -11.03872871,  -5.68331051, -10.27965927]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [384]; unstable size 384; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 188, 1, 384] with unstable size 187 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 384] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 384] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 187] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.17096841,  3.39843321,  1.51453519,  2.57439923,  2.68033552,
          2.71090794,  2.60011625,  4.45497847,  4.01961613]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.01406145,  -9.83653736,  -7.83681726,  -8.95063114,  -9.15734291,
          -9.10310364,  -9.02663040, -11.03872871,  -5.68331051, -10.27965927]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.16it/s]100%|██████████| 1/1 [00:00<00:00,  9.16it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.24572372, -10.14930725,  -8.09828663,  -9.24239445,  -9.37958050,
           -9.39315701,  -9.30120564, -11.22938156,  -6.21674156, -10.66067028]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02898216]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1118 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 23.99014663696289
alpha/beta optimization time: 1.184657096862793
initial alpha-crown bounds: tensor([[-0.16154683,  3.43210268,  1.52814174,  2.59574938,  2.69813728,
          2.73191261,  2.61713934,  4.47211885,  4.07639170]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.16154682636260986
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6304738521576
Verifying property 0 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.16154683]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.01406145,  -9.83653736,  -7.83681726,  -8.95063114,  -9.15734291,
         -9.10310364,  -9.02663040, -11.03872871,  -5.68331051, -10.27965927],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.16154683]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 384
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 185
Node /15 input 0: size torch.Size([100]) unstable 5
-----------------
# of unstable neurons: 574
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001068115234375
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1615455150604248
10 lb beta sum: 0.0, worst -0.16154927015304565
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    func 0.0529    
Accumulated time: func 0.0529    prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 10] 
split level 2: [/input-12, 50] 
split level 3: [/input-8, 276] 
split level 4: [/input, 2215] 
split level 5: [/input-8, 692] 
split level 6: [/input-8, 1707] 
split level 7: [/input-8, 684] 
split level 8: [/input-8, 2004] 
split level 9: [/input-8, 2028] 
split level 10: [/input-8, 948] 
split level 11: [/input-8, 357] 
split level 12: [/input-8, 693] 
split level 13: [/input-8, 949] 
split level 14: [/input-8, 1910] 
split level 15: [/input, 2231] 
split level 16: [/input-8, 1709] 
split level 17: [/input-8, 942] 
split level 18: [/input-8, 1451] 
split level 19: [/input-8, 2011] 
split level 20: [/input-8, 1250] 
split level 21: [/input-8, 691] 
split level 22: [/input-8, 685] 
split level 23: [/input, 3765] 
split level 24: [/input-8, 1460] 
split level 25: [/input, 2168] 
split level 26: [/input-8, 1268] 
split level 27: [/input-8, 2034] 
split level 28: [/input-8, 956] 
split level 29: [/input-8, 1903] 
split level 30: [/input-8, 933] 
split level 31: [/input-8, 1683] 
split level 32: [/input-8, 2039] 
split level 33: [/input-8, 1721] 
split level 34: [/input-8, 1697] 
split level 35: [/input-8, 1956] 
split level 36: [/input-8, 947] 
split level 37: [/input, 1240] 
split level 38: [/input-8, 1909] 
split level 39: [/input-8, 2031] 
split level 40: [/input-8, 1750] 
split level 41: [/input-8, 2010] 
split level 42: [/input-8, 220] 
split level 43: [/input-8, 1482] 
split level 44: [/input-8, 2005] 
split level 45: [/input-8, 729] 
split level 46: [/input-8, 267] 
split level 47: [/input-8, 1723] 
split level 48: [/input, 2250] 
split level 49: [/input-8, 2044] 
split level 50: [/input, 1958] 
split level 51: [/input-8, 1274] 
split level 52: [/input-8, 1944] 
split level 53: [/input-8, 2001] 
split level 54: [/input-8, 1584] 
split level 55: [/input-8, 1264] 
split level 56: [/input-8, 2045] 
split level 57: [/input-8, 1099] 
split level 58: [/input-8, 2047] 
split level 59: [/input, 2205] 
split level 60: [/input-8, 649] 
split level 61: [/input, 2116] 
split level 62: [/input-8, 2037] 
split level 63: [/input-8, 2009] 
split level 64: [/input, 1162] 
split level 65: [/input, 2221] 
split level 66: [/input-8, 1595] 
split level 67: [/input-8, 2021] 
split level 68: [/input, 2206] 
split level 69: [/input-8, 2032] 
split level 70: [/input, 2670] 
split level 71: [/input-8, 1433] 
split level 72: [/input-8, 1429] 
split level 73: [/input, 2663] 
split level 74: [/input, 2739] 
split level 75: [/input, 82] 
split level 76: [/input-8, 567] 
split level 77: [/input-8, 1933] 
split level 78: [/input-8, 2030] 
split level 79: [/input-8, 1701] 
split level 80: [/input-8, 1575] 
split level 81: [/input, 2147] 
split level 82: [/input, 442] 
split level 83: [/input-8, 1840] 
split level 84: [/input, 1996] 
split level 85: [/input-8, 662] 
split level 86: [/input, 2782] 
split level 87: [/input-8, 1272] 
split level 88: [/input, 2178] 
split level 89: [/input-8, 1863] 
split level 90: [/input-8, 1217] 
split level 91: [/input-8, 1499] 
split level 92: [/input-8, 158] 
split level 93: [/input-8, 566] 
split level 94: [/input, 1271] 
split level 95: [/input-8, 737] 
split level 96: [/input, 2668] 
split level 97: [/input-8, 1248] 
split level 98: [/input-8, 1056] 
split level 99: [/input, 2012] 
split level 100: [/input, 849] 
split level 101: [/input, 2292] 
split level 102: [/input, 2100] 
split level 103: [/input, 2010] 
split level 104: [/input, 2142] 
split level 105: [/input-8, 1218] 
split level 106: [/input-8, 895] 
split level 107: [/input, 93] 
split level 108: [/input-8, 1825] 
split level 109: [/input-8, 1226] 
split level 110: [/input, 1995] 
split level 111: [/input-8, 914] 
split level 112: [/input, 671] 
split level 113: [/input, 2659] 
split level 114: [/input, 2066] 
split level 115: [/input-8, 750] 
split level 116: [/input, 2007] 
split level 117: [/input, 1106] 
split level 118: [/input-8, 1596] 
split level 119: [/input, 2077] 
split level 120: [/input-8, 908] 
split level 121: [/input, 2660] 
split level 122: [/input, 785] 
split level 123: [/input-8, 721] 
split level 124: [/input, 2027] 
split level 125: [/input, 1121] 
split level 126: [/input-8, 375] 
split level 127: [/input, 910] 
split level 128: [/input, 3602] 
split level 129: [/input, 460] 
split level 130: [/input-8, 1814] 
split level 131: [/input, 3604] 
split level 132: [/input, 2061] 
split level 133: [/input-8, 1221] 
split level 134: [/input, 818] 
split level 135: [/input, 429] 
split level 136: [/input, 1040] 
split level 137: [/input-8, 1695] 
split level 138: [/input, 2155] 
split level 139: [/input, 1805] 
split level 140: [/input-8, 1679] 
split level 141: [/input, 349] 
split level 142: [/input, 1197] 
split level 143: [/input, 2293] 
split level 144: [/input, 1104] 
split level 145: [/input, 850] 
split level 146: [/input, 1047] 
split level 147: [/input, 3596] 
split level 148: [/input, 795] 
split level 149: [/input, 959] 
split level 150: [/input, 2546] 
split level 151: [/input, 445] 
split level 152: [/input, 1122] 
split level 153: [/input, 3617] 
split level 154: [/input, 2101] 
split level 155: [/input-8, 1048] 
split level 156: [/input, 971] 
split level 157: [/input, 1221] 
split level 158: [/input, 1133] 
split level 159: [/input, 895] 
split level 160: [/input, 3449] 
split level 161: [/input, 2065] 
split level 162: [/input, 1911] 
split level 163: [/input, 2087] 
split level 164: [/input-8, 1224] 
split level 165: [/input, 829] 
split level 166: [/input-8, 744] 
split level 167: [/input, 1107] 
split level 168: [/input, 3623] 
split level 169: [/input, 2644] 
split level 170: [/input, 2695] 
split level 171: [/input, 701] 
split level 172: [/input-8, 2022] 
split level 173: [/input-8, 1509] 
split level 174: [/input, 2752] 
split level 175: [/input-8, 2023] 
split level 176: [/input-8, 1850] 
split level 177: [/input, 2345] 
split level 178: [/input, 22] 
split level 179: [/input, 524] 
split level 180: [/input, 418] 
split level 181: [/input, 2610] 
split level 182: [/input, 1112] 
split level 183: [/input, 2566] 
split level 184: [/input, 2722] 
split level 185: [/input-12, 4] 
split level 186: [/input, 2342] 
split level 187: [/input, 264] 
split level 188: [/input, 2677] 
split level 189: [/input, 265] 
split level 190: [/input, 3670] 
split level 191: [/input-8, 1895] 
split level 192: [/input, 3653] 
split level 193: [/input, 2373] 
split level 194: [/input-8, 535] 
split level 195: [/input, 700] 
split level 196: [/input, 2492] 
split level 197: [/input-8, 169] 
split level 198: [/input-8, 1141] 
split level 199: [/input-8, 1830] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17033475637435913
10 lb beta sum: 0.0, worst -0.16174495220184326
Time: prepare 0.0114    bound 0.1011    transfer 0.0014    finalize 0.0027    func 0.1192    
Accumulated time: func 0.1721    prepare 0.0214    bound 0.1536    transfer 0.0015    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.10638046) min lb tensor(-0.16154552)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010347127914428711 
BICCOS Cumulative time: 0.010347127914428711
Preprocessing time: 0.009950399398803711 Inference time: 0.00011777877807617188 Add cuts time: 5.7220458984375e-05 Cut analysis time: 0.00022172927856445312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15660 (1), -0.15650 (1), -0.15639 (1), -0.15638 (1), -0.15617 (1), -0.15604 (1), -0.15594 (1), -0.15589 (1), -0.15588 (1), -0.15585 (1), -0.15574 (1), -0.15557 (1), -0.15554 (1), -0.15545 (1), -0.15489 (1), -0.15487 (1), -0.15454 (1), -0.15436 (1), -0.15425 (1), -0.15422 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5107    set_bounds 0.0092    solve 0.1193    add 0.1323    
Accumulated time: pickout 0.0003    decision 0.5107    set_bounds 0.0092    solve 0.1193    add 0.1323    
Current (lb-rhs): -0.1565953493118286
50 domains visited
Cumulative time: 0.8517298698425293

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 50] [/input-12, 50] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 2: [/input-8, 1707] [/input-8, 1707] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 3: [/input-8, 949] [/input-8, 949] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15293926000595093
10 lb beta sum: 0.3087865114212036, worst -0.14704573154449463
Time: prepare 0.0076    bound 0.1165    transfer 0.0017    finalize 0.0028    func 0.1312    
Accumulated time: func 0.3033    prepare 0.0292    bound 0.2700    transfer 0.0031    finalize 0.0056    
all_split False
======================Cut inference begins======================
max lb tensor(0.36703086) min lb tensor(-0.14703980)
Number of Verified Splits: 100 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.017071247100830078 
BICCOS Cumulative time: 0.02741837501525879
Preprocessing time: 0.011657476425170898 Inference time: 0.003618955612182617 Add cuts time: 0.0015320777893066406 Cut analysis time: 0.0002627372741699219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04406 (2), -0.04393 (2), -0.04385 (2), -0.04352 (2), -0.04339 (2), -0.04333 (2), -0.04310 (2), -0.04290 (2), -0.04285 (2), -0.04212 (2), -0.04193 (2), -0.04174 (2), -0.04115 (2), -0.04073 (2), -0.04072 (2), -0.04060 (2), -0.04038 (2), -0.04029 (2), -0.04020 (2), -0.03990 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0232    set_bounds 0.0119    solve 0.1312    add 0.0827    
Accumulated time: pickout 0.0014    decision 0.5339    set_bounds 0.0212    solve 0.2505    add 0.2151    
Current (lb-rhs): -0.04405848681926727
100 domains visited
Cumulative time: 1.1192526817321777

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 2: [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] 
split level 3: [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05945494771003723
10 lb beta sum: 0.4079335629940033, worst -0.04377838969230652
Time: prepare 0.0082    bound 0.1316    transfer 0.0008    finalize 0.0024    func 0.1461    
Accumulated time: func 0.4494    prepare 0.0377    bound 0.4016    transfer 0.0040    finalize 0.0080    
all_split False
======================Cut inference begins======================
max lb tensor(0.13706383) min lb tensor(-0.04374060)
Number of Verified Splits: 104 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.018462419509887695 
BICCOS Cumulative time: 0.045880794525146484
Preprocessing time: 0.011622428894042969 Inference time: 0.0038230419158935547 Add cuts time: 0.0027005672454833984 Cut analysis time: 0.00031638145446777344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02038 (3), -0.02030 (3), -0.02009 (3), -0.02001 (3), -0.02001 (3), -0.01979 (3), -0.01965 (3), -0.01962 (3), -0.01921 (3), -0.01907 (3), -0.01882 (3), -0.01833 (3), -0.01794 (3), -0.01785 (3), -0.01776 (3), -0.01754 (3), -0.01754 (3), -0.01707 (3), -0.01657 (3), -0.01558 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0191    set_bounds 0.0152    solve 0.1462    add 0.0873    
Accumulated time: pickout 0.0024    decision 0.5530    set_bounds 0.0364    solve 0.3967    add 0.3023    
Current (lb-rhs): -0.020382076501846313
150 domains visited
Cumulative time: 1.4067304134368896

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 2: [/input-8, 1707] [/input-8, 949] [/input-8, 1707] [/input-8, 949] [/input-8, 684] [/input-8, 684] [/input-8, 1707] [/input-8, 949] [/input-8, 1707] [/input-8, 1707] 
split level 3: [/input-8, 949] [/input-8, 2010] [/input-8, 2010] [/input-8, 2010] [/input-8, 949] [/input-8, 949] [/input-8, 2010] [/input-8, 2010] [/input-8, 693] [/input-8, 693] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.037011563777923584
10 lb beta sum: 0.5184258818626404, worst -0.023919641971588135
Time: prepare 0.0083    bound 0.1318    transfer 0.0013    finalize 0.0023    func 0.1463    
Accumulated time: func 0.5957    prepare 0.0462    bound 0.5334    transfer 0.0052    finalize 0.0103    
all_split False
======================Cut inference begins======================
max lb tensor(0.25417024) min lb tensor(-0.01968867)
Number of Verified Splits: 138 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 7
#cuts 4-6: 12
#cuts >= 20: 0
BICCOS time: 0.022014379501342773 
BICCOS Cumulative time: 0.06789517402648926
Preprocessing time: 0.011606693267822266 Inference time: 0.00630950927734375 Add cuts time: 0.003407001495361328 Cut analysis time: 0.0006911754608154297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00636 (4), -0.00635 (4), -0.00634 (4), -0.00605 (4), -0.00605 (4), -0.00590 (4), -0.00584 (4), -0.00580 (4), -0.00580 (4), -0.00580 (4), -0.00579 (4), -0.00579 (4), -0.00579 (4), -0.00578 (4), -0.00539 (4), -0.00536 (4), -0.00532 (4), -0.00529 (4), -0.00527 (4), -0.00516 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0188    set_bounds 0.0157    solve 0.1464    add 0.0926    
Accumulated time: pickout 0.0034    decision 0.5718    set_bounds 0.0521    solve 0.5431    add 0.3949    
Current (lb-rhs): -0.006362214684486389
200 domains visited
Cumulative time: 1.7035009860992432

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 2: [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 1707] [/input-8, 2010] [/input-8, 2010] [/input-8, 1707] [/input-8, 1707] [/input-8, 949] 
split level 3: [/input-8, 691] [/input-8, 691] [/input-8, 691] [/input-8, 691] [/input-8, 691] [/input-8, 693] [/input-8, 693] [/input-8, 693] [/input-8, 691] [/input-8, 691] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023681163787841797
10 lb beta sum: 0.9224624633789062, worst -0.22404104471206665
Time: prepare 0.0081    bound 0.1464    transfer 0.0008    finalize 0.0022    func 0.1601    
Accumulated time: func 0.7558    prepare 0.0546    bound 0.6798    transfer 0.0060    finalize 0.0125    
all_split False
======================Cut inference begins======================
max lb tensor(0.33301914) min lb tensor(-0.00537172)
Number of Verified Splits: 227 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 8
#cuts 4-6: 15
#cuts >= 20: 0
BICCOS time: 0.030584335327148438 
BICCOS Cumulative time: 0.0984795093536377
Preprocessing time: 0.011742115020751953 Inference time: 0.01122426986694336 Add cuts time: 0.0067670345306396484 Cut analysis time: 0.0008509159088134766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00537 (5), -0.00537 (5), -0.00532 (5), -0.00532 (5), -0.00526 (5), -0.00526 (5), -0.00525 (5), -0.00524 (5), -0.00377 (5), -0.00357 (5), -0.00339 (5), -0.00338 (5), -0.00337 (5), -0.00336 (5), -0.00336 (5), -0.00336 (5), -0.00336 (5), -0.00336 (5), -0.00335 (5), -0.00335 (5), 
Length of domains: 48
Time: pickout 0.0010    decision 0.0189    set_bounds 0.1403    solve 0.1602    add 0.1032    
Accumulated time: pickout 0.0044    decision 0.5907    set_bounds 0.1924    solve 0.7033    add 0.4981    
Current (lb-rhs): -0.005371719598770142
248 domains visited
Cumulative time: 2.157918691635132

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([684]), tensor([-1.]), tensor([0]), tensor([-1.36608811e+31]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, -1.0], [0, 0], [-1.3660881104458424e+31, 0.0077223642729222775], [0, 2]), '/input-12': (tensor([10, 33, 50]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([4.61638033e-10, 4.77279862e-03, 5.46105653e-02]), tensor([1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, -1.0], [0, 0], [-1.3660881104458424e+31, 0.0077223642729222775], [0, 2]), '/input-12': (tensor([10, 33, 50]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([4.61638033e-10, 4.77279862e-03, 2.97947391e-03]), tensor([1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, -1.0], [0, 0], [-1.3660881104458424e+31, 0.0077223642729222775], [0, 2]), '/input-12': (tensor([10, 33]), tensor([-1.,  1.]), tensor([0, 0]), tensor([4.61638033e-10, 1.35190412e-01]), tensor([1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949, 2010], [1.0, 1.0, -1.0], [0, 0, 0], [-1.3660881104458424e+31, 0.004214779939502478, 0.012435974553227425], [0, 2, 3]), '/input-12': (tensor([10, 33]), tensor([-1., -1.]), tensor([0, 0]), tensor([4.61638033e-10, 9.85117396e-04]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949, 2010], [1.0, 1.0, -1.0], [0, 0, 0], [-1.3660881104458424e+31, 0.004214779939502478, 0.012435974553227425], [0, 2, 3]), '/input-12': (tensor([10, 33]), tensor([-1.,  1.]), tensor([0, 0]), tensor([4.61638033e-10, 1.29127741e-01]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 684,  949, 2010]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([-1.36608811e+31,  4.21477994e-03,  7.21222302e-03]), tensor([0, 2, 3])), '/input-12': ([10], [-1.0], [0], [4.61638033355527e-10], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, -1.0], [0, 0], [-1.3660881104458424e+31, 0.005348370876163244], [0, 2]), '/input-12': (tensor([10, 33, 50]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([4.61853185e-16, 5.02886018e-03, 4.38288301e-02]), tensor([1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, -1.0], [0, 0], [-1.3660881104458424e+31, 0.005348370876163244], [0, 2]), '/input-12': (tensor([10, 33, 50]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([4.61853185e-16, 5.02886018e-03, 3.54163512e-03]), tensor([1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, -1.0], [0, 0], [-1.3660881104458424e+31, 0.005348370876163244], [0, 2]), '/input-12': (tensor([10, 33]), tensor([1., 1.]), tensor([0, 0]), tensor([4.61853185e-16, 1.27944604e-01]), tensor([1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, 1.0], [0, 0], [-1.3660881104458424e+31, 0.004418180789798498], [0, 2]), '/input-12': (tensor([10, 33, 50]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([4.61853185e-16, 4.90518054e-03, 4.42877859e-02]), tensor([1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, 1.0], [0, 0], [-1.3660881104458424e+31, 0.004418180789798498], [0, 2]), '/input-12': (tensor([10, 33, 50]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([4.61853185e-16, 4.90518054e-03, 3.49687203e-03]), tensor([1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, 1.0], [0, 0], [-1.3660881104458424e+31, 0.004418180789798498], [0, 2]), '/input-12': (tensor([10, 33]), tensor([1., 1.]), tensor([0, 0]), tensor([4.61853185e-16, 1.27933159e-01]), tensor([1, 3]))}
Shallow branching resets to n domains:  13
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16057723760604858
10 lb beta sum: 0.3638915419578552, worst -0.14597168564796448
Time: prepare 0.0006    bound 0.1275    transfer 0.0002    finalize 0.0002    func 0.1286    
Accumulated time: func 0.8843    prepare 0.0551    bound 0.8073    transfer 0.0061    finalize 0.0127    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-8, 276] [/input-12, 50] [/input-12, 33] 
split level 1: [/input-12, 10] [/input-8, 1451] [/input-8, 1707] [/input-12, 50] 
split level 2: [/input-12, 50] [/input-8, 2011] [/input-8, 1451] [/input-8, 1707] 
split level 3: [/input-8, 1707] [/input-8, 2010] [/input-8, 2011] [/input-8, 1451] 
split level 4: [/input-8, 693] [/input-8, 693] [/input-8, 693] [/input-8, 2011] 
split level 5: [/input-8, 949] [/input-8, 685] [/input-8, 685] [/input-8, 693] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8975650072097778, worst -0.04320359230041504
10 lb beta sum: 0.914106011390686, worst -0.047562599182128906
Time: prepare 0.0110    bound 0.1295    transfer 0.0014    finalize 0.0012    func 0.1447    
Accumulated time: func 1.0291    prepare 0.0664    bound 0.9368    transfer 0.0075    finalize 0.0140    
all_split False
======================Cut inference begins======================
max lb tensor(0.67579556) min lb tensor(-0.04195237)
Number of Verified Splits: 238 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.9077288508415222, worst -0.1441822648048401
10 lb beta sum: 1.10871160030365, worst -0.13276952505111694
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 53.
#cuts 1-3: 8
#cuts 4-6: 19
#cuts 7-9: 26
#cuts >= 20: 0
BICCOS time: 0.2923581600189209 
BICCOS Cumulative time: 0.3908376693725586
Preprocessing time: 0.007161140441894531 Inference time: 0.27143168449401855 Add cuts time: 0.011370658874511719 Cut analysis time: 0.0023946762084960938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04195 (6), -0.04050 (6), -0.04007 (6), -0.03861 (6), -0.03848 (6), -0.03709 (6), -0.03698 (6), -0.03622 (6), -0.03594 (6), -0.03592 (6), -0.03501 (6), -0.03488 (6), -0.03257 (6), -0.03111 (6), -0.03071 (6), -0.02949 (6), -0.00305 (6), -0.00072 (6), 
Length of domains: 18
Time: pickout 0.0006    decision 0.0182    set_bounds 0.0246    solve 0.1448    add 0.0016    
Accumulated time: pickout 0.0050    decision 0.6089    set_bounds 0.2170    solve 0.8480    add 0.4997    
Current (lb-rhs): -0.04195237159729004
266 domains visited
Cumulative time: 2.8002796173095703

BaB round 2
batch: 18
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] 
split level 1: [/input-8, 2011] [/input-8, 691] [/input-8, 2011] [/input-8, 685] [/input-8, 2011] [/input-8, 691] [/input-8, 685] [/input-8, 2011] [/input-8, 1909] [/input-8, 2011] 
split level 2: [/input-8, 2010] [/input-8, 685] [/input-8, 2010] [/input-8, 1909] [/input-8, 2010] [/input-8, 1909] [/input-8, 1482] [/input-8, 2010] [/input-8, 691] [/input-8, 2010] 
split level 3: [/input-8, 685] [/input-8, 1909] [/input-8, 685] [/input-8, 691] [/input-8, 685] [/input-8, 685] [/input-8, 691] [/input-8, 685] [/input-8, 685] [/input-8, 685] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03525340557098389
10 lb beta sum: 0.4081650972366333, worst -0.03770734369754791
Time: prepare 0.0056    bound 0.1299    transfer 0.0010    finalize 0.0017    func 0.1408    
Accumulated time: func 1.1699    prepare 0.0723    bound 1.0667    transfer 0.0085    finalize 0.0157    
all_split False
======================Cut inference begins======================
max lb tensor(0.02050245) min lb tensor(-0.03422612)
Number of Verified Splits: 145 of 288
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 8
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.025758981704711914 
BICCOS Cumulative time: 0.4165966510772705
Preprocessing time: 0.008922576904296875 Inference time: 0.01344752311706543 Add cuts time: 0.0027458667755126953 Cut analysis time: 0.0006430149078369141
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03423 (10), -0.03300 (10), -0.03277 (10), -0.03263 (10), -0.03154 (10), -0.03120 (10), -0.03106 (10), -0.03073 (10), -0.02974 (10), -0.02951 (10), -0.02926 (10), -0.02916 (10), -0.02863 (10), -0.02809 (10), -0.02797 (10), -0.02790 (10), -0.02742 (10), -0.02741 (10), -0.02732 (10), -0.02717 (10), 
Length of domains: 143
Time: pickout 0.0025    decision 0.0214    set_bounds 0.0185    solve 0.1409    add 0.0698    
Accumulated time: pickout 0.0074    decision 0.6303    set_bounds 0.2355    solve 0.9890    add 0.5695    
Current (lb-rhs): -0.03422611951828003
409 domains visited
Cumulative time: 3.083939552307129

BaB round 3
batch: 143
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1451] [/input-8, 1910] [/input-8, 1451] [/input-8, 1910] [/input-8, 948] [/input-8, 1910] [/input-8, 948] [/input-8, 1910] [/input-8, 948] [/input-8, 948] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03265798091888428
10 lb beta sum: 0.4394984841346741, worst -0.0362573117017746
Time: prepare 0.0057    bound 0.1379    transfer 0.0006    finalize 0.0014    func 0.1475    
Accumulated time: func 1.3174    prepare 0.0782    bound 1.2046    transfer 0.0091    finalize 0.0171    
all_split False
======================Cut inference begins======================
max lb tensor(0.00663066) min lb tensor(-0.03185648)
Number of Verified Splits: 21 of 286
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 8
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.012047529220581055 
BICCOS Cumulative time: 0.42864418029785156
Preprocessing time: 0.008566141128540039 Inference time: 0.002044200897216797 Add cuts time: 0.0005674362182617188 Cut analysis time: 0.0008697509765625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03186 (11), -0.03076 (11), -0.03065 (11), -0.03025 (11), -0.02956 (11), -0.02904 (11), -0.02862 (11), -0.02835 (11), -0.02753 (11), -0.02715 (11), -0.02714 (11), -0.02685 (11), -0.02664 (11), -0.02623 (11), -0.02611 (11), -0.02593 (11), -0.02581 (11), -0.02557 (11), -0.02555 (11), -0.02516 (11), 
Length of domains: 265
Time: pickout 0.0153    decision 0.0200    set_bounds 0.0121    solve 0.1476    add 0.0164    
Accumulated time: pickout 0.0227    decision 0.6503    set_bounds 0.2476    solve 1.1366    add 0.5860    
Current (lb-rhs): -0.0318564772605896
674 domains visited
Cumulative time: 3.3085522651672363

BaB round 4
batch: 265
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 948] [/input-8, 357] [/input-8, 948] [/input-8, 357] [/input-8, 1451] [/input-8, 357] [/input-8, 1451] [/input-8, 357] [/input-8, 1451] [/input-8, 357] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5098556876182556, worst -0.029798448085784912
10 lb beta sum: 0.5098952054977417, worst -0.029636681079864502
Time: prepare 0.0225    bound 0.1365    transfer 0.0023    finalize 0.0029    func 0.1677    
Accumulated time: func 1.4851    prepare 0.1010    bound 1.3411    transfer 0.0114    finalize 0.0200    
all_split False
======================Cut inference begins======================
max lb tensor(0.00683014) min lb tensor(-0.02955002)
Number of Verified Splits: 76 of 530
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 13
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.0262448787689209 
BICCOS Cumulative time: 0.45488905906677246
Preprocessing time: 0.01533651351928711 Inference time: 0.007786750793457031 Add cuts time: 0.0023200511932373047 Cut analysis time: 0.0008015632629394531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02955 (12), -0.02854 (12), -0.02830 (12), -0.02796 (12), -0.02727 (12), -0.02669 (12), -0.02646 (12), -0.02611 (12), -0.02532 (12), -0.02525 (12), -0.02497 (12), -0.02483 (12), -0.02461 (12), -0.02447 (12), -0.02440 (12), -0.02418 (12), -0.02392 (12), -0.02372 (12), -0.02367 (12), -0.02365 (12), 
Length of domains: 454
Time: pickout 0.0045    decision 0.0279    set_bounds 0.0232    solve 0.1679    add 0.1132    
Accumulated time: pickout 0.0273    decision 0.6782    set_bounds 0.2708    solve 1.3045    add 0.6992    
Current (lb-rhs): -0.029550015926361084
1128 domains visited
Cumulative time: 3.6803534030914307

BaB round 5
batch: 454
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1482] [/input-8, 948] [/input-8, 1482] [/input-8, 948] [/input-8, 1482] [/input-8, 948] [/input-8, 1482] [/input-8, 948] [/input-8, 1268] [/input-8, 1910] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02767205238342285
10 lb beta sum: 0.42126086354255676, worst -0.027196019887924194
Time: prepare 0.0177    bound 0.1390    transfer 0.0044    finalize 0.0038    func 0.1708    
Accumulated time: func 1.6559    prepare 0.1190    bound 1.4801    transfer 0.0158    finalize 0.0238    
all_split False
======================Cut inference begins======================
max lb tensor(0.00509125) min lb tensor(-0.02714881)
Number of Verified Splits: 157 of 908
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 10
#cuts 4-6: 14
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.049008846282958984 
BICCOS Cumulative time: 0.5038979053497314
Preprocessing time: 0.027499914169311523 Inference time: 0.01819753646850586 Add cuts time: 0.0022726058959960938 Cut analysis time: 0.0010387897491455078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02715 (13), -0.02614 (13), -0.02586 (13), -0.02567 (13), -0.02553 (13), -0.02487 (13), -0.02467 (13), -0.02439 (13), -0.02436 (13), -0.02430 (13), -0.02408 (13), -0.02406 (13), -0.02340 (13), -0.02334 (13), -0.02294 (13), -0.02283 (13), -0.02271 (13), -0.02260 (13), -0.02256 (13), -0.02238 (13), 
Length of domains: 751
Time: pickout 0.0674    decision 0.0357    set_bounds 0.0404    solve 0.1710    add 0.0085    
Accumulated time: pickout 0.0947    decision 0.7139    set_bounds 0.3112    solve 1.4756    add 0.7077    
Current (lb-rhs): -0.027148813009262085
1879 domains visited
Cumulative time: 4.056360483169556

BaB round 6
batch: 751
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 942] [/input-8, 692] [/input-8, 942] [/input-8, 692] [/input-8, 942] [/input-8, 692] [/input-8, 942] [/input-8, 692] [/input-8, 942] [/input-8, 692] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025974631309509277
10 lb beta sum: 0.41603970527648926, worst -0.025492489337921143
Time: prepare 0.0300    bound 0.1675    transfer 0.0140    finalize 0.2304    func 0.4521    
Accumulated time: func 2.1080    prepare 0.1492    bound 1.6476    transfer 0.0298    finalize 0.2542    
all_split False
======================Cut inference begins======================
max lb tensor(0.01618242) min lb tensor(-0.02545100)
Number of Verified Splits: 540 of 1502
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 52.
#cuts 1-3: 15
#cuts 4-6: 32
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.1243598461151123 
BICCOS Cumulative time: 0.6282577514648438
Preprocessing time: 0.05072522163391113 Inference time: 0.06266450881958008 Add cuts time: 0.00882577896118164 Cut analysis time: 0.002144336700439453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02545 (14), -0.02418 (14), -0.02416 (14), -0.02397 (14), -0.02396 (14), -0.02288 (14), -0.02276 (14), -0.02270 (14), -0.02269 (14), -0.02268 (14), -0.02248 (14), -0.02240 (14), -0.02237 (14), -0.02206 (14), -0.02163 (14), -0.02159 (14), -0.02139 (14), -0.02127 (14), -0.02126 (14), -0.02114 (14), 
Length of domains: 962
Time: pickout 0.0120    decision 0.0566    set_bounds 0.0696    solve 0.4525    add 0.0090    
Accumulated time: pickout 0.1067    decision 0.7705    set_bounds 0.3808    solve 1.9281    add 0.7167    
Current (lb-rhs): -0.02545100450515747
2841 domains visited
Cumulative time: 4.787170171737671

BaB round 7
batch: 962
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 1268] [/input-8, 942] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02388179302215576
10 lb beta sum: 0.6330046653747559, worst -0.02970777451992035
Time: prepare 0.0385    bound 0.1788    transfer 0.0156    finalize 0.0103    func 0.2557    
Accumulated time: func 2.3637    prepare 0.1880    bound 1.8264    transfer 0.0454    finalize 0.2645    
all_split False
======================Cut inference begins======================
max lb tensor(0.00716387) min lb tensor(-0.02270943)
Number of Verified Splits: 557 of 1924
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 70.
#cuts 1-3: 15
#cuts 4-6: 41
#cuts 7-9: 14
#cuts >= 20: 0
BICCOS time: 0.14673089981079102 
BICCOS Cumulative time: 0.7749886512756348
Preprocessing time: 0.05914902687072754 Inference time: 0.07017350196838379 Add cuts time: 0.014631986618041992 Cut analysis time: 0.0027763843536376953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02271 (15), -0.02145 (15), -0.02130 (15), -0.02122 (15), -0.02092 (15), -0.02064 (15), -0.02061 (15), -0.02038 (15), -0.02035 (15), -0.02027 (15), -0.01981 (15), -0.01981 (15), -0.01975 (15), -0.01953 (15), -0.01949 (15), -0.01945 (15), -0.01943 (15), -0.01940 (15), -0.01928 (15), -0.01914 (15), 
Length of domains: 1367
Time: pickout 0.0192    decision 0.0676    set_bounds 0.0848    solve 0.2561    add 0.0112    
Accumulated time: pickout 0.1258    decision 0.8381    set_bounds 0.4656    solve 2.1842    add 0.7279    
Current (lb-rhs): -0.022709429264068604
4208 domains visited
Cumulative time: 5.378400802612305

BaB round 8
batch: 1367
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02223360538482666
10 lb beta sum: 0.6793056130409241, worst -0.02800649404525757
Time: prepare 0.0568    bound 0.2242    transfer 0.0255    finalize 0.0145    func 0.5749    
Accumulated time: func 2.9386    prepare 0.2450    bound 2.0505    transfer 0.0709    finalize 0.2790    
all_split False
======================Cut inference begins======================
max lb tensor(0.27975553) min lb tensor(-0.02110994)
Number of Verified Splits: 810 of 2734
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 106.
#cuts 1-3: 15
#cuts 4-6: 69
#cuts 7-9: 22
#cuts >= 20: 0
BICCOS time: 0.22692322731018066 
BICCOS Cumulative time: 1.0019118785858154
Preprocessing time: 0.0869760513305664 Inference time: 0.10784626007080078 Add cuts time: 0.02816176414489746 Cut analysis time: 0.003939151763916016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02111 (16), -0.01970 (16), -0.01964 (16), -0.01960 (16), -0.01932 (16), -0.01906 (16), -0.01901 (16), -0.01867 (16), -0.01867 (16), -0.01854 (16), -0.01831 (16), -0.01822 (16), -0.01822 (16), -0.01821 (16), -0.01800 (16), -0.01794 (16), -0.01787 (16), -0.01781 (16), -0.01759 (16), -0.01759 (16), 
Length of domains: 1924
Time: pickout 0.0195    decision 0.0907    set_bounds 0.1161    solve 0.5758    add 0.0145    
Accumulated time: pickout 0.1453    decision 0.9289    set_bounds 0.5817    solve 2.7600    add 0.7424    
Current (lb-rhs): -0.021109938621520996
6132 domains visited
Cumulative time: 6.439335346221924

BaB round 9
batch: 1924
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2011] [/input-8, 2011] [/input, 2250] [/input-8, 2011] [/input, 2250] [/input, 2250] [/input, 2250] [/input-8, 691] [/input, 2250] [/input, 2250] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01966869831085205
10 lb beta sum: 0.6574863791465759, worst -0.033129602670669556
Time: prepare 0.0827    bound 0.3851    transfer 0.0283    finalize 0.0221    func 0.5441    
Accumulated time: func 3.4827    prepare 0.3280    bound 2.4356    transfer 0.0992    finalize 0.3010    
all_split False
======================Cut inference begins======================
max lb tensor(0.39893454) min lb tensor(-0.01859301)
Number of Verified Splits: 1151 of 3848
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 169.
#cuts 1-3: 22
#cuts 4-6: 105
#cuts 7-9: 42
#cuts >= 20: 0
BICCOS time: 0.5841610431671143 
BICCOS Cumulative time: 1.5860729217529297
Preprocessing time: 0.1228330135345459 Inference time: 0.3976004123687744 Add cuts time: 0.056535959243774414 Cut analysis time: 0.007191658020019531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01859 (17), -0.01794 (17), -0.01789 (17), -0.01748 (17), -0.01734 (17), -0.01718 (17), -0.01710 (17), -0.01708 (17), -0.01707 (17), -0.01695 (17), -0.01688 (17), -0.01686 (17), -0.01685 (17), -0.01649 (17), -0.01647 (17), -0.01643 (17), -0.01638 (17), -0.01636 (17), -0.01625 (17), -0.01625 (17), 
Length of domains: 2697
Time: pickout 0.0381    decision 0.1244    set_bounds 0.1684    solve 0.5449    add 0.0106    
Accumulated time: pickout 0.1833    decision 1.0533    set_bounds 0.7501    solve 3.3049    add 0.7529    
Current (lb-rhs): -0.018593013286590576
8829 domains visited
Cumulative time: 7.934223890304565

BaB round 10
batch: 2697
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2004] [/input-8, 729] [/input-8, 2004] [/input-8, 729] [/input-8, 2034] [/input-8, 2004] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.019098639488220215
10 lb beta sum: 0.6190612316131592, worst -0.028798863291740417
Time: prepare 0.1166    bound 0.5222    transfer 0.0332    finalize 0.0340    func 0.7422    
Accumulated time: func 4.2248    prepare 0.4449    bound 2.9578    transfer 0.1324    finalize 0.3351    
all_split False
======================Cut inference begins======================
max lb tensor(0.45094320) min lb tensor(-0.01719075)
Number of Verified Splits: 2435 of 5394
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 118.
#cuts 1-3: 20
#cuts 4-6: 78
#cuts 7-9: 20
#cuts >= 20: 0
BICCOS time: 0.8056240081787109 
BICCOS Cumulative time: 2.3916969299316406
Preprocessing time: 0.1739351749420166 Inference time: 0.5391125679016113 Add cuts time: 0.08798623085021973 Cut analysis time: 0.004590034484863281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01719 (18), -0.01707 (18), -0.01661 (18), -0.01636 (18), -0.01636 (18), -0.01632 (18), -0.01618 (18), -0.01594 (18), -0.01591 (18), -0.01590 (18), -0.01584 (18), -0.01583 (18), -0.01574 (18), -0.01567 (18), -0.01556 (18), -0.01550 (18), -0.01541 (18), -0.01531 (18), -0.01525 (18), -0.01523 (18), 
Length of domains: 2959
Time: pickout 0.0413    decision 0.1663    set_bounds 0.2498    solve 0.7441    add 0.0148    
Accumulated time: pickout 0.2246    decision 1.2195    set_bounds 1.0000    solve 4.0490    add 0.7677    
Current (lb-rhs): -0.017190754413604736
11788 domains visited
Cumulative time: 9.99424934387207

BaB round 11
batch: 2959
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2250] [/input, 2250] [/input, 2250] [/input, 2250] [/input-8, 2021] [/input, 2250] [/input, 2250] [/input-8, 2021] [/input, 2250] [/input-8, 2021] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018094420433044434
10 lb beta sum: 0.8154613971710205, worst -0.04860961437225342
Time: prepare 0.1343    bound 0.5470    transfer 0.0845    finalize 0.0420    func 0.8476    
Accumulated time: func 5.0724    prepare 0.5794    bound 3.5048    transfer 0.2169    finalize 0.3771    
all_split False
======================Cut inference begins======================
max lb tensor(0.45331812) min lb tensor(-0.01604080)
Number of Verified Splits: 3797 of 5918
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 29
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 1.0366714000701904 
BICCOS Cumulative time: 3.428368330001831
Preprocessing time: 0.40155768394470215 Inference time: 0.5457789897918701 Add cuts time: 0.0883638858795166 Cut analysis time: 0.0009708404541015625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01604 (19), -0.01576 (19), -0.01559 (19), -0.01533 (19), -0.01492 (19), -0.01489 (19), -0.01487 (19), -0.01480 (19), -0.01475 (19), -0.01454 (19), -0.01438 (19), -0.01424 (19), -0.01423 (19), -0.01421 (19), -0.01414 (19), -0.01410 (19), -0.01405 (19), -0.01397 (19), -0.01391 (19), -0.01389 (19), 
Length of domains: 2121
Time: pickout 0.0950    decision 0.1809    set_bounds 0.2639    solve 0.8499    add 0.0110    
Accumulated time: pickout 0.3196    decision 1.4004    set_bounds 1.2638    solve 4.8989    add 0.7787    
Current (lb-rhs): -0.016040802001953125
13909 domains visited
Cumulative time: 12.496821641921997

BaB round 12
batch: 2121
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 956] [/input-8, 956] [/input-8, 2004] [/input-8, 2004] [/input-8, 956] [/input-8, 956] [/input-8, 2004] [/input-8, 2004] [/input-8, 956] [/input-8, 2004] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01658785343170166
10 lb beta sum: 2.0287365913391113, worst -0.014636844396591187
Time: prepare 0.0973    bound 0.3974    transfer 0.0287    finalize 0.0256    func 0.5770    
Accumulated time: func 5.6494    prepare 0.6770    bound 3.9022    transfer 0.2456    finalize 0.4027    
all_split False
======================Cut inference begins======================
max lb tensor(0.97726858) min lb tensor(-0.01463285)
Number of Verified Splits: 3577 of 4242
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.9604849815368652 
BICCOS Cumulative time: 4.388853311538696
Preprocessing time: 0.14667749404907227 Inference time: 0.7619960308074951 Add cuts time: 0.05143165588378906 Cut analysis time: 0.00037980079650878906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01463 (20), -0.01379 (20), -0.01362 (20), -0.01347 (20), -0.01311 (20), -0.01279 (20), -0.01267 (20), -0.01266 (20), -0.01266 (20), -0.01256 (20), -0.01249 (20), -0.01232 (20), -0.01196 (20), -0.01195 (20), -0.01185 (20), -0.01178 (20), -0.01171 (20), -0.01165 (20), -0.01155 (20), -0.01153 (20), 
Length of domains: 665
Time: pickout 0.0334    decision 0.1323    set_bounds 0.1882    solve 0.5779    add 0.0132    
Accumulated time: pickout 0.3530    decision 1.5328    set_bounds 1.4520    solve 5.4769    add 0.7919    
Current (lb-rhs): -0.014632850885391235
14574 domains visited
Cumulative time: 14.449090003967285

BaB round 13
batch: 665
splitting decisions: 
split level 0: [/input-8, 1709] [/input, 1996] [/input-8, 1709] [/input-8, 1709] [/input-8, 956] [/input-8, 1709] [/input-8, 956] [/input-8, 1709] [/input-8, 956] [/input-8, 1709] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.015594959259033203

all verified at 1th iter
Time: prepare 0.0322    bound 0.0172    transfer 0.0036    finalize 0.0075    func 0.0698    
Accumulated time: func 5.7192    prepare 0.7095    bound 3.9194    transfer 0.2492    finalize 0.4102    
all_split False
======================Cut inference begins======================
max lb tensor(0.05279927) min lb tensor(1.23828650e-05)
Number of Verified Splits: 1330 of 1330
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.04215240478515625 
BICCOS Cumulative time: 4.4310057163238525
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0154    decision 0.0476    set_bounds 0.0598    solve 0.0702    add 0.0002    
Accumulated time: pickout 0.3683    decision 1.5803    set_bounds 1.5118    solve 5.5471    add 0.7922    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
14574 domains visited
Cumulative time: 14.693217992782593


Properties batch 1, size 1
Remaining timeout: 183.67729878425598
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 183.67717933654785
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 183.67715430259705
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 183.6771342754364
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 183.67711329460144
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 183.67709398269653
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 183.6770749092102
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 183.6770555973053
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 16.3231 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 124, vnnlib ID: 124 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.69559193, -7.96780491, -6.96483183, -7.45871067, -6.68889904,
         -7.58828831, -6.67497444, -6.98177767, -8.06610775, -8.63962460]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [547]; unstable size 547; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 228, 1, 547] with unstable size 227 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 547] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 547] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [227]; unstable size 227; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 227] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 227] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.58523273, -0.92486894, -2.40603924, -1.88837290, -2.64663839,
         -1.76642704, -2.72795200, -2.38057590, -1.24313211]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.69559193, -7.96780491, -6.96483183, -7.45871067, -6.68889904,
         -7.58828831, -6.67497444, -6.98177767, -8.06610775, -8.63962460]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.69559193, -7.96780586, -6.96483278, -7.45871067, -6.68889999,
          -7.58828878, -6.67497540, -6.98177910, -8.06610775, -8.63962555],
         [-7.69559193, -7.96780586, -6.96483278, -7.45871067, -6.68889999,
          -7.58828878, -6.67497540, -6.98177910, -8.06610775, -8.63962555]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.94403362, -0.67181969, -1.67479277, -1.18091488, -1.95072556,
          -1.05133677, -1.96465015, -1.65784645, -0.57351780]]],
       device='cuda:0')
number of violation:  9
clean attack image tensor([[[[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         ...,


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1100 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 125, vnnlib ID: 125 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.45314455,  -7.18863773,  -8.37823200,  -9.04793167,  -9.03023815,
          -9.23170471, -10.10972786, -10.12581825,  -6.64005661,  -7.36846209]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [564]; unstable size 564; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 564] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 564] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 564] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 148] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.44336748, -0.41944861,  0.41273689,  1.05374670,  1.06570005,
          1.21813250,  2.11687565,  2.11616468, -1.28266501]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.45314455,  -7.18863773,  -8.37823200,  -9.04793167,  -9.03023815,
          -9.23170471, -10.10972786, -10.12581825,  -6.64005661,  -7.36846209]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.45314312,  -7.18863678,  -8.37823296,  -9.04792976,  -9.03023720,
           -9.23170471, -10.10972786, -10.12581825,  -6.64005566,  -7.36846113],
         [ -7.45314312,  -7.18863678,  -8.37823296,  -9.04792976,  -9.03023720,
           -9.23170471, -10.10972786, -10.12581825,  -6.64005566,  -7.36846113]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.08468199, -0.17982435, -0.72840548]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0769 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 126, vnnlib ID: 126 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.54385185, -7.41220284, -2.34506559, -2.95553207, -2.41963601,
         -3.01310992, -2.81382346, -2.59146428, -7.24296570, -5.83741570]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [396]; unstable size 396; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 396] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 396] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 396] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 177] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.65073228,  4.21796799, -0.26915115,  0.22882640,  0.28623378,
         -0.01064357, -0.09029412,  4.20063686,  2.69216037]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.54385185, -7.41220284, -2.34506559, -2.95553207, -2.41963601,
         -3.01310992, -2.81382346, -2.59146428, -7.24296570, -5.83741570]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.54385185, -7.41220379, -2.34506559, -2.95553231, -2.41963625,
          -3.01311040, -2.81382322, -2.59146428, -7.24296570, -5.83741570],
         [-5.54385185, -7.41220379, -2.34506559, -2.95553231, -2.41963625,
          -3.01311040, -2.81382322, -2.59146428, -7.24296570, -5.83741570]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07457066,  0.39418697,  0.17182803]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]],


         [[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]],


         [[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0737 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 127, vnnlib ID: 127 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.39800262, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
         -5.32085514, -5.70522690, -5.39239740, -4.68354988, -5.44279432]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [602]; unstable size 602; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 137, 1, 602] with unstable size 136 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 602] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 602] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [136]; unstable size 136; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 136] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 136] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.73008424,  1.05035090, -0.48766088, -0.22834921, -0.77157807,
         -0.10954219,  0.24981642, -0.21459568,  0.21009290]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.39800262, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
         -5.32085514, -5.70522690, -5.39239740, -4.68354988, -5.44279432]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.39800215, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
          -5.32085562, -5.70522690, -5.39239693, -4.68354988, -5.44279432],
         [-4.39800215, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
          -5.32085562, -5.70522690, -5.39239693, -4.68354988, -5.44279432]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.28554773,  0.22653723,  0.50871849, -0.00213194,  0.63730574,
           0.70884705]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0818 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 128, vnnlib ID: 128 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.41261196, -10.11622715,  -6.97528791,  -7.70427608,  -6.80372143,
          -7.77790976,  -6.57194042,  -8.02606297,  -9.93407154,  -9.15845585]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [471]; unstable size 471; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 210, 1, 471] with unstable size 209 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 471] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 471] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [209]; unstable size 209; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 209] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 209] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.17617571,  2.53004336,  0.03650153,  0.78286874, -0.09084713,
          0.84507656,  0.92964917,  2.50925636,  1.68634748]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.41261196, -10.11622715,  -6.97528791,  -7.70427608,  -6.80372143,
          -7.77790976,  -6.57194042,  -8.02606297,  -9.93407154,  -9.15845585]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.89it/s]100%|██████████| 1/1 [00:00<00:00,  8.88it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.12287617, -9.92002869, -6.60754442, -7.37705517, -6.42930222,
          -7.44449568, -6.38382149, -7.65928459, -9.62154961, -8.92986012]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04548073]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1153 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.553857803344727
alpha/beta optimization time: 1.2158920764923096
initial alpha-crown bounds: tensor([[ 1.19834507,  2.55369520,  0.05347478,  0.79098052, -0.08158445,
          0.85336983,  0.94275814,  2.53685832,  1.70595980]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.08158445358276367
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.60333275794983
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.60328698158264
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.60326075553894
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.60323929786682
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.60322070121765
Verifying property 4 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08158445]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.41261196, -10.11622715,  -6.97528791,  -7.70427608,  -6.80372143,
         -7.77790976,  -6.57194042,  -8.02606297,  -9.93407154,  -9.15845585],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08158445]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 471
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 206
Node /15 input 0: size torch.Size([100]) unstable 4
-----------------
# of unstable neurons: 681
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011277198791503906
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08158361911773682
10 lb beta sum: 0.0, worst -0.08158421516418457
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0529    transfer 0.0001    finalize 0.0001    func 0.0533    
Accumulated time: func 0.0533    prepare 0.0002    bound 0.0529    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 50] 
split level 1: [/input-12, 5] 
split level 2: [/input-8, 1443] 
split level 3: [/input-8, 555] 
split level 4: [/input-8, 20] 
split level 5: [/input-8, 1457] 
split level 6: [/input-8, 1207] 
split level 7: [/input-8, 28] 
split level 8: [/input-8, 1451] 
split level 9: [/input-8, 1437] 
split level 10: [/input-8, 750] 
split level 11: [/input-8, 1462] 
split level 12: [/input-8, 19] 
split level 13: [/input-8, 313] 
split level 14: [/input-8, 1425] 
split level 15: [/input-8, 339] 
split level 16: [/input-8, 1225] 
split level 17: [/input-8, 916] 
split level 18: [/input-8, 233] 
split level 19: [/input-8, 1628] 
split level 20: [/input-8, 796] 
split level 21: [/input-8, 1458] 
split level 22: [/input-8, 805] 
split level 23: [/input-8, 1195] 
split level 24: [/input-8, 1274] 
split level 25: [/input-8, 1637] 
split level 26: [/input-8, 908] 
split level 27: [/input-8, 1674] 
split level 28: [/input-8, 757] 
split level 29: [/input-8, 797] 
split level 30: [/input-8, 1035] 
split level 31: [/input-8, 803] 
split level 32: [/input-8, 148] 
split level 33: [/input-8, 737] 
split level 34: [/input-8, 915] 
split level 35: [/input-8, 1321] 
split level 36: [/input-8, 1292] 
split level 37: [/input-8, 1134] 
split level 38: [/input-8, 1466] 
split level 39: [/input-8, 567] 
split level 40: [/input-8, 923] 
split level 41: [/input-8, 1250] 
split level 42: [/input-8, 718] 
split level 43: [/input-8, 927] 
split level 44: [/input-8, 1186] 
split level 45: [/input-8, 1171] 
split level 46: [/input-8, 1226] 
split level 47: [/input-8, 938] 
split level 48: [/input-8, 934] 
split level 49: [/input-8, 1291] 
split level 50: [/input-8, 1236] 
split level 51: [/input, 1721] 
split level 52: [/input-8, 1645] 
split level 53: [/input-8, 1214] 
split level 54: [/input-8, 946] 
split level 55: [/input-8, 1775] 
split level 56: [/input-8, 1330] 
split level 57: [/input-8, 2014] 
split level 58: [/input-8, 1766] 
split level 59: [/input, 1253] 
split level 60: [/input-8, 1270] 
split level 61: [/input-8, 726] 
split level 62: [/input-8, 570] 
split level 63: [/input, 2890] 
split level 64: [/input, 1099] 
split level 65: [/input-8, 1228] 
split level 66: [/input-8, 375] 
split level 67: [/input-8, 1581] 
split level 68: [/input-8, 52] 
split level 69: [/input-8, 1626] 
split level 70: [/input, 1115] 
split level 71: [/input-8, 1325] 
split level 72: [/input-8, 1098] 
split level 73: [/input-8, 1254] 
split level 74: [/input-8, 907] 
split level 75: [/input-8, 1267] 
split level 76: [/input-8, 1582] 
split level 77: [/input-8, 951] 
split level 78: [/input, 629] 
split level 79: [/input-8, 1767] 
split level 80: [/input-8, 1322] 
split level 81: [/input, 3668] 
split level 82: [/input, 3652] 
split level 83: [/input, 839] 
split level 84: [/input-8, 1036] 
split level 85: [/input-8, 1324] 
split level 86: [/input, 680] 
split level 87: [/input, 1773] 
split level 88: [/input, 4010] 
split level 89: [/input-8, 1246] 
split level 90: [/input-8, 1745] 
split level 91: [/input, 2113] 
split level 92: [/input, 1251] 
split level 93: [/input-8, 929] 
split level 94: [/input-8, 1218] 
split level 95: [/input, 3975] 
split level 96: [/input-8, 937] 
split level 97: [/input-8, 1289] 
split level 98: [/input, 1094] 
split level 99: [/input-8, 1294] 
split level 100: [/input, 1720] 
split level 101: [/input, 4007] 
split level 102: [/input, 1479] 
split level 103: [/input, 4025] 
split level 104: [/input-8, 535] 
split level 105: [/input, 3828] 
split level 106: [/input-8, 1612] 
split level 107: [/input-8, 374] 
split level 108: [/input-8, 1153] 
split level 109: [/input, 745] 
split level 110: [/input-8, 64] 
split level 111: [/input-8, 920] 
split level 112: [/input-8, 811] 
split level 113: [/input, 3642] 
split level 114: [/input, 4009] 
split level 115: [/input, 3249] 
split level 116: [/input-8, 6] 
split level 117: [/input-8, 1220] 
split level 118: [/input-8, 936] 
split level 119: [/input, 988] 
split level 120: [/input, 822] 
split level 121: [/input-8, 1609] 
split level 122: [/input-8, 1230] 
split level 123: [/input-8, 324] 
split level 124: [/input, 2117] 
split level 125: [/input-8, 1639] 
split level 126: [/input, 1378] 
split level 127: [/input, 3213] 
split level 128: [/input, 3230] 
split level 129: [/input, 1377] 
split level 130: [/input, 194] 
split level 131: [/input-8, 1840] 
split level 132: [/input, 1493] 
split level 133: [/input-8, 2023] 
split level 134: [/input-8, 351] 
split level 135: [/input, 2625] 
split level 136: [/input, 1864] 
split level 137: [/input-8, 899] 
split level 138: [/input, 1393] 
split level 139: [/input-8, 953] 
split level 140: [/input, 1410] 
split level 141: [/input-8, 1224] 
split level 142: [/input, 1475] 
split level 143: [/input-8, 1575] 
split level 144: [/input, 1473] 
split level 145: [/input, 1390] 
split level 146: [/input, 1760] 
split level 147: [/input, 1169] 
split level 148: [/input, 280] 
split level 149: [/input, 3155] 
split level 150: [/input-8, 2024] 
split level 151: [/input, 4028] 
split level 152: [/input, 2772] 
split level 153: [/input, 2539] 
split level 154: [/input-8, 1678] 
split level 155: [/input, 3782] 
split level 156: [/input, 4062] 
split level 157: [/input-8, 345] 
split level 158: [/input, 3736] 
split level 159: [/input, 1160] 
split level 160: [/input, 294] 
split level 161: [/input-8, 1640] 
split level 162: [/input, 323] 
split level 163: [/input, 1159] 
split level 164: [/input, 3294] 
split level 165: [/input-8, 1601] 
split level 166: [/input, 1779] 
split level 167: [/input, 1153] 
split level 168: [/input, 873] 
split level 169: [/input, 3931] 
split level 170: [/input, 3428] 
split level 171: [/input, 2412] 
split level 172: [/input, 4058] 
split level 173: [/input, 1122] 
split level 174: [/input, 909] 
split level 175: [/input, 2088] 
split level 176: [/input, 408] 
split level 177: [/input-8, 369] 
split level 178: [/input-8, 1830] 
split level 179: [/input-8, 1882] 
split level 180: [/input-8, 235] 
split level 181: [/input-8, 1855] 
split level 182: [/input, 209] 
split level 183: [/input-8, 1687] 
split level 184: [/input, 153] 
split level 185: [/input, 2259] 
split level 186: [/input, 2362] 
split level 187: [/input, 1144] 
split level 188: [/input, 895] 
split level 189: [/input-8, 72] 
split level 190: [/input-8, 1316] 
split level 191: [/input, 2400] 
split level 192: [/input, 2396] 
split level 193: [/input, 2275] 
split level 194: [/input-8, 1695] 
split level 195: [/input-8, 1891] 
split level 196: [/input-8, 1902] 
split level 197: [/input, 452] 
split level 198: [/input, 379] 
split level 199: [/input, 2597] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0871192216873169
10 lb beta sum: 0.0, worst -0.08185458183288574
Time: prepare 0.0114    bound 0.1034    transfer 0.0016    finalize 0.0032    func 0.1222    
Accumulated time: func 0.1755    prepare 0.0217    bound 0.1562    transfer 0.0017    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(-0.03181827) min lb tensor(-0.08158362)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.01019597053527832 
BICCOS Cumulative time: 0.01019597053527832
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07841 (1), -0.07841 (1), -0.07838 (1), -0.07830 (1), -0.07823 (1), -0.07814 (1), -0.07811 (1), -0.07806 (1), -0.07805 (1), -0.07804 (1), -0.07793 (1), -0.07792 (1), -0.07768 (1), -0.07767 (1), -0.07753 (1), -0.07730 (1), -0.07730 (1), -0.07716 (1), -0.07708 (1), -0.07704 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5155    set_bounds 0.0096    solve 0.1223    add 0.1953    
Accumulated time: pickout 0.0003    decision 0.5155    set_bounds 0.0096    solve 0.1223    add 0.1953    
Current (lb-rhs): -0.07840573787689209
50 domains visited
Cumulative time: 0.9253814220428467

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 5] [/input-12, 5] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 1: [/input-8, 555] [/input-8, 555] [/input-12, 5] [/input-8, 555] [/input-12, 5] [/input-12, 5] [/input-8, 555] [/input-12, 5] [/input-12, 5] [/input-12, 5] 
split level 2: [/input-8, 28] [/input-8, 1457] [/input-8, 555] [/input-8, 28] [/input-8, 555] [/input-8, 28] [/input-8, 1457] [/input-8, 555] [/input-8, 555] [/input-8, 555] 
split level 3: [/input-8, 1437] [/input-8, 28] [/input-8, 28] [/input-8, 1437] [/input-8, 28] [/input, 1667] [/input-8, 28] [/input-8, 28] [/input-8, 28] [/input-8, 28] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07675695419311523
10 lb beta sum: 0.0, worst -0.07679116725921631
Time: prepare 0.0127    bound 0.1005    transfer 0.0007    finalize 0.0027    func 0.1192    
Accumulated time: func 0.2947    prepare 0.0346    bound 0.2567    transfer 0.0024    finalize 0.0060    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01292825) min lb tensor(-0.07674372)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.01225423812866211 
BICCOS Cumulative time: 0.02245020866394043
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02639 (2), -0.02635 (2), -0.02615 (2), -0.02611 (2), -0.02571 (2), -0.02548 (2), -0.02526 (2), -0.02521 (2), -0.02500 (2), -0.02473 (2), -0.02465 (2), -0.02460 (2), -0.02450 (2), -0.02439 (2), -0.02432 (2), -0.02426 (2), -0.02422 (2), -0.02418 (2), -0.02398 (2), -0.02396 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0198    set_bounds 0.0136    solve 0.1194    add 0.1503    
Accumulated time: pickout 0.0015    decision 0.5353    set_bounds 0.0232    solve 0.2417    add 0.3457    
Current (lb-rhs): -0.026387333869934082
100 domains visited
Cumulative time: 1.2423171997070312

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 5] [/input-12, 5] [/input-8, 555] [/input-8, 555] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-8, 555] [/input-8, 555] 
split level 1: [/input-8, 555] [/input-8, 555] [/input-8, 28] [/input-8, 28] [/input-8, 28] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 28] [/input-8, 28] 
split level 2: [/input-8, 28] [/input-8, 1457] [/input-8, 1451] [/input-8, 1451] [/input-8, 1437] [/input-8, 28] [/input-8, 28] [/input-8, 1457] [/input-8, 1437] [/input-8, 1437] 
split level 3: [/input-8, 1437] [/input-8, 28] [/input-8, 1437] [/input-8, 1437] [/input, 3682] [/input-8, 1437] [/input-8, 1437] [/input-8, 28] [/input-8, 313] [/input-8, 313] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025187969207763672
10 lb beta sum: 0.0, worst -0.025073468685150146
Time: prepare 0.0137    bound 0.1122    transfer 0.0014    finalize 0.0026    func 0.1325    
Accumulated time: func 0.4272    prepare 0.0486    bound 0.3689    transfer 0.0038    finalize 0.0086    
all_split False
======================Cut inference begins======================
max lb tensor(0.00376743) min lb tensor(-0.02484775)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 1
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.013791561126708984 
BICCOS Cumulative time: 0.036241769790649414
Preprocessing time: 0.012133598327636719 Inference time: 0.0002884864807128906 Add cuts time: 0.00027489662170410156 Cut analysis time: 0.0010945796966552734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00797 (3), -0.00781 (3), -0.00780 (3), -0.00780 (3), -0.00773 (3), -0.00747 (3), -0.00746 (3), -0.00731 (3), -0.00729 (3), -0.00726 (3), -0.00724 (3), -0.00724 (3), -0.00721 (3), -0.00721 (3), -0.00720 (3), -0.00715 (3), -0.00714 (3), -0.00711 (3), -0.00705 (3), -0.00703 (3), 
Length of domains: 50
Time: pickout 0.0015    decision 0.0222    set_bounds 0.0164    solve 0.1326    add 0.0841    
Accumulated time: pickout 0.0030    decision 0.5575    set_bounds 0.0396    solve 0.3742    add 0.4297    
Current (lb-rhs): -0.007966995239257812
150 domains visited
Cumulative time: 1.5130808353424072

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 555] [/input-8, 28] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] 
split level 1: [/input-8, 28] [/input-8, 1437] [/input-8, 28] [/input-8, 28] [/input-8, 1457] [/input-8, 28] [/input-8, 1457] [/input-8, 28] [/input-8, 1457] [/input-8, 1457] 
split level 2: [/input-8, 1451] [/input-8, 313] [/input-8, 1437] [/input-8, 1437] [/input-8, 28] [/input-8, 1451] [/input-8, 28] [/input-8, 1451] [/input-8, 28] [/input-8, 28] 
split level 3: [/input-8, 1437] [/input, 3682] [/input-8, 313] [/input-8, 313] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input, 3682] [/input, 3682] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.007401943206787109
10 lb beta sum: 0.1743496209383011, worst -0.006199359893798828
Time: prepare 0.0081    bound 0.1536    transfer 0.0014    finalize 0.0025    func 0.1688    
Accumulated time: func 0.5960    prepare 0.0570    bound 0.5226    transfer 0.0052    finalize 0.0110    
all_split False
======================Cut inference begins======================
max lb tensor(0.00984454) min lb tensor(-0.00607276)
Number of Verified Splits: 106 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 7
#cuts 4-6: 26
#cuts >= 20: 0
BICCOS time: 0.022885799407958984 
BICCOS Cumulative time: 0.0591275691986084
Preprocessing time: 0.01182246208190918 Inference time: 0.004558086395263672 Add cuts time: 0.005239963531494141 Cut analysis time: 0.0012652873992919922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00164 (4), -0.00159 (4), -0.00159 (4), -0.00149 (4), -0.00147 (4), -0.00145 (4), -0.00145 (4), -0.00143 (4), -0.00142 (4), -0.00142 (4), -0.00141 (4), -0.00139 (4), -0.00134 (4), -0.00130 (4), -0.00129 (4), -0.00126 (4), -0.00124 (4), -0.00122 (4), -0.00122 (4), -0.00121 (4), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0204    set_bounds 0.0155    solve 0.1689    add 0.0940    
Accumulated time: pickout 0.0040    decision 0.5779    set_bounds 0.0551    solve 0.5431    add 0.5237    
Current (lb-rhs): -0.0016370508819818497
200 domains visited
Cumulative time: 1.8361380100250244

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 555] [/input-8, 28] [/input-8, 28] [/input-8, 555] [/input-8, 28] [/input-8, 28] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 555] 
split level 1: [/input-8, 28] [/input-8, 1437] [/input-8, 1437] [/input-8, 1451] [/input-8, 1437] [/input-8, 1437] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1457] 
split level 2: [/input-8, 1451] [/input-8, 313] [/input-8, 313] [/input-8, 1437] [/input-8, 313] [/input-8, 313] [/input-8, 1134] [/input-8, 1134] [/input-8, 1134] [/input-8, 1451] 
split level 3: [/input-8, 1134] [/input-8, 19] [/input-8, 19] [/input-8, 1134] [/input-8, 19] [/input-8, 19] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 1437] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01340186595916748
10 lb beta sum: 0.16534389555454254, worst -0.00018633902072906494

all verified at 14th iter
Time: prepare 0.0083    bound 0.1305    transfer 0.0014    finalize 0.2006    func 0.3435    
Accumulated time: func 0.9395    prepare 0.0655    bound 0.6531    transfer 0.0066    finalize 0.2117    
all_split False
======================Cut inference begins======================
max lb tensor(0.01114112) min lb tensor(2.62260437e-06)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 7
#cuts 4-6: 34
#cuts >= 20: 0
BICCOS time: 0.0510714054107666 
BICCOS Cumulative time: 0.110198974609375
Preprocessing time: 0.012901544570922852 Inference time: 0.01926398277282715 Add cuts time: 0.017255067825317383 Cut analysis time: 0.0016508102416992188
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0208    set_bounds 0.0155    solve 0.3436    add 0.0305    
Accumulated time: pickout 0.0051    decision 0.5988    set_bounds 0.0706    solve 0.8867    add 0.5542    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457]), tensor([-1., -1.]), tensor([0, 0]), tensor([-3.92422671e-30,  2.04037293e-03]), tensor([2, 3])), '/input-12': ([50, 5], [-1.0, -1.0], [0, 0], [1.333573251827147e-10, 0.013883756473660469], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457,   28]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([-3.92422671e-30,  6.74711308e-03,  1.30044087e-03]), tensor([2, 3, 4])), '/input-12': ([50, 5], [-1.0, -1.0], [0, 0], [1.333573251827147e-10, 0.013883756473660469], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457,   28]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([-3.92422671e-30,  6.74711308e-03,  2.39674910e-03]), tensor([2, 3, 4])), '/input-12': ([50, 5], [-1.0, -1.0], [0, 0], [1.333573251827147e-10, 0.013883756473660469], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([555]), tensor([1.]), tensor([0]), tensor([0.00137966]), tensor([2])), '/input-12': ([50, 5], [-1.0, -1.0], [0, 0], [1.333573251827147e-10, 0.013883756473660469], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([555,  28]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.30098840e-14, 3.70408758e-03]), tensor([2, 3])), '/input-12': ([50, 5], [-1.0, 1.0], [0, 0], [1.333573251827147e-10, 0.01668088324368], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555,   28, 1437]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.30098840e-14, 4.78013000e-03, 1.04643567e-03]), tensor([2, 3, 4])), '/input-12': ([50, 5], [-1.0, 1.0], [0, 0], [1.333573251827147e-10, 0.01668088324368], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555,   28, 1437]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([1.30098840e-14, 4.78013000e-03, 1.84358819e-03]), tensor([2, 3, 4])), '/input-12': ([50, 5], [-1.0, 1.0], [0, 0], [1.333573251827147e-10, 0.01668088324368], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([555]), tensor([1.]), tensor([0]), tensor([0.00158803]), tensor([2])), '/input-12': ([50, 5], [-1.0, 1.0], [0, 0], [1.333573251827147e-10, 0.01668088324368], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457]), tensor([-1., -1.]), tensor([0, 0]), tensor([8.31491542e-11, 2.43418082e-03]), tensor([2, 3])), '/input-12': ([50, 5], [1.0, -1.0], [0, 0], [1.333573251827147e-10, 0.014724599197506905], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457]), tensor([-1.,  1.]), tensor([0, 0]), tensor([8.31491542e-11, 8.12219270e-03]), tensor([2, 3])), '/input-12': ([50, 5], [1.0, -1.0], [0, 0], [1.333573251827147e-10, 0.014724599197506905], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([555]), tensor([1.]), tensor([0]), tensor([-3.92422671e-30]), tensor([2])), '/input-12': ([50, 5], [1.0, -1.0], [0, 0], [1.333573251827147e-10, 0.014724599197506905], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457]), tensor([-1., -1.]), tensor([0, 0]), tensor([8.72769634e-11, 2.36259564e-03]), tensor([2, 3])), '/input-12': ([50, 5], [1.0, 1.0], [0, 0], [1.333573251827147e-10, 0.014455543830990791], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457]), tensor([-1.,  1.]), tensor([0, 0]), tensor([8.72769634e-11, 7.96650536e-03]), tensor([2, 3])), '/input-12': ([50, 5], [1.0, 1.0], [0, 0], [1.333573251827147e-10, 0.014455543830990791], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([555]), tensor([1.]), tensor([0]), tensor([0.00237529]), tensor([2])), '/input-12': ([50, 5], [1.0, 1.0], [0, 0], [1.333573251827147e-10, 0.014455543830990791], [0, 1])}
Shallow branching resets to n domains:  14
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01815974712371826
10 lb beta sum: 0.6605200171470642, worst -0.016601502895355225
Time: prepare 0.0006    bound 0.1729    transfer 0.0002    finalize 0.0003    func 0.1742    
Accumulated time: func 1.1137    prepare 0.0661    bound 0.8260    transfer 0.0068    finalize 0.2119    
After pruning, left:  8

Back to Regular BaB

BaB round 1
batch: 8
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 28] [/input-8, 1457] [/input-8, 1437] [/input-8, 28] [/input-8, 28] [/input-8, 1457] [/input-8, 28] [/input-8, 1457] 
split level 1: [/input-8, 1437] [/input-8, 28] [/input-8, 1451] [/input-8, 1451] [/input-8, 1458] [/input-8, 28] [/input-8, 1458] [/input-8, 28] 
split level 2: [/input-8, 1451] [/input-8, 1437] [/input-8, 19] [/input-8, 1437] [/input-8, 19] [/input-8, 1458] [/input-8, 19] [/input-8, 1451] 
split level 3: [/input-8, 313] [/input-8, 313] [/input-8, 1134] [/input-8, 19] [/input-8, 1437] [/input-8, 1437] [/input-8, 1451] [/input-8, 1458] 
split level 4: [/input-8, 19] [/input-8, 19] [/input-8, 313] [/input-8, 1134] [/input-8, 313] [/input-8, 313] [/input-8, 1437] [/input-8, 1437] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7329473495483398, worst -0.008091777563095093
10 lb beta sum: 0.7895401120185852, worst -0.1382136046886444
Time: prepare 0.0106    bound 0.1701    transfer 0.0024    finalize 0.0015    func 0.1863    
Accumulated time: func 1.3000    prepare 0.0771    bound 0.9961    transfer 0.0092    finalize 0.2134    
all_split False
======================Cut inference begins======================
max lb tensor(0.01193973) min lb tensor(-0.00762603)
Number of Verified Splits: 182 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.7292818427085876, worst -0.1277444064617157
10 lb beta sum: 0.7008520364761353, worst -0.10267196595668793
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 45.
#cuts 1-3: 7
#cuts 4-6: 36
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.286862850189209 
BICCOS Cumulative time: 0.397061824798584
Preprocessing time: 0.006893634796142578 Inference time: 0.27513742446899414 Add cuts time: 0.003064870834350586 Cut analysis time: 0.0017669200897216797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00763 (5), -0.00677 (5), -0.00639 (5), -0.00636 (5), -0.00595 (5), -0.00590 (5), -0.00581 (5), -0.00576 (5), -0.00571 (5), -0.00559 (5), -0.00558 (5), -0.00518 (5), -0.00518 (5), -0.00514 (5), -0.00503 (5), -0.00503 (5), -0.00499 (5), -0.00484 (5), -0.00468 (5), -0.00441 (5), 
Length of domains: 74
Time: pickout 0.0011    decision 0.0236    set_bounds 0.0168    solve 0.1864    add 0.0016    
Accumulated time: pickout 0.0063    decision 0.6223    set_bounds 0.0874    solve 1.0731    add 0.5559    
Current (lb-rhs): -0.00762602686882019
274 domains visited
Cumulative time: 3.024707078933716

BaB round 2
batch: 74
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1451] [/input-8, 1457] [/input-8, 1451] [/input-8, 796] [/input-8, 1451] [/input-8, 1451] [/input-8, 796] [/input-8, 1451] [/input-8, 1451] [/input-8, 796] 
split level 1: [/input-8, 1628] [/input-8, 313] [/input-8, 19] [/input-8, 19] [/input-8, 1628] [/input-8, 19] [/input-8, 19] [/input-8, 1628] [/input-8, 19] [/input-8, 19] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.006097912788391113
10 lb beta sum: 0.32668858766555786, worst -0.004881948232650757
Time: prepare 0.0046    bound 0.1704    transfer 0.0024    finalize 0.0018    func 0.1812    
Accumulated time: func 1.4811    prepare 0.0819    bound 1.1665    transfer 0.0116    finalize 0.2152    
all_split False
======================Cut inference begins======================
max lb tensor(0.00465894) min lb tensor(-0.00481206)
Number of Verified Splits: 245 of 296
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06968927383422852
10 lb beta sum: 0.6002515554428101, worst -0.06679598987102509
Total number of valid cuts: 45.
#cuts 1-3: 7
#cuts 4-6: 36
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.3200404644012451 
BICCOS Cumulative time: 0.7171022891998291
Preprocessing time: 0.008689403533935547 Inference time: 0.3093428611755371 Add cuts time: 0.0019729137420654297 Cut analysis time: 3.528594970703125e-05
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00481 (7), -0.00397 (7), -0.00361 (7), -0.00360 (7), -0.00348 (7), -0.00310 (7), -0.00300 (7), -0.00283 (7), -0.00278 (7), -0.00278 (7), -0.00269 (7), -0.00244 (7), -0.00242 (7), -0.00235 (7), -0.00227 (7), -0.00227 (7), -0.00225 (7), -0.00193 (7), -0.00178 (7), -0.00164 (7), 
Length of domains: 51
Time: pickout 0.0019    decision 0.0185    set_bounds 0.0145    solve 0.1813    add 0.0014    
Accumulated time: pickout 0.0082    decision 0.6409    set_bounds 0.1019    solve 1.2543    add 0.5573    
Current (lb-rhs): -0.004812061786651611
325 domains visited
Cumulative time: 3.5643138885498047

BaB round 3
batch: 51
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1134] [/input-8, 1134] [/input-8, 1134] [/input-8, 1134] [/input-8, 1134] [/input-8, 148] [/input-8, 1134] [/input-8, 1134] [/input-8, 1134] [/input-8, 148] 
split level 1: [/input-8, 52] [/input-8, 52] [/input-8, 52] [/input-8, 52] [/input-8, 52] [/input-8, 1195] [/input-8, 52] [/input-8, 52] [/input-8, 52] [/input-8, 1195] 
split level 2: [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1628] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1628] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7604056000709534, worst -0.00036960840225219727
10 lb beta sum: 0.7604056000709534, worst -0.0002624392509460449
Time: prepare 0.0168    bound 0.1758    transfer 0.0045    finalize 0.0020    func 0.2018    
Accumulated time: func 1.6829    prepare 0.0989    bound 1.3423    transfer 0.0161    finalize 0.2172    
all_split False
======================Cut inference begins======================
max lb tensor(0.00758548) min lb tensor(-0.00019926)
Number of Verified Splits: 406 of 408
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 15
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.057938575744628906 
BICCOS Cumulative time: 0.775040864944458
Preprocessing time: 0.011678934097290039 Inference time: 0.04228544235229492 Add cuts time: 0.0033931732177734375 Cut analysis time: 0.0005810260772705078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00020 (10), -0.00013 (10), 
Length of domains: 2
Time: pickout 0.0018    decision 0.0180    set_bounds 0.0222    solve 0.2019    add 0.0006    
Accumulated time: pickout 0.0100    decision 0.6589    set_bounds 0.1241    solve 1.4562    add 0.5579    
Current (lb-rhs): -0.00019925832748413086
327 domains visited
Cumulative time: 3.869065284729004

BaB round 4
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1443] [/input-8, 1443] 
split level 1: [/input-8, 1637] [/input-8, 1637] 
split level 2: [/input-8, 1195] [/input-8, 1195] 
split level 3: [/input-8, 1458] [/input-8, 1458] 
split level 4: [/input-8, 148] [/input-8, 148] 
split level 5: [/input-8, 1236] [/input-8, 1236] 
split level 6: [/input-8, 923] [/input-8, 923] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.007170557975769043

all verified at 0th iter
Time: prepare 0.0039    bound 0.0054    transfer 0.0015    finalize 0.0012    func 0.0137    
Accumulated time: func 1.6966    prepare 0.1032    bound 1.3477    transfer 0.0177    finalize 0.2184    
all_split False
======================Cut inference begins======================
max lb tensor(0.01663470) min lb tensor(0.00717056)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 19.
#cuts 1-3: 15
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.007836103439331055 
BICCOS Cumulative time: 0.7828769683837891
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0015    decision 0.0236    set_bounds 0.0208    solve 0.0138    add 0.0001    
Accumulated time: pickout 0.0114    decision 0.6824    set_bounds 0.1450    solve 1.4699    add 0.5580    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
327 domains visited
Cumulative time: 3.937443494796753


Properties batch 5, size 1
Remaining timeout: 194.43022632598877
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 194.4294788837433
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 194.42945098876953
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 194.42942881584167
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 5.5706 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 129, vnnlib ID: 129 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.83963740, -5.78964806, -1.83691561, -1.95573735, -1.63162184,
         -2.07016230, -3.15051937, -3.26623225, -1.61969507, -4.62280273]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [452]; unstable size 452; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 452] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 452] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 452] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 203] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.03636265,  2.65717554, -0.59098828, -0.13531050, -0.81601834,
          0.63781667,  0.66199255, -1.23648858,  1.56749010]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.83963740, -5.78964806, -1.83691561, -1.95573735, -1.63162184,
         -2.07016230, -3.15051937, -3.26623225, -1.61969507, -4.62280273]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.83963752, -5.78964806, -1.83691537, -1.95573735, -1.63162184,
          -2.07016230, -3.15051913, -3.26623249, -1.61969483, -4.62280178],
         [-1.83963752, -5.78964806, -1.83691537, -1.95573735, -1.63162184,
          -2.07016230, -3.15051913, -3.26623249, -1.61969483, -4.62280178]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.23052478, -0.23324692, -0.11442494, -0.43854046, -0.45046747]]],
       device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0841 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 130, vnnlib ID: 130 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.94819498, -10.50515652,  -5.49739599,  -6.42426491,  -5.53212261,
          -6.49647903,  -6.45488739,  -5.53136778, -11.77412796,  -9.99837017]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [381]; unstable size 381; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 381] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 381] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 381] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 139] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.93346739,  3.23020029, -1.30597436, -0.08756115, -1.34070396,
         -0.31846690, -1.51010036,  4.62571049,  2.77353883]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.94819498, -10.50515652,  -5.49739599,  -6.42426491,  -5.53212261,
          -6.49647903,  -6.45488739,  -5.53136778, -11.77412796,  -9.99837017]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.94819546, -10.50515652,  -5.49739647,  -6.42426586,  -5.53212261,
           -6.49647903,  -6.45488739,  -5.53136826, -11.77412796,  -9.99836922],
         [ -7.94819546, -10.50515652,  -5.49739647,  -6.42426586,  -5.53212261,
           -6.49647903,  -6.45488739,  -5.53136826, -11.77412796,  -9.99836922]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.99908257, -0.07221317, -0.96435642, -0.04159164, -0.96511078]]],
       device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0745 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 131, vnnlib ID: 131 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.40095615,  -9.83375263,  -7.76689386,  -9.66946220,  -8.91213799,
          -9.84124184, -11.04437828, -10.26787376,  -3.98419762,  -9.49902916]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [464]; unstable size 464; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 155, 1, 464] with unstable size 154 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 464] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 464] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [154]; unstable size 154; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 154] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 154] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.04108179, 5.15906668, 3.08301497, 4.88842583, 4.12479210, 5.03533173,
         6.29986477, 5.32776546, 4.85973024]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0668 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 132, vnnlib ID: 132 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.95324135, -15.74180508, -20.80966187, -22.22572708, -21.19065666,
         -22.59031105, -22.29429626, -21.67894745, -16.55251884, -15.91638851]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [432]; unstable size 432; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 132, 1, 432] with unstable size 131 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 432] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 432] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [131]; unstable size 131; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 131] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 131] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.68451166,  4.31257486,  5.69330549,  4.56155443,  6.04201555,
          5.73533630,  5.05597830,  0.24247551, -0.06809068]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.95324135, -15.74180508, -20.80966187, -22.22572708, -21.19065666,
         -22.59031105, -22.29429626, -21.67894745, -16.55251884, -15.91638851]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.31996536, -15.27309704, -20.08948708, -21.46234131, -20.40325928,
          -21.81718063, -21.57792282, -20.87321854, -15.90462685, -15.27287483]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00022221]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0760 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 133, vnnlib ID: 133 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -3.23170614, -10.46739864,  -2.10017300,  -3.30273414,  -5.96899986,
          -3.33501148,  -5.76224136,  -4.57778931,  -9.25406361,  -8.82499790]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [286]; unstable size 286; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 61, 1, 286] with unstable size 60 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 286] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 286] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [60]; unstable size 60; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 60] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 60] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93707120, 8.02992725, 1.03405452, 3.70453072, 1.06637478, 3.43099546,
         2.30599809, 6.81840992, 6.35690308]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0700 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 134, vnnlib ID: 134 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.79958057, -6.86547184, -6.03746557, -7.86904621, -6.47844791,
         -8.08712673, -6.96507740, -7.95197964, -3.79648733, -6.57416487]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [608]; unstable size 608; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 164, 1, 608] with unstable size 163 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 608] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 608] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [163]; unstable size 163; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 163] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 163] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.48984289,  1.58062875,  3.18308473,  1.96417892,  3.38943839,
          2.37361097,  3.29370785, -0.33310568,  2.16880155]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.79958057, -6.86547184, -6.03746557, -7.86904621, -6.47844791,
         -8.08712673, -6.96507740, -7.95197964, -3.79648733, -6.57416487]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.79958057, -6.86547184, -6.03746557, -7.86904621, -6.47844791,
          -8.08712673, -6.96507740, -7.95197964, -3.79648733, -6.57416487]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00309324]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.15396857,  1.01111114,  1.01111114,  ...,  1.02698421,
             1.04285717,  1.10634947],
           [ 1.02698421,  0.94761908,  0.94761908,  ...,  1.12222254,
             1.12222254,  1.16984153],
           [ 0.99523818,  0.91587305,  0.86825401,  ...,  1.12222254,
             1.13809550,  1.16984153],
           ...,
           [-0.14761895, -0.41746020, -0.43333322,  ..., -0.36984116,
            -0.33809513, -0.41746020],
           [-0.30634910, -0.56031746, -0.57619047,  ..., -0.68730158,
            -0.54444444, -0.36984116],
           [-0.22698402, -0.33809513, -0.40158719,  ..., -0.59206349,
            -0.32222211, -0.14761895]],

          [[ 1.20772982,  1.06280196,  1.06280196,  ...,  1.07890511,
             1.09500813,  1.15942061],
           [ 1.07890511,  0.99838978,  0.99838978,  ...,  1.17552364,
             1.17552364,  1.22383285],
           [ 1.04669893,  0.96618366,  0.91787446,  ...,  1.17552364,
             1.19162667,  1.22383285],
           ...,
           [-0.11272129, -0.38647330, -0.40257636,  ..., -0.33816412,
            -0.30595800, -0.38647330],
           [-0.27375188, -0.53140092, -0.54750401,  ..., -0.66022539,
            -0.51529789, -0.33816412],
           [-0.19323659, -0.30595800, -0.37037024,  ..., -0.56360704,
            -0.28985494, -0.11272129]],

          [[ 1.26086998,  1.12593722,  1.12593722,  ...,  1.14092970,
             1.15592217,  1.21589243],
           [ 1.14092970,  1.06596720,  1.06596720,  ...,  1.23088503,
             1.23088503,  1.27586246],
           [ 1.11094475,  1.03598225,  0.99100471,  ...,  1.23088503,
             1.24587750,  1.27586246],
           ...,
           [ 0.03148442, -0.22338814, -0.23838064,  ..., -0.17841063,
            -0.14842562, -0.22338814],
           [-0.11844061, -0.35832080, -0.37331331,  ..., -0.47826082,
            -0.34332830, -0.17841063],
           [-0.04347810, -0.14842562, -0.20839565,  ..., -0.38830581,
            -0.13343313,  0.03148442]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0749 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 135, vnnlib ID: 135 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.85584545,  -6.89210796, -11.20330238, -10.48305511, -10.31528664,
         -10.58248711, -11.25512695, -10.38301277,  -8.54595566,  -7.81960535]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [417]; unstable size 417; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 417] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 417] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 417] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 171] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.35080290, 3.51902580, 2.76685762, 2.67035389, 2.85706806, 3.53440428,
         2.64734840, 1.17310023, 0.69272709]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0670 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 136, vnnlib ID: 136 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.31404114, -11.99935341,  -8.52472019,  -9.11652184,  -8.93289280,
          -9.32760048, -10.07054329, -10.77766991,  -8.21101475, -11.86982346]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [351]; unstable size 351; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 351] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 351] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 351] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 141] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.09101152, 0.87874758, 1.34494710, 1.28547025, 1.54521215, 2.33845377,
         2.98431897, 0.63081133, 3.98045564]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0632 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 137, vnnlib ID: 137 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.67846966, -11.31667233,  -7.14757013,  -7.76657391,  -7.15691566,
          -7.78410292,  -6.75477409,  -8.83060551, -11.06530190, -10.73754597]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [390]; unstable size 390; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 390] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 390] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 390] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 239] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.07701063,  3.63565016, -0.04559052,  0.64380252, -0.00980759,
          0.65269995,  1.48101163,  3.16953468,  3.15534234]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.67846966, -11.31667233,  -7.14757013,  -7.76657391,  -7.15691566,
          -7.78410292,  -6.75477409,  -8.83060551, -11.06530190, -10.73754597]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.98it/s]100%|██████████| 1/1 [00:00<00:00,  8.97it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.36132240, -11.14967251,  -6.83248758,  -7.53480721,  -6.91983700,
           -7.54735374,  -6.71112919,  -8.56491947, -10.71888256, -10.59876251],
         [ -9.36132240, -11.14967251,  -6.83248758,  -7.53480721,  -6.91983700,
           -7.54735374,  -6.71112919,  -8.56491947, -10.71888256, -10.59876251]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.12135839, 0.20870781]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1143 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.945513725280762
alpha/beta optimization time: 1.2026066780090332
initial alpha-crown bounds: tensor([[ 2.10259414,  3.66781759, -0.03308117,  0.65345061,  0.00669551,
          0.66249567,  1.49558306,  3.20632243,  3.18363643]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.03308117389678955
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.61344170570374
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61340069770813
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61337757110596
Verifying property 2 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03308117]], device='cuda:0') need to verify.
Model prediction is: tensor([ -9.67846966, -11.31667233,  -7.14757013,  -7.76657391,  -7.15691566,
         -7.78410292,  -6.75477409,  -8.83060551, -11.06530190, -10.73754597],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03308117]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 390
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 237
Node /15 input 0: size torch.Size([100]) unstable 9
-----------------
# of unstable neurons: 636
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011992454528808594
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.033080220222473145
10 lb beta sum: 0.0, worst -0.033082783222198486
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0529    transfer 0.0001    finalize 0.0001    func 0.0534    
Accumulated time: func 0.0534    prepare 0.0002    bound 0.0529    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 62] 
split level 2: [/input-12, 5] 
split level 3: [/input-12, 61] 
split level 4: [/input-8, 20] 
split level 5: [/input-12, 27] 
split level 6: [/input-8, 29] 
split level 7: [/input-8, 1826] 
split level 8: [/input-8, 1131] 
split level 9: [/input-8, 1114] 
split level 10: [/input-8, 310] 
split level 11: [/input-8, 154] 
split level 12: [/input-8, 1910] 
split level 13: [/input-8, 1172] 
split level 14: [/input-8, 45] 
split level 15: [/input-8, 1827] 
split level 16: [/input-8, 1892] 
split level 17: [/input-8, 1706] 
split level 18: [/input-8, 1169] 
split level 19: [/input-8, 22] 
split level 20: [/input-8, 53] 
split level 21: [/input-8, 1433] 
split level 22: [/input-8, 1850] 
split level 23: [/input-8, 1195] 
split level 24: [/input-8, 347] 
split level 25: [/input-8, 313] 
split level 26: [/input-8, 1097] 
split level 27: [/input-8, 1121] 
split level 28: [/input-8, 346] 
split level 29: [/input-8, 1205] 
split level 30: [/input-8, 1772] 
split level 31: [/input-8, 171] 
split level 32: [/input-8, 139] 
split level 33: [/input-8, 924] 
split level 34: [/input-8, 90] 
split level 35: [/input-8, 1249] 
split level 36: [/input-8, 739] 
split level 37: [/input-8, 1620] 
split level 38: [/input-8, 2026] 
split level 39: [/input, 740] 
split level 40: [/input-8, 754] 
split level 41: [/input-8, 1745] 
split level 42: [/input-8, 2018] 
split level 43: [/input-8, 1451] 
split level 44: [/input-8, 916] 
split level 45: [/input-8, 917] 
split level 46: [/input-8, 54] 
split level 47: [/input-8, 1276] 
split level 48: [/input-8, 1529] 
split level 49: [/input-8, 932] 
split level 50: [/input-8, 95] 
split level 51: [/input-8, 1677] 
split level 52: [/input-8, 1161] 
split level 53: [/input-8, 918] 
split level 54: [/input-8, 1110] 
split level 55: [/input-8, 1750] 
split level 56: [/input-8, 957] 
split level 57: [/input-8, 61] 
split level 58: [/input-8, 1819] 
split level 59: [/input, 3027] 
split level 60: [/input-8, 1197] 
split level 61: [/input-8, 1595] 
split level 62: [/input-8, 1619] 
split level 63: [/input-8, 923] 
split level 64: [/input-8, 927] 
split level 65: [/input-8, 1629] 
split level 66: [/input-8, 94] 
split level 67: [/input-8, 2009] 
split level 68: [/input-8, 1862] 
split level 69: [/input-8, 737] 
split level 70: [/input-8, 1500] 
split level 71: [/input-8, 955] 
split level 72: [/input-8, 1305] 
split level 73: [/input-8, 1232] 
split level 74: [/input-8, 1227] 
split level 75: [/input-8, 1916] 
split level 76: [/input-8, 338] 
split level 77: [/input-8, 1688] 
split level 78: [/input-8, 1446] 
split level 79: [/input, 3143] 
split level 80: [/input-8, 725] 
split level 81: [/input, 2152] 
split level 82: [/input-8, 1127] 
split level 83: [/input-8, 1311] 
split level 84: [/input-8, 349] 
split level 85: [/input, 824] 
split level 86: [/input-8, 1762] 
split level 87: [/input, 1080] 
split level 88: [/input-8, 929] 
split level 89: [/input, 2780] 
split level 90: [/input-8, 1225] 
split level 91: [/input, 3209] 
split level 92: [/input-8, 104] 
split level 93: [/input-8, 1263] 
split level 94: [/input-8, 1290] 
split level 95: [/input-8, 1254] 
split level 96: [/input, 4010] 
split level 97: [/input-8, 1763] 
split level 98: [/input, 2221] 
split level 99: [/input, 1112] 
split level 100: [/input-8, 1230] 
split level 101: [/input-8, 1686] 
split level 102: [/input-8, 1270] 
split level 103: [/input-8, 1463] 
split level 104: [/input-8, 2039] 
split level 105: [/input-8, 1448] 
split level 106: [/input-8, 1851] 
split level 107: [/input, 2930] 
split level 108: [/input, 721] 
split level 109: [/input-8, 2047] 
split level 110: [/input-8, 1269] 
split level 111: [/input-8, 1135] 
split level 112: [/input-8, 1994] 
split level 113: [/input-8, 1337] 
split level 114: [/input-8, 383] 
split level 115: [/input, 1633] 
split level 116: [/input-8, 1932] 
split level 117: [/input, 3925] 
split level 118: [/input-8, 1992] 
split level 119: [/input, 707] 
split level 120: [/input, 3261] 
split level 121: [/input, 2778] 
split level 122: [/input, 2899] 
split level 123: [/input-8, 1481] 
split level 124: [/input-8, 942] 
split level 125: [/input, 2926] 
split level 126: [/input, 1754] 
split level 127: [/input, 2837] 
split level 128: [/input-8, 1573] 
split level 129: [/input-8, 1261] 
split level 130: [/input-8, 937] 
split level 131: [/input, 3211] 
split level 132: [/input, 2069] 
split level 133: [/input, 2220] 
split level 134: [/input, 1586] 
split level 135: [/input, 3702] 
split level 136: [/input-8, 1668] 
split level 137: [/input, 1681] 
split level 138: [/input, 793] 
split level 139: [/input, 1744] 
split level 140: [/input, 2727] 
split level 141: [/input-8, 1312] 
split level 142: [/input, 2311] 
split level 143: [/input, 693] 
split level 144: [/input, 2973] 
split level 145: [/input, 616] 
split level 146: [/input-8, 1861] 
split level 147: [/input, 1759] 
split level 148: [/input-8, 1662] 
split level 149: [/input, 2946] 
split level 150: [/input-8, 1711] 
split level 151: [/input-8, 1314] 
split level 152: [/input, 3747] 
split level 153: [/input, 2421] 
split level 154: [/input-8, 259] 
split level 155: [/input, 2388] 
split level 156: [/input, 882] 
split level 157: [/input, 904] 
split level 158: [/input, 60] 
split level 159: [/input, 2513] 
split level 160: [/input-8, 370] 
split level 161: [/input, 2957] 
split level 162: [/input, 1122] 
split level 163: [/input-8, 1659] 
split level 164: [/input, 323] 
split level 165: [/input-8, 350] 
split level 166: [/input-8, 345] 
split level 167: [/input, 109] 
split level 168: [/input-8, 352] 
split level 169: [/input, 2376] 
split level 170: [/input, 2333] 
split level 171: [/input-8, 362] 
split level 172: [/input-8, 977] 
split level 173: [/input, 954] 
split level 174: [/input, 2770] 
split level 175: [/input-8, 336] 
split level 176: [/input, 750] 
split level 177: [/input-8, 364] 
split level 178: [/input, 2452] 
split level 179: [/input-8, 1876] 
split level 180: [/input, 681] 
split level 181: [/input-8, 332] 
split level 182: [/input, 2444] 
split level 183: [/input-8, 2008] 
split level 184: [/input, 970] 
split level 185: [/input, 1714] 
split level 186: [/input, 3992] 
split level 187: [/input, 588] 
split level 188: [/input-8, 1489] 
split level 189: [/input, 2786] 
split level 190: [/input-12, 4] 
split level 191: [/input, 919] 
split level 192: [/input, 2258] 
split level 193: [/input, 881] 
split level 194: [/input, 821] 
split level 195: [/input, 1176] 
split level 196: [/input, 2475] 
split level 197: [/input, 397] 
split level 198: [/input, 934] 
split level 199: [/input, 1189] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06406259536743164
10 lb beta sum: 0.0, worst -0.03329145908355713
Time: prepare 0.0114    bound 0.0977    transfer 0.0018    finalize 0.0031    func 0.1166    
Accumulated time: func 0.1700    prepare 0.0216    bound 0.1506    transfer 0.0019    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.02745157) min lb tensor(-0.03308022)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.01046895980834961 
BICCOS Cumulative time: 0.01046895980834961
Preprocessing time: 0.010088920593261719 Inference time: 0.00011181831359863281 Add cuts time: 4.8160552978515625e-05 Cut analysis time: 0.0002200603485107422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02625 (1), -0.02575 (1), -0.02554 (1), -0.02504 (1), -0.02490 (1), -0.02444 (1), -0.02427 (1), -0.02423 (1), -0.02423 (1), -0.02412 (1), -0.02406 (1), -0.02402 (1), -0.02400 (1), -0.02326 (1), -0.02295 (1), -0.02271 (1), -0.02261 (1), -0.02226 (1), -0.02220 (1), -0.02162 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5152    set_bounds 0.0096    solve 0.1167    add 0.1063    
Accumulated time: pickout 0.0003    decision 0.5152    set_bounds 0.0096    solve 0.1167    add 0.1063    
Current (lb-rhs): -0.026248455047607422
50 domains visited
Cumulative time: 0.8278453350067139

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 62] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 5] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] 
split level 2: [/input-12, 61] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 61] [/input-12, 5] 
split level 3: [/input-12, 27] [/input-12, 27] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 27] [/input-12, 61] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.016142725944519043

all verified at 1th iter
Time: prepare 0.0076    bound 0.0140    transfer 0.0014    finalize 0.0028    func 0.0284    
Accumulated time: func 0.1984    prepare 0.0295    bound 0.1646    transfer 0.0033    finalize 0.0060    
all_split False
======================Cut inference begins======================
max lb tensor(0.06513250) min lb tensor(0.00011140)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03613567352294922 
BICCOS Cumulative time: 0.04660463333129883
Preprocessing time: 0.012502193450927734 Inference time: 0.01471400260925293 Add cuts time: 0.008710622787475586 Cut analysis time: 0.00020885467529296875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0014    decision 0.0230    set_bounds 0.0144    solve 0.0285    add 0.0155    
Accumulated time: pickout 0.0018    decision 0.5383    set_bounds 0.0240    solve 0.1452    add 0.1218    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 5, 33]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.36607070e+31,  5.91770858e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 5, 33]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.36607070e+31,  3.21368426e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 5, 33]), tensor([ 1., -1.]), tensor([0, 0]), tensor([7.09411418e-11, 6.12359494e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 5, 33]), tensor([1., 1.]), tensor([0, 0]), tensor([7.09411418e-11, 3.15258354e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.019643068313598633

all verified at 0th iter
Time: prepare 0.0003    bound 0.0050    transfer 0.0001    finalize 0.0002    func 0.0057    
Accumulated time: func 0.2040    prepare 0.0298    bound 0.1696    transfer 0.0034    finalize 0.0062    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.42495918273926
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.4248764514923
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.42485117912292
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.42482900619507
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.4218397140503
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.4218156337738
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.5783 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 138, vnnlib ID: 138 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.78461742, -7.78471851, -6.68574715, -7.54008961, -6.71664238,
         -7.68185663, -7.60335922, -7.74536133, -7.44903946, -7.66552782]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [390]; unstable size 390; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 390] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 390] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 390] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 164] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.46082914, 0.41245514, 1.06713569, 0.36195004, 1.19837391, 1.11187410,
         1.25493622, 1.29937768, 1.30356193]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0657 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 139, vnnlib ID: 139 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.36590004, -7.92974758, -3.18712282, -4.35600662, -3.02723885,
         -4.45325327, -2.34703112, -4.90892315, -8.33985519, -7.64006281]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [432]; unstable size 432; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 432] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 432] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 432] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 188] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.30574822, 4.53140736, 0.46472621, 1.64646173, 0.30628824, 1.73555934,
         2.01324749, 5.01047850, 4.32014751]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0684 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 140, vnnlib ID: 140 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.67068291,  -8.63208675, -12.35949326, -11.84118938, -12.90088081,
         -12.06089878, -11.65532017, -11.34745598, -11.09524727,  -7.12381601]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [439]; unstable size 439; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 439] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 1, 1, 439] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 439] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 1, 1, 166] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.93782830, 1.22470033, 4.46517467, 4.00368023, 4.95243645, 4.21050739,
         3.68815422, 3.40154791, 3.39086008]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0710 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 141, vnnlib ID: 141 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.23027992, -5.59671307, -8.10045242, -8.03788757, -7.89279747,
         -8.14015102, -7.49874401, -7.77289391, -6.25006390, -5.63300037]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [449]; unstable size 449; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 164, 1, 449] with unstable size 163 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 449] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 449] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [163]; unstable size 163; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 163] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 163] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.13565826,  1.81420422,  1.73954272,  1.59858227,  1.83115482,
          1.20980740,  1.41279912,  0.24144965, -0.16323662]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.23027992, -5.59671307, -8.10045242, -8.03788757, -7.89279747,
         -8.14015102, -7.49874401, -7.77289391, -6.25006390, -5.63300037]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.93233824, -5.38019562, -7.65612125, -7.53466606, -7.42454910,
          -7.63522720, -7.07436752, -7.25748777, -5.98633766, -5.26369810]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11649752]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0760 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 142, vnnlib ID: 142 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.83678341, -8.62305260, -5.57152319, -6.19232559, -5.90445709,
         -6.32129097, -3.83951640, -7.52650928, -9.32637024, -8.57943630]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [435]; unstable size 435; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 435] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 435] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 435] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 216] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.17719889, 3.78496766, 1.30179667, 1.96983457, 1.59501159, 2.08713484,
         2.99925995, 4.44833279, 3.73394608]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0929 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 143, vnnlib ID: 143 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.34092617, -10.46391487,  -3.21198559,  -4.69258404,  -3.26048160,
          -4.79305887,  -3.97019267,  -4.88587332,  -9.88317490,  -9.55619907]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 145, 1, 527] with unstable size 144 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 527] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [144]; unstable size 144; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 144] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 144] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.59060454,  6.26868486, -0.24463533,  1.11096740,  1.21317482,
          0.31436083,  1.29949200,  6.03089809,  5.42754269]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.34092617, -10.46391487,  -3.21198559,  -4.69258404,  -3.26048160,
          -4.79305887,  -3.97019267,  -4.88587332,  -9.88317490,  -9.55619907]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.34092617, -10.46391487,  -3.21198559,  -4.69258404,  -3.26048160,
           -4.79305887,  -3.97019267,  -4.88587332,  -9.88317490,  -9.55619907]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04849601]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.31269872e+00,  1.32857168e+00,  5.98412752e-01,  ...,
             5.03174663e-01,  8.68254006e-01,  1.13809550e+00],
           [ 1.40793681e+00,  1.28095269e+00,  1.13809550e+00,  ...,
             1.26507962e+00,  1.42380977e+00,  1.23333359e+00],
           [ 1.10634947e+00,  1.47142887e+00,  1.47142887e+00,  ...,
             1.39206374e+00,  1.40793681e+00,  1.37619078e+00],
           ...,
           [ 1.42380977e+00,  1.09047651e+00,  9.79365110e-01,  ...,
             1.26507962e+00,  1.28095269e+00,  1.21746063e+00],
           [ 1.29682565e+00,  1.04285717e+00,  1.20158756e+00,  ...,
             9.63492095e-01,  8.68254006e-01,  8.20634961e-01],
           [ 1.10634947e+00,  1.36031771e+00,  1.32857168e+00,  ...,
             9.15873051e-01,  6.14285767e-01,  6.46031797e-01]],

          [[ 9.33977544e-01,  1.17552364e+00,  5.79710245e-01,  ...,
             4.34782714e-01,  7.89049983e-01,  9.66183662e-01],
           [ 1.40096653e+00,  1.27214205e+00,  1.06280196e+00,  ...,
             1.14331758e+00,  1.28824508e+00,  1.09500813e+00],
           [ 1.28824508e+00,  1.56199706e+00,  1.44927561e+00,  ...,
             1.09500813e+00,  1.17552364e+00,  1.28824508e+00],
           ...,
           [ 1.17552364e+00,  9.82286692e-01,  8.85668337e-01,  ...,
             1.30434811e+00,  1.33655429e+00,  1.28824508e+00],
           [ 1.06280196e+00,  8.21256101e-01,  9.01771426e-01,  ...,
             1.12721443e+00,  1.04669893e+00,  1.03059590e+00],
           [ 8.69565308e-01,  1.12721443e+00,  9.98389781e-01,  ...,
             1.09500813e+00,  8.21256101e-01,  9.01771426e-01]],

          [[ 3.14844176e-02,  3.01349491e-01,  1.06446937e-01,  ...,
             9.14544314e-02,  1.21439442e-01,  1.51424453e-01],
           [ 1.36431947e-01,  1.64919142e-02,  1.81409463e-01,  ...,
             5.11244535e-01,  4.51274544e-01,  1.21439442e-01],
           [-1.48425624e-01,  1.51424453e-01,  2.26386964e-01,  ...,
             2.56371975e-01,  1.51424453e-01,  6.14694245e-02],
           ...,
           [ 3.16341996e-01,  1.49940979e-03, -1.33433133e-01,  ...,
            -2.84855980e-02,  1.64919142e-02, -2.84855980e-02],
           [ 1.36431947e-01, -1.18440613e-01,  1.49940979e-03,  ...,
            -2.83358276e-01, -3.28335792e-01, -3.58320802e-01],
           [ 1.64919142e-02,  2.26386964e-01,  1.51424453e-01,  ...,
            -2.38380641e-01, -5.23238361e-01, -5.23238361e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0692 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 144, vnnlib ID: 144 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.79352665, -12.23771381,  -9.42079353,  -8.18088913,  -9.67141724,
          -8.12612629,  -9.56548309,  -9.96920204, -11.10543823, -11.25221634]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 170, 1, 427] with unstable size 169 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 427] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [169]; unstable size 169; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 169] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 169] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.20623159, 3.44203925, 1.05065632, 0.04120036, 1.25533795, 1.08397412,
         1.56545269, 2.38391042, 2.54189825]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0705 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 145, vnnlib ID: 145 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.00209332, -8.59088707, -2.82365561, -3.22743535, -3.59733486,
         -3.29684186, -4.70374870, -4.82936382, -7.53730106, -8.04424858]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [667]; unstable size 667; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 667] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 667] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 667] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 174] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.19111538,  4.58325672, -0.76220047, -0.08250546, -0.05808830,
          1.11135769,  1.00770724,  3.64658070,  4.12331200]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.00209332, -8.59088707, -2.82365561, -3.22743535, -3.59733486,
         -3.29684186, -4.70374870, -4.82936382, -7.53730106, -8.04424858]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.00209332, -8.59088707, -2.82365608, -3.22743607, -3.59733486,
          -3.29684305, -4.70374966, -4.82936430, -7.53730202, -8.04424763],
         [-5.00209332, -8.59088707, -2.82365608, -3.22743607, -3.59733486,
          -3.29684305, -4.70374966, -4.82936430, -7.53730202, -8.04424763]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.47318697, -0.06940699,  0.30049181]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]],


         [[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]],


         [[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0755 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 146, vnnlib ID: 146 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.50118589,  -9.62631321, -11.06040764, -11.60052204, -11.25030899,
         -11.77759075, -11.48435974, -10.44144726,  -6.63968658,  -9.16156864]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [439]; unstable size 439; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 439] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 439] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 439] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 153] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.49919498, 2.48104477, 3.67119694, 4.11645269, 3.79514456, 4.28060246,
         4.02054405, 2.84020495, 1.95948505]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0630 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 147, vnnlib ID: 147 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.61050510, -18.19259834, -14.86876678, -16.21520042, -15.81747723,
         -16.15572166, -15.55497742, -15.71164322, -17.60300827, -19.53060722]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 540] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 540] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 185] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.21178126, 2.48818874, 0.96625054, 0.66403449, 0.90339828, 0.26163778,
         0.41980004, 1.96595526, 3.83946896]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0339 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 148, vnnlib ID: 148 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.16096544, -5.40149117, -3.63111496, -3.02717566, -3.77620387,
         -3.01623964, -4.59425926, -2.84824109, -5.91380119, -4.83607054]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [455]; unstable size 455; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 145, 1, 455] with unstable size 144 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 455] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 455] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [144]; unstable size 144; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 144] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 144] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.78772736,  1.81875587,  0.45767736, -0.11035347,  0.65982580,
         -0.12342596,  1.28189754,  2.28518844,  1.34910393]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.16096544, -5.40149117, -3.63111496, -3.02717566, -3.77620387,
         -3.01623964, -4.59425926, -2.84824109, -5.91380119, -4.83607054]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.40923071, -5.67548466, -3.81281948, -3.15027142, -4.00697517,
          -3.13820839, -4.74294853, -3.15190148, -6.05144215, -5.10408592],
         [-6.40923071, -5.67548466, -3.81281948, -3.15027142, -4.00697517,
          -3.13820839, -4.74294853, -3.15190148, -6.05144215, -5.10408592]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00163007, -0.01369309]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0799 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 149, vnnlib ID: 149 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.46979618, -12.58957005,  -7.37592888,  -8.55527401,  -7.20859337,
          -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046116]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 527] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 527] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 256] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.46516275,  4.14436674,  0.83085924, -0.49284074,  0.88343513,
         -0.76752114,  1.28632283,  3.93838716,  3.79598069]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.46979618, -12.58957005,  -7.37592888,  -8.55527401,  -7.20859337,
          -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046116]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.46979618, -12.58956909,  -7.37592793,  -8.55527496,  -7.20859337,
           -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046211],
         [-10.46979618, -12.58956909,  -7.37592793,  -8.55527496,  -7.20859337,
           -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046211]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16733456, -0.39017296]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.32222211, -1.13174593, -1.17936504,  ..., -0.68730158,
            -0.81428570, -0.54444444],
           [-1.24285710, -1.09999990, -1.38571417,  ..., -0.68730158,
            -0.78253967, -0.79841268],
           [-1.08412695, -0.90952379, -1.13174593,  ..., -0.49682540,
            -0.84603173, -0.87777776],
           ...,
           [-0.19523799,  1.31269872,  0.43968260,  ..., -0.95714283,
            -0.84603173, -0.68730158],
           [ 0.07460327,  1.37619078,  0.90000004,  ..., -0.95714283,
            -0.75079364, -0.84603173],
           [ 0.26507944,  0.78888893,  0.43968260,  ..., -0.97301590,
            -0.92539680, -0.97301590]],

          [[-1.30434775, -1.01449275, -0.98228657,  ..., -0.51529789,
            -0.45088565, -0.25764883],
           [-1.06280184, -0.83735907, -1.19162631,  ..., -0.43478248,
            -0.41867942, -0.30595800],
           [-0.93397743, -0.67632848, -0.93397743,  ..., -0.35426718,
            -0.38647330, -0.41867942],
           ...,
           [-0.24154577,  0.62801939,  0.12882459,  ..., -0.98228657,
            -0.85346210, -0.70853460],
           [-0.09661824,  0.70853472,  0.43478271,  ..., -0.99838966,
            -0.78904986, -0.91787434],
           [ 0.04830930,  0.51529801,  0.28985518,  ..., -0.95008045,
            -0.90177131, -0.98228657]],

          [[-1.16791618, -0.98800600, -1.03298354,  ..., -0.70314842,
            -0.65817088, -0.28335828],
           [-1.00299859, -0.92803597, -1.16791618,  ..., -0.58320838,
            -0.53823084, -0.49325335],
           [-0.92803597, -0.86806595, -1.06296861,  ..., -0.26836565,
            -0.53823084, -0.55322337],
           ...,
           [-0.35832080,  0.45127454, -0.05847061,  ..., -0.85307342,
            -0.74812591, -0.56821585],
           [-0.26836565,  0.48125952,  0.33133450,  ..., -0.85307342,
            -0.70314842, -0.76311839],
           [ 0.03148442,  0.51124454,  0.42128953,  ..., -0.83808094,
            -0.79310340, -0.82308841]]],


         [[[-1.32222211, -1.13174593, -1.17936504,  ..., -0.68730158,
            -0.81428570, -0.54444444],
           [-1.24285710, -1.09999990, -1.38571417,  ..., -0.68730158,
            -0.78253967, -0.79841268],
           [-1.08412695, -0.90952379, -1.13174593,  ..., -0.49682540,
            -0.84603173, -0.87777776],
           ...,
           [-0.19523799,  1.31269872,  0.43968260,  ..., -0.95714283,
            -0.84603173, -0.68730158],
           [ 0.07460327,  1.37619078,  0.90000004,  ..., -0.95714283,
            -0.75079364, -0.84603173],
           [ 0.26507944,  0.78888893,  0.43968260,  ..., -0.97301590,
            -0.92539680, -0.97301590]],

          [[-1.30434775, -1.01449275, -0.98228657,  ..., -0.51529789,
            -0.45088565, -0.25764883],
           [-1.06280184, -0.83735907, -1.19162631,  ..., -0.43478248,
            -0.41867942, -0.30595800],
           [-0.93397743, -0.67632848, -0.93397743,  ..., -0.35426718,
            -0.38647330, -0.41867942],
           ...,
           [-0.24154577,  0.62801939,  0.12882459,  ..., -0.98228657,
            -0.85346210, -0.70853460],
           [-0.09661824,  0.70853472,  0.43478271,  ..., -0.99838966,
            -0.78904986, -0.91787434],
           [ 0.04830930,  0.51529801,  0.28985518,  ..., -0.95008045,
            -0.90177131, -0.98228657]],

          [[-1.16791618, -0.98800600, -1.03298354,  ..., -0.70314842,
            -0.65817088, -0.28335828],
           [-1.00299859, -0.92803597, -1.16791618,  ..., -0.58320838,
            -0.53823084, -0.49325335],
           [-0.92803597, -0.86806595, -1.06296861,  ..., -0.26836565,
            -0.53823084, -0.55322337],
           ...,
           [-0.35832080,  0.45127454, -0.05847061,  ..., -0.85307342,
            -0.74812591, -0.56821585],
           [-0.26836565,  0.48125952,  0.33133450,  ..., -0.85307342,
            -0.70314842, -0.76311839],
           [ 0.03148442,  0.51124454,  0.42128953,  ..., -0.83808094,
            -0.79310340, -0.82308841]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0728 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 150, vnnlib ID: 150 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.71911144, -10.78857327, -13.80652714, -15.57193089, -13.78481674,
         -15.82200527, -15.45771599, -13.88326550,  -9.93582153, -10.41513634]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [582]; unstable size 582; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 582] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 582] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 582] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 186] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.74895835,  1.97158384,  3.71107674,  1.79468870,  3.93884802,
          3.53552580,  1.82552433, -1.48514724, -0.67360955]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.71911144, -10.78857327, -13.80652714, -15.57193089, -13.78481674,
         -15.82200527, -15.45771599, -13.88326550,  -9.93582153, -10.41513634]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.71911335, -10.78857327, -13.80652618, -15.57193279, -13.78481674,
          -15.82200718, -15.45771790, -13.88326550,  -9.93582153, -10.41513634],
         [ -9.71911335, -10.78857327, -13.80652618, -15.57193279, -13.78481674,
          -15.82200718, -15.45771790, -13.88326550,  -9.93582153, -10.41513634]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.06945992, -0.85275173, -0.37343693]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0824 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 151, vnnlib ID: 151 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.55974388, -10.00794888,  -5.61042452,  -4.45638180,  -5.72507191,
          -4.47629452,  -6.00398064,  -5.42168999,  -9.52786255,  -9.51117516]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [436]; unstable size 436; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 436] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 436] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 436] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 170] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.49995518,  4.81325483,  0.79489237, -0.03725126,  0.90810943,
          1.23507953,  0.64367205,  4.26866436,  4.34728479]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.55974388, -10.00794888,  -5.61042452,  -4.45638180,  -5.72507191,
          -4.47629452,  -6.00398064,  -5.42168999,  -9.52786255,  -9.51117516]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.55974388, -10.00794888,  -5.61042452,  -4.45638180,  -5.72507191,
           -4.47629452,  -6.00398064,  -5.42168999,  -9.52786255,  -9.51117516]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01991272]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0711 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 152, vnnlib ID: 152 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.10573387, -12.44030190,  -8.55103970,  -9.26790047,  -7.95741177,
          -9.40282917,  -8.36335182, -10.19440269, -12.55924797, -12.84323978]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [434]; unstable size 434; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 157, 1, 434] with unstable size 156 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 434] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 434] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [156]; unstable size 156; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 156] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 156] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.99604285,  3.13732719,  0.34504712, -0.83755273,  0.47180021,
         -0.58407080,  1.10311329,  3.33464885,  3.55361891]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.10573387, -12.44030190,  -8.55103970,  -9.26790047,  -7.95741177,
          -9.40282917,  -8.36335182, -10.19440269, -12.55924797, -12.84323978]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.10573483, -12.44030285,  -8.55103970,  -9.26790047,  -7.95741272,
           -9.40283012,  -8.36335182, -10.19440365, -12.55924892, -12.84324265],
         [-10.10573483, -12.44030285,  -8.55103970,  -9.26790047,  -7.95741272,
           -9.40283012,  -8.36335182, -10.19440365, -12.55924892, -12.84324265]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.59362698, -0.18768787]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-9.41269815e-01, -9.09523785e-01, -1.33809519e+00,  ...,
            -6.39682531e-01,  7.46032670e-02,  1.85714364e-01],
           [-5.28571427e-01, -7.98412681e-01, -1.25873005e+00,  ...,
            -5.76190472e-01, -2.42857039e-01,  1.06349289e-01],
           [-4.65079248e-01, -4.01587188e-01, -7.66666651e-01,  ...,
            -3.85714173e-01, -3.53968143e-01, -1.63491964e-01],
           ...,
           [ 1.97936535e+00,  1.10634947e+00,  1.42380977e+00,  ...,
             1.94761932e+00,  1.94761932e+00,  1.97936535e+00],
           [ 1.94761932e+00,  1.47142887e+00,  1.37619078e+00,  ...,
             1.96349227e+00,  1.82063520e+00,  1.80476213e+00],
           [ 1.99523830e+00,  1.78888917e+00,  1.85238123e+00,  ...,
             1.99523830e+00,  1.99523830e+00,  1.94761932e+00]],

          [[-1.12721294e-01, -1.44927412e-01, -6.28019273e-01,  ...,
            -2.25442708e-01,  3.54267418e-01,  6.28019392e-01],
           [ 2.09339887e-01, -1.12721294e-01, -5.47504008e-01,  ...,
            -2.89854944e-01,  1.22934580e-07,  5.47504127e-01],
           [ 1.93236828e-01,  2.25442946e-01, -1.61029361e-02,  ...,
            -8.05151686e-02, -8.05151686e-02,  2.89855182e-01],
           ...,
           [ 1.70692456e+00,  8.37359190e-01,  1.14331758e+00,  ...,
             1.75523376e+00,  1.73913074e+00,  1.78743994e+00],
           [ 1.73913074e+00,  1.20772982e+00,  1.04669893e+00,  ...,
             1.72302771e+00,  1.57810009e+00,  1.61030626e+00],
           [ 1.85185218e+00,  1.57810009e+00,  1.56199706e+00,  ...,
             1.75523376e+00,  1.75523376e+00,  1.73913074e+00]],

          [[-1.39280367e+00, -1.30284870e+00, -1.61769128e+00,  ...,
            -1.27286363e+00, -7.48125911e-01, -3.73313308e-01],
           [-1.19790113e+00, -1.39280367e+00, -1.60269880e+00,  ...,
            -1.25787115e+00, -1.03298354e+00, -4.33283329e-01],
           [-1.13793111e+00, -1.21289361e+00, -1.45277369e+00,  ...,
            -1.18290865e+00, -1.03298354e+00, -7.18140900e-01],
           ...,
           [ 1.84557760e+00,  9.76012170e-01,  1.24587750e+00,  ...,
             1.87556267e+00,  1.84557760e+00,  1.87556267e+00],
           [ 1.87556267e+00,  1.33583248e+00,  1.15592217e+00,  ...,
             1.83058512e+00,  1.69565260e+00,  1.69565260e+00],
           [ 1.96551764e+00,  1.69565260e+00,  1.68066013e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.84557760e+00]]],


         [[[-9.41269815e-01, -9.09523785e-01, -1.33809519e+00,  ...,
            -6.39682531e-01,  7.46032670e-02,  1.85714364e-01],
           [-5.28571427e-01, -7.98412681e-01, -1.25873005e+00,  ...,
            -5.76190472e-01, -2.42857039e-01,  1.06349289e-01],
           [-4.65079248e-01, -4.01587188e-01, -7.66666651e-01,  ...,
            -3.85714173e-01, -3.53968143e-01, -1.63491964e-01],
           ...,
           [ 1.97936535e+00,  1.10634947e+00,  1.42380977e+00,  ...,
             1.94761932e+00,  1.94761932e+00,  1.97936535e+00],
           [ 1.94761932e+00,  1.47142887e+00,  1.37619078e+00,  ...,
             1.96349227e+00,  1.82063520e+00,  1.80476213e+00],
           [ 1.99523830e+00,  1.78888917e+00,  1.85238123e+00,  ...,
             1.99523830e+00,  1.99523830e+00,  1.94761932e+00]],

          [[-1.12721294e-01, -1.44927412e-01, -6.28019273e-01,  ...,
            -2.25442708e-01,  3.54267418e-01,  6.28019392e-01],
           [ 2.09339887e-01, -1.12721294e-01, -5.47504008e-01,  ...,
            -2.89854944e-01,  1.22934580e-07,  5.47504127e-01],
           [ 1.93236828e-01,  2.25442946e-01, -1.61029361e-02,  ...,
            -8.05151686e-02, -8.05151686e-02,  2.89855182e-01],
           ...,
           [ 1.70692456e+00,  8.37359190e-01,  1.14331758e+00,  ...,
             1.75523376e+00,  1.73913074e+00,  1.78743994e+00],
           [ 1.73913074e+00,  1.20772982e+00,  1.04669893e+00,  ...,
             1.72302771e+00,  1.57810009e+00,  1.61030626e+00],
           [ 1.85185218e+00,  1.57810009e+00,  1.56199706e+00,  ...,
             1.75523376e+00,  1.75523376e+00,  1.73913074e+00]],

          [[-1.39280367e+00, -1.30284870e+00, -1.61769128e+00,  ...,
            -1.27286363e+00, -7.48125911e-01, -3.73313308e-01],
           [-1.19790113e+00, -1.39280367e+00, -1.60269880e+00,  ...,
            -1.25787115e+00, -1.03298354e+00, -4.33283329e-01],
           [-1.13793111e+00, -1.21289361e+00, -1.45277369e+00,  ...,
            -1.18290865e+00, -1.03298354e+00, -7.18140900e-01],
           ...,
           [ 1.84557760e+00,  9.76012170e-01,  1.24587750e+00,  ...,
             1.87556267e+00,  1.84557760e+00,  1.87556267e+00],
           [ 1.87556267e+00,  1.33583248e+00,  1.15592217e+00,  ...,
             1.83058512e+00,  1.69565260e+00,  1.69565260e+00],
           [ 1.96551764e+00,  1.69565260e+00,  1.68066013e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.84557760e+00]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0513 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 153, vnnlib ID: 153 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.04411221,  -6.56294537, -10.49686623, -10.71459293, -10.65121841,
         -10.91873455, -10.75874615, -10.58030510,  -7.05852127,  -5.32773304]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [560]; unstable size 560; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 560] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 560] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 560] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 159] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.93047810, 0.90146834, 4.35855198, 4.67746592, 4.44866705, 4.86577225,
         4.63572979, 4.36071730, 1.07372689]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0641 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 154, vnnlib ID: 154 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.33148384, -10.59604359,  -6.13104391,  -5.15102005,  -5.68771362,
          -5.06781912,  -6.22119141,  -6.70600891,  -8.64515400, -10.90875530]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [554]; unstable size 554; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 150, 1, 554] with unstable size 149 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 554] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 554] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [149]; unstable size 149; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 149] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.75479269, 4.87106228, 0.82534409, 0.06818698, 0.31933570, 0.85642600,
         1.17236519, 2.96178937, 5.26937962]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0728 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 155, vnnlib ID: 155 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.94084406, -4.36918736, -2.39931107, -2.66348886, -2.53788948,
         -2.76773334, -2.43246198, -3.65804195, -1.78550899, -3.21363306]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [458]; unstable size 458; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 225, 1, 458] with unstable size 224 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 458] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 458] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [224]; unstable size 224; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 224] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 224] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.23604941,  1.11150885, -0.46573162, -0.15052679, -0.32735419,
         -0.05409914,  0.68027091, -1.50479579, -0.02969646]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.94084406, -4.36918736, -2.39931107, -2.66348886, -2.53788948,
         -2.76773334, -2.43246198, -3.65804195, -1.78550899, -3.21363306]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.94084358, -4.36918688, -2.39931107, -2.66348863, -2.53788924,
          -2.76773310, -2.43246150, -3.65804195, -1.78550875, -3.21363282],
         [-2.94084358, -4.36918688, -2.39931107, -2.66348863, -2.53788924,
          -2.76773310, -2.43246150, -3.65804195, -1.78550875, -3.21363282]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.50838208, -0.03315043,  0.23102713,  0.10542774,  0.33527160,
          -0.64695275,  0.78117132]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         ...,


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0827 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 156, vnnlib ID: 156 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-9.18817234, -8.52420235, -6.17824697, -5.90761089, -6.00881290,
         -5.93657160, -5.09397602, -7.20189238, -9.47287750, -8.95226574]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [492]; unstable size 492; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 492] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 492] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 492] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 177] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.78877187e+00,  1.95449328e+00,  8.93950462e-04, -4.40961272e-02,
         -1.61327600e-01, -1.15325046e+00,  1.05116034e+00,  3.01431799e+00,
          2.46340609e+00]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-9.18817234, -8.52420235, -6.17824697, -5.90761089, -6.00881290,
         -5.93657160, -5.09397602, -7.20189238, -9.47287750, -8.95226574]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-9.18817234, -8.52420330, -6.17824793, -5.90761185, -6.00881290,
          -5.93657255, -5.09397602, -7.20189381, -9.47287750, -8.95226765],
         [-9.18817234, -8.52420330, -6.17824793, -5.90761185, -6.00881290,
          -5.93657255, -5.09397602, -7.20189381, -9.47287750, -8.95226765]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02896070,  0.07224035, -0.84259653]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0714 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 157, vnnlib ID: 157 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.42523384, -13.67537022, -17.12404442, -17.76034546, -18.02211761,
         -18.14136124, -17.20537567, -17.92313957, -14.93622971, -12.06187916]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 118, 1, 403] with unstable size 117 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 403] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [117]; unstable size 117; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 117] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 117] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.82648945, 1.30361056, 4.42907524, 5.04763651, 5.31513500, 5.40978765,
         4.49749660, 5.15742779, 2.39878798]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0698 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 158, vnnlib ID: 158 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.89985514, -8.20181656, -7.95871973, -6.18419170, -7.78199673,
         -6.14752007, -7.65328979, -6.98220968, -6.28924084, -8.29117870]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 445] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 445] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 445] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 170] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.18119657,  1.26755607,  0.96031809, -0.95989752,  0.70830917,
         -1.01292610,  0.53413868, -0.22250152,  1.41924667]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.89985514, -8.20181656, -7.95871973, -6.18419170, -7.78199673,
         -6.14752007, -7.65328979, -6.98220968, -6.28924084, -8.29117870]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.89985371, -8.20181370, -7.95871830, -6.18419075, -7.78199673,
          -6.14751959, -7.65328884, -6.98220921, -6.28923941, -8.29117870],
         [-7.89985371, -8.20181370, -7.95871830, -6.18419075, -7.78199673,
          -6.14751959, -7.65328884, -6.98220921, -6.28923941, -8.29117870]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.10504866, -0.14171982,  0.69296980]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 6.46031797e-01,  5.82539737e-01,  6.30158782e-01,  ...,
             9.15873051e-01,  8.84127021e-01,  8.68254006e-01],
           [ 8.52380991e-01,  8.36507976e-01,  8.04761946e-01,  ...,
             4.71428633e-01,  3.60317528e-01,  3.28571498e-01],
           [ 7.41269886e-01,  5.19047678e-01,  6.93650842e-01,  ...,
            -6.55555546e-01, -7.98412681e-01, -7.98412681e-01],
           ...,
           [ 1.48730183e+00,  1.36031771e+00,  1.21746063e+00,  ...,
            -1.25873005e+00, -1.24285710e+00, -1.25873005e+00],
           [ 1.12222254e+00,  1.07460344e+00,  9.63492095e-01,  ...,
            -1.27460313e+00, -1.25873005e+00, -1.29047608e+00],
           [ 6.30158782e-01,  5.66666722e-01,  5.19047678e-01,  ...,
            -1.40158725e+00, -1.40158725e+00, -1.41746020e+00]],

          [[ 2.41546005e-01,  1.61030710e-01,  2.09339887e-01,  ...,
             6.44122481e-01,  5.79710245e-01,  5.63607156e-01],
           [ 4.18679655e-01,  4.02576596e-01,  3.70370477e-01,  ...,
             2.09339887e-01,  3.22062373e-02,  1.22934580e-07],
           [ 2.57649064e-01,  1.61031820e-02,  2.09339887e-01,  ...,
            -1.07890499e+00, -1.27214170e+00, -1.27214170e+00],
           ...,
           [ 1.07890511e+00,  9.50080574e-01,  8.05153072e-01,  ...,
            -1.33655393e+00, -1.32045078e+00, -1.33655393e+00],
           [ 7.40740836e-01,  6.92431629e-01,  5.79710245e-01,  ...,
            -1.35265696e+00, -1.33655393e+00, -1.36875999e+00],
           [ 2.89855182e-01,  2.25442946e-01,  1.93236828e-01,  ...,
            -1.48148143e+00, -1.48148143e+00, -1.49758446e+00]],

          [[ 6.01199567e-01,  5.26237071e-01,  5.71214557e-01,  ...,
             9.01049674e-01,  7.96102107e-01,  7.66117096e-01],
           [ 7.36132085e-01,  7.21139610e-01,  6.91154599e-01,  ...,
             5.11244535e-01,  3.61319512e-01,  3.16341996e-01],
           [ 5.41229546e-01,  3.16341996e-01,  4.96252000e-01,  ...,
            -7.33133376e-01, -8.83058429e-01, -8.83058429e-01],
           ...,
           [ 1.41079497e+00,  1.29085493e+00,  1.15592217e+00,  ...,
            -9.28035975e-01, -9.13043439e-01, -9.28035975e-01],
           [ 1.08095968e+00,  1.03598225e+00,  9.31034684e-01,  ...,
            -9.43028450e-01, -9.28035975e-01, -9.58020985e-01],
           [ 6.46177113e-01,  5.86207092e-01,  5.41229546e-01,  ...,
            -1.06296861e+00, -1.06296861e+00, -1.07796109e+00]]],


         [[[ 6.46031797e-01,  5.82539737e-01,  6.30158782e-01,  ...,
             9.15873051e-01,  8.84127021e-01,  8.68254006e-01],
           [ 8.52380991e-01,  8.36507976e-01,  8.04761946e-01,  ...,
             4.71428633e-01,  3.60317528e-01,  3.28571498e-01],
           [ 7.41269886e-01,  5.19047678e-01,  6.93650842e-01,  ...,
            -6.55555546e-01, -7.98412681e-01, -7.98412681e-01],
           ...,
           [ 1.48730183e+00,  1.36031771e+00,  1.21746063e+00,  ...,
            -1.25873005e+00, -1.24285710e+00, -1.25873005e+00],
           [ 1.12222254e+00,  1.07460344e+00,  9.63492095e-01,  ...,
            -1.27460313e+00, -1.25873005e+00, -1.29047608e+00],
           [ 6.30158782e-01,  5.66666722e-01,  5.19047678e-01,  ...,
            -1.40158725e+00, -1.40158725e+00, -1.41746020e+00]],

          [[ 2.41546005e-01,  1.61030710e-01,  2.09339887e-01,  ...,
             6.44122481e-01,  5.79710245e-01,  5.63607156e-01],
           [ 4.18679655e-01,  4.02576596e-01,  3.70370477e-01,  ...,
             2.09339887e-01,  3.22062373e-02,  1.22934580e-07],
           [ 2.57649064e-01,  1.61031820e-02,  2.09339887e-01,  ...,
            -1.07890499e+00, -1.27214170e+00, -1.27214170e+00],
           ...,
           [ 1.07890511e+00,  9.50080574e-01,  8.05153072e-01,  ...,
            -1.33655393e+00, -1.32045078e+00, -1.33655393e+00],
           [ 7.40740836e-01,  6.92431629e-01,  5.79710245e-01,  ...,
            -1.35265696e+00, -1.33655393e+00, -1.36875999e+00],
           [ 2.89855182e-01,  2.25442946e-01,  1.93236828e-01,  ...,
            -1.48148143e+00, -1.48148143e+00, -1.49758446e+00]],

          [[ 6.01199567e-01,  5.26237071e-01,  5.71214557e-01,  ...,
             9.01049674e-01,  7.96102107e-01,  7.66117096e-01],
           [ 7.36132085e-01,  7.21139610e-01,  6.91154599e-01,  ...,
             5.11244535e-01,  3.61319512e-01,  3.16341996e-01],
           [ 5.41229546e-01,  3.16341996e-01,  4.96252000e-01,  ...,
            -7.33133376e-01, -8.83058429e-01, -8.83058429e-01],
           ...,
           [ 1.41079497e+00,  1.29085493e+00,  1.15592217e+00,  ...,
            -9.28035975e-01, -9.13043439e-01, -9.28035975e-01],
           [ 1.08095968e+00,  1.03598225e+00,  9.31034684e-01,  ...,
            -9.43028450e-01, -9.28035975e-01, -9.58020985e-01],
           [ 6.46177113e-01,  5.86207092e-01,  5.41229546e-01,  ...,
            -1.06296861e+00, -1.06296861e+00, -1.07796109e+00]]],


         [[[ 6.46031797e-01,  5.82539737e-01,  6.30158782e-01,  ...,
             9.15873051e-01,  8.84127021e-01,  8.68254006e-01],
           [ 8.52380991e-01,  8.36507976e-01,  8.04761946e-01,  ...,
             4.71428633e-01,  3.60317528e-01,  3.28571498e-01],
           [ 7.41269886e-01,  5.19047678e-01,  6.93650842e-01,  ...,
            -6.55555546e-01, -7.98412681e-01, -7.98412681e-01],
           ...,
           [ 1.48730183e+00,  1.36031771e+00,  1.21746063e+00,  ...,
            -1.25873005e+00, -1.24285710e+00, -1.25873005e+00],
           [ 1.12222254e+00,  1.07460344e+00,  9.63492095e-01,  ...,
            -1.27460313e+00, -1.25873005e+00, -1.29047608e+00],
           [ 6.30158782e-01,  5.66666722e-01,  5.19047678e-01,  ...,
            -1.40158725e+00, -1.40158725e+00, -1.41746020e+00]],

          [[ 2.41546005e-01,  1.61030710e-01,  2.09339887e-01,  ...,
             6.44122481e-01,  5.79710245e-01,  5.63607156e-01],
           [ 4.18679655e-01,  4.02576596e-01,  3.70370477e-01,  ...,
             2.09339887e-01,  3.22062373e-02,  1.22934580e-07],
           [ 2.57649064e-01,  1.61031820e-02,  2.09339887e-01,  ...,
            -1.07890499e+00, -1.27214170e+00, -1.27214170e+00],
           ...,
           [ 1.07890511e+00,  9.50080574e-01,  8.05153072e-01,  ...,
            -1.33655393e+00, -1.32045078e+00, -1.33655393e+00],
           [ 7.40740836e-01,  6.92431629e-01,  5.79710245e-01,  ...,
            -1.35265696e+00, -1.33655393e+00, -1.36875999e+00],
           [ 2.89855182e-01,  2.25442946e-01,  1.93236828e-01,  ...,
            -1.48148143e+00, -1.48148143e+00, -1.49758446e+00]],

          [[ 6.01199567e-01,  5.26237071e-01,  5.71214557e-01,  ...,
             9.01049674e-01,  7.96102107e-01,  7.66117096e-01],
           [ 7.36132085e-01,  7.21139610e-01,  6.91154599e-01,  ...,
             5.11244535e-01,  3.61319512e-01,  3.16341996e-01],
           [ 5.41229546e-01,  3.16341996e-01,  4.96252000e-01,  ...,
            -7.33133376e-01, -8.83058429e-01, -8.83058429e-01],
           ...,
           [ 1.41079497e+00,  1.29085493e+00,  1.15592217e+00,  ...,
            -9.28035975e-01, -9.13043439e-01, -9.28035975e-01],
           [ 1.08095968e+00,  1.03598225e+00,  9.31034684e-01,  ...,
            -9.43028450e-01, -9.28035975e-01, -9.58020985e-01],
           [ 6.46177113e-01,  5.86207092e-01,  5.41229546e-01,  ...,
            -1.06296861e+00, -1.06296861e+00, -1.07796109e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0697 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 159, vnnlib ID: 159 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.52948380, -15.95086575, -15.35674667, -15.15391731, -16.55455399,
         -15.45511055, -13.96408749, -17.77251816, -16.15048790, -15.88832951]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [381]; unstable size 381; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 146, 1, 381] with unstable size 145 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 381] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 381] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [145]; unstable size 145; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 145] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 145] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.04605162,  1.32969522,  1.10167634,  0.96962851,  2.23392892,
          1.26165533,  3.33647394,  1.48339999,  1.25178528]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.52948380, -15.95086575, -15.35674667, -15.15391731, -16.55455399,
         -15.45511055, -13.96408749, -17.77251816, -16.15048790, -15.88832951]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.91it/s]100%|██████████| 1/1 [00:00<00:00,  8.90it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.66336918, -16.24439430, -15.76870918, -15.69548130, -16.94470787,
          -16.00302887, -14.51145744, -18.16604233, -16.27715111, -16.16013527]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.15191174]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1151 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.085123062133789
alpha/beta optimization time: 1.2036020755767822
initial alpha-crown bounds: tensor([[-0.02563965,  1.36089802,  1.10909176,  0.97797835,  2.24304676,
          1.27068996,  3.34929490,  1.51245952,  1.28730297]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.025639653205871582
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.59025311470032
Verifying property 0 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02563965]], device='cuda:0') need to verify.
Model prediction is: tensor([-14.52948380, -15.95086575, -15.35674667, -15.15391731, -16.55455399,
        -15.45511055, -13.96408749, -17.77251816, -16.15048790, -15.88832951],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02563965]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 381
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 144
Node /15 input 0: size torch.Size([100]) unstable 6
-----------------
# of unstable neurons: 531
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010251998901367188
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025637269020080566
10 lb beta sum: 0.0, worst -0.02564007043838501
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0519    transfer 0.0001    finalize 0.0001    func 0.0524    
Accumulated time: func 0.0524    prepare 0.0002    bound 0.0519    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 27] 
split level 1: [/input-12, 33] 
split level 2: [/input-12, 61] 
split level 3: [/input-12, 57] 
split level 4: [/input-8, 995] 
split level 5: [/input-8, 988] 
split level 6: [/input-8, 2018] 
split level 7: [/input-8, 741] 
split level 8: [/input-12, 47] 
split level 9: [/input-8, 989] 
split level 10: [/input-8, 987] 
split level 11: [/input-8, 1628] 
split level 12: [/input-8, 1770] 
split level 13: [/input-8, 1765] 
split level 14: [/input-8, 997] 
split level 15: [/input-8, 739] 
split level 16: [/input-8, 1762] 
split level 17: [/input-8, 346] 
split level 18: [/input-8, 1771] 
split level 19: [/input-8, 738] 
split level 20: [/input-8, 1331] 
split level 21: [/input-8, 731] 
split level 22: [/input, 3175] 
split level 23: [/input-8, 1750] 
split level 24: [/input, 165] 
split level 25: [/input-8, 1425] 
split level 26: [/input-8, 2029] 
split level 27: [/input-8, 729] 
split level 28: [/input-8, 1782] 
split level 29: [/input, 3176] 
split level 30: [/input-8, 91] 
split level 31: [/input, 2712] 
split level 32: [/input, 3225] 
split level 33: [/input-8, 356] 
split level 34: [/input, 2131] 
split level 35: [/input-8, 924] 
split level 36: [/input-8, 782] 
split level 37: [/input-8, 819] 
split level 38: [/input-8, 29] 
split level 39: [/input, 2713] 
split level 40: [/input-8, 1882] 
split level 41: [/input-8, 357] 
split level 42: [/input-8, 164] 
split level 43: [/input-8, 1333] 
split level 44: [/input-8, 1430] 
split level 45: [/input-8, 1874] 
split level 46: [/input-8, 781] 
split level 47: [/input, 3211] 
split level 48: [/input, 3173] 
split level 49: [/input, 3243] 
split level 50: [/input-8, 1759] 
split level 51: [/input, 2711] 
split level 52: [/input-8, 1778] 
split level 53: [/input-8, 1314] 
split level 54: [/input, 2705] 
split level 55: [/input-8, 818] 
split level 56: [/input-8, 737] 
split level 57: [/input, 2694] 
split level 58: [/input-8, 1203] 
split level 59: [/input-8, 918] 
split level 60: [/input-8, 1187] 
split level 61: [/input, 606] 
split level 62: [/input-8, 1324] 
split level 63: [/input-8, 1763] 
split level 64: [/input-8, 1883] 
split level 65: [/input, 2397] 
split level 66: [/input, 122] 
split level 67: [/input, 374] 
split level 68: [/input, 2411] 
split level 69: [/input, 3161] 
split level 70: [/input-8, 1330] 
split level 71: [/input-8, 1325] 
split level 72: [/input-8, 1323] 
split level 73: [/input, 155] 
split level 74: [/input-8, 926] 
split level 75: [/input, 3189] 
split level 76: [/input, 3227] 
split level 77: [/input, 2900] 
split level 78: [/input, 371] 
split level 79: [/input-8, 1334] 
split level 80: [/input, 3212] 
split level 81: [/input-8, 1321] 
split level 82: [/input-8, 790] 
split level 83: [/input, 3242] 
split level 84: [/input, 1672] 
split level 85: [/input, 156] 
split level 86: [/input-8, 1322] 
split level 87: [/input-8, 930] 
split level 88: [/input-8, 817] 
split level 89: [/input, 2431] 
split level 90: [/input-8, 828] 
split level 91: [/input, 106] 
split level 92: [/input-8, 827] 
split level 93: [/input, 3177] 
split level 94: [/input, 3171] 
split level 95: [/input, 3260] 
split level 96: [/input, 691] 
split level 97: [/input, 3156] 
split level 98: [/input, 2204] 
split level 99: [/input-8, 1241] 
split level 100: [/input-8, 826] 
split level 101: [/input, 1673] 
split level 102: [/input-8, 829] 
split level 103: [/input, 3962] 
split level 104: [/input-8, 830] 
split level 105: [/input-8, 1309] 
split level 106: [/input, 94] 
split level 107: [/input-8, 1326] 
split level 108: [/input, 3213] 
split level 109: [/input, 434] 
split level 110: [/input, 572] 
split level 111: [/input, 2455] 
split level 112: [/input-8, 825] 
split level 113: [/input-8, 720] 
split level 114: [/input, 2940] 
split level 115: [/input, 2380] 
split level 116: [/input-8, 1664] 
split level 117: [/input-8, 849] 
split level 118: [/input, 305] 
split level 119: [/input, 3174] 
split level 120: [/input-8, 1755] 
split level 121: [/input-8, 1237] 
split level 122: [/input, 458] 
split level 123: [/input, 2899] 
split level 124: [/input-8, 778] 
split level 125: [/input, 3963] 
split level 126: [/input, 1675] 
split level 127: [/input, 3979] 
split level 128: [/input-8, 1316] 
split level 129: [/input, 306] 
split level 130: [/input, 683] 
split level 131: [/input, 2203] 
split level 132: [/input, 2205] 
split level 133: [/input, 3196] 
split level 134: [/input, 2169] 
split level 135: [/input, 446] 
split level 136: [/input-8, 1253] 
split level 137: [/input, 2202] 
split level 138: [/input, 681] 
split level 139: [/input, 2444] 
split level 140: [/input, 635] 
split level 141: [/input, 3154] 
split level 142: [/input, 2443] 
split level 143: [/input, 630] 
split level 144: [/input-8, 1756] 
split level 145: [/input, 1707] 
split level 146: [/input, 3219] 
split level 147: [/input, 100] 
split level 148: [/input, 1228] 
split level 149: [/input, 1674] 
split level 150: [/input, 2422] 
split level 151: [/input, 2440] 
split level 152: [/input, 2758] 
split level 153: [/input-8, 1981] 
split level 154: [/input, 2684] 
split level 155: [/input-8, 1248] 
split level 156: [/input, 2154] 
split level 157: [/input-8, 1575] 
split level 158: [/input-8, 1112] 
split level 159: [/input, 3929] 
split level 160: [/input, 836] 
split level 161: [/input, 732] 
split level 162: [/input, 825] 
split level 163: [/input, 1419] 
split level 164: [/input, 1218] 
split level 165: [/input, 727] 
split level 166: [/input, 2502] 
split level 167: [/input, 718] 
split level 168: [/input, 3991] 
split level 169: [/input, 1240] 
split level 170: [/input, 923] 
split level 171: [/input, 1217] 
split level 172: [/input, 741] 
split level 173: [/input, 726] 
split level 174: [/input, 873] 
split level 175: [/input, 1239] 
split level 176: [/input, 1206] 
split level 177: [/input, 2369] 
split level 178: [/input, 1241] 
split level 179: [/input, 1201] 
split level 180: [/input, 740] 
split level 181: [/input, 3720] 
split level 182: [/input, 3908] 
split level 183: [/input, 1404] 
split level 184: [/input, 1203] 
split level 185: [/input, 1255] 
split level 186: [/input, 733] 
split level 187: [/input, 4007] 
split level 188: [/input, 1413] 
split level 189: [/input, 3941] 
split level 190: [/input, 1220] 
split level 191: [/input, 3643] 
split level 192: [/input, 717] 
split level 193: [/input, 739] 
split level 194: [/input, 1412] 
split level 195: [/input, 1242] 
split level 196: [/input, 674] 
split level 197: [/input, 3992] 
split level 198: [/input, 3930] 
split level 199: [/input, 946] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02840554714202881
10 lb beta sum: 0.0, worst -0.025799930095672607
Time: prepare 0.0115    bound 0.0965    transfer 0.0015    finalize 0.0027    func 0.1149    
Accumulated time: func 0.1673    prepare 0.0234    bound 0.1484    transfer 0.0016    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.21094930) min lb tensor(-0.02563727)
Number of Verified Splits: 18 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011621236801147461 
BICCOS Cumulative time: 0.011621236801147461
Preprocessing time: 0.010196208953857422 Inference time: 0.0009906291961669922 Add cuts time: 0.00023889541625976562 Cut analysis time: 0.00019550323486328125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5092    set_bounds 0.0096    solve 0.1150    add 0.0099    
Accumulated time: pickout 0.0004    decision 0.5092    set_bounds 0.0096    solve 0.1150    add 0.0099    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([27]), tensor([-1.]), tensor([0]), tensor([1.04515493e-07]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([27]), tensor([1.]), tensor([0]), tensor([1.04515493e-07]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.01522517204284668

all verified at 0th iter
Time: prepare 0.0003    bound 0.0041    transfer 0.0001    finalize 0.0001    func 0.0046    
Accumulated time: func 0.1719    prepare 0.0237    bound 0.1524    transfer 0.0017    finalize 0.0030    
After pruning, left:  0

Back to Regular BaB


Properties batch 1, size 1
Remaining timeout: 197.57084250450134
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 197.57078313827515
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 197.57076144218445
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.57074189186096
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.5707230567932
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.57070469856262
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.57068634033203
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.57066750526428
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4294 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 160, vnnlib ID: 160 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.49879074, -9.55830097, -5.11135626, -6.59453297, -4.63026714,
         -6.67742062, -5.16739082, -6.71435833, -9.42285538, -9.37638187]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [669]; unstable size 669; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 669] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 669] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 669] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 192] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.34096289, 4.10190248, 0.30777770, 1.68400621, 1.76496542, 0.30022144,
         1.81714153, 4.01539373, 3.94053698]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0747 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 161, vnnlib ID: 161 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.87970066, -14.66562939,  -9.85256958,  -8.82474613, -10.40148449,
          -8.68280125,  -9.99558353, -10.62414360, -13.25842571, -14.81057453]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [425]; unstable size 425; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 169, 1, 425] with unstable size 168 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 425] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 425] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [168]; unstable size 168; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 168] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 168] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.58588171, 5.25564861, 0.84904134, 0.12145444, 1.39071870, 0.90202570,
         1.64734650, 3.90297651, 5.47198534]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0612 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 162, vnnlib ID: 162 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.87640285, -12.87582302,  -8.50058079, -10.47419071,  -8.70230770,
         -10.56670856,  -8.81984520, -11.36477280, -11.69618988, -13.20551491]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [477]; unstable size 477; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 162, 1, 477] with unstable size 161 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 477] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 477] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [161]; unstable size 161; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 161] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 161] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.86706161,  3.64629698,  1.61399448, -0.01080489,  1.69744194,
          0.02841192,  2.42314363,  2.43144703,  3.97708631]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.87640285, -12.87582302,  -8.50058079, -10.47419071,  -8.70230770,
         -10.56670856,  -8.81984520, -11.36477280, -11.69618988, -13.20551491]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.24it/s]100%|██████████| 1/1 [00:00<00:00,  9.23it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.73246670, -12.68345451,  -8.39245701, -10.23877811,  -8.46293736,
          -10.33113194,  -8.62541771, -11.11933708, -11.50778389, -12.95249939]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.07048035]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1109 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 12th iter
best_l after optimization: 16.79953956604004
alpha/beta optimization time: 0.15526056289672852
initial alpha-crown bounds: tensor([[8.82856488e-01, 3.66166091e+00, 1.62423444e+00, 2.99811363e-05,
         1.70782304e+00, 3.46809626e-02, 2.44014645e+00, 2.45263147e+00,
         3.99547529e+00]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 0 ; Worst class: (+ rhs) 2.9981136322021484e-05
verified with init bound!
Result: safe-incomplete in 0.3304 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 163, vnnlib ID: 163 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.01543331,  -8.50793934,  -8.28173351,  -8.84521961,  -8.12535572,
          -8.88524437,  -8.74754906,  -8.41619205, -10.82264996,  -8.60353184]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [616]; unstable size 616; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 616] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 616] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 616] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 159] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-8.43455195e-02, -8.76670837e-01, -5.83441257e-01, -4.16055918e-02,
         -5.99727392e-01,  1.43611431e-03, -2.22273827e-01,  1.54696405e+00,
         -7.14366913e-01]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.01543331,  -8.50793934,  -8.28173351,  -8.84521961,  -8.12535572,
          -8.88524437,  -8.74754906,  -8.41619205, -10.82264996,  -8.60353184]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.01543331,  -8.50793839,  -8.28173351,  -8.84521961,  -8.12535477,
           -8.88524532,  -8.74754715,  -8.41619205, -10.82264996,  -8.60353088],
         [ -9.01543331,  -8.50793839,  -8.28173351,  -8.84521961,  -8.12535477,
           -8.88524532,  -8.74754715,  -8.41619205, -10.82264996,  -8.60353088]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.59924126,  0.09174633, -0.13445854,  0.42902756, -0.29083729,
           0.33135509,  0.18733883]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         ...,


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0934 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 164, vnnlib ID: 164 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.65704536, -8.06795883, -5.25074387, -4.81809998, -5.40738297,
         -4.78305626, -5.53884125, -6.33654642, -8.16578388, -7.93662977]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [599]; unstable size 599; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 177, 1, 599] with unstable size 176 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 599] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 599] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [176]; unstable size 176; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 176] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 176] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.34938383, 2.50165486, 0.22862625, 0.01722103, 0.35063815, 0.36827111,
         1.27956557, 2.61070538, 2.51747704]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0616 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 165, vnnlib ID: 165 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.43569374, -7.82689762, -6.75649071, -7.24614143, -7.06519032,
         -7.31342793, -8.26335907, -8.11638641, -7.34807396, -7.95840502]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [552]; unstable size 552; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 552] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 552] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 552] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 203] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.37668705, -1.05399323, -1.66841125, -1.10696757, -1.28876460,
         -1.03613186, -0.23888946, -1.47692060, -0.85666394]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.43569374, -7.82689762, -6.75649071, -7.24614143, -7.06519032,
         -7.31342793, -8.26335907, -8.11638641, -7.34807396, -7.95840502]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.43569374, -7.82689667, -6.75648975, -7.24613953, -7.06518936,
          -7.31342697, -8.26335716, -8.11638546, -7.34807396, -7.95840406],
         [-7.43569374, -7.82689667, -6.75648975, -7.24613953, -7.06518936,
          -7.31342697, -8.26335716, -8.11638546, -7.34807396, -7.95840406]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.68069172, -0.28948879, -1.35989571, -0.87024593, -1.05119610,
          -0.80295849,  0.14697170, -0.76831150, -0.15798140]]],
       device='cuda:0')
number of violation:  8
clean attack image tensor([[[[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         ...,


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0996 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 166, vnnlib ID: 166 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.11932993, -4.82532978, -2.47477031, -2.84284973, -2.40484571,
         -3.00597310, -1.59280419, -3.88199234, -4.35127544, -4.01034117]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [458]; unstable size 458; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 244, 1, 458] with unstable size 243 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 458] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 458] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [243]; unstable size 243; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 243] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 243] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.65978837, 2.30001354, 0.46589649, 0.87081158, 0.39240420, 1.02510440,
         1.69761920, 1.67752409, 1.51655388]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0722 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 167, vnnlib ID: 167 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.35463643, -5.18449020, -1.74321675, -3.12308002, -2.89075232,
         -3.26917696, -3.89859080, -4.40411377, -1.31181729, -4.41958570]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [510]; unstable size 510; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 213, 1, 510] with unstable size 212 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 510] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 510] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [212]; unstable size 212; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 212] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 212] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.16538978,  0.02639830,  1.23263645,  1.06774712,  1.37462723,
          1.93852615,  2.49895358, -0.35096419,  2.43112779]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.35463643, -5.18449020, -1.74321675, -3.12308002, -2.89075232,
         -3.26917696, -3.89859080, -4.40411377, -1.31181729, -4.41958570]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.35463643, -5.18449020, -1.74321675, -3.12308002, -2.89075232,
          -3.26917696, -3.89859080, -4.40411377, -1.31181729, -4.41958570]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04281914]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[1.90000021, 1.80476213, 1.74127007,  ..., 1.40793681,
            1.55079389, 1.55079389],
           [1.96349227, 1.85238123, 1.85238123,  ..., 1.09047651,
            1.39206374, 1.45555580],
           [1.88412726, 1.80476213, 1.80476213,  ..., 0.64603180,
            1.07460344, 1.18571460],
           ...,
           [1.64603198, 1.47142887, 1.34444475,  ..., 0.42380959,
            0.55079371, 0.64603180],
           [1.67777801, 1.53492093, 1.26507962,  ..., 0.47142863,
            0.59841275, 0.72539687],
           [1.59841299, 1.26507962, 0.88412702,  ..., 0.63015878,
            0.77301592, 0.86825401]],

          [[1.99677968, 1.85185218, 1.73913074,  ..., 1.20772982,
            1.23993587, 1.22383285],
           [2.04508877, 1.88405824, 1.81964600,  ..., 0.93397754,
            1.14331758, 1.17552364],
           [1.94847047, 1.83574903, 1.75523376,  ..., 0.51529801,
            0.88566834, 0.96618366],
           ...,
           [1.65861547, 1.41706955, 1.28824508,  ..., 0.28985518,
            0.30595824, 0.35426742],
           [1.67471850, 1.44927561, 1.25603890,  ..., 0.28985518,
            0.35426742, 0.43478271],
           [1.65861547, 1.30434811, 0.98228669,  ..., 0.38647354,
            0.48309189, 0.53140104]],

          [[2.02548766, 1.89055514, 1.81559265,  ..., 1.29085493,
            1.38081002, 1.42578757],
           [2.07046509, 1.93553269, 1.87556267,  ..., 1.12593722,
            1.35082495, 1.42578757],
           [1.98051023, 1.87556267, 1.80060017,  ..., 0.84107965,
            1.18590748, 1.27586246],
           ...,
           [1.60569763, 1.41079497, 1.35082495,  ..., 0.58620709,
            0.63118458, 0.67616212],
           [1.65067506, 1.48575759, 1.23088503,  ..., 0.57121456,
            0.63118458, 0.70614707],
           [1.68066013, 1.39580250, 0.94602716,  ..., 0.64617711,
            0.72113961, 0.76611710]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0763 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 168, vnnlib ID: 168 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.77010298, -9.56792831, -3.51737452, -7.98014259, -4.43413353,
         -8.13228130, -7.63488007, -7.35559034, -9.32965469, -9.84434509]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [608]; unstable size 608; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 93, 1, 608] with unstable size 92 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 608] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 608] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [92]; unstable size 92; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 92] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 92] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.91945148, 5.40677547, 4.21947527, 0.74099821, 4.36890173, 3.83588839,
         3.49529505, 5.35575104, 5.79974031]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0774 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 169, vnnlib ID: 169 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.65607166, -10.35036945,  -8.06762981,  -9.21998215,  -7.83191204,
          -9.32909298,  -9.04870224,  -8.23802948,  -9.66316414, -10.29120541]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [442]; unstable size 442; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 152, 1, 442] with unstable size 151 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 442] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 442] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [151]; unstable size 151; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 151] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 151] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.31049466,  1.82715464, -0.04293859,  1.07361531,  1.18260849,
          0.86679059,  0.03638697,  1.20158589,  1.79956198]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.65607166, -10.35036945,  -8.06762981,  -9.21998215,  -7.83191204,
          -9.32909298,  -9.04870224,  -8.23802948,  -9.66316414, -10.29120541]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.48it/s]100%|██████████| 1/1 [00:00<00:00,  7.48it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.67833710, -10.47902393,  -8.10711384,  -9.37081242,  -8.07628441,
           -9.48413372,  -9.13742447,  -8.56529427,  -9.67664242, -10.46873760]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.03082943]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1371 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 8.407694816589355
alpha/beta optimization time: 1.3206515312194824
initial alpha-crown bounds: tensor([[ 0.32534099,  1.84551048, -0.02267271,  1.09125721,  1.19872820,
          0.89233625,  0.04136062,  1.21694779,  1.81888580]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.022672712802886963
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.46147775650024
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.4614338874817
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.461407661438
Verifying property 2 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02267271]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.65607166, -10.35036945,  -8.06762981,  -9.21998215,  -7.83191204,
         -9.32909298,  -9.04870224,  -8.23802948,  -9.66316414, -10.29120541],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02267271]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 442
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 149
Node /15 input 0: size torch.Size([100]) unstable 2
-----------------
# of unstable neurons: 593
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011396408081054688
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.022672295570373535
10 lb beta sum: 0.0, worst -0.022672951221466064
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    func 0.0530    
Accumulated time: func 0.0530    prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 57] 
split level 1: [/input-8, 1835] 
split level 2: [/input-8, 1877] 
split level 3: [/input-8, 1886] 
split level 4: [/input-8, 20] 
split level 5: [/input-8, 1898] 
split level 6: [/input-8, 1843] 
split level 7: [/input-8, 1491] 
split level 8: [/input-8, 1842] 
split level 9: [/input-8, 1773] 
split level 10: [/input-8, 1772] 
split level 11: [/input-8, 1769] 
split level 12: [/input-8, 1490] 
split level 13: [/input-8, 1315] 
split level 14: [/input-8, 217] 
split level 15: [/input, 2488] 
split level 16: [/input-8, 1508] 
split level 17: [/input-8, 193] 
split level 18: [/input, 2212] 
split level 19: [/input-8, 139] 
split level 20: [/input, 2442] 
split level 21: [/input, 2455] 
split level 22: [/input, 1955] 
split level 23: [/input-8, 1164] 
split level 24: [/input-8, 1148] 
split level 25: [/input-8, 36] 
split level 26: [/input-8, 1800] 
split level 27: [/input-8, 185] 
split level 28: [/input-8, 1762] 
split level 29: [/input, 2502] 
split level 30: [/input-8, 1779] 
split level 31: [/input-8, 188] 
split level 32: [/input-8, 1774] 
split level 33: [/input-8, 716] 
split level 34: [/input, 394] 
split level 35: [/input-8, 1713] 
split level 36: [/input, 1939] 
split level 37: [/input-8, 1765] 
split level 38: [/input-8, 1712] 
split level 39: [/input-8, 846] 
split level 40: [/input, 2758] 
split level 41: [/input-8, 2033] 
split level 42: [/input-8, 1816] 
split level 43: [/input, 149] 
split level 44: [/input-8, 158] 
split level 45: [/input-8, 725] 
split level 46: [/input, 1914] 
split level 47: [/input-8, 1981] 
split level 48: [/input, 1884] 
split level 49: [/input, 2962] 
split level 50: [/input, 422] 
split level 51: [/input, 1928] 
split level 52: [/input-8, 1867] 
split level 53: [/input-8, 1599] 
split level 54: [/input-8, 1739] 
split level 55: [/input-8, 1679] 
split level 56: [/input-8, 1634] 
split level 57: [/input, 2106] 
split level 58: [/input-8, 1758] 
split level 59: [/input, 2461] 
split level 60: [/input-8, 726] 
split level 61: [/input, 3876] 
split level 62: [/input-8, 845] 
split level 63: [/input-8, 844] 
split level 64: [/input, 2437] 
split level 65: [/input, 2953] 
split level 66: [/input-8, 944] 
split level 67: [/input, 2583] 
split level 68: [/input-8, 150] 
split level 69: [/input-8, 1303] 
split level 70: [/input, 457] 
split level 71: [/input-8, 1929] 
split level 72: [/input, 2534] 
split level 73: [/input, 3275] 
split level 74: [/input, 2697] 
split level 75: [/input, 3703] 
split level 76: [/input-8, 1112] 
split level 77: [/input, 1922] 
split level 78: [/input, 452] 
split level 79: [/input, 3273] 
split level 80: [/input, 1403] 
split level 81: [/input, 3946] 
split level 82: [/input, 1018] 
split level 83: [/input, 1923] 
split level 84: [/input-8, 1741] 
split level 85: [/input-8, 112] 
split level 86: [/input, 1419] 
split level 87: [/input, 3525] 
split level 88: [/input-8, 953] 
split level 89: [/input, 887] 
split level 90: [/input, 2844] 
split level 91: [/input, 147] 
split level 92: [/input-8, 1215] 
split level 93: [/input, 2585] 
split level 94: [/input-8, 1961] 
split level 95: [/input, 2157] 
split level 96: [/input, 3890] 
split level 97: [/input, 264] 
split level 98: [/input, 3559] 
split level 99: [/input, 720] 
split level 100: [/input, 3802] 
split level 101: [/input, 2361] 
split level 102: [/input-8, 785] 
split level 103: [/input, 460] 
split level 104: [/input, 2450] 
split level 105: [/input-8, 1323] 
split level 106: [/input-8, 1334] 
split level 107: [/input, 589] 
split level 108: [/input, 3762] 
split level 109: [/input-8, 1021] 
split level 110: [/input-8, 367] 
split level 111: [/input, 399] 
split level 112: [/input, 1101] 
split level 113: [/input, 686] 
split level 114: [/input, 3203] 
split level 115: [/input, 4007] 
split level 116: [/input-8, 787] 
split level 117: [/input-8, 1565] 
split level 118: [/input, 2217] 
split level 119: [/input, 3162] 
split level 120: [/input-8, 1420] 
split level 121: [/input-8, 1427] 
split level 122: [/input-8, 219] 
split level 123: [/input, 1689] 
split level 124: [/input-8, 883] 
split level 125: [/input, 2980] 
split level 126: [/input-8, 1659] 
split level 127: [/input-8, 2003] 
split level 128: [/input-8, 869] 
split level 129: [/input, 2392] 
split level 130: [/input-8, 876] 
split level 131: [/input-8, 799] 
split level 132: [/input, 2436] 
split level 133: [/input, 2626] 
split level 134: [/input-8, 884] 
split level 135: [/input, 971] 
split level 136: [/input, 4008] 
split level 137: [/input-8, 886] 
split level 138: [/input, 2261] 
split level 139: [/input, 3750] 
split level 140: [/input, 3657] 
split level 141: [/input-8, 1299] 
split level 142: [/input-8, 1661] 
split level 143: [/input, 315] 
split level 144: [/input, 979] 
split level 145: [/input, 1210] 
split level 146: [/input, 674] 
split level 147: [/input, 2811] 
split level 148: [/input, 3620] 
split level 149: [/input, 2435] 
split level 150: [/input, 957] 
split level 151: [/input, 1195] 
split level 152: [/input, 2362] 
split level 153: [/input, 2687] 
split level 154: [/input, 1253] 
split level 155: [/input, 974] 
split level 156: [/input-8, 901] 
split level 157: [/input-8, 375] 
split level 158: [/input-8, 1079] 
split level 159: [/input-8, 949] 
split level 160: [/input, 2272] 
split level 161: [/input, 2251] 
split level 162: [/input, 2969] 
split level 163: [/input, 3619] 
split level 164: [/input, 1239] 
split level 165: [/input, 332] 
split level 166: [/input, 3603] 
split level 167: [/input-8, 1022] 
split level 168: [/input, 3944] 
split level 169: [/input, 3117] 
split level 170: [/input-8, 1023] 
split level 171: [/input, 3911] 
split level 172: [/input, 3788] 
split level 173: [/input-8, 1020] 
split level 174: [/input, 1227] 
split level 175: [/input, 2810] 
split level 176: [/input, 1197] 
split level 177: [/input-8, 992] 
split level 178: [/input, 846] 
split level 179: [/input, 3715] 
split level 180: [/input, 2401] 
split level 181: [/input, 3963] 
split level 182: [/input-8, 806] 
split level 183: [/input-8, 1571] 
split level 184: [/input, 921] 
split level 185: [/input, 3751] 
split level 186: [/input, 1146] 
split level 187: [/input, 2639] 
split level 188: [/input, 599] 
split level 189: [/input, 3621] 
split level 190: [/input, 642] 
split level 191: [/input, 2160] 
split level 192: [/input, 2671] 
split level 193: [/input-8, 360] 
split level 194: [/input, 1223] 
split level 195: [/input, 2433] 
split level 196: [/input, 791] 
split level 197: [/input, 2627] 
split level 198: [/input, 1252] 
split level 199: [/input, 2220] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029333800077438354
10 lb beta sum: 0.0, worst -0.022915273904800415
Time: prepare 0.0115    bound 0.0979    transfer 0.0044    finalize 0.0030    func 0.1194    
Accumulated time: func 0.1725    prepare 0.0216    bound 0.1504    transfer 0.0045    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.00372574) min lb tensor(-0.02267230)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.011183500289916992 
BICCOS Cumulative time: 0.011183500289916992
Preprocessing time: 0.010325908660888672 Inference time: 0.00015783309936523438 Add cuts time: 5.7697296142578125e-05 Cut analysis time: 0.0006420612335205078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02011 (1), -0.02007 (1), -0.02005 (1), -0.02002 (1), -0.01975 (1), -0.01957 (1), -0.01950 (1), -0.01928 (1), -0.01904 (1), -0.01895 (1), -0.01859 (1), -0.01850 (1), -0.01835 (1), -0.01829 (1), -0.01828 (1), -0.01821 (1), -0.01818 (1), -0.01808 (1), -0.01793 (1), -0.01779 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5125    set_bounds 0.0116    solve 0.1195    add 0.0719    
Accumulated time: pickout 0.0003    decision 0.5125    set_bounds 0.0116    solve 0.1195    add 0.0719    
Current (lb-rhs): -0.02010941505432129
50 domains visited
Cumulative time: 0.784947395324707

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-8, 1835] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-8, 1835] 
split level 1: [/input-8, 1877] [/input-8, 1835] [/input-8, 1835] [/input-8, 1877] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1877] 
split level 2: [/input-8, 1842] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] 
split level 3: [/input-8, 1843] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018816977739334106
10 lb beta sum: 0.3393692076206207, worst -0.01818177103996277
Time: prepare 0.0070    bound 0.1182    transfer 0.0007    finalize 0.0024    func 0.1311    
Accumulated time: func 0.3035    prepare 0.0288    bound 0.2687    transfer 0.0052    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.01591426) min lb tensor(-0.01809007)
Number of Verified Splits: 115 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 38
#cuts >= 20: 0
BICCOS time: 0.019902944564819336 
BICCOS Cumulative time: 0.031086444854736328
Preprocessing time: 0.01188969612121582 Inference time: 0.004868030548095703 Add cuts time: 0.0023810863494873047 Cut analysis time: 0.0007641315460205078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00635 (2), -0.00627 (2), -0.00622 (2), -0.00622 (2), -0.00572 (2), -0.00571 (2), -0.00565 (2), -0.00563 (2), -0.00551 (2), -0.00511 (2), -0.00479 (2), -0.00473 (2), -0.00461 (2), -0.00451 (2), -0.00440 (2), -0.00440 (2), -0.00438 (2), -0.00432 (2), -0.00415 (2), -0.00404 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0133    solve 0.1311    add 0.0898    
Accumulated time: pickout 0.0014    decision 0.5319    set_bounds 0.0249    solve 0.2507    add 0.1617    
Current (lb-rhs): -0.006345182657241821
100 domains visited
Cumulative time: 1.0597074031829834

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] 
split level 1: [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] 
split level 2: [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] 
split level 3: [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.006535440683364868
10 lb beta sum: 1.7363073825836182, worst -0.0019402503967285156
Time: prepare 0.0087    bound 0.1464    transfer 0.0007    finalize 0.0027    func 0.1611    
Accumulated time: func 0.4647    prepare 0.0377    bound 0.4151    transfer 0.0060    finalize 0.0082    
all_split False
======================Cut inference begins======================
max lb tensor(0.01147330) min lb tensor(-0.00175667)
Number of Verified Splits: 378 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 52.
#cuts 1-3: 52
#cuts >= 20: 0
BICCOS time: 0.039628028869628906 
BICCOS Cumulative time: 0.07071447372436523
Preprocessing time: 0.01167917251586914 Inference time: 0.013017892837524414 Add cuts time: 0.014134645462036133 Cut analysis time: 0.0007963180541992188
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0192    set_bounds 0.0138    solve 0.1612    add 0.0227    
Accumulated time: pickout 0.0024    decision 0.5511    set_bounds 0.0387    solve 0.4119    add 0.1844    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1835]), tensor([-1.]), tensor([0]), tensor([1.08018538e-18]), tensor([1])), '/input-12': ([57], [-1.0], [0], [5.153766302612439e-11], [0])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1835, 1877]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.36609585e+31,  9.21748765e-03]), tensor([1, 2])), '/input-12': ([57], [-1.0], [0], [5.153766302612439e-11], [0])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1835, 1877]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.36609585e+31,  2.82134279e-03]), tensor([1, 2])), '/input-12': ([57], [-1.0], [0], [5.153766302612439e-11], [0])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1843, 1835]), tensor([-1., -1.]), tensor([0, 0]), tensor([0.00506674, 0.00947993]), tensor([1, 2])), '/input-12': ([57], [1.0], [0], [-1.366086176164531e+31], [0])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1843, 1835]), tensor([-1.,  1.]), tensor([0, 0]), tensor([0.00506674, 0.00460546]), tensor([1, 2])), '/input-12': ([57], [1.0], [0], [-1.366086176164531e+31], [0])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1843]), tensor([1.]), tensor([0]), tensor([2.12517895e-28]), tensor([1])), '/input-12': ([57], [1.0], [0], [-1.366086176164531e+31], [0])}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.007318019866943359

all verified at 1th iter
Time: prepare 0.0004    bound 0.0137    transfer 0.0001    finalize 0.0002    func 0.0144    
Accumulated time: func 0.4791    prepare 0.0381    bound 0.4288    transfer 0.0061    finalize 0.0084    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 196.89463996887207
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 196.89456343650818
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 196.89411640167236
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 196.89409470558167
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 196.89407467842102
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 196.8940556049347
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.1060 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 170, vnnlib ID: 170 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.08461761, -10.51277637,  -1.99679935,  -5.48344898,  -2.58635473,
          -5.56198025,  -5.39356422,  -4.27136040,  -8.85855103,  -9.92981434]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [631]; unstable size 631; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 139, 1, 631] with unstable size 138 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 631] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 631] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [138]; unstable size 138; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 138] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.05669785,  7.12348557, -0.81237477,  2.57512522,  2.65363836,
          2.42923665,  1.37826777,  5.74696732,  6.64974642]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.08461761, -10.51277637,  -1.99679935,  -5.48344898,  -2.58635473,
          -5.56198025,  -5.39356422,  -4.27136040,  -8.85855103,  -9.92981434]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.08461761, -10.51277637,  -1.99679935,  -5.48344898,  -2.58635473,
           -5.56198025,  -5.39356422,  -4.27136040,  -8.85855103,  -9.92981434]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.58955538]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.84603173, -0.94126981, -0.86190474,  ..., -0.33809513,
            -0.48095238, -0.51269841],
           [-0.25873005, -0.30634910, -0.27460307,  ..., -0.29047608,
            -0.33809513, -0.43333322],
           [ 0.42380959,  0.36031753,  0.39206356,  ..., -0.08412688,
            -0.14761895, -0.32222211],
           ...,
           [ 0.47142863,  0.48730165,  0.55079371,  ...,  0.05873025,
             0.01111121,  0.12222230],
           [ 0.12222230,  0.10634929,  0.23333341,  ..., -0.02063482,
            -0.02063482,  0.16984135],
           [-0.19523799, -0.41746020, -0.29047608,  ...,  0.16984135,
             0.31269848,  0.58253974]],

          [[-0.67632848, -0.78904986, -0.72463763,  ..., -0.03220600,
            -0.17713353, -0.20933965],
           [ 0.04830930, -0.01610294,  0.01610318,  ...,  0.03220624,
            -0.01610294, -0.11272129],
           [ 0.88566834,  0.82125610,  0.85346222,  ...,  0.24154601,
             0.19323683, -0.01610294],
           ...,
           [ 0.95008057,  0.98228669,  1.03059590,  ...,  0.62801939,
             0.56360716,  0.61191636],
           [ 0.70853472,  0.72463775,  0.85346222,  ...,  0.66022551,
             0.62801939,  0.77294695],
           [ 0.46698883,  0.22544295,  0.40257660,  ...,  0.77294695,
             0.85346222,  1.14331758]],

          [[-0.01349309, -0.07346311,  0.03148442,  ...,  0.76611710,
             0.66116959,  0.64617711],
           [-0.02848560, -0.04347810,  0.00149941,  ...,  0.78110963,
             0.78110963,  0.78110963],
           [-0.14842562, -0.19340314, -0.14842562,  ...,  0.81109464,
             0.81109464,  0.76611710],
           ...,
           [-0.53823084, -0.56821585, -0.50824583,  ..., -0.68815589,
            -0.65817088, -0.49325335],
           [-0.58320838, -0.73313338, -0.61319339,  ..., -0.83808094,
            -0.83808094, -0.65817088],
           [-0.80809593, -1.04797614, -0.85307342,  ..., -0.74812591,
            -0.67316341, -0.43328333]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0740 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 171, vnnlib ID: 171 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.63988018, -11.70766258, -10.72140884, -10.78502178, -10.30626678,
         -10.96242046,  -9.89720917, -10.94630241, -13.04552364, -11.00957012]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [493]; unstable size 493; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 493] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 493] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 493] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 177] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.11123210, 1.11106300, 0.48803002, 0.63042796, 0.00368500, 0.79707956,
         0.55721843, 2.39154434, 0.42870808]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0615 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 172, vnnlib ID: 172 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.49745131, -8.20798206, -6.12458706, -8.36979198, -6.27434921,
         -8.58381653, -8.11138153, -7.94669247, -4.75123119, -7.89815950]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [561]; unstable size 561; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 148, 1, 561] with unstable size 147 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 561] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 561] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [147]; unstable size 147; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 147] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.08015418,  1.10043216,  3.16933274,  1.15053523,  3.37255001,
          2.91000962,  2.77714491, -0.19217908,  2.78871417]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.49745131, -8.20798206, -6.12458706, -8.36979198, -6.27434921,
         -8.58381653, -8.11138153, -7.94669247, -4.75123119, -7.89815950]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.70938110, -8.28709698, -6.37382412, -8.52355671, -6.53355598,
          -8.73983860, -8.32157516, -8.20209694, -4.68664932, -7.95726824]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02273178]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0713 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 173, vnnlib ID: 173 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.48213387, -8.01494122, -6.49922419, -6.44987583, -6.58213425,
         -6.60465574, -5.89261341, -7.75944138, -8.76826668, -7.64277458]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [608]; unstable size 608; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 608] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 608] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 608] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 216] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.16914630,  0.51496100, -0.35071123, -0.32186127,  0.12535101,
         -1.02238870,  0.66660714,  1.28926706,  0.21741581]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.48213387, -8.01494122, -6.49922419, -6.44987583, -6.58213425,
         -6.60465574, -5.89261341, -7.75944138, -8.76826668, -7.64277458]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.48213339, -8.01494217, -6.49922466, -6.44987679, -6.58213520,
          -6.60465670, -5.89261341, -7.75944233, -8.76826763, -7.64277506],
         [-7.48213339, -8.01494217, -6.49922466, -6.44987679, -6.58213520,
          -6.60465670, -5.89261341, -7.75944233, -8.76826763, -7.64277506]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.04934788,  0.13225842, -0.55726337]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0856 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 174, vnnlib ID: 174 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.71844196, -6.83214664, -1.22474170, -2.20203090, -1.30234599,
         -2.27594328, -2.31035209, -2.35291529, -4.83945274, -6.00620031]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [588]; unstable size 588; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 199, 1, 588] with unstable size 198 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 588] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 588] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [198]; unstable size 198; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 198] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 198] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.61178422,  4.32749844, -0.36567199,  0.41240394,  0.48770022,
          0.50044858,  0.68070054,  2.37939572,  3.58202124]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.71844196, -6.83214664, -1.22474170, -2.20203090, -1.30234599,
         -2.27594328, -2.31035209, -2.35291529, -4.83945274, -6.00620031]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.71844196, -6.83214664, -1.22474170, -2.20203090, -1.30234599,
          -2.27594328, -2.31035209, -2.35291529, -4.83945274, -6.00620031]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07760429]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.32222211, -0.29047608, -0.17936498,  ...,  0.67777783,
             0.83650798,  1.15396857],
           [-0.33809513, -0.08412688,  0.16984135,  ...,  0.70952386,
             0.94761908,  1.29682565],
           [-0.13174593,  0.16984135,  0.39206356,  ...,  0.70952386,
             0.94761908,  1.45555580],
           ...,
           [-0.06825387, -0.08412688, -0.08412688,  ..., -0.14761895,
            -0.09999990, -0.02063482],
           [-0.05238085, -0.09999990, -0.06825387,  ..., -0.13174593,
            -0.02063482,  0.10634929],
           [-0.13174593, -0.17936498, -0.09999990,  ...,  0.07460327,
             0.16984135,  0.23333341]],

          [[-0.45088565, -0.43478248, -0.38647330,  ...,  0.48309189,
             0.62801939,  0.93397754],
           [-0.48309177, -0.25764883, -0.06441211,  ...,  0.49919492,
             0.70853472,  1.01449287],
           [-0.28985494, -0.03220600,  0.16103071,  ...,  0.48309189,
             0.67632860,  1.12721443],
           ...,
           [-0.22544271, -0.24154577, -0.24154577,  ..., -0.30595800,
            -0.27375188, -0.17713353],
           [-0.20933965, -0.24154577, -0.22544271,  ..., -0.32206106,
            -0.19323659, -0.03220600],
           [-0.28985494, -0.33816412, -0.25764883,  ..., -0.12882435,
            -0.03220600,  0.08051541]],

          [[-0.55322337, -0.52323836, -0.46326834,  ...,  0.25637197,
             0.45127454,  0.79610211],
           [-0.59820086, -0.37331331, -0.17841063,  ...,  0.19640197,
             0.43628204,  0.76611710],
           [-0.43328333, -0.17841063,  0.00149941,  ...,  0.13643195,
             0.34632701,  0.79610211],
           ...,
           [-0.29835078, -0.31334329, -0.31334329,  ..., -0.32833579,
            -0.29835078, -0.20839565],
           [-0.26836565, -0.31334329, -0.28335828,  ..., -0.32833579,
            -0.22338814, -0.08845562],
           [-0.32833579, -0.35832080, -0.29835078,  ..., -0.14842562,
            -0.05847061,  0.04647692]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0858 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 175, vnnlib ID: 175 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.66825104, -7.97197151, -6.85186052, -7.69482708, -6.41166210,
         -7.79411554, -7.01330566, -7.14677095, -7.18919182, -7.63720417]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [604]; unstable size 604; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 604] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 604] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 604] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 186] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.53241420, 0.56145525, 1.23012352, 0.07895291, 1.31490338, 0.48338461,
         0.64640123, 1.02218056, 1.28158712]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0697 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 176, vnnlib ID: 176 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.87314558, -8.19042587, -4.13985491, -4.64103413, -4.94530869,
         -4.76780462, -4.91272449, -6.20926189, -6.63870811, -7.66739511]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [597]; unstable size 597; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 597] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 597] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 597] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 153] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.23613930,  2.79050159, -0.77878702, -0.04329693,  0.11112864,
          0.04540652,  1.03803015,  1.36925066,  2.36230230]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.87314558, -8.19042587, -4.13985491, -4.64103413, -4.94530869,
         -4.76780462, -4.91272449, -6.20926189, -6.63870811, -7.66739511]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.87314510, -8.19042587, -4.13985491, -4.64103413, -4.94530916,
          -4.76780462, -4.91272354, -6.20926237, -6.63870811, -7.66739511],
         [-4.87314510, -8.19042587, -4.13985491, -4.64103413, -4.94530916,
          -4.76780462, -4.91272354, -6.20926237, -6.63870811, -7.66739511]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.23211098, -0.50117922,  0.30427504]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]],


         [[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]],


         [[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0732 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 177, vnnlib ID: 177 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.53732777, -16.52824783, -10.35078621, -13.07399178, -13.29616356,
         -13.26419640, -14.66434383, -13.61211491, -15.27535629, -16.57476234]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [276]; unstable size 276; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 76, 1, 276] with unstable size 75 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 276] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 276] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [75]; unstable size 75; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 75] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 75] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.01606512, 5.64310741, 2.54551053, 2.74233055, 2.73602724, 4.06365871,
         3.03769207, 4.63138199, 5.85097361]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0683 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 178, vnnlib ID: 178 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.18358374, -9.98720455, -4.51179361, -6.18973541, -4.68899345,
         -6.30690002, -6.33994198, -4.82446098, -9.05756760, -9.00955582]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [453]; unstable size 453; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 141, 1, 453] with unstable size 140 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 453] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 453] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [140]; unstable size 140; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 140] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 140] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 5.29551172, -0.05402613,  1.48138261,  0.06260347,  1.59185386,
          1.62150908,  0.04656303,  4.47954369,  4.37859154]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.18358374, -9.98720455, -4.51179361, -6.18973541, -4.68899345,
         -6.30690002, -6.33994198, -4.82446098, -9.05756760, -9.00955582]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.93it/s]100%|██████████| 1/1 [00:00<00:00,  8.92it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -4.25827217, -10.05697727,  -4.28648949,  -5.97811222,  -4.47851419,
           -6.09019661,  -6.11976624,  -4.58179903,  -9.12149048,  -9.06482506]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02821732]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1147 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.004981994628906
alpha/beta optimization time: 1.2237489223480225
initial alpha-crown bounds: tensor([[ 5.31580925, -0.04664230,  1.49123240,  0.07164478,  1.60213923,
          1.62858009,  0.05958939,  4.48958206,  4.39304543]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.046642303466796875
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.594340801239
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.59429740905762
Verifying property 1 with 1 instances.
##### Instance 178 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04664230]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.18358374, -9.98720455, -4.51179361, -6.18973541, -4.68899345,
        -6.30690002, -6.33994198, -4.82446098, -9.05756760, -9.00955582],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04664230]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 453
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 138
Node /15 input 0: size torch.Size([100]) unstable 3
-----------------
# of unstable neurons: 594
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001285076141357422
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.046642303466796875
10 lb beta sum: 0.0, worst -0.04664325714111328
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0608    transfer 0.0001    finalize 0.0002    func 0.0613    
Accumulated time: func 0.0613    prepare 0.0002    bound 0.0608    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 60] 
split level 1: [/input-8, 1316] 
split level 2: [/input-8, 1099] 
split level 3: [/input-8, 653] 
split level 4: [/input-8, 1326] 
split level 5: [/input-8, 1] 
split level 6: [/input, 547] 
split level 7: [/input-8, 1102] 
split level 8: [/input-8, 61] 
split level 9: [/input-8, 1313] 
split level 10: [/input-8, 1308] 
split level 11: [/input-8, 956] 
split level 12: [/input-8, 226] 
split level 13: [/input-8, 648] 
split level 14: [/input-8, 1525] 
split level 15: [/input-8, 54] 
split level 16: [/input-8, 1325] 
split level 17: [/input-8, 1139] 
split level 18: [/input, 2341] 
split level 19: [/input-8, 1116] 
split level 20: [/input-8, 46] 
split level 21: [/input-8, 1670] 
split level 22: [/input, 1401] 
split level 23: [/input-8, 9] 
split level 24: [/input-8, 213] 
split level 25: [/input-8, 62] 
split level 26: [/input, 998] 
split level 27: [/input-8, 698] 
split level 28: [/input, 987] 
split level 29: [/input-8, 1829] 
split level 30: [/input, 908] 
split level 31: [/input-8, 884] 
split level 32: [/input-8, 838] 
split level 33: [/input, 924] 
split level 34: [/input, 3815] 
split level 35: [/input, 2603] 
split level 36: [/input-8, 155] 
split level 37: [/input-8, 1863] 
split level 38: [/input-8, 1921] 
split level 39: [/input-8, 870] 
split level 40: [/input-8, 94] 
split level 41: [/input-8, 86] 
split level 42: [/input, 1898] 
split level 43: [/input, 1148] 
split level 44: [/input-8, 1741] 
split level 45: [/input, 1378] 
split level 46: [/input-8, 1666] 
split level 47: [/input, 1179] 
split level 48: [/input-8, 1329] 
split level 49: [/input-8, 883] 
split level 50: [/input, 989] 
split level 51: [/input, 1431] 
split level 52: [/input, 534] 
split level 53: [/input, 2588] 
split level 54: [/input, 581] 
split level 55: [/input, 2110] 
split level 56: [/input, 2602] 
split level 57: [/input, 1211] 
split level 58: [/input, 874] 
split level 59: [/input, 1433] 
split level 60: [/input, 566] 
split level 61: [/input, 2025] 
split level 62: [/input, 988] 
split level 63: [/input-8, 41] 
split level 64: [/input, 2502] 
split level 65: [/input-8, 2] 
split level 66: [/input, 2028] 
split level 67: [/input, 2012] 
split level 68: [/input, 2140] 
split level 69: [/input-8, 217] 
split level 70: [/input, 817] 
split level 71: [/input, 1400] 
split level 72: [/input, 2534] 
split level 73: [/input, 37] 
split level 74: [/input, 939] 
split level 75: [/input, 2092] 
split level 76: [/input, 932] 
split level 77: [/input, 1017] 
split level 78: [/input, 1001] 
split level 79: [/input, 1195] 
split level 80: [/input, 909] 
split level 81: [/input-8, 1977] 
split level 82: [/input, 486] 
split level 83: [/input-8, 211] 
split level 84: [/input, 1146] 
split level 85: [/input, 488] 
split level 86: [/input-8, 893] 
split level 87: [/input, 2326] 
split level 88: [/input, 2536] 
split level 89: [/input-8, 1513] 
split level 90: [/input, 1220] 
split level 91: [/input, 1003] 
split level 92: [/input-8, 1303] 
split level 93: [/input, 931] 
split level 94: [/input, 2790] 
split level 95: [/input-8, 1321] 
split level 96: [/input-8, 914] 
split level 97: [/input, 1134] 
split level 98: [/input, 964] 
split level 99: [/input-8, 1982] 
split level 100: [/input, 1915] 
split level 101: [/input, 1447] 
split level 102: [/input, 1019] 
split level 103: [/input, 1002] 
split level 104: [/input, 3992] 
split level 105: [/input, 781] 
split level 106: [/input, 1154] 
split level 107: [/input, 925] 
split level 108: [/input, 489] 
split level 109: [/input, 972] 
split level 110: [/input, 1897] 
split level 111: [/input, 1417] 
split level 112: [/input, 483] 
split level 113: [/input, 725] 
split level 114: [/input, 1108] 
split level 115: [/input, 897] 
split level 116: [/input, 889] 
split level 117: [/input, 468] 
split level 118: [/input, 947] 
split level 119: [/input, 1260] 
split level 120: [/input, 2307] 
split level 121: [/input, 969] 
split level 122: [/input, 3781] 
split level 123: [/input, 980] 
split level 124: [/input-8, 13] 
split level 125: [/input, 910] 
split level 126: [/input, 1095] 
split level 127: [/input, 1004] 
split level 128: [/input, 1463] 
split level 129: [/input, 1188] 
split level 130: [/input, 926] 
split level 131: [/input, 2322] 
split level 132: [/input, 1273] 
split level 133: [/input, 798] 
split level 134: [/input, 1258] 
split level 135: [/input, 986] 
split level 136: [/input, 2590] 
split level 137: [/input, 2042] 
split level 138: [/input, 2029] 
split level 139: [/input, 974] 
split level 140: [/input, 484] 
split level 141: [/input, 1005] 
split level 142: [/input, 854] 
split level 143: [/input, 856] 
split level 144: [/input, 792] 
split level 145: [/input, 1058] 
split level 146: [/input-8, 85] 
split level 147: [/input, 2353] 
split level 148: [/input, 1233] 
split level 149: [/input, 2280] 
split level 150: [/input, 1133] 
split level 151: [/input, 1416] 
split level 152: [/input, 786] 
split level 153: [/input, 963] 
split level 154: [/input, 857] 
split level 155: [/input, 1806] 
split level 156: [/input, 1165] 
split level 157: [/input-8, 862] 
split level 158: [/input, 796] 
split level 159: [/input, 2504] 
split level 160: [/input, 1080] 
split level 161: [/input, 958] 
split level 162: [/input, 481] 
split level 163: [/input-8, 346] 
split level 164: [/input, 979] 
split level 165: [/input-8, 1711] 
split level 166: [/input, 1880] 
split level 167: [/input, 1348] 
split level 168: [/input, 741] 
split level 169: [/input, 601] 
split level 170: [/input, 797] 
split level 171: [/input-8, 1981] 
split level 172: [/input, 630] 
split level 173: [/input, 2173] 
split level 174: [/input, 1114] 
split level 175: [/input, 1810] 
split level 176: [/input, 1020] 
split level 177: [/input, 2234] 
split level 178: [/input, 1057] 
split level 179: [/input, 870] 
split level 180: [/input, 4008] 
split level 181: [/input, 2417] 
split level 182: [/input, 1850] 
split level 183: [/input, 1359] 
split level 184: [/input, 286] 
split level 185: [/input, 1994] 
split level 186: [/input, 894] 
split level 187: [/input, 1205] 
split level 188: [/input, 1073] 
split level 189: [/input, 3769] 
split level 190: [/input, 296] 
split level 191: [/input, 1021] 
split level 192: [/input, 1242] 
split level 193: [/input, 1317] 
split level 194: [/input, 1202] 
split level 195: [/input, 1354] 
split level 196: [/input, 3639] 
split level 197: [/input-8, 1257] 
split level 198: [/input, 3643] 
split level 199: [/input, 1047] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04660987854003906
10 lb beta sum: 0.0, worst -0.04660916328430176
Time: prepare 0.0113    bound 0.1179    transfer 0.0030    finalize 0.0040    func 0.1390    
Accumulated time: func 0.2003    prepare 0.0216    bound 0.1786    transfer 0.0031    finalize 0.0042    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01850510) min lb tensor(-0.04660797)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.011219024658203125 
BICCOS Cumulative time: 0.011219024658203125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04421 (1), -0.04421 (1), -0.04406 (1), -0.04405 (1), -0.04394 (1), -0.04386 (1), -0.04382 (1), -0.04364 (1), -0.04358 (1), -0.04336 (1), -0.04331 (1), -0.04320 (1), -0.04320 (1), -0.04307 (1), -0.04302 (1), -0.04283 (1), -0.04282 (1), -0.04276 (1), -0.04271 (1), -0.04255 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5531    set_bounds 0.0109    solve 0.1391    add 0.2017    
Accumulated time: pickout 0.0004    decision 0.5531    set_bounds 0.0109    solve 0.1391    add 0.2017    
Current (lb-rhs): -0.044207096099853516
50 domains visited
Cumulative time: 1.000948429107666

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] 
split level 1: [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] 
split level 2: [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] 
split level 3: [/input-8, 1116] [/input-8, 1116] [/input-8, 1139] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 217] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04303169250488281
10 lb beta sum: 0.0, worst -0.043203115463256836
Time: prepare 0.0119    bound 0.1107    transfer 0.0013    finalize 0.0024    func 0.1290    
Accumulated time: func 0.3293    prepare 0.0338    bound 0.2893    transfer 0.0045    finalize 0.0066    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01407003) min lb tensor(-0.04301333)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.01234745979309082 
BICCOS Cumulative time: 0.023566484451293945
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02643 (2), -0.02629 (2), -0.02621 (2), -0.02618 (2), -0.02596 (2), -0.02584 (2), -0.02581 (2), -0.02576 (2), -0.02566 (2), -0.02566 (2), -0.02560 (2), -0.02557 (2), -0.02554 (2), -0.02519 (2), -0.02486 (2), -0.02482 (2), -0.02482 (2), -0.02479 (2), -0.02470 (2), -0.02463 (2), 
Length of domains: 50
Time: pickout 0.0080    decision 0.0231    set_bounds 0.0146    solve 0.1291    add 0.2042    
Accumulated time: pickout 0.0084    decision 0.5762    set_bounds 0.0254    solve 0.2682    add 0.4059    
Current (lb-rhs): -0.02642536163330078
100 domains visited
Cumulative time: 1.39924955368042

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 61] [/input-8, 653] [/input-8, 61] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 61] [/input-8, 653] 
split level 1: [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 61] [/input-8, 61] [/input-8, 61] [/input-8, 61] [/input-8, 1139] [/input-8, 1139] 
split level 2: [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1116] [/input-8, 1116] 
split level 3: [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] [/input-8, 1139] [/input-8, 1116] [/input, 2025] [/input, 2025] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025249719619750977
10 lb beta sum: 0.0, worst -0.02519059181213379
Time: prepare 0.0115    bound 0.1100    transfer 0.0013    finalize 0.0028    func 0.1281    
Accumulated time: func 0.4574    prepare 0.0456    bound 0.3993    transfer 0.0058    finalize 0.0094    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00966406) min lb tensor(-0.02515745)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.011751413345336914 
BICCOS Cumulative time: 0.03531789779663086
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01277 (3), -0.01272 (3), -0.01271 (3), -0.01268 (3), -0.01265 (3), -0.01264 (3), -0.01259 (3), -0.01249 (3), -0.01245 (3), -0.01240 (3), -0.01239 (3), -0.01236 (3), -0.01232 (3), -0.01231 (3), -0.01229 (3), -0.01228 (3), -0.01228 (3), -0.01228 (3), -0.01225 (3), -0.01222 (3), 
Length of domains: 50
Time: pickout 0.0079    decision 0.0230    set_bounds 0.0153    solve 0.1282    add 0.1933    
Accumulated time: pickout 0.0163    decision 0.5992    set_bounds 0.0407    solve 0.3964    add 0.5992    
Current (lb-rhs): -0.012768745422363281
150 domains visited
Cumulative time: 1.7861437797546387

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1102] [/input-8, 61] [/input-8, 653] [/input-8, 1102] [/input-8, 61] [/input-8, 1102] [/input-8, 1102] [/input-8, 653] [/input-8, 653] [/input-8, 1102] 
split level 1: [/input-8, 1525] [/input-8, 1525] [/input-8, 1116] [/input-8, 1525] [/input-8, 1525] [/input-8, 61] [/input-8, 61] [/input-8, 1102] [/input-8, 61] [/input-8, 61] 
split level 2: [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] [/input-8, 1116] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] 
split level 3: [/input-8, 1116] [/input-8, 1116] [/input, 2406] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.011640548706054688
10 lb beta sum: 0.0, worst -0.011480569839477539
Time: prepare 0.0116    bound 0.1113    transfer 0.0063    finalize 0.0027    func 0.1344    
Accumulated time: func 0.5918    prepare 0.0574    bound 0.5107    transfer 0.0121    finalize 0.0120    
all_split False
======================Cut inference begins======================
max lb tensor(0.00109720) min lb tensor(-0.01126194)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.01276707649230957 
BICCOS Cumulative time: 0.04808497428894043
Preprocessing time: 0.011519908905029297 Inference time: 0.00010180473327636719 Add cuts time: 0.00018215179443359375 Cut analysis time: 0.0009632110595703125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00715 (4), -0.00715 (4), -0.00713 (4), -0.00710 (4), -0.00706 (4), -0.00705 (4), -0.00705 (4), -0.00702 (4), -0.00701 (4), -0.00699 (4), -0.00698 (4), -0.00695 (4), -0.00695 (4), -0.00694 (4), -0.00694 (4), -0.00689 (4), -0.00688 (4), -0.00683 (4), -0.00681 (4), -0.00679 (4), 
Length of domains: 50
Time: pickout 0.0116    decision 0.0207    set_bounds 0.0161    solve 0.1345    add 0.4179    
Accumulated time: pickout 0.0279    decision 0.6199    set_bounds 0.0568    solve 0.5309    add 1.0171    
Current (lb-rhs): -0.007153987884521484
200 domains visited
Cumulative time: 2.400114059448242

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 956] [/input-8, 653] [/input-8, 653] [/input-8, 956] [/input-8, 61] [/input-8, 1102] [/input-8, 653] [/input-8, 61] [/input-8, 61] [/input-8, 653] 
split level 1: [/input-8, 1525] [/input-8, 1525] [/input-8, 956] [/input-8, 1525] [/input-8, 1116] [/input-8, 1525] [/input-8, 956] [/input-8, 956] [/input-8, 956] [/input-8, 956] 
split level 2: [/input-8, 1116] [/input-8, 1139] [/input-8, 1525] [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] 
split level 3: [/input-8, 1139] [/input, 2406] [/input-8, 1139] [/input-8, 1116] [/input, 2406] [/input-8, 1139] [/input-8, 1116] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.006270885467529297
10 lb beta sum: 0.0, worst -0.006021261215209961
Time: prepare 0.0061    bound 0.1515    transfer 0.0013    finalize 0.0022    func 0.1638    
Accumulated time: func 0.7556    prepare 0.0638    bound 0.6621    transfer 0.0133    finalize 0.0142    
all_split False
======================Cut inference begins======================
max lb tensor(0.00267506) min lb tensor(-0.00584102)
Number of Verified Splits: 10 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.013775825500488281 
BICCOS Cumulative time: 0.06186079978942871
Preprocessing time: 0.011640787124633789 Inference time: 0.0005786418914794922 Add cuts time: 0.0004100799560546875 Cut analysis time: 0.0011463165283203125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00148 (5), -0.00146 (5), -0.00145 (5), -0.00145 (5), -0.00143 (5), -0.00142 (5), -0.00142 (5), -0.00141 (5), -0.00141 (5), -0.00139 (5), -0.00138 (5), -0.00137 (5), -0.00135 (5), -0.00135 (5), -0.00133 (5), -0.00129 (5), -0.00128 (5), -0.00128 (5), -0.00127 (5), -0.00127 (5), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0217    set_bounds 0.0163    solve 0.1639    add 0.0943    
Accumulated time: pickout 0.0290    decision 0.6416    set_bounds 0.0731    solve 0.6948    add 1.1114    
Current (lb-rhs): -0.0014815330505371094
250 domains visited
Cumulative time: 2.7115418910980225

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([8.32184988e-10, 1.68948038e-03, 2.37922533e-03]), tensor([0, 1, 2])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102,  956]), tensor([-1., -1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([8.32184988e-10, 1.68948038e-03, 4.36811289e-03, 5.91592630e-03,
        5.71517786e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102,  956]), tensor([-1., -1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([8.32184988e-10, 1.68948038e-03, 4.36811289e-03, 5.91592630e-03,
        1.60937174e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([8.32184988e-10, 1.68948038e-03, 4.36811289e-03, 1.49683817e-03]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102,  956]), tensor([-1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([8.32184988e-10, 4.43606218e-03, 2.41808756e-03, 5.28006395e-03,
        5.85369905e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102,  956]), tensor([-1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([8.32184988e-10, 4.43606218e-03, 2.41808756e-03, 5.28006395e-03,
        1.40361651e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([8.32184988e-10, 4.43606218e-03, 2.41808756e-03, 1.56597956e-03]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102,  956]), tensor([-1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([8.32184988e-10, 4.43606218e-03, 4.40697512e-03, 5.29556116e-03,
        5.20686945e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102,  956]), tensor([-1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([8.32184988e-10, 4.43606218e-03, 4.40697512e-03, 5.29556116e-03,
        1.46465166e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([8.32184988e-10, 4.43606218e-03, 4.40697512e-03, 1.57813891e-03]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316]), tensor([1.]), tensor([0]), tensor([8.32184988e-10]), tensor([0])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  11
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.046408891677856445
10 lb beta sum: 0.0003580936754588038, worst -0.04640817642211914
Time: prepare 0.0005    bound 0.1475    transfer 0.0002    finalize 0.0002    func 0.1485    
Accumulated time: func 0.9042    prepare 0.0643    bound 0.8096    transfer 0.0136    finalize 0.0145    
After pruning, left:  11

Back to Regular BaB

BaB round 1
batch: 11
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1102] [/input-8, 226] [/input-8, 226] [/input-8, 956] [/input-8, 226] [/input-8, 226] [/input-8, 956] [/input-8, 226] [/input-8, 226] [/input-8, 956] 
split level 1: [/input-8, 956] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] 
split level 2: [/input-8, 1525] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] 
split level 3: [/input-8, 1139] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] 
split level 4: [/input-8, 1116] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00010545206896495074, worst -0.03746938705444336
10 lb beta sum: 0.00010545206896495074, worst -0.03745579719543457
Time: prepare 0.0142    bound 0.1496    transfer 0.0031    finalize 0.0044    func 0.1738    
Accumulated time: func 1.0779    prepare 0.0788    bound 0.9592    transfer 0.0167    finalize 0.0189    
all_split False
======================Cut inference begins======================
max lb tensor(0.01086765) min lb tensor(-0.03744984)
Number of Verified Splits: 254 of 352
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.00014613829262088984, worst -0.03180956840515137
10 lb beta sum: 8.279457688331604e-05, worst -0.0075664520263671875
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 4-6: 8
#cuts 7-9: 24
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.32180047035217285 
BICCOS Cumulative time: 0.38366127014160156
Preprocessing time: 0.008959293365478516 Inference time: 0.30008935928344727 Add cuts time: 0.010598182678222656 Cut analysis time: 0.002153635025024414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03745 (5), -0.03743 (5), -0.03705 (5), -0.03704 (5), -0.03671 (5), -0.03670 (5), -0.03633 (5), -0.03631 (5), -0.03568 (5), -0.03566 (5), -0.03524 (5), -0.03522 (5), -0.03471 (5), -0.03471 (5), -0.03469 (5), -0.03468 (5), -0.03431 (5), -0.03429 (5), -0.03428 (5), -0.03427 (5), 
Length of domains: 98
Time: pickout 0.0007    decision 0.0176    set_bounds 0.0219    solve 0.1739    add 0.0087    
Accumulated time: pickout 0.0297    decision 0.6591    set_bounds 0.0950    solve 0.8687    add 1.1201    
Current (lb-rhs): -0.03744983673095703
348 domains visited
Cumulative time: 3.4339451789855957

BaB round 2
batch: 98
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1102] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 1102] [/input-8, 226] [/input-8, 1102] [/input-8, 226] [/input-8, 226] [/input-8, 226] 
split level 1: [/input-8, 956] [/input-8, 213] [/input-8, 698] [/input-8, 9] [/input-8, 956] [/input-8, 213] [/input-8, 956] [/input-8, 213] [/input-8, 698] [/input-8, 9] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03559374809265137
10 lb beta sum: 0.0, worst -0.03559303283691406
Time: prepare 0.0057    bound 0.1596    transfer 0.0035    finalize 0.0020    func 0.1734    
Accumulated time: func 1.2513    prepare 0.0847    bound 1.1189    transfer 0.0201    finalize 0.0209    
all_split False
======================Cut inference begins======================
max lb tensor(0.00429034) min lb tensor(-0.03559160)
Number of Verified Splits: 220 of 392
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 4
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.03701901435852051 
BICCOS Cumulative time: 0.42068028450012207
Preprocessing time: 0.011436700820922852 Inference time: 0.022269725799560547 Add cuts time: 0.002766132354736328 Cut analysis time: 0.0005464553833007812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03559 (7), -0.03557 (7), -0.03522 (7), -0.03520 (7), -0.03479 (7), -0.03477 (7), -0.03443 (7), -0.03441 (7), -0.03377 (7), -0.03375 (7), -0.03335 (7), -0.03333 (7), -0.03277 (7), -0.03275 (7), -0.03273 (7), -0.03273 (7), -0.03240 (7), -0.03236 (7), -0.03235 (7), -0.03233 (7), 
Length of domains: 172
Time: pickout 0.0022    decision 0.0218    set_bounds 0.0190    solve 0.1735    add 0.0658    
Accumulated time: pickout 0.0319    decision 0.6809    set_bounds 0.1140    solve 1.0422    add 1.1859    
Current (lb-rhs): -0.03559160232543945
520 domains visited
Cumulative time: 3.761399269104004

BaB round 3
batch: 172
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 1099] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 1099] [/input-8, 226] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03432345390319824
10 lb beta sum: 0.001720706350170076, worst -0.03432488441467285
Time: prepare 0.0051    bound 0.1628    transfer 0.0012    finalize 0.0021    func 0.1735    
Accumulated time: func 1.4249    prepare 0.0901    bound 1.2817    transfer 0.0214    finalize 0.0230    
all_split False
======================Cut inference begins======================
max lb tensor(0.00418115) min lb tensor(-0.03432274)
Number of Verified Splits: 66 of 344
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 1
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.01826024055480957 
BICCOS Cumulative time: 0.43894052505493164
Preprocessing time: 0.010041236877441406 Inference time: 0.0065059661865234375 Add cuts time: 0.0007419586181640625 Cut analysis time: 0.0009710788726806641
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03432 (8), -0.03430 (8), -0.03395 (8), -0.03393 (8), -0.03352 (8), -0.03350 (8), -0.03316 (8), -0.03314 (8), -0.03250 (8), -0.03248 (8), -0.03208 (8), -0.03206 (8), -0.03174 (8), -0.03174 (8), -0.03149 (8), -0.03148 (8), -0.03146 (8), -0.03145 (8), -0.03137 (8), -0.03137 (8), 
Length of domains: 278
Time: pickout 0.0148    decision 0.0225    set_bounds 0.0151    solve 0.1736    add 0.0327    
Accumulated time: pickout 0.0467    decision 0.7034    set_bounds 0.1291    solve 1.2158    add 1.2187    
Current (lb-rhs): -0.03432273864746094
798 domains visited
Cumulative time: 4.0417022705078125

BaB round 4
batch: 278
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 9] [/input-8, 9] [/input-8, 213] [/input-8, 1325] [/input-8, 213] [/input-8, 9] [/input-8, 9] [/input-8, 213] [/input-8, 1325] [/input-8, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03325986862182617
10 lb beta sum: 0.011269890703260899, worst -0.03325653076171875
Time: prepare 0.0082    bound 0.1570    transfer 0.0049    finalize 0.0037    func 0.1773    
Accumulated time: func 1.6021    prepare 0.0984    bound 1.4386    transfer 0.0263    finalize 0.0266    
all_split False
======================Cut inference begins======================
max lb tensor(0.00181127) min lb tensor(-0.03325295)
Number of Verified Splits: 25 of 556
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 1
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.019819259643554688 
BICCOS Cumulative time: 0.45875978469848633
Preprocessing time: 0.015635013580322266 Inference time: 0.0026216506958007812 Add cuts time: 0.00044345855712890625 Cut analysis time: 0.0011191368103027344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03325 (9), -0.03287 (9), -0.03276 (9), -0.03246 (9), -0.03241 (9), -0.03238 (9), -0.03209 (9), -0.03203 (9), -0.03198 (9), -0.03196 (9), -0.03161 (9), -0.03160 (9), -0.03160 (9), -0.03125 (9), -0.03120 (9), -0.03094 (9), -0.03093 (9), -0.03083 (9), -0.03064 (9), -0.03060 (9), 
Length of domains: 531
Time: pickout 0.0038    decision 0.0286    set_bounds 0.0240    solve 0.1774    add 0.0038    
Accumulated time: pickout 0.0505    decision 0.7321    set_bounds 0.1531    solve 1.3933    add 1.2224    
Current (lb-rhs): -0.03325295448303223
1329 domains visited
Cumulative time: 4.30066442489624

BaB round 5
batch: 531
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1099] [/input-8, 1099] [/input-8, 9] [/input-8, 9] [/input-8, 1099] [/input-8, 1099] [/input-8, 9] [/input, 547] [/input-8, 9] [/input-8, 1099] 
cut re-enabled after branching node selection
0 lb beta sum: 0.008598391897976398, worst -0.03272676467895508
10 lb beta sum: 0.008717418648302555, worst -0.03531238064169884
Time: prepare 0.0434    bound 0.1603    transfer 0.0115    finalize 0.0067    func 0.2288    
Accumulated time: func 1.8310    prepare 0.1421    bound 1.5989    transfer 0.0378    finalize 0.0333    
all_split False
======================Cut inference begins======================
max lb tensor(0.00321813) min lb tensor(-0.03271580)
Number of Verified Splits: 35 of 1062
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 1
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.03598308563232422 
BICCOS Cumulative time: 0.49474287033081055
Preprocessing time: 0.03152132034301758 Inference time: 0.003535032272338867 Add cuts time: 0.0004286766052246094 Cut analysis time: 0.0004980564117431641
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03272 (10), -0.03233 (10), -0.03222 (10), -0.03192 (10), -0.03188 (10), -0.03184 (10), -0.03156 (10), -0.03149 (10), -0.03144 (10), -0.03142 (10), -0.03108 (10), -0.03106 (10), -0.03106 (10), -0.03071 (10), -0.03064 (10), -0.03029 (10), -0.02989 (10), -0.02987 (10), -0.02986 (10), -0.02985 (10), 
Length of domains: 1027
Time: pickout 0.0077    decision 0.0409    set_bounds 0.0443    solve 0.2301    add 0.0069    
Accumulated time: pickout 0.0582    decision 0.7730    set_bounds 0.1974    solve 1.6234    add 1.2293    
Current (lb-rhs): -0.032715797424316406
2356 domains visited
Cumulative time: 4.6678526401519775

BaB round 6
batch: 1027
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1325] [/input-8, 1325] [/input-8, 1099] [/input-8, 1099] [/input-8, 1325] [/input-8, 1325] [/input-8, 1099] [/input-8, 1099] [/input-8, 1325] [/input-8, 1325] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0008209956577047706, worst -0.03182268142700195
10 lb beta sum: 0.0010624469723552465, worst -0.03181958198547363
Time: prepare 0.0856    bound 0.2182    transfer 0.0135    finalize 0.0115    func 0.3426    
Accumulated time: func 2.1736    prepare 0.2279    bound 1.8171    transfer 0.0513    finalize 0.0448    
all_split False
======================Cut inference begins======================
max lb tensor(0.00171895) min lb tensor(-0.03181958)
Number of Verified Splits: 6 of 2054
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 1
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.06123661994934082 
BICCOS Cumulative time: 0.5559794902801514
Preprocessing time: 0.059816598892211914 Inference time: 0.0006601810455322266 Add cuts time: 0.00027441978454589844 Cut analysis time: 0.00048542022705078125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03182 (11), -0.03133 (11), -0.03115 (11), -0.03114 (11), -0.03107 (11), -0.03098 (11), -0.03085 (11), -0.03081 (11), -0.03058 (11), -0.03053 (11), -0.03035 (11), -0.03034 (11), -0.03024 (11), -0.03006 (11), -0.03002 (11), -0.02988 (11), -0.02986 (11), -0.02980 (11), -0.02957 (11), -0.02955 (11), 
Length of domains: 2048
Time: pickout 0.0104    decision 0.3206    set_bounds 0.0867    solve 0.3430    add 0.0273    
Accumulated time: pickout 0.0686    decision 1.0936    set_bounds 0.2841    solve 1.9664    add 1.2566    
Current (lb-rhs): -0.03181958198547363
4404 domains visited
Cumulative time: 5.518907308578491

BaB round 7
batch: 2048
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 547] [/input, 547] [/input-8, 1325] [/input-8, 1325] [/input, 547] [/input, 547] [/input-8, 1325] [/input-8, 1325] [/input, 547] [/input, 547] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00012753505143336952, worst -0.03165316581726074
10 lb beta sum: 0.0003986518713645637, worst -0.03165268898010254
Time: prepare 0.1798    bound 0.3647    transfer 0.0249    finalize 0.0214    func 0.6178    
Accumulated time: func 2.7914    prepare 0.4079    bound 2.1817    transfer 0.0762    finalize 0.0662    
all_split False
======================Cut inference begins======================
max lb tensor(0.00278163) min lb tensor(-0.03165221)
Number of Verified Splits: 52 of 4096
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 4
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 0.13440966606140137 
BICCOS Cumulative time: 0.6903891563415527
Preprocessing time: 0.12532448768615723 Inference time: 0.007082700729370117 Add cuts time: 0.0011186599731445312 Cut analysis time: 0.0008838176727294922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03165 (12), -0.03117 (12), -0.03090 (12), -0.03083 (12), -0.03063 (12), -0.03062 (12), -0.03049 (12), -0.03043 (12), -0.03033 (12), -0.03030 (12), -0.03008 (12), -0.02987 (12), -0.02985 (12), -0.02973 (12), -0.02956 (12), -0.02954 (12), -0.02937 (12), -0.02933 (12), -0.02904 (12), -0.02903 (12), 
Length of domains: 4044
Time: pickout 0.0274    decision 0.1266    set_bounds 0.2965    solve 0.6185    add 0.1334    
Accumulated time: pickout 0.0960    decision 1.2202    set_bounds 0.5806    solve 2.5848    add 1.3901    
Current (lb-rhs): -0.031652212142944336
8448 domains visited
Cumulative time: 6.867139101028442

BaB round 8
batch: 4044
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 213] [/input-8, 213] [/input, 547] [/input, 547] [/input-8, 213] [/input-8, 213] [/input, 547] [/input, 547] [/input-8, 213] [/input-8, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.030465364456176758
10 lb beta sum: 0.00024703226517885923, worst -0.030463218688964844
Time: prepare 0.1648    bound 0.6568    transfer 0.0408    finalize 0.0421    func 0.9581    
Accumulated time: func 3.7494    prepare 0.5730    bound 2.8386    transfer 0.1170    finalize 0.1083    
all_split False
======================Cut inference begins======================
max lb tensor(0.00338507) min lb tensor(-0.03046227)
Number of Verified Splits: 301 of 8088
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 1
#cuts 4-6: 4
#cuts 7-9: 28
#cuts >= 20: 0
BICCOS time: 0.30869388580322266 
BICCOS Cumulative time: 0.9990830421447754
Preprocessing time: 0.2548685073852539 Inference time: 0.04649043083190918 Add cuts time: 0.0048983097076416016 Cut analysis time: 0.0024366378784179688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03046 (13), -0.03045 (13), -0.03016 (13), -0.03013 (13), -0.03009 (13), -0.03007 (13), -0.02979 (13), -0.02975 (13), -0.02969 (13), -0.02968 (13), -0.02939 (13), -0.02937 (13), -0.02934 (13), -0.02933 (13), -0.02930 (13), -0.02929 (13), -0.02905 (13), -0.02901 (13), -0.02900 (13), -0.02895 (13), 
Length of domains: 7787
Time: pickout 0.0464    decision 0.2391    set_bounds 0.4501    solve 0.9605    add 0.0495    
Accumulated time: pickout 0.1424    decision 1.4593    set_bounds 1.0306    solve 3.5454    add 1.4396    
Current (lb-rhs): -0.030462265014648438
16235 domains visited
Cumulative time: 8.932871103286743

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1] [/input-8, 1] [/input-8, 698] [/input-8, 698] [/input-8, 1] [/input-8, 1] [/input-8, 698] [/input-8, 698] [/input-8, 1] [/input-8, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029367685317993164
10 lb beta sum: 0.00026885297847911716, worst -0.029367685317993164
Time: prepare 0.1754    bound 0.6697    transfer 0.0407    finalize 0.2375    func 1.1782    
Accumulated time: func 4.9276    prepare 0.7486    bound 3.5083    transfer 0.1578    finalize 0.3458    
all_split False
======================Cut inference begins======================
max lb tensor(0.00343013) min lb tensor(-0.02936697)
Number of Verified Splits: 340 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 48.
#cuts 1-3: 1
#cuts 4-6: 5
#cuts 7-9: 41
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.32930994033813477 
BICCOS Cumulative time: 1.3283929824829102
Preprocessing time: 0.25619077682495117 Inference time: 0.061630964279174805 Add cuts time: 0.008374452590942383 Cut analysis time: 0.0031137466430664062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02979 (13), -0.02937 (14), -0.02936 (14), -0.02907 (14), -0.02905 (13), -0.02903 (14), -0.02902 (14), -0.02901 (14), -0.02894 (13), -0.02868 (14), -0.02864 (13), -0.02864 (13), -0.02860 (14), -0.02859 (14), -0.02836 (14), -0.02835 (14), -0.02830 (14), -0.02828 (14), -0.02827 (14), -0.02826 (14), 
Length of domains: 11543
Time: pickout 0.0530    decision 0.4485    set_bounds 0.3512    solve 1.1809    add 0.0547    
Accumulated time: pickout 0.1953    decision 1.9077    set_bounds 1.3818    solve 4.7263    add 1.4943    
Current (lb-rhs): -0.029788494110107422
24087 domains visited
current_vram/total_varm: 13.9GB/99.9GB, batch_size increase to 8192
Cumulative time: 11.365190982818604

BaB round 10
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input, 547] [/input, 547] [/input-8, 698] [/input-8, 698] [/input, 547] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028751373291015625
10 lb beta sum: 0.00027166795916855335, worst -0.02875065803527832
Time: prepare 0.6239    bound 1.2841    transfer 0.0942    finalize 0.1050    func 2.2153    
Accumulated time: func 7.1429    prepare 1.3728    bound 4.7924    transfer 0.2520    finalize 0.4508    
all_split False
======================Cut inference begins======================
max lb tensor(0.00357962) min lb tensor(-0.02874947)
Number of Verified Splits: 1034 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 82.
#cuts 1-3: 1
#cuts 4-6: 6
#cuts 7-9: 73
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.7450306415557861 
BICCOS Cumulative time: 2.0734236240386963
Preprocessing time: 0.5380585193634033 Inference time: 0.1779639720916748 Add cuts time: 0.023914813995361328 Cut analysis time: 0.00509333610534668
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02875 (15), -0.02874 (15), -0.02871 (14), -0.02845 (15), -0.02841 (15), -0.02840 (15), -0.02839 (15), -0.02806 (15), -0.02806 (14), -0.02798 (15), -0.02797 (15), -0.02796 (14), -0.02786 (14), -0.02774 (15), -0.02773 (15), -0.02768 (15), -0.02768 (15), -0.02766 (14), -0.02766 (15), -0.02766 (15), 
Length of domains: 18701
Time: pickout 0.1048    decision 0.4707    set_bounds 0.9621    solve 2.2186    add 0.0597    
Accumulated time: pickout 0.3001    decision 2.3785    set_bounds 2.3439    solve 6.9449    add 1.5539    
Current (lb-rhs): -0.028749465942382812
39437 domains visited
current_vram/total_varm: 22.3GB/99.9GB, batch_size increase to 16384
Cumulative time: 15.958925008773804

BaB round 11
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3815] [/input-8, 1] [/input-8, 1] [/input, 3815] [/input, 3815] [/input-8, 1] [/input-8, 1] [/input, 3815] [/input, 3815] [/input-8, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028098344802856445
10 lb beta sum: 0.00024633778957650065, worst -0.028096914291381836
Time: prepare 0.7186    bound 2.5506    transfer 0.1932    finalize 0.2198    func 3.8922    
Accumulated time: func 11.0351    prepare 2.0918    bound 7.3430    transfer 0.4452    finalize 0.6706    
all_split False
======================Cut inference begins======================
max lb tensor(0.00350118) min lb tensor(-0.02809644)
Number of Verified Splits: 2549 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 162.
#cuts 1-3: 1
#cuts 4-6: 12
#cuts 7-9: 145
#cuts 10-12: 4
#cuts >= 20: 0
BICCOS time: 1.6094927787780762 
BICCOS Cumulative time: 3.6829164028167725
Preprocessing time: 1.076613426208496 Inference time: 0.4469141960144043 Add cuts time: 0.07479143142700195 Cut analysis time: 0.011173725128173828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02810 (15), -0.02789 (16), -0.02774 (15), -0.02773 (15), -0.02760 (16), -0.02759 (16), -0.02755 (16), -0.02754 (16), -0.02753 (16), -0.02744 (15), -0.02742 (15), -0.02735 (15), -0.02735 (15), -0.02733 (15), -0.02733 (15), -0.02720 (16), -0.02713 (16), -0.02708 (16), -0.02704 (15), -0.02703 (15), 
Length of domains: 32536
Time: pickout 0.2177    decision 1.9843    set_bounds 2.1115    solve 4.2637    add 0.1425    
Accumulated time: pickout 0.5178    decision 4.3627    set_bounds 4.4554    solve 11.2085    add 1.6965    
Current (lb-rhs): -0.028096437454223633
69656 domains visited
current_vram/total_varm: 42.2GB/99.9GB, batch_size increase to 32768
Cumulative time: 26.355283975601196

BaB round 12
batch: 32536
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1] [/input-8, 1829] [/input-8, 1829] [/input-8, 1] [/input-8, 1] [/input, 3815] [/input, 3815] [/input-8, 1] [/input-8, 1] [/input-8, 1829] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027243614196777344
10 lb beta sum: 0.00023942893312778324, worst -0.027241230010986328
Time: prepare 1.4293    bound 5.2784    transfer 0.3874    finalize 0.4153    func 7.9346    
Accumulated time: func 18.9697    prepare 3.5214    bound 12.6214    transfer 0.8326    finalize 1.0858    
all_split False
======================Cut inference begins======================
max lb tensor(0.00358528) min lb tensor(-0.02724123)
Number of Verified Splits: 6685 of 65072
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 421.
#cuts 1-3: 1
#cuts 4-6: 15
#cuts 7-9: 368
#cuts 10-12: 37
#cuts >= 20: 0
BICCOS time: 3.827615976333618 
BICCOS Cumulative time: 7.510532379150391
Preprocessing time: 2.230189323425293 Inference time: 1.2071568965911865 Add cuts time: 0.3615574836730957 Cut analysis time: 0.02871227264404297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02724 (16), -0.02689 (17), -0.02688 (16), -0.02659 (17), -0.02659 (17), -0.02658 (16), -0.02655 (16), -0.02655 (17), -0.02654 (17), -0.02653 (17), -0.02650 (16), -0.02649 (16), -0.02648 (16), -0.02647 (16), -0.02638 (16), -0.02629 (16), -0.02619 (16), -0.02619 (17), -0.02616 (16), -0.02614 (16), 
Length of domains: 58387
Time: pickout 0.5532    decision 3.7932    set_bounds 4.3407    solve 8.4653    add 0.2388    
Accumulated time: pickout 1.0710    decision 8.1560    set_bounds 8.7961    solve 19.6739    add 1.9352    
Current (lb-rhs): -0.027241230010986328
128043 domains visited
Cumulative time: 47.723878145217896

BaB round 13
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1829] [/input-8, 62] [/input-8, 62] [/input-8, 1829] [/input-8, 1829] [/input-8, 62] [/input-8, 62] [/input-8, 1829] [/input-8, 1829] [/input-8, 62] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02587747573852539
10 lb beta sum: 0.00021613735589198768, worst -0.04606318473815918
Time: prepare 1.4889    bound 11.3209    transfer 0.3909    finalize 0.4832    func 14.1060    
Accumulated time: func 33.0756    prepare 5.0107    bound 23.9423    transfer 1.2235    finalize 1.5690    
all_split False
======================Cut inference begins======================
max lb tensor(0.00455689) min lb tensor(-0.02587748)
Number of Verified Splits: 7916 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 892.
#cuts 1-3: 1
#cuts 4-6: 20
#cuts 7-9: 708
#cuts 10-12: 163
#cuts >= 20: 0
BICCOS time: 5.100929260253906 
BICCOS Cumulative time: 12.611461639404297
Preprocessing time: 2.2289538383483887 Inference time: 1.5143799781799316 Add cuts time: 1.296938419342041 Cut analysis time: 0.06065702438354492
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02724 (16), -0.02689 (17), -0.02659 (17), -0.02659 (17), -0.02655 (17), -0.02654 (17), -0.02653 (17), -0.02650 (16), -0.02647 (16), -0.02619 (16), -0.02619 (17), -0.02616 (16), -0.02613 (17), -0.02613 (16), -0.02608 (17), -0.02588 (17), -0.02584 (17), -0.02583 (16), -0.02583 (17), -0.02583 (16), 
Length of domains: 83239
Time: pickout 0.4543    decision 3.9691    set_bounds 4.5240    solve 14.8712    add 0.2416    
Accumulated time: pickout 1.5253    decision 12.1250    set_bounds 13.3200    solve 34.5451    add 2.1769    
Current (lb-rhs): -0.027241230010986328
185663 domains visited
Cumulative time: 77.0921082496643

BaB round 14
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1829] [/input-8, 1829] [/input-8, 1670] [/input-8, 1670] [/input-8, 1829] [/input-8, 1829] [/input-8, 1670] [/input-8, 1670] [/input-8, 62] [/input-8, 62] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026262998580932617
10 lb beta sum: 0.0002777879126369953, worst -0.049899108707904816
Time: prepare 1.4725    bound 12.7278    transfer 0.3772    finalize 0.5113    func 16.4789    
Accumulated time: func 49.5545    prepare 6.4836    bound 36.6701    transfer 1.6007    finalize 2.0803    
all_split False
======================Cut inference begins======================
max lb tensor(0.00790180) min lb tensor(-0.02626300)
Number of Verified Splits: 8846 of 65536
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 892.
#cuts 1-3: 1
#cuts 4-6: 20
#cuts 7-9: 708
#cuts 10-12: 163
#cuts >= 20: 0
BICCOS time: 0.03697538375854492 
BICCOS Cumulative time: 12.648437023162842
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02626 (18), -0.02624 (17), -0.02596 (18), -0.02596 (18), -0.02591 (18), -0.02591 (18), -0.02590 (18), -0.02588 (17), -0.02558 (17), -0.02556 (18), -0.02554 (17), -0.02551 (18), -0.02551 (17), -0.02549 (17), -0.02548 (17), -0.02546 (17), -0.02545 (18), -0.02535 (17), -0.02529 (17), -0.02521 (18), 
Length of domains: 107161
Time: pickout 0.4688    decision 3.7574    set_bounds 4.1648    solve 16.4886    add 0.2049    
Accumulated time: pickout 1.9941    decision 15.8824    set_bounds 17.4848    solve 51.0337    add 2.3818    
Current (lb-rhs): -0.026262998580932617
242353 domains visited
Cumulative time: 102.34818005561829

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3815] [/input, 3815] [/input, 1001] [/input, 1001] [/input-8, 1670] [/input-8, 1670] [/input, 1001] [/input, 1001] [/input-8, 1829] [/input, 1001] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02494978904724121
10 lb beta sum: 0.00019144915859214962, worst -0.025102853775024414
Time: prepare 1.4983    bound 12.7336    transfer 0.3814    finalize 1.5616    func 16.6070    
Accumulated time: func 66.1615    prepare 7.9823    bound 49.4037    transfer 1.9821    finalize 3.6419    
all_split False
======================Cut inference begins======================
max lb tensor(0.00761509) min lb tensor(-0.02494979)
Number of Verified Splits: 10028 of 65536
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 892.
#cuts 1-3: 1
#cuts 4-6: 20
#cuts 7-9: 708
#cuts 10-12: 163
#cuts >= 20: 0
BICCOS time: 0.001622915267944336 
BICCOS Cumulative time: 12.650059938430786
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02626 (18), -0.02624 (17), -0.02596 (18), -0.02596 (18), -0.02591 (18), -0.02591 (18), -0.02590 (18), -0.02588 (17), -0.02556 (18), -0.02554 (17), -0.02551 (18), -0.02551 (17), -0.02549 (17), -0.02548 (17), -0.02546 (17), -0.02545 (18), -0.02535 (17), -0.02529 (17), -0.02521 (18), -0.02520 (18), 
Length of domains: 129901
Time: pickout 0.4525    decision 3.4257    set_bounds 4.1304    solve 16.6177    add 0.1681    
Accumulated time: pickout 2.4466    decision 19.3081    set_bounds 21.6152    solve 67.6514    add 2.5499    
Current (lb-rhs): -0.026262998580932617
297861 domains visited
Cumulative time: 127.33862519264221

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input, 3815] [/input, 3815] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] 
cut re-enabled after branching node selection
0 lb beta sum: 7.536479097325355e-05, worst -0.025250911712646484
10 lb beta sum: 0.0002492699131835252, worst -0.025409698486328125
Time: prepare 2.3360    bound 12.7280    transfer 0.3849    finalize 1.7725    func 17.6557    
Accumulated time: func 83.8172    prepare 10.3187    bound 62.1317    transfer 2.3670    finalize 5.4143    
all_split False
======================Cut inference begins======================
max lb tensor(0.00763297) min lb tensor(-0.02525091)
Number of Verified Splits: 9016 of 65536
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 892.
#cuts 1-3: 1
#cuts 4-6: 20
#cuts 7-9: 708
#cuts 10-12: 163
#cuts >= 20: 0
BICCOS time: 0.033319950103759766 
BICCOS Cumulative time: 12.683379888534546
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02626 (18), -0.02624 (17), -0.02596 (18), -0.02596 (18), -0.02591 (18), -0.02591 (18), -0.02590 (18), -0.02556 (18), -0.02551 (18), -0.02551 (17), -0.02546 (17), -0.02545 (18), -0.02525 (18), -0.02521 (18), -0.02520 (18), -0.02519 (18), -0.02519 (17), -0.02518 (18), -0.02518 (18), -0.02517 (18), 
Length of domains: 153653
Time: pickout 0.4834    decision 3.4419    set_bounds 4.3657    solve 17.6682    add 0.3827    
Accumulated time: pickout 2.9300    decision 22.7500    set_bounds 25.9809    solve 85.3196    add 2.9326    
Current (lb-rhs): -0.026262998580932617
354381 domains visited
Cumulative time: 153.94824743270874

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1017] [/input-8, 54] [/input, 1017] [/input, 1017] [/input-8, 54] [/input, 1017] [/input-8, 62] [/input-8, 1829] [/input, 1017] [/input, 1001] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0001002795688691549, worst -0.025606393814086914
10 lb beta sum: 0.00025491201085969806, worst -0.02564096450805664
Time: prepare 3.2635    bound 12.7282    transfer 0.3793    finalize 0.5064    func 17.3253    
Accumulated time: func 101.1426    prepare 13.5826    bound 74.8599    transfer 2.7463    finalize 5.9207    
all_split False
======================Cut inference begins======================
max lb tensor(0.00803208) min lb tensor(-0.02560639)
Number of Verified Splits: 8804 of 65536
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 892.
#cuts 1-3: 1
#cuts 4-6: 20
#cuts 7-9: 708
#cuts 10-12: 163
#cuts >= 20: 0
BICCOS time: 0.03425168991088867 
BICCOS Cumulative time: 12.717631578445435
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02626 (18), -0.02596 (18), -0.02591 (18), -0.02591 (18), -0.02590 (18), -0.02561 (18), -0.02556 (18), -0.02551 (18), -0.02545 (18), -0.02531 (19), -0.02525 (18), -0.02521 (18), -0.02519 (18), -0.02518 (18), -0.02518 (18), -0.02517 (18), -0.02517 (18), -0.02495 (18), -0.02491 (18), -0.02487 (18), 
Length of domains: 177617
Time: pickout 0.4690    decision 3.4216    set_bounds 4.5797    solve 17.3416    add 0.2372    
Accumulated time: pickout 3.3991    decision 26.1716    set_bounds 30.5606    solve 102.6612    add 3.1698    
Current (lb-rhs): -0.026262998580932617
411113 domains visited
Cumulative time: 180.25660395622253

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 62] [/input-8, 62] [/input-8, 1670] [/input-8, 1670] [/input-8, 62] [/input-8, 62] [/input-8, 1670] [/input-8, 1670] [/input-8, 62] [/input-8, 62] 
cut re-enabled after branching node selection
0 lb beta sum: 8.044305286603048e-05, worst -0.02561163902282715
10 lb beta sum: 0.00020984986622352153, worst -0.02561354637145996
Time: prepare 3.4296    bound 12.7397    transfer 0.3564    finalize 2.4671    func 19.4613    
Accumulated time: func 120.6039    prepare 17.0126    bound 87.5997    transfer 3.1027    finalize 8.3879    
all_split False
======================Cut inference begins======================
max lb tensor(0.00851154) min lb tensor(-0.02561164)
Number of Verified Splits: 11412 of 65536
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 892.
#cuts 1-3: 1
#cuts 4-6: 20
#cuts 7-9: 708
#cuts 10-12: 163
#cuts >= 20: 0
BICCOS time: 0.03336310386657715 
BICCOS Cumulative time: 12.750994682312012
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02561 (19), -0.02561 (18), -0.02554 (19), -0.02553 (19), -0.02531 (19), -0.02530 (19), -0.02526 (19), -0.02525 (18), -0.02519 (19), -0.02495 (18), -0.02491 (18), -0.02487 (18), -0.02486 (18), -0.02485 (18), -0.02484 (18), -0.02480 (19), -0.02471 (18), -0.02466 (18), -0.02462 (19), -0.02455 (18), 
Length of domains: 198973
Time: pickout 0.4932    decision 4.3938    set_bounds 3.2548    solve 19.4767    add 0.2312    
Accumulated time: pickout 3.8923    decision 30.5654    set_bounds 33.8153    solve 122.1379    add 3.4010    
Current (lb-rhs): -0.02561163902282715
465237 domains visited
Time out!!!!!!!!
Result: unknown in 212.0653 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 179, vnnlib ID: 179 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.81497240, -9.61914158, -4.37678957, -7.16895294, -6.05048847,
         -7.32035542, -8.58375645, -7.87642765, -5.33914280, -9.25911236]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [423]; unstable size 423; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 423] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 423] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 423] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 139] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.06378555, 1.32269335, 4.03046036, 2.94304752, 4.17913628, 5.32646513,
         4.62639809, 2.15443420, 5.73307467]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0727 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 180, vnnlib ID: 180 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.18043327, -9.67250061, -4.03554153, -4.66885376, -3.01946378,
         -4.69520569, -4.94520855, -1.53955245, -9.21621990, -7.85623407]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [585]; unstable size 585; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 585] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 585] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 585] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 188] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.87333870, 7.17064381, 1.94768238, 2.44880009, 1.09218788, 2.47986364,
         2.62327290, 6.51520443, 5.40360308]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0710 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 181, vnnlib ID: 181 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.40926981, -6.67170429, -3.99747753, -5.40308666, -3.89843845,
         -5.54740763, -3.71680188, -6.10181046, -6.27677917, -6.86830425]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [497]; unstable size 497; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 497] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 497] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 497] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 148] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.14809775,  2.07557392,  0.01328361,  1.37565887, -0.08653331,
          1.50969958,  1.94958806,  1.83056569,  2.30023479]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.40926981, -6.67170429, -3.99747753, -5.40308666, -3.89843845,
         -5.54740763, -3.71680188, -6.10181046, -6.27677917, -6.86830425]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.95it/s]100%|██████████| 1/1 [00:00<00:00,  7.94it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.12310123, -6.43147659, -3.69320679, -5.09748745, -3.54227424,
          -5.23913240, -3.53681922, -5.74136019, -5.95448112, -6.58602953]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00545502]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1291 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.484092712402344
alpha/beta optimization time: 1.3040151596069336
initial alpha-crown bounds: tensor([[ 2.17381597,  2.11342812,  0.04474759,  1.40611649, -0.02632654,
          1.54144204,  2.00770712,  1.88426304,  2.33889914]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.026326537132263184
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.47000312805176
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.469961643219
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.4699194431305
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.46989560127258
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.4698691368103
Verifying property 4 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02632654]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.40926981, -6.67170429, -3.99747753, -5.40308666, -3.89843845,
        -5.54740763, -3.71680188, -6.10181046, -6.27677917, -6.86830425],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02632654]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 497
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 146
Node /15 input 0: size torch.Size([100]) unstable 5
-----------------
# of unstable neurons: 648
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001537799835205078
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026325106620788574
10 lb beta sum: 0.0, worst -0.026332497596740723
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0600    transfer 0.0001    finalize 0.0001    func 0.0606    
Accumulated time: func 0.0606    prepare 0.0002    bound 0.0600    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-8, 51] 
split level 2: [/input-8, 1573] 
split level 3: [/input-8, 1099] 
split level 4: [/input-8, 923] 
split level 5: [/input-8, 1445] 
split level 6: [/input-8, 1241] 
split level 7: [/input-8, 1233] 
split level 8: [/input-8, 1236] 
split level 9: [/input-8, 811] 
split level 10: [/input-8, 1186] 
split level 11: [/input-8, 817] 
split level 12: [/input, 2216] 
split level 13: [/input-8, 315] 
split level 14: [/input-8, 354] 
split level 15: [/input-8, 1170] 
split level 16: [/input-8, 918] 
split level 17: [/input-8, 317] 
split level 18: [/input-8, 1249] 
split level 19: [/input-8, 2014] 
split level 20: [/input-8, 83] 
split level 21: [/input-8, 1331] 
split level 22: [/input-8, 930] 
split level 23: [/input-8, 560] 
split level 24: [/input-8, 113] 
split level 25: [/input-8, 748] 
split level 26: [/input-8, 1619] 
split level 27: [/input-8, 1106] 
split level 28: [/input-8, 1438] 
split level 29: [/input-8, 1180] 
split level 30: [/input-8, 41] 
split level 31: [/input-8, 2000] 
split level 32: [/input-8, 1098] 
split level 33: [/input-8, 229] 
split level 34: [/input, 2641] 
split level 35: [/input-8, 818] 
split level 36: [/input-8, 2002] 
split level 37: [/input-8, 819] 
split level 38: [/input-8, 789] 
split level 39: [/input-8, 790] 
split level 40: [/input-8, 812] 
split level 41: [/input-8, 754] 
split level 42: [/input, 2253] 
split level 43: [/input-8, 147] 
split level 44: [/input-8, 820] 
split level 45: [/input, 2217] 
split level 46: [/input, 2219] 
split level 47: [/input, 2238] 
split level 48: [/input-8, 75] 
split level 49: [/input, 2205] 
split level 50: [/input, 1115] 
split level 51: [/input-8, 1620] 
split level 52: [/input-8, 946] 
split level 53: [/input-8, 757] 
split level 54: [/input-8, 1473] 
split level 55: [/input, 753] 
split level 56: [/input, 3477] 
split level 57: [/input, 3672] 
split level 58: [/input-8, 34] 
split level 59: [/input, 1114] 
split level 60: [/input, 1096] 
split level 61: [/input-8, 1613] 
split level 62: [/input, 2662] 
split level 63: [/input, 2765] 
split level 64: [/input, 3214] 
split level 65: [/input-8, 713] 
split level 66: [/input, 2173] 
split level 67: [/input-8, 39] 
split level 68: [/input, 4012] 
split level 69: [/input, 1527] 
split level 70: [/input, 2181] 
split level 71: [/input-8, 1327] 
split level 72: [/input, 2638] 
split level 73: [/input, 1508] 
split level 74: [/input, 1526] 
split level 75: [/input-8, 1994] 
split level 76: [/input, 2163] 
split level 77: [/input, 1690] 
split level 78: [/input-8, 112] 
split level 79: [/input, 4054] 
split level 80: [/input, 1159] 
split level 81: [/input-8, 1158] 
split level 82: [/input, 4039] 
split level 83: [/input, 1468] 
split level 84: [/input, 1082] 
split level 85: [/input, 1515] 
split level 86: [/input, 1865] 
split level 87: [/input, 1897] 
split level 88: [/input-8, 1854] 
split level 89: [/input-8, 1817] 
split level 90: [/input-8, 862] 
split level 91: [/input, 2526] 
split level 92: [/input-8, 1824] 
split level 93: [/input-8, 1818] 
split level 94: [/input, 835] 
split level 95: [/input, 2797] 
split level 96: [/input, 2778] 
split level 97: [/input, 118] 
split level 98: [/input, 200] 
split level 99: [/input, 1702] 
split level 100: [/input-8, 1895] 
split level 101: [/input, 2634] 
split level 102: [/input, 67] 
split level 103: [/input-8, 1855] 
split level 104: [/input, 2419] 
split level 105: [/input, 472] 
split level 106: [/input-8, 145] 
split level 107: [/input, 3943] 
split level 108: [/input, 2527] 
split level 109: [/input, 2757] 
split level 110: [/input, 2739] 
split level 111: [/input, 201] 
split level 112: [/input, 883] 
split level 113: [/input, 2780] 
split level 114: [/input-8, 1621] 
split level 115: [/input-8, 73] 
split level 116: [/input, 77] 
split level 117: [/input, 3741] 
split level 118: [/input-8, 1458] 
split level 119: [/input-8, 692] 
split level 120: [/input, 3681] 
split level 121: [/input, 2355] 
split level 122: [/input, 2793] 
split level 123: [/input, 3146] 
split level 124: [/input, 2517] 
split level 125: [/input, 866] 
split level 126: [/input, 377] 
split level 127: [/input, 716] 
split level 128: [/input, 961] 
split level 129: [/input, 161] 
split level 130: [/input, 437] 
split level 131: [/input, 3928] 
split level 132: [/input, 330] 
split level 133: [/input, 2732] 
split level 134: [/input, 881] 
split level 135: [/input, 614] 
split level 136: [/input, 1107] 
split level 137: [/input, 2460] 
split level 138: [/input, 438] 
split level 139: [/input, 2390] 
split level 140: [/input, 1123] 
split level 141: [/input, 3738] 
split level 142: [/input, 1255] 
split level 143: [/input, 622] 
split level 144: [/input, 1014] 
split level 145: [/input, 2779] 
split level 146: [/input-8, 1814] 
split level 147: [/input, 2403] 
split level 148: [/input, 1137] 
split level 149: [/input, 4051] 
split level 150: [/input, 1271] 
split level 151: [/input-8, 1517] 
split level 152: [/input, 2458] 
split level 153: [/input, 3652] 
split level 154: [/input, 3953] 
split level 155: [/input, 460] 
split level 156: [/input, 2364] 
split level 157: [/input, 942] 
split level 158: [/input, 637] 
split level 159: [/input, 630] 
split level 160: [/input, 683] 
split level 161: [/input, 3972] 
split level 162: [/input, 854] 
split level 163: [/input, 833] 
split level 164: [/input, 1155] 
split level 165: [/input, 3803] 
split level 166: [/input-8, 1872] 
split level 167: [/input, 3637] 
split level 168: [/input, 471] 
split level 169: [/input, 2601] 
split level 170: [/input-8, 74] 
split level 171: [/input, 2433] 
split level 172: [/input, 2672] 
split level 173: [/input, 3896] 
split level 174: [/input, 3833] 
split level 175: [/input, 3417] 
split level 176: [/input, 2619] 
split level 177: [/input, 3802] 
split level 178: [/input, 33] 
split level 179: [/input-8, 1464] 
split level 180: [/input-8, 1839] 
split level 181: [/input, 735] 
split level 182: [/input, 163] 
split level 183: [/input, 490] 
split level 184: [/input, 3714] 
split level 185: [/input, 2425] 
split level 186: [/input, 2491] 
split level 187: [/input, 3959] 
split level 188: [/input, 2791] 
split level 189: [/input, 3944] 
split level 190: [/input, 2503] 
split level 191: [/input, 473] 
split level 192: [/input-8, 683] 
split level 193: [/input-12, 90] 
split level 194: [/input, 2796] 
split level 195: [/input, 3634] 
split level 196: [/input-8, 1813] 
split level 197: [/input, 213] 
split level 198: [/input-8, 1913] 
split level 199: [/input-12, 47] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06558740139007568
10 lb beta sum: 0.0, worst -0.028072237968444824
Time: prepare 0.0119    bound 0.1126    transfer 0.0018    finalize 0.0034    func 0.1324    
Accumulated time: func 0.1930    prepare 0.0225    bound 0.1726    transfer 0.0020    finalize 0.0036    
all_split False
======================Cut inference begins======================
max lb tensor(0.03214395) min lb tensor(-0.02632511)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011257171630859375 
BICCOS Cumulative time: 0.011257171630859375
Preprocessing time: 0.01091456413269043 Inference time: 7.891654968261719e-05 Add cuts time: 4.1961669921875e-05 Cut analysis time: 0.00022172927856445312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02474 (1), -0.02472 (1), -0.02469 (1), -0.02466 (1), -0.02440 (1), -0.02436 (1), -0.02433 (1), -0.02428 (1), -0.02422 (1), -0.02419 (1), -0.02408 (1), -0.02408 (1), -0.02407 (1), -0.02407 (1), -0.02406 (1), -0.02393 (1), -0.02393 (1), -0.02388 (1), -0.02379 (1), -0.02375 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5405    set_bounds 0.0103    solve 0.1325    add 0.2071    
Accumulated time: pickout 0.0004    decision 0.5405    set_bounds 0.0103    solve 0.1325    add 0.2071    
Current (lb-rhs): -0.024744272232055664
50 domains visited
Cumulative time: 0.9749317169189453

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] 
split level 2: [/input-8, 918] [/input-8, 918] [/input-8, 918] [/input-8, 918] [/input-8, 918] [/input-8, 918] [/input, 2217] [/input-8, 918] [/input-8, 918] [/input-8, 918] 
split level 3: [/input-8, 1249] [/input, 4039] [/input-8, 1249] [/input-8, 1249] [/input, 2181] [/input-8, 1249] [/input, 169] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.024008750915527344
10 lb beta sum: 0.14502112567424774, worst -0.02168262004852295
Time: prepare 0.0072    bound 0.1284    transfer 0.0013    finalize 0.0025    func 0.1421    
Accumulated time: func 0.3350    prepare 0.0300    bound 0.3010    transfer 0.0033    finalize 0.0061    
all_split False
======================Cut inference begins======================
max lb tensor(0.05729973) min lb tensor(-0.02167857)
Number of Verified Splits: 57 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.015691041946411133 
BICCOS Cumulative time: 0.026948213577270508
Preprocessing time: 0.011934995651245117 Inference time: 0.0020542144775390625 Add cuts time: 0.0013985633850097656 Cut analysis time: 0.0003032684326171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01403 (2), -0.01395 (2), -0.01375 (2), -0.01369 (2), -0.01360 (2), -0.01355 (2), -0.01352 (2), -0.01342 (2), -0.01333 (2), -0.01319 (2), -0.01307 (2), -0.01305 (2), -0.01303 (2), -0.01286 (2), -0.01270 (2), -0.01266 (2), -0.01247 (2), -0.01243 (2), -0.01217 (2), -0.01152 (2), 
Length of domains: 50
Time: pickout 0.0080    decision 0.0272    set_bounds 0.0137    solve 0.1422    add 0.2058    
Accumulated time: pickout 0.0083    decision 0.5677    set_bounds 0.0240    solve 0.2747    add 0.4129    
Current (lb-rhs): -0.01403014361858368
100 domains visited
Cumulative time: 1.3942921161651611

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-8, 1445] 
split level 1: [/input-8, 918] [/input-8, 1445] [/input-8, 1445] [/input-8, 918] [/input-8, 1445] [/input-8, 918] [/input-8, 1445] [/input-8, 1241] [/input-8, 1445] [/input-8, 918] 
split level 2: [/input-8, 1249] [/input-8, 1249] [/input-8, 918] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 918] [/input-8, 918] [/input-8, 1249] [/input-8, 1249] 
split level 3: [/input, 4039] [/input, 4039] [/input-8, 1249] [/input, 4053] [/input, 4039] [/input, 4039] [/input-8, 1249] [/input-8, 1249] [/input, 4053] [/input, 4039] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.017404556274414062
10 lb beta sum: 0.37241819500923157, worst -0.013922452926635742
Time: prepare 0.0075    bound 0.1434    transfer 0.0013    finalize 0.0028    func 0.1576    
Accumulated time: func 0.4927    prepare 0.0378    bound 0.4444    transfer 0.0046    finalize 0.0089    
all_split False
======================Cut inference begins======================
max lb tensor(0.23542488) min lb tensor(-0.01389146)
Number of Verified Splits: 49 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.015148639678955078 
BICCOS Cumulative time: 0.042096853256225586
Preprocessing time: 0.011667966842651367 Inference time: 0.0017473697662353516 Add cuts time: 0.0014376640319824219 Cut analysis time: 0.0002956390380859375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00514 (3), -0.00513 (3), -0.00512 (3), -0.00512 (3), -0.00509 (3), -0.00509 (3), -0.00509 (3), -0.00507 (3), -0.00506 (3), -0.00487 (3), -0.00486 (3), -0.00483 (3), -0.00481 (3), -0.00478 (3), -0.00478 (3), -0.00476 (3), -0.00460 (3), -0.00460 (3), -0.00457 (3), -0.00457 (3), 
Length of domains: 50
Time: pickout 0.0080    decision 0.0216    set_bounds 0.0139    solve 0.1577    add 0.2131    
Accumulated time: pickout 0.0163    decision 0.5893    set_bounds 0.0379    solve 0.4324    add 0.6260    
Current (lb-rhs): -0.005142629146575928
150 domains visited
Cumulative time: 1.8309502601623535

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-8, 918] [/input-8, 918] [/input-8, 1445] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-8, 1445] [/input-8, 1445] [/input-8, 1241] 
split level 2: [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 918] [/input-8, 918] [/input-8, 1249] [/input-8, 1249] [/input-8, 918] [/input-8, 918] 
split level 3: [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input, 4039] [/input-8, 1249] [/input-8, 1249] [/input, 4039] [/input-8, 1098] [/input-8, 1098] [/input, 4039] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5765376687049866, worst -0.005142867565155029
10 lb beta sum: 0.5849233269691467, worst -0.004938900470733643
Time: prepare 0.0183    bound 0.1455    transfer 0.0014    finalize 0.0025    func 0.1703    
Accumulated time: func 0.6630    prepare 0.0564    bound 0.5899    transfer 0.0060    finalize 0.0114    
all_split False
======================Cut inference begins======================
max lb tensor(0.05939582) min lb tensor(-0.00478452)
Number of Verified Splits: 85 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 3
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.020036935806274414 
BICCOS Cumulative time: 0.0621337890625
Preprocessing time: 0.01191091537475586 Inference time: 0.004587650299072266 Add cuts time: 0.002984285354614258 Cut analysis time: 0.0005540847778320312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00123 (4), -0.00123 (4), -0.00120 (4), -0.00118 (4), -0.00115 (4), -0.00114 (4), -0.00113 (4), -0.00112 (4), -0.00109 (4), -0.00109 (4), -0.00105 (4), -0.00104 (4), -0.00103 (4), -0.00101 (4), -0.00099 (4), -0.00099 (4), -0.00098 (4), -0.00097 (4), -0.00095 (4), -0.00092 (4), 
Length of domains: 50
Time: pickout 0.0081    decision 0.0221    set_bounds 0.0147    solve 0.1704    add 0.2213    
Accumulated time: pickout 0.0244    decision 0.6114    set_bounds 0.0525    solve 0.6028    add 0.8474    
Current (lb-rhs): -0.00122891366481781
200 domains visited
Cumulative time: 2.294710874557495

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input, 968] [/input-8, 1249] [/input-8, 1249] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input, 4053] 
split level 2: [/input, 1000] [/input-8, 1106] [/input-8, 1106] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input, 1000] 
split level 3: [/input, 984] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input, 968] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.006489157676696777
10 lb beta sum: 0.5763214230537415, worst -0.007217928767204285
Time: prepare 0.0080    bound 0.1581    transfer 0.0017    finalize 0.0030    func 0.1735    
Accumulated time: func 0.8364    prepare 0.0646    bound 0.7480    transfer 0.0077    finalize 0.0144    
all_split False
======================Cut inference begins======================
max lb tensor(0.06049967) min lb tensor(-0.00112247)
Number of Verified Splits: 358 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 3
#cuts 4-6: 15
#cuts >= 20: 0
BICCOS time: 0.036882877349853516 
BICCOS Cumulative time: 0.09901666641235352
Preprocessing time: 0.011573314666748047 Inference time: 0.01861429214477539 Add cuts time: 0.0059087276458740234 Cut analysis time: 0.0007865428924560547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00112 (5), -0.00088 (5), -0.00085 (5), -0.00056 (5), -0.00040 (5), -0.00025 (5), -0.00025 (5), -0.00018 (5), -0.00012 (5), -0.00011 (5), -0.00007 (5), 
Length of domains: 11
Time: pickout 0.0080    decision 0.0205    set_bounds 0.0143    solve 0.1735    add 0.4145    
Accumulated time: pickout 0.0325    decision 0.6319    set_bounds 0.0669    solve 0.7763    add 1.2618    
Current (lb-rhs): -0.0011224746704101562
211 domains visited
Cumulative time: 2.9696614742279053

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([811]), tensor([-1.]), tensor([0]), tensor([-1.36608811e+31]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918], [1.0, -1.0, -1.0], [0, 0, 0], [-1.3660881104458424e+31, 0.005671979393810034, 0.0019268111791461706], [0, 1, 2]), '/input-12': (tensor([10]), tensor([-1.]), tensor([0]), tensor([-1.36608811e+31]), tensor([3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918], [1.0, -1.0, -1.0], [0, 0, 0], [-1.3660881104458424e+31, 0.005671979393810034, 0.0019268111791461706], [0, 1, 2]), '/input-12': (tensor([10]), tensor([1.]), tensor([0]), tensor([-1.36609391e+31]), tensor([3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 811, 1445,  918]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([-1.36608811e+31,  5.67197939e-03,  1.64501532e-03]), tensor([0, 1, 2])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918, 1249], [1.0, 1.0, -1.0, -1.0], [0, 0, 0, 0], [-1.3660881104458424e+31, 0.007961632683873177, 0.0022856013383716345, 0.0016749368514865637], [0, 1, 2, 3]), '/input-12': (tensor([10]), tensor([-1.]), tensor([0]), tensor([-1.36608811e+31]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918, 1249], [1.0, 1.0, -1.0, -1.0], [0, 0, 0, 0], [-1.3660881104458424e+31, 0.007961632683873177, 0.0022856013383716345, 0.0016749368514865637], [0, 1, 2, 3]), '/input-12': (tensor([10]), tensor([1.]), tensor([0]), tensor([-1.36608811e+31]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918, 1249], [1.0, 1.0, -1.0, 1.0], [0, 0, 0, 0], [-1.3660881104458424e+31, 0.007961632683873177, 0.0022856013383716345, 0.0013558135833591223], [0, 1, 2, 3]), '/input-12': (tensor([10]), tensor([-1.]), tensor([0]), tensor([1.58433863e-10]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918, 1249], [1.0, 1.0, -1.0, 1.0], [0, 0, 0, 0], [-1.3660881104458424e+31, 0.007961632683873177, 0.0022856013383716345, 0.0013558135833591223], [0, 1, 2, 3]), '/input-12': (tensor([10]), tensor([1.]), tensor([0]), tensor([-1.36609198e+31]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918, 1249], [1.0, 1.0, 1.0, -1.0], [0, 0, 0, 0], [-1.3660881104458424e+31, 0.007961632683873177, 0.001911716302856803, 0.0016813741531223059], [0, 1, 2, 3]), '/input-12': (tensor([10]), tensor([-1.]), tensor([0]), tensor([1.14361076e-10]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918, 1249], [1.0, 1.0, 1.0, -1.0], [0, 0, 0, 0], [-1.3660881104458424e+31, 0.007961632683873177, 0.001911716302856803, 0.0016813741531223059], [0, 1, 2, 3]), '/input-12': (tensor([10]), tensor([1.]), tensor([0]), tensor([0.00102294]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 811, 1445,  918, 1249]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([-1.36608811e+31,  7.96163268e-03,  1.91171630e-03,  1.36499270e-03]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  11
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02623593807220459
10 lb beta sum: 0.46742361783981323, worst -0.022141963243484497
Time: prepare 0.0007    bound 0.1535    transfer 0.0002    finalize 0.0002    func 0.1547    
Accumulated time: func 0.9911    prepare 0.0653    bound 0.9015    transfer 0.0079    finalize 0.0146    
After pruning, left:  7

Back to Regular BaB

BaB round 1
batch: 7
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-8, 1241] [/input-12, 10] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-12, 10] 
split level 1: [/input-8, 1445] [/input-8, 1249] [/input-8, 1241] [/input-8, 1106] [/input-8, 1106] [/input-8, 1106] [/input-8, 1241] 
split level 2: [/input-8, 1241] [/input-8, 1106] [/input-8, 1249] [/input-8, 113] [/input-8, 113] [/input-8, 113] [/input-8, 1106] 
split level 3: [/input-8, 918] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] 
split level 4: [/input-8, 1249] [/input, 4039] [/input, 4039] [/input, 4039] [/input, 4039] [/input, 4039] [/input, 4039] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8452611565589905, worst -0.018687397241592407
10 lb beta sum: 0.8523738384246826, worst -0.01862195134162903
Time: prepare 0.0114    bound 0.1663    transfer 0.0017    finalize 0.0014    func 0.1824    
Accumulated time: func 1.1735    prepare 0.0770    bound 1.0678    transfer 0.0096    finalize 0.0160    
all_split False
======================Cut inference begins======================
max lb tensor(0.05513427) min lb tensor(-0.01860633)
Number of Verified Splits: 186 of 224
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.9393211007118225, worst -0.02082240581512451
10 lb beta sum: 1.1330041885375977, worst -0.020374618470668793
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 3
#cuts 4-6: 20
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.28949427604675293 
BICCOS Cumulative time: 0.38851094245910645
Preprocessing time: 0.006700992584228516 Inference time: 0.2742910385131836 Add cuts time: 0.007378578186035156 Cut analysis time: 0.001123666763305664
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01861 (5), -0.01835 (5), -0.01799 (5), -0.01774 (5), -0.01669 (5), -0.01634 (5), -0.01608 (5), -0.01572 (5), -0.01271 (5), -0.01246 (5), -0.01243 (5), -0.01217 (5), -0.01076 (5), -0.01041 (5), -0.01040 (5), -0.01005 (5), -0.00256 (5), -0.00244 (5), -0.00226 (5), -0.00214 (5), 
Length of domains: 38
Time: pickout 0.0007    decision 0.0198    set_bounds 0.0211    solve 0.1825    add 0.0613    
Accumulated time: pickout 0.0332    decision 0.6517    set_bounds 0.0880    solve 0.9588    add 1.3232    
Current (lb-rhs): -0.018606334924697876
249 domains visited
Cumulative time: 3.8073394298553467

BaB round 2
batch: 38
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 1170] [/input-8, 1170] [/input-8, 1170] [/input-8, 1170] [/input-8, 1170] [/input-8, 1170] [/input-8, 317] 
split level 1: [/input-8, 113] [/input-8, 1438] [/input-8, 113] [/input-8, 1438] [/input-8, 1106] [/input-8, 113] [/input-8, 113] [/input-8, 1106] [/input-8, 113] [/input-8, 1438] 
split level 2: [/input-8, 1098] [/input-8, 113] [/input-8, 1098] [/input-8, 113] [/input-8, 113] [/input-8, 1098] [/input-8, 1098] [/input-8, 113] [/input-8, 1098] [/input-8, 113] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.016555070877075195
10 lb beta sum: 0.1326759308576584, worst -0.01647496223449707
Time: prepare 0.0071    bound 0.1764    transfer 0.0014    finalize 0.0029    func 0.1899    
Accumulated time: func 1.3634    prepare 0.0844    bound 1.2442    transfer 0.0110    finalize 0.0190    
all_split False
======================Cut inference begins======================
max lb tensor(0.00325060) min lb tensor(-0.01646566)
Number of Verified Splits: 172 of 304
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 4
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.02683258056640625 
BICCOS Cumulative time: 0.4153435230255127
Preprocessing time: 0.009948015213012695 Inference time: 0.014286994934082031 Add cuts time: 0.0019745826721191406 Cut analysis time: 0.0006229877471923828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01647 (8), -0.01637 (8), -0.01622 (8), -0.01612 (8), -0.01607 (8), -0.01598 (8), -0.01583 (8), -0.01582 (8), -0.01573 (8), -0.01572 (8), -0.01557 (8), -0.01547 (8), -0.01544 (8), -0.01534 (8), -0.01520 (8), -0.01509 (8), -0.01454 (8), -0.01444 (8), -0.01422 (8), -0.01421 (8), 
Length of domains: 132
Time: pickout 0.0025    decision 0.0179    set_bounds 0.0178    solve 0.1900    add 0.0653    
Accumulated time: pickout 0.0357    decision 0.6696    set_bounds 0.1058    solve 1.1488    add 1.3885    
Current (lb-rhs): -0.01646566390991211
381 domains visited
Cumulative time: 4.135942459106445

BaB round 3
batch: 132
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1170] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1170] [/input-8, 317] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.015864253044128418
10 lb beta sum: 0.2877165973186493, worst -0.015810012817382812
Time: prepare 0.0058    bound 0.1774    transfer 0.0008    finalize 0.0023    func 0.1881    
Accumulated time: func 1.5515    prepare 0.0905    bound 1.4216    transfer 0.0118    finalize 0.0212    
all_split False
======================Cut inference begins======================
max lb tensor(0.00140071) min lb tensor(-0.01580215)
Number of Verified Splits: 8 of 264
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 4
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.011049270629882812 
BICCOS Cumulative time: 0.4263927936553955
Preprocessing time: 0.008796215057373047 Inference time: 0.0007529258728027344 Add cuts time: 0.00043487548828125 Cut analysis time: 0.0010652542114257812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01580 (9), -0.01573 (9), -0.01555 (9), -0.01548 (9), -0.01542 (9), -0.01535 (9), -0.01517 (9), -0.01516 (9), -0.01510 (9), -0.01509 (9), -0.01508 (9), -0.01491 (9), -0.01483 (9), -0.01483 (9), -0.01477 (9), -0.01470 (9), -0.01470 (9), -0.01470 (9), -0.01453 (9), -0.01447 (9), 
Length of domains: 256
Time: pickout 0.0149    decision 0.0198    set_bounds 0.0121    solve 0.1883    add 0.0687    
Accumulated time: pickout 0.0505    decision 0.6894    set_bounds 0.1179    solve 1.3371    add 1.4572    
Current (lb-rhs): -0.01580214500427246
637 domains visited
Cumulative time: 4.45837926864624

BaB round 4
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 317] [/input-8, 1170] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1170] 
cut re-enabled after branching node selection
0 lb beta sum: 0.34947478771209717, worst -0.015343904495239258
10 lb beta sum: 0.350188672542572, worst -0.015326857566833496
Time: prepare 0.0223    bound 0.1681    transfer 0.0015    finalize 0.0030    func 0.1994    
Accumulated time: func 1.7508    prepare 0.1129    bound 1.5897    transfer 0.0133    finalize 0.0242    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00027278) min lb tensor(-0.01531303)
Number of Verified Splits: 0 of 512
No cut inferred: All or none verified.
Total number of valid cuts: 12.
#cuts 1-3: 4
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.016353607177734375 
BICCOS Cumulative time: 0.4427464008331299
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01531 (10), -0.01524 (10), -0.01506 (10), -0.01498 (10), -0.01493 (10), -0.01486 (10), -0.01469 (10), -0.01466 (10), -0.01461 (10), -0.01458 (10), -0.01457 (10), -0.01441 (10), -0.01432 (10), -0.01432 (10), -0.01428 (10), -0.01421 (10), -0.01419 (10), -0.01412 (10), -0.01403 (10), -0.01396 (10), 
Length of domains: 512
Time: pickout 0.0167    decision 0.0242    set_bounds 0.0236    solve 0.1996    add 0.1134    
Accumulated time: pickout 0.0673    decision 0.7136    set_bounds 0.1415    solve 1.5366    add 1.5706    
Current (lb-rhs): -0.015313029289245605
1149 domains visited
Cumulative time: 4.859919786453247

BaB round 5
batch: 512
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] 
cut re-enabled after branching node selection
0 lb beta sum: 0.34954506158828735, worst -0.014788031578063965
10 lb beta sum: 0.35017186403274536, worst -0.014783024787902832
Time: prepare 0.0467    bound 0.1817    transfer 0.0035    finalize 0.0059    func 0.2448    
Accumulated time: func 1.9956    prepare 0.1599    bound 1.7714    transfer 0.0168    finalize 0.0301    
all_split False
======================Cut inference begins======================
max lb tensor(0.00166771) min lb tensor(-0.01477647)
Number of Verified Splits: 30 of 1024
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 4
#cuts 4-6: 8
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 0.0431063175201416 
BICCOS Cumulative time: 0.4858527183532715
Preprocessing time: 0.03377532958984375 Inference time: 0.006368875503540039 Add cuts time: 0.0019288063049316406 Cut analysis time: 0.0010333061218261719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01478 (11), -0.01469 (11), -0.01452 (11), -0.01444 (11), -0.01440 (11), -0.01432 (11), -0.01415 (11), -0.01410 (11), -0.01406 (11), -0.01405 (11), -0.01402 (11), -0.01386 (11), -0.01379 (11), -0.01376 (11), -0.01373 (11), -0.01367 (11), -0.01365 (11), -0.01356 (11), -0.01349 (11), -0.01342 (11), 
Length of domains: 994
Time: pickout 0.0458    decision 0.0380    set_bounds 0.0452    solve 0.2453    add 0.1150    
Accumulated time: pickout 0.1131    decision 0.7516    set_bounds 0.1867    solve 1.7820    add 1.6856    
Current (lb-rhs): -0.014776468276977539
2143 domains visited
Cumulative time: 5.401716947555542

BaB round 6
batch: 994
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014495491981506348
10 lb beta sum: 0.2875950038433075, worst -0.014423131942749023
Time: prepare 0.0484    bound 0.2265    transfer 0.0136    finalize 0.0097    func 0.3117    
Accumulated time: func 2.3073    prepare 0.2086    bound 1.9979    transfer 0.0304    finalize 0.0398    
all_split False
======================Cut inference begins======================
max lb tensor(0.00177264) min lb tensor(-0.01441050)
Number of Verified Splits: 140 of 1988
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 4
#cuts 4-6: 10
#cuts 7-9: 29
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.08821249008178711 
BICCOS Cumulative time: 0.5740652084350586
Preprocessing time: 0.06222176551818848 Inference time: 0.015948772430419922 Add cuts time: 0.007498264312744141 Cut analysis time: 0.0025436878204345703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01441 (12), -0.01431 (12), -0.01416 (12), -0.01407 (12), -0.01404 (12), -0.01395 (12), -0.01379 (12), -0.01374 (12), -0.01370 (12), -0.01368 (12), -0.01365 (12), -0.01349 (12), -0.01342 (12), -0.01339 (12), -0.01338 (12), -0.01331 (12), -0.01330 (12), -0.01317 (12), -0.01313 (12), -0.01305 (12), 
Length of domains: 1848
Time: pickout 0.0807    decision 0.0698    set_bounds 0.0605    solve 0.3121    add 0.0419    
Accumulated time: pickout 0.1937    decision 0.8214    set_bounds 0.2472    solve 2.0941    add 1.7274    
Current (lb-rhs): -0.01441049575805664
3991 domains visited
Cumulative time: 6.058539867401123

BaB round 7
batch: 1848
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014150261878967285
10 lb beta sum: 0.27797961235046387, worst -0.014091253280639648
Time: prepare 0.0956    bound 0.3570    transfer 0.0320    finalize 0.0193    func 0.5284    
Accumulated time: func 2.8357    prepare 0.3044    bound 2.3549    transfer 0.0624    finalize 0.0591    
all_split False
======================Cut inference begins======================
max lb tensor(0.00526041) min lb tensor(-0.01408672)
Number of Verified Splits: 708 of 3696
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 103.
#cuts 1-3: 4
#cuts 4-6: 33
#cuts 7-9: 65
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.23360252380371094 
BICCOS Cumulative time: 0.8076677322387695
Preprocessing time: 0.11226391792297363 Inference time: 0.08110690116882324 Add cuts time: 0.03456687927246094 Cut analysis time: 0.005664825439453125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01409 (13), -0.01401 (13), -0.01383 (13), -0.01376 (13), -0.01371 (13), -0.01365 (13), -0.01346 (13), -0.01341 (13), -0.01340 (13), -0.01334 (13), -0.01330 (13), -0.01316 (13), -0.01308 (13), -0.01306 (13), -0.01305 (13), -0.01299 (13), -0.01294 (13), -0.01285 (13), -0.01281 (13), -0.01273 (13), 
Length of domains: 2988
Time: pickout 0.0348    decision 0.3781    set_bounds 0.1589    solve 0.5295    add 0.0914    
Accumulated time: pickout 0.2285    decision 1.1994    set_bounds 0.4061    solve 2.6235    add 1.8189    
Current (lb-rhs): -0.014086723327636719
6979 domains visited
Cumulative time: 7.496810674667358

BaB round 8
batch: 2988
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1236] [/input-8, 1438] [/input-8, 1233] [/input-8, 1438] [/input-8, 1233] [/input-8, 1236] [/input-8, 1233] [/input-8, 1236] [/input-8, 1236] [/input-8, 1438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.013813495635986328
10 lb beta sum: 0.2622040808200836, worst -0.020803749561309814
Time: prepare 0.1567    bound 0.5476    transfer 0.0236    finalize 0.0331    func 0.8010    
Accumulated time: func 3.6367    prepare 0.4613    bound 2.9025    transfer 0.0860    finalize 0.0922    
all_split False
======================Cut inference begins======================
max lb tensor(0.01087046) min lb tensor(-0.01373887)
Number of Verified Splits: 1526 of 5976
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 221.
#cuts 1-3: 4
#cuts 4-6: 96
#cuts 7-9: 118
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 0.4823110103607178 
BICCOS Cumulative time: 1.2899787425994873
Preprocessing time: 0.18494224548339844 Inference time: 0.1833970546722412 Add cuts time: 0.1024618148803711 Cut analysis time: 0.011509895324707031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01374 (14), -0.01366 (14), -0.01355 (14), -0.01347 (14), -0.01337 (14), -0.01330 (14), -0.01318 (14), -0.01310 (14), -0.01307 (14), -0.01299 (14), -0.01296 (14), -0.01288 (14), -0.01276 (14), -0.01271 (14), -0.01269 (14), -0.01263 (14), -0.01259 (14), -0.01252 (14), -0.01245 (14), -0.01245 (14), 
Length of domains: 4450
Time: pickout 0.0508    decision 0.1776    set_bounds 0.4385    solve 0.8025    add 0.0341    
Accumulated time: pickout 0.2794    decision 1.3770    set_bounds 0.8445    solve 3.4260    add 1.8530    
Current (lb-rhs): -0.013738870620727539
11429 domains visited
Cumulative time: 9.498287916183472

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1233] [/input-8, 1180] [/input-8, 1438] [/input-8, 1233] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1233] [/input-8, 1233] [/input-8, 1438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.013434529304504395
10 lb beta sum: 0.2521730661392212, worst -0.018264083191752434
Time: prepare 0.2229    bound 0.7657    transfer 0.0584    finalize 0.0437    func 1.1437    
Accumulated time: func 4.7805    prepare 0.6845    bound 3.6682    transfer 0.1445    finalize 0.1359    
all_split False
======================Cut inference begins======================
max lb tensor(0.01151332) min lb tensor(-0.01336956)
Number of Verified Splits: 2499 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 296.
#cuts 1-3: 6
#cuts 4-6: 135
#cuts 7-9: 143
#cuts 10-12: 12
#cuts >= 20: 0
BICCOS time: 1.097930669784546 
BICCOS Cumulative time: 2.387909412384033
Preprocessing time: 0.2565469741821289 Inference time: 0.6234877109527588 Add cuts time: 0.2012650966644287 Cut analysis time: 0.016630887985229492
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01337 (15), -0.01328 (15), -0.01318 (15), -0.01309 (15), -0.01301 (15), -0.01293 (15), -0.01282 (15), -0.01273 (15), -0.01269 (15), -0.01261 (15), -0.01258 (15), -0.01250 (15), -0.01242 (15), -0.01238 (15), -0.01234 (15), -0.01228 (15), -0.01221 (15), -0.01215 (15), -0.01210 (15), -0.01207 (15), 
Length of domains: 6047
Time: pickout 0.0568    decision 0.2368    set_bounds 0.5281    solve 1.1459    add 0.0237    
Accumulated time: pickout 0.3361    decision 1.6139    set_bounds 1.3726    solve 4.5720    add 1.8767    
Current (lb-rhs): -0.013369560241699219
17122 domains visited
current_vram/total_varm: 40.3GB/99.9GB, batch_size increase to 8192
Cumulative time: 12.627063512802124

BaB round 10
batch: 6047
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1180] [/input-8, 1438] [/input-8, 1236] [/input-8, 1438] [/input-8, 1180] [/input-8, 1180] [/input-8, 1438] [/input-8, 1180] [/input-8, 1180] [/input-8, 1180] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.012920618057250977
10 lb beta sum: 0.26202473044395447, worst -0.021788567304611206
Time: prepare 0.3140    bound 1.1705    transfer 0.0971    finalize 0.2827    func 1.9425    
Accumulated time: func 6.7229    prepare 0.9988    bound 4.8387    transfer 0.2415    finalize 0.4186    
all_split False
======================Cut inference begins======================
max lb tensor(0.33216393) min lb tensor(-0.01285732)
Number of Verified Splits: 4296 of 12094
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 415.
#cuts 1-3: 8
#cuts 4-6: 190
#cuts 7-9: 211
#cuts 10-12: 6
#cuts >= 20: 0
BICCOS time: 1.5563440322875977 
BICCOS Cumulative time: 3.944253444671631
Preprocessing time: 0.3793063163757324 Inference time: 0.7747287750244141 Add cuts time: 0.381070613861084 Cut analysis time: 0.021238327026367188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01286 (16), -0.01277 (16), -0.01269 (16), -0.01268 (16), -0.01260 (16), -0.01260 (16), -0.01249 (16), -0.01241 (16), -0.01224 (16), -0.01218 (16), -0.01210 (16), -0.01207 (16), -0.01201 (16), -0.01198 (16), -0.01192 (16), -0.01189 (16), -0.01188 (16), -0.01173 (16), -0.01169 (16), -0.01166 (16), 
Length of domains: 7798
Time: pickout 0.1128    decision 0.3502    set_bounds 0.5488    solve 1.9449    add 0.1810    
Accumulated time: pickout 0.4489    decision 1.9641    set_bounds 1.9214    solve 6.5169    add 2.0577    
Current (lb-rhs): -0.012857317924499512
24920 domains visited
Cumulative time: 17.373807191848755

BaB round 11
batch: 7798
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1099] [/input-8, 1438] [/input-8, 229] [/input-8, 1236] [/input-8, 1236] [/input-8, 229] [/input-8, 1236] [/input-8, 1180] [/input-8, 229] [/input-8, 1180] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.012624263763427734
10 lb beta sum: 0.2847721576690674, worst -0.029404960572719574
Time: prepare 0.4068    bound 1.6085    transfer 0.0933    finalize 0.0953    func 2.3051    
Accumulated time: func 9.0280    prepare 1.4059    bound 6.4472    transfer 0.3349    finalize 0.5139    
all_split False
======================Cut inference begins======================
max lb tensor(0.95035195) min lb tensor(-0.01254964)
Number of Verified Splits: 5248 of 15596
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 194.
#cuts 1-3: 11
#cuts 4-6: 92
#cuts 7-9: 90
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 1.7632558345794678 
BICCOS Cumulative time: 5.707509279251099
Preprocessing time: 0.5027270317077637 Inference time: 0.9824743270874023 Add cuts time: 0.26825904846191406 Cut analysis time: 0.009795427322387695
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01255 (17), -0.01246 (17), -0.01238 (17), -0.01238 (17), -0.01229 (17), -0.01219 (17), -0.01209 (17), -0.01192 (17), -0.01191 (17), -0.01182 (17), -0.01174 (17), -0.01174 (17), -0.01173 (17), -0.01164 (17), -0.01158 (17), -0.01155 (17), -0.01147 (17), -0.01142 (17), -0.01140 (17), -0.01131 (17), 
Length of domains: 10348
Time: pickout 0.1936    decision 0.4459    set_bounds 0.9544    solve 2.3083    add 0.0355    
Accumulated time: pickout 0.6425    decision 2.4100    set_bounds 2.8759    solve 8.8252    add 2.0931    
Current (lb-rhs): -0.012549638748168945
35268 domains visited
Cumulative time: 23.136658191680908

BaB round 12
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1233] [/input-8, 229] [/input-8, 229] [/input-8, 1099] [/input-8, 1099] [/input-8, 229] [/input-8, 1099] [/input-8, 354] [/input-8, 354] [/input-8, 1233] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.010814905166625977
10 lb beta sum: 0.40052780508995056, worst -0.019288845360279083
Time: prepare 0.4405    bound 1.4494    transfer 0.0952    finalize 0.1155    func 2.2077    
Accumulated time: func 11.2357    prepare 1.8467    bound 7.8965    transfer 0.4301    finalize 0.6294    
all_split False
======================Cut inference begins======================
max lb tensor(0.65980023) min lb tensor(-0.01072943)
Number of Verified Splits: 10336 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 2.484466552734375 
BICCOS Cumulative time: 8.191975831985474
Preprocessing time: 0.5352938175201416 Inference time: 1.7044005393981934 Add cuts time: 0.24429869651794434 Cut analysis time: 0.0004734992980957031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01255 (17), -0.01246 (17), -0.01238 (17), -0.01238 (17), -0.01229 (17), -0.01219 (17), -0.01209 (17), -0.01192 (17), -0.01191 (17), -0.01182 (17), -0.01174 (17), -0.01174 (17), -0.01173 (17), -0.01164 (17), -0.01158 (17), -0.01155 (17), -0.01147 (17), -0.01140 (17), -0.01131 (17), -0.01128 (17), 
Length of domains: 8204
Time: pickout 0.1217    decision 0.4703    set_bounds 0.9964    solve 2.2124    add 0.0322    
Accumulated time: pickout 0.7642    decision 2.8803    set_bounds 3.8723    solve 11.0376    add 2.1254    
Current (lb-rhs): -0.012549638748168945
41316 domains visited
current_vram/total_varm: 40.3GB/99.9GB, batch_size increase to 16384
Cumulative time: 29.566243410110474

BaB round 13
batch: 8204
splitting decisions: 
split level 0: [/input-8, 1180] [/input-8, 930] [/input-8, 930] [/input-8, 930] [/input-8, 930] [/input-8, 930] [/input-8, 930] [/input-8, 930] [/input-8, 930] [/input-8, 930] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.012298822402954102

all verified at 1th iter
Time: prepare 0.4315    bound 0.0618    transfer 0.0957    finalize 0.1005    func 0.7933    
Accumulated time: func 12.0290    prepare 2.2785    bound 7.9583    transfer 0.5258    finalize 0.7299    
all_split False
======================Cut inference begins======================
max lb tensor(0.05306880) min lb tensor(4.76837158e-07)
Number of Verified Splits: 16408 of 16408
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.8206617832183838 
BICCOS Cumulative time: 9.012637615203857
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.1584    decision 0.4710    set_bounds 1.0067    solve 0.7976    add 0.0024    
Accumulated time: pickout 0.9226    decision 3.3513    set_bounds 4.8789    solve 11.8352    add 2.1278    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
41316 domains visited
Cumulative time: 32.95668268203735


Properties batch 5, size 1
Remaining timeout: 165.26732397079468
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 165.26720666885376
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 165.26712894439697
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 165.2671036720276
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 34.7330 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 182, vnnlib ID: 182 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.81517506, -16.44219780, -14.93947697, -17.08555794, -16.53348160,
         -17.39346313, -16.71439552, -17.35387802, -14.78421783, -16.59263992]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [413]; unstable size 413; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 111, 1, 413] with unstable size 110 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 413] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 413] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [110]; unstable size 110; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 110] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 110] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.18601227, 1.75380206, 3.75133443, 3.26349282, 4.05069065, 3.40995359,
         3.94186616, 1.68227029, 3.44086933]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0709 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 183, vnnlib ID: 183 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.99047518, -8.97643757, -4.09049177, -5.13144016, -3.59326243,
         -5.18095779, -3.94524646, -5.82680273, -8.33982086, -8.93140888]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [769]; unstable size 769; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 283, 1, 769] with unstable size 282 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 769] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 769] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [282]; unstable size 282; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 282] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 282] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.60268450,  4.07875967,  0.22120142,  1.13343310,  1.18244100,
         -0.09481192,  1.85378695,  3.72636414,  4.09831953]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.99047518, -8.97643757, -4.09049177, -5.13144016, -3.59326243,
         -5.18095779, -3.94524646, -5.82680273, -8.33982086, -8.93140888]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.41it/s]100%|██████████| 1/1 [00:00<00:00,  8.40it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.32266092, -9.32172298, -4.42147398, -5.43138981, -3.97195244,
          -5.48412561, -4.08728886, -6.25158787, -8.70373154, -9.29818153]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.11533642]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1220 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.09231185913086
alpha/beta optimization time: 1.2874152660369873
initial alpha-crown bounds: tensor([[ 2.64488888,  4.13461971,  0.23508081,  1.15149271,  1.20023549,
         -0.07920074,  1.87038016,  3.78053093,  4.15428305]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.07920074462890625
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5152657032013
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.51522707939148
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.51520156860352
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.51517963409424
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.51515865325928
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.51513814926147
Verifying property 5 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.07920074]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.99047518, -8.97643757, -4.09049177, -5.13144016, -3.59326243,
        -5.18095779, -3.94524646, -5.82680273, -8.33982086, -8.93140888],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.07920074]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 769
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 279
Node /15 input 0: size torch.Size([100]) unstable 8
-----------------
# of unstable neurons: 1056
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.822845458984375e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0792003870010376
10 lb beta sum: 0.0, worst -0.0792011022567749
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0551    transfer 0.0001    finalize 0.0001    func 0.0556    
Accumulated time: func 0.0556    prepare 0.0002    bound 0.0551    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 79] 
split level 3: [/input-12, 47] 
split level 4: [/input-8, 1828] 
split level 5: [/input-8, 190] 
split level 6: [/input-8, 1489] 
split level 7: [/input-8, 175] 
split level 8: [/input-8, 1836] 
split level 9: [/input-8, 1955] 
split level 10: [/input-8, 1969] 
split level 11: [/input-8, 1950] 
split level 12: [/input-8, 530] 
split level 13: [/input-8, 181] 
split level 14: [/input, 2474] 
split level 15: [/input-8, 1958] 
split level 16: [/input-8, 1481] 
split level 17: [/input-8, 1835] 
split level 18: [/input-8, 1948] 
split level 19: [/input-8, 1937] 
split level 20: [/input-8, 1483] 
split level 21: [/input, 2506] 
split level 22: [/input-8, 1017] 
split level 23: [/input, 2491] 
split level 24: [/input-8, 30] 
split level 25: [/input-8, 1977] 
split level 26: [/input, 2425] 
split level 27: [/input-8, 1903] 
split level 28: [/input-12, 62] 
split level 29: [/input-8, 107] 
split level 30: [/input, 966] 
split level 31: [/input-8, 1929] 
split level 32: [/input-8, 1930] 
split level 33: [/input-8, 1018] 
split level 34: [/input, 664] 
split level 35: [/input-8, 1121] 
split level 36: [/input, 2536] 
split level 37: [/input-8, 1936] 
split level 38: [/input, 2520] 
split level 39: [/input-8, 1938] 
split level 40: [/input, 2504] 
split level 41: [/input, 2426] 
split level 42: [/input, 1976] 
split level 43: [/input-8, 1933] 
split level 44: [/input-8, 1982] 
split level 45: [/input, 1959] 
split level 46: [/input, 1975] 
split level 47: [/input, 1955] 
split level 48: [/input, 2440] 
split level 49: [/input, 3717] 
split level 50: [/input-8, 1834] 
split level 51: [/input, 2024] 
split level 52: [/input-8, 1473] 
split level 53: [/input-8, 1166] 
split level 54: [/input, 2376] 
split level 55: [/input, 1956] 
split level 56: [/input, 2007] 
split level 57: [/input-8, 1502] 
split level 58: [/input, 3789] 
split level 59: [/input, 1925] 
split level 60: [/input, 1186] 
split level 61: [/input-8, 1997] 
split level 62: [/input, 3756] 
split level 63: [/input, 2004] 
split level 64: [/input, 1909] 
split level 65: [/input, 2442] 
split level 66: [/input, 377] 
split level 67: [/input, 998] 
split level 68: [/input, 1927] 
split level 69: [/input, 999] 
split level 70: [/input-8, 1308] 
split level 71: [/input, 930] 
split level 72: [/input-8, 533] 
split level 73: [/input-8, 963] 
split level 74: [/input-8, 1518] 
split level 75: [/input, 216] 
split level 76: [/input, 2460] 
split level 77: [/input, 1254] 
split level 78: [/input, 3749] 
split level 79: [/input-8, 1931] 
split level 80: [/input-8, 1010] 
split level 81: [/input-8, 373] 
split level 82: [/input, 1384] 
split level 83: [/input, 2420] 
split level 84: [/input-8, 1129] 
split level 85: [/input, 1174] 
split level 86: [/input, 940] 
split level 87: [/input-8, 1513] 
split level 88: [/input-8, 1103] 
split level 89: [/input, 1964] 
split level 90: [/input, 953] 
split level 91: [/input, 1148] 
split level 92: [/input-8, 1747] 
split level 93: [/input, 1987] 
split level 94: [/input, 1971] 
split level 95: [/input, 1190] 
split level 96: [/input, 3772] 
split level 97: [/input, 2406] 
split level 98: [/input, 961] 
split level 99: [/input, 3818] 
split level 100: [/input-8, 1175] 
split level 101: [/input-8, 964] 
split level 102: [/input, 1237] 
split level 103: [/input, 989] 
split level 104: [/input, 1948] 
split level 105: [/input-8, 962] 
split level 106: [/input, 2518] 
split level 107: [/input-8, 1934] 
split level 108: [/input-8, 361] 
split level 109: [/input, 1185] 
split level 110: [/input, 973] 
split level 111: [/input, 1011] 
split level 112: [/input, 3778] 
split level 113: [/input, 893] 
split level 114: [/input-8, 1746] 
split level 115: [/input, 1980] 
split level 116: [/input, 3813] 
split level 117: [/input, 1253] 
split level 118: [/input, 1915] 
split level 119: [/input, 362] 
split level 120: [/input, 962] 
split level 121: [/input, 1202] 
split level 122: [/input, 1932] 
split level 123: [/input, 3724] 
split level 124: [/input, 631] 
split level 125: [/input, 421] 
split level 126: [/input, 2010] 
split level 127: [/input, 342] 
split level 128: [/input-8, 979] 
split level 129: [/input, 1016] 
split level 130: [/input, 1902] 
split level 131: [/input, 909] 
split level 132: [/input, 1170] 
split level 133: [/input-8, 1183] 
split level 134: [/input, 232] 
split level 135: [/input, 388] 
split level 136: [/input, 3739] 
split level 137: [/input-8, 1738] 
split level 138: [/input, 3953] 
split level 139: [/input, 3761] 
split level 140: [/input, 436] 
split level 141: [/input, 1933] 
split level 142: [/input, 1092] 
split level 143: [/input, 996] 
split level 144: [/input, 2498] 
split level 145: [/input, 1914] 
split level 146: [/input, 1917] 
split level 147: [/input, 2018] 
split level 148: [/input, 3793] 
split level 149: [/input, 727] 
split level 150: [/input, 2402] 
split level 151: [/input, 3954] 
split level 152: [/input, 977] 
split level 153: [/input, 2378] 
split level 154: [/input, 2743] 
split level 155: [/input, 451] 
split level 156: [/input, 2387] 
split level 157: [/input, 2178] 
split level 158: [/input, 1017] 
split level 159: [/input, 3698] 
split level 160: [/input, 1164] 
split level 161: [/input, 1269] 
split level 162: [/input, 1165] 
split level 163: [/input, 3970] 
split level 164: [/input, 2037] 
split level 165: [/input, 1985] 
split level 166: [/input, 491] 
split level 167: [/input-8, 369] 
split level 168: [/input, 2040] 
split level 169: [/input, 1934] 
split level 170: [/input, 2391] 
split level 171: [/input-8, 948] 
split level 172: [/input, 993] 
split level 173: [/input, 1249] 
split level 174: [/input, 2510] 
split level 175: [/input, 3863] 
split level 176: [/input, 359] 
split level 177: [/input, 3513] 
split level 178: [/input, 2741] 
split level 179: [/input, 490] 
split level 180: [/input, 1018] 
split level 181: [/input-8, 1128] 
split level 182: [/input, 382] 
split level 183: [/input, 2645] 
split level 184: [/input, 1149] 
split level 185: [/input, 2478] 
split level 186: [/input, 3707] 
split level 187: [/input, 3864] 
split level 188: [/input-8, 1911] 
split level 189: [/input, 836] 
split level 190: [/input-8, 143] 
split level 191: [/input, 1903] 
split level 192: [/input, 1875] 
split level 193: [/input, 1091] 
split level 194: [/input, 3812] 
split level 195: [/input, 461] 
split level 196: [/input, 3745] 
split level 197: [/input, 3683] 
split level 198: [/input-8, 709] 
split level 199: [/input-8, 969] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07918190956115723
10 lb beta sum: 0.0, worst -0.07918190956115723
Time: prepare 0.0114    bound 0.1070    transfer 0.0026    finalize 0.0031    func 0.1268    
Accumulated time: func 0.1824    prepare 0.0232    bound 0.1622    transfer 0.0027    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.04314721) min lb tensor(-0.07917953)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010755777359008789 
BICCOS Cumulative time: 0.010755777359008789
Preprocessing time: 0.009939193725585938 Inference time: 0.00016045570373535156 Add cuts time: 8.726119995117188e-05 Cut analysis time: 0.0005688667297363281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07645 (1), -0.07645 (1), -0.07636 (1), -0.07629 (1), -0.07623 (1), -0.07622 (1), -0.07616 (1), -0.07611 (1), -0.07610 (1), -0.07607 (1), -0.07606 (1), -0.07605 (1), -0.07590 (1), -0.07589 (1), -0.07588 (1), -0.07581 (1), -0.07564 (1), -0.07562 (1), -0.07551 (1), -0.07537 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5458    set_bounds 0.0089    solve 0.1269    add 0.1169    
Accumulated time: pickout 0.0003    decision 0.5458    set_bounds 0.0089    solve 0.1269    add 0.1169    
Current (lb-rhs): -0.07645344734191895
50 domains visited
Cumulative time: 0.8842542171478271

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 46] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 1: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 79] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 47] [/input-12, 79] [/input-12, 79] [/input-12, 47] [/input-12, 47] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
split level 3: [/input-8, 181] [/input-8, 1836] [/input-8, 1836] [/input-8, 1489] [/input-8, 1836] [/input-12, 47] [/input-12, 47] [/input-12, 47] [/input-12, 47] [/input-12, 47] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06679463386535645
10 lb beta sum: 0.43500110507011414, worst -0.04207766056060791
Time: prepare 0.0078    bound 0.1243    transfer 0.0014    finalize 0.0026    func 0.1386    
Accumulated time: func 0.3210    prepare 0.0312    bound 0.2865    transfer 0.0041    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.08237505) min lb tensor(-0.04202420)
Number of Verified Splits: 139 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.019121646881103516 
BICCOS Cumulative time: 0.029877424240112305
Preprocessing time: 0.011581182479858398 Inference time: 0.005430459976196289 Add cuts time: 0.0019273757934570312 Cut analysis time: 0.00018262863159179688
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0012    decision 0.0209    set_bounds 0.0112    solve 0.1387    add 0.0147    
Accumulated time: pickout 0.0015    decision 0.5667    set_bounds 0.0201    solve 0.2656    add 0.1316    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([79, 90]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.36608618e+31,  1.21254131e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([79, 90]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.36608618e+31,  3.77046317e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([79, 90]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.36608811e+31,  1.24212310e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([79, 90]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.36608811e+31,  3.65850180e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0296630859375

all verified at 1th iter
Time: prepare 0.0003    bound 0.0103    transfer 0.0001    finalize 0.0002    func 0.0110    
Accumulated time: func 0.3320    prepare 0.0315    bound 0.2968    transfer 0.0042    finalize 0.0060    
After pruning, left:  0

Back to Regular BaB


Properties batch 6, size 1
Remaining timeout: 197.19984316825867
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.19976615905762
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.19973945617676
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.8005 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 184, vnnlib ID: 184 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.30149889, -3.49341011, -6.24541330, -7.76470089, -6.35670853,
         -7.93911409, -8.75611973, -7.13641787, -2.26208448, -2.55497289]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [448]; unstable size 448; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 126, 1, 448] with unstable size 125 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 448] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 448] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [125]; unstable size 125; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 125] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 125] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.26391172,  0.73275721,  3.13852215,  4.64125395,  3.28221655,
          4.80756092,  5.62747574,  4.06410360, -0.90191245]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.30149889, -3.49341011, -6.24541330, -7.76470089, -6.35670853,
         -7.93911409, -8.75611973, -7.13641787, -2.26208448, -2.55497289]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.30149889, -3.49341011, -6.24541330, -7.76470089, -6.35670853,
          -7.93911409, -8.75611973, -7.13641787, -2.26208448, -2.55497289]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.29288840]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.14761901, -0.63968253, -0.56031746,  ...,  0.16984135,
             0.21746039,  0.23333341],
           [-1.32222211, -0.84603173, -0.43333322,  ...,  0.21746039,
             0.26507944,  0.28095245],
           [-1.40158725, -1.27460313, -0.84603173,  ...,  0.24920642,
             0.31269848,  0.34444451],
           ...,
           [-1.32222211, -1.33809519, -1.32222211,  ..., -0.03650784,
            -0.59206349, -1.03650784],
           [-0.59206349, -0.49682540, -0.29047608,  ..., -0.09999990,
            -0.81428570, -1.06825387],
           [ 0.32857150,  0.40793657,  0.47142863,  ...,  0.05873025,
            -0.21111101, -0.40158719]],

          [[-0.78904986, -0.16103047,  0.03220624,  ...,  0.66022551,
             0.66022551,  0.67632860],
           [-1.15942025, -0.54750401, -0.03220600,  ...,  0.72463775,
             0.72463775,  0.74074084],
           [-1.33655393, -1.07890499, -0.57971013,  ...,  0.75684386,
             0.77294695,  0.80515307],
           ...,
           [-1.20772946, -1.20772946, -1.19162631,  ..., -0.06441211,
            -0.51529789, -0.93397743],
           [-0.57971013, -0.48309177, -0.27375188,  ..., -0.12882435,
            -0.72463763, -0.95008045],
           [ 0.28985518,  0.37037048,  0.43478271,  ...,  0.03220624,
            -0.12882435, -0.32206106]],

          [[-0.10344811,  0.72113961,  1.23088503,  ...,  1.56072009,
             1.57571256,  1.59070504],
           [-0.85307342,  0.06146942,  0.96101969,  ...,  1.56072009,
             1.57571256,  1.60569763],
           [-0.92803597, -0.67316341, -0.07346311,  ...,  1.59070504,
             1.62069011,  1.63568258],
           ...,
           [-0.73313338, -0.83808094, -0.88305843,  ...,  0.09145443,
            -0.16341813, -0.26836565],
           [-0.29835078, -0.28335828, -0.11844061,  ...,  0.06146942,
            -0.29835078, -0.32833579],
           [ 0.37631202,  0.42128953,  0.46626705,  ...,  0.16641696,
             0.04647692, -0.04347810]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0783 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 185, vnnlib ID: 185 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.06885719, -5.39221478, -5.41002798, -5.94510174, -5.27591610,
         -6.06000948, -5.04459095, -6.26535511, -7.53897762, -5.24221373]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [444]; unstable size 444; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 173, 1, 444] with unstable size 172 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 444] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 444] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [172]; unstable size 172; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 172] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.17368078, -0.12169071, -0.52097559,  0.06974697, -0.65863132,
          0.17358828, -0.89032602,  0.25720024,  1.71557093]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.06885719, -5.39221478, -5.41002798, -5.94510174, -5.27591610,
         -6.06000948, -5.04459095, -6.26535511, -7.53897762, -5.24221373]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.06885624, -5.39221478, -5.41002798, -5.94510174, -5.27591515,
          -6.06000900, -5.04459095, -6.26535511, -7.53897667, -5.24221325],
         [-7.06885624, -5.39221478, -5.41002798, -5.94510174, -5.27591515,
          -6.06000900, -5.04459095, -6.26535511, -7.53897667, -5.24221325]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.15000153,  0.16781473,  0.03370190, -0.19762230]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]],


         [[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]],


         [[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]],


         [[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1000 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 186, vnnlib ID: 186 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.72309113, -11.37285328, -11.28134155, -12.68495083, -11.58407688,
         -12.91345787, -12.84364223, -12.81871128,  -7.10625744, -11.70213604]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [490]; unstable size 490; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 152, 1, 490] with unstable size 151 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 490] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 490] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [151]; unstable size 151; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 151] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 151] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.24744284, 3.64492750, 3.52347636, 4.82812643, 3.78522539, 5.03832436,
         5.00732327, 4.91135693, 4.00957584]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0658 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 187, vnnlib ID: 187 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.51928949, -5.15087223, -3.22848940, -3.80073190, -3.15746570,
         -3.94839764, -3.82955623, -4.85578012, -2.35027075, -4.11050558]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [721]; unstable size 721; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 721] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 721] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 721] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 190] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.20104569,  2.09830117,  0.14130938,  0.66386670,  0.04208767,
          0.79857552,  0.56520987,  1.63165128,  1.12448716]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.51928949, -5.15087223, -3.22848940, -3.80073190, -3.15746570,
         -3.94839764, -3.82955623, -4.85578012, -2.35027075, -4.11050558]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.53468847, -5.19556904, -3.22439003, -3.86211801, -3.17368507,
          -4.00655746, -3.77223229, -4.88972187, -2.58229876, -4.19417620]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04761028]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0066 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1040 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 188, vnnlib ID: 188 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.97730589, -7.00714970, -4.64439344, -6.27000904, -5.63979816,
         -6.32092857, -6.35750294, -7.77330685, -5.49930382, -6.73936844]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [339]; unstable size 339; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 188, 1, 339] with unstable size 187 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 339] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 339] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 187] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.05137622,  1.62128544,  1.31240129,  0.74176526,  1.35647595,
          1.30591059,  2.72699046,  0.18010354,  1.41348743]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.97730589, -7.00714970, -4.64439344, -6.27000904, -5.63979816,
         -6.32092857, -6.35750294, -7.77330685, -5.49930382, -6.73936844]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.43it/s]100%|██████████| 1/1 [00:00<00:00,  8.43it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.97218704, -7.05845642, -4.88922119, -6.54895496, -5.88330650,
          -6.60418797, -6.63821125, -8.03036880, -5.43032932, -6.83684731]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.08296585]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1213 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.740821838378906
alpha/beta optimization time: 1.2692832946777344
initial alpha-crown bounds: tensor([[-0.04131866,  1.64049339,  1.33070445,  0.74799562,  1.37658381,
          1.32323432,  2.73499799,  0.19743484,  1.43069601]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.041318655014038086
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.53261065483093
Verifying property 0 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04131866]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.97730589, -7.00714970, -4.64439344, -6.27000904, -5.63979816,
        -6.32092857, -6.35750294, -7.77330685, -5.49930382, -6.73936844],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04131866]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 339
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 187
Node /15 input 0: size torch.Size([100]) unstable 6
-----------------
# of unstable neurons: 532
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010132789611816406
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.041318297386169434
10 lb beta sum: 0.0, worst -0.04131937026977539
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0553    transfer 0.0001    finalize 0.0001    func 0.0558    
Accumulated time: func 0.0558    prepare 0.0002    bound 0.0553    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 62] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 79] 
split level 4: [/input-12, 69] 
split level 5: [/input-8, 356] 
split level 6: [/input-8, 2046] 
split level 7: [/input-8, 2026] 
split level 8: [/input-8, 355] 
split level 9: [/input-8, 364] 
split level 10: [/input-8, 353] 
split level 11: [/input-8, 357] 
split level 12: [/input-8, 354] 
split level 13: [/input-8, 557] 
split level 14: [/input-8, 174] 
split level 15: [/input-8, 345] 
split level 16: [/input-8, 1942] 
split level 17: [/input-8, 1169] 
split level 18: [/input-8, 1918] 
split level 19: [/input-8, 1964] 
split level 20: [/input, 2182] 
split level 21: [/input-8, 50] 
split level 22: [/input-8, 53] 
split level 23: [/input-8, 1965] 
split level 24: [/input-8, 1767] 
split level 25: [/input, 2709] 
split level 26: [/input-8, 1973] 
split level 27: [/input-8, 360] 
split level 28: [/input-8, 1252] 
split level 29: [/input-8, 1937] 
split level 30: [/input-8, 352] 
split level 31: [/input-8, 1875] 
split level 32: [/input-8, 730] 
split level 33: [/input-8, 932] 
split level 34: [/input-8, 2003] 
split level 35: [/input, 1721] 
split level 36: [/input, 420] 
split level 37: [/input-8, 1211] 
split level 38: [/input-8, 273] 
split level 39: [/input-8, 1227] 
split level 40: [/input, 123] 
split level 41: [/input-8, 1822] 
split level 42: [/input-8, 1778] 
split level 43: [/input-8, 1770] 
split level 44: [/input-8, 1836] 
split level 45: [/input, 157] 
split level 46: [/input, 2444] 
split level 47: [/input, 441] 
split level 48: [/input, 2730] 
split level 49: [/input-8, 537] 
split level 50: [/input-8, 1018] 
split level 51: [/input-8, 1773] 
split level 52: [/input-8, 535] 
split level 53: [/input-8, 183] 
split level 54: [/input-8, 132] 
split level 55: [/input, 425] 
split level 56: [/input-8, 1799] 
split level 57: [/input, 1925] 
split level 58: [/input, 3090] 
split level 59: [/input, 2455] 
split level 60: [/input, 3089] 
split level 61: [/input-8, 1228] 
split level 62: [/input, 746] 
split level 63: [/input, 572] 
split level 64: [/input-8, 545] 
split level 65: [/input, 1764] 
split level 66: [/input-8, 1952] 
split level 67: [/input, 983] 
split level 68: [/input-8, 37] 
split level 69: [/input-8, 527] 
split level 70: [/input, 373] 
split level 71: [/input, 2081] 
split level 72: [/input-8, 262] 
split level 73: [/input, 647] 
split level 74: [/input, 2364] 
split level 75: [/input-8, 2038] 
split level 76: [/input-8, 1993] 
split level 77: [/input-8, 717] 
split level 78: [/input-8, 909] 
split level 79: [/input-8, 538] 
split level 80: [/input, 230] 
split level 81: [/input-8, 1217] 
split level 82: [/input, 2186] 
split level 83: [/input-8, 1788] 
split level 84: [/input-8, 133] 
split level 85: [/input-8, 1253] 
split level 86: [/input, 677] 
split level 87: [/input, 1160] 
split level 88: [/input, 2202] 
split level 89: [/input, 2405] 
split level 90: [/input, 3229] 
split level 91: [/input, 643] 
split level 92: [/input, 102] 
split level 93: [/input-8, 908] 
split level 94: [/input, 1737] 
split level 95: [/input, 2097] 
split level 96: [/input-8, 1535] 
split level 97: [/input, 429] 
split level 98: [/input, 3214] 
split level 99: [/input-8, 1995] 
split level 100: [/input, 1131] 
split level 101: [/input, 2068] 
split level 102: [/input-8, 1435] 
split level 103: [/input, 188] 
split level 104: [/input, 2760] 
split level 105: [/input, 2435] 
split level 106: [/input-8, 1779] 
split level 107: [/input, 3263] 
split level 108: [/input, 354] 
split level 109: [/input, 2475] 
split level 110: [/input-8, 1254] 
split level 111: [/input, 2066] 
split level 112: [/input-8, 2037] 
split level 113: [/input-8, 720] 
split level 114: [/input-8, 2039] 
split level 115: [/input, 844] 
split level 116: [/input-8, 1803] 
split level 117: [/input, 742] 
split level 118: [/input-8, 901] 
split level 119: [/input-8, 512] 
split level 120: [/input, 728] 
split level 121: [/input, 1099] 
split level 122: [/input, 2156] 
split level 123: [/input, 2595] 
split level 124: [/input, 3479] 
split level 125: [/input, 2834] 
split level 126: [/input, 1940] 
split level 127: [/input, 841] 
split level 128: [/input, 2379] 
split level 129: [/input, 667] 
split level 130: [/input, 697] 
split level 131: [/input, 587] 
split level 132: [/input, 1614] 
split level 133: [/input-8, 1988] 
split level 134: [/input, 517] 
split level 135: [/input, 1144] 
split level 136: [/input, 315] 
split level 137: [/input, 2468] 
split level 138: [/input, 571] 
split level 139: [/input, 2380] 
split level 140: [/input-8, 1416] 
split level 141: [/input-8, 1845] 
split level 142: [/input, 104] 
split level 143: [/input-8, 1471] 
split level 144: [/input, 676] 
split level 145: [/input, 2365] 
split level 146: [/input-8, 1092] 
split level 147: [/input, 2609] 
split level 148: [/input, 1777] 
split level 149: [/input-8, 849] 
split level 150: [/input, 431] 
split level 151: [/input, 655] 
split level 152: [/input-8, 903] 
split level 153: [/input, 2460] 
split level 154: [/input, 2398] 
split level 155: [/input, 2695] 
split level 156: [/input, 2678] 
split level 157: [/input, 2594] 
split level 158: [/input, 690] 
split level 159: [/input-8, 1276] 
split level 160: [/input, 3785] 
split level 161: [/input, 2088] 
split level 162: [/input-8, 1100] 
split level 163: [/input, 2340] 
split level 164: [/input, 3682] 
split level 165: [/input-8, 1514] 
split level 166: [/input-8, 748] 
split level 167: [/input-8, 1448] 
split level 168: [/input, 3749] 
split level 169: [/input-8, 2002] 
split level 170: [/input, 3670] 
split level 171: [/input, 2632] 
split level 172: [/input, 2524] 
split level 173: [/input-8, 946] 
split level 174: [/input, 1206] 
split level 175: [/input, 2547] 
split level 176: [/input, 2325] 
split level 177: [/input-8, 1792] 
split level 178: [/input, 1110] 
split level 179: [/input, 2287] 
split level 180: [/input, 766] 
split level 181: [/input-8, 955] 
split level 182: [/input-8, 1273] 
split level 183: [/input, 3639] 
split level 184: [/input, 764] 
split level 185: [/input-8, 36] 
split level 186: [/input, 3587] 
split level 187: [/input-8, 904] 
split level 188: [/input, 1408] 
split level 189: [/input, 1045] 
split level 190: [/input, 1790] 
split level 191: [/input, 1004] 
split level 192: [/input, 3769] 
split level 193: [/input, 1192] 
split level 194: [/input, 3582] 
split level 195: [/input-8, 1137] 
split level 196: [/input-8, 1517] 
split level 197: [/input, 1011] 
split level 198: [/input-8, 1694] 
split level 199: [/input-8, 1870] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.045694947242736816
10 lb beta sum: 0.0, worst -0.041452646255493164
Time: prepare 0.0115    bound 0.1041    transfer 0.0030    finalize 0.0027    func 0.1238    
Accumulated time: func 0.1796    prepare 0.0215    bound 0.1594    transfer 0.0031    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.09357548) min lb tensor(-0.04131830)
Number of Verified Splits: 4 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.010842561721801758 
BICCOS Cumulative time: 0.010842561721801758
Preprocessing time: 0.00999593734741211 Inference time: 0.00019049644470214844 Add cuts time: 7.510185241699219e-05 Cut analysis time: 0.0005810260772705078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03799 (1), -0.03792 (1), -0.03769 (1), -0.03751 (1), -0.03722 (1), -0.03716 (1), -0.03713 (1), -0.03682 (1), -0.03680 (1), -0.03679 (1), -0.03646 (1), -0.03635 (1), -0.03606 (1), -0.03573 (1), -0.03553 (1), -0.03547 (1), -0.03533 (1), -0.03505 (1), -0.03481 (1), -0.03463 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5415    set_bounds 0.0119    solve 0.1239    add 0.1325    
Accumulated time: pickout 0.0004    decision 0.5415    set_bounds 0.0119    solve 0.1239    add 0.1325    
Current (lb-rhs): -0.037994384765625
50 domains visited
Cumulative time: 0.9022219181060791

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 62] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 62] [/input-12, 4] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 4] [/input-12, 62] [/input-12, 62] [/input-12, 62] 
split level 2: [/input-12, 4] [/input-12, 69] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 69] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-8, 2026] [/input-8, 2026] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-8, 2026] [/input-12, 69] [/input-12, 69] [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03226912021636963

all verified at 1th iter
Time: prepare 0.0078    bound 0.0122    transfer 0.0013    finalize 0.0025    func 0.0262    
Accumulated time: func 0.2058    prepare 0.0295    bound 0.1716    transfer 0.0043    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.06880069) min lb tensor(0.00019121)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03417348861694336 
BICCOS Cumulative time: 0.04501605033874512
Preprocessing time: 0.01199483871459961 Inference time: 0.01361083984375 Add cuts time: 0.008374452590942383 Cut analysis time: 0.0001933574676513672
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0207    set_bounds 0.0112    solve 0.0263    add 0.0150    
Accumulated time: pickout 0.0014    decision 0.5623    set_bounds 0.0230    solve 0.1502    add 0.1475    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 10]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.36608811e+31,  3.54764313e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 10]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.36608811e+31,  7.18051642e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 10]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.36608811e+31,  3.78349274e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 10]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.36608811e+31,  6.55023307e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.004820466041564941

all verified at 0th iter
Time: prepare 0.0003    bound 0.0043    transfer 0.0001    finalize 0.0001    func 0.0050    
Accumulated time: func 0.2108    prepare 0.0298    bound 0.1760    transfer 0.0044    finalize 0.0055    
After pruning, left:  0

Back to Regular BaB


Properties batch 1, size 1
Remaining timeout: 197.27445197105408
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 197.27403235435486
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 197.27400612831116
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.2739818096161
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.27396035194397
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.2739396095276
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.2739179134369
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.27389407157898
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.7262 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 189, vnnlib ID: 189 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.22406721, -5.09387970, -1.13128150, -2.34915662, -1.20606780,
         -2.44099808, -1.39945912, -3.09898949, -5.70387459, -5.12313890]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [421]; unstable size 421; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 184, 1, 421] with unstable size 183 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 421] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 421] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [183]; unstable size 183; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 183] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 183] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.44431543,  3.10675144, -0.30788934,  0.80543149,  0.89428484,
         -0.24248075,  1.52680290,  3.75318384,  3.18413115]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.22406721, -5.09387970, -1.13128150, -2.34915662, -1.20606780,
         -2.44099808, -1.39945912, -3.09898949, -5.70387459, -5.12313890]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.22406721, -5.09387970, -1.13128197, -2.34915662, -1.20606816,
          -2.44099808, -1.39945936, -3.09898996, -5.70387459, -5.12313890],
         [-4.22406721, -5.09387970, -1.13128197, -2.34915662, -1.20606816,
          -2.44099808, -1.39945936, -3.09898996, -5.70387459, -5.12313890]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07478619,  0.19339120]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.01111121, -0.05238085, -0.14761895,  ...,  0.10634929,
             0.21746039,  0.40793657],
           [-0.35396814, -0.41746020, -0.40158719,  ...,  0.01111121,
             0.29682547,  0.10634929],
           [-0.43333322, -0.32222211,  0.05873025,  ..., -0.13174593,
             0.58253974,  0.63015878],
           ...,
           [-0.67142856, -0.67142856, -0.67142856,  ..., -0.29047608,
            -0.29047608, -0.19523799],
           [-0.54444444, -0.59206349, -0.63968253,  ..., -0.86190474,
            -0.84603173, -0.40158719],
           [-0.60793650, -0.62380952, -0.59206349,  ..., -1.14761901,
            -1.03650784, -0.67142856]],

          [[ 0.61191636,  0.53140104,  0.41867965,  ...,  0.49919492,
             0.61191636,  0.69243163],
           [ 0.30595824,  0.20933989,  0.22544295,  ...,  0.06441236,
             0.35426742,  0.08051541],
           [ 0.09661847,  0.20933989,  0.59581327,  ..., -0.19323659,
             0.28985518,  0.32206130],
           ...,
           [ 0.41867965,  0.38647354,  0.33816436,  ..., -0.59581316,
            -0.59581316, -0.49919480],
           [ 0.57971025,  0.48309189,  0.40257660,  ..., -1.07890499,
            -1.09500802, -0.69243151],
           [ 0.54750413,  0.48309189,  0.48309189,  ..., -1.23993552,
            -1.19162631, -0.88566822]],

          [[-0.47826082, -0.49325335, -0.49325335,  ..., -0.28335828,
            -0.31334329, -0.29835078],
           [-0.68815589, -0.65817088, -0.59820086,  ..., -0.47826082,
            -0.35832080, -0.71814090],
           [-0.77811092, -0.62818587, -0.31334329,  ..., -0.86806595,
            -0.46326834, -0.47826082],
           ...,
           [ 0.55622208,  0.52623707,  0.49625200,  ..., -1.00299859,
            -1.04797614, -1.03298354],
           [ 0.72113961,  0.64617711,  0.58620709,  ..., -1.25787115,
            -1.33283365, -1.04797614],
           [ 0.72113961,  0.66116959,  0.67616212,  ..., -1.28785622,
            -1.28785622, -1.07796109]]],


         [[[ 0.01111121, -0.05238085, -0.14761895,  ...,  0.10634929,
             0.21746039,  0.40793657],
           [-0.35396814, -0.41746020, -0.40158719,  ...,  0.01111121,
             0.29682547,  0.10634929],
           [-0.43333322, -0.32222211,  0.05873025,  ..., -0.13174593,
             0.58253974,  0.63015878],
           ...,
           [-0.67142856, -0.67142856, -0.67142856,  ..., -0.29047608,
            -0.29047608, -0.19523799],
           [-0.54444444, -0.59206349, -0.63968253,  ..., -0.86190474,
            -0.84603173, -0.40158719],
           [-0.60793650, -0.62380952, -0.59206349,  ..., -1.14761901,
            -1.03650784, -0.67142856]],

          [[ 0.61191636,  0.53140104,  0.41867965,  ...,  0.49919492,
             0.61191636,  0.69243163],
           [ 0.30595824,  0.20933989,  0.22544295,  ...,  0.06441236,
             0.35426742,  0.08051541],
           [ 0.09661847,  0.20933989,  0.59581327,  ..., -0.19323659,
             0.28985518,  0.32206130],
           ...,
           [ 0.41867965,  0.38647354,  0.33816436,  ..., -0.59581316,
            -0.59581316, -0.49919480],
           [ 0.57971025,  0.48309189,  0.40257660,  ..., -1.07890499,
            -1.09500802, -0.69243151],
           [ 0.54750413,  0.48309189,  0.48309189,  ..., -1.23993552,
            -1.19162631, -0.88566822]],

          [[-0.47826082, -0.49325335, -0.49325335,  ..., -0.28335828,
            -0.31334329, -0.29835078],
           [-0.68815589, -0.65817088, -0.59820086,  ..., -0.47826082,
            -0.35832080, -0.71814090],
           [-0.77811092, -0.62818587, -0.31334329,  ..., -0.86806595,
            -0.46326834, -0.47826082],
           ...,
           [ 0.55622208,  0.52623707,  0.49625200,  ..., -1.00299859,
            -1.04797614, -1.03298354],
           [ 0.72113961,  0.64617711,  0.58620709,  ..., -1.25787115,
            -1.33283365, -1.04797614],
           [ 0.72113961,  0.66116959,  0.67616212,  ..., -1.28785622,
            -1.28785622, -1.07796109]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0860 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 190, vnnlib ID: 190 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.51938772,  -8.11381626,  -9.00568771, -10.62922859,  -9.08360767,
         -10.80996037, -10.68894196,  -9.68361282,  -4.49052000,  -7.37830973]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [513]; unstable size 513; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 513] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 513] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 513] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 197] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.66284275, 3.05478787, 3.87506914, 5.43707466, 3.87113762, 5.60540581,
         5.39609337, 4.38749218, 2.30119872]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0690 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 191, vnnlib ID: 191 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.14541721, -11.72427464,  -5.83231974,  -5.33568001,  -5.92574120,
          -5.31256008,  -6.40588474,  -6.92540359, -10.06930351, -10.74812031]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [548]; unstable size 548; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 215, 1, 548] with unstable size 214 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 548] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 548] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [214]; unstable size 214; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 214] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 214] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.22616148,  5.41774082,  0.20892346,  0.26687157, -0.04204356,
          0.62771273,  1.19141817,  3.92691231,  4.58853817]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.14541721, -11.72427464,  -5.83231974,  -5.33568001,  -5.92574120,
          -5.31256008,  -6.40588474,  -6.92540359, -10.06930351, -10.74812031]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.14541721, -11.72427464,  -5.83231974,  -5.33568001,  -5.92574120,
           -5.31256008,  -6.40588474,  -6.92540359, -10.06930351, -10.74812031]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02311993]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.06825387, -0.90952379, -0.92539680,  ..., -0.51269841,
            -0.24285704, -0.05238085],
           [-0.98888886, -0.90952379, -0.83015871,  ..., -0.56031746,
            -0.30634910, -0.38571417],
           [-0.98888886, -0.92539680, -0.78253967,  ..., -0.71904761,
            -0.56031746, -0.54444444],
           ...,
           [ 0.18571436,  0.36031753,  0.40793657,  ..., -0.48095238,
            -0.52857143, -0.76666665],
           [ 0.20158738,  0.37619054,  0.42380959,  ..., -0.38571417,
            -0.33809513, -0.59206349],
           [ 0.28095245,  0.28095245,  0.37619054,  ..., -0.65555555,
            -0.57619047, -0.38571417]],

          [[-0.77294683, -0.66022539, -0.67632848,  ..., -0.32206106,
            -0.54750401, -1.54589367],
           [-0.70853460, -0.69243151, -0.56360704,  ..., -0.40257636,
            -0.61191624, -1.61030602],
           [-0.72463763, -0.80515295, -0.61191624,  ..., -0.61191624,
            -0.82125598, -1.67471826],
           ...,
           [-0.08051517,  0.43478271,  0.64412248,  ..., -0.41867942,
            -0.56360704, -0.91787434],
           [ 0.03220624,  0.57971025,  0.82125610,  ..., -0.19323659,
            -0.22544271, -0.64412236],
           [ 0.24154601,  0.61191636,  0.90177143,  ..., -0.33816412,
            -0.28985494, -0.27375188]],

          [[-0.67316341, -0.62818587, -0.61319339,  ..., -0.34332830,
            -0.43328333, -1.00299859],
           [-0.61319339, -0.65817088, -0.55322337,  ..., -0.38830581,
            -0.49325335, -1.13793111],
           [-0.61319339, -0.76311839, -0.59820086,  ..., -0.58320838,
            -0.71814090, -1.24287868],
           ...,
           [-0.01349309,  0.46626705,  0.63118458,  ..., -0.34332830,
            -0.43328333, -0.73313338],
           [ 0.07646193,  0.58620709,  0.76611710,  ..., -0.16341813,
            -0.16341813, -0.50824583],
           [ 0.25637197,  0.60119957,  0.84107965,  ..., -0.32833579,
            -0.28335828, -0.20839565]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0884 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 192, vnnlib ID: 192 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.85122108,  -9.83976269,  -4.36141491,  -6.06150818,  -4.73432350,
          -6.12186289,  -4.43167305,  -5.76936531, -10.48191452,  -9.88933086]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [496]; unstable size 496; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 219, 1, 496] with unstable size 218 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 496] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 496] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [218]; unstable size 218; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 218] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 218] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.02029109,  4.69440079,  1.40866971,  0.14043295,  1.46608901,
         -0.25579298,  0.97369635,  5.52549410,  4.68338776]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.85122108,  -9.83976269,  -4.36141491,  -6.06150818,  -4.73432350,
          -6.12186289,  -4.43167305,  -5.76936531, -10.48191452,  -9.88933086]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.19215965, -10.07285023,  -4.68872547,  -6.33513165,  -5.02730227,
           -6.40092230,  -4.53446865,  -6.08764648, -10.82570934, -10.10628033]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15425682]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0068 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0768 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 193, vnnlib ID: 193 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.92484570, -10.87237930, -13.92814922, -13.33872890, -13.33044052,
         -13.41853333, -13.35081768, -12.54118347, -13.63366699, -10.99636936]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [538]; unstable size 538; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 538] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 538] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 538] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 153] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.15295124, -0.39681900,  2.03169203,  1.50405169,  1.48509026,
          1.57360125,  1.36475945,  0.63238287,  1.97044277]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.92484570, -10.87237930, -13.92814922, -13.33872890, -13.33044052,
         -13.41853333, -13.35081768, -12.54118347, -13.63366699, -10.99636936]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.92484570, -10.87237930, -13.92814922, -13.33872890, -13.33044052,
          -13.41853333, -13.35081768, -12.54118347, -13.63366699, -10.99636936]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12399006]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.00476182e+00, -1.05238092e+00, -7.66666651e-01,  ...,
             1.88412726e+00,  1.86825418e+00,  1.86825418e+00],
           [-8.93650770e-01, -8.93650770e-01, -8.30158710e-01,  ...,
             1.88412726e+00,  1.91587329e+00,  1.94761932e+00],
           [-1.00476182e+00, -9.25396800e-01, -9.25396800e-01,  ...,
             1.82063520e+00,  2.01111126e+00,  2.04285717e+00],
           ...,
           [ 1.53968334e-01,  5.87302521e-02, -3.65078375e-02,  ...,
             2.49206424e-01,  2.65079439e-01,  2.65079439e-01],
           [ 1.22222304e-01,  1.22222304e-01,  1.06349289e-01,  ...,
             2.17460394e-01,  2.17460394e-01,  2.49206424e-01],
           [ 4.87301648e-01,  4.23809588e-01,  4.55555618e-01,  ...,
             2.01587379e-01,  1.85714364e-01,  2.01587379e-01]],

          [[-1.01449275e+00, -1.06280184e+00, -7.72946835e-01,  ...,
             2.06119204e+00,  2.06119204e+00,  2.04508877e+00],
           [-9.01771307e-01, -9.01771307e-01, -8.37359071e-01,  ...,
             2.02898574e+00,  2.06119204e+00,  2.07729483e+00],
           [-1.01449275e+00, -9.33977425e-01, -9.33977425e-01,  ...,
             1.91626441e+00,  2.09339786e+00,  2.10950065e+00],
           ...,
           [ 3.22062373e-02, -6.44121096e-02, -1.61030471e-01,  ...,
             1.61030710e-01,  1.77133769e-01,  1.77133769e-01],
           [ 1.22934580e-07,  1.22934580e-07, -1.61029361e-02,  ...,
             1.28824592e-01,  1.28824592e-01,  1.61030710e-01],
           [ 3.70370477e-01,  3.05958241e-01,  3.38164359e-01,  ...,
             1.12721533e-01,  9.66184735e-02,  1.12721533e-01]],

          [[-1.00299859e+00, -1.04797614e+00, -7.93103397e-01,  ...,
             2.05547261e+00,  2.05547261e+00,  2.09295392e+00],
           [-8.98050964e-01, -8.83058429e-01, -8.53073418e-01,  ...,
             2.02548766e+00,  2.07046509e+00,  2.10045004e+00],
           [-1.01799107e+00, -9.28035975e-01, -9.43028450e-01,  ...,
             1.92054021e+00,  2.10045004e+00,  2.10045004e+00],
           ...,
           [ 9.14544314e-02,  3.14844176e-02, -4.34781015e-02,  ...,
             2.56371975e-01,  2.71364480e-01,  2.71364480e-01],
           [ 1.06446937e-01,  1.06446937e-01,  9.14544314e-02,  ...,
             2.26386964e-01,  2.26386964e-01,  2.56371975e-01],
           [ 4.51274544e-01,  3.91304523e-01,  4.21289533e-01,  ...,
             2.11394474e-01,  1.96401969e-01,  2.11394474e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0708 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 194, vnnlib ID: 194 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.54840231, -10.41300774,  -4.38957787,  -7.00133038,  -4.26655102,
          -7.14465809,  -5.40828037,  -6.95093203,  -9.18996620, -10.25354671]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [698]; unstable size 698; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 162, 1, 698] with unstable size 161 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 698] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 698] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [161]; unstable size 161; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 161] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 161] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.69664454,  5.13874531,  2.27037501, -0.31452271,  2.41091108,
          0.62896574,  2.07980633,  4.13404322,  5.02704430]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.54840231, -10.41300774,  -4.38957787,  -7.00133038,  -4.26655102,
          -7.14465809,  -5.40828037,  -6.95093203,  -9.18996620, -10.25354671]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.54840231, -10.41300774,  -4.38957787,  -7.00133038,  -4.26655102,
           -7.14465809,  -5.40828037,  -6.95093203,  -9.18996620, -10.25354671]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12302685]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.09999990, -0.13174593, -0.09999990,  ...,  0.31269848,
             0.29682547,  0.32857150],
           [-0.09999990, -0.13174593, -0.09999990,  ...,  0.37619054,
             0.34444451,  0.36031753],
           [-0.08412688, -0.09999990, -0.06825387,  ...,  0.43968260,
             0.40793657,  0.40793657],
           ...,
           [ 0.21746039,  0.80476195,  0.31269848,  ...,  0.24920642,
             0.53492069,  0.45555562],
           [ 0.43968260,  0.61428577,  0.04285724,  ..., -0.00476181,
             0.37619054,  0.26507944],
           [ 0.67777783,  0.82063496,  0.34444451,  ...,  0.07460327,
             0.51904768,  0.26507944]],

          [[ 0.14492765,  0.08051541,  0.08051541,  ...,  0.40257660,
             0.40257660,  0.45088577],
           [ 0.16103071,  0.11272153,  0.09661847,  ...,  0.43478271,
             0.41867965,  0.45088577],
           [ 0.19323683,  0.16103071,  0.16103071,  ...,  0.48309189,
             0.46698883,  0.46698883],
           ...,
           [ 0.35426742,  0.95008057,  0.46698883,  ...,  0.35426742,
             0.54750413,  0.40257660],
           [ 0.49919492,  0.64412248,  0.09661847,  ...,  0.09661847,
             0.38647354,  0.19323683],
           [ 0.64412248,  0.72463775,  0.28985518,  ...,  0.11272153,
             0.51529801,  0.16103071]],

          [[-0.56821585, -0.61319339, -0.59820086,  ..., -0.29835078,
            -0.29835078, -0.26836565],
           [-0.52323836, -0.55322337, -0.55322337,  ..., -0.28335828,
            -0.26836565, -0.23838064],
           [-0.46326834, -0.49325335, -0.47826082,  ..., -0.26836565,
            -0.25337315, -0.20839565],
           ...,
           [-0.16341813,  0.28635699, -0.11844061,  ..., -0.35832080,
            -0.19340314, -0.32833579],
           [-0.10344811, -0.01349309, -0.46326834,  ..., -0.65817088,
            -0.40329832, -0.61319339],
           [-0.05847061,  0.10644694, -0.25337315,  ..., -0.74812591,
            -0.40329832, -0.76311839]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0741 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 195, vnnlib ID: 195 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.77076054, -7.62575722, -4.14598608, -4.30755711, -4.49275303,
         -4.30263758, -4.76192760, -5.12311316, -9.43562317, -7.12698030]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [451]; unstable size 451; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 451] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 451] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 451] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 141] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.21912003,  2.78573132, -0.07663608,  0.15777636, -0.08433509,
          0.31483480,  0.74149060,  4.69014692,  2.36163020]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.77076054, -7.62575722, -4.14598608, -4.30755711, -4.49275303,
         -4.30263758, -4.76192760, -5.12311316, -9.43562317, -7.12698030]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.77750111, -7.54761982, -4.16146708, -4.15072727, -4.44591999,
          -4.14375591, -4.69891930, -5.00807619, -9.32279205, -7.01225615],
         [-7.77750111, -7.54761982, -4.16146708, -4.15072727, -4.44591999,
          -4.14375591, -4.69891930, -5.00807619, -9.32279205, -7.01225615]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01073980, -0.01771116]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0076 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0847 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 196, vnnlib ID: 196 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.99589634, -8.26478100, -4.99381447, -4.63861275, -5.23205948,
         -4.79511499, -4.13116074, -5.92502117, -6.71752071, -6.90651417]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 226, 1, 527] with unstable size 225 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 527] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [225]; unstable size 225; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 225] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 225] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.63359284,  2.80945683, -0.02099741,  0.19597054,  0.13199283,
         -0.82713413,  0.77079380,  1.11276031,  1.53818464]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.99589634, -8.26478100, -4.99381447, -4.63861275, -5.23205948,
         -4.79511499, -4.13116074, -5.92502117, -6.71752071, -6.90651417]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.99589586, -8.26478100, -4.99381447, -4.63861370, -5.23206043,
          -4.79511547, -4.13116169, -5.92502165, -6.71752071, -6.90651464],
         [-6.99589586, -8.26478100, -4.99381447, -4.63861370, -5.23206043,
          -4.79511547, -4.13116169, -5.92502165, -6.71752071, -6.90651464]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.35520077, -0.50745201]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]],


         [[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0784 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 197, vnnlib ID: 197 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.43056643, -7.67667961, -2.21826839, -5.13023186, -4.35107708,
         -5.29444695, -6.64366817, -6.71203184, -2.96457338, -7.15871954]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [420]; unstable size 420; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 420] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 420] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 420] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 139] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.68506241, 0.59332937, 3.33365774, 2.62052536, 3.49451232, 4.81873131,
         4.89159966, 1.19089448, 5.18301582]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0735 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 198, vnnlib ID: 198 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.62386703, -13.36399269, -10.09908199, -10.70369053, -11.34663582,
         -10.95080948, -11.28316879, -13.42721939, -11.15745735, -13.38610840]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [426]; unstable size 426; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 133, 1, 426] with unstable size 132 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 426] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 426] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [132]; unstable size 132; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 132] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 132] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.35772848, 0.16254222, 0.66209137, 1.36232615, 0.89922100, 1.23943412,
         3.33602238, 1.22553670, 3.36414504]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0602 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 199, vnnlib ID: 199 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.18024397, -5.98002243, -5.06597948, -4.94513512, -5.08981609,
         -5.01497555, -4.47184467, -5.60709667, -6.87614346, -5.18200159]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [543]; unstable size 543; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 543] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 543] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 543] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 203] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.73734796,  0.50935507,  0.11531377,  0.06424892,  0.13350642,
          0.12348175,  0.50896823,  1.37839437, -0.26445580]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.18024397, -5.98002243, -5.06597948, -4.94513512, -5.08981609,
         -5.01497555, -4.47184467, -5.60709667, -6.87614346, -5.18200159]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.03544331, -5.49160671, -5.23422575, -5.08459759, -5.23702908,
          -5.16129684, -4.69914150, -5.69229412, -6.59322977, -4.69896603]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00017548]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0090 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0769 seconds
############# Summary #############
Final verified acc: 47.5% (total 200 examples)
Problem instances count: 200 , total verified (safe/unsat): 95 , total falsified (unsafe/sat): 101 , timeout: 4
mean time for ALL instances (total 200):5.005538762870416, max time: 229.14381742477417
mean time for verified SAFE instances(total 95): 1.153587868339137, max time: 34.732977867126465
mean time for verified (SAFE + UNSAFE) instances (total 196): 0.606858533255908, max time: [1.1906769275665283, 0.07777738571166992, 0.07812356948852539, 0.06951451301574707, 0.08989071846008301, 0.09068632125854492, 0.08501911163330078, 0.07206439971923828, 0.07638144493103027, 0.351778507232666, 0.07107686996459961, 0.07378363609313965, 0.07384037971496582, 0.07065749168395996, 0.06980657577514648, 0.08366250991821289, 0.07622838020324707, 0.07748794555664062, 0.07050442695617676, 0.07416582107543945, 0.0744624137878418, 0.08184599876403809, 0.05980062484741211, 0.07548093795776367, 0.07396793365478516, 0.08465790748596191, 0.06959843635559082, 0.06773662567138672, 0.08152890205383301, 0.08844995498657227, 0.09163618087768555, 0.07073450088500977, 0.08236384391784668, 0.07855987548828125, 0.08024263381958008, 0.08432912826538086, 0.08432626724243164, 0.08024072647094727, 0.07422065734863281, 0.07361578941345215, 0.07532525062561035, 0.07656431198120117, 0.07675623893737793, 0.08162188529968262, 0.07571148872375488, 0.0416569709777832, 0.07910585403442383, 0.0697169303894043, 0.07674503326416016, 0.08025288581848145, 0.07818174362182617, 0.16576671600341797, 0.09368515014648438, 0.0709238052368164, 0.0796973705291748, 0.07753586769104004, 0.07992100715637207, 0.07353019714355469, 0.07206606864929199, 0.06395173072814941, 0.09842133522033691, 0.08379864692687988, 0.0701909065246582, 0.11004352569580078, 0.07686829566955566, 0.07367825508117676, 0.08182191848754883, 0.08405852317810059, 0.07452082633972168, 0.0759894847869873, 0.07488465309143066, 0.07604432106018066, 0.06924200057983398, 0.07553505897521973, 0.07985258102416992, 0.07275533676147461, 0.0824122428894043, 0.07112932205200195, 0.05134010314941406, 0.08266663551330566, 0.07142043113708496, 0.06965374946594238, 0.09343719482421875, 0.09959793090820312, 0.07626891136169434, 0.07396602630615234, 0.07130122184753418, 0.08562350273132324, 0.08575987815856934, 0.07320713996887207, 0.07834935188293457, 0.10004186630249023, 0.10398554801940918, 0.08600187301635742, 0.08837223052978516, 0.0767509937286377, 0.07078027725219727, 0.07411861419677734, 0.08465981483459473, 0.07837128639221191, 0.07686042785644531]
mean time for verified SAFE + TIMEOUT instances (total 99): 10.017720985894252, max time: [223.3457863330841, 229.14381742477417, 217.6086301803589, 212.0652961730957] 
mean time for verified UNSAFE instances (total 101): 0.09260816857366279, max time: 1.1906769275665283
unsafe-pgd (total 101), index: [0, 1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 16, 19, 21, 23, 25, 26, 29, 32, 34, 35, 36, 37, 43, 44, 45, 46, 48, 50, 53, 54, 56, 58, 61, 63, 65, 66, 72, 76, 77, 78, 80, 82, 84, 87, 88, 89, 90, 94, 95, 96, 98, 100, 101, 102, 104, 105, 106, 108, 113, 119, 120, 122, 124, 125, 126, 127, 129, 130, 132, 134, 141, 143, 145, 148, 149, 150, 151, 152, 155, 156, 158, 163, 165, 167, 170, 172, 173, 174, 176, 184, 185, 187, 189, 191, 192, 193, 194, 195, 196, 199]
safe-incomplete (total 84), index: [2, 7, 8, 14, 15, 17, 18, 20, 22, 27, 28, 30, 31, 33, 38, 39, 40, 41, 42, 47, 49, 51, 55, 59, 60, 62, 68, 69, 70, 71, 73, 74, 75, 79, 81, 83, 85, 86, 91, 92, 93, 99, 103, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 121, 131, 133, 135, 136, 138, 139, 140, 142, 144, 146, 147, 153, 154, 157, 160, 161, 162, 164, 166, 168, 171, 175, 177, 179, 180, 182, 186, 190, 197, 198]
safe (total 11), index: [24, 52, 57, 123, 128, 137, 159, 169, 181, 183, 188]
unknown (total 4), index: [64, 67, 97, 178]
